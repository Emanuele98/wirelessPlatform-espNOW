
inverter-control-fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e218  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  0800e3a8  0800e3a8  0001e3a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e934  0800e934  0002025c  2**0
                  CONTENTS
  4 .ARM          00000000  0800e934  0800e934  0002025c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e934  0800e934  0002025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e934  0800e934  0001e934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e938  0800e938  0001e938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000025c  20000000  0800e93c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002025c  2**0
                  CONTENTS
 10 .bss          0000094c  2000025c  2000025c  0002025c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ba8  20000ba8  0002025c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c573  00000000  00000000  000202cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000031dc  00000000  00000000  0003c842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ad0  00000000  00000000  0003fa20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001578  00000000  00000000  000414f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000247c3  00000000  00000000  00042a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f59d  00000000  00000000  0006722b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e4e9e  00000000  00000000  000867c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000089fc  00000000  00000000  0016b668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b6  00000000  00000000  00174064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000025c 	.word	0x2000025c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e390 	.word	0x0800e390

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000260 	.word	0x20000260
 80001cc:	0800e390 	.word	0x0800e390

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2lz>:
 8000c08:	b538      	push	{r3, r4, r5, lr}
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	4604      	mov	r4, r0
 8000c10:	460d      	mov	r5, r1
 8000c12:	f7ff ff73 	bl	8000afc <__aeabi_dcmplt>
 8000c16:	b928      	cbnz	r0, 8000c24 <__aeabi_d2lz+0x1c>
 8000c18:	4620      	mov	r0, r4
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c20:	f000 b80a 	b.w	8000c38 <__aeabi_d2ulz>
 8000c24:	4620      	mov	r0, r4
 8000c26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c2a:	f000 f805 	bl	8000c38 <__aeabi_d2ulz>
 8000c2e:	4240      	negs	r0, r0
 8000c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c34:	bd38      	pop	{r3, r4, r5, pc}
 8000c36:	bf00      	nop

08000c38 <__aeabi_d2ulz>:
 8000c38:	b5d0      	push	{r4, r6, r7, lr}
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__aeabi_d2ulz+0x34>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4606      	mov	r6, r0
 8000c40:	460f      	mov	r7, r1
 8000c42:	f7ff fce9 	bl	8000618 <__aeabi_dmul>
 8000c46:	f7ff ffbf 	bl	8000bc8 <__aeabi_d2uiz>
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	f7ff fc6a 	bl	8000524 <__aeabi_ui2d>
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <__aeabi_d2ulz+0x38>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	f7ff fce0 	bl	8000618 <__aeabi_dmul>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	4639      	mov	r1, r7
 8000c60:	f7ff fb22 	bl	80002a8 <__aeabi_dsub>
 8000c64:	f7ff ffb0 	bl	8000bc8 <__aeabi_d2uiz>
 8000c68:	4621      	mov	r1, r4
 8000c6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c6c:	3df00000 	.word	0x3df00000
 8000c70:	41f00000 	.word	0x41f00000

08000c74 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d002      	beq.n	8000c8a <case_insensitive_strcmp+0x16>
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e056      	b.n	8000d3c <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d10d      	bne.n	8000cb2 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e050      	b.n	8000d3c <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e04a      	b.n	8000d3c <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	73fb      	strb	r3, [r7, #15]
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	4a22      	ldr	r2, [pc, #136]	; (8000d48 <case_insensitive_strcmp+0xd4>)
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d103      	bne.n	8000cd2 <case_insensitive_strcmp+0x5e>
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	f103 0220 	add.w	r2, r3, #32
 8000cd0:	e000      	b.n	8000cd4 <case_insensitive_strcmp+0x60>
 8000cd2:	7bfa      	ldrb	r2, [r7, #15]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	73bb      	strb	r3, [r7, #14]
 8000cda:	7bbb      	ldrb	r3, [r7, #14]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	491a      	ldr	r1, [pc, #104]	; (8000d48 <case_insensitive_strcmp+0xd4>)
 8000ce0:	440b      	add	r3, r1
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d102      	bne.n	8000cf2 <case_insensitive_strcmp+0x7e>
 8000cec:	7bbb      	ldrb	r3, [r7, #14]
 8000cee:	3320      	adds	r3, #32
 8000cf0:	e000      	b.n	8000cf4 <case_insensitive_strcmp+0x80>
 8000cf2:	7bbb      	ldrb	r3, [r7, #14]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d0d0      	beq.n	8000c9a <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	737b      	strb	r3, [r7, #13]
 8000cfe:	7b7b      	ldrb	r3, [r7, #13]
 8000d00:	3301      	adds	r3, #1
 8000d02:	4a11      	ldr	r2, [pc, #68]	; (8000d48 <case_insensitive_strcmp+0xd4>)
 8000d04:	4413      	add	r3, r2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d103      	bne.n	8000d18 <case_insensitive_strcmp+0xa4>
 8000d10:	7b7b      	ldrb	r3, [r7, #13]
 8000d12:	f103 0220 	add.w	r2, r3, #32
 8000d16:	e000      	b.n	8000d1a <case_insensitive_strcmp+0xa6>
 8000d18:	7b7a      	ldrb	r2, [r7, #13]
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	733b      	strb	r3, [r7, #12]
 8000d20:	7b3b      	ldrb	r3, [r7, #12]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4908      	ldr	r1, [pc, #32]	; (8000d48 <case_insensitive_strcmp+0xd4>)
 8000d26:	440b      	add	r3, r1
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d102      	bne.n	8000d38 <case_insensitive_strcmp+0xc4>
 8000d32:	7b3b      	ldrb	r3, [r7, #12]
 8000d34:	3320      	adds	r3, #32
 8000d36:	e000      	b.n	8000d3a <case_insensitive_strcmp+0xc6>
 8000d38:	7b3b      	ldrb	r3, [r7, #12]
 8000d3a:	1ad3      	subs	r3, r2, r3
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	0800e560 	.word	0x0800e560

08000d4c <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2028      	movs	r0, #40	; 0x28
 8000d5a:	4798      	blx	r3
 8000d5c:	60f8      	str	r0, [r7, #12]
    if (node)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d004      	beq.n	8000d6e <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000d64:	2228      	movs	r2, #40	; 0x28
 8000d66:	2100      	movs	r1, #0
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f00a fe5a 	bl	800ba22 <memset>
    }

    return node;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000d84:	e037      	b.n	8000df6 <cJSON_Delete+0x7e>
    {
        next = item->next;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d108      	bne.n	8000daa <cJSON_Delete+0x32>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d004      	beq.n	8000daa <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ffe7 	bl	8000d78 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d109      	bne.n	8000dca <cJSON_Delete+0x52>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d005      	beq.n	8000dca <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <cJSON_Delete+0x90>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	6912      	ldr	r2, [r2, #16]
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d109      	bne.n	8000dea <cJSON_Delete+0x72>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a1b      	ldr	r3, [r3, #32]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d005      	beq.n	8000dea <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <cJSON_Delete+0x90>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	6a12      	ldr	r2, [r2, #32]
 8000de6:	4610      	mov	r0, r2
 8000de8:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <cJSON_Delete+0x90>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	4798      	blx	r3
        item = next;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1c4      	bne.n	8000d86 <cJSON_Delete+0xe>
    }
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000000 	.word	0x20000000

08000e0c <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8000e10:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	0000      	movs	r0, r0
	...

08000e20 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b098      	sub	sp, #96	; 0x60
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
    double number = 0;
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	f04f 0300 	mov.w	r3, #0
 8000e32:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8000e3a:	f7ff ffe7 	bl	8000e0c <get_decimal_point>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <parse_number+0x36>
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <parse_number+0x3a>
    {
        return false;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e0a0      	b.n	8000f9c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e5e:	e03d      	b.n	8000edc <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	6899      	ldr	r1, [r3, #8]
 8000e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e6a:	440b      	add	r3, r1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b45      	cmp	r3, #69	; 0x45
 8000e72:	dc17      	bgt.n	8000ea4 <parse_number+0x84>
 8000e74:	2b2b      	cmp	r3, #43	; 0x2b
 8000e76:	db40      	blt.n	8000efa <parse_number+0xda>
 8000e78:	3b2b      	subs	r3, #43	; 0x2b
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	409a      	lsls	r2, r3
 8000e7e:	4b4c      	ldr	r3, [pc, #304]	; (8000fb0 <parse_number+0x190>)
 8000e80:	4013      	ands	r3, r2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	bf14      	ite	ne
 8000e86:	2301      	movne	r3, #1
 8000e88:	2300      	moveq	r3, #0
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d10b      	bne.n	8000ea8 <parse_number+0x88>
 8000e90:	f002 0308 	and.w	r3, r2, #8
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	bf14      	ite	ne
 8000e98:	2301      	movne	r3, #1
 8000e9a:	2300      	moveq	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d111      	bne.n	8000ec6 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8000ea2:	e02a      	b.n	8000efa <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8000ea4:	2b65      	cmp	r3, #101	; 0x65
 8000ea6:	d128      	bne.n	8000efa <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	6899      	ldr	r1, [r3, #8]
 8000eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000eb2:	440b      	add	r3, r1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	7819      	ldrb	r1, [r3, #0]
 8000eb8:	f107 0208 	add.w	r2, r7, #8
 8000ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ebe:	4413      	add	r3, r2
 8000ec0:	460a      	mov	r2, r1
 8000ec2:	701a      	strb	r2, [r3, #0]
                break;
 8000ec4:	e007      	b.n	8000ed6 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 8000ec6:	f107 0208 	add.w	r2, r7, #8
 8000eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ecc:	4413      	add	r3, r2
 8000ece:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000ed2:	701a      	strb	r2, [r3, #0]
                break;
 8000ed4:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8000ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ed8:	3301      	adds	r3, #1
 8000eda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ede:	2b3e      	cmp	r3, #62	; 0x3e
 8000ee0:	d80d      	bhi.n	8000efe <parse_number+0xde>
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00a      	beq.n	8000efe <parse_number+0xde>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000eee:	441a      	add	r2, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d3b3      	bcc.n	8000e60 <parse_number+0x40>
        }
    }
loop_end:
 8000ef8:	e001      	b.n	8000efe <parse_number+0xde>
                goto loop_end;
 8000efa:	bf00      	nop
 8000efc:	e000      	b.n	8000f00 <parse_number+0xe0>
loop_end:
 8000efe:	bf00      	nop
    number_c_string[i] = '\0';
 8000f00:	f107 0208 	add.w	r2, r7, #8
 8000f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f06:	4413      	add	r3, r2
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8000f0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f009 fffe 	bl	800af18 <strtod>
 8000f1c:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8000f20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d101      	bne.n	8000f2e <parse_number+0x10e>
    {
        return false; /* parse_error */
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e036      	b.n	8000f9c <parse_number+0x17c>
    }

    item->valuedouble = number;
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000f34:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8000f38:	a31b      	add	r3, pc, #108	; (adr r3, 8000fa8 <parse_number+0x188>)
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000f42:	f7ff fdef 	bl	8000b24 <__aeabi_dcmpge>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d004      	beq.n	8000f56 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000f52:	615a      	str	r2, [r3, #20]
 8000f54:	e015      	b.n	8000f82 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <parse_number+0x194>)
 8000f5c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000f60:	f7ff fdd6 	bl	8000b10 <__aeabi_dcmple>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d004      	beq.n	8000f74 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f70:	615a      	str	r2, [r3, #20]
 8000f72:	e006      	b.n	8000f82 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8000f74:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000f78:	f7ff fdfe 	bl	8000b78 <__aeabi_d2iz>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2208      	movs	r2, #8
 8000f86:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000f8e:	f107 0208 	add.w	r2, r7, #8
 8000f92:	1a8a      	subs	r2, r1, r2
 8000f94:	441a      	add	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	609a      	str	r2, [r3, #8]
    return true;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3760      	adds	r7, #96	; 0x60
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	ffc00000 	.word	0xffc00000
 8000fac:	41dfffff 	.word	0x41dfffff
 8000fb0:	04007fe5 	.word	0x04007fe5
 8000fb4:	c1e00000 	.word	0xc1e00000

08000fb8 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	e04c      	b.n	8001068 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b2f      	cmp	r3, #47	; 0x2f
 8000fd8:	d90f      	bls.n	8000ffa <parse_hex4+0x42>
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4413      	add	r3, r2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b39      	cmp	r3, #57	; 0x39
 8000fe4:	d809      	bhi.n	8000ffa <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4413      	add	r3, r2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	3b30      	subs	r3, #48	; 0x30
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	e02d      	b.n	8001056 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4413      	add	r3, r2
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b40      	cmp	r3, #64	; 0x40
 8001004:	d90f      	bls.n	8001026 <parse_hex4+0x6e>
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4413      	add	r3, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b46      	cmp	r3, #70	; 0x46
 8001010:	d809      	bhi.n	8001026 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4413      	add	r3, r2
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	3b37      	subs	r3, #55	; 0x37
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	e017      	b.n	8001056 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4413      	add	r3, r2
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b60      	cmp	r3, #96	; 0x60
 8001030:	d90f      	bls.n	8001052 <parse_hex4+0x9a>
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4413      	add	r3, r2
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b66      	cmp	r3, #102	; 0x66
 800103c:	d809      	bhi.n	8001052 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4413      	add	r3, r2
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	3b57      	subs	r3, #87	; 0x57
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	e001      	b.n	8001056 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001052:	2300      	movs	r3, #0
 8001054:	e00c      	b.n	8001070 <parse_hex4+0xb8>
        }

        if (i < 3)
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d802      	bhi.n	8001062 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	3301      	adds	r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	2b03      	cmp	r3, #3
 800106c:	d9af      	bls.n	8000fce <parse_hex4+0x16>
        }
    }

    return h;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b05      	cmp	r3, #5
 80010b4:	f340 80b7 	ble.w	8001226 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	3302      	adds	r3, #2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff7b 	bl	8000fb8 <parse_hex4>
 80010c2:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80010ca:	d304      	bcc.n	80010d6 <utf16_literal_to_utf8+0x5a>
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80010d2:	f0c0 80aa 	bcc.w	800122a <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80010dc:	d337      	bcc.n	800114e <utf16_literal_to_utf8+0xd2>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80010e4:	d233      	bcs.n	800114e <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	3306      	adds	r3, #6
 80010ea:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80010f0:	230c      	movs	r3, #12
 80010f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b05      	cmp	r3, #5
 80010fe:	f340 8096 	ble.w	800122e <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b5c      	cmp	r3, #92	; 0x5c
 8001108:	f040 8093 	bne.w	8001232 <utf16_literal_to_utf8+0x1b6>
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3301      	adds	r3, #1
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b75      	cmp	r3, #117	; 0x75
 8001114:	f040 808d 	bne.w	8001232 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3302      	adds	r3, #2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff4b 	bl	8000fb8 <parse_hex4>
 8001122:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800112a:	f0c0 8084 	bcc.w	8001236 <utf16_literal_to_utf8+0x1ba>
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001134:	d27f      	bcs.n	8001236 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	029a      	lsls	r2, r3, #10
 800113a:	4b43      	ldr	r3, [pc, #268]	; (8001248 <utf16_literal_to_utf8+0x1cc>)
 800113c:	4013      	ands	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001144:	4313      	orrs	r3, r2
 8001146:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800114c:	e004      	b.n	8001158 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800114e:	2306      	movs	r3, #6
 8001150:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	2b7f      	cmp	r3, #127	; 0x7f
 800115c:	d803      	bhi.n	8001166 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800115e:	2301      	movs	r3, #1
 8001160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001164:	e01f      	b.n	80011a6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800116c:	d206      	bcs.n	800117c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800116e:	2302      	movs	r3, #2
 8001170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001174:	23c0      	movs	r3, #192	; 0xc0
 8001176:	f887 3020 	strb.w	r3, [r7, #32]
 800117a:	e014      	b.n	80011a6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001182:	d206      	bcs.n	8001192 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001184:	2303      	movs	r3, #3
 8001186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800118a:	23e0      	movs	r3, #224	; 0xe0
 800118c:	f887 3020 	strb.w	r3, [r7, #32]
 8001190:	e009      	b.n	80011a6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001198:	d24f      	bcs.n	800123a <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800119a:	2304      	movs	r3, #4
 800119c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80011a0:	23f0      	movs	r3, #240	; 0xf0
 80011a2:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80011a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80011b0:	e015      	b.n	80011de <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6819      	ldr	r1, [r3, #0]
 80011c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011c4:	440b      	add	r3, r1
 80011c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	099b      	lsrs	r3, r3, #6
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80011d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011d8:	3b01      	subs	r3, #1
 80011da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80011de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1e5      	bne.n	80011b2 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80011e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d909      	bls.n	8001202 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	b2d9      	uxtb	r1, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e007      	b.n	8001212 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	b2da      	uxtb	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800121a:	441a      	add	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001220:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001224:	e00b      	b.n	800123e <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001226:	bf00      	nop
 8001228:	e008      	b.n	800123c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800122a:	bf00      	nop
 800122c:	e006      	b.n	800123c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800122e:	bf00      	nop
 8001230:	e004      	b.n	800123c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001232:	bf00      	nop
 8001234:	e002      	b.n	800123c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001236:	bf00      	nop
 8001238:	e000      	b.n	800123c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800123a:	bf00      	nop

fail:
    return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3728      	adds	r7, #40	; 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	000ffc00 	.word	0x000ffc00

0800124c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	3301      	adds	r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	3301      	adds	r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	4413      	add	r3, r2
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b22      	cmp	r3, #34	; 0x22
 8001288:	f040 8103 	bne.w	8001492 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001294:	e017      	b.n	80012c6 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b5c      	cmp	r3, #92	; 0x5c
 800129c:	d110      	bne.n	80012c0 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	f080 80f1 	bcs.w	8001496 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	3301      	adds	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
                input_end++;
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	3301      	adds	r3, #1
 80012be:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	3301      	adds	r3, #1
 80012c4:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6a3a      	ldr	r2, [r7, #32]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d203      	bcs.n	80012e0 <parse_string+0x94>
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b22      	cmp	r3, #34	; 0x22
 80012de:	d1da      	bne.n	8001296 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6a3a      	ldr	r2, [r7, #32]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	f080 80d3 	bcs.w	800149a <parse_string+0x24e>
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b22      	cmp	r3, #34	; 0x22
 80012fa:	f040 80ce 	bne.w	800149a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	4413      	add	r3, r2
 8001308:	6a3a      	ldr	r2, [r7, #32]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	461a      	mov	r2, r3
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	3201      	adds	r2, #1
 800131c:	4610      	mov	r0, r2
 800131e:	4798      	blx	r3
 8001320:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80ba 	beq.w	800149e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800132e:	e094      	b.n	800145a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b5c      	cmp	r3, #92	; 0x5c
 8001336:	d008      	beq.n	800134a <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800133a:	1c53      	adds	r3, r2, #1
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1c59      	adds	r1, r3, #1
 8001342:	60f9      	str	r1, [r7, #12]
 8001344:	7812      	ldrb	r2, [r2, #0]
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	e087      	b.n	800145a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800134a:	2302      	movs	r3, #2
 800134c:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800134e:	6a3a      	ldr	r2, [r7, #32]
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	f340 80a4 	ble.w	80014a2 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	3301      	adds	r3, #1
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b75      	cmp	r3, #117	; 0x75
 8001362:	f300 80a0 	bgt.w	80014a6 <parse_string+0x25a>
 8001366:	2b5c      	cmp	r3, #92	; 0x5c
 8001368:	da04      	bge.n	8001374 <parse_string+0x128>
 800136a:	2b22      	cmp	r3, #34	; 0x22
 800136c:	d05c      	beq.n	8001428 <parse_string+0x1dc>
 800136e:	2b2f      	cmp	r3, #47	; 0x2f
 8001370:	d05a      	beq.n	8001428 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001372:	e098      	b.n	80014a6 <parse_string+0x25a>
            switch (input_pointer[1])
 8001374:	3b5c      	subs	r3, #92	; 0x5c
 8001376:	2b19      	cmp	r3, #25
 8001378:	f200 8095 	bhi.w	80014a6 <parse_string+0x25a>
 800137c:	a201      	add	r2, pc, #4	; (adr r2, 8001384 <parse_string+0x138>)
 800137e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001382:	bf00      	nop
 8001384:	08001429 	.word	0x08001429
 8001388:	080014a7 	.word	0x080014a7
 800138c:	080014a7 	.word	0x080014a7
 8001390:	080014a7 	.word	0x080014a7
 8001394:	080014a7 	.word	0x080014a7
 8001398:	080014a7 	.word	0x080014a7
 800139c:	080013ed 	.word	0x080013ed
 80013a0:	080014a7 	.word	0x080014a7
 80013a4:	080014a7 	.word	0x080014a7
 80013a8:	080014a7 	.word	0x080014a7
 80013ac:	080013f9 	.word	0x080013f9
 80013b0:	080014a7 	.word	0x080014a7
 80013b4:	080014a7 	.word	0x080014a7
 80013b8:	080014a7 	.word	0x080014a7
 80013bc:	080014a7 	.word	0x080014a7
 80013c0:	080014a7 	.word	0x080014a7
 80013c4:	080014a7 	.word	0x080014a7
 80013c8:	080014a7 	.word	0x080014a7
 80013cc:	08001405 	.word	0x08001405
 80013d0:	080014a7 	.word	0x080014a7
 80013d4:	080014a7 	.word	0x080014a7
 80013d8:	080014a7 	.word	0x080014a7
 80013dc:	08001411 	.word	0x08001411
 80013e0:	080014a7 	.word	0x080014a7
 80013e4:	0800141d 	.word	0x0800141d
 80013e8:	08001439 	.word	0x08001439
                    *output_pointer++ = '\b';
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	60fa      	str	r2, [r7, #12]
 80013f2:	2208      	movs	r2, #8
 80013f4:	701a      	strb	r2, [r3, #0]
                    break;
 80013f6:	e02c      	b.n	8001452 <parse_string+0x206>
                    *output_pointer++ = '\f';
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	60fa      	str	r2, [r7, #12]
 80013fe:	220c      	movs	r2, #12
 8001400:	701a      	strb	r2, [r3, #0]
                    break;
 8001402:	e026      	b.n	8001452 <parse_string+0x206>
                    *output_pointer++ = '\n';
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	60fa      	str	r2, [r7, #12]
 800140a:	220a      	movs	r2, #10
 800140c:	701a      	strb	r2, [r3, #0]
                    break;
 800140e:	e020      	b.n	8001452 <parse_string+0x206>
                    *output_pointer++ = '\r';
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	60fa      	str	r2, [r7, #12]
 8001416:	220d      	movs	r2, #13
 8001418:	701a      	strb	r2, [r3, #0]
                    break;
 800141a:	e01a      	b.n	8001452 <parse_string+0x206>
                    *output_pointer++ = '\t';
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	60fa      	str	r2, [r7, #12]
 8001422:	2209      	movs	r2, #9
 8001424:	701a      	strb	r2, [r3, #0]
                    break;
 8001426:	e014      	b.n	8001452 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1c59      	adds	r1, r3, #1
 8001430:	60f9      	str	r1, [r7, #12]
 8001432:	7812      	ldrb	r2, [r2, #0]
 8001434:	701a      	strb	r2, [r3, #0]
                    break;
 8001436:	e00c      	b.n	8001452 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	461a      	mov	r2, r3
 800143e:	6a39      	ldr	r1, [r7, #32]
 8001440:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001442:	f7ff fe1b 	bl	800107c <utf16_literal_to_utf8>
 8001446:	4603      	mov	r3, r0
 8001448:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800144a:	7dfb      	ldrb	r3, [r7, #23]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d02c      	beq.n	80014aa <parse_string+0x25e>
                    break;
 8001450:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001452:	7dfb      	ldrb	r3, [r7, #23]
 8001454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001456:	4413      	add	r3, r2
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800145a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	429a      	cmp	r2, r3
 8001460:	f4ff af66 	bcc.w	8001330 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2210      	movs	r2, #16
 800146e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6a3a      	ldr	r2, [r7, #32]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	461a      	mov	r2, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	609a      	str	r2, [r3, #8]

    return true;
 800148e:	2301      	movs	r3, #1
 8001490:	e01e      	b.n	80014d0 <parse_string+0x284>
        goto fail;
 8001492:	bf00      	nop
 8001494:	e00a      	b.n	80014ac <parse_string+0x260>
                    goto fail;
 8001496:	bf00      	nop
 8001498:	e008      	b.n	80014ac <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800149a:	bf00      	nop
 800149c:	e006      	b.n	80014ac <parse_string+0x260>
            goto fail; /* allocation failure */
 800149e:	bf00      	nop
 80014a0:	e004      	b.n	80014ac <parse_string+0x260>
                goto fail;
 80014a2:	bf00      	nop
 80014a4:	e002      	b.n	80014ac <parse_string+0x260>
                    goto fail;
 80014a6:	bf00      	nop
 80014a8:	e000      	b.n	80014ac <parse_string+0x260>
                        goto fail;
 80014aa:	bf00      	nop

fail:
    if (output != NULL)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	69f8      	ldr	r0, [r7, #28]
 80014b8:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	609a      	str	r2, [r3, #8]
    }

    return false;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <buffer_skip_whitespace+0x16>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e02c      	b.n	800154c <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <buffer_skip_whitespace+0x2c>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	429a      	cmp	r2, r3
 8001502:	d306      	bcc.n	8001512 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	e021      	b.n	800154c <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00d      	beq.n	8001534 <buffer_skip_whitespace+0x5c>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	d207      	bcs.n	8001534 <buffer_skip_whitespace+0x5c>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	4413      	add	r3, r2
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b20      	cmp	r3, #32
 8001532:	d9e9      	bls.n	8001508 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	d104      	bne.n	800154a <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	1e5a      	subs	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800154a:	687b      	ldr	r3, [r7, #4]
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <skip_utf8_bom+0x1e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <skip_utf8_bom+0x1e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <skip_utf8_bom+0x22>
    {
        return NULL;
 8001576:	2300      	movs	r3, #0
 8001578:	e01c      	b.n	80015b4 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d018      	beq.n	80015b2 <skip_utf8_bom+0x5a>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	1d1a      	adds	r2, r3, #4
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	d211      	bcs.n	80015b2 <skip_utf8_bom+0x5a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	4413      	add	r3, r2
 8001598:	2203      	movs	r2, #3
 800159a:	4908      	ldr	r1, [pc, #32]	; (80015bc <skip_utf8_bom+0x64>)
 800159c:	4618      	mov	r0, r3
 800159e:	f00a fa48 	bl	800ba32 <strncmp>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d104      	bne.n	80015b2 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	1cda      	adds	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80015b2:	687b      	ldr	r3, [r7, #4]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	0800e3e0 	.word	0x0800e3e0

080015c0 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e00c      	b.n	80015f0 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f7fe fe5a 	bl	8000290 <strlen>
 80015dc:	4603      	mov	r3, r0
 80015de:	3301      	adds	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	6979      	ldr	r1, [r7, #20]
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 f805 	bl	80015f8 <cJSON_ParseWithLengthOpts>
 80015ee:	4603      	mov	r3, r0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08e      	sub	sp, #56	; 0x38
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001606:	f107 0318 	add.w	r3, r7, #24
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800161a:	2300      	movs	r3, #0
 800161c:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800161e:	4b41      	ldr	r3, [pc, #260]	; (8001724 <cJSON_ParseWithLengthOpts+0x12c>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001624:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <cJSON_ParseWithLengthOpts+0x12c>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d042      	beq.n	80016b6 <cJSON_ParseWithLengthOpts+0xbe>
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d03f      	beq.n	80016b6 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001642:	4a39      	ldr	r2, [pc, #228]	; (8001728 <cJSON_ParseWithLengthOpts+0x130>)
 8001644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001648:	ca07      	ldmia	r2, {r0, r1, r2}
 800164a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800164e:	4836      	ldr	r0, [pc, #216]	; (8001728 <cJSON_ParseWithLengthOpts+0x130>)
 8001650:	f7ff fb7c 	bl	8000d4c <cJSON_New_Item>
 8001654:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8001656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001658:	2b00      	cmp	r3, #0
 800165a:	d02e      	beq.n	80016ba <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff79 	bl	8001558 <skip_utf8_bom>
 8001666:	4603      	mov	r3, r0
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff35 	bl	80014d8 <buffer_skip_whitespace>
 800166e:	4603      	mov	r3, r0
 8001670:	4619      	mov	r1, r3
 8001672:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001674:	f000 f868 	bl	8001748 <parse_value>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d01f      	beq.n	80016be <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00e      	beq.n	80016a2 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001684:	f107 0318 	add.w	r3, r7, #24
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff25 	bl	80014d8 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800168e:	6a3a      	ldr	r2, [r7, #32]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	429a      	cmp	r2, r3
 8001694:	d215      	bcs.n	80016c2 <cJSON_ParseWithLengthOpts+0xca>
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	4413      	add	r3, r2
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10f      	bne.n	80016c2 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	441a      	add	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	601a      	str	r2, [r3, #0]
    }

    return item;
 80016b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b4:	e031      	b.n	800171a <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 80016b6:	bf00      	nop
 80016b8:	e004      	b.n	80016c4 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80016ba:	bf00      	nop
 80016bc:	e002      	b.n	80016c4 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80016be:	bf00      	nop
 80016c0:	e000      	b.n	80016c4 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 80016c2:	bf00      	nop

fail:
    if (item != NULL)
 80016c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 80016ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016cc:	f7ff fb54 	bl	8000d78 <cJSON_Delete>
    }

    if (value != NULL)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d020      	beq.n	8001718 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 80016de:	6a3a      	ldr	r2, [r7, #32]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d202      	bcs.n	80016ec <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	e005      	b.n	80016f8 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d004      	beq.n	8001708 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	441a      	add	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <cJSON_ParseWithLengthOpts+0x12c>)
 800170a:	461a      	mov	r2, r3
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001714:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3738      	adds	r7, #56	; 0x38
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000278 	.word	0x20000278
 8001728:	20000000 	.word	0x20000000

0800172c <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff41 	bl	80015c0 <cJSON_ParseWithOpts>
 800173e:	4603      	mov	r3, r0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <parse_value+0x18>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <parse_value+0x1c>
    {
        return false; /* no input */
 8001760:	2300      	movs	r3, #0
 8001762:	e0d2      	b.n	800190a <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d01d      	beq.n	80017a6 <parse_value+0x5e>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	1d1a      	adds	r2, r3, #4
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	d816      	bhi.n	80017a6 <parse_value+0x5e>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4413      	add	r3, r2
 8001782:	2204      	movs	r2, #4
 8001784:	4963      	ldr	r1, [pc, #396]	; (8001914 <parse_value+0x1cc>)
 8001786:	4618      	mov	r0, r3
 8001788:	f00a f953 	bl	800ba32 <strncmp>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2204      	movs	r2, #4
 8001796:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	1d1a      	adds	r2, r3, #4
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	609a      	str	r2, [r3, #8]
        return true;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0b1      	b.n	800190a <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d01d      	beq.n	80017e8 <parse_value+0xa0>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	1d5a      	adds	r2, r3, #5
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d816      	bhi.n	80017e8 <parse_value+0xa0>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	4413      	add	r3, r2
 80017c4:	2205      	movs	r2, #5
 80017c6:	4954      	ldr	r1, [pc, #336]	; (8001918 <parse_value+0x1d0>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f00a f932 	bl	800ba32 <strncmp>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d109      	bne.n	80017e8 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	1d5a      	adds	r2, r3, #5
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	609a      	str	r2, [r3, #8]
        return true;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e090      	b.n	800190a <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d020      	beq.n	8001830 <parse_value+0xe8>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	1d1a      	adds	r2, r3, #4
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d819      	bhi.n	8001830 <parse_value+0xe8>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4413      	add	r3, r2
 8001806:	2204      	movs	r2, #4
 8001808:	4944      	ldr	r1, [pc, #272]	; (800191c <parse_value+0x1d4>)
 800180a:	4618      	mov	r0, r3
 800180c:	f00a f911 	bl	800ba32 <strncmp>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10c      	bne.n	8001830 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2202      	movs	r2, #2
 800181a:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	1d1a      	adds	r2, r3, #4
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	609a      	str	r2, [r3, #8]
        return true;
 800182c:	2301      	movs	r3, #1
 800182e:	e06c      	b.n	800190a <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d013      	beq.n	800185e <parse_value+0x116>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	429a      	cmp	r2, r3
 8001840:	d20d      	bcs.n	800185e <parse_value+0x116>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b22      	cmp	r3, #34	; 0x22
 8001850:	d105      	bne.n	800185e <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001852:	6839      	ldr	r1, [r7, #0]
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff fcf9 	bl	800124c <parse_string>
 800185a:	4603      	mov	r3, r0
 800185c:	e055      	b.n	800190a <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d023      	beq.n	80018ac <parse_value+0x164>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	d21d      	bcs.n	80018ac <parse_value+0x164>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4413      	add	r3, r2
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b2d      	cmp	r3, #45	; 0x2d
 800187e:	d00f      	beq.n	80018a0 <parse_value+0x158>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b2f      	cmp	r3, #47	; 0x2f
 800188e:	d90d      	bls.n	80018ac <parse_value+0x164>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4413      	add	r3, r2
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b39      	cmp	r3, #57	; 0x39
 800189e:	d805      	bhi.n	80018ac <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 80018a0:	6839      	ldr	r1, [r7, #0]
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff fabc 	bl	8000e20 <parse_number>
 80018a8:	4603      	mov	r3, r0
 80018aa:	e02e      	b.n	800190a <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d013      	beq.n	80018da <parse_value+0x192>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d20d      	bcs.n	80018da <parse_value+0x192>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	4413      	add	r3, r2
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b5b      	cmp	r3, #91	; 0x5b
 80018cc:	d105      	bne.n	80018da <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80018ce:	6839      	ldr	r1, [r7, #0]
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f825 	bl	8001920 <parse_array>
 80018d6:	4603      	mov	r3, r0
 80018d8:	e017      	b.n	800190a <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <parse_value+0x1c0>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d20d      	bcs.n	8001908 <parse_value+0x1c0>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	4413      	add	r3, r2
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b7b      	cmp	r3, #123	; 0x7b
 80018fa:	d105      	bne.n	8001908 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 80018fc:	6839      	ldr	r1, [r7, #0]
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f8d2 	bl	8001aa8 <parse_object>
 8001904:	4603      	mov	r3, r0
 8001906:	e000      	b.n	800190a <parse_value+0x1c2>
    }

    return false;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	0800e3b4 	.word	0x0800e3b4
 8001918:	0800e3e4 	.word	0x0800e3e4
 800191c:	0800e3ec 	.word	0x0800e3ec

08001920 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800193a:	d301      	bcc.n	8001940 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800193c:	2300      	movs	r3, #0
 800193e:	e0af      	b.n	8001aa0 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	4413      	add	r3, r2
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b5b      	cmp	r3, #91	; 0x5b
 8001958:	f040 8094 	bne.w	8001a84 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001966:	6838      	ldr	r0, [r7, #0]
 8001968:	f7ff fdb6 	bl	80014d8 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00d      	beq.n	800198e <parse_array+0x6e>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	d207      	bcs.n	800198e <parse_array+0x6e>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	4413      	add	r3, r2
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b5d      	cmp	r3, #93	; 0x5d
 800198c:	d061      	beq.n	8001a52 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <parse_array+0x80>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	d305      	bcc.n	80019ac <parse_array+0x8c>
    {
        input_buffer->offset--;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	1e5a      	subs	r2, r3, #1
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	609a      	str	r2, [r3, #8]
        goto fail;
 80019aa:	e072      	b.n	8001a92 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	1e5a      	subs	r2, r3, #1
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	3310      	adds	r3, #16
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f9c6 	bl	8000d4c <cJSON_New_Item>
 80019c0:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d05f      	beq.n	8001a88 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d104      	bne.n	80019d8 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	e007      	b.n	80019e8 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80019f2:	6838      	ldr	r0, [r7, #0]
 80019f4:	f7ff fd70 	bl	80014d8 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80019f8:	6839      	ldr	r1, [r7, #0]
 80019fa:	6938      	ldr	r0, [r7, #16]
 80019fc:	f7ff fea4 	bl	8001748 <parse_value>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d042      	beq.n	8001a8c <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001a06:	6838      	ldr	r0, [r7, #0]
 8001a08:	f7ff fd66 	bl	80014d8 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00d      	beq.n	8001a2e <parse_array+0x10e>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d207      	bcs.n	8001a2e <parse_array+0x10e>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	4413      	add	r3, r2
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b2c      	cmp	r3, #44	; 0x2c
 8001a2c:	d0c3      	beq.n	80019b6 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d02d      	beq.n	8001a90 <parse_array+0x170>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d227      	bcs.n	8001a90 <parse_array+0x170>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	4413      	add	r3, r2
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b5d      	cmp	r3, #93	; 0x5d
 8001a4e:	d11f      	bne.n	8001a90 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001a50:	e000      	b.n	8001a54 <parse_array+0x134>
        goto success;
 8001a52:	bf00      	nop
    input_buffer->depth--;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	1e5a      	subs	r2, r3, #1
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <parse_array+0x14a>
        head->prev = current_item;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	609a      	str	r2, [r3, #8]

    return true;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e00d      	b.n	8001aa0 <parse_array+0x180>
        goto fail;
 8001a84:	bf00      	nop
 8001a86:	e004      	b.n	8001a92 <parse_array+0x172>
            goto fail; /* allocation failure */
 8001a88:	bf00      	nop
 8001a8a:	e002      	b.n	8001a92 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001a8c:	bf00      	nop
 8001a8e:	e000      	b.n	8001a92 <parse_array+0x172>
        goto fail; /* expected end of array */
 8001a90:	bf00      	nop

fail:
    if (head != NULL)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001a98:	6978      	ldr	r0, [r7, #20]
 8001a9a:	f7ff f96d 	bl	8000d78 <cJSON_Delete>
    }

    return false;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ac2:	d301      	bcc.n	8001ac8 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e0ea      	b.n	8001c9e <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80d0 	beq.w	8001c7a <parse_object+0x1d2>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	f080 80c9 	bcs.w	8001c7a <parse_object+0x1d2>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4413      	add	r3, r2
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b7b      	cmp	r3, #123	; 0x7b
 8001af6:	f040 80c0 	bne.w	8001c7a <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001b04:	6838      	ldr	r0, [r7, #0]
 8001b06:	f7ff fce7 	bl	80014d8 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00e      	beq.n	8001b2e <parse_object+0x86>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d208      	bcs.n	8001b2e <parse_object+0x86>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b7d      	cmp	r3, #125	; 0x7d
 8001b2a:	f000 808d 	beq.w	8001c48 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <parse_object+0x98>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d305      	bcc.n	8001b4c <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	1e5a      	subs	r2, r3, #1
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	609a      	str	r2, [r3, #8]
        goto fail;
 8001b4a:	e0a1      	b.n	8001c90 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	1e5a      	subs	r2, r3, #1
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	3310      	adds	r3, #16
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff f8f6 	bl	8000d4c <cJSON_New_Item>
 8001b60:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 808a 	beq.w	8001c7e <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d104      	bne.n	8001b7a <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	e007      	b.n	8001b8a <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001b94:	6838      	ldr	r0, [r7, #0]
 8001b96:	f7ff fc9f 	bl	80014d8 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001b9a:	6839      	ldr	r1, [r7, #0]
 8001b9c:	6938      	ldr	r0, [r7, #16]
 8001b9e:	f7ff fb55 	bl	800124c <parse_string>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d06c      	beq.n	8001c82 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001ba8:	6838      	ldr	r0, [r7, #0]
 8001baa:	f7ff fc95 	bl	80014d8 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d061      	beq.n	8001c86 <parse_object+0x1de>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d25b      	bcs.n	8001c86 <parse_object+0x1de>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b3a      	cmp	r3, #58	; 0x3a
 8001bdc:	d153      	bne.n	8001c86 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001be8:	6838      	ldr	r0, [r7, #0]
 8001bea:	f7ff fc75 	bl	80014d8 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001bee:	6839      	ldr	r1, [r7, #0]
 8001bf0:	6938      	ldr	r0, [r7, #16]
 8001bf2:	f7ff fda9 	bl	8001748 <parse_value>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d046      	beq.n	8001c8a <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001bfc:	6838      	ldr	r0, [r7, #0]
 8001bfe:	f7ff fc6b 	bl	80014d8 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00d      	beq.n	8001c24 <parse_object+0x17c>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d207      	bcs.n	8001c24 <parse_object+0x17c>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b2c      	cmp	r3, #44	; 0x2c
 8001c22:	d098      	beq.n	8001b56 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d031      	beq.n	8001c8e <parse_object+0x1e6>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d22b      	bcs.n	8001c8e <parse_object+0x1e6>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	4413      	add	r3, r2
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b7d      	cmp	r3, #125	; 0x7d
 8001c44:	d123      	bne.n	8001c8e <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8001c46:	e000      	b.n	8001c4a <parse_object+0x1a2>
        goto success; /* empty object */
 8001c48:	bf00      	nop
    input_buffer->depth--;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	1e5a      	subs	r2, r3, #1
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <parse_object+0x1b8>
        head->prev = current_item;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2240      	movs	r2, #64	; 0x40
 8001c64:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	609a      	str	r2, [r3, #8]
    return true;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e011      	b.n	8001c9e <parse_object+0x1f6>
        goto fail; /* not an object */
 8001c7a:	bf00      	nop
 8001c7c:	e008      	b.n	8001c90 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8001c7e:	bf00      	nop
 8001c80:	e006      	b.n	8001c90 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8001c82:	bf00      	nop
 8001c84:	e004      	b.n	8001c90 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8001c86:	bf00      	nop
 8001c88:	e002      	b.n	8001c90 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8001c8a:	bf00      	nop
 8001c8c:	e000      	b.n	8001c90 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8001c8e:	bf00      	nop

fail:
    if (head != NULL)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff f86e 	bl	8000d78 <cJSON_Delete>
    }

    return false;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <get_object_item+0x1c>
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <get_object_item+0x20>
    {
        return NULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e033      	b.n	8001d2e <get_object_item+0x88>
    }

    current_element = object->child;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d017      	beq.n	8001d02 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001cd2:	e002      	b.n	8001cda <get_object_item+0x34>
        {
            current_element = current_element->next;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d01c      	beq.n	8001d1a <get_object_item+0x74>
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d018      	beq.n	8001d1a <get_object_item+0x74>
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4619      	mov	r1, r3
 8001cee:	68b8      	ldr	r0, [r7, #8]
 8001cf0:	f7fe fa6e 	bl	80001d0 <strcmp>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1ec      	bne.n	8001cd4 <get_object_item+0x2e>
 8001cfa:	e00e      	b.n	8001d1a <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <get_object_item+0x74>
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	68b8      	ldr	r0, [r7, #8]
 8001d10:	f7fe ffb0 	bl	8000c74 <case_insensitive_strcmp>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <get_object_item+0x82>
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <get_object_item+0x86>
        return NULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e000      	b.n	8001d2e <get_object_item+0x88>
    }

    return current_element;
 8001d2c:	697b      	ldr	r3, [r7, #20]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8001d40:	2201      	movs	r2, #1
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ffae 	bl	8001ca6 <get_object_item>
 8001d4a:	4603      	mov	r3, r0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <cJSON_IsNumber+0x12>
    {
        return false;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e007      	b.n	8001d76 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	bf0c      	ite	eq
 8001d70:	2301      	moveq	r3, #1
 8001d72:	2300      	movne	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <cJSON_IsString+0x12>
    {
        return false;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e007      	b.n	8001da4 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b10      	cmp	r3, #16
 8001d9c:	bf0c      	ite	eq
 8001d9e:	2301      	moveq	r3, #1
 8001da0:	2300      	movne	r3, #0
 8001da2:	b2db      	uxtb	r3, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	f2ad 5dd4 	subw	sp, sp, #1492	; 0x5d4
 8001db6:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001db8:	f001 fcc8 	bl	800374c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dbc:	f000 fce6 	bl	800278c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc0:	f000 ffbe 	bl	8002d40 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dc4:	f000 ff9e 	bl	8002d04 <MX_DMA_Init>
  MX_I2C1_Init();
 8001dc8:	f000 fef4 	bl	8002bb4 <MX_I2C1_Init>
  MX_ADC2_Init();
 8001dcc:	f000 fd40 	bl	8002850 <MX_ADC2_Init>
  MX_HRTIM1_Init();
 8001dd0:	f000 fd9e 	bl	8002910 <MX_HRTIM1_Init>
  MX_USART2_UART_Init();
 8001dd4:	f000 ff66 	bl	8002ca4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001dd8:	f000 ff2c 	bl	8002c34 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001ddc:	2100      	movs	r1, #0
 8001dde:	487c      	ldr	r0, [pc, #496]	; (8001fd0 <main+0x220>)
 8001de0:	f001 ffc8 	bl	8003d74 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8001de4:	2297      	movs	r2, #151	; 0x97
 8001de6:	497b      	ldr	r1, [pc, #492]	; (8001fd4 <main+0x224>)
 8001de8:	4879      	ldr	r0, [pc, #484]	; (8001fd0 <main+0x220>)
 8001dea:	f001 fee9 	bl	8003bc0 <HAL_ADC_Start_DMA>
	// Buffers for I2C
	uint8_t aTxRegPtr[1];
	uint8_t aTxData[2];

	// Set current sensor averaging
	aTxRegPtr[0] = 0x00;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f887 353c 	strb.w	r3, [r7, #1340]	; 0x53c
	aTxData[0] = 0b01000111;
 8001df4:	2347      	movs	r3, #71	; 0x47
 8001df6:	f887 3538 	strb.w	r3, [r7, #1336]	; 0x538
	aTxData[1] = 0b00100111;
 8001dfa:	2327      	movs	r3, #39	; 0x27
 8001dfc:	f887 3539 	strb.w	r3, [r7, #1337]	; 0x539
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
			(uint16_t) aTxRegPtr[0], 1, (uint8_t*) aTxData, 2, HAL_MAX_DELAY);
 8001e00:	f897 353c 	ldrb.w	r3, [r7, #1340]	; 0x53c
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0a:	9302      	str	r3, [sp, #8]
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	2301      	movs	r3, #1
 8001e18:	2180      	movs	r1, #128	; 0x80
 8001e1a:	486f      	ldr	r0, [pc, #444]	; (8001fd8 <main+0x228>)
 8001e1c:	f004 fb72 	bl	8006504 <HAL_I2C_Mem_Write>

	double current_duty = STARTING_DUTY;
 8001e20:	a363      	add	r3, pc, #396	; (adr r3, 8001fb0 <main+0x200>)
 8001e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e26:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 8001e2a:	e9c1 2300 	strd	r2, r3, [r1]
	double cal_duty = current_duty;
 8001e2e:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 8001e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e36:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8001e3a:	e9c1 2300 	strd	r2, r3, [r1]
	double max_duty = MAX_DUTY_CALIBRATION;
 8001e3e:	a35e      	add	r3, pc, #376	; (adr r3, 8001fb8 <main+0x208>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 8001e48:	e9c1 2300 	strd	r2, r3, [r1]
	double min_duty = MIN_DUTY_CALIBRATION;
 8001e4c:	a35c      	add	r3, pc, #368	; (adr r3, 8001fc0 <main+0x210>)
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8001e56:	e9c1 2300 	strd	r2, r3, [r1]
	uint16_t signal_period = 604;
 8001e5a:	f44f 7317 	mov.w	r3, #604	; 0x25c
 8001e5e:	f8a7 3572 	strh.w	r3, [r7, #1394]	; 0x572
	uint16_t compare1_val = STARTING_DUTY * signal_period;
 8001e62:	f8b7 3572 	ldrh.w	r3, [r7, #1394]	; 0x572
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fb6c 	bl	8000544 <__aeabi_i2d>
 8001e6c:	a350      	add	r3, pc, #320	; (adr r3, 8001fb0 <main+0x200>)
 8001e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e72:	f7fe fbd1 	bl	8000618 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe fea3 	bl	8000bc8 <__aeabi_d2uiz>
 8001e82:	4603      	mov	r3, r0
 8001e84:	f8a7 3570 	strh.w	r3, [r7, #1392]	; 0x570
	uint16_t compare3_val = compare1_val + signal_period / 2;
 8001e88:	f8b7 3572 	ldrh.w	r3, [r7, #1394]	; 0x572
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	f8b7 3570 	ldrh.w	r3, [r7, #1392]	; 0x570
 8001e94:	4413      	add	r3, r2
 8001e96:	f8a7 356e 	strh.w	r3, [r7, #1390]	; 0x56e

	HAL_HRTIM_WaveformCountStart(&hhrtim1,
 8001e9a:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8001e9e:	484f      	ldr	r0, [pc, #316]	; (8001fdc <main+0x22c>)
 8001ea0:	f003 fd07 	bl	80058b2 <HAL_HRTIM_WaveformCountStart>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_MASTER | HRTIM_TIMERID_TIMER_B);
	HAL_HRTIM_WaveformOutputStart(&hhrtim1,
 8001ea4:	2103      	movs	r1, #3
 8001ea6:	484d      	ldr	r0, [pc, #308]	; (8001fdc <main+0x22c>)
 8001ea8:	f003 fca9 	bl	80057fe <HAL_HRTIM_WaveformOutputStart>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2);
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 8001eac:	4b4b      	ldr	r3, [pc, #300]	; (8001fdc <main+0x22c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8b7 2570 	ldrh.w	r2, [r7, #1392]	; 0x570
 8001eb4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			HRTIM_COMPAREUNIT_1, compare1_val);
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 8001eb8:	4b48      	ldr	r3, [pc, #288]	; (8001fdc <main+0x22c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8b7 256e 	ldrh.w	r2, [r7, #1390]	; 0x56e
 8001ec0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			HRTIM_COMPAREUNIT_3, compare3_val);
	HAL_HRTIM_SoftwareUpdate(&hhrtim1,
 8001ec4:	2107      	movs	r1, #7
 8001ec6:	4845      	ldr	r0, [pc, #276]	; (8001fdc <main+0x22c>)
 8001ec8:	f003 fd1e 	bl	8005908 <HAL_HRTIM_SoftwareUpdate>

	int16_t tuning;
	uint16_t adc_max;
	uint8_t low_vds_count;

	uint8_t zero_cross = 103;
 8001ecc:	2367      	movs	r3, #103	; 0x67
 8001ece:	f887 356d 	strb.w	r3, [r7, #1389]	; 0x56d
	uint8_t low_vds_count_threshold = current_duty * ADC_BUF_LEN - 1;
 8001ed2:	a33d      	add	r3, pc, #244	; (adr r3, 8001fc8 <main+0x218>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 8001edc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ee0:	f7fe fb9a 	bl	8000618 <__aeabi_dmul>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	4b3b      	ldr	r3, [pc, #236]	; (8001fe0 <main+0x230>)
 8001ef2:	f7fe f9d9 	bl	80002a8 <__aeabi_dsub>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4610      	mov	r0, r2
 8001efc:	4619      	mov	r1, r3
 8001efe:	f7fe fe63 	bl	8000bc8 <__aeabi_d2uiz>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f887 357c 	strb.w	r3, [r7, #1404]	; 0x57c
	uint16_t low_vds_threshold = 200;
 8001f08:	23c8      	movs	r3, #200	; 0xc8
 8001f0a:	f8a7 356a 	strh.w	r3, [r7, #1386]	; 0x56a
	uint16_t vds_checking_threshold = 1800;
 8001f0e:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001f12:	f8a7 3568 	strh.w	r3, [r7, #1384]	; 0x568
	int16_t tuning_threshold = 400;
 8001f16:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001f1a:	f8a7 3566 	strh.w	r3, [r7, #1382]	; 0x566


	char json[1024];

	HAL_UART_Receive_IT(&huart2, &rxBuffer[rxIndex], 1); // Enable UART receive interrupt
 8001f1e:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <main+0x234>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <main+0x238>)
 8001f28:	4413      	add	r3, r2
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	482f      	ldr	r0, [pc, #188]	; (8001fec <main+0x23c>)
 8001f30:	f006 fef0 	bl	8008d14 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8001f34:	482e      	ldr	r0, [pc, #184]	; (8001ff0 <main+0x240>)
 8001f36:	f006 fb99 	bl	800866c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		adc_max = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f8a7 357e 	strh.w	r3, [r7, #1406]	; 0x57e
		low_vds_count = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 357d 	strb.w	r3, [r7, #1405]	; 0x57d
		uint16_t adc_buf2[ADC_BUF_LEN];

		/* Transfer buffer and find maximum value */
		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001f46:	2300      	movs	r3, #0
 8001f48:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8001f4c:	e028      	b.n	8001fa0 <main+0x1f0>
			adc_buf2[i] = adc_buf[i]; // convert to real value
 8001f4e:	4a21      	ldr	r2, [pc, #132]	; (8001fd4 <main+0x224>)
 8001f50:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8001f54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f58:	b299      	uxth	r1, r3
 8001f5a:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8001f5e:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 8001f62:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8001f66:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			if (adc_buf2[i] > adc_max) {
 8001f6a:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8001f6e:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 8001f72:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8001f76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f7a:	f8b7 257e 	ldrh.w	r2, [r7, #1406]	; 0x57e
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d209      	bcs.n	8001f96 <main+0x1e6>
				adc_max = adc_buf2[i];	// find maximum value in buffer
 8001f82:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8001f86:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 8001f8a:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8001f8e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f92:	f8a7 357e 	strh.w	r3, [r7, #1406]	; 0x57e
		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001f96:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8001fa0:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8001fa4:	2b96      	cmp	r3, #150	; 0x96
 8001fa6:	ddd2      	ble.n	8001f4e <main+0x19e>
			}
		}

		/* Count how much values are 'zero' */
		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8001fae:	e03d      	b.n	800202c <main+0x27c>
 8001fb0:	33333333 	.word	0x33333333
 8001fb4:	3fd33333 	.word	0x3fd33333
 8001fb8:	9999999a 	.word	0x9999999a
 8001fbc:	3fd99999 	.word	0x3fd99999
 8001fc0:	9999999a 	.word	0x9999999a
 8001fc4:	3fc99999 	.word	0x3fc99999
 8001fc8:	00000000 	.word	0x00000000
 8001fcc:	4062e000 	.word	0x4062e000
 8001fd0:	20000280 	.word	0x20000280
 8001fd4:	2000051c 	.word	0x2000051c
 8001fd8:	200003f0 	.word	0x200003f0
 8001fdc:	20000314 	.word	0x20000314
 8001fe0:	3ff00000 	.word	0x3ff00000
 8001fe4:	20000a4c 	.word	0x20000a4c
 8001fe8:	2000064c 	.word	0x2000064c
 8001fec:	20000490 	.word	0x20000490
 8001ff0:	20000444 	.word	0x20000444
			if (adc_buf2[i] < low_vds_threshold
 8001ff4:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8001ff8:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 8001ffc:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8002000:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002004:	f8b7 256a 	ldrh.w	r2, [r7, #1386]	; 0x56a
 8002008:	429a      	cmp	r2, r3
 800200a:	d90a      	bls.n	8002022 <main+0x272>
					&& adc_max > vds_checking_threshold) {
 800200c:	f8b7 257e 	ldrh.w	r2, [r7, #1406]	; 0x57e
 8002010:	f8b7 3568 	ldrh.w	r3, [r7, #1384]	; 0x568
 8002014:	429a      	cmp	r2, r3
 8002016:	d904      	bls.n	8002022 <main+0x272>
				low_vds_count++;
 8002018:	f897 357d 	ldrb.w	r3, [r7, #1405]	; 0x57d
 800201c:	3301      	adds	r3, #1
 800201e:	f887 357d 	strb.w	r3, [r7, #1405]	; 0x57d
		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8002022:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8002026:	3301      	adds	r3, #1
 8002028:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800202c:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8002030:	2b96      	cmp	r3, #150	; 0x96
 8002032:	dddf      	ble.n	8001ff4 <main+0x244>
			}
		}

		/* Find hard-switching value */
		tuning = adc_buf2[zero_cross];
 8002034:	f897 256d 	ldrb.w	r2, [r7, #1389]	; 0x56d
 8002038:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800203c:	f2a3 539c 	subw	r3, r3, #1436	; 0x59c
 8002040:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002044:	f8a7 3564 	strh.w	r3, [r7, #1380]	; 0x564

		if ((currentState == STATE_CALIBRATING) || (currentState == STATE_LOCALIZATION))
 8002048:	4bd5      	ldr	r3, [pc, #852]	; (80023a0 <main+0x5f0>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d003      	beq.n	8002058 <main+0x2a8>
 8002050:	4bd3      	ldr	r3, [pc, #844]	; (80023a0 <main+0x5f0>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b02      	cmp	r3, #2
 8002056:	d10d      	bne.n	8002074 <main+0x2c4>
		{
			//set duty limits
			max_duty = MAX_DUTY_CALIBRATION;
 8002058:	a3bf      	add	r3, pc, #764	; (adr r3, 8002358 <main+0x5a8>)
 800205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205e:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 8002062:	e9c1 2300 	strd	r2, r3, [r1]
			min_duty = MIN_DUTY_CALIBRATION;
 8002066:	a3be      	add	r3, pc, #760	; (adr r3, 8002360 <main+0x5b0>)
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8002070:	e9c1 2300 	strd	r2, r3, [r1]
		}

		// I2C readings
		uint8_t aRxBuffer[2];

		aTxRegPtr[0] = 0x02;
 8002074:	2302      	movs	r3, #2
 8002076:	f887 353c 	strb.w	r3, [r7, #1340]	; 0x53c
		aRxBuffer[0] = 0x00;
 800207a:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800207e:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
		aRxBuffer[1] = 0x00;
 8002086:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800208a:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800208e:	2200      	movs	r2, #0
 8002090:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
 8002092:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	2301      	movs	r3, #1
 800209e:	2180      	movs	r1, #128	; 0x80
 80020a0:	48c0      	ldr	r0, [pc, #768]	; (80023a4 <main+0x5f4>)
 80020a2:	f004 f845 	bl	8006130 <HAL_I2C_Master_Transmit>
				(uint8_t*) aTxRegPtr, 1, HAL_MAX_DELAY);
		HAL_I2C_Master_Receive(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
 80020a6:	f507 729a 	add.w	r2, r7, #308	; 0x134
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	2302      	movs	r3, #2
 80020b2:	2180      	movs	r1, #128	; 0x80
 80020b4:	48bb      	ldr	r0, [pc, #748]	; (80023a4 <main+0x5f4>)
 80020b6:	f004 f92f 	bl	8006318 <HAL_I2C_Master_Receive>
				(uint8_t*) aRxBuffer, 2, HAL_MAX_DELAY);
		double voltage = (aRxBuffer[0] << 8 | aRxBuffer[1]) * 0.00125 * 20.1 / 5.1;
 80020ba:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 80020be:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 80020ca:	f2a2 426c 	subw	r2, r2, #1132	; 0x46c
 80020ce:	7852      	ldrb	r2, [r2, #1]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7fe fa36 	bl	8000544 <__aeabi_i2d>
 80020d8:	a3a3      	add	r3, pc, #652	; (adr r3, 8002368 <main+0x5b8>)
 80020da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020de:	f7fe fa9b 	bl	8000618 <__aeabi_dmul>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	a3a1      	add	r3, pc, #644	; (adr r3, 8002370 <main+0x5c0>)
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	f7fe fa92 	bl	8000618 <__aeabi_dmul>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	a39e      	add	r3, pc, #632	; (adr r3, 8002378 <main+0x5c8>)
 80020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002102:	f7fe fbb3 	bl	800086c <__aeabi_ddiv>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 800210e:	e9c1 2300 	strd	r2, r3, [r1]

		aTxRegPtr[0] = 0x00;
 8002112:	2300      	movs	r3, #0
 8002114:	f887 353c 	strb.w	r3, [r7, #1340]	; 0x53c
		aRxBuffer[0] = 0x00;
 8002118:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800211c:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
		aRxBuffer[1] = 0x00;
 8002124:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8002128:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800212c:	2200      	movs	r2, #0
 800212e:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) I2C_ADD_TEMP1 << 1,
 8002130:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 8002134:	f04f 33ff 	mov.w	r3, #4294967295
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	2301      	movs	r3, #1
 800213c:	2190      	movs	r1, #144	; 0x90
 800213e:	4899      	ldr	r0, [pc, #612]	; (80023a4 <main+0x5f4>)
 8002140:	f003 fff6 	bl	8006130 <HAL_I2C_Master_Transmit>
				(uint8_t*) aTxRegPtr, 1, HAL_MAX_DELAY);
		HAL_I2C_Master_Receive(&hi2c1, (uint16_t) I2C_ADD_TEMP1 << 1,
 8002144:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8002148:	f04f 33ff 	mov.w	r3, #4294967295
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2302      	movs	r3, #2
 8002150:	2190      	movs	r1, #144	; 0x90
 8002152:	4894      	ldr	r0, [pc, #592]	; (80023a4 <main+0x5f4>)
 8002154:	f004 f8e0 	bl	8006318 <HAL_I2C_Master_Receive>
				(uint8_t*) aRxBuffer, 2, HAL_MAX_DELAY);
		double temp1 = (aRxBuffer[0] << 4 | aRxBuffer[1] >> 4) * 0.0625;
 8002158:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800215c:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 8002168:	f2a2 426c 	subw	r2, r2, #1132	; 0x46c
 800216c:	7852      	ldrb	r2, [r2, #1]
 800216e:	0912      	lsrs	r2, r2, #4
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	4313      	orrs	r3, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe f9e5 	bl	8000544 <__aeabi_i2d>
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	4b8a      	ldr	r3, [pc, #552]	; (80023a8 <main+0x5f8>)
 8002180:	f7fe fa4a 	bl	8000618 <__aeabi_dmul>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 800218c:	e9c1 2300 	strd	r2, r3, [r1]

		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) I2C_ADD_TEMP2 << 1U,
 8002190:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 8002194:	f04f 33ff 	mov.w	r3, #4294967295
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2301      	movs	r3, #1
 800219c:	2192      	movs	r1, #146	; 0x92
 800219e:	4881      	ldr	r0, [pc, #516]	; (80023a4 <main+0x5f4>)
 80021a0:	f003 ffc6 	bl	8006130 <HAL_I2C_Master_Transmit>
				(uint8_t*) aTxRegPtr, 1, HAL_MAX_DELAY);
		HAL_I2C_Master_Receive(&hi2c1, (uint16_t) I2C_ADD_TEMP2 << 1U,
 80021a4:	f507 729a 	add.w	r2, r7, #308	; 0x134
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2302      	movs	r3, #2
 80021b0:	2192      	movs	r1, #146	; 0x92
 80021b2:	487c      	ldr	r0, [pc, #496]	; (80023a4 <main+0x5f4>)
 80021b4:	f004 f8b0 	bl	8006318 <HAL_I2C_Master_Receive>
				(uint8_t*) aRxBuffer, 2, HAL_MAX_DELAY);
		double temp2 = (aRxBuffer[0] << 4 | aRxBuffer[1] >> 4) * 0.0625;
 80021b8:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 80021bc:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 80021c8:	f2a2 426c 	subw	r2, r2, #1132	; 0x46c
 80021cc:	7852      	ldrb	r2, [r2, #1]
 80021ce:	0912      	lsrs	r2, r2, #4
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	4313      	orrs	r3, r2
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f9b5 	bl	8000544 <__aeabi_i2d>
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	4b72      	ldr	r3, [pc, #456]	; (80023a8 <main+0x5f8>)
 80021e0:	f7fe fa1a 	bl	8000618 <__aeabi_dmul>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 80021ec:	e9c1 2300 	strd	r2, r3, [r1]

		aTxRegPtr[0] = 0x01;
 80021f0:	2301      	movs	r3, #1
 80021f2:	f887 353c 	strb.w	r3, [r7, #1340]	; 0x53c
		aRxBuffer[0] = 0x00;
 80021f6:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 80021fa:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]
		aRxBuffer[1] = 0x00;
 8002202:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8002206:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800220a:	2200      	movs	r2, #0
 800220c:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
 800220e:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 8002212:	f04f 33ff 	mov.w	r3, #4294967295
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	2301      	movs	r3, #1
 800221a:	2180      	movs	r1, #128	; 0x80
 800221c:	4861      	ldr	r0, [pc, #388]	; (80023a4 <main+0x5f4>)
 800221e:	f003 ff87 	bl	8006130 <HAL_I2C_Master_Transmit>
				(uint8_t*) aTxRegPtr, 1, HAL_MAX_DELAY);
		HAL_I2C_Master_Receive(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
 8002222:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8002226:	f04f 33ff 	mov.w	r3, #4294967295
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	2302      	movs	r3, #2
 800222e:	2180      	movs	r1, #128	; 0x80
 8002230:	485c      	ldr	r0, [pc, #368]	; (80023a4 <main+0x5f4>)
 8002232:	f004 f871 	bl	8006318 <HAL_I2C_Master_Receive>
				(uint8_t*) aRxBuffer, 2, HAL_MAX_DELAY);
		double current = (int16_t) (aRxBuffer[0] << 8 | aRxBuffer[1])
 8002236:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800223a:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	b21a      	sxth	r2, r3
 8002244:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8002248:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 800224c:	785b      	ldrb	r3, [r3, #1]
 800224e:	b21b      	sxth	r3, r3
 8002250:	4313      	orrs	r3, r2
 8002252:	b21b      	sxth	r3, r3
				* 0.0000025 / 0.012;
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe f975 	bl	8000544 <__aeabi_i2d>
 800225a:	a349      	add	r3, pc, #292	; (adr r3, 8002380 <main+0x5d0>)
 800225c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002260:	f7fe f9da 	bl	8000618 <__aeabi_dmul>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
		double current = (int16_t) (aRxBuffer[0] << 8 | aRxBuffer[1])
 800226c:	a346      	add	r3, pc, #280	; (adr r3, 8002388 <main+0x5d8>)
 800226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002272:	f7fe fafb 	bl	800086c <__aeabi_ddiv>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 800227e:	e9c1 2300 	strd	r2, r3, [r1]


		// check for High Switching or Diode Conducting
		// avoid transient cycle
		if (adc_max > vds_checking_threshold)
 8002282:	f8b7 257e 	ldrh.w	r2, [r7, #1406]	; 0x57e
 8002286:	f8b7 3568 	ldrh.w	r3, [r7, #1384]	; 0x568
 800228a:	429a      	cmp	r2, r3
 800228c:	f240 815c 	bls.w	8002548 <main+0x798>
		{
			if (tuning > tuning_threshold) {
 8002290:	f9b7 2564 	ldrsh.w	r2, [r7, #1380]	; 0x564
 8002294:	f9b7 3566 	ldrsh.w	r3, [r7, #1382]	; 0x566
 8002298:	429a      	cmp	r2, r3
 800229a:	f340 809a 	ble.w	80023d2 <main+0x622>
				current_duty = current_duty - DUTY_CYCLE_SINGLE_CHANGE;
 800229e:	a33c      	add	r3, pc, #240	; (adr r3, 8002390 <main+0x5e0>)
 80022a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a4:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 80022a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022ac:	f7fd fffc 	bl	80002a8 <__aeabi_dsub>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 80022b8:	e9c1 2300 	strd	r2, r3, [r1]
				low_vds_count_threshold = current_duty * ADC_BUF_LEN - 1;
 80022bc:	a336      	add	r3, pc, #216	; (adr r3, 8002398 <main+0x5e8>)
 80022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c2:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 80022c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022ca:	f7fe f9a5 	bl	8000618 <__aeabi_dmul>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	4b34      	ldr	r3, [pc, #208]	; (80023ac <main+0x5fc>)
 80022dc:	f7fd ffe4 	bl	80002a8 <__aeabi_dsub>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4610      	mov	r0, r2
 80022e6:	4619      	mov	r1, r3
 80022e8:	f7fe fc6e 	bl	8000bc8 <__aeabi_d2uiz>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f887 357c 	strb.w	r3, [r7, #1404]	; 0x57c
				if (current_duty > min_duty)
 80022f2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80022f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fa:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 80022fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002302:	f7fe fc19 	bl	8000b38 <__aeabi_dcmpgt>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d05e      	beq.n	80023ca <main+0x61a>
				{
					compare1_val = current_duty * signal_period;
 800230c:	f8b7 3572 	ldrh.w	r3, [r7, #1394]	; 0x572
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe f917 	bl	8000544 <__aeabi_i2d>
 8002316:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 800231a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231e:	f7fe f97b 	bl	8000618 <__aeabi_dmul>
 8002322:	4602      	mov	r2, r0
 8002324:	460b      	mov	r3, r1
 8002326:	4610      	mov	r0, r2
 8002328:	4619      	mov	r1, r3
 800232a:	f7fe fc4d 	bl	8000bc8 <__aeabi_d2uiz>
 800232e:	4603      	mov	r3, r0
 8002330:	f8a7 3570 	strh.w	r3, [r7, #1392]	; 0x570
					compare3_val = compare1_val + signal_period / 2;
 8002334:	f8b7 3572 	ldrh.w	r3, [r7, #1394]	; 0x572
 8002338:	085b      	lsrs	r3, r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	f8b7 3570 	ldrh.w	r3, [r7, #1392]	; 0x570
 8002340:	4413      	add	r3, r2
 8002342:	f8a7 356e 	strh.w	r3, [r7, #1390]	; 0x56e
					__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 8002346:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <main+0x600>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f8b7 2570 	ldrh.w	r2, [r7, #1392]	; 0x570
 800234e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8002352:	e02f      	b.n	80023b4 <main+0x604>
 8002354:	f3af 8000 	nop.w
 8002358:	9999999a 	.word	0x9999999a
 800235c:	3fd99999 	.word	0x3fd99999
 8002360:	9999999a 	.word	0x9999999a
 8002364:	3fc99999 	.word	0x3fc99999
 8002368:	47ae147b 	.word	0x47ae147b
 800236c:	3f547ae1 	.word	0x3f547ae1
 8002370:	9999999a 	.word	0x9999999a
 8002374:	40341999 	.word	0x40341999
 8002378:	66666666 	.word	0x66666666
 800237c:	40146666 	.word	0x40146666
 8002380:	88e368f1 	.word	0x88e368f1
 8002384:	3ec4f8b5 	.word	0x3ec4f8b5
 8002388:	bc6a7efa 	.word	0xbc6a7efa
 800238c:	3f889374 	.word	0x3f889374
 8002390:	d2f1a9fc 	.word	0xd2f1a9fc
 8002394:	3f60624d 	.word	0x3f60624d
 8002398:	00000000 	.word	0x00000000
 800239c:	4062e000 	.word	0x4062e000
 80023a0:	20000518 	.word	0x20000518
 80023a4:	200003f0 	.word	0x200003f0
 80023a8:	3fb00000 	.word	0x3fb00000
 80023ac:	3ff00000 	.word	0x3ff00000
 80023b0:	20000314 	.word	0x20000314
							HRTIM_COMPAREUNIT_1, compare1_val);
					__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 80023b4:	4b82      	ldr	r3, [pc, #520]	; (80025c0 <main+0x810>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8b7 256e 	ldrh.w	r2, [r7, #1390]	; 0x56e
 80023bc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
							HRTIM_COMPAREUNIT_3, compare3_val);
					HAL_HRTIM_SoftwareUpdate(&hhrtim1, HRTIM_TIMERUPDATE_A);
 80023c0:	2102      	movs	r1, #2
 80023c2:	487f      	ldr	r0, [pc, #508]	; (80025c0 <main+0x810>)
 80023c4:	f003 faa0 	bl	8005908 <HAL_HRTIM_SoftwareUpdate>
 80023c8:	e0be      	b.n	8002548 <main+0x798>
				} else {
					gAlertType = HS;
 80023ca:	4b7e      	ldr	r3, [pc, #504]	; (80025c4 <main+0x814>)
 80023cc:	2204      	movs	r2, #4
 80023ce:	701a      	strb	r2, [r3, #0]
 80023d0:	e0ba      	b.n	8002548 <main+0x798>
				}
			} else if (low_vds_count > low_vds_count_threshold)
 80023d2:	f897 257d 	ldrb.w	r2, [r7, #1405]	; 0x57d
 80023d6:	f897 357c 	ldrb.w	r3, [r7, #1404]	; 0x57c
 80023da:	429a      	cmp	r2, r3
 80023dc:	d968      	bls.n	80024b0 <main+0x700>
			{
				current_duty = current_duty + DUTY_CYCLE_SINGLE_CHANGE;
 80023de:	a370      	add	r3, pc, #448	; (adr r3, 80025a0 <main+0x7f0>)
 80023e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e4:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 80023e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023ec:	f7fd ff5e 	bl	80002ac <__adddf3>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 80023f8:	e9c1 2300 	strd	r2, r3, [r1]
				low_vds_count_threshold = current_duty * ADC_BUF_LEN - 1;
 80023fc:	a36a      	add	r3, pc, #424	; (adr r3, 80025a8 <main+0x7f8>)
 80023fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002402:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 8002406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800240a:	f7fe f905 	bl	8000618 <__aeabi_dmul>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4610      	mov	r0, r2
 8002414:	4619      	mov	r1, r3
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	4b6b      	ldr	r3, [pc, #428]	; (80025c8 <main+0x818>)
 800241c:	f7fd ff44 	bl	80002a8 <__aeabi_dsub>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	f7fe fbce 	bl	8000bc8 <__aeabi_d2uiz>
 800242c:	4603      	mov	r3, r0
 800242e:	f887 357c 	strb.w	r3, [r7, #1404]	; 0x57c
				if (current_duty < max_duty)
 8002432:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 8002436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243a:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 800243e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002442:	f7fe fb5b 	bl	8000afc <__aeabi_dcmplt>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d02d      	beq.n	80024a8 <main+0x6f8>
				{
					compare1_val = current_duty * signal_period;
 800244c:	f8b7 3572 	ldrh.w	r3, [r7, #1394]	; 0x572
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe f877 	bl	8000544 <__aeabi_i2d>
 8002456:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	f7fe f8db 	bl	8000618 <__aeabi_dmul>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	f7fe fbad 	bl	8000bc8 <__aeabi_d2uiz>
 800246e:	4603      	mov	r3, r0
 8002470:	f8a7 3570 	strh.w	r3, [r7, #1392]	; 0x570
					compare3_val = compare1_val + signal_period / 2;
 8002474:	f8b7 3572 	ldrh.w	r3, [r7, #1394]	; 0x572
 8002478:	085b      	lsrs	r3, r3, #1
 800247a:	b29a      	uxth	r2, r3
 800247c:	f8b7 3570 	ldrh.w	r3, [r7, #1392]	; 0x570
 8002480:	4413      	add	r3, r2
 8002482:	f8a7 356e 	strh.w	r3, [r7, #1390]	; 0x56e
					__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 8002486:	4b4e      	ldr	r3, [pc, #312]	; (80025c0 <main+0x810>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8b7 2570 	ldrh.w	r2, [r7, #1392]	; 0x570
 800248e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
							HRTIM_COMPAREUNIT_1, compare1_val);
					__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 8002492:	4b4b      	ldr	r3, [pc, #300]	; (80025c0 <main+0x810>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f8b7 256e 	ldrh.w	r2, [r7, #1390]	; 0x56e
 800249a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
							HRTIM_COMPAREUNIT_3, compare3_val);
					HAL_HRTIM_SoftwareUpdate(&hhrtim1, HRTIM_TIMERUPDATE_A);
 800249e:	2102      	movs	r1, #2
 80024a0:	4847      	ldr	r0, [pc, #284]	; (80025c0 <main+0x810>)
 80024a2:	f003 fa31 	bl	8005908 <HAL_HRTIM_SoftwareUpdate>
 80024a6:	e04f      	b.n	8002548 <main+0x798>
				} else {
					gAlertType = DI;
 80024a8:	4b46      	ldr	r3, [pc, #280]	; (80025c4 <main+0x814>)
 80024aa:	2205      	movs	r2, #5
 80024ac:	701a      	strb	r2, [r3, #0]
 80024ae:	e04b      	b.n	8002548 <main+0x798>
				}
			} else if ((currentState == STATE_CALIBRATING) && (voltage > 66.5)) {
 80024b0:	4b46      	ldr	r3, [pc, #280]	; (80025cc <main+0x81c>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d125      	bne.n	8002504 <main+0x754>
 80024b8:	a33d      	add	r3, pc, #244	; (adr r3, 80025b0 <main+0x800>)
 80024ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024be:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 80024c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024c6:	f7fe fb37 	bl	8000b38 <__aeabi_dcmpgt>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d019      	beq.n	8002504 <main+0x754>
				if (cal_duty != current_duty)
 80024d0:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 80024d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d8:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 80024dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024e0:	f7fe fb02 	bl	8000ae8 <__aeabi_dcmpeq>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d108      	bne.n	80024fc <main+0x74c>
					cal_duty = current_duty;
 80024ea:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 80024ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f2:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 80024f6:	e9c1 2300 	strd	r2, r3, [r1]
				if (cal_duty != current_duty)
 80024fa:	e025      	b.n	8002548 <main+0x798>
				 else
				 {
					handleEvent(EVENT_CALIBRATE_DONE);
 80024fc:	2001      	movs	r0, #1
 80024fe:	f000 fc77 	bl	8002df0 <handleEvent>
				if (cal_duty != current_duty)
 8002502:	e021      	b.n	8002548 <main+0x798>
				 }
			} else if (currentState == STATE_DEPLOY) //no duty cycle changes
 8002504:	4b31      	ldr	r3, [pc, #196]	; (80025cc <main+0x81c>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b03      	cmp	r3, #3
 800250a:	d11d      	bne.n	8002548 <main+0x798>
			{
				min_duty = current_duty - DEPLOY_DUTY_TRESHOLD;
 800250c:	a32a      	add	r3, pc, #168	; (adr r3, 80025b8 <main+0x808>)
 800250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002512:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 8002516:	e9d1 0100 	ldrd	r0, r1, [r1]
 800251a:	f7fd fec5 	bl	80002a8 <__aeabi_dsub>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8002526:	e9c1 2300 	strd	r2, r3, [r1]
				max_duty = current_duty + DEPLOY_DUTY_TRESHOLD;
 800252a:	a323      	add	r3, pc, #140	; (adr r3, 80025b8 <main+0x808>)
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 8002534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002538:	f7fd feb8 	bl	80002ac <__adddf3>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 8002544:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}

		// handle ALERTS
		if ((temp1 > TEMP_LIMIT) || (temp2 > TEMP_LIMIT)) {
 8002548:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <main+0x820>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 8002552:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002556:	f7fe faef 	bl	8000b38 <__aeabi_dcmpgt>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10b      	bne.n	8002578 <main+0x7c8>
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <main+0x820>)
 8002562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002566:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 800256a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800256e:	f7fe fae3 	bl	8000b38 <__aeabi_dcmpgt>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <main+0x7d0>
			gAlertType = OT;
 8002578:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <main+0x814>)
 800257a:	2203      	movs	r2, #3
 800257c:	701a      	strb	r2, [r3, #0]
 800257e:	e03a      	b.n	80025f6 <main+0x846>
		} else if (voltage > VOLT_LIMIT){
 8002580:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <main+0x824>)
 8002582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002586:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 800258a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800258e:	f7fe fad3 	bl	8000b38 <__aeabi_dcmpgt>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01f      	beq.n	80025d8 <main+0x828>
			gAlertType = OV;
 8002598:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <main+0x814>)
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]
 800259e:	e02a      	b.n	80025f6 <main+0x846>
 80025a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80025a4:	3f60624d 	.word	0x3f60624d
 80025a8:	00000000 	.word	0x00000000
 80025ac:	4062e000 	.word	0x4062e000
 80025b0:	00000000 	.word	0x00000000
 80025b4:	4050a000 	.word	0x4050a000
 80025b8:	eb851eb8 	.word	0xeb851eb8
 80025bc:	3f8eb851 	.word	0x3f8eb851
 80025c0:	20000314 	.word	0x20000314
 80025c4:	20000a50 	.word	0x20000a50
 80025c8:	3ff00000 	.word	0x3ff00000
 80025cc:	20000518 	.word	0x20000518
 80025d0:	20000010 	.word	0x20000010
 80025d4:	20000020 	.word	0x20000020
		} else if (current > CURRENT_LIMIT) {
 80025d8:	4b63      	ldr	r3, [pc, #396]	; (8002768 <main+0x9b8>)
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 80025e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025e6:	f7fe faa7 	bl	8000b38 <__aeabi_dcmpgt>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <main+0x846>
			gAlertType = OC;
 80025f0:	4b5e      	ldr	r3, [pc, #376]	; (800276c <main+0x9bc>)
 80025f2:	2202      	movs	r2, #2
 80025f4:	701a      	strb	r2, [r3, #0]
		}

		if ((gAlertType != NONE) && (currentState != STATE_IDLE))
 80025f6:	4b5d      	ldr	r3, [pc, #372]	; (800276c <main+0x9bc>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d055      	beq.n	80026aa <main+0x8fa>
 80025fe:	4b5c      	ldr	r3, [pc, #368]	; (8002770 <main+0x9c0>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d051      	beq.n	80026aa <main+0x8fa>
		{
			handleEvent(EVENT_ALERT);
 8002606:	2004      	movs	r0, #4
 8002608:	f000 fbf2 	bl	8002df0 <handleEvent>
			// reset waveform
			current_duty = STARTING_DUTY;
 800260c:	a352      	add	r3, pc, #328	; (adr r3, 8002758 <main+0x9a8>)
 800260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002612:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 8002616:	e9c1 2300 	strd	r2, r3, [r1]
			compare1_val = current_duty * signal_period;
 800261a:	f8b7 3572 	ldrh.w	r3, [r7, #1394]	; 0x572
 800261e:	4618      	mov	r0, r3
 8002620:	f7fd ff90 	bl	8000544 <__aeabi_i2d>
 8002624:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 8002628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262c:	f7fd fff4 	bl	8000618 <__aeabi_dmul>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	f7fe fac6 	bl	8000bc8 <__aeabi_d2uiz>
 800263c:	4603      	mov	r3, r0
 800263e:	f8a7 3570 	strh.w	r3, [r7, #1392]	; 0x570
			compare3_val = compare1_val + signal_period / 2;
 8002642:	f8b7 3572 	ldrh.w	r3, [r7, #1394]	; 0x572
 8002646:	085b      	lsrs	r3, r3, #1
 8002648:	b29a      	uxth	r2, r3
 800264a:	f8b7 3570 	ldrh.w	r3, [r7, #1392]	; 0x570
 800264e:	4413      	add	r3, r2
 8002650:	f8a7 356e 	strh.w	r3, [r7, #1390]	; 0x56e
			low_vds_count_threshold = current_duty * ADC_BUF_LEN - 1;
 8002654:	a342      	add	r3, pc, #264	; (adr r3, 8002760 <main+0x9b0>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 800265e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002662:	f7fd ffd9 	bl	8000618 <__aeabi_dmul>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	4b40      	ldr	r3, [pc, #256]	; (8002774 <main+0x9c4>)
 8002674:	f7fd fe18 	bl	80002a8 <__aeabi_dsub>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	f7fe faa2 	bl	8000bc8 <__aeabi_d2uiz>
 8002684:	4603      	mov	r3, r0
 8002686:	f887 357c 	strb.w	r3, [r7, #1404]	; 0x57c
			__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 800268a:	4b3b      	ldr	r3, [pc, #236]	; (8002778 <main+0x9c8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f8b7 2570 	ldrh.w	r2, [r7, #1392]	; 0x570
 8002692:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					HRTIM_COMPAREUNIT_1, compare1_val);
			__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 8002696:	4b38      	ldr	r3, [pc, #224]	; (8002778 <main+0x9c8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8b7 256e 	ldrh.w	r2, [r7, #1390]	; 0x56e
 800269e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					HRTIM_COMPAREUNIT_3, compare3_val);
			HAL_HRTIM_SoftwareUpdate(&hhrtim1, HRTIM_TIMERUPDATE_A);
 80026a2:	2102      	movs	r1, #2
 80026a4:	4834      	ldr	r0, [pc, #208]	; (8002778 <main+0x9c8>)
 80026a6:	f003 f92f 	bl	8005908 <HAL_HRTIM_SoftwareUpdate>
		}

		if (SEND_TIMER_FLAG && UART_READY && (currentState != STATE_CALIBRATING))
 80026aa:	4b34      	ldr	r3, [pc, #208]	; (800277c <main+0x9cc>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d049      	beq.n	8002748 <main+0x998>
 80026b4:	4b32      	ldr	r3, [pc, #200]	; (8002780 <main+0x9d0>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d044      	beq.n	8002748 <main+0x998>
 80026be:	4b2c      	ldr	r3, [pc, #176]	; (8002770 <main+0x9c0>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d040      	beq.n	8002748 <main+0x998>
		{
			sprintf(json,
 80026c6:	f9b7 3564 	ldrsh.w	r3, [r7, #1380]	; 0x564
 80026ca:	f897 257d 	ldrb.w	r2, [r7, #1405]	; 0x57d
 80026ce:	f897 157c 	ldrb.w	r1, [r7, #1404]	; 0x57c
 80026d2:	4826      	ldr	r0, [pc, #152]	; (800276c <main+0x9bc>)
 80026d4:	7800      	ldrb	r0, [r0, #0]
 80026d6:	4604      	mov	r4, r0
 80026d8:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80026dc:	940b      	str	r4, [sp, #44]	; 0x2c
 80026de:	910a      	str	r1, [sp, #40]	; 0x28
 80026e0:	9209      	str	r2, [sp, #36]	; 0x24
 80026e2:	9308      	str	r3, [sp, #32]
 80026e4:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 80026e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80026f0:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 80026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80026fc:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 8002700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002704:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002708:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002710:	e9cd 2300 	strd	r2, r3, [sp]
 8002714:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8002718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271c:	4919      	ldr	r1, [pc, #100]	; (8002784 <main+0x9d4>)
 800271e:	f009 f91d 	bl	800b95c <siprintf>
					"{\"temperature1\":%.2f,\"temperature2\":%.2f,\"duty\":%.3f,\"voltage\":%.2f,\"current\":%.2f,\"tuning\":%i,\"low_vds\":%i,\"low_vds_threshold\":%i,\"alert\":%i}",
					temp1, temp2, current_duty, voltage, current, tuning,
					low_vds_count, low_vds_count_threshold, gAlertType);

			HAL_UART_Transmit_IT(&huart2, (uint8_t*) json, strlen(json));
 8002722:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002726:	4618      	mov	r0, r3
 8002728:	f7fd fdb2 	bl	8000290 <strlen>
 800272c:	4603      	mov	r3, r0
 800272e:	b29a      	uxth	r2, r3
 8002730:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002734:	4619      	mov	r1, r3
 8002736:	4814      	ldr	r0, [pc, #80]	; (8002788 <main+0x9d8>)
 8002738:	f006 fa8e 	bl	8008c58 <HAL_UART_Transmit_IT>
			UART_READY = false;
 800273c:	4b10      	ldr	r3, [pc, #64]	; (8002780 <main+0x9d0>)
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
			SEND_TIMER_FLAG = false;
 8002742:	4b0e      	ldr	r3, [pc, #56]	; (800277c <main+0x9cc>)
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
		}

		HAL_Delay(10);
 8002748:	200a      	movs	r0, #10
 800274a:	f001 f865 	bl	8003818 <HAL_Delay>
	while (1) {
 800274e:	f7ff bbf4 	b.w	8001f3a <main+0x18a>
 8002752:	bf00      	nop
 8002754:	f3af 8000 	nop.w
 8002758:	33333333 	.word	0x33333333
 800275c:	3fd33333 	.word	0x3fd33333
 8002760:	00000000 	.word	0x00000000
 8002764:	4062e000 	.word	0x4062e000
 8002768:	20000018 	.word	0x20000018
 800276c:	20000a50 	.word	0x20000a50
 8002770:	20000518 	.word	0x20000518
 8002774:	3ff00000 	.word	0x3ff00000
 8002778:	20000314 	.word	0x20000314
 800277c:	20000a4f 	.word	0x20000a4f
 8002780:	2000000c 	.word	0x2000000c
 8002784:	0800e3f4 	.word	0x0800e3f4
 8002788:	20000490 	.word	0x20000490

0800278c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b096      	sub	sp, #88	; 0x58
 8002790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002792:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002796:	2228      	movs	r2, #40	; 0x28
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f009 f941 	bl	800ba22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027a0:	f107 031c 	add.w	r3, r7, #28
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027b0:	463b      	mov	r3, r7
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	60da      	str	r2, [r3, #12]
 80027bc:	611a      	str	r2, [r3, #16]
 80027be:	615a      	str	r2, [r3, #20]
 80027c0:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027c2:	2301      	movs	r3, #1
 80027c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80027cc:	2300      	movs	r3, #0
 80027ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027d0:	2301      	movs	r3, #1
 80027d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027d4:	2302      	movs	r3, #2
 80027d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80027de:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80027e2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027e8:	4618      	mov	r0, r3
 80027ea:	f004 fb3d 	bl	8006e68 <HAL_RCC_OscConfig>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80027f4:	f000 fcb6 	bl	8003164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027f8:	230f      	movs	r3, #15
 80027fa:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027fc:	2302      	movs	r3, #2
 80027fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002800:	2300      	movs	r3, #0
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002808:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800280a:	2300      	movs	r3, #0
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800280e:	f107 031c 	add.w	r3, r7, #28
 8002812:	2102      	movs	r1, #2
 8002814:	4618      	mov	r0, r3
 8002816:	f005 fb65 	bl	8007ee4 <HAL_RCC_ClockConfig>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002820:	f000 fca0 	bl	8003164 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_I2C1;
 8002824:	f244 0320 	movw	r3, #16416	; 0x4020
 8002828:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800282a:	2310      	movs	r3, #16
 800282c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_PLLCLK;
 800282e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002832:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002834:	463b      	mov	r3, r7
 8002836:	4618      	mov	r0, r3
 8002838:	f005 fd8a 	bl	8008350 <HAL_RCCEx_PeriphCLKConfig>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002842:	f000 fc8f 	bl	8003164 <Error_Handler>
  }
}
 8002846:	bf00      	nop
 8002848:	3758      	adds	r7, #88	; 0x58
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002856:	463b      	mov	r3, r7
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
 8002864:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002866:	4b28      	ldr	r3, [pc, #160]	; (8002908 <MX_ADC2_Init+0xb8>)
 8002868:	4a28      	ldr	r2, [pc, #160]	; (800290c <MX_ADC2_Init+0xbc>)
 800286a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800286c:	4b26      	ldr	r3, [pc, #152]	; (8002908 <MX_ADC2_Init+0xb8>)
 800286e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002872:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002874:	4b24      	ldr	r3, [pc, #144]	; (8002908 <MX_ADC2_Init+0xb8>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800287a:	4b23      	ldr	r3, [pc, #140]	; (8002908 <MX_ADC2_Init+0xb8>)
 800287c:	2200      	movs	r2, #0
 800287e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002880:	4b21      	ldr	r3, [pc, #132]	; (8002908 <MX_ADC2_Init+0xb8>)
 8002882:	2200      	movs	r2, #0
 8002884:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002886:	4b20      	ldr	r3, [pc, #128]	; (8002908 <MX_ADC2_Init+0xb8>)
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800288e:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <MX_ADC2_Init+0xb8>)
 8002890:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002894:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONVHRTIM_TRG1;
 8002896:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <MX_ADC2_Init+0xb8>)
 8002898:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800289c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800289e:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <MX_ADC2_Init+0xb8>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80028a4:	4b18      	ldr	r3, [pc, #96]	; (8002908 <MX_ADC2_Init+0xb8>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80028aa:	4b17      	ldr	r3, [pc, #92]	; (8002908 <MX_ADC2_Init+0xb8>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <MX_ADC2_Init+0xb8>)
 80028b4:	2204      	movs	r2, #4
 80028b6:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80028b8:	4b13      	ldr	r3, [pc, #76]	; (8002908 <MX_ADC2_Init+0xb8>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80028be:	4b12      	ldr	r3, [pc, #72]	; (8002908 <MX_ADC2_Init+0xb8>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80028c4:	4810      	ldr	r0, [pc, #64]	; (8002908 <MX_ADC2_Init+0xb8>)
 80028c6:	f000 ffe9 	bl	800389c <HAL_ADC_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80028d0:	f000 fc48 	bl	8003164 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80028d4:	2305      	movs	r3, #5
 80028d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80028d8:	2301      	movs	r3, #1
 80028da:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028ec:	463b      	mov	r3, r7
 80028ee:	4619      	mov	r1, r3
 80028f0:	4805      	ldr	r0, [pc, #20]	; (8002908 <MX_ADC2_Init+0xb8>)
 80028f2:	f001 fab1 	bl	8003e58 <HAL_ADC_ConfigChannel>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 80028fc:	f000 fc32 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002900:	bf00      	nop
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20000280 	.word	0x20000280
 800290c:	50000100 	.word	0x50000100

08002910 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b0a6      	sub	sp, #152	; 0x98
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 8002916:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8002920:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 800292e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002932:	2254      	movs	r2, #84	; 0x54
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f009 f873 	bl	800ba22 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800293c:	f107 0320 	add.w	r3, r7, #32
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8002948:	463b      	mov	r3, r7
 800294a:	2220      	movs	r2, #32
 800294c:	2100      	movs	r1, #0
 800294e:	4618      	mov	r0, r3
 8002950:	f009 f867 	bl	800ba22 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8002954:	4b95      	ldr	r3, [pc, #596]	; (8002bac <MX_HRTIM1_Init+0x29c>)
 8002956:	4a96      	ldr	r2, [pc, #600]	; (8002bb0 <MX_HRTIM1_Init+0x2a0>)
 8002958:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800295a:	4b94      	ldr	r3, [pc, #592]	; (8002bac <MX_HRTIM1_Init+0x29c>)
 800295c:	2200      	movs	r2, #0
 800295e:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8002960:	4b92      	ldr	r3, [pc, #584]	; (8002bac <MX_HRTIM1_Init+0x29c>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8002966:	4891      	ldr	r0, [pc, #580]	; (8002bac <MX_HRTIM1_Init+0x29c>)
 8002968:	f002 fb0e 	bl	8004f88 <HAL_HRTIM_Init>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_HRTIM1_Init+0x66>
  {
    Error_Handler();
 8002972:	f000 fbf7 	bl	8003164 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_14) != HAL_OK)
 8002976:	210c      	movs	r1, #12
 8002978:	488c      	ldr	r0, [pc, #560]	; (8002bac <MX_HRTIM1_Init+0x29c>)
 800297a:	f002 fbd1 	bl	8005120 <HAL_HRTIM_DLLCalibrationStart>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <MX_HRTIM1_Init+0x78>
  {
    Error_Handler();
 8002984:	f000 fbee 	bl	8003164 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8002988:	210a      	movs	r1, #10
 800298a:	4888      	ldr	r0, [pc, #544]	; (8002bac <MX_HRTIM1_Init+0x29c>)
 800298c:	f002 fc20 	bl	80051d0 <HAL_HRTIM_PollForDLLCalibration>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_HRTIM1_Init+0x8a>
  {
    Error_Handler();
 8002996:	f000 fbe5 	bl	8003164 <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_B;
 800299a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800299e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERB_PERIOD;
 80029a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 80029aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80029ae:	461a      	mov	r2, r3
 80029b0:	2101      	movs	r1, #1
 80029b2:	487e      	ldr	r0, [pc, #504]	; (8002bac <MX_HRTIM1_Init+0x29c>)
 80029b4:	f002 fc68 	bl	8005288 <HAL_HRTIM_ADCTriggerConfig>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <MX_HRTIM1_Init+0xb2>
  {
    Error_Handler();
 80029be:	f000 fbd1 	bl	8003164 <Error_Handler>
  }
  pTimeBaseCfg.Period = 604;
 80029c2:	f44f 7317 	mov.w	r3, #604	; 0x25c
 80029c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80029d6:	2308      	movs	r3, #8
 80029d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 80029dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80029e0:	461a      	mov	r2, r3
 80029e2:	2105      	movs	r1, #5
 80029e4:	4871      	ldr	r0, [pc, #452]	; (8002bac <MX_HRTIM1_Init+0x29c>)
 80029e6:	f002 fc27 	bl	8005238 <HAL_HRTIM_TimeBaseConfig>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_HRTIM1_Init+0xe4>
  {
    Error_Handler();
 80029f0:	f000 fbb8 	bl	8003164 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 80029f8:	2300      	movs	r3, #0
 80029fa:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 80029fc:	2300      	movs	r3, #0
 80029fe:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8002a00:	2300      	movs	r3, #0
 8002a02:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8002a04:	2301      	movs	r3, #1
 8002a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8002a10:	2300      	movs	r3, #0
 8002a12:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8002a14:	2300      	movs	r3, #0
 8002a16:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8002a18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a1c:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8002a26:	2300      	movs	r3, #0
 8002a28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8002a2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a2e:	461a      	mov	r2, r3
 8002a30:	2105      	movs	r1, #5
 8002a32:	485e      	ldr	r0, [pc, #376]	; (8002bac <MX_HRTIM1_Init+0x29c>)
 8002a34:	f002 fcd2 	bl	80053dc <HAL_HRTIM_WaveformTimerConfig>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_HRTIM1_Init+0x132>
  {
    Error_Handler();
 8002a3e:	f000 fb91 	bl	8003164 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xA0FF;
 8002a42:	f24a 03ff 	movw	r3, #41215	; 0xa0ff
 8002a46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.Mode = HRTIM_MODE_SINGLESHOT_RETRIGGERABLE;
 8002a4a:	2310      	movs	r3, #16
 8002a4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8002a50:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a54:	461a      	mov	r2, r3
 8002a56:	2100      	movs	r1, #0
 8002a58:	4854      	ldr	r0, [pc, #336]	; (8002bac <MX_HRTIM1_Init+0x29c>)
 8002a5a:	f002 fbed 	bl	8005238 <HAL_HRTIM_TimeBaseConfig>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <MX_HRTIM1_Init+0x158>
  {
    Error_Handler();
 8002a64:	f000 fb7e 	bl	8003164 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8002a70:	2300      	movs	r3, #0
 8002a72:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8002a74:	2300      	movs	r3, #0
 8002a76:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8002a80:	2300      	movs	r3, #0
 8002a82:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8002a84:	2300      	movs	r3, #0
 8002a86:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_PER;
 8002a88:	2310      	movs	r3, #16
 8002a8a:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8002a90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a94:	461a      	mov	r2, r3
 8002a96:	2100      	movs	r1, #0
 8002a98:	4844      	ldr	r0, [pc, #272]	; (8002bac <MX_HRTIM1_Init+0x29c>)
 8002a9a:	f002 fc9f 	bl	80053dc <HAL_HRTIM_WaveformTimerConfig>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_HRTIM1_Init+0x198>
  {
    Error_Handler();
 8002aa4:	f000 fb5e 	bl	8003164 <Error_Handler>
  }
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8002aac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	483d      	ldr	r0, [pc, #244]	; (8002bac <MX_HRTIM1_Init+0x29c>)
 8002ab6:	f002 fc91 	bl	80053dc <HAL_HRTIM_WaveformTimerConfig>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <MX_HRTIM1_Init+0x1b4>
  {
    Error_Handler();
 8002ac0:	f000 fb50 	bl	8003164 <Error_Handler>
  }
  pCompareCfg.CompareValue = 207;
 8002ac4:	23cf      	movs	r3, #207	; 0xcf
 8002ac6:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002ac8:	f107 0320 	add.w	r3, r7, #32
 8002acc:	2201      	movs	r2, #1
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4836      	ldr	r0, [pc, #216]	; (8002bac <MX_HRTIM1_Init+0x29c>)
 8002ad2:	f002 fcf5 	bl	80054c0 <HAL_HRTIM_WaveformCompareConfig>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_HRTIM1_Init+0x1d0>
  {
    Error_Handler();
 8002adc:	f000 fb42 	bl	8003164 <Error_Handler>
  }
  pCompareCfg.CompareValue = 302;
 8002ae0:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8002ae4:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8002aea:	2300      	movs	r3, #0
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002aee:	f107 0320 	add.w	r3, r7, #32
 8002af2:	2202      	movs	r2, #2
 8002af4:	2100      	movs	r1, #0
 8002af6:	482d      	ldr	r0, [pc, #180]	; (8002bac <MX_HRTIM1_Init+0x29c>)
 8002af8:	f002 fce2 	bl	80054c0 <HAL_HRTIM_WaveformCompareConfig>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <MX_HRTIM1_Init+0x1f6>
  {
    Error_Handler();
 8002b02:	f000 fb2f 	bl	8003164 <Error_Handler>
  }
  pCompareCfg.CompareValue = 509;
 8002b06:	f240 13fd 	movw	r3, #509	; 0x1fd
 8002b0a:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002b0c:	f107 0320 	add.w	r3, r7, #32
 8002b10:	2204      	movs	r2, #4
 8002b12:	2100      	movs	r1, #0
 8002b14:	4825      	ldr	r0, [pc, #148]	; (8002bac <MX_HRTIM1_Init+0x29c>)
 8002b16:	f002 fcd3 	bl	80054c0 <HAL_HRTIM_WaveformCompareConfig>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_HRTIM1_Init+0x214>
  {
    Error_Handler();
 8002b20:	f000 fb20 	bl	8003164 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8002b24:	2300      	movs	r3, #0
 8002b26:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_MASTERPER;
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8002b2c:	2308      	movs	r3, #8
 8002b2e:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002b34:	2308      	movs	r3, #8
 8002b36:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8002b44:	463b      	mov	r3, r7
 8002b46:	2201      	movs	r2, #1
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4818      	ldr	r0, [pc, #96]	; (8002bac <MX_HRTIM1_Init+0x29c>)
 8002b4c:	f002 fe26 	bl	800579c <HAL_HRTIM_WaveformOutputConfig>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_HRTIM1_Init+0x24a>
  {
    Error_Handler();
 8002b56:	f000 fb05 	bl	8003164 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 8002b5a:	2310      	movs	r3, #16
 8002b5c:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP3;
 8002b5e:	2320      	movs	r3, #32
 8002b60:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8002b62:	463b      	mov	r3, r7
 8002b64:	2202      	movs	r2, #2
 8002b66:	2100      	movs	r1, #0
 8002b68:	4810      	ldr	r0, [pc, #64]	; (8002bac <MX_HRTIM1_Init+0x29c>)
 8002b6a:	f002 fe17 	bl	800579c <HAL_HRTIM_WaveformOutputConfig>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_HRTIM1_Init+0x268>
  {
    Error_Handler();
 8002b74:	f000 faf6 	bl	8003164 <Error_Handler>
  }
  pTimeBaseCfg.Period = 1216;
 8002b78:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002b7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8002b80:	2308      	movs	r3, #8
 8002b82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8002b86:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	4807      	ldr	r0, [pc, #28]	; (8002bac <MX_HRTIM1_Init+0x29c>)
 8002b90:	f002 fb52 	bl	8005238 <HAL_HRTIM_TimeBaseConfig>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_HRTIM1_Init+0x28e>
  {
    Error_Handler();
 8002b9a:	f000 fae3 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8002b9e:	4803      	ldr	r0, [pc, #12]	; (8002bac <MX_HRTIM1_Init+0x29c>)
 8002ba0:	f000 fb96 	bl	80032d0 <HAL_HRTIM_MspPostInit>

}
 8002ba4:	bf00      	nop
 8002ba6:	3798      	adds	r7, #152	; 0x98
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20000314 	.word	0x20000314
 8002bb0:	40017400 	.word	0x40017400

08002bb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bb8:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <MX_I2C1_Init+0x74>)
 8002bba:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <MX_I2C1_Init+0x78>)
 8002bbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8002bbe:	4b1a      	ldr	r3, [pc, #104]	; (8002c28 <MX_I2C1_Init+0x74>)
 8002bc0:	4a1b      	ldr	r2, [pc, #108]	; (8002c30 <MX_I2C1_Init+0x7c>)
 8002bc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002bc4:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <MX_I2C1_Init+0x74>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bca:	4b17      	ldr	r3, [pc, #92]	; (8002c28 <MX_I2C1_Init+0x74>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bd0:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <MX_I2C1_Init+0x74>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002bd6:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <MX_I2C1_Init+0x74>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bdc:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <MX_I2C1_Init+0x74>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002be2:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <MX_I2C1_Init+0x74>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002be8:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <MX_I2C1_Init+0x74>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bee:	480e      	ldr	r0, [pc, #56]	; (8002c28 <MX_I2C1_Init+0x74>)
 8002bf0:	f003 fa0e 	bl	8006010 <HAL_I2C_Init>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002bfa:	f000 fab3 	bl	8003164 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4809      	ldr	r0, [pc, #36]	; (8002c28 <MX_I2C1_Init+0x74>)
 8002c02:	f004 f879 	bl	8006cf8 <HAL_I2CEx_ConfigAnalogFilter>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002c0c:	f000 faaa 	bl	8003164 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c10:	2100      	movs	r1, #0
 8002c12:	4805      	ldr	r0, [pc, #20]	; (8002c28 <MX_I2C1_Init+0x74>)
 8002c14:	f004 f8bb 	bl	8006d8e <HAL_I2CEx_ConfigDigitalFilter>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002c1e:	f000 faa1 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	200003f0 	.word	0x200003f0
 8002c2c:	40005400 	.word	0x40005400
 8002c30:	10707dbc 	.word	0x10707dbc

08002c34 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c3a:	1d3b      	adds	r3, r7, #4
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c44:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <MX_TIM6_Init+0x68>)
 8002c46:	4a16      	ldr	r2, [pc, #88]	; (8002ca0 <MX_TIM6_Init+0x6c>)
 8002c48:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1024;
 8002c4a:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <MX_TIM6_Init+0x68>)
 8002c4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c50:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <MX_TIM6_Init+0x68>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 18750;
 8002c58:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <MX_TIM6_Init+0x68>)
 8002c5a:	f644 123e 	movw	r2, #18750	; 0x493e
 8002c5e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c60:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <MX_TIM6_Init+0x68>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c66:	480d      	ldr	r0, [pc, #52]	; (8002c9c <MX_TIM6_Init+0x68>)
 8002c68:	f005 fca8 	bl	80085bc <HAL_TIM_Base_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002c72:	f000 fa77 	bl	8003164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c76:	2300      	movs	r3, #0
 8002c78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c7e:	1d3b      	adds	r3, r7, #4
 8002c80:	4619      	mov	r1, r3
 8002c82:	4806      	ldr	r0, [pc, #24]	; (8002c9c <MX_TIM6_Init+0x68>)
 8002c84:	f005 ff0e 	bl	8008aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002c8e:	f000 fa69 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000444 	.word	0x20000444
 8002ca0:	40001000 	.word	0x40001000

08002ca4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ca8:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <MX_USART2_UART_Init+0x58>)
 8002caa:	4a15      	ldr	r2, [pc, #84]	; (8002d00 <MX_USART2_UART_Init+0x5c>)
 8002cac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cae:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <MX_USART2_UART_Init+0x58>)
 8002cb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <MX_USART2_UART_Init+0x58>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <MX_USART2_UART_Init+0x58>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <MX_USART2_UART_Init+0x58>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <MX_USART2_UART_Init+0x58>)
 8002cca:	220c      	movs	r2, #12
 8002ccc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cce:	4b0b      	ldr	r3, [pc, #44]	; (8002cfc <MX_USART2_UART_Init+0x58>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <MX_USART2_UART_Init+0x58>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <MX_USART2_UART_Init+0x58>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <MX_USART2_UART_Init+0x58>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ce6:	4805      	ldr	r0, [pc, #20]	; (8002cfc <MX_USART2_UART_Init+0x58>)
 8002ce8:	f005 ff68 	bl	8008bbc <HAL_UART_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002cf2:	f000 fa37 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000490 	.word	0x20000490
 8002d00:	40004400 	.word	0x40004400

08002d04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d0a:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <MX_DMA_Init+0x38>)
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	4a0b      	ldr	r2, [pc, #44]	; (8002d3c <MX_DMA_Init+0x38>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	6153      	str	r3, [r2, #20]
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <MX_DMA_Init+0x38>)
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002d22:	2200      	movs	r2, #0
 8002d24:	2100      	movs	r1, #0
 8002d26:	200c      	movs	r0, #12
 8002d28:	f001 fd5f 	bl	80047ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002d2c:	200c      	movs	r0, #12
 8002d2e:	f001 fd78 	bl	8004822 <HAL_NVIC_EnableIRQ>

}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000

08002d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	; 0x28
 8002d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d46:	f107 0314 	add.w	r3, r7, #20
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	605a      	str	r2, [r3, #4]
 8002d50:	609a      	str	r2, [r3, #8]
 8002d52:	60da      	str	r2, [r3, #12]
 8002d54:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d56:	4b24      	ldr	r3, [pc, #144]	; (8002de8 <MX_GPIO_Init+0xa8>)
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	4a23      	ldr	r2, [pc, #140]	; (8002de8 <MX_GPIO_Init+0xa8>)
 8002d5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d60:	6153      	str	r3, [r2, #20]
 8002d62:	4b21      	ldr	r3, [pc, #132]	; (8002de8 <MX_GPIO_Init+0xa8>)
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6e:	4b1e      	ldr	r3, [pc, #120]	; (8002de8 <MX_GPIO_Init+0xa8>)
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	4a1d      	ldr	r2, [pc, #116]	; (8002de8 <MX_GPIO_Init+0xa8>)
 8002d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d78:	6153      	str	r3, [r2, #20]
 8002d7a:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <MX_GPIO_Init+0xa8>)
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d86:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <MX_GPIO_Init+0xa8>)
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	4a17      	ldr	r2, [pc, #92]	; (8002de8 <MX_GPIO_Init+0xa8>)
 8002d8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002d90:	6153      	str	r3, [r2, #20]
 8002d92:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <MX_GPIO_Init+0xa8>)
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9e:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <MX_GPIO_Init+0xa8>)
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	4a11      	ldr	r2, [pc, #68]	; (8002de8 <MX_GPIO_Init+0xa8>)
 8002da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002da8:	6153      	str	r3, [r2, #20]
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <MX_GPIO_Init+0xa8>)
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002db2:	607b      	str	r3, [r7, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_DATA_Pin|EN_FULL_Pin, GPIO_PIN_RESET);
 8002db6:	2200      	movs	r2, #0
 8002db8:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002dbc:	480b      	ldr	r0, [pc, #44]	; (8002dec <MX_GPIO_Init+0xac>)
 8002dbe:	f002 f8cb 	bl	8004f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_DATA_Pin EN_FULL_Pin */
  GPIO_InitStruct.Pin = LED_DATA_Pin|EN_FULL_Pin;
 8002dc2:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd4:	f107 0314 	add.w	r3, r7, #20
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4804      	ldr	r0, [pc, #16]	; (8002dec <MX_GPIO_Init+0xac>)
 8002ddc:	f001 ff4a 	bl	8004c74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002de0:	bf00      	nop
 8002de2:	3728      	adds	r7, #40	; 0x28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40021000 	.word	0x40021000
 8002dec:	48000400 	.word	0x48000400

08002df0 <handleEvent>:

/* USER CODE BEGIN 4 */

void handleEvent(event_t event) {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	71fb      	strb	r3, [r7, #7]
	bool transitionFound = false;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < sizeof(transitionTable) / sizeof(transition_t); i++) {
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	e029      	b.n	8002e58 <handleEvent+0x68>
		if (transitionTable[i].currentState == currentState
 8002e04:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <handleEvent+0x78>)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8002e0c:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <handleEvent+0x7c>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d11e      	bne.n	8002e52 <handleEvent+0x62>
				&& transitionTable[i].event == event) {
 8002e14:	4a14      	ldr	r2, [pc, #80]	; (8002e68 <handleEvent+0x78>)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	785b      	ldrb	r3, [r3, #1]
 8002e1e:	79fa      	ldrb	r2, [r7, #7]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d116      	bne.n	8002e52 <handleEvent+0x62>
			currentState = transitionTable[i].nextState;
 8002e24:	4a10      	ldr	r2, [pc, #64]	; (8002e68 <handleEvent+0x78>)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	789a      	ldrb	r2, [r3, #2]
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <handleEvent+0x7c>)
 8002e30:	701a      	strb	r2, [r3, #0]
			if (transitionTable[i].action != NULL) {
 8002e32:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <handleEvent+0x78>)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	4413      	add	r3, r2
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <handleEvent+0x5c>
				transitionTable[i].action();
 8002e40:	4a09      	ldr	r2, [pc, #36]	; (8002e68 <handleEvent+0x78>)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	4798      	blx	r3
			}

			transitionFound = true;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
			break;
 8002e50:	e005      	b.n	8002e5e <handleEvent+0x6e>
	for (int i = 0; i < sizeof(transitionTable) / sizeof(transition_t); i++) {
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	3301      	adds	r3, #1
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b0b      	cmp	r3, #11
 8002e5c:	d9d2      	bls.n	8002e04 <handleEvent+0x14>
	}

	if (!transitionFound) {
//        printf("Invalid event in the current state\n");
	}
}
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	20000028 	.word	0x20000028
 8002e6c:	20000518 	.word	0x20000518

08002e70 <actionTurnOn>:

void actionTurnOn() {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
	HAL_HRTIM_WaveformOutputStart(&hhrtim1,
 8002e74:	2103      	movs	r1, #3
 8002e76:	4809      	ldr	r0, [pc, #36]	; (8002e9c <actionTurnOn+0x2c>)
 8002e78:	f002 fcc1 	bl	80057fe <HAL_HRTIM_WaveformOutputStart>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2);
	HAL_HRTIM_SoftwareUpdate(&hhrtim1,
 8002e7c:	2102      	movs	r1, #2
 8002e7e:	4807      	ldr	r0, [pc, #28]	; (8002e9c <actionTurnOn+0x2c>)
 8002e80:	f002 fd42 	bl	8005908 <HAL_HRTIM_SoftwareUpdate>
	HRTIM_TIMERUPDATE_A);

	HAL_Delay(50);
 8002e84:	2032      	movs	r0, #50	; 0x32
 8002e86:	f000 fcc7 	bl	8003818 <HAL_Delay>

	HAL_GPIO_WritePin(EN_FULL_GPIO_Port, EN_FULL_Pin, GPIO_PIN_SET);
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e90:	4803      	ldr	r0, [pc, #12]	; (8002ea0 <actionTurnOn+0x30>)
 8002e92:	f002 f861 	bl	8004f58 <HAL_GPIO_WritePin>
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000314 	.word	0x20000314
 8002ea0:	48000400 	.word	0x48000400

08002ea4 <actionTurnOff>:

void actionTurnOff() {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_FULL_GPIO_Port, EN_FULL_Pin, GPIO_PIN_RESET);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002eae:	4808      	ldr	r0, [pc, #32]	; (8002ed0 <actionTurnOff+0x2c>)
 8002eb0:	f002 f852 	bl	8004f58 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 8002eb4:	2032      	movs	r0, #50	; 0x32
 8002eb6:	f000 fcaf 	bl	8003818 <HAL_Delay>

	HAL_HRTIM_WaveformOutputStop(&hhrtim1,
 8002eba:	2103      	movs	r1, #3
 8002ebc:	4805      	ldr	r0, [pc, #20]	; (8002ed4 <actionTurnOff+0x30>)
 8002ebe:	f002 fccb 	bl	8005858 <HAL_HRTIM_WaveformOutputStop>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2);
	HAL_HRTIM_SoftwareUpdate(&hhrtim1,
 8002ec2:	2102      	movs	r1, #2
 8002ec4:	4803      	ldr	r0, [pc, #12]	; (8002ed4 <actionTurnOff+0x30>)
 8002ec6:	f002 fd1f 	bl	8005908 <HAL_HRTIM_SoftwareUpdate>
	HRTIM_TIMERUPDATE_A);
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	48000400 	.word	0x48000400
 8002ed4:	20000314 	.word	0x20000314

08002ed8 <parse_json>:

void parse_json(const char *json) {
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
	cJSON *root = cJSON_Parse(json);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7fe fc23 	bl	800172c <cJSON_Parse>
 8002ee6:	61f8      	str	r0, [r7, #28]
	if (root == NULL) {
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 8090 	beq.w	8003010 <parse_json+0x138>
		return;
	}

	cJSON *overtemp = cJSON_GetObjectItemCaseSensitive(root, "overtemperature");
 8002ef0:	4949      	ldr	r1, [pc, #292]	; (8003018 <parse_json+0x140>)
 8002ef2:	69f8      	ldr	r0, [r7, #28]
 8002ef4:	f7fe ff1f 	bl	8001d36 <cJSON_GetObjectItemCaseSensitive>
 8002ef8:	61b8      	str	r0, [r7, #24]
	if (cJSON_IsNumber(overtemp) && (overtemp->valuedouble != 0))
 8002efa:	69b8      	ldr	r0, [r7, #24]
 8002efc:	f7fe ff2a 	bl	8001d54 <cJSON_IsNumber>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d011      	beq.n	8002f2a <parse_json+0x52>
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	f7fd fde8 	bl	8000ae8 <__aeabi_dcmpeq>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d105      	bne.n	8002f2a <parse_json+0x52>
		TEMP_LIMIT = overtemp->valuedouble;
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f24:	493d      	ldr	r1, [pc, #244]	; (800301c <parse_json+0x144>)
 8002f26:	e9c1 2300 	strd	r2, r3, [r1]

	cJSON *overcurr = cJSON_GetObjectItemCaseSensitive(root, "overcurrent");
 8002f2a:	493d      	ldr	r1, [pc, #244]	; (8003020 <parse_json+0x148>)
 8002f2c:	69f8      	ldr	r0, [r7, #28]
 8002f2e:	f7fe ff02 	bl	8001d36 <cJSON_GetObjectItemCaseSensitive>
 8002f32:	6178      	str	r0, [r7, #20]
	if (cJSON_IsNumber(overcurr) && (overcurr->valuedouble != 0))
 8002f34:	6978      	ldr	r0, [r7, #20]
 8002f36:	f7fe ff0d 	bl	8001d54 <cJSON_IsNumber>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d011      	beq.n	8002f64 <parse_json+0x8c>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	f7fd fdcb 	bl	8000ae8 <__aeabi_dcmpeq>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d105      	bne.n	8002f64 <parse_json+0x8c>
		CURRENT_LIMIT = overcurr->valuedouble;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f5e:	4931      	ldr	r1, [pc, #196]	; (8003024 <parse_json+0x14c>)
 8002f60:	e9c1 2300 	strd	r2, r3, [r1]

	cJSON *overvolt = cJSON_GetObjectItemCaseSensitive(root, "overvoltage");
 8002f64:	4930      	ldr	r1, [pc, #192]	; (8003028 <parse_json+0x150>)
 8002f66:	69f8      	ldr	r0, [r7, #28]
 8002f68:	f7fe fee5 	bl	8001d36 <cJSON_GetObjectItemCaseSensitive>
 8002f6c:	6138      	str	r0, [r7, #16]
	if (cJSON_IsNumber(overvolt) && (overvolt->valuedouble != 0))
 8002f6e:	6938      	ldr	r0, [r7, #16]
 8002f70:	f7fe fef0 	bl	8001d54 <cJSON_IsNumber>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d011      	beq.n	8002f9e <parse_json+0xc6>
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002f80:	f04f 0200 	mov.w	r2, #0
 8002f84:	f04f 0300 	mov.w	r3, #0
 8002f88:	f7fd fdae 	bl	8000ae8 <__aeabi_dcmpeq>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d105      	bne.n	8002f9e <parse_json+0xc6>
		VOLT_LIMIT = overvolt->valuedouble;
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f98:	4924      	ldr	r1, [pc, #144]	; (800302c <parse_json+0x154>)
 8002f9a:	e9c1 2300 	strd	r2, r3, [r1]

	cJSON *mode = cJSON_GetObjectItemCaseSensitive(root, "mode");
 8002f9e:	4924      	ldr	r1, [pc, #144]	; (8003030 <parse_json+0x158>)
 8002fa0:	69f8      	ldr	r0, [r7, #28]
 8002fa2:	f7fe fec8 	bl	8001d36 <cJSON_GetObjectItemCaseSensitive>
 8002fa6:	60f8      	str	r0, [r7, #12]
	if (cJSON_IsString(mode) && (mode->valuestring != NULL)) {
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f7fe feea 	bl	8001d82 <cJSON_IsString>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d02e      	beq.n	8003012 <parse_json+0x13a>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d02a      	beq.n	8003012 <parse_json+0x13a>
		if (strcmp(mode->valuestring, "off") == 0) {
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	491c      	ldr	r1, [pc, #112]	; (8003034 <parse_json+0x15c>)
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd f904 	bl	80001d0 <strcmp>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d103      	bne.n	8002fd6 <parse_json+0xfe>
			handleEvent(EVENT_OFF_MSG);
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7ff ff0e 	bl	8002df0 <handleEvent>
 8002fd4:	e018      	b.n	8003008 <parse_json+0x130>
		}
		else if (strcmp(mode->valuestring, "localization") == 0) {
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	4917      	ldr	r1, [pc, #92]	; (8003038 <parse_json+0x160>)
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fd f8f7 	bl	80001d0 <strcmp>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d103      	bne.n	8002ff0 <parse_json+0x118>
			handleEvent(EVENT_LOCALIZATION_MSG);
 8002fe8:	2002      	movs	r0, #2
 8002fea:	f7ff ff01 	bl	8002df0 <handleEvent>
 8002fee:	e00b      	b.n	8003008 <parse_json+0x130>
		}
		else if (strcmp(mode->valuestring, "deploy") == 0) {
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	4911      	ldr	r1, [pc, #68]	; (800303c <parse_json+0x164>)
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fd f8ea 	bl	80001d0 <strcmp>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d102      	bne.n	8003008 <parse_json+0x130>
			handleEvent(EVENT_DEPLOY_MSG);
 8003002:	2003      	movs	r0, #3
 8003004:	f7ff fef4 	bl	8002df0 <handleEvent>
		}

	cJSON_Delete(root);
 8003008:	69f8      	ldr	r0, [r7, #28]
 800300a:	f7fd feb5 	bl	8000d78 <cJSON_Delete>
 800300e:	e000      	b.n	8003012 <parse_json+0x13a>
		return;
 8003010:	bf00      	nop
	}
}
 8003012:	3720      	adds	r7, #32
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	0800e484 	.word	0x0800e484
 800301c:	20000010 	.word	0x20000010
 8003020:	0800e494 	.word	0x0800e494
 8003024:	20000018 	.word	0x20000018
 8003028:	0800e4a0 	.word	0x0800e4a0
 800302c:	20000020 	.word	0x20000020
 8003030:	0800e4ac 	.word	0x0800e4ac
 8003034:	0800e4b4 	.word	0x0800e4b4
 8003038:	0800e4b8 	.word	0x0800e4b8
 800303c:	0800e4c8 	.word	0x0800e4c8

08003040 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
	UART_READY = true;
 8003048:	4b07      	ldr	r3, [pc, #28]	; (8003068 <HAL_UART_TxCpltCallback+0x28>)
 800304a:	2201      	movs	r2, #1
 800304c:	701a      	strb	r2, [r3, #0]
	if (gAlertType != NONE)
 800304e:	4b07      	ldr	r3, [pc, #28]	; (800306c <HAL_UART_TxCpltCallback+0x2c>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <HAL_UART_TxCpltCallback+0x1c>
		gAlertType = NONE;
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <HAL_UART_TxCpltCallback+0x2c>)
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	2000000c 	.word	0x2000000c
 800306c:	20000a50 	.word	0x20000a50

08003070 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
	SEND_TIMER_FLAG = true;
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]

}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	20000a4f 	.word	0x20000a4f

08003090 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a2e      	ldr	r2, [pc, #184]	; (8003154 <HAL_UART_RxCpltCallback+0xc4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d155      	bne.n	800314c <HAL_UART_RxCpltCallback+0xbc>
		if (rxIndex < BUFFER_SIZE) {
 80030a0:	4b2d      	ldr	r3, [pc, #180]	; (8003158 <HAL_UART_RxCpltCallback+0xc8>)
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030aa:	d244      	bcs.n	8003136 <HAL_UART_RxCpltCallback+0xa6>
			if (rxBuffer[rxIndex] == '{') {
 80030ac:	4b2a      	ldr	r3, [pc, #168]	; (8003158 <HAL_UART_RxCpltCallback+0xc8>)
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b29      	ldr	r3, [pc, #164]	; (800315c <HAL_UART_RxCpltCallback+0xcc>)
 80030b6:	5c9b      	ldrb	r3, [r3, r2]
 80030b8:	2b7b      	cmp	r3, #123	; 0x7b
 80030ba:	d105      	bne.n	80030c8 <HAL_UART_RxCpltCallback+0x38>
				// Start of JSON data
				rxIndex = 0;
 80030bc:	4b26      	ldr	r3, [pc, #152]	; (8003158 <HAL_UART_RxCpltCallback+0xc8>)
 80030be:	2200      	movs	r2, #0
 80030c0:	801a      	strh	r2, [r3, #0]
				jsonFlag = 1;
 80030c2:	4b27      	ldr	r3, [pc, #156]	; (8003160 <HAL_UART_RxCpltCallback+0xd0>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	701a      	strb	r2, [r3, #0]
			}

			if (jsonFlag) {
 80030c8:	4b25      	ldr	r3, [pc, #148]	; (8003160 <HAL_UART_RxCpltCallback+0xd0>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d031      	beq.n	8003136 <HAL_UART_RxCpltCallback+0xa6>
				// Store received data in the buffer
				rxBuffer[rxIndex] =
						rxBuffer[rxIndex] == '\r' ? '\n' : rxBuffer[rxIndex]; // Replace '\r' with '\n'
 80030d2:	4b21      	ldr	r3, [pc, #132]	; (8003158 <HAL_UART_RxCpltCallback+0xc8>)
 80030d4:	881b      	ldrh	r3, [r3, #0]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	4b20      	ldr	r3, [pc, #128]	; (800315c <HAL_UART_RxCpltCallback+0xcc>)
 80030dc:	5c9b      	ldrb	r3, [r3, r2]
				rxBuffer[rxIndex] =
 80030de:	2b0d      	cmp	r3, #13
 80030e0:	d006      	beq.n	80030f0 <HAL_UART_RxCpltCallback+0x60>
						rxBuffer[rxIndex] == '\r' ? '\n' : rxBuffer[rxIndex]; // Replace '\r' with '\n'
 80030e2:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <HAL_UART_RxCpltCallback+0xc8>)
 80030e4:	881b      	ldrh	r3, [r3, #0]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	461a      	mov	r2, r3
				rxBuffer[rxIndex] =
 80030ea:	4b1c      	ldr	r3, [pc, #112]	; (800315c <HAL_UART_RxCpltCallback+0xcc>)
 80030ec:	5c9b      	ldrb	r3, [r3, r2]
 80030ee:	e000      	b.n	80030f2 <HAL_UART_RxCpltCallback+0x62>
 80030f0:	230a      	movs	r3, #10
 80030f2:	4a19      	ldr	r2, [pc, #100]	; (8003158 <HAL_UART_RxCpltCallback+0xc8>)
 80030f4:	8812      	ldrh	r2, [r2, #0]
 80030f6:	b292      	uxth	r2, r2
 80030f8:	4611      	mov	r1, r2
 80030fa:	4a18      	ldr	r2, [pc, #96]	; (800315c <HAL_UART_RxCpltCallback+0xcc>)
 80030fc:	5453      	strb	r3, [r2, r1]
				rxIndex++;
 80030fe:	4b16      	ldr	r3, [pc, #88]	; (8003158 <HAL_UART_RxCpltCallback+0xc8>)
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	3301      	adds	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	4b13      	ldr	r3, [pc, #76]	; (8003158 <HAL_UART_RxCpltCallback+0xc8>)
 800310a:	801a      	strh	r2, [r3, #0]

				if (rxBuffer[rxIndex - 1] == '}') {
 800310c:	4b12      	ldr	r3, [pc, #72]	; (8003158 <HAL_UART_RxCpltCallback+0xc8>)
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	4a11      	ldr	r2, [pc, #68]	; (800315c <HAL_UART_RxCpltCallback+0xcc>)
 8003116:	5cd3      	ldrb	r3, [r2, r3]
 8003118:	2b7d      	cmp	r3, #125	; 0x7d
 800311a:	d10c      	bne.n	8003136 <HAL_UART_RxCpltCallback+0xa6>
					// End of JSON data
					rxBuffer[rxIndex] = '\0'; // Null-terminate the JSON string
 800311c:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <HAL_UART_RxCpltCallback+0xc8>)
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	b29b      	uxth	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	4b0d      	ldr	r3, [pc, #52]	; (800315c <HAL_UART_RxCpltCallback+0xcc>)
 8003126:	2100      	movs	r1, #0
 8003128:	5499      	strb	r1, [r3, r2]
					jsonFlag = 0;
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <HAL_UART_RxCpltCallback+0xd0>)
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
					parse_json((const char*) rxBuffer);
 8003130:	480a      	ldr	r0, [pc, #40]	; (800315c <HAL_UART_RxCpltCallback+0xcc>)
 8003132:	f7ff fed1 	bl	8002ed8 <parse_json>
				}
			}
		}

		HAL_UART_Receive_IT(&huart2, &rxBuffer[rxIndex], 1); // Enable UART receive interrupt again
 8003136:	4b08      	ldr	r3, [pc, #32]	; (8003158 <HAL_UART_RxCpltCallback+0xc8>)
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	b29b      	uxth	r3, r3
 800313c:	461a      	mov	r2, r3
 800313e:	4b07      	ldr	r3, [pc, #28]	; (800315c <HAL_UART_RxCpltCallback+0xcc>)
 8003140:	4413      	add	r3, r2
 8003142:	2201      	movs	r2, #1
 8003144:	4619      	mov	r1, r3
 8003146:	4803      	ldr	r0, [pc, #12]	; (8003154 <HAL_UART_RxCpltCallback+0xc4>)
 8003148:	f005 fde4 	bl	8008d14 <HAL_UART_Receive_IT>
	}
}
 800314c:	bf00      	nop
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	20000490 	.word	0x20000490
 8003158:	20000a4c 	.word	0x20000a4c
 800315c:	2000064c 	.word	0x2000064c
 8003160:	20000a4e 	.word	0x20000a4e

08003164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003168:	b672      	cpsid	i
}
 800316a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800316c:	e7fe      	b.n	800316c <Error_Handler+0x8>
	...

08003170 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003176:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <HAL_MspInit+0x44>)
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	4a0e      	ldr	r2, [pc, #56]	; (80031b4 <HAL_MspInit+0x44>)
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	6193      	str	r3, [r2, #24]
 8003182:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <HAL_MspInit+0x44>)
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <HAL_MspInit+0x44>)
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	4a08      	ldr	r2, [pc, #32]	; (80031b4 <HAL_MspInit+0x44>)
 8003194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003198:	61d3      	str	r3, [r2, #28]
 800319a:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <HAL_MspInit+0x44>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40021000 	.word	0x40021000

080031b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	; 0x28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a29      	ldr	r2, [pc, #164]	; (800327c <HAL_ADC_MspInit+0xc4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d14b      	bne.n	8003272 <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80031da:	4b29      	ldr	r3, [pc, #164]	; (8003280 <HAL_ADC_MspInit+0xc8>)
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	4a28      	ldr	r2, [pc, #160]	; (8003280 <HAL_ADC_MspInit+0xc8>)
 80031e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e4:	6153      	str	r3, [r2, #20]
 80031e6:	4b26      	ldr	r3, [pc, #152]	; (8003280 <HAL_ADC_MspInit+0xc8>)
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031f2:	4b23      	ldr	r3, [pc, #140]	; (8003280 <HAL_ADC_MspInit+0xc8>)
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	4a22      	ldr	r2, [pc, #136]	; (8003280 <HAL_ADC_MspInit+0xc8>)
 80031f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80031fc:	6153      	str	r3, [r2, #20]
 80031fe:	4b20      	ldr	r3, [pc, #128]	; (8003280 <HAL_ADC_MspInit+0xc8>)
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC4     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800320a:	2310      	movs	r3, #16
 800320c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800320e:	2303      	movs	r3, #3
 8003210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003216:	f107 0314 	add.w	r3, r7, #20
 800321a:	4619      	mov	r1, r3
 800321c:	4819      	ldr	r0, [pc, #100]	; (8003284 <HAL_ADC_MspInit+0xcc>)
 800321e:	f001 fd29 	bl	8004c74 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 8003222:	4b19      	ldr	r3, [pc, #100]	; (8003288 <HAL_ADC_MspInit+0xd0>)
 8003224:	4a19      	ldr	r2, [pc, #100]	; (800328c <HAL_ADC_MspInit+0xd4>)
 8003226:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003228:	4b17      	ldr	r3, [pc, #92]	; (8003288 <HAL_ADC_MspInit+0xd0>)
 800322a:	2200      	movs	r2, #0
 800322c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800322e:	4b16      	ldr	r3, [pc, #88]	; (8003288 <HAL_ADC_MspInit+0xd0>)
 8003230:	2200      	movs	r2, #0
 8003232:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003234:	4b14      	ldr	r3, [pc, #80]	; (8003288 <HAL_ADC_MspInit+0xd0>)
 8003236:	2280      	movs	r2, #128	; 0x80
 8003238:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800323a:	4b13      	ldr	r3, [pc, #76]	; (8003288 <HAL_ADC_MspInit+0xd0>)
 800323c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003240:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003242:	4b11      	ldr	r3, [pc, #68]	; (8003288 <HAL_ADC_MspInit+0xd0>)
 8003244:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003248:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800324a:	4b0f      	ldr	r3, [pc, #60]	; (8003288 <HAL_ADC_MspInit+0xd0>)
 800324c:	2220      	movs	r2, #32
 800324e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003250:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <HAL_ADC_MspInit+0xd0>)
 8003252:	2200      	movs	r2, #0
 8003254:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003256:	480c      	ldr	r0, [pc, #48]	; (8003288 <HAL_ADC_MspInit+0xd0>)
 8003258:	f001 fafd 	bl	8004856 <HAL_DMA_Init>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8003262:	f7ff ff7f 	bl	8003164 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a07      	ldr	r2, [pc, #28]	; (8003288 <HAL_ADC_MspInit+0xd0>)
 800326a:	639a      	str	r2, [r3, #56]	; 0x38
 800326c:	4a06      	ldr	r2, [pc, #24]	; (8003288 <HAL_ADC_MspInit+0xd0>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003272:	bf00      	nop
 8003274:	3728      	adds	r7, #40	; 0x28
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	50000100 	.word	0x50000100
 8003280:	40021000 	.word	0x40021000
 8003284:	48000800 	.word	0x48000800
 8003288:	200002d0 	.word	0x200002d0
 800328c:	4002001c 	.word	0x4002001c

08003290 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a0a      	ldr	r2, [pc, #40]	; (80032c8 <HAL_HRTIM_MspInit+0x38>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d10b      	bne.n	80032ba <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <HAL_HRTIM_MspInit+0x3c>)
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	4a09      	ldr	r2, [pc, #36]	; (80032cc <HAL_HRTIM_MspInit+0x3c>)
 80032a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032ac:	6193      	str	r3, [r2, #24]
 80032ae:	4b07      	ldr	r3, [pc, #28]	; (80032cc <HAL_HRTIM_MspInit+0x3c>)
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 80032ba:	bf00      	nop
 80032bc:	3714      	adds	r7, #20
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40017400 	.word	0x40017400
 80032cc:	40021000 	.word	0x40021000

080032d0 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d8:	f107 030c 	add.w	r3, r7, #12
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a12      	ldr	r2, [pc, #72]	; (8003338 <HAL_HRTIM_MspPostInit+0x68>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d11d      	bne.n	800332e <HAL_HRTIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f2:	4b12      	ldr	r3, [pc, #72]	; (800333c <HAL_HRTIM_MspPostInit+0x6c>)
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	4a11      	ldr	r2, [pc, #68]	; (800333c <HAL_HRTIM_MspPostInit+0x6c>)
 80032f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032fc:	6153      	str	r3, [r2, #20]
 80032fe:	4b0f      	ldr	r3, [pc, #60]	; (800333c <HAL_HRTIM_MspPostInit+0x6c>)
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800330a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800330e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003310:	2302      	movs	r3, #2
 8003312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003318:	2303      	movs	r3, #3
 800331a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 800331c:	230d      	movs	r3, #13
 800331e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003320:	f107 030c 	add.w	r3, r7, #12
 8003324:	4619      	mov	r1, r3
 8003326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800332a:	f001 fca3 	bl	8004c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 800332e:	bf00      	nop
 8003330:	3720      	adds	r7, #32
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40017400 	.word	0x40017400
 800333c:	40021000 	.word	0x40021000

08003340 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	; 0x28
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003348:	f107 0314 	add.w	r3, r7, #20
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a1b      	ldr	r2, [pc, #108]	; (80033cc <HAL_I2C_MspInit+0x8c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d12f      	bne.n	80033c2 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003362:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <HAL_I2C_MspInit+0x90>)
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	4a1a      	ldr	r2, [pc, #104]	; (80033d0 <HAL_I2C_MspInit+0x90>)
 8003368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800336c:	6153      	str	r3, [r2, #20]
 800336e:	4b18      	ldr	r3, [pc, #96]	; (80033d0 <HAL_I2C_MspInit+0x90>)
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800337a:	23c0      	movs	r3, #192	; 0xc0
 800337c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800337e:	2312      	movs	r3, #18
 8003380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003382:	2300      	movs	r3, #0
 8003384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003386:	2303      	movs	r3, #3
 8003388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800338a:	2304      	movs	r3, #4
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800338e:	f107 0314 	add.w	r3, r7, #20
 8003392:	4619      	mov	r1, r3
 8003394:	480f      	ldr	r0, [pc, #60]	; (80033d4 <HAL_I2C_MspInit+0x94>)
 8003396:	f001 fc6d 	bl	8004c74 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 800339a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800339e:	f003 fd43 	bl	8006e28 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 80033a2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80033a6:	f003 fd3f 	bl	8006e28 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033aa:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_I2C_MspInit+0x90>)
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	4a08      	ldr	r2, [pc, #32]	; (80033d0 <HAL_I2C_MspInit+0x90>)
 80033b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033b4:	61d3      	str	r3, [r2, #28]
 80033b6:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_I2C_MspInit+0x90>)
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033c2:	bf00      	nop
 80033c4:	3728      	adds	r7, #40	; 0x28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40005400 	.word	0x40005400
 80033d0:	40021000 	.word	0x40021000
 80033d4:	48000400 	.word	0x48000400

080033d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0d      	ldr	r2, [pc, #52]	; (800341c <HAL_TIM_Base_MspInit+0x44>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d113      	bne.n	8003412 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80033ea:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <HAL_TIM_Base_MspInit+0x48>)
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	4a0c      	ldr	r2, [pc, #48]	; (8003420 <HAL_TIM_Base_MspInit+0x48>)
 80033f0:	f043 0310 	orr.w	r3, r3, #16
 80033f4:	61d3      	str	r3, [r2, #28]
 80033f6:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <HAL_TIM_Base_MspInit+0x48>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8003402:	2200      	movs	r2, #0
 8003404:	2100      	movs	r1, #0
 8003406:	2036      	movs	r0, #54	; 0x36
 8003408:	f001 f9ef 	bl	80047ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800340c:	2036      	movs	r0, #54	; 0x36
 800340e:	f001 fa08 	bl	8004822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003412:	bf00      	nop
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40001000 	.word	0x40001000
 8003420:	40021000 	.word	0x40021000

08003424 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342c:	f107 0314 	add.w	r3, r7, #20
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a1b      	ldr	r2, [pc, #108]	; (80034b0 <HAL_UART_MspInit+0x8c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d130      	bne.n	80034a8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003446:	4b1b      	ldr	r3, [pc, #108]	; (80034b4 <HAL_UART_MspInit+0x90>)
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	4a1a      	ldr	r2, [pc, #104]	; (80034b4 <HAL_UART_MspInit+0x90>)
 800344c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003450:	61d3      	str	r3, [r2, #28]
 8003452:	4b18      	ldr	r3, [pc, #96]	; (80034b4 <HAL_UART_MspInit+0x90>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800345e:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <HAL_UART_MspInit+0x90>)
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	4a14      	ldr	r2, [pc, #80]	; (80034b4 <HAL_UART_MspInit+0x90>)
 8003464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003468:	6153      	str	r3, [r2, #20]
 800346a:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <HAL_UART_MspInit+0x90>)
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003476:	230c      	movs	r3, #12
 8003478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347a:	2302      	movs	r3, #2
 800347c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003482:	2303      	movs	r3, #3
 8003484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003486:	2307      	movs	r3, #7
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348a:	f107 0314 	add.w	r3, r7, #20
 800348e:	4619      	mov	r1, r3
 8003490:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003494:	f001 fbee 	bl	8004c74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 11, 0);
 8003498:	2200      	movs	r2, #0
 800349a:	210b      	movs	r1, #11
 800349c:	2026      	movs	r0, #38	; 0x26
 800349e:	f001 f9a4 	bl	80047ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034a2:	2026      	movs	r0, #38	; 0x26
 80034a4:	f001 f9bd 	bl	8004822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034a8:	bf00      	nop
 80034aa:	3728      	adds	r7, #40	; 0x28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40004400 	.word	0x40004400
 80034b4:	40021000 	.word	0x40021000

080034b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034bc:	e7fe      	b.n	80034bc <NMI_Handler+0x4>

080034be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034be:	b480      	push	{r7}
 80034c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034c2:	e7fe      	b.n	80034c2 <HardFault_Handler+0x4>

080034c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034c8:	e7fe      	b.n	80034c8 <MemManage_Handler+0x4>

080034ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034ca:	b480      	push	{r7}
 80034cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034ce:	e7fe      	b.n	80034ce <BusFault_Handler+0x4>

080034d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034d4:	e7fe      	b.n	80034d4 <UsageFault_Handler+0x4>

080034d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034d6:	b480      	push	{r7}
 80034d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034e8:	bf00      	nop
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034f2:	b480      	push	{r7}
 80034f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003504:	f000 f968 	bl	80037d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003508:	bf00      	nop
 800350a:	bd80      	pop	{r7, pc}

0800350c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003510:	4802      	ldr	r0, [pc, #8]	; (800351c <DMA1_Channel2_IRQHandler+0x10>)
 8003512:	f001 fabd 	bl	8004a90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	200002d0 	.word	0x200002d0

08003520 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003524:	4802      	ldr	r0, [pc, #8]	; (8003530 <USART2_IRQHandler+0x10>)
 8003526:	f005 fc39 	bl	8008d9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000490 	.word	0x20000490

08003534 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003538:	4802      	ldr	r0, [pc, #8]	; (8003544 <TIM6_DAC1_IRQHandler+0x10>)
 800353a:	f005 f8f3 	bl	8008724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000444 	.word	0x20000444

08003548 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return 1;
 800354c:	2301      	movs	r3, #1
}
 800354e:	4618      	mov	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <_kill>:

int _kill(int pid, int sig)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003562:	f008 fad3 	bl	800bb0c <__errno>
 8003566:	4603      	mov	r3, r0
 8003568:	2216      	movs	r2, #22
 800356a:	601a      	str	r2, [r3, #0]
  return -1;
 800356c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <_exit>:

void _exit (int status)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003580:	f04f 31ff 	mov.w	r1, #4294967295
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff ffe7 	bl	8003558 <_kill>
  while (1) {}    /* Make sure we hang here */
 800358a:	e7fe      	b.n	800358a <_exit+0x12>

0800358c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	e00a      	b.n	80035b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800359e:	f3af 8000 	nop.w
 80035a2:	4601      	mov	r1, r0
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	1c5a      	adds	r2, r3, #1
 80035a8:	60ba      	str	r2, [r7, #8]
 80035aa:	b2ca      	uxtb	r2, r1
 80035ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	3301      	adds	r3, #1
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	dbf0      	blt.n	800359e <_read+0x12>
  }

  return len;
 80035bc:	687b      	ldr	r3, [r7, #4]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b086      	sub	sp, #24
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
 80035d6:	e009      	b.n	80035ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	60ba      	str	r2, [r7, #8]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	3301      	adds	r3, #1
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	dbf1      	blt.n	80035d8 <_write+0x12>
  }
  return len;
 80035f4:	687b      	ldr	r3, [r7, #4]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <_close>:

int _close(int file)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
}
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003626:	605a      	str	r2, [r3, #4]
  return 0;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <_isatty>:

int _isatty(int file)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800363e:	2301      	movs	r3, #1
}
 8003640:	4618      	mov	r0, r3
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003670:	4a14      	ldr	r2, [pc, #80]	; (80036c4 <_sbrk+0x5c>)
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <_sbrk+0x60>)
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800367c:	4b13      	ldr	r3, [pc, #76]	; (80036cc <_sbrk+0x64>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d102      	bne.n	800368a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003684:	4b11      	ldr	r3, [pc, #68]	; (80036cc <_sbrk+0x64>)
 8003686:	4a12      	ldr	r2, [pc, #72]	; (80036d0 <_sbrk+0x68>)
 8003688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800368a:	4b10      	ldr	r3, [pc, #64]	; (80036cc <_sbrk+0x64>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	429a      	cmp	r2, r3
 8003696:	d207      	bcs.n	80036a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003698:	f008 fa38 	bl	800bb0c <__errno>
 800369c:	4603      	mov	r3, r0
 800369e:	220c      	movs	r2, #12
 80036a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036a2:	f04f 33ff 	mov.w	r3, #4294967295
 80036a6:	e009      	b.n	80036bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036a8:	4b08      	ldr	r3, [pc, #32]	; (80036cc <_sbrk+0x64>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036ae:	4b07      	ldr	r3, [pc, #28]	; (80036cc <_sbrk+0x64>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4413      	add	r3, r2
 80036b6:	4a05      	ldr	r2, [pc, #20]	; (80036cc <_sbrk+0x64>)
 80036b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036ba:	68fb      	ldr	r3, [r7, #12]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	20003000 	.word	0x20003000
 80036c8:	00000400 	.word	0x00000400
 80036cc:	20000a54 	.word	0x20000a54
 80036d0:	20000ba8 	.word	0x20000ba8

080036d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036d8:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <SystemInit+0x20>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036de:	4a05      	ldr	r2, [pc, #20]	; (80036f4 <SystemInit+0x20>)
 80036e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80036f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003730 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80036fc:	f7ff ffea 	bl	80036d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003700:	480c      	ldr	r0, [pc, #48]	; (8003734 <LoopForever+0x6>)
  ldr r1, =_edata
 8003702:	490d      	ldr	r1, [pc, #52]	; (8003738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003704:	4a0d      	ldr	r2, [pc, #52]	; (800373c <LoopForever+0xe>)
  movs r3, #0
 8003706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003708:	e002      	b.n	8003710 <LoopCopyDataInit>

0800370a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800370a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800370c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800370e:	3304      	adds	r3, #4

08003710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003714:	d3f9      	bcc.n	800370a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003716:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003718:	4c0a      	ldr	r4, [pc, #40]	; (8003744 <LoopForever+0x16>)
  movs r3, #0
 800371a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800371c:	e001      	b.n	8003722 <LoopFillZerobss>

0800371e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800371e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003720:	3204      	adds	r2, #4

08003722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003724:	d3fb      	bcc.n	800371e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003726:	f008 f9f7 	bl	800bb18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800372a:	f7fe fb41 	bl	8001db0 <main>

0800372e <LoopForever>:

LoopForever:
    b LoopForever
 800372e:	e7fe      	b.n	800372e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003730:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8003734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003738:	2000025c 	.word	0x2000025c
  ldr r2, =_sidata
 800373c:	0800e93c 	.word	0x0800e93c
  ldr r2, =_sbss
 8003740:	2000025c 	.word	0x2000025c
  ldr r4, =_ebss
 8003744:	20000ba8 	.word	0x20000ba8

08003748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003748:	e7fe      	b.n	8003748 <ADC1_2_IRQHandler>
	...

0800374c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003750:	4b08      	ldr	r3, [pc, #32]	; (8003774 <HAL_Init+0x28>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a07      	ldr	r2, [pc, #28]	; (8003774 <HAL_Init+0x28>)
 8003756:	f043 0310 	orr.w	r3, r3, #16
 800375a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800375c:	2003      	movs	r0, #3
 800375e:	f001 f839 	bl	80047d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003762:	200a      	movs	r0, #10
 8003764:	f000 f808 	bl	8003778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003768:	f7ff fd02 	bl	8003170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40022000 	.word	0x40022000

08003778 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003780:	4b12      	ldr	r3, [pc, #72]	; (80037cc <HAL_InitTick+0x54>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <HAL_InitTick+0x58>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	4619      	mov	r1, r3
 800378a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800378e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003792:	fbb2 f3f3 	udiv	r3, r2, r3
 8003796:	4618      	mov	r0, r3
 8003798:	f001 f851 	bl	800483e <HAL_SYSTICK_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e00e      	b.n	80037c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b0f      	cmp	r3, #15
 80037aa:	d80a      	bhi.n	80037c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037ac:	2200      	movs	r2, #0
 80037ae:	6879      	ldr	r1, [r7, #4]
 80037b0:	f04f 30ff 	mov.w	r0, #4294967295
 80037b4:	f001 f819 	bl	80047ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037b8:	4a06      	ldr	r2, [pc, #24]	; (80037d4 <HAL_InitTick+0x5c>)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	e000      	b.n	80037c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000088 	.word	0x20000088
 80037d0:	20000090 	.word	0x20000090
 80037d4:	2000008c 	.word	0x2000008c

080037d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037dc:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <HAL_IncTick+0x20>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <HAL_IncTick+0x24>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4413      	add	r3, r2
 80037e8:	4a04      	ldr	r2, [pc, #16]	; (80037fc <HAL_IncTick+0x24>)
 80037ea:	6013      	str	r3, [r2, #0]
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	20000090 	.word	0x20000090
 80037fc:	20000a58 	.word	0x20000a58

08003800 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return uwTick;  
 8003804:	4b03      	ldr	r3, [pc, #12]	; (8003814 <HAL_GetTick+0x14>)
 8003806:	681b      	ldr	r3, [r3, #0]
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20000a58 	.word	0x20000a58

08003818 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003820:	f7ff ffee 	bl	8003800 <HAL_GetTick>
 8003824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d005      	beq.n	800383e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <HAL_Delay+0x44>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	461a      	mov	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4413      	add	r3, r2
 800383c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800383e:	bf00      	nop
 8003840:	f7ff ffde 	bl	8003800 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	429a      	cmp	r2, r3
 800384e:	d8f7      	bhi.n	8003840 <HAL_Delay+0x28>
  {
  }
}
 8003850:	bf00      	nop
 8003852:	bf00      	nop
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000090 	.word	0x20000090

08003860 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b09a      	sub	sp, #104	; 0x68
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d101      	bne.n	80038bc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e172      	b.n	8003ba2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d176      	bne.n	80039bc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d152      	bne.n	800397c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff fc61 	bl	80031b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d13b      	bne.n	800397c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 fe2f 	bl	8004568 <ADC_Disable>
 800390a:	4603      	mov	r3, r0
 800390c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	f003 0310 	and.w	r3, r3, #16
 8003918:	2b00      	cmp	r3, #0
 800391a:	d12f      	bne.n	800397c <HAL_ADC_Init+0xe0>
 800391c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003920:	2b00      	cmp	r3, #0
 8003922:	d12b      	bne.n	800397c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800392c:	f023 0302 	bic.w	r3, r3, #2
 8003930:	f043 0202 	orr.w	r2, r3, #2
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003946:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003956:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003958:	4b94      	ldr	r3, [pc, #592]	; (8003bac <HAL_ADC_Init+0x310>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a94      	ldr	r2, [pc, #592]	; (8003bb0 <HAL_ADC_Init+0x314>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	0c9a      	lsrs	r2, r3, #18
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800396e:	e002      	b.n	8003976 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	3b01      	subs	r3, #1
 8003974:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f9      	bne.n	8003970 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d007      	beq.n	800399a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003998:	d110      	bne.n	80039bc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399e:	f023 0312 	bic.w	r3, r3, #18
 80039a2:	f043 0210 	orr.w	r2, r3, #16
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	f043 0201 	orr.w	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	f003 0310 	and.w	r3, r3, #16
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f040 80df 	bne.w	8003b88 <HAL_ADC_Init+0x2ec>
 80039ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f040 80da 	bne.w	8003b88 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f040 80d2 	bne.w	8003b88 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80039ec:	f043 0202 	orr.w	r2, r3, #2
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039f4:	4b6f      	ldr	r3, [pc, #444]	; (8003bb4 <HAL_ADC_Init+0x318>)
 80039f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a00:	d102      	bne.n	8003a08 <HAL_ADC_Init+0x16c>
 8003a02:	4b6d      	ldr	r3, [pc, #436]	; (8003bb8 <HAL_ADC_Init+0x31c>)
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	e002      	b.n	8003a0e <HAL_ADC_Init+0x172>
 8003a08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a0c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d108      	bne.n	8003a2e <HAL_ADC_Init+0x192>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_ADC_Init+0x192>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_ADC_Init+0x194>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d11c      	bne.n	8003a6e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a34:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d010      	beq.n	8003a5c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d107      	bne.n	8003a56 <HAL_ADC_Init+0x1ba>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_ADC_Init+0x1ba>
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <HAL_ADC_Init+0x1bc>
 8003a56:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d108      	bne.n	8003a6e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a6c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	7e5b      	ldrb	r3, [r3, #25]
 8003a72:	035b      	lsls	r3, r3, #13
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a78:	2a01      	cmp	r2, #1
 8003a7a:	d002      	beq.n	8003a82 <HAL_ADC_Init+0x1e6>
 8003a7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a80:	e000      	b.n	8003a84 <HAL_ADC_Init+0x1e8>
 8003a82:	2200      	movs	r2, #0
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a94:	4313      	orrs	r3, r2
 8003a96:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d11b      	bne.n	8003ada <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	7e5b      	ldrb	r3, [r3, #25]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	045a      	lsls	r2, r3, #17
 8003ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aba:	663b      	str	r3, [r7, #96]	; 0x60
 8003abc:	e00d      	b.n	8003ada <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003ac6:	f043 0220 	orr.w	r2, r3, #32
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad2:	f043 0201 	orr.w	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d007      	beq.n	8003af2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	4313      	orrs	r3, r2
 8003aec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003aee:	4313      	orrs	r3, r2
 8003af0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 030c 	and.w	r3, r3, #12
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d114      	bne.n	8003b2a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b0e:	f023 0302 	bic.w	r3, r3, #2
 8003b12:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	7e1b      	ldrb	r3, [r3, #24]
 8003b18:	039a      	lsls	r2, r3, #14
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	4313      	orrs	r3, r2
 8003b24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b26:	4313      	orrs	r3, r2
 8003b28:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68da      	ldr	r2, [r3, #12]
 8003b30:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <HAL_ADC_Init+0x320>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003b3a:	430b      	orrs	r3, r1
 8003b3c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d10c      	bne.n	8003b60 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	f023 010f 	bic.w	r1, r3, #15
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	1e5a      	subs	r2, r3, #1
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b5e:	e007      	b.n	8003b70 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 020f 	bic.w	r2, r2, #15
 8003b6e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f023 0303 	bic.w	r3, r3, #3
 8003b7e:	f043 0201 	orr.w	r2, r3, #1
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	641a      	str	r2, [r3, #64]	; 0x40
 8003b86:	e00a      	b.n	8003b9e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	f023 0312 	bic.w	r3, r3, #18
 8003b90:	f043 0210 	orr.w	r2, r3, #16
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003b98:	2301      	movs	r3, #1
 8003b9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003b9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3768      	adds	r7, #104	; 0x68
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000088 	.word	0x20000088
 8003bb0:	431bde83 	.word	0x431bde83
 8003bb4:	50000300 	.word	0x50000300
 8003bb8:	50000100 	.word	0x50000100
 8003bbc:	fff0c007 	.word	0xfff0c007

08003bc0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f040 80b9 	bne.w	8003d52 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_ADC_Start_DMA+0x2e>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e0b4      	b.n	8003d58 <HAL_ADC_Start_DMA+0x198>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8003bf6:	4b5a      	ldr	r3, [pc, #360]	; (8003d60 <HAL_ADC_Start_DMA+0x1a0>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f040 80a0 	bne.w	8003d44 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 fc4b 	bl	80044a0 <ADC_Enable>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003c0e:	7dfb      	ldrb	r3, [r7, #23]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f040 8092 	bne.w	8003d3a <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003c2a:	4b4d      	ldr	r3, [pc, #308]	; (8003d60 <HAL_ADC_Start_DMA+0x1a0>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d004      	beq.n	8003c40 <HAL_ADC_Start_DMA+0x80>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c3e:	d115      	bne.n	8003c6c <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d027      	beq.n	8003caa <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c62:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003c6a:	e01e      	b.n	8003caa <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c80:	d004      	beq.n	8003c8c <HAL_ADC_Start_DMA+0xcc>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a37      	ldr	r2, [pc, #220]	; (8003d64 <HAL_ADC_Start_DMA+0x1a4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d10e      	bne.n	8003caa <HAL_ADC_Start_DMA+0xea>
 8003c8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ca2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb6:	d106      	bne.n	8003cc6 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbc:	f023 0206 	bic.w	r2, r3, #6
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	645a      	str	r2, [r3, #68]	; 0x44
 8003cc4:	e002      	b.n	8003ccc <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	4a23      	ldr	r2, [pc, #140]	; (8003d68 <HAL_ADC_Start_DMA+0x1a8>)
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	4a22      	ldr	r2, [pc, #136]	; (8003d6c <HAL_ADC_Start_DMA+0x1ac>)
 8003ce2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce8:	4a21      	ldr	r2, [pc, #132]	; (8003d70 <HAL_ADC_Start_DMA+0x1b0>)
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	221c      	movs	r2, #28
 8003cf2:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0210 	orr.w	r2, r2, #16
 8003d02:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3340      	adds	r3, #64	; 0x40
 8003d1e:	4619      	mov	r1, r3
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f000 fdde 	bl	80048e4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0204 	orr.w	r2, r2, #4
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	e00d      	b.n	8003d56 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d42:	e008      	b.n	8003d56 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d50:	e001      	b.n	8003d56 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d52:	2302      	movs	r3, #2
 8003d54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	50000300 	.word	0x50000300
 8003d64:	50000100 	.word	0x50000100
 8003d68:	080043d5 	.word	0x080043d5
 8003d6c:	0800444f 	.word	0x0800444f
 8003d70:	0800446b 	.word	0x0800446b

08003d74 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_ADCEx_Calibration_Start+0x1c>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e05f      	b.n	8003e50 <HAL_ADCEx_Calibration_Start+0xdc>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fbe5 	bl	8004568 <ADC_Disable>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d14e      	bne.n	8003e46 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003dbc:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d107      	bne.n	8003dd4 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003dd2:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003de2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003de4:	f7ff fd0c 	bl	8003800 <HAL_GetTick>
 8003de8:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003dea:	e01c      	b.n	8003e26 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003dec:	f7ff fd08 	bl	8003800 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b0a      	cmp	r3, #10
 8003df8:	d915      	bls.n	8003e26 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e08:	d10d      	bne.n	8003e26 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f023 0312 	bic.w	r3, r3, #18
 8003e12:	f043 0210 	orr.w	r2, r3, #16
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e014      	b.n	8003e50 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e34:	d0da      	beq.n	8003dec <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	f023 0303 	bic.w	r3, r3, #3
 8003e3e:	f043 0201 	orr.w	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b09b      	sub	sp, #108	; 0x6c
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_ADC_ConfigChannel+0x22>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e2a1      	b.n	80043be <HAL_ADC_ConfigChannel+0x566>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f040 8285 	bne.w	800439c <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d81c      	bhi.n	8003ed4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	4413      	add	r3, r2
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	461a      	mov	r2, r3
 8003eae:	231f      	movs	r3, #31
 8003eb0:	4093      	lsls	r3, r2
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	4019      	ands	r1, r3
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	4413      	add	r3, r2
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	fa00 f203 	lsl.w	r2, r0, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ed2:	e063      	b.n	8003f9c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b09      	cmp	r3, #9
 8003eda:	d81e      	bhi.n	8003f1a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	4413      	add	r3, r2
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	3b1e      	subs	r3, #30
 8003ef0:	221f      	movs	r2, #31
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	4019      	ands	r1, r3
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	4613      	mov	r3, r2
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	4413      	add	r3, r2
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	3b1e      	subs	r3, #30
 8003f0c:	fa00 f203 	lsl.w	r2, r0, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	635a      	str	r2, [r3, #52]	; 0x34
 8003f18:	e040      	b.n	8003f9c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b0e      	cmp	r3, #14
 8003f20:	d81e      	bhi.n	8003f60 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	4413      	add	r3, r2
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	3b3c      	subs	r3, #60	; 0x3c
 8003f36:	221f      	movs	r2, #31
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	4019      	ands	r1, r3
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	6818      	ldr	r0, [r3, #0]
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	4413      	add	r3, r2
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	3b3c      	subs	r3, #60	; 0x3c
 8003f52:	fa00 f203 	lsl.w	r2, r0, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	639a      	str	r2, [r3, #56]	; 0x38
 8003f5e:	e01d      	b.n	8003f9c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685a      	ldr	r2, [r3, #4]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	4413      	add	r3, r2
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	3b5a      	subs	r3, #90	; 0x5a
 8003f74:	221f      	movs	r2, #31
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	4019      	ands	r1, r3
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	4413      	add	r3, r2
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	3b5a      	subs	r3, #90	; 0x5a
 8003f90:	fa00 f203 	lsl.w	r2, r0, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f040 80e5 	bne.w	8004176 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b09      	cmp	r3, #9
 8003fb2:	d91c      	bls.n	8003fee <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6999      	ldr	r1, [r3, #24]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3b1e      	subs	r3, #30
 8003fc6:	2207      	movs	r2, #7
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	4019      	ands	r1, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	6898      	ldr	r0, [r3, #8]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	4413      	add	r3, r2
 8003fde:	3b1e      	subs	r3, #30
 8003fe0:	fa00 f203 	lsl.w	r2, r0, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	619a      	str	r2, [r3, #24]
 8003fec:	e019      	b.n	8004022 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6959      	ldr	r1, [r3, #20]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	4413      	add	r3, r2
 8003ffe:	2207      	movs	r2, #7
 8004000:	fa02 f303 	lsl.w	r3, r2, r3
 8004004:	43db      	mvns	r3, r3
 8004006:	4019      	ands	r1, r3
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	6898      	ldr	r0, [r3, #8]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	4413      	add	r3, r2
 8004016:	fa00 f203 	lsl.w	r2, r0, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	695a      	ldr	r2, [r3, #20]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	08db      	lsrs	r3, r3, #3
 800402e:	f003 0303 	and.w	r3, r3, #3
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	3b01      	subs	r3, #1
 8004040:	2b03      	cmp	r3, #3
 8004042:	d84f      	bhi.n	80040e4 <HAL_ADC_ConfigChannel+0x28c>
 8004044:	a201      	add	r2, pc, #4	; (adr r2, 800404c <HAL_ADC_ConfigChannel+0x1f4>)
 8004046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404a:	bf00      	nop
 800404c:	0800405d 	.word	0x0800405d
 8004050:	0800407f 	.word	0x0800407f
 8004054:	080040a1 	.word	0x080040a1
 8004058:	080040c3 	.word	0x080040c3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004062:	4b9c      	ldr	r3, [pc, #624]	; (80042d4 <HAL_ADC_ConfigChannel+0x47c>)
 8004064:	4013      	ands	r3, r2
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	6812      	ldr	r2, [r2, #0]
 800406a:	0691      	lsls	r1, r2, #26
 800406c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800406e:	430a      	orrs	r2, r1
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800407a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800407c:	e07b      	b.n	8004176 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004084:	4b93      	ldr	r3, [pc, #588]	; (80042d4 <HAL_ADC_ConfigChannel+0x47c>)
 8004086:	4013      	ands	r3, r2
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	0691      	lsls	r1, r2, #26
 800408e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004090:	430a      	orrs	r2, r1
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800409c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800409e:	e06a      	b.n	8004176 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80040a6:	4b8b      	ldr	r3, [pc, #556]	; (80042d4 <HAL_ADC_ConfigChannel+0x47c>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	0691      	lsls	r1, r2, #26
 80040b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040b2:	430a      	orrs	r2, r1
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80040be:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80040c0:	e059      	b.n	8004176 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80040c8:	4b82      	ldr	r3, [pc, #520]	; (80042d4 <HAL_ADC_ConfigChannel+0x47c>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	0691      	lsls	r1, r2, #26
 80040d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040d4:	430a      	orrs	r2, r1
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80040e0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80040e2:	e048      	b.n	8004176 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	069b      	lsls	r3, r3, #26
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d107      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004106:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800410e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	069b      	lsls	r3, r3, #26
 8004118:	429a      	cmp	r2, r3
 800411a:	d107      	bne.n	800412c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800412a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004132:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	069b      	lsls	r3, r3, #26
 800413c:	429a      	cmp	r2, r3
 800413e:	d107      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800414e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004156:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	069b      	lsls	r3, r3, #26
 8004160:	429a      	cmp	r2, r3
 8004162:	d107      	bne.n	8004174 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004172:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004174:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	2b01      	cmp	r3, #1
 8004182:	d108      	bne.n	8004196 <HAL_ADC_ConfigChannel+0x33e>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_ADC_ConfigChannel+0x33e>
 8004192:	2301      	movs	r3, #1
 8004194:	e000      	b.n	8004198 <HAL_ADC_ConfigChannel+0x340>
 8004196:	2300      	movs	r3, #0
 8004198:	2b00      	cmp	r3, #0
 800419a:	f040 810a 	bne.w	80043b2 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d00f      	beq.n	80041c6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2201      	movs	r2, #1
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	43da      	mvns	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	400a      	ands	r2, r1
 80041c0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80041c4:	e049      	b.n	800425a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2201      	movs	r2, #1
 80041d4:	409a      	lsls	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b09      	cmp	r3, #9
 80041e6:	d91c      	bls.n	8004222 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6999      	ldr	r1, [r3, #24]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	4613      	mov	r3, r2
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	4413      	add	r3, r2
 80041f8:	3b1b      	subs	r3, #27
 80041fa:	2207      	movs	r2, #7
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	43db      	mvns	r3, r3
 8004202:	4019      	ands	r1, r3
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	6898      	ldr	r0, [r3, #8]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	4413      	add	r3, r2
 8004212:	3b1b      	subs	r3, #27
 8004214:	fa00 f203 	lsl.w	r2, r0, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	619a      	str	r2, [r3, #24]
 8004220:	e01b      	b.n	800425a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6959      	ldr	r1, [r3, #20]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	4613      	mov	r3, r2
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	4413      	add	r3, r2
 8004234:	2207      	movs	r2, #7
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	4019      	ands	r1, r3
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	6898      	ldr	r0, [r3, #8]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	4613      	mov	r3, r2
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	4413      	add	r3, r2
 800424e:	fa00 f203 	lsl.w	r2, r0, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800425a:	4b1f      	ldr	r3, [pc, #124]	; (80042d8 <HAL_ADC_ConfigChannel+0x480>)
 800425c:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b10      	cmp	r3, #16
 8004264:	d105      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800426e:	2b00      	cmp	r3, #0
 8004270:	d015      	beq.n	800429e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004276:	2b11      	cmp	r3, #17
 8004278:	d105      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800427a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00b      	beq.n	800429e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800428a:	2b12      	cmp	r3, #18
 800428c:	f040 8091 	bne.w	80043b2 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004298:	2b00      	cmp	r3, #0
 800429a:	f040 808a 	bne.w	80043b2 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042a6:	d102      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x456>
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <HAL_ADC_ConfigChannel+0x484>)
 80042aa:	60fb      	str	r3, [r7, #12]
 80042ac:	e002      	b.n	80042b4 <HAL_ADC_ConfigChannel+0x45c>
 80042ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80042b2:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d10e      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x488>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d107      	bne.n	80042e0 <HAL_ADC_ConfigChannel+0x488>
 80042d0:	2301      	movs	r3, #1
 80042d2:	e006      	b.n	80042e2 <HAL_ADC_ConfigChannel+0x48a>
 80042d4:	83fff000 	.word	0x83fff000
 80042d8:	50000300 	.word	0x50000300
 80042dc:	50000100 	.word	0x50000100
 80042e0:	2300      	movs	r3, #0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d150      	bne.n	8004388 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80042e6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d010      	beq.n	800430e <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 0303 	and.w	r3, r3, #3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d107      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x4b0>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_ADC_ConfigChannel+0x4b0>
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <HAL_ADC_ConfigChannel+0x4b2>
 8004308:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800430a:	2b00      	cmp	r3, #0
 800430c:	d13c      	bne.n	8004388 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b10      	cmp	r3, #16
 8004314:	d11d      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x4fa>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800431e:	d118      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004320:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800432a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800432c:	4b27      	ldr	r3, [pc, #156]	; (80043cc <HAL_ADC_ConfigChannel+0x574>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a27      	ldr	r2, [pc, #156]	; (80043d0 <HAL_ADC_ConfigChannel+0x578>)
 8004332:	fba2 2303 	umull	r2, r3, r2, r3
 8004336:	0c9a      	lsrs	r2, r3, #18
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004342:	e002      	b.n	800434a <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	3b01      	subs	r3, #1
 8004348:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f9      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004350:	e02e      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b11      	cmp	r3, #17
 8004358:	d10b      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x51a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004362:	d106      	bne.n	8004372 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800436c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800436e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004370:	e01e      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b12      	cmp	r3, #18
 8004378:	d11a      	bne.n	80043b0 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800437a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004382:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004384:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004386:	e013      	b.n	80043b0 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	f043 0220 	orr.w	r2, r3, #32
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800439a:	e00a      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	f043 0220 	orr.w	r2, r3, #32
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80043ae:	e000      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80043b0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80043ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80043be:	4618      	mov	r0, r3
 80043c0:	376c      	adds	r7, #108	; 0x6c
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	20000088 	.word	0x20000088
 80043d0:	431bde83 	.word	0x431bde83

080043d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d126      	bne.n	800443c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004404:	2b00      	cmp	r3, #0
 8004406:	d115      	bne.n	8004434 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800440c:	2b00      	cmp	r3, #0
 800440e:	d111      	bne.n	8004434 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d105      	bne.n	8004434 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	f043 0201 	orr.w	r2, r3, #1
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f7ff fa13 	bl	8003860 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800443a:	e004      	b.n	8004446 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	4798      	blx	r3
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f7ff fa09 	bl	8003874 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8004462:	bf00      	nop
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004488:	f043 0204 	orr.w	r2, r3, #4
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f7ff f9f9 	bl	8003888 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004496:	bf00      	nop
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d108      	bne.n	80044cc <ADC_Enable+0x2c>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <ADC_Enable+0x2c>
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <ADC_Enable+0x2e>
 80044cc:	2300      	movs	r3, #0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d143      	bne.n	800455a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	4b22      	ldr	r3, [pc, #136]	; (8004564 <ADC_Enable+0xc4>)
 80044da:	4013      	ands	r3, r2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00d      	beq.n	80044fc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e4:	f043 0210 	orr.w	r2, r3, #16
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f0:	f043 0201 	orr.w	r2, r3, #1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e02f      	b.n	800455c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800450c:	f7ff f978 	bl	8003800 <HAL_GetTick>
 8004510:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004512:	e01b      	b.n	800454c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004514:	f7ff f974 	bl	8003800 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d914      	bls.n	800454c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b01      	cmp	r3, #1
 800452e:	d00d      	beq.n	800454c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	f043 0210 	orr.w	r2, r3, #16
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004540:	f043 0201 	orr.w	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e007      	b.n	800455c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b01      	cmp	r3, #1
 8004558:	d1dc      	bne.n	8004514 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	8000003f 	.word	0x8000003f

08004568 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	2b01      	cmp	r3, #1
 8004580:	d108      	bne.n	8004594 <ADC_Disable+0x2c>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0301 	and.w	r3, r3, #1
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <ADC_Disable+0x2c>
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <ADC_Disable+0x2e>
 8004594:	2300      	movs	r3, #0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d047      	beq.n	800462a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 030d 	and.w	r3, r3, #13
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d10f      	bne.n	80045c8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0202 	orr.w	r2, r2, #2
 80045b6:	609a      	str	r2, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2203      	movs	r2, #3
 80045be:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80045c0:	f7ff f91e 	bl	8003800 <HAL_GetTick>
 80045c4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80045c6:	e029      	b.n	800461c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	f043 0210 	orr.w	r2, r3, #16
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d8:	f043 0201 	orr.w	r2, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e023      	b.n	800462c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045e4:	f7ff f90c 	bl	8003800 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d914      	bls.n	800461c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d10d      	bne.n	800461c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	f043 0210 	orr.w	r2, r3, #16
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004610:	f043 0201 	orr.w	r2, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e007      	b.n	800462c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b01      	cmp	r3, #1
 8004628:	d0dc      	beq.n	80045e4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004644:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <__NVIC_SetPriorityGrouping+0x44>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004650:	4013      	ands	r3, r2
 8004652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800465c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004666:	4a04      	ldr	r2, [pc, #16]	; (8004678 <__NVIC_SetPriorityGrouping+0x44>)
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	60d3      	str	r3, [r2, #12]
}
 800466c:	bf00      	nop
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	e000ed00 	.word	0xe000ed00

0800467c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004680:	4b04      	ldr	r3, [pc, #16]	; (8004694 <__NVIC_GetPriorityGrouping+0x18>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	0a1b      	lsrs	r3, r3, #8
 8004686:	f003 0307 	and.w	r3, r3, #7
}
 800468a:	4618      	mov	r0, r3
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	e000ed00 	.word	0xe000ed00

08004698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	4603      	mov	r3, r0
 80046a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	db0b      	blt.n	80046c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	f003 021f 	and.w	r2, r3, #31
 80046b0:	4907      	ldr	r1, [pc, #28]	; (80046d0 <__NVIC_EnableIRQ+0x38>)
 80046b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	2001      	movs	r0, #1
 80046ba:	fa00 f202 	lsl.w	r2, r0, r2
 80046be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	e000e100 	.word	0xe000e100

080046d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4603      	mov	r3, r0
 80046dc:	6039      	str	r1, [r7, #0]
 80046de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	db0a      	blt.n	80046fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	490c      	ldr	r1, [pc, #48]	; (8004720 <__NVIC_SetPriority+0x4c>)
 80046ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046f2:	0112      	lsls	r2, r2, #4
 80046f4:	b2d2      	uxtb	r2, r2
 80046f6:	440b      	add	r3, r1
 80046f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046fc:	e00a      	b.n	8004714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	b2da      	uxtb	r2, r3
 8004702:	4908      	ldr	r1, [pc, #32]	; (8004724 <__NVIC_SetPriority+0x50>)
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	f003 030f 	and.w	r3, r3, #15
 800470a:	3b04      	subs	r3, #4
 800470c:	0112      	lsls	r2, r2, #4
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	440b      	add	r3, r1
 8004712:	761a      	strb	r2, [r3, #24]
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	e000e100 	.word	0xe000e100
 8004724:	e000ed00 	.word	0xe000ed00

08004728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004728:	b480      	push	{r7}
 800472a:	b089      	sub	sp, #36	; 0x24
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f003 0307 	and.w	r3, r3, #7
 800473a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f1c3 0307 	rsb	r3, r3, #7
 8004742:	2b04      	cmp	r3, #4
 8004744:	bf28      	it	cs
 8004746:	2304      	movcs	r3, #4
 8004748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	3304      	adds	r3, #4
 800474e:	2b06      	cmp	r3, #6
 8004750:	d902      	bls.n	8004758 <NVIC_EncodePriority+0x30>
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	3b03      	subs	r3, #3
 8004756:	e000      	b.n	800475a <NVIC_EncodePriority+0x32>
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800475c:	f04f 32ff 	mov.w	r2, #4294967295
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	43da      	mvns	r2, r3
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	401a      	ands	r2, r3
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004770:	f04f 31ff 	mov.w	r1, #4294967295
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	fa01 f303 	lsl.w	r3, r1, r3
 800477a:	43d9      	mvns	r1, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004780:	4313      	orrs	r3, r2
         );
}
 8004782:	4618      	mov	r0, r3
 8004784:	3724      	adds	r7, #36	; 0x24
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3b01      	subs	r3, #1
 800479c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047a0:	d301      	bcc.n	80047a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047a2:	2301      	movs	r3, #1
 80047a4:	e00f      	b.n	80047c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047a6:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <SysTick_Config+0x40>)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3b01      	subs	r3, #1
 80047ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047ae:	210f      	movs	r1, #15
 80047b0:	f04f 30ff 	mov.w	r0, #4294967295
 80047b4:	f7ff ff8e 	bl	80046d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <SysTick_Config+0x40>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047be:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <SysTick_Config+0x40>)
 80047c0:	2207      	movs	r2, #7
 80047c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	e000e010 	.word	0xe000e010

080047d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff ff29 	bl	8004634 <__NVIC_SetPriorityGrouping>
}
 80047e2:	bf00      	nop
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b086      	sub	sp, #24
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	4603      	mov	r3, r0
 80047f2:	60b9      	str	r1, [r7, #8]
 80047f4:	607a      	str	r2, [r7, #4]
 80047f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047fc:	f7ff ff3e 	bl	800467c <__NVIC_GetPriorityGrouping>
 8004800:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	6978      	ldr	r0, [r7, #20]
 8004808:	f7ff ff8e 	bl	8004728 <NVIC_EncodePriority>
 800480c:	4602      	mov	r2, r0
 800480e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004812:	4611      	mov	r1, r2
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff ff5d 	bl	80046d4 <__NVIC_SetPriority>
}
 800481a:	bf00      	nop
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	4603      	mov	r3, r0
 800482a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800482c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff ff31 	bl	8004698 <__NVIC_EnableIRQ>
}
 8004836:	bf00      	nop
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7ff ffa2 	bl	8004790 <SysTick_Config>
 800484c:	4603      	mov	r3, r0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e037      	b.n	80048dc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004882:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004886:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004890:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800489c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f9b8 	bl	8004c34 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}  
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_DMA_Start_IT+0x20>
 8004900:	2302      	movs	r3, #2
 8004902:	e04a      	b.n	800499a <HAL_DMA_Start_IT+0xb6>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004912:	2b01      	cmp	r3, #1
 8004914:	d13a      	bne.n	800498c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2202      	movs	r2, #2
 800491a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0201 	bic.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	68b9      	ldr	r1, [r7, #8]
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 f94b 	bl	8004bd6 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 020e 	orr.w	r2, r2, #14
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	e00f      	b.n	800497a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 020a 	orr.w	r2, r2, #10
 8004968:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0204 	bic.w	r2, r2, #4
 8004978:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0201 	orr.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	e005      	b.n	8004998 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004994:	2302      	movs	r3, #2
 8004996:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004998:	7dfb      	ldrb	r3, [r7, #23]
} 
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b083      	sub	sp, #12
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d008      	beq.n	80049c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2204      	movs	r2, #4
 80049b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e020      	b.n	8004a08 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 020e 	bic.w	r2, r2, #14
 80049d4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0201 	bic.w	r2, r2, #1
 80049e4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ee:	2101      	movs	r1, #1
 80049f0:	fa01 f202 	lsl.w	r2, r1, r2
 80049f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d005      	beq.n	8004a36 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2204      	movs	r2, #4
 8004a2e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	73fb      	strb	r3, [r7, #15]
 8004a34:	e027      	b.n	8004a86 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 020e 	bic.w	r2, r2, #14
 8004a44:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0201 	bic.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5e:	2101      	movs	r1, #1
 8004a60:	fa01 f202 	lsl.w	r2, r1, r2
 8004a64:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d003      	beq.n	8004a86 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	4798      	blx	r3
    } 
  }
  return status;
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	2204      	movs	r2, #4
 8004aae:	409a      	lsls	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d024      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x72>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f003 0304 	and.w	r3, r3, #4
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d01f      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d107      	bne.n	8004ae0 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f022 0204 	bic.w	r2, r2, #4
 8004ade:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae8:	2104      	movs	r1, #4
 8004aea:	fa01 f202 	lsl.w	r2, r1, r2
 8004aee:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d06a      	beq.n	8004bce <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004b00:	e065      	b.n	8004bce <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	2202      	movs	r2, #2
 8004b08:	409a      	lsls	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d02c      	beq.n	8004b6c <HAL_DMA_IRQHandler+0xdc>
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d027      	beq.n	8004b6c <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10b      	bne.n	8004b42 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f022 020a 	bic.w	r2, r2, #10
 8004b38:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4a:	2102      	movs	r1, #2
 8004b4c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b50:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d035      	beq.n	8004bce <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004b6a:	e030      	b.n	8004bce <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	2208      	movs	r2, #8
 8004b72:	409a      	lsls	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d028      	beq.n	8004bce <HAL_DMA_IRQHandler+0x13e>
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f003 0308 	and.w	r3, r3, #8
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d023      	beq.n	8004bce <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 020e 	bic.w	r2, r2, #14
 8004b94:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8004ba4:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d004      	beq.n	8004bce <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	4798      	blx	r3
    }
  }
}  
 8004bcc:	e7ff      	b.n	8004bce <HAL_DMA_IRQHandler+0x13e>
 8004bce:	bf00      	nop
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	607a      	str	r2, [r7, #4]
 8004be2:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bec:	2101      	movs	r1, #1
 8004bee:	fa01 f202 	lsl.w	r2, r1, r2
 8004bf2:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b10      	cmp	r3, #16
 8004c02:	d108      	bne.n	8004c16 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c14:	e007      	b.n	8004c26 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	60da      	str	r2, [r3, #12]
}
 8004c26:	bf00      	nop
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
	...

08004c34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <DMA_CalcBaseAndBitshift+0x34>)
 8004c44:	4413      	add	r3, r2
 8004c46:	4a09      	ldr	r2, [pc, #36]	; (8004c6c <DMA_CalcBaseAndBitshift+0x38>)
 8004c48:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4c:	091b      	lsrs	r3, r3, #4
 8004c4e:	009a      	lsls	r2, r3, #2
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a06      	ldr	r2, [pc, #24]	; (8004c70 <DMA_CalcBaseAndBitshift+0x3c>)
 8004c58:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004c5a:	bf00      	nop
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	bffdfff8 	.word	0xbffdfff8
 8004c6c:	cccccccd 	.word	0xcccccccd
 8004c70:	40020000 	.word	0x40020000

08004c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c82:	e14e      	b.n	8004f22 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	2101      	movs	r1, #1
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c90:	4013      	ands	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f000 8140 	beq.w	8004f1c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f003 0303 	and.w	r3, r3, #3
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d005      	beq.n	8004cb4 <HAL_GPIO_Init+0x40>
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f003 0303 	and.w	r3, r3, #3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d130      	bne.n	8004d16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	2203      	movs	r2, #3
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cea:	2201      	movs	r2, #1
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	43db      	mvns	r3, r3
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	091b      	lsrs	r3, r3, #4
 8004d00:	f003 0201 	and.w	r2, r3, #1
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d017      	beq.n	8004d52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	005b      	lsls	r3, r3, #1
 8004d2c:	2203      	movs	r2, #3
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	43db      	mvns	r3, r3
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4013      	ands	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	fa02 f303 	lsl.w	r3, r2, r3
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d123      	bne.n	8004da6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	08da      	lsrs	r2, r3, #3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3208      	adds	r2, #8
 8004d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	220f      	movs	r2, #15
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	43db      	mvns	r3, r3
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	691a      	ldr	r2, [r3, #16]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f003 0307 	and.w	r3, r3, #7
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	08da      	lsrs	r2, r3, #3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3208      	adds	r2, #8
 8004da0:	6939      	ldr	r1, [r7, #16]
 8004da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	2203      	movs	r2, #3
 8004db2:	fa02 f303 	lsl.w	r3, r2, r3
 8004db6:	43db      	mvns	r3, r3
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f003 0203 	and.w	r2, r3, #3
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	693a      	ldr	r2, [r7, #16]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 809a 	beq.w	8004f1c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004de8:	4b55      	ldr	r3, [pc, #340]	; (8004f40 <HAL_GPIO_Init+0x2cc>)
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	4a54      	ldr	r2, [pc, #336]	; (8004f40 <HAL_GPIO_Init+0x2cc>)
 8004dee:	f043 0301 	orr.w	r3, r3, #1
 8004df2:	6193      	str	r3, [r2, #24]
 8004df4:	4b52      	ldr	r3, [pc, #328]	; (8004f40 <HAL_GPIO_Init+0x2cc>)
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	f003 0301 	and.w	r3, r3, #1
 8004dfc:	60bb      	str	r3, [r7, #8]
 8004dfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e00:	4a50      	ldr	r2, [pc, #320]	; (8004f44 <HAL_GPIO_Init+0x2d0>)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	089b      	lsrs	r3, r3, #2
 8004e06:	3302      	adds	r3, #2
 8004e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	220f      	movs	r2, #15
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	4013      	ands	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e2a:	d013      	beq.n	8004e54 <HAL_GPIO_Init+0x1e0>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a46      	ldr	r2, [pc, #280]	; (8004f48 <HAL_GPIO_Init+0x2d4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d00d      	beq.n	8004e50 <HAL_GPIO_Init+0x1dc>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a45      	ldr	r2, [pc, #276]	; (8004f4c <HAL_GPIO_Init+0x2d8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d007      	beq.n	8004e4c <HAL_GPIO_Init+0x1d8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a44      	ldr	r2, [pc, #272]	; (8004f50 <HAL_GPIO_Init+0x2dc>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d101      	bne.n	8004e48 <HAL_GPIO_Init+0x1d4>
 8004e44:	2303      	movs	r3, #3
 8004e46:	e006      	b.n	8004e56 <HAL_GPIO_Init+0x1e2>
 8004e48:	2305      	movs	r3, #5
 8004e4a:	e004      	b.n	8004e56 <HAL_GPIO_Init+0x1e2>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e002      	b.n	8004e56 <HAL_GPIO_Init+0x1e2>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <HAL_GPIO_Init+0x1e2>
 8004e54:	2300      	movs	r3, #0
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	f002 0203 	and.w	r2, r2, #3
 8004e5c:	0092      	lsls	r2, r2, #2
 8004e5e:	4093      	lsls	r3, r2
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e66:	4937      	ldr	r1, [pc, #220]	; (8004f44 <HAL_GPIO_Init+0x2d0>)
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	089b      	lsrs	r3, r3, #2
 8004e6c:	3302      	adds	r3, #2
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e74:	4b37      	ldr	r3, [pc, #220]	; (8004f54 <HAL_GPIO_Init+0x2e0>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	43db      	mvns	r3, r3
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4013      	ands	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004e98:	4a2e      	ldr	r2, [pc, #184]	; (8004f54 <HAL_GPIO_Init+0x2e0>)
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e9e:	4b2d      	ldr	r3, [pc, #180]	; (8004f54 <HAL_GPIO_Init+0x2e0>)
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	43db      	mvns	r3, r3
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004ec2:	4a24      	ldr	r2, [pc, #144]	; (8004f54 <HAL_GPIO_Init+0x2e0>)
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ec8:	4b22      	ldr	r3, [pc, #136]	; (8004f54 <HAL_GPIO_Init+0x2e0>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	43db      	mvns	r3, r3
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004eec:	4a19      	ldr	r2, [pc, #100]	; (8004f54 <HAL_GPIO_Init+0x2e0>)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ef2:	4b18      	ldr	r3, [pc, #96]	; (8004f54 <HAL_GPIO_Init+0x2e0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	43db      	mvns	r3, r3
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4013      	ands	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004f16:	4a0f      	ldr	r2, [pc, #60]	; (8004f54 <HAL_GPIO_Init+0x2e0>)
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f47f aea9 	bne.w	8004c84 <HAL_GPIO_Init+0x10>
  }
}
 8004f32:	bf00      	nop
 8004f34:	bf00      	nop
 8004f36:	371c      	adds	r7, #28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	40021000 	.word	0x40021000
 8004f44:	40010000 	.word	0x40010000
 8004f48:	48000400 	.word	0x48000400
 8004f4c:	48000800 	.word	0x48000800
 8004f50:	48000c00 	.word	0x48000c00
 8004f54:	40010400 	.word	0x40010400

08004f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	807b      	strh	r3, [r7, #2]
 8004f64:	4613      	mov	r3, r2
 8004f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f68:	787b      	ldrb	r3, [r7, #1]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f6e:	887a      	ldrh	r2, [r7, #2]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f74:	e002      	b.n	8004f7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f76:	887a      	ldrh	r2, [r7, #2]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e0ba      	b.n	8005110 <HAL_HRTIM_Init+0x188>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d02e      	beq.n	800503c <HAL_HRTIM_Init+0xb4>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a4d      	ldr	r2, [pc, #308]	; (8005118 <HAL_HRTIM_Init+0x190>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d10b      	bne.n	8005000 <HAL_HRTIM_Init+0x78>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8004fe8:	4b4c      	ldr	r3, [pc, #304]	; (800511c <HAL_HRTIM_Init+0x194>)
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	4a4b      	ldr	r2, [pc, #300]	; (800511c <HAL_HRTIM_Init+0x194>)
 8004fee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ff2:	6193      	str	r3, [r2, #24]
 8004ff4:	4b49      	ldr	r3, [pc, #292]	; (800511c <HAL_HRTIM_Init+0x194>)
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800500e:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005024:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4313      	orrs	r3, r2
 8005032:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7fe f927 	bl	8003290 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d012      	beq.n	8005074 <HAL_HRTIM_Init+0xec>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8005084:	2300      	movs	r3, #0
 8005086:	75fb      	strb	r3, [r7, #23]
 8005088:	e03e      	b.n	8005108 <HAL_HRTIM_Init+0x180>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 800508a:	7dfa      	ldrb	r2, [r7, #23]
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	4613      	mov	r3, r2
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	1a9b      	subs	r3, r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	440b      	add	r3, r1
 8005098:	3318      	adds	r3, #24
 800509a:	2200      	movs	r2, #0
 800509c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 800509e:	7dfa      	ldrb	r2, [r7, #23]
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	331c      	adds	r3, #28
 80050ae:	2200      	movs	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80050b2:	7dfa      	ldrb	r2, [r7, #23]
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	4613      	mov	r3, r2
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	1a9b      	subs	r3, r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	3320      	adds	r3, #32
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80050c6:	7dfa      	ldrb	r2, [r7, #23]
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	1a9b      	subs	r3, r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	3324      	adds	r3, #36	; 0x24
 80050d6:	2200      	movs	r2, #0
 80050d8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80050da:	7dfa      	ldrb	r2, [r7, #23]
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	4613      	mov	r3, r2
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	1a9b      	subs	r3, r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	440b      	add	r3, r1
 80050e8:	3328      	adds	r3, #40	; 0x28
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80050ee:	7dfa      	ldrb	r2, [r7, #23]
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	1a9b      	subs	r3, r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	3330      	adds	r3, #48	; 0x30
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8005102:	7dfb      	ldrb	r3, [r7, #23]
 8005104:	3301      	adds	r3, #1
 8005106:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8005108:	7dfb      	ldrb	r3, [r7, #23]
 800510a:	2b05      	cmp	r3, #5
 800510c:	d9bd      	bls.n	800508a <HAL_HRTIM_Init+0x102>
  }

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	40017400 	.word	0x40017400
 800511c:	40021000 	.word	0x40021000

08005120 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8005134:	2302      	movs	r3, #2
 8005136:	e045      	b.n	80051c4 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514e:	d114      	bne.n	800517a <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0202 	bic.w	r2, r2, #2
 8005160:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f042 0201 	orr.w	r2, r2, #1
 8005174:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8005178:	e01f      	b.n	80051ba <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0202 	orr.w	r2, r2, #2
 800518a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8005196:	f023 010c 	bic.w	r1, r3, #12
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 80051da:	f7fe fb11 	bl	8003800 <HAL_GetTick>
 80051de:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80051e0:	e014      	b.n	800520c <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e8:	d010      	beq.n	800520c <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 80051ea:	f7fe fb09 	bl	8003800 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	683a      	ldr	r2, [r7, #0]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d302      	bcc.n	8005200 <HAL_HRTIM_PollForDLLCalibration+0x30>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d105      	bne.n	800520c <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2207      	movs	r2, #7
 8005204:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
        return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e011      	b.n	8005230 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8005214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800521c:	d1e1      	bne.n	80051e2 <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d101      	bne.n	8005254 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8005250:	2302      	movs	r3, #2
 8005252:	e015      	b.n	8005280 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b05      	cmp	r3, #5
 8005260:	d104      	bne.n	800526c <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8005262:	6879      	ldr	r1, [r7, #4]
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 fb84 	bl	8005972 <HRTIM_MasterBase_Config>
 800526a:	e004      	b.n	8005276 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	68b9      	ldr	r1, [r7, #8]
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 fbad 	bl	80059d0 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             const HRTIM_ADCTriggerCfgTypeDef* pADCTriggerCfg)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d101      	bne.n	80052a4 <HAL_HRTIM_ADCTriggerConfig+0x1c>
  {
     return HAL_BUSY;
 80052a0:	2302      	movs	r3, #2
 80052a2:	e095      	b.n	80053d0 <HAL_HRTIM_ADCTriggerConfig+0x148>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d101      	bne.n	80052b2 <HAL_HRTIM_ADCTriggerConfig+0x2a>
 80052ae:	2302      	movs	r3, #2
 80052b0:	e08e      	b.n	80053d0 <HAL_HRTIM_ADCTriggerConfig+0x148>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2202      	movs	r2, #2
 80052be:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80052ca:	617b      	str	r3, [r7, #20]

  switch (ADCTrigger)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	3b01      	subs	r3, #1
 80052d0:	2b07      	cmp	r3, #7
 80052d2:	d85e      	bhi.n	8005392 <HAL_HRTIM_ADCTriggerConfig+0x10a>
 80052d4:	a201      	add	r2, pc, #4	; (adr r2, 80052dc <HAL_HRTIM_ADCTriggerConfig+0x54>)
 80052d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052da:	bf00      	nop
 80052dc:	080052fd 	.word	0x080052fd
 80052e0:	08005321 	.word	0x08005321
 80052e4:	08005393 	.word	0x08005393
 80052e8:	08005347 	.word	0x08005347
 80052ec:	08005393 	.word	0x08005393
 80052f0:	08005393 	.word	0x08005393
 80052f4:	08005393 	.word	0x08005393
 80052f8:	0800536d 	.word	0x0800536d
  {
  case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005302:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	6852      	ldr	r2, [r2, #4]
 800531a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
      break;
 800531e:	e041      	b.n	80053a4 <HAL_HRTIM_ADCTriggerConfig+0x11c>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8005326:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	4313      	orrs	r3, r2
 8005336:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6852      	ldr	r2, [r2, #4]
 8005340:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
      break;
 8005344:	e02e      	b.n	80053a4 <HAL_HRTIM_ADCTriggerConfig+0x11c>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800534c:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	019b      	lsls	r3, r3, #6
 8005354:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6852      	ldr	r2, [r2, #4]
 8005366:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
      break;
 800536a:	e01b      	b.n	80053a4 <HAL_HRTIM_ADCTriggerConfig+0x11c>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8005372:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	025b      	lsls	r3, r3, #9
 800537a:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6852      	ldr	r2, [r2, #4]
 800538c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
      break;
 8005390:	e008      	b.n	80053a4 <HAL_HRTIM_ADCTriggerConfig+0x11c>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2207      	movs	r2, #7
 8005396:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80053a2:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	2b07      	cmp	r3, #7
 80053ae:	d101      	bne.n	80053b4 <HAL_HRTIM_ADCTriggerConfig+0x12c>
  {
     return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e00d      	b.n	80053d0 <HAL_HRTIM_ADCTriggerConfig+0x148>
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	371c      	adds	r7, #28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d101      	bne.n	80053f8 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80053f4:	2302      	movs	r3, #2
 80053f6:	e05f      	b.n	80054b8 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8005402:	2302      	movs	r3, #2
 8005404:	e058      	b.n	80054b8 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2202      	movs	r2, #2
 8005412:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b05      	cmp	r3, #5
 800541a:	d104      	bne.n	8005426 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f000 fb16 	bl	8005a50 <HRTIM_MasterWaveform_Config>
 8005424:	e004      	b.n	8005430 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	68b9      	ldr	r1, [r7, #8]
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 fb76 	bl	8005b1c <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6819      	ldr	r1, [r3, #0]
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	4613      	mov	r3, r2
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	1a9b      	subs	r3, r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4403      	add	r3, r0
 8005442:	3320      	adds	r3, #32
 8005444:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6859      	ldr	r1, [r3, #4]
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	4613      	mov	r3, r2
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	1a9b      	subs	r3, r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4403      	add	r3, r0
 8005458:	3324      	adds	r3, #36	; 0x24
 800545a:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6899      	ldr	r1, [r3, #8]
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	4613      	mov	r3, r2
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	1a9b      	subs	r3, r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4403      	add	r3, r0
 800546e:	3328      	adds	r3, #40	; 0x28
 8005470:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68d9      	ldr	r1, [r3, #12]
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	4613      	mov	r3, r2
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4403      	add	r3, r0
 8005484:	332c      	adds	r3, #44	; 0x2c
 8005486:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6919      	ldr	r1, [r3, #16]
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	4613      	mov	r3, r2
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	1a9b      	subs	r3, r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4403      	add	r3, r0
 800549a:	3330      	adds	r3, #48	; 0x30
 800549c:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800549e:	68b9      	ldr	r1, [r7, #8]
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 fd53 	bl	8005f4c <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
 80054cc:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d101      	bne.n	80054de <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80054da:	2302      	movs	r3, #2
 80054dc:	e157      	b.n	800578e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d101      	bne.n	80054ec <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80054e8:	2302      	movs	r3, #2
 80054ea:	e150      	b.n	800578e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	2b05      	cmp	r3, #5
 8005500:	d140      	bne.n	8005584 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3b01      	subs	r3, #1
 8005506:	2b07      	cmp	r3, #7
 8005508:	d82a      	bhi.n	8005560 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 800550a:	a201      	add	r2, pc, #4	; (adr r2, 8005510 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 800550c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005510:	08005531 	.word	0x08005531
 8005514:	0800553d 	.word	0x0800553d
 8005518:	08005561 	.word	0x08005561
 800551c:	08005549 	.word	0x08005549
 8005520:	08005561 	.word	0x08005561
 8005524:	08005561 	.word	0x08005561
 8005528:	08005561 	.word	0x08005561
 800552c:	08005555 	.word	0x08005555
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	6812      	ldr	r2, [r2, #0]
 8005538:	61da      	str	r2, [r3, #28]
        break;
 800553a:	e01a      	b.n	8005572 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	6812      	ldr	r2, [r2, #0]
 8005544:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8005546:	e014      	b.n	8005572 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	6812      	ldr	r2, [r2, #0]
 8005550:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8005552:	e00e      	b.n	8005572 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800555e:	e008      	b.n	8005572 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2207      	movs	r2, #7
 8005564:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8005570:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b07      	cmp	r3, #7
 800557c:	f040 80fe 	bne.w	800577c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e104      	b.n	800578e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3b01      	subs	r3, #1
 8005588:	2b07      	cmp	r3, #7
 800558a:	f200 80e3 	bhi.w	8005754 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800558e:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8005590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005594:	080055b5 	.word	0x080055b5
 8005598:	080055c9 	.word	0x080055c9
 800559c:	08005755 	.word	0x08005755
 80055a0:	08005685 	.word	0x08005685
 80055a4:	08005755 	.word	0x08005755
 80055a8:	08005755 	.word	0x08005755
 80055ac:	08005755 	.word	0x08005755
 80055b0:	08005699 	.word	0x08005699
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6819      	ldr	r1, [r3, #0]
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	01db      	lsls	r3, r3, #7
 80055c0:	440b      	add	r3, r1
 80055c2:	339c      	adds	r3, #156	; 0x9c
 80055c4:	601a      	str	r2, [r3, #0]
        break;
 80055c6:	e0d1      	b.n	800576c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6819      	ldr	r1, [r3, #0]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	01db      	lsls	r3, r3, #7
 80055d4:	440b      	add	r3, r1
 80055d6:	33a4      	adds	r3, #164	; 0xa4
 80055d8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d03f      	beq.n	8005662 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	3301      	adds	r3, #1
 80055ea:	01db      	lsls	r3, r3, #7
 80055ec:	4413      	add	r3, r2
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	6811      	ldr	r1, [r2, #0]
 80055f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	3301      	adds	r3, #1
 80055fc:	01db      	lsls	r3, r3, #7
 80055fe:	440b      	add	r3, r1
 8005600:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	3301      	adds	r3, #1
 800560a:	01db      	lsls	r3, r3, #7
 800560c:	4413      	add	r3, r2
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	68f9      	ldr	r1, [r7, #12]
 8005616:	6809      	ldr	r1, [r1, #0]
 8005618:	431a      	orrs	r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	3301      	adds	r3, #1
 800561e:	01db      	lsls	r3, r3, #7
 8005620:	440b      	add	r3, r1
 8005622:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800562c:	d109      	bne.n	8005642 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6819      	ldr	r1, [r3, #0]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	689a      	ldr	r2, [r3, #8]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	01db      	lsls	r3, r3, #7
 800563a:	440b      	add	r3, r1
 800563c:	339c      	adds	r3, #156	; 0x9c
 800563e:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8005640:	e091      	b.n	8005766 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800564a:	f040 808c 	bne.w	8005766 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6819      	ldr	r1, [r3, #0]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	689a      	ldr	r2, [r3, #8]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	01db      	lsls	r3, r3, #7
 800565a:	440b      	add	r3, r1
 800565c:	33a8      	adds	r3, #168	; 0xa8
 800565e:	601a      	str	r2, [r3, #0]
         break;
 8005660:	e081      	b.n	8005766 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	3301      	adds	r3, #1
 800566a:	01db      	lsls	r3, r3, #7
 800566c:	4413      	add	r3, r2
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	6811      	ldr	r1, [r2, #0]
 8005674:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	3301      	adds	r3, #1
 800567c:	01db      	lsls	r3, r3, #7
 800567e:	440b      	add	r3, r1
 8005680:	601a      	str	r2, [r3, #0]
         break;
 8005682:	e070      	b.n	8005766 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6819      	ldr	r1, [r3, #0]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	01db      	lsls	r3, r3, #7
 8005690:	440b      	add	r3, r1
 8005692:	33a8      	adds	r3, #168	; 0xa8
 8005694:	601a      	str	r2, [r3, #0]
        break;
 8005696:	e069      	b.n	800576c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6819      	ldr	r1, [r3, #0]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	01db      	lsls	r3, r3, #7
 80056a4:	440b      	add	r3, r1
 80056a6:	33ac      	adds	r3, #172	; 0xac
 80056a8:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d03f      	beq.n	8005732 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	3301      	adds	r3, #1
 80056ba:	01db      	lsls	r3, r3, #7
 80056bc:	4413      	add	r3, r2
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	6811      	ldr	r1, [r2, #0]
 80056c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	3301      	adds	r3, #1
 80056cc:	01db      	lsls	r3, r3, #7
 80056ce:	440b      	add	r3, r1
 80056d0:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	3301      	adds	r3, #1
 80056da:	01db      	lsls	r3, r3, #7
 80056dc:	4413      	add	r3, r2
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	68f9      	ldr	r1, [r7, #12]
 80056e8:	6809      	ldr	r1, [r1, #0]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	3301      	adds	r3, #1
 80056f0:	01db      	lsls	r3, r3, #7
 80056f2:	440b      	add	r3, r1
 80056f4:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056fe:	d109      	bne.n	8005714 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6819      	ldr	r1, [r3, #0]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	01db      	lsls	r3, r3, #7
 800570c:	440b      	add	r3, r1
 800570e:	339c      	adds	r3, #156	; 0x9c
 8005710:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8005712:	e02a      	b.n	800576a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800571c:	d125      	bne.n	800576a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6819      	ldr	r1, [r3, #0]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	01db      	lsls	r3, r3, #7
 800572a:	440b      	add	r3, r1
 800572c:	33a8      	adds	r3, #168	; 0xa8
 800572e:	601a      	str	r2, [r3, #0]
         break;
 8005730:	e01b      	b.n	800576a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	3301      	adds	r3, #1
 800573a:	01db      	lsls	r3, r3, #7
 800573c:	4413      	add	r3, r2
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	6811      	ldr	r1, [r2, #0]
 8005744:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	3301      	adds	r3, #1
 800574c:	01db      	lsls	r3, r3, #7
 800574e:	440b      	add	r3, r1
 8005750:	601a      	str	r2, [r3, #0]
         break;
 8005752:	e00a      	b.n	800576a <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2207      	movs	r2, #7
 8005758:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8005764:	e002      	b.n	800576c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005766:	bf00      	nop
 8005768:	e000      	b.n	800576c <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800576a:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b07      	cmp	r3, #7
 8005776:	d101      	bne.n	800577c <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e008      	b.n	800578e <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop

0800579c <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d101      	bne.n	80057ba <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80057b6:	2302      	movs	r3, #2
 80057b8:	e01d      	b.n	80057f6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e016      	b.n	80057f6 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 fadc 	bl	8005d9c <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
 8005806:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_HRTIM_WaveformOutputStart+0x18>
 8005812:	2302      	movs	r3, #2
 8005814:	e01a      	b.n	800584c <HAL_HRTIM_WaveformOutputStart+0x4e>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2202      	movs	r2, #2
 8005822:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2201      	movs	r2, #1
 800583e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005868:	2b01      	cmp	r3, #1
 800586a:	d101      	bne.n	8005870 <HAL_HRTIM_WaveformOutputStop+0x18>
 800586c:	2302      	movs	r3, #2
 800586e:	e01a      	b.n	80058a6 <HAL_HRTIM_WaveformOutputStop+0x4e>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2202      	movs	r2, #2
 800587c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_E
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_HRTIM_WaveformCountStart+0x18>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e018      	b.n	80058fc <HAL_HRTIM_WaveformCountStart+0x4a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2202      	movs	r2, #2
 80058d6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6819      	ldr	r1, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_HRTIM_SoftwareUpdate>:
  * @note The 'software update' bits in the HRTIM control register 2 register are
  *       automatically reset by hardware
  */
HAL_StatusTypeDef HAL_HRTIM_SoftwareUpdate(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t Timers)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERUPDATE(Timers));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d101      	bne.n	8005922 <HAL_HRTIM_SoftwareUpdate+0x1a>
  {
     return HAL_BUSY;
 800591e:	2302      	movs	r3, #2
 8005920:	e021      	b.n	8005966 <HAL_HRTIM_SoftwareUpdate+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_HRTIM_SoftwareUpdate+0x28>
 800592c:	2302      	movs	r3, #2
 800592e:	e01a      	b.n	8005966 <HAL_HRTIM_SoftwareUpdate+0x5e>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Force timer(s) registers update */
  hhrtim->Instance->sCommonRegs.CR2 |= Timers;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f8d3 1384 	ldr.w	r1, [r3, #900]	; 0x384
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	430a      	orrs	r2, r1
 8005950:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
 800597a:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0307 	bic.w	r3, r3, #7
 800598a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f023 0318 	bic.w	r3, r3, #24
 800599c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	6812      	ldr	r2, [r2, #0]
 80059b8:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	6852      	ldr	r2, [r2, #4]
 80059c2:	619a      	str	r2, [r3, #24]
}
 80059c4:	bf00      	nop
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	3301      	adds	r3, #1
 80059e4:	01db      	lsls	r3, r3, #7
 80059e6:	4413      	add	r3, r2
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f023 0307 	bic.w	r3, r3, #7
 80059f2:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f023 0318 	bic.w	r3, r3, #24
 8005a04:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	3301      	adds	r3, #1
 8005a18:	01db      	lsls	r3, r3, #7
 8005a1a:	4413      	add	r3, r2
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6819      	ldr	r1, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	01db      	lsls	r3, r3, #7
 8005a2c:	440b      	add	r3, r1
 8005a2e:	3394      	adds	r3, #148	; 0x94
 8005a30:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6819      	ldr	r1, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	01db      	lsls	r3, r3, #7
 8005a3e:	440b      	add	r3, r1
 8005a40:	3398      	adds	r3, #152	; 0x98
 8005a42:	601a      	str	r2, [r3, #0]
}
 8005a44:	bf00      	nop
 8005a46:	371c      	adds	r7, #28
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8005a6a:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0320 	bic.w	r3, r3, #32
 8005a72:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a84:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a96:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	69db      	ldr	r3, [r3, #28]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005aa8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005aba:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005acc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ae0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005af2:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8005b10:	bf00      	nop
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b08b      	sub	sp, #44	; 0x2c
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	01db      	lsls	r3, r3, #7
 8005b32:	4413      	add	r3, r2
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	6811      	ldr	r1, [r2, #0]
 8005b3a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	3301      	adds	r3, #1
 8005b42:	01db      	lsls	r3, r3, #7
 8005b44:	440b      	add	r3, r1
 8005b46:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	01db      	lsls	r3, r3, #7
 8005b52:	4413      	add	r3, r2
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	01db      	lsls	r3, r3, #7
 8005b60:	4413      	add	r3, r2
 8005b62:	33e8      	adds	r3, #232	; 0xe8
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	01db      	lsls	r3, r3, #7
 8005b70:	4413      	add	r3, r2
 8005b72:	33e4      	adds	r3, #228	; 0xe4
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8005b80:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	f023 0320 	bic.w	r3, r3, #32
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b90:	4313      	orrs	r3, r2
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bea:	4313      	orrs	r3, r2
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bfe:	d103      	bne.n	8005c08 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c0e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c16:	4313      	orrs	r3, r2
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c20:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	f023 031f 	bic.w	r3, r3, #31
 8005c44:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4a:	f003 031f 	and.w	r3, r3, #31
 8005c4e:	69ba      	ldr	r2, [r7, #24]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c5a:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d108      	bne.n	8005c80 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c74:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	6a3a      	ldr	r2, [r7, #32]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c84:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8005c88:	d004      	beq.n	8005c94 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8e:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8005c92:	d103      	bne.n	8005c9c <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c98:	2b40      	cmp	r3, #64	; 0x40
 8005c9a:	d108      	bne.n	8005cae <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8005ca2:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca8:	6a3a      	ldr	r2, [r7, #32]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb2:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d843      	bhi.n	8005d42 <HRTIM_TimingUnitWaveform_Config+0x226>
 8005cba:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8005cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc0:	08005cd5 	.word	0x08005cd5
 8005cc4:	08005ceb 	.word	0x08005ceb
 8005cc8:	08005d01 	.word	0x08005d01
 8005ccc:	08005d17 	.word	0x08005d17
 8005cd0:	08005d2d 	.word	0x08005d2d
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cda:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	61fb      	str	r3, [r7, #28]
      break;
 8005ce8:	e02c      	b.n	8005d44 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cf0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	69fa      	ldr	r2, [r7, #28]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	61fb      	str	r3, [r7, #28]
      break;
 8005cfe:	e021      	b.n	8005d44 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005d06:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	61fb      	str	r3, [r7, #28]
      break;
 8005d14:	e016      	b.n	8005d44 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005d1c:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d22:	011b      	lsls	r3, r3, #4
 8005d24:	69fa      	ldr	r2, [r7, #28]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	61fb      	str	r3, [r7, #28]
      break;
 8005d2a:	e00b      	b.n	8005d44 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d32:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	015b      	lsls	r3, r3, #5
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	61fb      	str	r3, [r7, #28]
      break;
 8005d40:	e000      	b.n	8005d44 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8005d42:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	01db      	lsls	r3, r3, #7
 8005d4e:	4413      	add	r3, r2
 8005d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d52:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	01db      	lsls	r3, r3, #7
 8005d5c:	4413      	add	r3, r2
 8005d5e:	33e8      	adds	r3, #232	; 0xe8
 8005d60:	69ba      	ldr	r2, [r7, #24]
 8005d62:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	01db      	lsls	r3, r3, #7
 8005d6c:	4413      	add	r3, r2
 8005d6e:	33e4      	adds	r3, #228	; 0xe4
 8005d70:	6a3a      	ldr	r2, [r7, #32]
 8005d72:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	01db      	lsls	r3, r3, #7
 8005d7c:	4413      	add	r3, r2
 8005d7e:	33d4      	adds	r3, #212	; 0xd4
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	69fa      	ldr	r2, [r7, #28]
 8005d8a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8005d8e:	bf00      	nop
 8005d90:	372c      	adds	r7, #44	; 0x2c
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop

08005d9c <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b089      	sub	sp, #36	; 0x24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	01db      	lsls	r3, r3, #7
 8005db6:	4413      	add	r3, r2
 8005db8:	33e4      	adds	r3, #228	; 0xe4
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	01db      	lsls	r3, r3, #7
 8005dc6:	4413      	add	r3, r2
 8005dc8:	33b8      	adds	r3, #184	; 0xb8
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	617b      	str	r3, [r7, #20]

  switch (Output)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dd4:	d04d      	beq.n	8005e72 <HRTIM_OutputConfig+0xd6>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ddc:	d85e      	bhi.n	8005e9c <HRTIM_OutputConfig+0x100>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005de4:	d032      	beq.n	8005e4c <HRTIM_OutputConfig+0xb0>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dec:	d856      	bhi.n	8005e9c <HRTIM_OutputConfig+0x100>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b80      	cmp	r3, #128	; 0x80
 8005df2:	d03e      	beq.n	8005e72 <HRTIM_OutputConfig+0xd6>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b80      	cmp	r3, #128	; 0x80
 8005df8:	d850      	bhi.n	8005e9c <HRTIM_OutputConfig+0x100>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b40      	cmp	r3, #64	; 0x40
 8005dfe:	d025      	beq.n	8005e4c <HRTIM_OutputConfig+0xb0>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b40      	cmp	r3, #64	; 0x40
 8005e04:	d84a      	bhi.n	8005e9c <HRTIM_OutputConfig+0x100>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d01f      	beq.n	8005e4c <HRTIM_OutputConfig+0xb0>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d044      	beq.n	8005e9c <HRTIM_OutputConfig+0x100>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d841      	bhi.n	8005e9c <HRTIM_OutputConfig+0x100>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d33e      	bcc.n	8005e9c <HRTIM_OutputConfig+0x100>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3b02      	subs	r3, #2
 8005e22:	2201      	movs	r2, #1
 8005e24:	409a      	lsls	r2, r3
 8005e26:	4b48      	ldr	r3, [pc, #288]	; (8005f48 <HRTIM_OutputConfig+0x1ac>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	bf14      	ite	ne
 8005e2e:	2301      	movne	r3, #1
 8005e30:	2300      	moveq	r3, #0
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d11c      	bne.n	8005e72 <HRTIM_OutputConfig+0xd6>
 8005e38:	f244 0304 	movw	r3, #16388	; 0x4004
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	bf14      	ite	ne
 8005e42:	2301      	movne	r3, #1
 8005e44:	2300      	moveq	r3, #0
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d027      	beq.n	8005e9c <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6819      	ldr	r1, [r3, #0]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	01db      	lsls	r3, r3, #7
 8005e58:	440b      	add	r3, r1
 8005e5a:	33bc      	adds	r3, #188	; 0xbc
 8005e5c:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6819      	ldr	r1, [r3, #0]
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	689a      	ldr	r2, [r3, #8]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	01db      	lsls	r3, r3, #7
 8005e6a:	440b      	add	r3, r1
 8005e6c:	33c0      	adds	r3, #192	; 0xc0
 8005e6e:	601a      	str	r2, [r3, #0]
      break;
 8005e70:	e015      	b.n	8005e9e <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6819      	ldr	r1, [r3, #0]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	01db      	lsls	r3, r3, #7
 8005e7e:	440b      	add	r3, r1
 8005e80:	33c4      	adds	r3, #196	; 0xc4
 8005e82:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6819      	ldr	r1, [r3, #0]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	01db      	lsls	r3, r3, #7
 8005e90:	440b      	add	r3, r1
 8005e92:	33c8      	adds	r3, #200	; 0xc8
 8005e94:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8005e96:	2310      	movs	r3, #16
 8005e98:	61bb      	str	r3, [r7, #24]
      break;
 8005e9a:	e000      	b.n	8005e9e <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8005e9c:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8005e9e:	22fe      	movs	r2, #254	; 0xfe
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8005ea6:	43db      	mvns	r3, r3
 8005ea8:	69fa      	ldr	r2, [r7, #28]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68da      	ldr	r2, [r3, #12]
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec8:	69fa      	ldr	r2, [r7, #28]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	691a      	ldr	r2, [r3, #16]
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	695a      	ldr	r2, [r3, #20]
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef8:	69fa      	ldr	r2, [r7, #28]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	2b08      	cmp	r3, #8
 8005f04:	d111      	bne.n	8005f2a <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10c      	bne.n	8005f2a <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d107      	bne.n	8005f2a <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	69da      	ldr	r2, [r3, #28]
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	01db      	lsls	r3, r3, #7
 8005f32:	4413      	add	r3, r2
 8005f34:	33e4      	adds	r3, #228	; 0xe4
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	601a      	str	r2, [r3, #0]
}
 8005f3a:	bf00      	nop
 8005f3c:	3724      	adds	r7, #36	; 0x24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	40000041 	.word	0x40000041

08005f4c <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b05      	cmp	r3, #5
 8005f5a:	d851      	bhi.n	8006000 <HRTIM_ForceRegistersUpdate+0xb4>
 8005f5c:	a201      	add	r2, pc, #4	; (adr r2, 8005f64 <HRTIM_ForceRegistersUpdate+0x18>)
 8005f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f62:	bf00      	nop
 8005f64:	08005f93 	.word	0x08005f93
 8005f68:	08005fa9 	.word	0x08005fa9
 8005f6c:	08005fbf 	.word	0x08005fbf
 8005f70:	08005fd5 	.word	0x08005fd5
 8005f74:	08005feb 	.word	0x08005feb
 8005f78:	08005f7d 	.word	0x08005f7d
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f042 0201 	orr.w	r2, r2, #1
 8005f8c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8005f90:	e037      	b.n	8006002 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0202 	orr.w	r2, r2, #2
 8005fa2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8005fa6:	e02c      	b.n	8006002 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f042 0204 	orr.w	r2, r2, #4
 8005fb8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8005fbc:	e021      	b.n	8006002 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0208 	orr.w	r2, r2, #8
 8005fce:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8005fd2:	e016      	b.n	8006002 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 0210 	orr.w	r2, r2, #16
 8005fe4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8005fe8:	e00b      	b.n	8006002 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0220 	orr.w	r2, r2, #32
 8005ffa:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8005ffe:	e000      	b.n	8006002 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8006000:	bf00      	nop
  }
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop

08006010 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e081      	b.n	8006126 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fd f982 	bl	8003340 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2224      	movs	r2, #36	; 0x24
 8006040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 0201 	bic.w	r2, r2, #1
 8006052:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006060:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689a      	ldr	r2, [r3, #8]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006070:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d107      	bne.n	800608a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689a      	ldr	r2, [r3, #8]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006086:	609a      	str	r2, [r3, #8]
 8006088:	e006      	b.n	8006098 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006096:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	2b02      	cmp	r3, #2
 800609e:	d104      	bne.n	80060aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	6812      	ldr	r2, [r2, #0]
 80060b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691a      	ldr	r2, [r3, #16]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	69d9      	ldr	r1, [r3, #28]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1a      	ldr	r2, [r3, #32]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0201 	orr.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2220      	movs	r2, #32
 8006112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	607a      	str	r2, [r7, #4]
 800613a:	461a      	mov	r2, r3
 800613c:	460b      	mov	r3, r1
 800613e:	817b      	strh	r3, [r7, #10]
 8006140:	4613      	mov	r3, r2
 8006142:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b20      	cmp	r3, #32
 800614e:	f040 80da 	bne.w	8006306 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_I2C_Master_Transmit+0x30>
 800615c:	2302      	movs	r3, #2
 800615e:	e0d3      	b.n	8006308 <HAL_I2C_Master_Transmit+0x1d8>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006168:	f7fd fb4a 	bl	8003800 <HAL_GetTick>
 800616c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	2319      	movs	r3, #25
 8006174:	2201      	movs	r2, #1
 8006176:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 fb4e 	bl	800681c <I2C_WaitOnFlagUntilTimeout>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e0be      	b.n	8006308 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2221      	movs	r2, #33	; 0x21
 800618e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2210      	movs	r2, #16
 8006196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	893a      	ldrh	r2, [r7, #8]
 80061aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	2bff      	cmp	r3, #255	; 0xff
 80061ba:	d90e      	bls.n	80061da <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	22ff      	movs	r2, #255	; 0xff
 80061c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	8979      	ldrh	r1, [r7, #10]
 80061ca:	4b51      	ldr	r3, [pc, #324]	; (8006310 <HAL_I2C_Master_Transmit+0x1e0>)
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 fd5e 	bl	8006c94 <I2C_TransferConfig>
 80061d8:	e06c      	b.n	80062b4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061de:	b29a      	uxth	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e8:	b2da      	uxtb	r2, r3
 80061ea:	8979      	ldrh	r1, [r7, #10]
 80061ec:	4b48      	ldr	r3, [pc, #288]	; (8006310 <HAL_I2C_Master_Transmit+0x1e0>)
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 fd4d 	bl	8006c94 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80061fa:	e05b      	b.n	80062b4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	6a39      	ldr	r1, [r7, #32]
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 fb5a 	bl	80068ba <I2C_WaitOnTXISFlagUntilTimeout>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e07b      	b.n	8006308 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	781a      	ldrb	r2, [r3, #0]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800622a:	b29b      	uxth	r3, r3
 800622c:	3b01      	subs	r3, #1
 800622e:	b29a      	uxth	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006244:	b29b      	uxth	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d034      	beq.n	80062b4 <HAL_I2C_Master_Transmit+0x184>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800624e:	2b00      	cmp	r3, #0
 8006250:	d130      	bne.n	80062b4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	2200      	movs	r2, #0
 800625a:	2180      	movs	r1, #128	; 0x80
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 fadd 	bl	800681c <I2C_WaitOnFlagUntilTimeout>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e04d      	b.n	8006308 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006270:	b29b      	uxth	r3, r3
 8006272:	2bff      	cmp	r3, #255	; 0xff
 8006274:	d90e      	bls.n	8006294 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	22ff      	movs	r2, #255	; 0xff
 800627a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006280:	b2da      	uxtb	r2, r3
 8006282:	8979      	ldrh	r1, [r7, #10]
 8006284:	2300      	movs	r3, #0
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f000 fd01 	bl	8006c94 <I2C_TransferConfig>
 8006292:	e00f      	b.n	80062b4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	8979      	ldrh	r1, [r7, #10]
 80062a6:	2300      	movs	r3, #0
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 fcf0 	bl	8006c94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d19e      	bne.n	80061fc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	6a39      	ldr	r1, [r7, #32]
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f000 fb40 	bl	8006948 <I2C_WaitOnSTOPFlagUntilTimeout>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e01a      	b.n	8006308 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2220      	movs	r2, #32
 80062d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6859      	ldr	r1, [r3, #4]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	4b0b      	ldr	r3, [pc, #44]	; (8006314 <HAL_I2C_Master_Transmit+0x1e4>)
 80062e6:	400b      	ands	r3, r1
 80062e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	e000      	b.n	8006308 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006306:	2302      	movs	r3, #2
  }
}
 8006308:	4618      	mov	r0, r3
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	80002000 	.word	0x80002000
 8006314:	fe00e800 	.word	0xfe00e800

08006318 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b088      	sub	sp, #32
 800631c:	af02      	add	r7, sp, #8
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	607a      	str	r2, [r7, #4]
 8006322:	461a      	mov	r2, r3
 8006324:	460b      	mov	r3, r1
 8006326:	817b      	strh	r3, [r7, #10]
 8006328:	4613      	mov	r3, r2
 800632a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b20      	cmp	r3, #32
 8006336:	f040 80db 	bne.w	80064f0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006340:	2b01      	cmp	r3, #1
 8006342:	d101      	bne.n	8006348 <HAL_I2C_Master_Receive+0x30>
 8006344:	2302      	movs	r3, #2
 8006346:	e0d4      	b.n	80064f2 <HAL_I2C_Master_Receive+0x1da>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006350:	f7fd fa56 	bl	8003800 <HAL_GetTick>
 8006354:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	2319      	movs	r3, #25
 800635c:	2201      	movs	r2, #1
 800635e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 fa5a 	bl	800681c <I2C_WaitOnFlagUntilTimeout>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e0bf      	b.n	80064f2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2222      	movs	r2, #34	; 0x22
 8006376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2210      	movs	r2, #16
 800637e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	893a      	ldrh	r2, [r7, #8]
 8006392:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800639e:	b29b      	uxth	r3, r3
 80063a0:	2bff      	cmp	r3, #255	; 0xff
 80063a2:	d90e      	bls.n	80063c2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	22ff      	movs	r2, #255	; 0xff
 80063a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ae:	b2da      	uxtb	r2, r3
 80063b0:	8979      	ldrh	r1, [r7, #10]
 80063b2:	4b52      	ldr	r3, [pc, #328]	; (80064fc <HAL_I2C_Master_Receive+0x1e4>)
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 fc6a 	bl	8006c94 <I2C_TransferConfig>
 80063c0:	e06d      	b.n	800649e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	8979      	ldrh	r1, [r7, #10]
 80063d4:	4b49      	ldr	r3, [pc, #292]	; (80064fc <HAL_I2C_Master_Receive+0x1e4>)
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 fc59 	bl	8006c94 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80063e2:	e05c      	b.n	800649e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	6a39      	ldr	r1, [r7, #32]
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 faf1 	bl	80069d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e07c      	b.n	80064f2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006414:	3b01      	subs	r3, #1
 8006416:	b29a      	uxth	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006420:	b29b      	uxth	r3, r3
 8006422:	3b01      	subs	r3, #1
 8006424:	b29a      	uxth	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642e:	b29b      	uxth	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d034      	beq.n	800649e <HAL_I2C_Master_Receive+0x186>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006438:	2b00      	cmp	r3, #0
 800643a:	d130      	bne.n	800649e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	2200      	movs	r2, #0
 8006444:	2180      	movs	r1, #128	; 0x80
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 f9e8 	bl	800681c <I2C_WaitOnFlagUntilTimeout>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e04d      	b.n	80064f2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645a:	b29b      	uxth	r3, r3
 800645c:	2bff      	cmp	r3, #255	; 0xff
 800645e:	d90e      	bls.n	800647e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	22ff      	movs	r2, #255	; 0xff
 8006464:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646a:	b2da      	uxtb	r2, r3
 800646c:	8979      	ldrh	r1, [r7, #10]
 800646e:	2300      	movs	r3, #0
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fc0c 	bl	8006c94 <I2C_TransferConfig>
 800647c:	e00f      	b.n	800649e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800648c:	b2da      	uxtb	r2, r3
 800648e:	8979      	ldrh	r1, [r7, #10]
 8006490:	2300      	movs	r3, #0
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 fbfb 	bl	8006c94 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d19d      	bne.n	80063e4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	6a39      	ldr	r1, [r7, #32]
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 fa4b 	bl	8006948 <I2C_WaitOnSTOPFlagUntilTimeout>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e01a      	b.n	80064f2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2220      	movs	r2, #32
 80064c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6859      	ldr	r1, [r3, #4]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	4b0c      	ldr	r3, [pc, #48]	; (8006500 <HAL_I2C_Master_Receive+0x1e8>)
 80064d0:	400b      	ands	r3, r1
 80064d2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	e000      	b.n	80064f2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80064f0:	2302      	movs	r3, #2
  }
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	80002400 	.word	0x80002400
 8006500:	fe00e800 	.word	0xfe00e800

08006504 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b088      	sub	sp, #32
 8006508:	af02      	add	r7, sp, #8
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	4608      	mov	r0, r1
 800650e:	4611      	mov	r1, r2
 8006510:	461a      	mov	r2, r3
 8006512:	4603      	mov	r3, r0
 8006514:	817b      	strh	r3, [r7, #10]
 8006516:	460b      	mov	r3, r1
 8006518:	813b      	strh	r3, [r7, #8]
 800651a:	4613      	mov	r3, r2
 800651c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b20      	cmp	r3, #32
 8006528:	f040 80f9 	bne.w	800671e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d002      	beq.n	8006538 <HAL_I2C_Mem_Write+0x34>
 8006532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006534:	2b00      	cmp	r3, #0
 8006536:	d105      	bne.n	8006544 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800653e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e0ed      	b.n	8006720 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800654a:	2b01      	cmp	r3, #1
 800654c:	d101      	bne.n	8006552 <HAL_I2C_Mem_Write+0x4e>
 800654e:	2302      	movs	r3, #2
 8006550:	e0e6      	b.n	8006720 <HAL_I2C_Mem_Write+0x21c>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800655a:	f7fd f951 	bl	8003800 <HAL_GetTick>
 800655e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	2319      	movs	r3, #25
 8006566:	2201      	movs	r2, #1
 8006568:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f000 f955 	bl	800681c <I2C_WaitOnFlagUntilTimeout>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e0d1      	b.n	8006720 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2221      	movs	r2, #33	; 0x21
 8006580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2240      	movs	r2, #64	; 0x40
 8006588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a3a      	ldr	r2, [r7, #32]
 8006596:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800659c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065a4:	88f8      	ldrh	r0, [r7, #6]
 80065a6:	893a      	ldrh	r2, [r7, #8]
 80065a8:	8979      	ldrh	r1, [r7, #10]
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	9301      	str	r3, [sp, #4]
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	4603      	mov	r3, r0
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 f8b9 	bl	800672c <I2C_RequestMemoryWrite>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d005      	beq.n	80065cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e0a9      	b.n	8006720 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	2bff      	cmp	r3, #255	; 0xff
 80065d4:	d90e      	bls.n	80065f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	22ff      	movs	r2, #255	; 0xff
 80065da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	8979      	ldrh	r1, [r7, #10]
 80065e4:	2300      	movs	r3, #0
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 fb51 	bl	8006c94 <I2C_TransferConfig>
 80065f2:	e00f      	b.n	8006614 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006602:	b2da      	uxtb	r2, r3
 8006604:	8979      	ldrh	r1, [r7, #10]
 8006606:	2300      	movs	r3, #0
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 fb40 	bl	8006c94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 f94e 	bl	80068ba <I2C_WaitOnTXISFlagUntilTimeout>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e07b      	b.n	8006720 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	781a      	ldrb	r2, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006642:	b29b      	uxth	r3, r3
 8006644:	3b01      	subs	r3, #1
 8006646:	b29a      	uxth	r2, r3
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800665c:	b29b      	uxth	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d034      	beq.n	80066cc <HAL_I2C_Mem_Write+0x1c8>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006666:	2b00      	cmp	r3, #0
 8006668:	d130      	bne.n	80066cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006670:	2200      	movs	r2, #0
 8006672:	2180      	movs	r1, #128	; 0x80
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 f8d1 	bl	800681c <I2C_WaitOnFlagUntilTimeout>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e04d      	b.n	8006720 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006688:	b29b      	uxth	r3, r3
 800668a:	2bff      	cmp	r3, #255	; 0xff
 800668c:	d90e      	bls.n	80066ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	22ff      	movs	r2, #255	; 0xff
 8006692:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006698:	b2da      	uxtb	r2, r3
 800669a:	8979      	ldrh	r1, [r7, #10]
 800669c:	2300      	movs	r3, #0
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 faf5 	bl	8006c94 <I2C_TransferConfig>
 80066aa:	e00f      	b.n	80066cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066ba:	b2da      	uxtb	r2, r3
 80066bc:	8979      	ldrh	r1, [r7, #10]
 80066be:	2300      	movs	r3, #0
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f000 fae4 	bl	8006c94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d19e      	bne.n	8006614 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 f934 	bl	8006948 <I2C_WaitOnSTOPFlagUntilTimeout>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e01a      	b.n	8006720 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2220      	movs	r2, #32
 80066f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	6859      	ldr	r1, [r3, #4]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	4b0a      	ldr	r3, [pc, #40]	; (8006728 <HAL_I2C_Mem_Write+0x224>)
 80066fe:	400b      	ands	r3, r1
 8006700:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2220      	movs	r2, #32
 8006706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	e000      	b.n	8006720 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800671e:	2302      	movs	r3, #2
  }
}
 8006720:	4618      	mov	r0, r3
 8006722:	3718      	adds	r7, #24
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	fe00e800 	.word	0xfe00e800

0800672c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af02      	add	r7, sp, #8
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	4608      	mov	r0, r1
 8006736:	4611      	mov	r1, r2
 8006738:	461a      	mov	r2, r3
 800673a:	4603      	mov	r3, r0
 800673c:	817b      	strh	r3, [r7, #10]
 800673e:	460b      	mov	r3, r1
 8006740:	813b      	strh	r3, [r7, #8]
 8006742:	4613      	mov	r3, r2
 8006744:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006746:	88fb      	ldrh	r3, [r7, #6]
 8006748:	b2da      	uxtb	r2, r3
 800674a:	8979      	ldrh	r1, [r7, #10]
 800674c:	4b20      	ldr	r3, [pc, #128]	; (80067d0 <I2C_RequestMemoryWrite+0xa4>)
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f000 fa9d 	bl	8006c94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800675a:	69fa      	ldr	r2, [r7, #28]
 800675c:	69b9      	ldr	r1, [r7, #24]
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 f8ab 	bl	80068ba <I2C_WaitOnTXISFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e02c      	b.n	80067c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800676e:	88fb      	ldrh	r3, [r7, #6]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d105      	bne.n	8006780 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006774:	893b      	ldrh	r3, [r7, #8]
 8006776:	b2da      	uxtb	r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	629a      	str	r2, [r3, #40]	; 0x28
 800677e:	e015      	b.n	80067ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006780:	893b      	ldrh	r3, [r7, #8]
 8006782:	0a1b      	lsrs	r3, r3, #8
 8006784:	b29b      	uxth	r3, r3
 8006786:	b2da      	uxtb	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800678e:	69fa      	ldr	r2, [r7, #28]
 8006790:	69b9      	ldr	r1, [r7, #24]
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f000 f891 	bl	80068ba <I2C_WaitOnTXISFlagUntilTimeout>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e012      	b.n	80067c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80067a2:	893b      	ldrh	r3, [r7, #8]
 80067a4:	b2da      	uxtb	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	2200      	movs	r2, #0
 80067b4:	2180      	movs	r1, #128	; 0x80
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 f830 	bl	800681c <I2C_WaitOnFlagUntilTimeout>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e000      	b.n	80067c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	80002000 	.word	0x80002000

080067d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d103      	bne.n	80067f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2200      	movs	r2, #0
 80067f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d007      	beq.n	8006810 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699a      	ldr	r2, [r3, #24]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0201 	orr.w	r2, r2, #1
 800680e:	619a      	str	r2, [r3, #24]
  }
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	603b      	str	r3, [r7, #0]
 8006828:	4613      	mov	r3, r2
 800682a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800682c:	e031      	b.n	8006892 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006834:	d02d      	beq.n	8006892 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006836:	f7fc ffe3 	bl	8003800 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d302      	bcc.n	800684c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d122      	bne.n	8006892 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	699a      	ldr	r2, [r3, #24]
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	4013      	ands	r3, r2
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	429a      	cmp	r2, r3
 800685a:	bf0c      	ite	eq
 800685c:	2301      	moveq	r3, #1
 800685e:	2300      	movne	r3, #0
 8006860:	b2db      	uxtb	r3, r3
 8006862:	461a      	mov	r2, r3
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	429a      	cmp	r2, r3
 8006868:	d113      	bne.n	8006892 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686e:	f043 0220 	orr.w	r2, r3, #32
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2220      	movs	r2, #32
 800687a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e00f      	b.n	80068b2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	699a      	ldr	r2, [r3, #24]
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	4013      	ands	r3, r2
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	429a      	cmp	r2, r3
 80068a0:	bf0c      	ite	eq
 80068a2:	2301      	moveq	r3, #1
 80068a4:	2300      	movne	r3, #0
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	461a      	mov	r2, r3
 80068aa:	79fb      	ldrb	r3, [r7, #7]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d0be      	beq.n	800682e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b084      	sub	sp, #16
 80068be:	af00      	add	r7, sp, #0
 80068c0:	60f8      	str	r0, [r7, #12]
 80068c2:	60b9      	str	r1, [r7, #8]
 80068c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068c6:	e033      	b.n	8006930 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	68b9      	ldr	r1, [r7, #8]
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 f901 	bl	8006ad4 <I2C_IsErrorOccurred>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e031      	b.n	8006940 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e2:	d025      	beq.n	8006930 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068e4:	f7fc ff8c 	bl	8003800 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d302      	bcc.n	80068fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d11a      	bne.n	8006930 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b02      	cmp	r3, #2
 8006906:	d013      	beq.n	8006930 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690c:	f043 0220 	orr.w	r2, r3, #32
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e007      	b.n	8006940 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b02      	cmp	r3, #2
 800693c:	d1c4      	bne.n	80068c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006954:	e02f      	b.n	80069b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	68b9      	ldr	r1, [r7, #8]
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f000 f8ba 	bl	8006ad4 <I2C_IsErrorOccurred>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e02d      	b.n	80069c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800696a:	f7fc ff49 	bl	8003800 <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	429a      	cmp	r2, r3
 8006978:	d302      	bcc.n	8006980 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d11a      	bne.n	80069b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	f003 0320 	and.w	r3, r3, #32
 800698a:	2b20      	cmp	r3, #32
 800698c:	d013      	beq.n	80069b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006992:	f043 0220 	orr.w	r2, r3, #32
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2220      	movs	r2, #32
 800699e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e007      	b.n	80069c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	f003 0320 	and.w	r3, r3, #32
 80069c0:	2b20      	cmp	r3, #32
 80069c2:	d1c8      	bne.n	8006956 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069dc:	e06b      	b.n	8006ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	68b9      	ldr	r1, [r7, #8]
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 f876 	bl	8006ad4 <I2C_IsErrorOccurred>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e069      	b.n	8006ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	f003 0320 	and.w	r3, r3, #32
 80069fc:	2b20      	cmp	r3, #32
 80069fe:	d138      	bne.n	8006a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	f003 0304 	and.w	r3, r3, #4
 8006a0a:	2b04      	cmp	r3, #4
 8006a0c:	d105      	bne.n	8006a1a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	e055      	b.n	8006ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	f003 0310 	and.w	r3, r3, #16
 8006a24:	2b10      	cmp	r3, #16
 8006a26:	d107      	bne.n	8006a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2210      	movs	r2, #16
 8006a2e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2204      	movs	r2, #4
 8006a34:	645a      	str	r2, [r3, #68]	; 0x44
 8006a36:	e002      	b.n	8006a3e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2220      	movs	r2, #32
 8006a44:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6859      	ldr	r1, [r3, #4]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	4b1f      	ldr	r3, [pc, #124]	; (8006ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8006a52:	400b      	ands	r3, r1
 8006a54:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e029      	b.n	8006ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a72:	f7fc fec5 	bl	8003800 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d302      	bcc.n	8006a88 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d116      	bne.n	8006ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	f003 0304 	and.w	r3, r3, #4
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	d00f      	beq.n	8006ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9a:	f043 0220 	orr.w	r2, r3, #32
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e007      	b.n	8006ac6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	f003 0304 	and.w	r3, r3, #4
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	d18c      	bne.n	80069de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	fe00e800 	.word	0xfe00e800

08006ad4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08a      	sub	sp, #40	; 0x28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006aee:	2300      	movs	r3, #0
 8006af0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	f003 0310 	and.w	r3, r3, #16
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d068      	beq.n	8006bd2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2210      	movs	r2, #16
 8006b06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b08:	e049      	b.n	8006b9e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b10:	d045      	beq.n	8006b9e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006b12:	f7fc fe75 	bl	8003800 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d302      	bcc.n	8006b28 <I2C_IsErrorOccurred+0x54>
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d13a      	bne.n	8006b9e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b4a:	d121      	bne.n	8006b90 <I2C_IsErrorOccurred+0xbc>
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b52:	d01d      	beq.n	8006b90 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006b54:	7cfb      	ldrb	r3, [r7, #19]
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	d01a      	beq.n	8006b90 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006b6a:	f7fc fe49 	bl	8003800 <HAL_GetTick>
 8006b6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b70:	e00e      	b.n	8006b90 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006b72:	f7fc fe45 	bl	8003800 <HAL_GetTick>
 8006b76:	4602      	mov	r2, r0
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	2b19      	cmp	r3, #25
 8006b7e:	d907      	bls.n	8006b90 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	f043 0320 	orr.w	r3, r3, #32
 8006b86:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006b8e:	e006      	b.n	8006b9e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b20      	cmp	r3, #32
 8006b9c:	d1e9      	bne.n	8006b72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	699b      	ldr	r3, [r3, #24]
 8006ba4:	f003 0320 	and.w	r3, r3, #32
 8006ba8:	2b20      	cmp	r3, #32
 8006baa:	d003      	beq.n	8006bb4 <I2C_IsErrorOccurred+0xe0>
 8006bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d0aa      	beq.n	8006b0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d103      	bne.n	8006bc4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	f043 0304 	orr.w	r3, r3, #4
 8006bca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00b      	beq.n	8006bfc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	f043 0301 	orr.w	r3, r3, #1
 8006bea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bf4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00b      	beq.n	8006c1e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	f043 0308 	orr.w	r3, r3, #8
 8006c0c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00b      	beq.n	8006c40 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	f043 0302 	orr.w	r3, r3, #2
 8006c2e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01c      	beq.n	8006c82 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f7ff fdc3 	bl	80067d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6859      	ldr	r1, [r3, #4]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	4b0d      	ldr	r3, [pc, #52]	; (8006c90 <I2C_IsErrorOccurred+0x1bc>)
 8006c5a:	400b      	ands	r3, r1
 8006c5c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	431a      	orrs	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3728      	adds	r7, #40	; 0x28
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	fe00e800 	.word	0xfe00e800

08006c94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	607b      	str	r3, [r7, #4]
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	817b      	strh	r3, [r7, #10]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ca6:	897b      	ldrh	r3, [r7, #10]
 8006ca8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006cac:	7a7b      	ldrb	r3, [r7, #9]
 8006cae:	041b      	lsls	r3, r3, #16
 8006cb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cb4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cc2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685a      	ldr	r2, [r3, #4]
 8006cca:	6a3b      	ldr	r3, [r7, #32]
 8006ccc:	0d5b      	lsrs	r3, r3, #21
 8006cce:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006cd2:	4b08      	ldr	r3, [pc, #32]	; (8006cf4 <I2C_TransferConfig+0x60>)
 8006cd4:	430b      	orrs	r3, r1
 8006cd6:	43db      	mvns	r3, r3
 8006cd8:	ea02 0103 	and.w	r1, r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006ce6:	bf00      	nop
 8006ce8:	371c      	adds	r7, #28
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	03ff63ff 	.word	0x03ff63ff

08006cf8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b20      	cmp	r3, #32
 8006d0c:	d138      	bne.n	8006d80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d101      	bne.n	8006d1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	e032      	b.n	8006d82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2224      	movs	r2, #36	; 0x24
 8006d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 0201 	bic.w	r2, r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6819      	ldr	r1, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0201 	orr.w	r2, r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	e000      	b.n	8006d82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d80:	2302      	movs	r3, #2
  }
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b085      	sub	sp, #20
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b20      	cmp	r3, #32
 8006da2:	d139      	bne.n	8006e18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d101      	bne.n	8006db2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006dae:	2302      	movs	r3, #2
 8006db0:	e033      	b.n	8006e1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2224      	movs	r2, #36	; 0x24
 8006dbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0201 	bic.w	r2, r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006de0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0201 	orr.w	r2, r2, #1
 8006e02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2220      	movs	r2, #32
 8006e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	e000      	b.n	8006e1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e18:	2302      	movs	r3, #2
  }
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
	...

08006e28 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e30:	4b0b      	ldr	r3, [pc, #44]	; (8006e60 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	4a0a      	ldr	r2, [pc, #40]	; (8006e60 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006e36:	f043 0301 	orr.w	r3, r3, #1
 8006e3a:	6193      	str	r3, [r2, #24]
 8006e3c:	4b08      	ldr	r3, [pc, #32]	; (8006e60 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	60fb      	str	r3, [r7, #12]
 8006e46:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8006e48:	4b06      	ldr	r3, [pc, #24]	; (8006e64 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	4905      	ldr	r1, [pc, #20]	; (8006e64 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	600b      	str	r3, [r1, #0]
}
 8006e54:	bf00      	nop
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	40021000 	.word	0x40021000
 8006e64:	40010000 	.word	0x40010000

08006e68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e78:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d102      	bne.n	8006e8e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	f001 b823 	b.w	8007ed4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 817d 	beq.w	800719e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006ea4:	4bbc      	ldr	r3, [pc, #752]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f003 030c 	and.w	r3, r3, #12
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d00c      	beq.n	8006eca <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006eb0:	4bb9      	ldr	r3, [pc, #740]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f003 030c 	and.w	r3, r3, #12
 8006eb8:	2b08      	cmp	r3, #8
 8006eba:	d15c      	bne.n	8006f76 <HAL_RCC_OscConfig+0x10e>
 8006ebc:	4bb6      	ldr	r3, [pc, #728]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec8:	d155      	bne.n	8006f76 <HAL_RCC_OscConfig+0x10e>
 8006eca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ece:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ed2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8006ed6:	fa93 f3a3 	rbit	r3, r3
 8006eda:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006ede:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ee2:	fab3 f383 	clz	r3, r3
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	095b      	lsrs	r3, r3, #5
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	f043 0301 	orr.w	r3, r3, #1
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d102      	bne.n	8006efc <HAL_RCC_OscConfig+0x94>
 8006ef6:	4ba8      	ldr	r3, [pc, #672]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	e015      	b.n	8006f28 <HAL_RCC_OscConfig+0xc0>
 8006efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f00:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f04:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006f08:	fa93 f3a3 	rbit	r3, r3
 8006f0c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f14:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006f18:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006f1c:	fa93 f3a3 	rbit	r3, r3
 8006f20:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8006f24:	4b9c      	ldr	r3, [pc, #624]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8006f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006f2c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8006f30:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006f34:	fa92 f2a2 	rbit	r2, r2
 8006f38:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8006f3c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8006f40:	fab2 f282 	clz	r2, r2
 8006f44:	b2d2      	uxtb	r2, r2
 8006f46:	f042 0220 	orr.w	r2, r2, #32
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	f002 021f 	and.w	r2, r2, #31
 8006f50:	2101      	movs	r1, #1
 8006f52:	fa01 f202 	lsl.w	r2, r1, r2
 8006f56:	4013      	ands	r3, r2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 811f 	beq.w	800719c <HAL_RCC_OscConfig+0x334>
 8006f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f040 8116 	bne.w	800719c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	f000 bfaf 	b.w	8007ed4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f86:	d106      	bne.n	8006f96 <HAL_RCC_OscConfig+0x12e>
 8006f88:	4b83      	ldr	r3, [pc, #524]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a82      	ldr	r2, [pc, #520]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8006f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	e036      	b.n	8007004 <HAL_RCC_OscConfig+0x19c>
 8006f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10c      	bne.n	8006fc0 <HAL_RCC_OscConfig+0x158>
 8006fa6:	4b7c      	ldr	r3, [pc, #496]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a7b      	ldr	r2, [pc, #492]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8006fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fb0:	6013      	str	r3, [r2, #0]
 8006fb2:	4b79      	ldr	r3, [pc, #484]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a78      	ldr	r2, [pc, #480]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8006fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fbc:	6013      	str	r3, [r2, #0]
 8006fbe:	e021      	b.n	8007004 <HAL_RCC_OscConfig+0x19c>
 8006fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fd0:	d10c      	bne.n	8006fec <HAL_RCC_OscConfig+0x184>
 8006fd2:	4b71      	ldr	r3, [pc, #452]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a70      	ldr	r2, [pc, #448]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8006fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	4b6e      	ldr	r3, [pc, #440]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a6d      	ldr	r2, [pc, #436]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8006fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	e00b      	b.n	8007004 <HAL_RCC_OscConfig+0x19c>
 8006fec:	4b6a      	ldr	r3, [pc, #424]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a69      	ldr	r2, [pc, #420]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8006ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ff6:	6013      	str	r3, [r2, #0]
 8006ff8:	4b67      	ldr	r3, [pc, #412]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a66      	ldr	r2, [pc, #408]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8006ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007002:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007004:	4b64      	ldr	r3, [pc, #400]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	f023 020f 	bic.w	r2, r3, #15
 800700c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007010:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	495f      	ldr	r1, [pc, #380]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 800701a:	4313      	orrs	r3, r2
 800701c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800701e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007022:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d059      	beq.n	80070e2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800702e:	f7fc fbe7 	bl	8003800 <HAL_GetTick>
 8007032:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007036:	e00a      	b.n	800704e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007038:	f7fc fbe2 	bl	8003800 <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	2b64      	cmp	r3, #100	; 0x64
 8007046:	d902      	bls.n	800704e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	f000 bf43 	b.w	8007ed4 <HAL_RCC_OscConfig+0x106c>
 800704e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007052:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007056:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800705a:	fa93 f3a3 	rbit	r3, r3
 800705e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8007062:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007066:	fab3 f383 	clz	r3, r3
 800706a:	b2db      	uxtb	r3, r3
 800706c:	095b      	lsrs	r3, r3, #5
 800706e:	b2db      	uxtb	r3, r3
 8007070:	f043 0301 	orr.w	r3, r3, #1
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b01      	cmp	r3, #1
 8007078:	d102      	bne.n	8007080 <HAL_RCC_OscConfig+0x218>
 800707a:	4b47      	ldr	r3, [pc, #284]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	e015      	b.n	80070ac <HAL_RCC_OscConfig+0x244>
 8007080:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007084:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007088:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800708c:	fa93 f3a3 	rbit	r3, r3
 8007090:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007094:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007098:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800709c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80070a0:	fa93 f3a3 	rbit	r3, r3
 80070a4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80070a8:	4b3b      	ldr	r3, [pc, #236]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80070b0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80070b4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80070b8:	fa92 f2a2 	rbit	r2, r2
 80070bc:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80070c0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80070c4:	fab2 f282 	clz	r2, r2
 80070c8:	b2d2      	uxtb	r2, r2
 80070ca:	f042 0220 	orr.w	r2, r2, #32
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	f002 021f 	and.w	r2, r2, #31
 80070d4:	2101      	movs	r1, #1
 80070d6:	fa01 f202 	lsl.w	r2, r1, r2
 80070da:	4013      	ands	r3, r2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d0ab      	beq.n	8007038 <HAL_RCC_OscConfig+0x1d0>
 80070e0:	e05d      	b.n	800719e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070e2:	f7fc fb8d 	bl	8003800 <HAL_GetTick>
 80070e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ea:	e00a      	b.n	8007102 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070ec:	f7fc fb88 	bl	8003800 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	2b64      	cmp	r3, #100	; 0x64
 80070fa:	d902      	bls.n	8007102 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	f000 bee9 	b.w	8007ed4 <HAL_RCC_OscConfig+0x106c>
 8007102:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007106:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800710a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800710e:	fa93 f3a3 	rbit	r3, r3
 8007112:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8007116:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800711a:	fab3 f383 	clz	r3, r3
 800711e:	b2db      	uxtb	r3, r3
 8007120:	095b      	lsrs	r3, r3, #5
 8007122:	b2db      	uxtb	r3, r3
 8007124:	f043 0301 	orr.w	r3, r3, #1
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b01      	cmp	r3, #1
 800712c:	d102      	bne.n	8007134 <HAL_RCC_OscConfig+0x2cc>
 800712e:	4b1a      	ldr	r3, [pc, #104]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	e015      	b.n	8007160 <HAL_RCC_OscConfig+0x2f8>
 8007134:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007138:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800713c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007140:	fa93 f3a3 	rbit	r3, r3
 8007144:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800714c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007150:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007154:	fa93 f3a3 	rbit	r3, r3
 8007158:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800715c:	4b0e      	ldr	r3, [pc, #56]	; (8007198 <HAL_RCC_OscConfig+0x330>)
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007164:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007168:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800716c:	fa92 f2a2 	rbit	r2, r2
 8007170:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007174:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007178:	fab2 f282 	clz	r2, r2
 800717c:	b2d2      	uxtb	r2, r2
 800717e:	f042 0220 	orr.w	r2, r2, #32
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	f002 021f 	and.w	r2, r2, #31
 8007188:	2101      	movs	r1, #1
 800718a:	fa01 f202 	lsl.w	r2, r1, r2
 800718e:	4013      	ands	r3, r2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1ab      	bne.n	80070ec <HAL_RCC_OscConfig+0x284>
 8007194:	e003      	b.n	800719e <HAL_RCC_OscConfig+0x336>
 8007196:	bf00      	nop
 8007198:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800719c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800719e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 817d 	beq.w	80074ae <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80071b4:	4ba6      	ldr	r3, [pc, #664]	; (8007450 <HAL_RCC_OscConfig+0x5e8>)
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f003 030c 	and.w	r3, r3, #12
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00b      	beq.n	80071d8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80071c0:	4ba3      	ldr	r3, [pc, #652]	; (8007450 <HAL_RCC_OscConfig+0x5e8>)
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f003 030c 	and.w	r3, r3, #12
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	d172      	bne.n	80072b2 <HAL_RCC_OscConfig+0x44a>
 80071cc:	4ba0      	ldr	r3, [pc, #640]	; (8007450 <HAL_RCC_OscConfig+0x5e8>)
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d16c      	bne.n	80072b2 <HAL_RCC_OscConfig+0x44a>
 80071d8:	2302      	movs	r3, #2
 80071da:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071de:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80071e2:	fa93 f3a3 	rbit	r3, r3
 80071e6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80071ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071ee:	fab3 f383 	clz	r3, r3
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	095b      	lsrs	r3, r3, #5
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	f043 0301 	orr.w	r3, r3, #1
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d102      	bne.n	8007208 <HAL_RCC_OscConfig+0x3a0>
 8007202:	4b93      	ldr	r3, [pc, #588]	; (8007450 <HAL_RCC_OscConfig+0x5e8>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	e013      	b.n	8007230 <HAL_RCC_OscConfig+0x3c8>
 8007208:	2302      	movs	r3, #2
 800720a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800720e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8007212:	fa93 f3a3 	rbit	r3, r3
 8007216:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800721a:	2302      	movs	r3, #2
 800721c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007220:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007224:	fa93 f3a3 	rbit	r3, r3
 8007228:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800722c:	4b88      	ldr	r3, [pc, #544]	; (8007450 <HAL_RCC_OscConfig+0x5e8>)
 800722e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007230:	2202      	movs	r2, #2
 8007232:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007236:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800723a:	fa92 f2a2 	rbit	r2, r2
 800723e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8007242:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007246:	fab2 f282 	clz	r2, r2
 800724a:	b2d2      	uxtb	r2, r2
 800724c:	f042 0220 	orr.w	r2, r2, #32
 8007250:	b2d2      	uxtb	r2, r2
 8007252:	f002 021f 	and.w	r2, r2, #31
 8007256:	2101      	movs	r1, #1
 8007258:	fa01 f202 	lsl.w	r2, r1, r2
 800725c:	4013      	ands	r3, r2
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00a      	beq.n	8007278 <HAL_RCC_OscConfig+0x410>
 8007262:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007266:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d002      	beq.n	8007278 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	f000 be2e 	b.w	8007ed4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007278:	4b75      	ldr	r3, [pc, #468]	; (8007450 <HAL_RCC_OscConfig+0x5e8>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007280:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007284:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	21f8      	movs	r1, #248	; 0xf8
 800728e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007292:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007296:	fa91 f1a1 	rbit	r1, r1
 800729a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800729e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80072a2:	fab1 f181 	clz	r1, r1
 80072a6:	b2c9      	uxtb	r1, r1
 80072a8:	408b      	lsls	r3, r1
 80072aa:	4969      	ldr	r1, [pc, #420]	; (8007450 <HAL_RCC_OscConfig+0x5e8>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072b0:	e0fd      	b.n	80074ae <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80072b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80072b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 8088 	beq.w	80073d4 <HAL_RCC_OscConfig+0x56c>
 80072c4:	2301      	movs	r3, #1
 80072c6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80072ce:	fa93 f3a3 	rbit	r3, r3
 80072d2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80072d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072da:	fab3 f383 	clz	r3, r3
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80072e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	461a      	mov	r2, r3
 80072ec:	2301      	movs	r3, #1
 80072ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072f0:	f7fc fa86 	bl	8003800 <HAL_GetTick>
 80072f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072f8:	e00a      	b.n	8007310 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072fa:	f7fc fa81 	bl	8003800 <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007304:	1ad3      	subs	r3, r2, r3
 8007306:	2b02      	cmp	r3, #2
 8007308:	d902      	bls.n	8007310 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	f000 bde2 	b.w	8007ed4 <HAL_RCC_OscConfig+0x106c>
 8007310:	2302      	movs	r3, #2
 8007312:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007316:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800731a:	fa93 f3a3 	rbit	r3, r3
 800731e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8007322:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007326:	fab3 f383 	clz	r3, r3
 800732a:	b2db      	uxtb	r3, r3
 800732c:	095b      	lsrs	r3, r3, #5
 800732e:	b2db      	uxtb	r3, r3
 8007330:	f043 0301 	orr.w	r3, r3, #1
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b01      	cmp	r3, #1
 8007338:	d102      	bne.n	8007340 <HAL_RCC_OscConfig+0x4d8>
 800733a:	4b45      	ldr	r3, [pc, #276]	; (8007450 <HAL_RCC_OscConfig+0x5e8>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	e013      	b.n	8007368 <HAL_RCC_OscConfig+0x500>
 8007340:	2302      	movs	r3, #2
 8007342:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007346:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800734a:	fa93 f3a3 	rbit	r3, r3
 800734e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007352:	2302      	movs	r3, #2
 8007354:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007358:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800735c:	fa93 f3a3 	rbit	r3, r3
 8007360:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007364:	4b3a      	ldr	r3, [pc, #232]	; (8007450 <HAL_RCC_OscConfig+0x5e8>)
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	2202      	movs	r2, #2
 800736a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800736e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007372:	fa92 f2a2 	rbit	r2, r2
 8007376:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800737a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800737e:	fab2 f282 	clz	r2, r2
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	f042 0220 	orr.w	r2, r2, #32
 8007388:	b2d2      	uxtb	r2, r2
 800738a:	f002 021f 	and.w	r2, r2, #31
 800738e:	2101      	movs	r1, #1
 8007390:	fa01 f202 	lsl.w	r2, r1, r2
 8007394:	4013      	ands	r3, r2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0af      	beq.n	80072fa <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800739a:	4b2d      	ldr	r3, [pc, #180]	; (8007450 <HAL_RCC_OscConfig+0x5e8>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80073a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80073a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	695b      	ldr	r3, [r3, #20]
 80073ae:	21f8      	movs	r1, #248	; 0xf8
 80073b0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073b4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80073b8:	fa91 f1a1 	rbit	r1, r1
 80073bc:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80073c0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80073c4:	fab1 f181 	clz	r1, r1
 80073c8:	b2c9      	uxtb	r1, r1
 80073ca:	408b      	lsls	r3, r1
 80073cc:	4920      	ldr	r1, [pc, #128]	; (8007450 <HAL_RCC_OscConfig+0x5e8>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	600b      	str	r3, [r1, #0]
 80073d2:	e06c      	b.n	80074ae <HAL_RCC_OscConfig+0x646>
 80073d4:	2301      	movs	r3, #1
 80073d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073da:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80073de:	fa93 f3a3 	rbit	r3, r3
 80073e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80073e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073ea:	fab3 f383 	clz	r3, r3
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80073f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	461a      	mov	r2, r3
 80073fc:	2300      	movs	r3, #0
 80073fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007400:	f7fc f9fe 	bl	8003800 <HAL_GetTick>
 8007404:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007408:	e00a      	b.n	8007420 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800740a:	f7fc f9f9 	bl	8003800 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	2b02      	cmp	r3, #2
 8007418:	d902      	bls.n	8007420 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	f000 bd5a 	b.w	8007ed4 <HAL_RCC_OscConfig+0x106c>
 8007420:	2302      	movs	r3, #2
 8007422:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007426:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800742a:	fa93 f3a3 	rbit	r3, r3
 800742e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8007432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007436:	fab3 f383 	clz	r3, r3
 800743a:	b2db      	uxtb	r3, r3
 800743c:	095b      	lsrs	r3, r3, #5
 800743e:	b2db      	uxtb	r3, r3
 8007440:	f043 0301 	orr.w	r3, r3, #1
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b01      	cmp	r3, #1
 8007448:	d104      	bne.n	8007454 <HAL_RCC_OscConfig+0x5ec>
 800744a:	4b01      	ldr	r3, [pc, #4]	; (8007450 <HAL_RCC_OscConfig+0x5e8>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	e015      	b.n	800747c <HAL_RCC_OscConfig+0x614>
 8007450:	40021000 	.word	0x40021000
 8007454:	2302      	movs	r3, #2
 8007456:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800745a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800745e:	fa93 f3a3 	rbit	r3, r3
 8007462:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007466:	2302      	movs	r3, #2
 8007468:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800746c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007470:	fa93 f3a3 	rbit	r3, r3
 8007474:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007478:	4bc8      	ldr	r3, [pc, #800]	; (800779c <HAL_RCC_OscConfig+0x934>)
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747c:	2202      	movs	r2, #2
 800747e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007482:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007486:	fa92 f2a2 	rbit	r2, r2
 800748a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800748e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007492:	fab2 f282 	clz	r2, r2
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	f042 0220 	orr.w	r2, r2, #32
 800749c:	b2d2      	uxtb	r2, r2
 800749e:	f002 021f 	and.w	r2, r2, #31
 80074a2:	2101      	movs	r1, #1
 80074a4:	fa01 f202 	lsl.w	r2, r1, r2
 80074a8:	4013      	ands	r3, r2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1ad      	bne.n	800740a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0308 	and.w	r3, r3, #8
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 8110 	beq.w	80076e4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80074c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d079      	beq.n	80075c8 <HAL_RCC_OscConfig+0x760>
 80074d4:	2301      	movs	r3, #1
 80074d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80074de:	fa93 f3a3 	rbit	r3, r3
 80074e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80074e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074ea:	fab3 f383 	clz	r3, r3
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	461a      	mov	r2, r3
 80074f2:	4bab      	ldr	r3, [pc, #684]	; (80077a0 <HAL_RCC_OscConfig+0x938>)
 80074f4:	4413      	add	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	461a      	mov	r2, r3
 80074fa:	2301      	movs	r3, #1
 80074fc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074fe:	f7fc f97f 	bl	8003800 <HAL_GetTick>
 8007502:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007506:	e00a      	b.n	800751e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007508:	f7fc f97a 	bl	8003800 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	2b02      	cmp	r3, #2
 8007516:	d902      	bls.n	800751e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	f000 bcdb 	b.w	8007ed4 <HAL_RCC_OscConfig+0x106c>
 800751e:	2302      	movs	r3, #2
 8007520:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007524:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007528:	fa93 f3a3 	rbit	r3, r3
 800752c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007534:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007538:	2202      	movs	r2, #2
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007540:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	fa93 f2a3 	rbit	r2, r3
 800754a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800754e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800755c:	2202      	movs	r2, #2
 800755e:	601a      	str	r2, [r3, #0]
 8007560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	fa93 f2a3 	rbit	r2, r3
 800756e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007572:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007576:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007578:	4b88      	ldr	r3, [pc, #544]	; (800779c <HAL_RCC_OscConfig+0x934>)
 800757a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800757c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007580:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007584:	2102      	movs	r1, #2
 8007586:	6019      	str	r1, [r3, #0]
 8007588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800758c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	fa93 f1a3 	rbit	r1, r3
 8007596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800759a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800759e:	6019      	str	r1, [r3, #0]
  return result;
 80075a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	fab3 f383 	clz	r3, r3
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	f003 031f 	and.w	r3, r3, #31
 80075ba:	2101      	movs	r1, #1
 80075bc:	fa01 f303 	lsl.w	r3, r1, r3
 80075c0:	4013      	ands	r3, r2
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d0a0      	beq.n	8007508 <HAL_RCC_OscConfig+0x6a0>
 80075c6:	e08d      	b.n	80076e4 <HAL_RCC_OscConfig+0x87c>
 80075c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075cc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80075d0:	2201      	movs	r2, #1
 80075d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075d8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	fa93 f2a3 	rbit	r2, r3
 80075e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80075ea:	601a      	str	r2, [r3, #0]
  return result;
 80075ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80075f4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075f6:	fab3 f383 	clz	r3, r3
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	461a      	mov	r2, r3
 80075fe:	4b68      	ldr	r3, [pc, #416]	; (80077a0 <HAL_RCC_OscConfig+0x938>)
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	461a      	mov	r2, r3
 8007606:	2300      	movs	r3, #0
 8007608:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800760a:	f7fc f8f9 	bl	8003800 <HAL_GetTick>
 800760e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007612:	e00a      	b.n	800762a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007614:	f7fc f8f4 	bl	8003800 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	2b02      	cmp	r3, #2
 8007622:	d902      	bls.n	800762a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	f000 bc55 	b.w	8007ed4 <HAL_RCC_OscConfig+0x106c>
 800762a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800762e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007632:	2202      	movs	r2, #2
 8007634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800763a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	fa93 f2a3 	rbit	r2, r3
 8007644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007648:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007652:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007656:	2202      	movs	r2, #2
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800765e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	fa93 f2a3 	rbit	r2, r3
 8007668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800766c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007670:	601a      	str	r2, [r3, #0]
 8007672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800767a:	2202      	movs	r2, #2
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	fa93 f2a3 	rbit	r2, r3
 800768c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007690:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007694:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007696:	4b41      	ldr	r3, [pc, #260]	; (800779c <HAL_RCC_OscConfig+0x934>)
 8007698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800769a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800769e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80076a2:	2102      	movs	r1, #2
 80076a4:	6019      	str	r1, [r3, #0]
 80076a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076aa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	fa93 f1a3 	rbit	r1, r3
 80076b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80076bc:	6019      	str	r1, [r3, #0]
  return result;
 80076be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076c2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	fab3 f383 	clz	r3, r3
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	f003 031f 	and.w	r3, r3, #31
 80076d8:	2101      	movs	r1, #1
 80076da:	fa01 f303 	lsl.w	r3, r1, r3
 80076de:	4013      	ands	r3, r2
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d197      	bne.n	8007614 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0304 	and.w	r3, r3, #4
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 81a1 	beq.w	8007a3c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076fa:	2300      	movs	r3, #0
 80076fc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007700:	4b26      	ldr	r3, [pc, #152]	; (800779c <HAL_RCC_OscConfig+0x934>)
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d116      	bne.n	800773a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800770c:	4b23      	ldr	r3, [pc, #140]	; (800779c <HAL_RCC_OscConfig+0x934>)
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	4a22      	ldr	r2, [pc, #136]	; (800779c <HAL_RCC_OscConfig+0x934>)
 8007712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007716:	61d3      	str	r3, [r2, #28]
 8007718:	4b20      	ldr	r3, [pc, #128]	; (800779c <HAL_RCC_OscConfig+0x934>)
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007720:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007724:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800772e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007732:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007734:	2301      	movs	r3, #1
 8007736:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800773a:	4b1a      	ldr	r3, [pc, #104]	; (80077a4 <HAL_RCC_OscConfig+0x93c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007742:	2b00      	cmp	r3, #0
 8007744:	d11a      	bne.n	800777c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007746:	4b17      	ldr	r3, [pc, #92]	; (80077a4 <HAL_RCC_OscConfig+0x93c>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a16      	ldr	r2, [pc, #88]	; (80077a4 <HAL_RCC_OscConfig+0x93c>)
 800774c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007750:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007752:	f7fc f855 	bl	8003800 <HAL_GetTick>
 8007756:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800775a:	e009      	b.n	8007770 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800775c:	f7fc f850 	bl	8003800 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	2b64      	cmp	r3, #100	; 0x64
 800776a:	d901      	bls.n	8007770 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e3b1      	b.n	8007ed4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007770:	4b0c      	ldr	r3, [pc, #48]	; (80077a4 <HAL_RCC_OscConfig+0x93c>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0ef      	beq.n	800775c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800777c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007780:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d10d      	bne.n	80077a8 <HAL_RCC_OscConfig+0x940>
 800778c:	4b03      	ldr	r3, [pc, #12]	; (800779c <HAL_RCC_OscConfig+0x934>)
 800778e:	6a1b      	ldr	r3, [r3, #32]
 8007790:	4a02      	ldr	r2, [pc, #8]	; (800779c <HAL_RCC_OscConfig+0x934>)
 8007792:	f043 0301 	orr.w	r3, r3, #1
 8007796:	6213      	str	r3, [r2, #32]
 8007798:	e03c      	b.n	8007814 <HAL_RCC_OscConfig+0x9ac>
 800779a:	bf00      	nop
 800779c:	40021000 	.word	0x40021000
 80077a0:	10908120 	.word	0x10908120
 80077a4:	40007000 	.word	0x40007000
 80077a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10c      	bne.n	80077d2 <HAL_RCC_OscConfig+0x96a>
 80077b8:	4bc1      	ldr	r3, [pc, #772]	; (8007ac0 <HAL_RCC_OscConfig+0xc58>)
 80077ba:	6a1b      	ldr	r3, [r3, #32]
 80077bc:	4ac0      	ldr	r2, [pc, #768]	; (8007ac0 <HAL_RCC_OscConfig+0xc58>)
 80077be:	f023 0301 	bic.w	r3, r3, #1
 80077c2:	6213      	str	r3, [r2, #32]
 80077c4:	4bbe      	ldr	r3, [pc, #760]	; (8007ac0 <HAL_RCC_OscConfig+0xc58>)
 80077c6:	6a1b      	ldr	r3, [r3, #32]
 80077c8:	4abd      	ldr	r2, [pc, #756]	; (8007ac0 <HAL_RCC_OscConfig+0xc58>)
 80077ca:	f023 0304 	bic.w	r3, r3, #4
 80077ce:	6213      	str	r3, [r2, #32]
 80077d0:	e020      	b.n	8007814 <HAL_RCC_OscConfig+0x9ac>
 80077d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	2b05      	cmp	r3, #5
 80077e0:	d10c      	bne.n	80077fc <HAL_RCC_OscConfig+0x994>
 80077e2:	4bb7      	ldr	r3, [pc, #732]	; (8007ac0 <HAL_RCC_OscConfig+0xc58>)
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	4ab6      	ldr	r2, [pc, #728]	; (8007ac0 <HAL_RCC_OscConfig+0xc58>)
 80077e8:	f043 0304 	orr.w	r3, r3, #4
 80077ec:	6213      	str	r3, [r2, #32]
 80077ee:	4bb4      	ldr	r3, [pc, #720]	; (8007ac0 <HAL_RCC_OscConfig+0xc58>)
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	4ab3      	ldr	r2, [pc, #716]	; (8007ac0 <HAL_RCC_OscConfig+0xc58>)
 80077f4:	f043 0301 	orr.w	r3, r3, #1
 80077f8:	6213      	str	r3, [r2, #32]
 80077fa:	e00b      	b.n	8007814 <HAL_RCC_OscConfig+0x9ac>
 80077fc:	4bb0      	ldr	r3, [pc, #704]	; (8007ac0 <HAL_RCC_OscConfig+0xc58>)
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	4aaf      	ldr	r2, [pc, #700]	; (8007ac0 <HAL_RCC_OscConfig+0xc58>)
 8007802:	f023 0301 	bic.w	r3, r3, #1
 8007806:	6213      	str	r3, [r2, #32]
 8007808:	4bad      	ldr	r3, [pc, #692]	; (8007ac0 <HAL_RCC_OscConfig+0xc58>)
 800780a:	6a1b      	ldr	r3, [r3, #32]
 800780c:	4aac      	ldr	r2, [pc, #688]	; (8007ac0 <HAL_RCC_OscConfig+0xc58>)
 800780e:	f023 0304 	bic.w	r3, r3, #4
 8007812:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007818:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 8081 	beq.w	8007928 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007826:	f7fb ffeb 	bl	8003800 <HAL_GetTick>
 800782a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800782e:	e00b      	b.n	8007848 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007830:	f7fb ffe6 	bl	8003800 <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007840:	4293      	cmp	r3, r2
 8007842:	d901      	bls.n	8007848 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e345      	b.n	8007ed4 <HAL_RCC_OscConfig+0x106c>
 8007848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800784c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007850:	2202      	movs	r2, #2
 8007852:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007858:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	fa93 f2a3 	rbit	r2, r3
 8007862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007866:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800786a:	601a      	str	r2, [r3, #0]
 800786c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007870:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007874:	2202      	movs	r2, #2
 8007876:	601a      	str	r2, [r3, #0]
 8007878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800787c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	fa93 f2a3 	rbit	r2, r3
 8007886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800788a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800788e:	601a      	str	r2, [r3, #0]
  return result;
 8007890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007894:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007898:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800789a:	fab3 f383 	clz	r3, r3
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	095b      	lsrs	r3, r3, #5
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	f043 0302 	orr.w	r3, r3, #2
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d102      	bne.n	80078b4 <HAL_RCC_OscConfig+0xa4c>
 80078ae:	4b84      	ldr	r3, [pc, #528]	; (8007ac0 <HAL_RCC_OscConfig+0xc58>)
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	e013      	b.n	80078dc <HAL_RCC_OscConfig+0xa74>
 80078b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80078bc:	2202      	movs	r2, #2
 80078be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078c4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	fa93 f2a3 	rbit	r2, r3
 80078ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078d2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	4b79      	ldr	r3, [pc, #484]	; (8007ac0 <HAL_RCC_OscConfig+0xc58>)
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078e0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80078e4:	2102      	movs	r1, #2
 80078e6:	6011      	str	r1, [r2, #0]
 80078e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078ec:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80078f0:	6812      	ldr	r2, [r2, #0]
 80078f2:	fa92 f1a2 	rbit	r1, r2
 80078f6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078fa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80078fe:	6011      	str	r1, [r2, #0]
  return result;
 8007900:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007904:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007908:	6812      	ldr	r2, [r2, #0]
 800790a:	fab2 f282 	clz	r2, r2
 800790e:	b2d2      	uxtb	r2, r2
 8007910:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007914:	b2d2      	uxtb	r2, r2
 8007916:	f002 021f 	and.w	r2, r2, #31
 800791a:	2101      	movs	r1, #1
 800791c:	fa01 f202 	lsl.w	r2, r1, r2
 8007920:	4013      	ands	r3, r2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d084      	beq.n	8007830 <HAL_RCC_OscConfig+0x9c8>
 8007926:	e07f      	b.n	8007a28 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007928:	f7fb ff6a 	bl	8003800 <HAL_GetTick>
 800792c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007930:	e00b      	b.n	800794a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007932:	f7fb ff65 	bl	8003800 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007942:	4293      	cmp	r3, r2
 8007944:	d901      	bls.n	800794a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e2c4      	b.n	8007ed4 <HAL_RCC_OscConfig+0x106c>
 800794a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800794e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007952:	2202      	movs	r2, #2
 8007954:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800795a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	fa93 f2a3 	rbit	r2, r3
 8007964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007968:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007972:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007976:	2202      	movs	r2, #2
 8007978:	601a      	str	r2, [r3, #0]
 800797a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800797e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	fa93 f2a3 	rbit	r2, r3
 8007988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800798c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007990:	601a      	str	r2, [r3, #0]
  return result;
 8007992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007996:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800799a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800799c:	fab3 f383 	clz	r3, r3
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	095b      	lsrs	r3, r3, #5
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	f043 0302 	orr.w	r3, r3, #2
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d102      	bne.n	80079b6 <HAL_RCC_OscConfig+0xb4e>
 80079b0:	4b43      	ldr	r3, [pc, #268]	; (8007ac0 <HAL_RCC_OscConfig+0xc58>)
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	e013      	b.n	80079de <HAL_RCC_OscConfig+0xb76>
 80079b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079ba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80079be:	2202      	movs	r2, #2
 80079c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079c6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	fa93 f2a3 	rbit	r2, r3
 80079d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079d4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80079d8:	601a      	str	r2, [r3, #0]
 80079da:	4b39      	ldr	r3, [pc, #228]	; (8007ac0 <HAL_RCC_OscConfig+0xc58>)
 80079dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80079e2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80079e6:	2102      	movs	r1, #2
 80079e8:	6011      	str	r1, [r2, #0]
 80079ea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80079ee:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80079f2:	6812      	ldr	r2, [r2, #0]
 80079f4:	fa92 f1a2 	rbit	r1, r2
 80079f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80079fc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007a00:	6011      	str	r1, [r2, #0]
  return result;
 8007a02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007a06:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007a0a:	6812      	ldr	r2, [r2, #0]
 8007a0c:	fab2 f282 	clz	r2, r2
 8007a10:	b2d2      	uxtb	r2, r2
 8007a12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a16:	b2d2      	uxtb	r2, r2
 8007a18:	f002 021f 	and.w	r2, r2, #31
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8007a22:	4013      	ands	r3, r2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d184      	bne.n	8007932 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007a28:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d105      	bne.n	8007a3c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a30:	4b23      	ldr	r3, [pc, #140]	; (8007ac0 <HAL_RCC_OscConfig+0xc58>)
 8007a32:	69db      	ldr	r3, [r3, #28]
 8007a34:	4a22      	ldr	r2, [pc, #136]	; (8007ac0 <HAL_RCC_OscConfig+0xc58>)
 8007a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a3a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a40:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	69db      	ldr	r3, [r3, #28]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 8242 	beq.w	8007ed2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a4e:	4b1c      	ldr	r3, [pc, #112]	; (8007ac0 <HAL_RCC_OscConfig+0xc58>)
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	f003 030c 	and.w	r3, r3, #12
 8007a56:	2b08      	cmp	r3, #8
 8007a58:	f000 8213 	beq.w	8007e82 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	f040 8162 	bne.w	8007d32 <HAL_RCC_OscConfig+0xeca>
 8007a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a72:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007a76:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a80:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	fa93 f2a3 	rbit	r2, r3
 8007a8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a8e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007a92:	601a      	str	r2, [r3, #0]
  return result;
 8007a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a98:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007a9c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a9e:	fab3 f383 	clz	r3, r3
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007aa8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	461a      	mov	r2, r3
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ab4:	f7fb fea4 	bl	8003800 <HAL_GetTick>
 8007ab8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007abc:	e00c      	b.n	8007ad8 <HAL_RCC_OscConfig+0xc70>
 8007abe:	bf00      	nop
 8007ac0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ac4:	f7fb fe9c 	bl	8003800 <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d901      	bls.n	8007ad8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e1fd      	b.n	8007ed4 <HAL_RCC_OscConfig+0x106c>
 8007ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007adc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007ae0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ae4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aea:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	fa93 f2a3 	rbit	r2, r3
 8007af4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007af8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007afc:	601a      	str	r2, [r3, #0]
  return result;
 8007afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b02:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007b06:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007b08:	fab3 f383 	clz	r3, r3
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	095b      	lsrs	r3, r3, #5
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	f043 0301 	orr.w	r3, r3, #1
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d102      	bne.n	8007b22 <HAL_RCC_OscConfig+0xcba>
 8007b1c:	4bb0      	ldr	r3, [pc, #704]	; (8007de0 <HAL_RCC_OscConfig+0xf78>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	e027      	b.n	8007b72 <HAL_RCC_OscConfig+0xd0a>
 8007b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b26:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007b2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007b2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b34:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	fa93 f2a3 	rbit	r2, r3
 8007b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b42:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007b46:	601a      	str	r2, [r3, #0]
 8007b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b4c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007b50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007b54:	601a      	str	r2, [r3, #0]
 8007b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b5a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	fa93 f2a3 	rbit	r2, r3
 8007b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b68:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	4b9c      	ldr	r3, [pc, #624]	; (8007de0 <HAL_RCC_OscConfig+0xf78>)
 8007b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007b76:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007b7a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007b7e:	6011      	str	r1, [r2, #0]
 8007b80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007b84:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007b88:	6812      	ldr	r2, [r2, #0]
 8007b8a:	fa92 f1a2 	rbit	r1, r2
 8007b8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007b92:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007b96:	6011      	str	r1, [r2, #0]
  return result;
 8007b98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007b9c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007ba0:	6812      	ldr	r2, [r2, #0]
 8007ba2:	fab2 f282 	clz	r2, r2
 8007ba6:	b2d2      	uxtb	r2, r2
 8007ba8:	f042 0220 	orr.w	r2, r2, #32
 8007bac:	b2d2      	uxtb	r2, r2
 8007bae:	f002 021f 	and.w	r2, r2, #31
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8007bb8:	4013      	ands	r3, r2
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d182      	bne.n	8007ac4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007bbe:	4b88      	ldr	r3, [pc, #544]	; (8007de0 <HAL_RCC_OscConfig+0xf78>)
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007bc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	430b      	orrs	r3, r1
 8007be0:	497f      	ldr	r1, [pc, #508]	; (8007de0 <HAL_RCC_OscConfig+0xf78>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	604b      	str	r3, [r1, #4]
 8007be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bea:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007bee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007bf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bf8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	fa93 f2a3 	rbit	r2, r3
 8007c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c06:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007c0a:	601a      	str	r2, [r3, #0]
  return result;
 8007c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c10:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007c14:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c16:	fab3 f383 	clz	r3, r3
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007c20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	461a      	mov	r2, r3
 8007c28:	2301      	movs	r3, #1
 8007c2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c2c:	f7fb fde8 	bl	8003800 <HAL_GetTick>
 8007c30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007c34:	e009      	b.n	8007c4a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c36:	f7fb fde3 	bl	8003800 <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d901      	bls.n	8007c4a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e144      	b.n	8007ed4 <HAL_RCC_OscConfig+0x106c>
 8007c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c4e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007c52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007c56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c5c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	fa93 f2a3 	rbit	r2, r3
 8007c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c6a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007c6e:	601a      	str	r2, [r3, #0]
  return result;
 8007c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c74:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007c78:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007c7a:	fab3 f383 	clz	r3, r3
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	095b      	lsrs	r3, r3, #5
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	f043 0301 	orr.w	r3, r3, #1
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d102      	bne.n	8007c94 <HAL_RCC_OscConfig+0xe2c>
 8007c8e:	4b54      	ldr	r3, [pc, #336]	; (8007de0 <HAL_RCC_OscConfig+0xf78>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	e027      	b.n	8007ce4 <HAL_RCC_OscConfig+0xe7c>
 8007c94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c98:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007c9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ca0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ca6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	fa93 f2a3 	rbit	r2, r3
 8007cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cb4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cbe:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007cc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ccc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	fa93 f2a3 	rbit	r2, r3
 8007cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cda:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007cde:	601a      	str	r2, [r3, #0]
 8007ce0:	4b3f      	ldr	r3, [pc, #252]	; (8007de0 <HAL_RCC_OscConfig+0xf78>)
 8007ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ce8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007cec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007cf0:	6011      	str	r1, [r2, #0]
 8007cf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007cf6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007cfa:	6812      	ldr	r2, [r2, #0]
 8007cfc:	fa92 f1a2 	rbit	r1, r2
 8007d00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d04:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007d08:	6011      	str	r1, [r2, #0]
  return result;
 8007d0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d0e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007d12:	6812      	ldr	r2, [r2, #0]
 8007d14:	fab2 f282 	clz	r2, r2
 8007d18:	b2d2      	uxtb	r2, r2
 8007d1a:	f042 0220 	orr.w	r2, r2, #32
 8007d1e:	b2d2      	uxtb	r2, r2
 8007d20:	f002 021f 	and.w	r2, r2, #31
 8007d24:	2101      	movs	r1, #1
 8007d26:	fa01 f202 	lsl.w	r2, r1, r2
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d082      	beq.n	8007c36 <HAL_RCC_OscConfig+0xdce>
 8007d30:	e0cf      	b.n	8007ed2 <HAL_RCC_OscConfig+0x106a>
 8007d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d36:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007d3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d44:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	fa93 f2a3 	rbit	r2, r3
 8007d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d52:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007d56:	601a      	str	r2, [r3, #0]
  return result;
 8007d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d5c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007d60:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d62:	fab3 f383 	clz	r3, r3
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007d6c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	461a      	mov	r2, r3
 8007d74:	2300      	movs	r3, #0
 8007d76:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d78:	f7fb fd42 	bl	8003800 <HAL_GetTick>
 8007d7c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d80:	e009      	b.n	8007d96 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d82:	f7fb fd3d 	bl	8003800 <HAL_GetTick>
 8007d86:	4602      	mov	r2, r0
 8007d88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d901      	bls.n	8007d96 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e09e      	b.n	8007ed4 <HAL_RCC_OscConfig+0x106c>
 8007d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d9a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007d9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007da2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007da8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	fa93 f2a3 	rbit	r2, r3
 8007db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007db6:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007dba:	601a      	str	r2, [r3, #0]
  return result;
 8007dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dc0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007dc4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007dc6:	fab3 f383 	clz	r3, r3
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	095b      	lsrs	r3, r3, #5
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	f043 0301 	orr.w	r3, r3, #1
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d104      	bne.n	8007de4 <HAL_RCC_OscConfig+0xf7c>
 8007dda:	4b01      	ldr	r3, [pc, #4]	; (8007de0 <HAL_RCC_OscConfig+0xf78>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	e029      	b.n	8007e34 <HAL_RCC_OscConfig+0xfcc>
 8007de0:	40021000 	.word	0x40021000
 8007de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007de8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007dec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007df0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007df6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	fa93 f2a3 	rbit	r2, r3
 8007e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e04:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e0e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007e12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e16:	601a      	str	r2, [r3, #0]
 8007e18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e1c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	fa93 f2a3 	rbit	r2, r3
 8007e26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e2a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	4b2b      	ldr	r3, [pc, #172]	; (8007ee0 <HAL_RCC_OscConfig+0x1078>)
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e38:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007e3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007e40:	6011      	str	r1, [r2, #0]
 8007e42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e46:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007e4a:	6812      	ldr	r2, [r2, #0]
 8007e4c:	fa92 f1a2 	rbit	r1, r2
 8007e50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e54:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007e58:	6011      	str	r1, [r2, #0]
  return result;
 8007e5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e5e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007e62:	6812      	ldr	r2, [r2, #0]
 8007e64:	fab2 f282 	clz	r2, r2
 8007e68:	b2d2      	uxtb	r2, r2
 8007e6a:	f042 0220 	orr.w	r2, r2, #32
 8007e6e:	b2d2      	uxtb	r2, r2
 8007e70:	f002 021f 	and.w	r2, r2, #31
 8007e74:	2101      	movs	r1, #1
 8007e76:	fa01 f202 	lsl.w	r2, r1, r2
 8007e7a:	4013      	ands	r3, r2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d180      	bne.n	8007d82 <HAL_RCC_OscConfig+0xf1a>
 8007e80:	e027      	b.n	8007ed2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d101      	bne.n	8007e96 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e01e      	b.n	8007ed4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007e96:	4b12      	ldr	r3, [pc, #72]	; (8007ee0 <HAL_RCC_OscConfig+0x1078>)
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007e9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007ea2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007ea6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007eaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d10b      	bne.n	8007ece <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8007eb6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007eba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007ebe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ec2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d001      	beq.n	8007ed2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e000      	b.n	8007ed4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	40021000 	.word	0x40021000

08007ee4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b09e      	sub	sp, #120	; 0x78
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d101      	bne.n	8007efc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e162      	b.n	80081c2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007efc:	4b90      	ldr	r3, [pc, #576]	; (8008140 <HAL_RCC_ClockConfig+0x25c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0307 	and.w	r3, r3, #7
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d910      	bls.n	8007f2c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f0a:	4b8d      	ldr	r3, [pc, #564]	; (8008140 <HAL_RCC_ClockConfig+0x25c>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f023 0207 	bic.w	r2, r3, #7
 8007f12:	498b      	ldr	r1, [pc, #556]	; (8008140 <HAL_RCC_ClockConfig+0x25c>)
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f1a:	4b89      	ldr	r3, [pc, #548]	; (8008140 <HAL_RCC_ClockConfig+0x25c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0307 	and.w	r3, r3, #7
 8007f22:	683a      	ldr	r2, [r7, #0]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d001      	beq.n	8007f2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	e14a      	b.n	80081c2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 0302 	and.w	r3, r3, #2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d008      	beq.n	8007f4a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f38:	4b82      	ldr	r3, [pc, #520]	; (8008144 <HAL_RCC_ClockConfig+0x260>)
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	497f      	ldr	r1, [pc, #508]	; (8008144 <HAL_RCC_ClockConfig+0x260>)
 8007f46:	4313      	orrs	r3, r2
 8007f48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 80dc 	beq.w	8008110 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d13c      	bne.n	8007fda <HAL_RCC_ClockConfig+0xf6>
 8007f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f64:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f68:	fa93 f3a3 	rbit	r3, r3
 8007f6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f70:	fab3 f383 	clz	r3, r3
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	095b      	lsrs	r3, r3, #5
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	f043 0301 	orr.w	r3, r3, #1
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d102      	bne.n	8007f8a <HAL_RCC_ClockConfig+0xa6>
 8007f84:	4b6f      	ldr	r3, [pc, #444]	; (8008144 <HAL_RCC_ClockConfig+0x260>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	e00f      	b.n	8007faa <HAL_RCC_ClockConfig+0xc6>
 8007f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f92:	fa93 f3a3 	rbit	r3, r3
 8007f96:	667b      	str	r3, [r7, #100]	; 0x64
 8007f98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8007f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fa0:	fa93 f3a3 	rbit	r3, r3
 8007fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fa6:	4b67      	ldr	r3, [pc, #412]	; (8008144 <HAL_RCC_ClockConfig+0x260>)
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007faa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007fae:	65ba      	str	r2, [r7, #88]	; 0x58
 8007fb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fb2:	fa92 f2a2 	rbit	r2, r2
 8007fb6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007fb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007fba:	fab2 f282 	clz	r2, r2
 8007fbe:	b2d2      	uxtb	r2, r2
 8007fc0:	f042 0220 	orr.w	r2, r2, #32
 8007fc4:	b2d2      	uxtb	r2, r2
 8007fc6:	f002 021f 	and.w	r2, r2, #31
 8007fca:	2101      	movs	r1, #1
 8007fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d17b      	bne.n	80080ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e0f3      	b.n	80081c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d13c      	bne.n	800805c <HAL_RCC_ClockConfig+0x178>
 8007fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fe6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fea:	fa93 f3a3 	rbit	r3, r3
 8007fee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ff2:	fab3 f383 	clz	r3, r3
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	095b      	lsrs	r3, r3, #5
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	f043 0301 	orr.w	r3, r3, #1
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b01      	cmp	r3, #1
 8008004:	d102      	bne.n	800800c <HAL_RCC_ClockConfig+0x128>
 8008006:	4b4f      	ldr	r3, [pc, #316]	; (8008144 <HAL_RCC_ClockConfig+0x260>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	e00f      	b.n	800802c <HAL_RCC_ClockConfig+0x148>
 800800c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008010:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008014:	fa93 f3a3 	rbit	r3, r3
 8008018:	647b      	str	r3, [r7, #68]	; 0x44
 800801a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800801e:	643b      	str	r3, [r7, #64]	; 0x40
 8008020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008022:	fa93 f3a3 	rbit	r3, r3
 8008026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008028:	4b46      	ldr	r3, [pc, #280]	; (8008144 <HAL_RCC_ClockConfig+0x260>)
 800802a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008030:	63ba      	str	r2, [r7, #56]	; 0x38
 8008032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008034:	fa92 f2a2 	rbit	r2, r2
 8008038:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800803a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800803c:	fab2 f282 	clz	r2, r2
 8008040:	b2d2      	uxtb	r2, r2
 8008042:	f042 0220 	orr.w	r2, r2, #32
 8008046:	b2d2      	uxtb	r2, r2
 8008048:	f002 021f 	and.w	r2, r2, #31
 800804c:	2101      	movs	r1, #1
 800804e:	fa01 f202 	lsl.w	r2, r1, r2
 8008052:	4013      	ands	r3, r2
 8008054:	2b00      	cmp	r3, #0
 8008056:	d13a      	bne.n	80080ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e0b2      	b.n	80081c2 <HAL_RCC_ClockConfig+0x2de>
 800805c:	2302      	movs	r3, #2
 800805e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008062:	fa93 f3a3 	rbit	r3, r3
 8008066:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800806a:	fab3 f383 	clz	r3, r3
 800806e:	b2db      	uxtb	r3, r3
 8008070:	095b      	lsrs	r3, r3, #5
 8008072:	b2db      	uxtb	r3, r3
 8008074:	f043 0301 	orr.w	r3, r3, #1
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b01      	cmp	r3, #1
 800807c:	d102      	bne.n	8008084 <HAL_RCC_ClockConfig+0x1a0>
 800807e:	4b31      	ldr	r3, [pc, #196]	; (8008144 <HAL_RCC_ClockConfig+0x260>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	e00d      	b.n	80080a0 <HAL_RCC_ClockConfig+0x1bc>
 8008084:	2302      	movs	r3, #2
 8008086:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	fa93 f3a3 	rbit	r3, r3
 800808e:	627b      	str	r3, [r7, #36]	; 0x24
 8008090:	2302      	movs	r3, #2
 8008092:	623b      	str	r3, [r7, #32]
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	fa93 f3a3 	rbit	r3, r3
 800809a:	61fb      	str	r3, [r7, #28]
 800809c:	4b29      	ldr	r3, [pc, #164]	; (8008144 <HAL_RCC_ClockConfig+0x260>)
 800809e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a0:	2202      	movs	r2, #2
 80080a2:	61ba      	str	r2, [r7, #24]
 80080a4:	69ba      	ldr	r2, [r7, #24]
 80080a6:	fa92 f2a2 	rbit	r2, r2
 80080aa:	617a      	str	r2, [r7, #20]
  return result;
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	fab2 f282 	clz	r2, r2
 80080b2:	b2d2      	uxtb	r2, r2
 80080b4:	f042 0220 	orr.w	r2, r2, #32
 80080b8:	b2d2      	uxtb	r2, r2
 80080ba:	f002 021f 	and.w	r2, r2, #31
 80080be:	2101      	movs	r1, #1
 80080c0:	fa01 f202 	lsl.w	r2, r1, r2
 80080c4:	4013      	ands	r3, r2
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d101      	bne.n	80080ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e079      	b.n	80081c2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080ce:	4b1d      	ldr	r3, [pc, #116]	; (8008144 <HAL_RCC_ClockConfig+0x260>)
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f023 0203 	bic.w	r2, r3, #3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	491a      	ldr	r1, [pc, #104]	; (8008144 <HAL_RCC_ClockConfig+0x260>)
 80080dc:	4313      	orrs	r3, r2
 80080de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080e0:	f7fb fb8e 	bl	8003800 <HAL_GetTick>
 80080e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080e6:	e00a      	b.n	80080fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080e8:	f7fb fb8a 	bl	8003800 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d901      	bls.n	80080fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e061      	b.n	80081c2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080fe:	4b11      	ldr	r3, [pc, #68]	; (8008144 <HAL_RCC_ClockConfig+0x260>)
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	f003 020c 	and.w	r2, r3, #12
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	429a      	cmp	r2, r3
 800810e:	d1eb      	bne.n	80080e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008110:	4b0b      	ldr	r3, [pc, #44]	; (8008140 <HAL_RCC_ClockConfig+0x25c>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0307 	and.w	r3, r3, #7
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	429a      	cmp	r2, r3
 800811c:	d214      	bcs.n	8008148 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800811e:	4b08      	ldr	r3, [pc, #32]	; (8008140 <HAL_RCC_ClockConfig+0x25c>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f023 0207 	bic.w	r2, r3, #7
 8008126:	4906      	ldr	r1, [pc, #24]	; (8008140 <HAL_RCC_ClockConfig+0x25c>)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	4313      	orrs	r3, r2
 800812c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800812e:	4b04      	ldr	r3, [pc, #16]	; (8008140 <HAL_RCC_ClockConfig+0x25c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0307 	and.w	r3, r3, #7
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	429a      	cmp	r2, r3
 800813a:	d005      	beq.n	8008148 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800813c:	2301      	movs	r3, #1
 800813e:	e040      	b.n	80081c2 <HAL_RCC_ClockConfig+0x2de>
 8008140:	40022000 	.word	0x40022000
 8008144:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 0304 	and.w	r3, r3, #4
 8008150:	2b00      	cmp	r3, #0
 8008152:	d008      	beq.n	8008166 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008154:	4b1d      	ldr	r3, [pc, #116]	; (80081cc <HAL_RCC_ClockConfig+0x2e8>)
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	491a      	ldr	r1, [pc, #104]	; (80081cc <HAL_RCC_ClockConfig+0x2e8>)
 8008162:	4313      	orrs	r3, r2
 8008164:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0308 	and.w	r3, r3, #8
 800816e:	2b00      	cmp	r3, #0
 8008170:	d009      	beq.n	8008186 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008172:	4b16      	ldr	r3, [pc, #88]	; (80081cc <HAL_RCC_ClockConfig+0x2e8>)
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	00db      	lsls	r3, r3, #3
 8008180:	4912      	ldr	r1, [pc, #72]	; (80081cc <HAL_RCC_ClockConfig+0x2e8>)
 8008182:	4313      	orrs	r3, r2
 8008184:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008186:	f000 f829 	bl	80081dc <HAL_RCC_GetSysClockFreq>
 800818a:	4601      	mov	r1, r0
 800818c:	4b0f      	ldr	r3, [pc, #60]	; (80081cc <HAL_RCC_ClockConfig+0x2e8>)
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008194:	22f0      	movs	r2, #240	; 0xf0
 8008196:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	fa92 f2a2 	rbit	r2, r2
 800819e:	60fa      	str	r2, [r7, #12]
  return result;
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	fab2 f282 	clz	r2, r2
 80081a6:	b2d2      	uxtb	r2, r2
 80081a8:	40d3      	lsrs	r3, r2
 80081aa:	4a09      	ldr	r2, [pc, #36]	; (80081d0 <HAL_RCC_ClockConfig+0x2ec>)
 80081ac:	5cd3      	ldrb	r3, [r2, r3]
 80081ae:	fa21 f303 	lsr.w	r3, r1, r3
 80081b2:	4a08      	ldr	r2, [pc, #32]	; (80081d4 <HAL_RCC_ClockConfig+0x2f0>)
 80081b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80081b6:	4b08      	ldr	r3, [pc, #32]	; (80081d8 <HAL_RCC_ClockConfig+0x2f4>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4618      	mov	r0, r3
 80081bc:	f7fb fadc 	bl	8003778 <HAL_InitTick>
  
  return HAL_OK;
 80081c0:	2300      	movs	r3, #0
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3778      	adds	r7, #120	; 0x78
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	40021000 	.word	0x40021000
 80081d0:	0800e4d0 	.word	0x0800e4d0
 80081d4:	20000088 	.word	0x20000088
 80081d8:	2000008c 	.word	0x2000008c

080081dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081dc:	b480      	push	{r7}
 80081de:	b08b      	sub	sp, #44	; 0x2c
 80081e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	61fb      	str	r3, [r7, #28]
 80081e6:	2300      	movs	r3, #0
 80081e8:	61bb      	str	r3, [r7, #24]
 80081ea:	2300      	movs	r3, #0
 80081ec:	627b      	str	r3, [r7, #36]	; 0x24
 80081ee:	2300      	movs	r3, #0
 80081f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80081f6:	4b29      	ldr	r3, [pc, #164]	; (800829c <HAL_RCC_GetSysClockFreq+0xc0>)
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	f003 030c 	and.w	r3, r3, #12
 8008202:	2b04      	cmp	r3, #4
 8008204:	d002      	beq.n	800820c <HAL_RCC_GetSysClockFreq+0x30>
 8008206:	2b08      	cmp	r3, #8
 8008208:	d003      	beq.n	8008212 <HAL_RCC_GetSysClockFreq+0x36>
 800820a:	e03c      	b.n	8008286 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800820c:	4b24      	ldr	r3, [pc, #144]	; (80082a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800820e:	623b      	str	r3, [r7, #32]
      break;
 8008210:	e03c      	b.n	800828c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008218:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800821c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	fa92 f2a2 	rbit	r2, r2
 8008224:	607a      	str	r2, [r7, #4]
  return result;
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	fab2 f282 	clz	r2, r2
 800822c:	b2d2      	uxtb	r2, r2
 800822e:	40d3      	lsrs	r3, r2
 8008230:	4a1c      	ldr	r2, [pc, #112]	; (80082a4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008232:	5cd3      	ldrb	r3, [r2, r3]
 8008234:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008236:	4b19      	ldr	r3, [pc, #100]	; (800829c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823a:	f003 030f 	and.w	r3, r3, #15
 800823e:	220f      	movs	r2, #15
 8008240:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	fa92 f2a2 	rbit	r2, r2
 8008248:	60fa      	str	r2, [r7, #12]
  return result;
 800824a:	68fa      	ldr	r2, [r7, #12]
 800824c:	fab2 f282 	clz	r2, r2
 8008250:	b2d2      	uxtb	r2, r2
 8008252:	40d3      	lsrs	r3, r2
 8008254:	4a14      	ldr	r2, [pc, #80]	; (80082a8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008256:	5cd3      	ldrb	r3, [r2, r3]
 8008258:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d008      	beq.n	8008276 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008264:	4a0e      	ldr	r2, [pc, #56]	; (80082a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	fbb2 f2f3 	udiv	r2, r2, r3
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	fb02 f303 	mul.w	r3, r2, r3
 8008272:	627b      	str	r3, [r7, #36]	; 0x24
 8008274:	e004      	b.n	8008280 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	4a0c      	ldr	r2, [pc, #48]	; (80082ac <HAL_RCC_GetSysClockFreq+0xd0>)
 800827a:	fb02 f303 	mul.w	r3, r2, r3
 800827e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	623b      	str	r3, [r7, #32]
      break;
 8008284:	e002      	b.n	800828c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008286:	4b06      	ldr	r3, [pc, #24]	; (80082a0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008288:	623b      	str	r3, [r7, #32]
      break;
 800828a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800828c:	6a3b      	ldr	r3, [r7, #32]
}
 800828e:	4618      	mov	r0, r3
 8008290:	372c      	adds	r7, #44	; 0x2c
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	40021000 	.word	0x40021000
 80082a0:	007a1200 	.word	0x007a1200
 80082a4:	0800e4e8 	.word	0x0800e4e8
 80082a8:	0800e4f8 	.word	0x0800e4f8
 80082ac:	003d0900 	.word	0x003d0900

080082b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082b0:	b480      	push	{r7}
 80082b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082b4:	4b03      	ldr	r3, [pc, #12]	; (80082c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80082b6:	681b      	ldr	r3, [r3, #0]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	20000088 	.word	0x20000088

080082c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80082ce:	f7ff ffef 	bl	80082b0 <HAL_RCC_GetHCLKFreq>
 80082d2:	4601      	mov	r1, r0
 80082d4:	4b0b      	ldr	r3, [pc, #44]	; (8008304 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80082e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	fa92 f2a2 	rbit	r2, r2
 80082e8:	603a      	str	r2, [r7, #0]
  return result;
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	fab2 f282 	clz	r2, r2
 80082f0:	b2d2      	uxtb	r2, r2
 80082f2:	40d3      	lsrs	r3, r2
 80082f4:	4a04      	ldr	r2, [pc, #16]	; (8008308 <HAL_RCC_GetPCLK1Freq+0x40>)
 80082f6:	5cd3      	ldrb	r3, [r2, r3]
 80082f8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80082fc:	4618      	mov	r0, r3
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	40021000 	.word	0x40021000
 8008308:	0800e4e0 	.word	0x0800e4e0

0800830c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8008312:	f7ff ffcd 	bl	80082b0 <HAL_RCC_GetHCLKFreq>
 8008316:	4601      	mov	r1, r0
 8008318:	4b0b      	ldr	r3, [pc, #44]	; (8008348 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8008320:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008324:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	fa92 f2a2 	rbit	r2, r2
 800832c:	603a      	str	r2, [r7, #0]
  return result;
 800832e:	683a      	ldr	r2, [r7, #0]
 8008330:	fab2 f282 	clz	r2, r2
 8008334:	b2d2      	uxtb	r2, r2
 8008336:	40d3      	lsrs	r3, r2
 8008338:	4a04      	ldr	r2, [pc, #16]	; (800834c <HAL_RCC_GetPCLK2Freq+0x40>)
 800833a:	5cd3      	ldrb	r3, [r2, r3]
 800833c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008340:	4618      	mov	r0, r3
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	40021000 	.word	0x40021000
 800834c:	0800e4e0 	.word	0x0800e4e0

08008350 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b092      	sub	sp, #72	; 0x48
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800835c:	2300      	movs	r3, #0
 800835e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008360:	2300      	movs	r3, #0
 8008362:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 80cd 	beq.w	800850e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008374:	4b8e      	ldr	r3, [pc, #568]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10e      	bne.n	800839e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008380:	4b8b      	ldr	r3, [pc, #556]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008382:	69db      	ldr	r3, [r3, #28]
 8008384:	4a8a      	ldr	r2, [pc, #552]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800838a:	61d3      	str	r3, [r2, #28]
 800838c:	4b88      	ldr	r3, [pc, #544]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800838e:	69db      	ldr	r3, [r3, #28]
 8008390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008394:	60bb      	str	r3, [r7, #8]
 8008396:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008398:	2301      	movs	r3, #1
 800839a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800839e:	4b85      	ldr	r3, [pc, #532]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d118      	bne.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80083aa:	4b82      	ldr	r3, [pc, #520]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a81      	ldr	r2, [pc, #516]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80083b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083b4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083b6:	f7fb fa23 	bl	8003800 <HAL_GetTick>
 80083ba:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083bc:	e008      	b.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083be:	f7fb fa1f 	bl	8003800 <HAL_GetTick>
 80083c2:	4602      	mov	r2, r0
 80083c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083c6:	1ad3      	subs	r3, r2, r3
 80083c8:	2b64      	cmp	r3, #100	; 0x64
 80083ca:	d901      	bls.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e0ea      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083d0:	4b78      	ldr	r3, [pc, #480]	; (80085b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d0f0      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083dc:	4b74      	ldr	r3, [pc, #464]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083de:	6a1b      	ldr	r3, [r3, #32]
 80083e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d07d      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d076      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083fa:	4b6d      	ldr	r3, [pc, #436]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008408:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840c:	fa93 f3a3 	rbit	r3, r3
 8008410:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008414:	fab3 f383 	clz	r3, r3
 8008418:	b2db      	uxtb	r3, r3
 800841a:	461a      	mov	r2, r3
 800841c:	4b66      	ldr	r3, [pc, #408]	; (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800841e:	4413      	add	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	461a      	mov	r2, r3
 8008424:	2301      	movs	r3, #1
 8008426:	6013      	str	r3, [r2, #0]
 8008428:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800842c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800842e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008430:	fa93 f3a3 	rbit	r3, r3
 8008434:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008438:	fab3 f383 	clz	r3, r3
 800843c:	b2db      	uxtb	r3, r3
 800843e:	461a      	mov	r2, r3
 8008440:	4b5d      	ldr	r3, [pc, #372]	; (80085b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008442:	4413      	add	r3, r2
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	461a      	mov	r2, r3
 8008448:	2300      	movs	r3, #0
 800844a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800844c:	4a58      	ldr	r2, [pc, #352]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800844e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008450:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008454:	f003 0301 	and.w	r3, r3, #1
 8008458:	2b00      	cmp	r3, #0
 800845a:	d045      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800845c:	f7fb f9d0 	bl	8003800 <HAL_GetTick>
 8008460:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008462:	e00a      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008464:	f7fb f9cc 	bl	8003800 <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008472:	4293      	cmp	r3, r2
 8008474:	d901      	bls.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e095      	b.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800847a:	2302      	movs	r3, #2
 800847c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800847e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008480:	fa93 f3a3 	rbit	r3, r3
 8008484:	627b      	str	r3, [r7, #36]	; 0x24
 8008486:	2302      	movs	r3, #2
 8008488:	623b      	str	r3, [r7, #32]
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	fa93 f3a3 	rbit	r3, r3
 8008490:	61fb      	str	r3, [r7, #28]
  return result;
 8008492:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008494:	fab3 f383 	clz	r3, r3
 8008498:	b2db      	uxtb	r3, r3
 800849a:	095b      	lsrs	r3, r3, #5
 800849c:	b2db      	uxtb	r3, r3
 800849e:	f043 0302 	orr.w	r3, r3, #2
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d102      	bne.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80084a8:	4b41      	ldr	r3, [pc, #260]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084aa:	6a1b      	ldr	r3, [r3, #32]
 80084ac:	e007      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80084ae:	2302      	movs	r3, #2
 80084b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	fa93 f3a3 	rbit	r3, r3
 80084b8:	617b      	str	r3, [r7, #20]
 80084ba:	4b3d      	ldr	r3, [pc, #244]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084be:	2202      	movs	r2, #2
 80084c0:	613a      	str	r2, [r7, #16]
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	fa92 f2a2 	rbit	r2, r2
 80084c8:	60fa      	str	r2, [r7, #12]
  return result;
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	fab2 f282 	clz	r2, r2
 80084d0:	b2d2      	uxtb	r2, r2
 80084d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084d6:	b2d2      	uxtb	r2, r2
 80084d8:	f002 021f 	and.w	r2, r2, #31
 80084dc:	2101      	movs	r1, #1
 80084de:	fa01 f202 	lsl.w	r2, r1, r2
 80084e2:	4013      	ands	r3, r2
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d0bd      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80084e8:	4b31      	ldr	r3, [pc, #196]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084ea:	6a1b      	ldr	r3, [r3, #32]
 80084ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	492e      	ldr	r1, [pc, #184]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80084fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d105      	bne.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008502:	4b2b      	ldr	r3, [pc, #172]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	4a2a      	ldr	r2, [pc, #168]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800850c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	2b00      	cmp	r3, #0
 8008518:	d008      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800851a:	4b25      	ldr	r3, [pc, #148]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800851c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851e:	f023 0203 	bic.w	r2, r3, #3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	4922      	ldr	r1, [pc, #136]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008528:	4313      	orrs	r3, r2
 800852a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0320 	and.w	r3, r3, #32
 8008534:	2b00      	cmp	r3, #0
 8008536:	d008      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008538:	4b1d      	ldr	r3, [pc, #116]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800853a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853c:	f023 0210 	bic.w	r2, r3, #16
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	491a      	ldr	r1, [pc, #104]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008546:	4313      	orrs	r3, r2
 8008548:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008552:	2b00      	cmp	r3, #0
 8008554:	d008      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008556:	4b16      	ldr	r3, [pc, #88]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	4913      	ldr	r1, [pc, #76]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008564:	4313      	orrs	r3, r2
 8008566:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d008      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008574:	4b0e      	ldr	r3, [pc, #56]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008578:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	695b      	ldr	r3, [r3, #20]
 8008580:	490b      	ldr	r1, [pc, #44]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008582:	4313      	orrs	r3, r2
 8008584:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d008      	beq.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008592:	4b07      	ldr	r3, [pc, #28]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008596:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	4904      	ldr	r1, [pc, #16]	; (80085b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3748      	adds	r7, #72	; 0x48
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	40021000 	.word	0x40021000
 80085b4:	40007000 	.word	0x40007000
 80085b8:	10908100 	.word	0x10908100

080085bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d101      	bne.n	80085ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e049      	b.n	8008662 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d106      	bne.n	80085e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7fa fef8 	bl	80033d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2202      	movs	r2, #2
 80085ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3304      	adds	r3, #4
 80085f8:	4619      	mov	r1, r3
 80085fa:	4610      	mov	r0, r2
 80085fc:	f000 f9da 	bl	80089b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
	...

0800866c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800867a:	b2db      	uxtb	r3, r3
 800867c:	2b01      	cmp	r3, #1
 800867e:	d001      	beq.n	8008684 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e040      	b.n	8008706 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2202      	movs	r2, #2
 8008688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68da      	ldr	r2, [r3, #12]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f042 0201 	orr.w	r2, r2, #1
 800869a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a1c      	ldr	r2, [pc, #112]	; (8008714 <HAL_TIM_Base_Start_IT+0xa8>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d00e      	beq.n	80086c4 <HAL_TIM_Base_Start_IT+0x58>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ae:	d009      	beq.n	80086c4 <HAL_TIM_Base_Start_IT+0x58>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a18      	ldr	r2, [pc, #96]	; (8008718 <HAL_TIM_Base_Start_IT+0xac>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d004      	beq.n	80086c4 <HAL_TIM_Base_Start_IT+0x58>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a17      	ldr	r2, [pc, #92]	; (800871c <HAL_TIM_Base_Start_IT+0xb0>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d115      	bne.n	80086f0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	689a      	ldr	r2, [r3, #8]
 80086ca:	4b15      	ldr	r3, [pc, #84]	; (8008720 <HAL_TIM_Base_Start_IT+0xb4>)
 80086cc:	4013      	ands	r3, r2
 80086ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2b06      	cmp	r3, #6
 80086d4:	d015      	beq.n	8008702 <HAL_TIM_Base_Start_IT+0x96>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086dc:	d011      	beq.n	8008702 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f042 0201 	orr.w	r2, r2, #1
 80086ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ee:	e008      	b.n	8008702 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f042 0201 	orr.w	r2, r2, #1
 80086fe:	601a      	str	r2, [r3, #0]
 8008700:	e000      	b.n	8008704 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008702:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	40012c00 	.word	0x40012c00
 8008718:	40000400 	.word	0x40000400
 800871c:	40014000 	.word	0x40014000
 8008720:	00010007 	.word	0x00010007

08008724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b02      	cmp	r3, #2
 8008738:	d122      	bne.n	8008780 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	f003 0302 	and.w	r3, r3, #2
 8008744:	2b02      	cmp	r3, #2
 8008746:	d11b      	bne.n	8008780 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f06f 0202 	mvn.w	r2, #2
 8008750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2201      	movs	r2, #1
 8008756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	f003 0303 	and.w	r3, r3, #3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f905 	bl	8008976 <HAL_TIM_IC_CaptureCallback>
 800876c:	e005      	b.n	800877a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f000 f8f7 	bl	8008962 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 f908 	bl	800898a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	2b04      	cmp	r3, #4
 800878c:	d122      	bne.n	80087d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	f003 0304 	and.w	r3, r3, #4
 8008798:	2b04      	cmp	r3, #4
 800879a:	d11b      	bne.n	80087d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f06f 0204 	mvn.w	r2, #4
 80087a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2202      	movs	r2, #2
 80087aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	699b      	ldr	r3, [r3, #24]
 80087b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f8db 	bl	8008976 <HAL_TIM_IC_CaptureCallback>
 80087c0:	e005      	b.n	80087ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f8cd 	bl	8008962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f8de 	bl	800898a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	2b08      	cmp	r3, #8
 80087e0:	d122      	bne.n	8008828 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	f003 0308 	and.w	r3, r3, #8
 80087ec:	2b08      	cmp	r3, #8
 80087ee:	d11b      	bne.n	8008828 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f06f 0208 	mvn.w	r2, #8
 80087f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2204      	movs	r2, #4
 80087fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	f003 0303 	and.w	r3, r3, #3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f8b1 	bl	8008976 <HAL_TIM_IC_CaptureCallback>
 8008814:	e005      	b.n	8008822 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f8a3 	bl	8008962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f8b4 	bl	800898a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	f003 0310 	and.w	r3, r3, #16
 8008832:	2b10      	cmp	r3, #16
 8008834:	d122      	bne.n	800887c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	f003 0310 	and.w	r3, r3, #16
 8008840:	2b10      	cmp	r3, #16
 8008842:	d11b      	bne.n	800887c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f06f 0210 	mvn.w	r2, #16
 800884c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2208      	movs	r2, #8
 8008852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800885e:	2b00      	cmp	r3, #0
 8008860:	d003      	beq.n	800886a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 f887 	bl	8008976 <HAL_TIM_IC_CaptureCallback>
 8008868:	e005      	b.n	8008876 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 f879 	bl	8008962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f88a 	bl	800898a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b01      	cmp	r3, #1
 8008888:	d10e      	bne.n	80088a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	f003 0301 	and.w	r3, r3, #1
 8008894:	2b01      	cmp	r3, #1
 8008896:	d107      	bne.n	80088a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f06f 0201 	mvn.w	r2, #1
 80088a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7fa fbe4 	bl	8003070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b2:	2b80      	cmp	r3, #128	; 0x80
 80088b4:	d10e      	bne.n	80088d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088c0:	2b80      	cmp	r3, #128	; 0x80
 80088c2:	d107      	bne.n	80088d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f960 	bl	8008b94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088e2:	d10e      	bne.n	8008902 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ee:	2b80      	cmp	r3, #128	; 0x80
 80088f0:	d107      	bne.n	8008902 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80088fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f953 	bl	8008ba8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890c:	2b40      	cmp	r3, #64	; 0x40
 800890e:	d10e      	bne.n	800892e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891a:	2b40      	cmp	r3, #64	; 0x40
 800891c:	d107      	bne.n	800892e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f838 	bl	800899e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	f003 0320 	and.w	r3, r3, #32
 8008938:	2b20      	cmp	r3, #32
 800893a:	d10e      	bne.n	800895a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	f003 0320 	and.w	r3, r3, #32
 8008946:	2b20      	cmp	r3, #32
 8008948:	d107      	bne.n	800895a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f06f 0220 	mvn.w	r2, #32
 8008952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f913 	bl	8008b80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800895a:	bf00      	nop
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}

08008962 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008962:	b480      	push	{r7}
 8008964:	b083      	sub	sp, #12
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800896a:	bf00      	nop
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008976:	b480      	push	{r7}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800897e:	bf00      	nop
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800898a:	b480      	push	{r7}
 800898c:	b083      	sub	sp, #12
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008992:	bf00      	nop
 8008994:	370c      	adds	r7, #12
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800899e:	b480      	push	{r7}
 80089a0:	b083      	sub	sp, #12
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089a6:	bf00      	nop
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
	...

080089b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	4a32      	ldr	r2, [pc, #200]	; (8008a90 <TIM_Base_SetConfig+0xdc>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d007      	beq.n	80089dc <TIM_Base_SetConfig+0x28>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d2:	d003      	beq.n	80089dc <TIM_Base_SetConfig+0x28>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a2f      	ldr	r2, [pc, #188]	; (8008a94 <TIM_Base_SetConfig+0xe0>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d108      	bne.n	80089ee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4a27      	ldr	r2, [pc, #156]	; (8008a90 <TIM_Base_SetConfig+0xdc>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d013      	beq.n	8008a1e <TIM_Base_SetConfig+0x6a>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089fc:	d00f      	beq.n	8008a1e <TIM_Base_SetConfig+0x6a>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	4a24      	ldr	r2, [pc, #144]	; (8008a94 <TIM_Base_SetConfig+0xe0>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d00b      	beq.n	8008a1e <TIM_Base_SetConfig+0x6a>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a23      	ldr	r2, [pc, #140]	; (8008a98 <TIM_Base_SetConfig+0xe4>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d007      	beq.n	8008a1e <TIM_Base_SetConfig+0x6a>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a22      	ldr	r2, [pc, #136]	; (8008a9c <TIM_Base_SetConfig+0xe8>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d003      	beq.n	8008a1e <TIM_Base_SetConfig+0x6a>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a21      	ldr	r2, [pc, #132]	; (8008aa0 <TIM_Base_SetConfig+0xec>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d108      	bne.n	8008a30 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	689a      	ldr	r2, [r3, #8]
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a0e      	ldr	r2, [pc, #56]	; (8008a90 <TIM_Base_SetConfig+0xdc>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d00b      	beq.n	8008a74 <TIM_Base_SetConfig+0xc0>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a0e      	ldr	r2, [pc, #56]	; (8008a98 <TIM_Base_SetConfig+0xe4>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d007      	beq.n	8008a74 <TIM_Base_SetConfig+0xc0>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a0d      	ldr	r2, [pc, #52]	; (8008a9c <TIM_Base_SetConfig+0xe8>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d003      	beq.n	8008a74 <TIM_Base_SetConfig+0xc0>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a0c      	ldr	r2, [pc, #48]	; (8008aa0 <TIM_Base_SetConfig+0xec>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d103      	bne.n	8008a7c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	691a      	ldr	r2, [r3, #16]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	615a      	str	r2, [r3, #20]
}
 8008a82:	bf00      	nop
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	40012c00 	.word	0x40012c00
 8008a94:	40000400 	.word	0x40000400
 8008a98:	40014000 	.word	0x40014000
 8008a9c:	40014400 	.word	0x40014400
 8008aa0:	40014800 	.word	0x40014800

08008aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d101      	bne.n	8008abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ab8:	2302      	movs	r3, #2
 8008aba:	e054      	b.n	8008b66 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a24      	ldr	r2, [pc, #144]	; (8008b74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d108      	bne.n	8008af8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008aec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008afe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a17      	ldr	r2, [pc, #92]	; (8008b74 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d00e      	beq.n	8008b3a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b24:	d009      	beq.n	8008b3a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a13      	ldr	r2, [pc, #76]	; (8008b78 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d004      	beq.n	8008b3a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a11      	ldr	r2, [pc, #68]	; (8008b7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d10c      	bne.n	8008b54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	68ba      	ldr	r2, [r7, #8]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3714      	adds	r7, #20
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	40012c00 	.word	0x40012c00
 8008b78:	40000400 	.word	0x40000400
 8008b7c:	40014000 	.word	0x40014000

08008b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e040      	b.n	8008c50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d106      	bne.n	8008be4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7fa fc20 	bl	8003424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2224      	movs	r2, #36	; 0x24
 8008be8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f022 0201 	bic.w	r2, r2, #1
 8008bf8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fbca 	bl	8009394 <UART_SetConfig>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d101      	bne.n	8008c0a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e022      	b.n	8008c50 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d002      	beq.n	8008c18 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fcf4 	bl	8009600 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	685a      	ldr	r2, [r3, #4]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	689a      	ldr	r2, [r3, #8]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f042 0201 	orr.w	r2, r2, #1
 8008c46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 fd7b 	bl	8009744 <UART_CheckIdleState>
 8008c4e:	4603      	mov	r3, r0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b08b      	sub	sp, #44	; 0x2c
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	4613      	mov	r3, r2
 8008c64:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	d147      	bne.n	8008cfe <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d002      	beq.n	8008c7a <HAL_UART_Transmit_IT+0x22>
 8008c74:	88fb      	ldrh	r3, [r7, #6]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e040      	b.n	8008d00 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	88fa      	ldrh	r2, [r7, #6]
 8008c88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	88fa      	ldrh	r2, [r7, #6]
 8008c90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2221      	movs	r2, #33	; 0x21
 8008ca6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cb0:	d107      	bne.n	8008cc2 <HAL_UART_Transmit_IT+0x6a>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	691b      	ldr	r3, [r3, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d103      	bne.n	8008cc2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	4a13      	ldr	r2, [pc, #76]	; (8008d0c <HAL_UART_Transmit_IT+0xb4>)
 8008cbe:	66da      	str	r2, [r3, #108]	; 0x6c
 8008cc0:	e002      	b.n	8008cc8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	4a12      	ldr	r2, [pc, #72]	; (8008d10 <HAL_UART_Transmit_IT+0xb8>)
 8008cc6:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	e853 3f00 	ldrex	r3, [r3]
 8008cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce6:	623b      	str	r3, [r7, #32]
 8008ce8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cea:	69f9      	ldr	r1, [r7, #28]
 8008cec:	6a3a      	ldr	r2, [r7, #32]
 8008cee:	e841 2300 	strex	r3, r2, [r1]
 8008cf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1e6      	bne.n	8008cc8 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	e000      	b.n	8008d00 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008cfe:	2302      	movs	r3, #2
  }
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	372c      	adds	r7, #44	; 0x2c
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	08009c9d 	.word	0x08009c9d
 8008d10:	08009be5 	.word	0x08009be5

08008d14 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b08a      	sub	sp, #40	; 0x28
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	4613      	mov	r3, r2
 8008d20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d28:	2b20      	cmp	r3, #32
 8008d2a:	d132      	bne.n	8008d92 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d002      	beq.n	8008d38 <HAL_UART_Receive_IT+0x24>
 8008d32:	88fb      	ldrh	r3, [r7, #6]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d101      	bne.n	8008d3c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e02b      	b.n	8008d94 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d018      	beq.n	8008d82 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	e853 3f00 	ldrex	r3, [r3]
 8008d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d64:	627b      	str	r3, [r7, #36]	; 0x24
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	623b      	str	r3, [r7, #32]
 8008d70:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	69f9      	ldr	r1, [r7, #28]
 8008d74:	6a3a      	ldr	r2, [r7, #32]
 8008d76:	e841 2300 	strex	r3, r2, [r1]
 8008d7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1e6      	bne.n	8008d50 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d82:	88fb      	ldrh	r3, [r7, #6]
 8008d84:	461a      	mov	r2, r3
 8008d86:	68b9      	ldr	r1, [r7, #8]
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f000 fdeb 	bl	8009964 <UART_Start_Receive_IT>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	e000      	b.n	8008d94 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008d92:	2302      	movs	r3, #2
  }
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3728      	adds	r7, #40	; 0x28
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b0ba      	sub	sp, #232	; 0xe8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008dc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008dc6:	f640 030f 	movw	r3, #2063	; 0x80f
 8008dca:	4013      	ands	r3, r2
 8008dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008dd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d115      	bne.n	8008e04 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ddc:	f003 0320 	and.w	r3, r3, #32
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00f      	beq.n	8008e04 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008de8:	f003 0320 	and.w	r3, r3, #32
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d009      	beq.n	8008e04 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 82ab 	beq.w	8009350 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	4798      	blx	r3
      }
      return;
 8008e02:	e2a5      	b.n	8009350 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 8117 	beq.w	800903c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d106      	bne.n	8008e28 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008e1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008e1e:	4b85      	ldr	r3, [pc, #532]	; (8009034 <HAL_UART_IRQHandler+0x298>)
 8008e20:	4013      	ands	r3, r2
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 810a 	beq.w	800903c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e2c:	f003 0301 	and.w	r3, r3, #1
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d011      	beq.n	8008e58 <HAL_UART_IRQHandler+0xbc>
 8008e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00b      	beq.n	8008e58 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2201      	movs	r2, #1
 8008e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e4e:	f043 0201 	orr.w	r2, r3, #1
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e5c:	f003 0302 	and.w	r3, r3, #2
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d011      	beq.n	8008e88 <HAL_UART_IRQHandler+0xec>
 8008e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e68:	f003 0301 	and.w	r3, r3, #1
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00b      	beq.n	8008e88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2202      	movs	r2, #2
 8008e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e7e:	f043 0204 	orr.w	r2, r3, #4
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e8c:	f003 0304 	and.w	r3, r3, #4
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d011      	beq.n	8008eb8 <HAL_UART_IRQHandler+0x11c>
 8008e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00b      	beq.n	8008eb8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2204      	movs	r2, #4
 8008ea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eae:	f043 0202 	orr.w	r2, r3, #2
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ebc:	f003 0308 	and.w	r3, r3, #8
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d017      	beq.n	8008ef4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ec8:	f003 0320 	and.w	r3, r3, #32
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d105      	bne.n	8008edc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ed4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00b      	beq.n	8008ef4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2208      	movs	r2, #8
 8008ee2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eea:	f043 0208 	orr.w	r2, r3, #8
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d012      	beq.n	8008f26 <HAL_UART_IRQHandler+0x18a>
 8008f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00c      	beq.n	8008f26 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f1c:	f043 0220 	orr.w	r2, r3, #32
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f000 8211 	beq.w	8009354 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f36:	f003 0320 	and.w	r3, r3, #32
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00d      	beq.n	8008f5a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f42:	f003 0320 	and.w	r3, r3, #32
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d007      	beq.n	8008f5a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d003      	beq.n	8008f5a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f6e:	2b40      	cmp	r3, #64	; 0x40
 8008f70:	d005      	beq.n	8008f7e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d04f      	beq.n	800901e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 fdb6 	bl	8009af0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f8e:	2b40      	cmp	r3, #64	; 0x40
 8008f90:	d141      	bne.n	8009016 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	3308      	adds	r3, #8
 8008f98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008fa0:	e853 3f00 	ldrex	r3, [r3]
 8008fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008fa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	3308      	adds	r3, #8
 8008fba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008fbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008fc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008fca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008fce:	e841 2300 	strex	r3, r2, [r1]
 8008fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008fd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1d9      	bne.n	8008f92 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d013      	beq.n	800900e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fea:	4a13      	ldr	r2, [pc, #76]	; (8009038 <HAL_UART_IRQHandler+0x29c>)
 8008fec:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fb fd0e 	bl	8004a14 <HAL_DMA_Abort_IT>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d017      	beq.n	800902e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009008:	4610      	mov	r0, r2
 800900a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800900c:	e00f      	b.n	800902e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 f9aa 	bl	8009368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009014:	e00b      	b.n	800902e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 f9a6 	bl	8009368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800901c:	e007      	b.n	800902e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f9a2 	bl	8009368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2200      	movs	r2, #0
 8009028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800902c:	e192      	b.n	8009354 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800902e:	bf00      	nop
    return;
 8009030:	e190      	b.n	8009354 <HAL_UART_IRQHandler+0x5b8>
 8009032:	bf00      	nop
 8009034:	04000120 	.word	0x04000120
 8009038:	08009bb9 	.word	0x08009bb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009040:	2b01      	cmp	r3, #1
 8009042:	f040 814b 	bne.w	80092dc <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800904a:	f003 0310 	and.w	r3, r3, #16
 800904e:	2b00      	cmp	r3, #0
 8009050:	f000 8144 	beq.w	80092dc <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009058:	f003 0310 	and.w	r3, r3, #16
 800905c:	2b00      	cmp	r3, #0
 800905e:	f000 813d 	beq.w	80092dc <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2210      	movs	r2, #16
 8009068:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009074:	2b40      	cmp	r3, #64	; 0x40
 8009076:	f040 80b5 	bne.w	80091e4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009086:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800908a:	2b00      	cmp	r3, #0
 800908c:	f000 8164 	beq.w	8009358 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009096:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800909a:	429a      	cmp	r2, r3
 800909c:	f080 815c 	bcs.w	8009358 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80090a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090ae:	699b      	ldr	r3, [r3, #24]
 80090b0:	2b20      	cmp	r3, #32
 80090b2:	f000 8086 	beq.w	80091c2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090c2:	e853 3f00 	ldrex	r3, [r3]
 80090c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80090ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	461a      	mov	r2, r3
 80090dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80090e4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80090ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80090f0:	e841 2300 	strex	r3, r2, [r1]
 80090f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80090f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1da      	bne.n	80090b6 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	3308      	adds	r3, #8
 8009106:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009108:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800910a:	e853 3f00 	ldrex	r3, [r3]
 800910e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009110:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009112:	f023 0301 	bic.w	r3, r3, #1
 8009116:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	3308      	adds	r3, #8
 8009120:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009124:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009128:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800912c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009130:	e841 2300 	strex	r3, r2, [r1]
 8009134:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009136:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009138:	2b00      	cmp	r3, #0
 800913a:	d1e1      	bne.n	8009100 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	3308      	adds	r3, #8
 8009142:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009144:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009146:	e853 3f00 	ldrex	r3, [r3]
 800914a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800914c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800914e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009152:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	3308      	adds	r3, #8
 800915c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009160:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009162:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009164:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009166:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009168:	e841 2300 	strex	r3, r2, [r1]
 800916c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800916e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1e3      	bne.n	800913c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2220      	movs	r2, #32
 8009178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800918a:	e853 3f00 	ldrex	r3, [r3]
 800918e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009192:	f023 0310 	bic.w	r3, r3, #16
 8009196:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	461a      	mov	r2, r3
 80091a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80091a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80091a6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091ac:	e841 2300 	strex	r3, r2, [r1]
 80091b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80091b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1e4      	bne.n	8009182 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091bc:	4618      	mov	r0, r3
 80091be:	f7fb fbf0 	bl	80049a2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2202      	movs	r2, #2
 80091c6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	b29b      	uxth	r3, r3
 80091da:	4619      	mov	r1, r3
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 f8cd 	bl	800937c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091e2:	e0b9      	b.n	8009358 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091fe:	b29b      	uxth	r3, r3
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 80ab 	beq.w	800935c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8009206:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800920a:	2b00      	cmp	r3, #0
 800920c:	f000 80a6 	beq.w	800935c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009218:	e853 3f00 	ldrex	r3, [r3]
 800921c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800921e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009220:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009224:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	461a      	mov	r2, r3
 800922e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009232:	647b      	str	r3, [r7, #68]	; 0x44
 8009234:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009236:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009238:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800923a:	e841 2300 	strex	r3, r2, [r1]
 800923e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009242:	2b00      	cmp	r3, #0
 8009244:	d1e4      	bne.n	8009210 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3308      	adds	r3, #8
 800924c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009250:	e853 3f00 	ldrex	r3, [r3]
 8009254:	623b      	str	r3, [r7, #32]
   return(result);
 8009256:	6a3b      	ldr	r3, [r7, #32]
 8009258:	f023 0301 	bic.w	r3, r3, #1
 800925c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3308      	adds	r3, #8
 8009266:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800926a:	633a      	str	r2, [r7, #48]	; 0x30
 800926c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009272:	e841 2300 	strex	r3, r2, [r1]
 8009276:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1e3      	bne.n	8009246 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2220      	movs	r2, #32
 8009282:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	e853 3f00 	ldrex	r3, [r3]
 800929e:	60fb      	str	r3, [r7, #12]
   return(result);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f023 0310 	bic.w	r3, r3, #16
 80092a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80092b4:	61fb      	str	r3, [r7, #28]
 80092b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b8:	69b9      	ldr	r1, [r7, #24]
 80092ba:	69fa      	ldr	r2, [r7, #28]
 80092bc:	e841 2300 	strex	r3, r2, [r1]
 80092c0:	617b      	str	r3, [r7, #20]
   return(result);
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1e4      	bne.n	8009292 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2202      	movs	r2, #2
 80092cc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 f851 	bl	800937c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092da:	e03f      	b.n	800935c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80092dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00e      	beq.n	8009306 <HAL_UART_IRQHandler+0x56a>
 80092e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d008      	beq.n	8009306 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80092fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fefe 	bl	800a100 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009304:	e02d      	b.n	8009362 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800930a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00e      	beq.n	8009330 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800931a:	2b00      	cmp	r3, #0
 800931c:	d008      	beq.n	8009330 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009322:	2b00      	cmp	r3, #0
 8009324:	d01c      	beq.n	8009360 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	4798      	blx	r3
    }
    return;
 800932e:	e017      	b.n	8009360 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009338:	2b00      	cmp	r3, #0
 800933a:	d012      	beq.n	8009362 <HAL_UART_IRQHandler+0x5c6>
 800933c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00c      	beq.n	8009362 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fd07 	bl	8009d5c <UART_EndTransmit_IT>
    return;
 800934e:	e008      	b.n	8009362 <HAL_UART_IRQHandler+0x5c6>
      return;
 8009350:	bf00      	nop
 8009352:	e006      	b.n	8009362 <HAL_UART_IRQHandler+0x5c6>
    return;
 8009354:	bf00      	nop
 8009356:	e004      	b.n	8009362 <HAL_UART_IRQHandler+0x5c6>
      return;
 8009358:	bf00      	nop
 800935a:	e002      	b.n	8009362 <HAL_UART_IRQHandler+0x5c6>
      return;
 800935c:	bf00      	nop
 800935e:	e000      	b.n	8009362 <HAL_UART_IRQHandler+0x5c6>
    return;
 8009360:	bf00      	nop
  }

}
 8009362:	37e8      	adds	r7, #232	; 0xe8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009370:	bf00      	nop
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	460b      	mov	r3, r1
 8009386:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009388:	bf00      	nop
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b088      	sub	sp, #32
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800939c:	2300      	movs	r3, #0
 800939e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	689a      	ldr	r2, [r3, #8]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	691b      	ldr	r3, [r3, #16]
 80093a8:	431a      	orrs	r2, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	431a      	orrs	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	69db      	ldr	r3, [r3, #28]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	4b8a      	ldr	r3, [pc, #552]	; (80095e8 <UART_SetConfig+0x254>)
 80093c0:	4013      	ands	r3, r2
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	6812      	ldr	r2, [r2, #0]
 80093c6:	6979      	ldr	r1, [r7, #20]
 80093c8:	430b      	orrs	r3, r1
 80093ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	68da      	ldr	r2, [r3, #12]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	430a      	orrs	r2, r1
 80093e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a1b      	ldr	r3, [r3, #32]
 80093ec:	697a      	ldr	r2, [r7, #20]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	697a      	ldr	r2, [r7, #20]
 8009402:	430a      	orrs	r2, r1
 8009404:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a78      	ldr	r2, [pc, #480]	; (80095ec <UART_SetConfig+0x258>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d120      	bne.n	8009452 <UART_SetConfig+0xbe>
 8009410:	4b77      	ldr	r3, [pc, #476]	; (80095f0 <UART_SetConfig+0x25c>)
 8009412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009414:	f003 0303 	and.w	r3, r3, #3
 8009418:	2b03      	cmp	r3, #3
 800941a:	d817      	bhi.n	800944c <UART_SetConfig+0xb8>
 800941c:	a201      	add	r2, pc, #4	; (adr r2, 8009424 <UART_SetConfig+0x90>)
 800941e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009422:	bf00      	nop
 8009424:	08009435 	.word	0x08009435
 8009428:	08009441 	.word	0x08009441
 800942c:	08009447 	.word	0x08009447
 8009430:	0800943b 	.word	0x0800943b
 8009434:	2300      	movs	r3, #0
 8009436:	77fb      	strb	r3, [r7, #31]
 8009438:	e01d      	b.n	8009476 <UART_SetConfig+0xe2>
 800943a:	2302      	movs	r3, #2
 800943c:	77fb      	strb	r3, [r7, #31]
 800943e:	e01a      	b.n	8009476 <UART_SetConfig+0xe2>
 8009440:	2304      	movs	r3, #4
 8009442:	77fb      	strb	r3, [r7, #31]
 8009444:	e017      	b.n	8009476 <UART_SetConfig+0xe2>
 8009446:	2308      	movs	r3, #8
 8009448:	77fb      	strb	r3, [r7, #31]
 800944a:	e014      	b.n	8009476 <UART_SetConfig+0xe2>
 800944c:	2310      	movs	r3, #16
 800944e:	77fb      	strb	r3, [r7, #31]
 8009450:	e011      	b.n	8009476 <UART_SetConfig+0xe2>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a67      	ldr	r2, [pc, #412]	; (80095f4 <UART_SetConfig+0x260>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d102      	bne.n	8009462 <UART_SetConfig+0xce>
 800945c:	2300      	movs	r3, #0
 800945e:	77fb      	strb	r3, [r7, #31]
 8009460:	e009      	b.n	8009476 <UART_SetConfig+0xe2>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a64      	ldr	r2, [pc, #400]	; (80095f8 <UART_SetConfig+0x264>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d102      	bne.n	8009472 <UART_SetConfig+0xde>
 800946c:	2300      	movs	r3, #0
 800946e:	77fb      	strb	r3, [r7, #31]
 8009470:	e001      	b.n	8009476 <UART_SetConfig+0xe2>
 8009472:	2310      	movs	r3, #16
 8009474:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	69db      	ldr	r3, [r3, #28]
 800947a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800947e:	d15a      	bne.n	8009536 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8009480:	7ffb      	ldrb	r3, [r7, #31]
 8009482:	2b08      	cmp	r3, #8
 8009484:	d827      	bhi.n	80094d6 <UART_SetConfig+0x142>
 8009486:	a201      	add	r2, pc, #4	; (adr r2, 800948c <UART_SetConfig+0xf8>)
 8009488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948c:	080094b1 	.word	0x080094b1
 8009490:	080094b9 	.word	0x080094b9
 8009494:	080094c1 	.word	0x080094c1
 8009498:	080094d7 	.word	0x080094d7
 800949c:	080094c7 	.word	0x080094c7
 80094a0:	080094d7 	.word	0x080094d7
 80094a4:	080094d7 	.word	0x080094d7
 80094a8:	080094d7 	.word	0x080094d7
 80094ac:	080094cf 	.word	0x080094cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094b0:	f7fe ff0a 	bl	80082c8 <HAL_RCC_GetPCLK1Freq>
 80094b4:	61b8      	str	r0, [r7, #24]
        break;
 80094b6:	e013      	b.n	80094e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094b8:	f7fe ff28 	bl	800830c <HAL_RCC_GetPCLK2Freq>
 80094bc:	61b8      	str	r0, [r7, #24]
        break;
 80094be:	e00f      	b.n	80094e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094c0:	4b4e      	ldr	r3, [pc, #312]	; (80095fc <UART_SetConfig+0x268>)
 80094c2:	61bb      	str	r3, [r7, #24]
        break;
 80094c4:	e00c      	b.n	80094e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094c6:	f7fe fe89 	bl	80081dc <HAL_RCC_GetSysClockFreq>
 80094ca:	61b8      	str	r0, [r7, #24]
        break;
 80094cc:	e008      	b.n	80094e0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094d2:	61bb      	str	r3, [r7, #24]
        break;
 80094d4:	e004      	b.n	80094e0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80094d6:	2300      	movs	r3, #0
 80094d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	77bb      	strb	r3, [r7, #30]
        break;
 80094de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d074      	beq.n	80095d0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	005a      	lsls	r2, r3, #1
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	085b      	lsrs	r3, r3, #1
 80094f0:	441a      	add	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	2b0f      	cmp	r3, #15
 8009500:	d916      	bls.n	8009530 <UART_SetConfig+0x19c>
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009508:	d212      	bcs.n	8009530 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	b29b      	uxth	r3, r3
 800950e:	f023 030f 	bic.w	r3, r3, #15
 8009512:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	085b      	lsrs	r3, r3, #1
 8009518:	b29b      	uxth	r3, r3
 800951a:	f003 0307 	and.w	r3, r3, #7
 800951e:	b29a      	uxth	r2, r3
 8009520:	89fb      	ldrh	r3, [r7, #14]
 8009522:	4313      	orrs	r3, r2
 8009524:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	89fa      	ldrh	r2, [r7, #14]
 800952c:	60da      	str	r2, [r3, #12]
 800952e:	e04f      	b.n	80095d0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	77bb      	strb	r3, [r7, #30]
 8009534:	e04c      	b.n	80095d0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009536:	7ffb      	ldrb	r3, [r7, #31]
 8009538:	2b08      	cmp	r3, #8
 800953a:	d828      	bhi.n	800958e <UART_SetConfig+0x1fa>
 800953c:	a201      	add	r2, pc, #4	; (adr r2, 8009544 <UART_SetConfig+0x1b0>)
 800953e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009542:	bf00      	nop
 8009544:	08009569 	.word	0x08009569
 8009548:	08009571 	.word	0x08009571
 800954c:	08009579 	.word	0x08009579
 8009550:	0800958f 	.word	0x0800958f
 8009554:	0800957f 	.word	0x0800957f
 8009558:	0800958f 	.word	0x0800958f
 800955c:	0800958f 	.word	0x0800958f
 8009560:	0800958f 	.word	0x0800958f
 8009564:	08009587 	.word	0x08009587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009568:	f7fe feae 	bl	80082c8 <HAL_RCC_GetPCLK1Freq>
 800956c:	61b8      	str	r0, [r7, #24]
        break;
 800956e:	e013      	b.n	8009598 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009570:	f7fe fecc 	bl	800830c <HAL_RCC_GetPCLK2Freq>
 8009574:	61b8      	str	r0, [r7, #24]
        break;
 8009576:	e00f      	b.n	8009598 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009578:	4b20      	ldr	r3, [pc, #128]	; (80095fc <UART_SetConfig+0x268>)
 800957a:	61bb      	str	r3, [r7, #24]
        break;
 800957c:	e00c      	b.n	8009598 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800957e:	f7fe fe2d 	bl	80081dc <HAL_RCC_GetSysClockFreq>
 8009582:	61b8      	str	r0, [r7, #24]
        break;
 8009584:	e008      	b.n	8009598 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800958a:	61bb      	str	r3, [r7, #24]
        break;
 800958c:	e004      	b.n	8009598 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800958e:	2300      	movs	r3, #0
 8009590:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	77bb      	strb	r3, [r7, #30]
        break;
 8009596:	bf00      	nop
    }

    if (pclk != 0U)
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d018      	beq.n	80095d0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	085a      	lsrs	r2, r3, #1
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	441a      	add	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80095b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	2b0f      	cmp	r3, #15
 80095b6:	d909      	bls.n	80095cc <UART_SetConfig+0x238>
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095be:	d205      	bcs.n	80095cc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	60da      	str	r2, [r3, #12]
 80095ca:	e001      	b.n	80095d0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80095dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3720      	adds	r7, #32
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	efff69f3 	.word	0xefff69f3
 80095ec:	40013800 	.word	0x40013800
 80095f0:	40021000 	.word	0x40021000
 80095f4:	40004400 	.word	0x40004400
 80095f8:	40004800 	.word	0x40004800
 80095fc:	007a1200 	.word	0x007a1200

08009600 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960c:	f003 0301 	and.w	r3, r3, #1
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00a      	beq.n	800962a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	430a      	orrs	r2, r1
 8009628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962e:	f003 0302 	and.w	r3, r3, #2
 8009632:	2b00      	cmp	r3, #0
 8009634:	d00a      	beq.n	800964c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	430a      	orrs	r2, r1
 800964a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009650:	f003 0304 	and.w	r3, r3, #4
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00a      	beq.n	800966e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	430a      	orrs	r2, r1
 800966c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009672:	f003 0308 	and.w	r3, r3, #8
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00a      	beq.n	8009690 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	430a      	orrs	r2, r1
 800968e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009694:	f003 0310 	and.w	r3, r3, #16
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00a      	beq.n	80096b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	430a      	orrs	r2, r1
 80096b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b6:	f003 0320 	and.w	r3, r3, #32
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00a      	beq.n	80096d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	430a      	orrs	r2, r1
 80096d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d01a      	beq.n	8009716 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	430a      	orrs	r2, r1
 80096f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096fe:	d10a      	bne.n	8009716 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	430a      	orrs	r2, r1
 8009714:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00a      	beq.n	8009738 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	430a      	orrs	r2, r1
 8009736:	605a      	str	r2, [r3, #4]
  }
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b098      	sub	sp, #96	; 0x60
 8009748:	af02      	add	r7, sp, #8
 800974a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009754:	f7fa f854 	bl	8003800 <HAL_GetTick>
 8009758:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 0308 	and.w	r3, r3, #8
 8009764:	2b08      	cmp	r3, #8
 8009766:	d12e      	bne.n	80097c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009768:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800976c:	9300      	str	r3, [sp, #0]
 800976e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009770:	2200      	movs	r2, #0
 8009772:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 f88c 	bl	8009894 <UART_WaitOnFlagUntilTimeout>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d021      	beq.n	80097c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978a:	e853 3f00 	ldrex	r3, [r3]
 800978e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009796:	653b      	str	r3, [r7, #80]	; 0x50
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	461a      	mov	r2, r3
 800979e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097a0:	647b      	str	r3, [r7, #68]	; 0x44
 80097a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097a8:	e841 2300 	strex	r3, r2, [r1]
 80097ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d1e6      	bne.n	8009782 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2220      	movs	r2, #32
 80097b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097c2:	2303      	movs	r3, #3
 80097c4:	e062      	b.n	800988c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 0304 	and.w	r3, r3, #4
 80097d0:	2b04      	cmp	r3, #4
 80097d2:	d149      	bne.n	8009868 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097dc:	2200      	movs	r2, #0
 80097de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f856 	bl	8009894 <UART_WaitOnFlagUntilTimeout>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d03c      	beq.n	8009868 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f6:	e853 3f00 	ldrex	r3, [r3]
 80097fa:	623b      	str	r3, [r7, #32]
   return(result);
 80097fc:	6a3b      	ldr	r3, [r7, #32]
 80097fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	461a      	mov	r2, r3
 800980a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800980c:	633b      	str	r3, [r7, #48]	; 0x30
 800980e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009810:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009814:	e841 2300 	strex	r3, r2, [r1]
 8009818:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800981a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1e6      	bne.n	80097ee <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	3308      	adds	r3, #8
 8009826:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	e853 3f00 	ldrex	r3, [r3]
 800982e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f023 0301 	bic.w	r3, r3, #1
 8009836:	64bb      	str	r3, [r7, #72]	; 0x48
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	3308      	adds	r3, #8
 800983e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009840:	61fa      	str	r2, [r7, #28]
 8009842:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009844:	69b9      	ldr	r1, [r7, #24]
 8009846:	69fa      	ldr	r2, [r7, #28]
 8009848:	e841 2300 	strex	r3, r2, [r1]
 800984c:	617b      	str	r3, [r7, #20]
   return(result);
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d1e5      	bne.n	8009820 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2220      	movs	r2, #32
 8009858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009864:	2303      	movs	r3, #3
 8009866:	e011      	b.n	800988c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2220      	movs	r2, #32
 800986c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2220      	movs	r2, #32
 8009872:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800988a:	2300      	movs	r3, #0
}
 800988c:	4618      	mov	r0, r3
 800988e:	3758      	adds	r7, #88	; 0x58
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	4613      	mov	r3, r2
 80098a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098a4:	e049      	b.n	800993a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ac:	d045      	beq.n	800993a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098ae:	f7f9 ffa7 	bl	8003800 <HAL_GetTick>
 80098b2:	4602      	mov	r2, r0
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	69ba      	ldr	r2, [r7, #24]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d302      	bcc.n	80098c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d101      	bne.n	80098c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098c4:	2303      	movs	r3, #3
 80098c6:	e048      	b.n	800995a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 0304 	and.w	r3, r3, #4
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d031      	beq.n	800993a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	69db      	ldr	r3, [r3, #28]
 80098dc:	f003 0308 	and.w	r3, r3, #8
 80098e0:	2b08      	cmp	r3, #8
 80098e2:	d110      	bne.n	8009906 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2208      	movs	r2, #8
 80098ea:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f000 f8ff 	bl	8009af0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2208      	movs	r2, #8
 80098f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e029      	b.n	800995a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	69db      	ldr	r3, [r3, #28]
 800990c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009914:	d111      	bne.n	800993a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800991e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f000 f8e5 	bl	8009af0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2220      	movs	r2, #32
 800992a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009936:	2303      	movs	r3, #3
 8009938:	e00f      	b.n	800995a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	69da      	ldr	r2, [r3, #28]
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	4013      	ands	r3, r2
 8009944:	68ba      	ldr	r2, [r7, #8]
 8009946:	429a      	cmp	r2, r3
 8009948:	bf0c      	ite	eq
 800994a:	2301      	moveq	r3, #1
 800994c:	2300      	movne	r3, #0
 800994e:	b2db      	uxtb	r3, r3
 8009950:	461a      	mov	r2, r3
 8009952:	79fb      	ldrb	r3, [r7, #7]
 8009954:	429a      	cmp	r2, r3
 8009956:	d0a6      	beq.n	80098a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
	...

08009964 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009964:	b480      	push	{r7}
 8009966:	b097      	sub	sp, #92	; 0x5c
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	4613      	mov	r3, r2
 8009970:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	88fa      	ldrh	r2, [r7, #6]
 800997c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	88fa      	ldrh	r2, [r7, #6]
 8009984:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009996:	d10e      	bne.n	80099b6 <UART_Start_Receive_IT+0x52>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d105      	bne.n	80099ac <UART_Start_Receive_IT+0x48>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80099a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80099aa:	e02d      	b.n	8009a08 <UART_Start_Receive_IT+0xa4>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	22ff      	movs	r2, #255	; 0xff
 80099b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80099b4:	e028      	b.n	8009a08 <UART_Start_Receive_IT+0xa4>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10d      	bne.n	80099da <UART_Start_Receive_IT+0x76>
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d104      	bne.n	80099d0 <UART_Start_Receive_IT+0x6c>
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	22ff      	movs	r2, #255	; 0xff
 80099ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80099ce:	e01b      	b.n	8009a08 <UART_Start_Receive_IT+0xa4>
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	227f      	movs	r2, #127	; 0x7f
 80099d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80099d8:	e016      	b.n	8009a08 <UART_Start_Receive_IT+0xa4>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099e2:	d10d      	bne.n	8009a00 <UART_Start_Receive_IT+0x9c>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d104      	bne.n	80099f6 <UART_Start_Receive_IT+0x92>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	227f      	movs	r2, #127	; 0x7f
 80099f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80099f4:	e008      	b.n	8009a08 <UART_Start_Receive_IT+0xa4>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	223f      	movs	r2, #63	; 0x3f
 80099fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80099fe:	e003      	b.n	8009a08 <UART_Start_Receive_IT+0xa4>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2222      	movs	r2, #34	; 0x22
 8009a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3308      	adds	r3, #8
 8009a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a22:	e853 3f00 	ldrex	r3, [r3]
 8009a26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2a:	f043 0301 	orr.w	r3, r3, #1
 8009a2e:	657b      	str	r3, [r7, #84]	; 0x54
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	3308      	adds	r3, #8
 8009a36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a38:	64ba      	str	r2, [r7, #72]	; 0x48
 8009a3a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a40:	e841 2300 	strex	r3, r2, [r1]
 8009a44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d1e5      	bne.n	8009a18 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a54:	d107      	bne.n	8009a66 <UART_Start_Receive_IT+0x102>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d103      	bne.n	8009a66 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	4a21      	ldr	r2, [pc, #132]	; (8009ae8 <UART_Start_Receive_IT+0x184>)
 8009a62:	669a      	str	r2, [r3, #104]	; 0x68
 8009a64:	e002      	b.n	8009a6c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	4a20      	ldr	r2, [pc, #128]	; (8009aec <UART_Start_Receive_IT+0x188>)
 8009a6a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d019      	beq.n	8009aa8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7c:	e853 3f00 	ldrex	r3, [r3]
 8009a80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a84:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009a88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a92:	637b      	str	r3, [r7, #52]	; 0x34
 8009a94:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a9a:	e841 2300 	strex	r3, r2, [r1]
 8009a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d1e6      	bne.n	8009a74 <UART_Start_Receive_IT+0x110>
 8009aa6:	e018      	b.n	8009ada <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	e853 3f00 	ldrex	r3, [r3]
 8009ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	f043 0320 	orr.w	r3, r3, #32
 8009abc:	653b      	str	r3, [r7, #80]	; 0x50
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ac6:	623b      	str	r3, [r7, #32]
 8009ac8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aca:	69f9      	ldr	r1, [r7, #28]
 8009acc:	6a3a      	ldr	r2, [r7, #32]
 8009ace:	e841 2300 	strex	r3, r2, [r1]
 8009ad2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1e6      	bne.n	8009aa8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	375c      	adds	r7, #92	; 0x5c
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	08009f59 	.word	0x08009f59
 8009aec:	08009db1 	.word	0x08009db1

08009af0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b095      	sub	sp, #84	; 0x54
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b00:	e853 3f00 	ldrex	r3, [r3]
 8009b04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	461a      	mov	r2, r3
 8009b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b16:	643b      	str	r3, [r7, #64]	; 0x40
 8009b18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b1e:	e841 2300 	strex	r3, r2, [r1]
 8009b22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1e6      	bne.n	8009af8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	3308      	adds	r3, #8
 8009b30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b32:	6a3b      	ldr	r3, [r7, #32]
 8009b34:	e853 3f00 	ldrex	r3, [r3]
 8009b38:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	f023 0301 	bic.w	r3, r3, #1
 8009b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	3308      	adds	r3, #8
 8009b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b52:	e841 2300 	strex	r3, r2, [r1]
 8009b56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1e5      	bne.n	8009b2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d118      	bne.n	8009b98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	e853 3f00 	ldrex	r3, [r3]
 8009b72:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	f023 0310 	bic.w	r3, r3, #16
 8009b7a:	647b      	str	r3, [r7, #68]	; 0x44
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	461a      	mov	r2, r3
 8009b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b84:	61bb      	str	r3, [r7, #24]
 8009b86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b88:	6979      	ldr	r1, [r7, #20]
 8009b8a:	69ba      	ldr	r2, [r7, #24]
 8009b8c:	e841 2300 	strex	r3, r2, [r1]
 8009b90:	613b      	str	r3, [r7, #16]
   return(result);
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1e6      	bne.n	8009b66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2220      	movs	r2, #32
 8009b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009bac:	bf00      	nop
 8009bae:	3754      	adds	r7, #84	; 0x54
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb6:	4770      	bx	lr

08009bb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f7ff fbc6 	bl	8009368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bdc:	bf00      	nop
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b08f      	sub	sp, #60	; 0x3c
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bf0:	2b21      	cmp	r3, #33	; 0x21
 8009bf2:	d14d      	bne.n	8009c90 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d132      	bne.n	8009c66 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c06:	6a3b      	ldr	r3, [r7, #32]
 8009c08:	e853 3f00 	ldrex	r3, [r3]
 8009c0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c14:	637b      	str	r3, [r7, #52]	; 0x34
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c20:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c26:	e841 2300 	strex	r3, r2, [r1]
 8009c2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1e6      	bne.n	8009c00 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	e853 3f00 	ldrex	r3, [r3]
 8009c3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c46:	633b      	str	r3, [r7, #48]	; 0x30
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c50:	61bb      	str	r3, [r7, #24]
 8009c52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c54:	6979      	ldr	r1, [r7, #20]
 8009c56:	69ba      	ldr	r2, [r7, #24]
 8009c58:	e841 2300 	strex	r3, r2, [r1]
 8009c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d1e6      	bne.n	8009c32 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009c64:	e014      	b.n	8009c90 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c6a:	781a      	ldrb	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	b292      	uxth	r2, r2
 8009c72:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c78:	1c5a      	adds	r2, r3, #1
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	3b01      	subs	r3, #1
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009c90:	bf00      	nop
 8009c92:	373c      	adds	r7, #60	; 0x3c
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b091      	sub	sp, #68	; 0x44
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ca8:	2b21      	cmp	r3, #33	; 0x21
 8009caa:	d151      	bne.n	8009d50 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d132      	bne.n	8009d1e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc0:	e853 3f00 	ldrex	r3, [r3]
 8009cc4:	623b      	str	r3, [r7, #32]
   return(result);
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ccc:	63bb      	str	r3, [r7, #56]	; 0x38
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd6:	633b      	str	r3, [r7, #48]	; 0x30
 8009cd8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cde:	e841 2300 	strex	r3, r2, [r1]
 8009ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d1e6      	bne.n	8009cb8 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	e853 3f00 	ldrex	r3, [r3]
 8009cf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	461a      	mov	r2, r3
 8009d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d08:	61fb      	str	r3, [r7, #28]
 8009d0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0c:	69b9      	ldr	r1, [r7, #24]
 8009d0e:	69fa      	ldr	r2, [r7, #28]
 8009d10:	e841 2300 	strex	r3, r2, [r1]
 8009d14:	617b      	str	r3, [r7, #20]
   return(result);
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d1e6      	bne.n	8009cea <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009d1c:	e018      	b.n	8009d50 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d22:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d26:	881a      	ldrh	r2, [r3, #0]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d30:	b292      	uxth	r2, r2
 8009d32:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d38:	1c9a      	adds	r2, r3, #2
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	3b01      	subs	r3, #1
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009d50:	bf00      	nop
 8009d52:	3744      	adds	r7, #68	; 0x44
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b088      	sub	sp, #32
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	e853 3f00 	ldrex	r3, [r3]
 8009d70:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d78:	61fb      	str	r3, [r7, #28]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	61bb      	str	r3, [r7, #24]
 8009d84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d86:	6979      	ldr	r1, [r7, #20]
 8009d88:	69ba      	ldr	r2, [r7, #24]
 8009d8a:	e841 2300 	strex	r3, r2, [r1]
 8009d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1e6      	bne.n	8009d64 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2220      	movs	r2, #32
 8009d9a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f7f9 f94c 	bl	8003040 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009da8:	bf00      	nop
 8009daa:	3720      	adds	r7, #32
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b09c      	sub	sp, #112	; 0x70
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009dbe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dc8:	2b22      	cmp	r3, #34	; 0x22
 8009dca:	f040 80b9 	bne.w	8009f40 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009dd4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009dd8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009ddc:	b2d9      	uxtb	r1, r3
 8009dde:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de8:	400a      	ands	r2, r1
 8009dea:	b2d2      	uxtb	r2, r2
 8009dec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009df2:	1c5a      	adds	r2, r3, #1
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	3b01      	subs	r3, #1
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009e10:	b29b      	uxth	r3, r3
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f040 809c 	bne.w	8009f50 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e20:	e853 3f00 	ldrex	r3, [r3]
 8009e24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	461a      	mov	r2, r3
 8009e34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e36:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e38:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e3e:	e841 2300 	strex	r3, r2, [r1]
 8009e42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d1e6      	bne.n	8009e18 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	3308      	adds	r3, #8
 8009e50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e54:	e853 3f00 	ldrex	r3, [r3]
 8009e58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e5c:	f023 0301 	bic.w	r3, r3, #1
 8009e60:	667b      	str	r3, [r7, #100]	; 0x64
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	3308      	adds	r3, #8
 8009e68:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009e6a:	647a      	str	r2, [r7, #68]	; 0x44
 8009e6c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e72:	e841 2300 	strex	r3, r2, [r1]
 8009e76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d1e5      	bne.n	8009e4a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2220      	movs	r2, #32
 8009e82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d018      	beq.n	8009ed2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea8:	e853 3f00 	ldrex	r3, [r3]
 8009eac:	623b      	str	r3, [r7, #32]
   return(result);
 8009eae:	6a3b      	ldr	r3, [r7, #32]
 8009eb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009eb4:	663b      	str	r3, [r7, #96]	; 0x60
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ebe:	633b      	str	r3, [r7, #48]	; 0x30
 8009ec0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ec6:	e841 2300 	strex	r3, r2, [r1]
 8009eca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1e6      	bne.n	8009ea0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d12e      	bne.n	8009f38 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	e853 3f00 	ldrex	r3, [r3]
 8009eec:	60fb      	str	r3, [r7, #12]
   return(result);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f023 0310 	bic.w	r3, r3, #16
 8009ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	461a      	mov	r2, r3
 8009efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009efe:	61fb      	str	r3, [r7, #28]
 8009f00:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f02:	69b9      	ldr	r1, [r7, #24]
 8009f04:	69fa      	ldr	r2, [r7, #28]
 8009f06:	e841 2300 	strex	r3, r2, [r1]
 8009f0a:	617b      	str	r3, [r7, #20]
   return(result);
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1e6      	bne.n	8009ee0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	69db      	ldr	r3, [r3, #28]
 8009f18:	f003 0310 	and.w	r3, r3, #16
 8009f1c:	2b10      	cmp	r3, #16
 8009f1e:	d103      	bne.n	8009f28 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2210      	movs	r2, #16
 8009f26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009f2e:	4619      	mov	r1, r3
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f7ff fa23 	bl	800937c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f36:	e00b      	b.n	8009f50 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f7f9 f8a9 	bl	8003090 <HAL_UART_RxCpltCallback>
}
 8009f3e:	e007      	b.n	8009f50 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	699a      	ldr	r2, [r3, #24]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f042 0208 	orr.w	r2, r2, #8
 8009f4e:	619a      	str	r2, [r3, #24]
}
 8009f50:	bf00      	nop
 8009f52:	3770      	adds	r7, #112	; 0x70
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}

08009f58 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b09c      	sub	sp, #112	; 0x70
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f66:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f70:	2b22      	cmp	r3, #34	; 0x22
 8009f72:	f040 80b9 	bne.w	800a0e8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009f7c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f84:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009f86:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009f8a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009f8e:	4013      	ands	r3, r2
 8009f90:	b29a      	uxth	r2, r3
 8009f92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f94:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f9a:	1c9a      	adds	r2, r3, #2
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f040 809c 	bne.w	800a0f8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fc8:	e853 3f00 	ldrex	r3, [r3]
 8009fcc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fd4:	667b      	str	r3, [r7, #100]	; 0x64
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	461a      	mov	r2, r3
 8009fdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fde:	657b      	str	r3, [r7, #84]	; 0x54
 8009fe0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009fe4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009fe6:	e841 2300 	strex	r3, r2, [r1]
 8009fea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d1e6      	bne.n	8009fc0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	3308      	adds	r3, #8
 8009ff8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ffc:	e853 3f00 	ldrex	r3, [r3]
 800a000:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a004:	f023 0301 	bic.w	r3, r3, #1
 800a008:	663b      	str	r3, [r7, #96]	; 0x60
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	3308      	adds	r3, #8
 800a010:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a012:	643a      	str	r2, [r7, #64]	; 0x40
 800a014:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a016:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a018:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a01a:	e841 2300 	strex	r3, r2, [r1]
 800a01e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1e5      	bne.n	8009ff2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2220      	movs	r2, #32
 800a02a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a044:	2b00      	cmp	r3, #0
 800a046:	d018      	beq.n	800a07a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04e:	6a3b      	ldr	r3, [r7, #32]
 800a050:	e853 3f00 	ldrex	r3, [r3]
 800a054:	61fb      	str	r3, [r7, #28]
   return(result);
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a05c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	461a      	mov	r2, r3
 800a064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a066:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a068:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a06c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a06e:	e841 2300 	strex	r3, r2, [r1]
 800a072:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1e6      	bne.n	800a048 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d12e      	bne.n	800a0e0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	e853 3f00 	ldrex	r3, [r3]
 800a094:	60bb      	str	r3, [r7, #8]
   return(result);
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	f023 0310 	bic.w	r3, r3, #16
 800a09c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a0a6:	61bb      	str	r3, [r7, #24]
 800a0a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0aa:	6979      	ldr	r1, [r7, #20]
 800a0ac:	69ba      	ldr	r2, [r7, #24]
 800a0ae:	e841 2300 	strex	r3, r2, [r1]
 800a0b2:	613b      	str	r3, [r7, #16]
   return(result);
 800a0b4:	693b      	ldr	r3, [r7, #16]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1e6      	bne.n	800a088 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	69db      	ldr	r3, [r3, #28]
 800a0c0:	f003 0310 	and.w	r3, r3, #16
 800a0c4:	2b10      	cmp	r3, #16
 800a0c6:	d103      	bne.n	800a0d0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2210      	movs	r2, #16
 800a0ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f7ff f94f 	bl	800937c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a0de:	e00b      	b.n	800a0f8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f7f8 ffd5 	bl	8003090 <HAL_UART_RxCpltCallback>
}
 800a0e6:	e007      	b.n	800a0f8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	699a      	ldr	r2, [r3, #24]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f042 0208 	orr.w	r2, r2, #8
 800a0f6:	619a      	str	r2, [r3, #24]
}
 800a0f8:	bf00      	nop
 800a0fa:	3770      	adds	r7, #112	; 0x70
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <malloc>:
 800a114:	4b02      	ldr	r3, [pc, #8]	; (800a120 <malloc+0xc>)
 800a116:	4601      	mov	r1, r0
 800a118:	6818      	ldr	r0, [r3, #0]
 800a11a:	f000 b82b 	b.w	800a174 <_malloc_r>
 800a11e:	bf00      	nop
 800a120:	20000258 	.word	0x20000258

0800a124 <free>:
 800a124:	4b02      	ldr	r3, [pc, #8]	; (800a130 <free+0xc>)
 800a126:	4601      	mov	r1, r0
 800a128:	6818      	ldr	r0, [r3, #0]
 800a12a:	f002 bbab 	b.w	800c884 <_free_r>
 800a12e:	bf00      	nop
 800a130:	20000258 	.word	0x20000258

0800a134 <sbrk_aligned>:
 800a134:	b570      	push	{r4, r5, r6, lr}
 800a136:	4e0e      	ldr	r6, [pc, #56]	; (800a170 <sbrk_aligned+0x3c>)
 800a138:	460c      	mov	r4, r1
 800a13a:	6831      	ldr	r1, [r6, #0]
 800a13c:	4605      	mov	r5, r0
 800a13e:	b911      	cbnz	r1, 800a146 <sbrk_aligned+0x12>
 800a140:	f001 fcc2 	bl	800bac8 <_sbrk_r>
 800a144:	6030      	str	r0, [r6, #0]
 800a146:	4621      	mov	r1, r4
 800a148:	4628      	mov	r0, r5
 800a14a:	f001 fcbd 	bl	800bac8 <_sbrk_r>
 800a14e:	1c43      	adds	r3, r0, #1
 800a150:	d00a      	beq.n	800a168 <sbrk_aligned+0x34>
 800a152:	1cc4      	adds	r4, r0, #3
 800a154:	f024 0403 	bic.w	r4, r4, #3
 800a158:	42a0      	cmp	r0, r4
 800a15a:	d007      	beq.n	800a16c <sbrk_aligned+0x38>
 800a15c:	1a21      	subs	r1, r4, r0
 800a15e:	4628      	mov	r0, r5
 800a160:	f001 fcb2 	bl	800bac8 <_sbrk_r>
 800a164:	3001      	adds	r0, #1
 800a166:	d101      	bne.n	800a16c <sbrk_aligned+0x38>
 800a168:	f04f 34ff 	mov.w	r4, #4294967295
 800a16c:	4620      	mov	r0, r4
 800a16e:	bd70      	pop	{r4, r5, r6, pc}
 800a170:	20000a60 	.word	0x20000a60

0800a174 <_malloc_r>:
 800a174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a178:	1ccd      	adds	r5, r1, #3
 800a17a:	f025 0503 	bic.w	r5, r5, #3
 800a17e:	3508      	adds	r5, #8
 800a180:	2d0c      	cmp	r5, #12
 800a182:	bf38      	it	cc
 800a184:	250c      	movcc	r5, #12
 800a186:	2d00      	cmp	r5, #0
 800a188:	4607      	mov	r7, r0
 800a18a:	db01      	blt.n	800a190 <_malloc_r+0x1c>
 800a18c:	42a9      	cmp	r1, r5
 800a18e:	d905      	bls.n	800a19c <_malloc_r+0x28>
 800a190:	230c      	movs	r3, #12
 800a192:	603b      	str	r3, [r7, #0]
 800a194:	2600      	movs	r6, #0
 800a196:	4630      	mov	r0, r6
 800a198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a19c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a270 <_malloc_r+0xfc>
 800a1a0:	f000 f868 	bl	800a274 <__malloc_lock>
 800a1a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a1a8:	461c      	mov	r4, r3
 800a1aa:	bb5c      	cbnz	r4, 800a204 <_malloc_r+0x90>
 800a1ac:	4629      	mov	r1, r5
 800a1ae:	4638      	mov	r0, r7
 800a1b0:	f7ff ffc0 	bl	800a134 <sbrk_aligned>
 800a1b4:	1c43      	adds	r3, r0, #1
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	d155      	bne.n	800a266 <_malloc_r+0xf2>
 800a1ba:	f8d8 4000 	ldr.w	r4, [r8]
 800a1be:	4626      	mov	r6, r4
 800a1c0:	2e00      	cmp	r6, #0
 800a1c2:	d145      	bne.n	800a250 <_malloc_r+0xdc>
 800a1c4:	2c00      	cmp	r4, #0
 800a1c6:	d048      	beq.n	800a25a <_malloc_r+0xe6>
 800a1c8:	6823      	ldr	r3, [r4, #0]
 800a1ca:	4631      	mov	r1, r6
 800a1cc:	4638      	mov	r0, r7
 800a1ce:	eb04 0903 	add.w	r9, r4, r3
 800a1d2:	f001 fc79 	bl	800bac8 <_sbrk_r>
 800a1d6:	4581      	cmp	r9, r0
 800a1d8:	d13f      	bne.n	800a25a <_malloc_r+0xe6>
 800a1da:	6821      	ldr	r1, [r4, #0]
 800a1dc:	1a6d      	subs	r5, r5, r1
 800a1de:	4629      	mov	r1, r5
 800a1e0:	4638      	mov	r0, r7
 800a1e2:	f7ff ffa7 	bl	800a134 <sbrk_aligned>
 800a1e6:	3001      	adds	r0, #1
 800a1e8:	d037      	beq.n	800a25a <_malloc_r+0xe6>
 800a1ea:	6823      	ldr	r3, [r4, #0]
 800a1ec:	442b      	add	r3, r5
 800a1ee:	6023      	str	r3, [r4, #0]
 800a1f0:	f8d8 3000 	ldr.w	r3, [r8]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d038      	beq.n	800a26a <_malloc_r+0xf6>
 800a1f8:	685a      	ldr	r2, [r3, #4]
 800a1fa:	42a2      	cmp	r2, r4
 800a1fc:	d12b      	bne.n	800a256 <_malloc_r+0xe2>
 800a1fe:	2200      	movs	r2, #0
 800a200:	605a      	str	r2, [r3, #4]
 800a202:	e00f      	b.n	800a224 <_malloc_r+0xb0>
 800a204:	6822      	ldr	r2, [r4, #0]
 800a206:	1b52      	subs	r2, r2, r5
 800a208:	d41f      	bmi.n	800a24a <_malloc_r+0xd6>
 800a20a:	2a0b      	cmp	r2, #11
 800a20c:	d917      	bls.n	800a23e <_malloc_r+0xca>
 800a20e:	1961      	adds	r1, r4, r5
 800a210:	42a3      	cmp	r3, r4
 800a212:	6025      	str	r5, [r4, #0]
 800a214:	bf18      	it	ne
 800a216:	6059      	strne	r1, [r3, #4]
 800a218:	6863      	ldr	r3, [r4, #4]
 800a21a:	bf08      	it	eq
 800a21c:	f8c8 1000 	streq.w	r1, [r8]
 800a220:	5162      	str	r2, [r4, r5]
 800a222:	604b      	str	r3, [r1, #4]
 800a224:	4638      	mov	r0, r7
 800a226:	f104 060b 	add.w	r6, r4, #11
 800a22a:	f000 f829 	bl	800a280 <__malloc_unlock>
 800a22e:	f026 0607 	bic.w	r6, r6, #7
 800a232:	1d23      	adds	r3, r4, #4
 800a234:	1af2      	subs	r2, r6, r3
 800a236:	d0ae      	beq.n	800a196 <_malloc_r+0x22>
 800a238:	1b9b      	subs	r3, r3, r6
 800a23a:	50a3      	str	r3, [r4, r2]
 800a23c:	e7ab      	b.n	800a196 <_malloc_r+0x22>
 800a23e:	42a3      	cmp	r3, r4
 800a240:	6862      	ldr	r2, [r4, #4]
 800a242:	d1dd      	bne.n	800a200 <_malloc_r+0x8c>
 800a244:	f8c8 2000 	str.w	r2, [r8]
 800a248:	e7ec      	b.n	800a224 <_malloc_r+0xb0>
 800a24a:	4623      	mov	r3, r4
 800a24c:	6864      	ldr	r4, [r4, #4]
 800a24e:	e7ac      	b.n	800a1aa <_malloc_r+0x36>
 800a250:	4634      	mov	r4, r6
 800a252:	6876      	ldr	r6, [r6, #4]
 800a254:	e7b4      	b.n	800a1c0 <_malloc_r+0x4c>
 800a256:	4613      	mov	r3, r2
 800a258:	e7cc      	b.n	800a1f4 <_malloc_r+0x80>
 800a25a:	230c      	movs	r3, #12
 800a25c:	603b      	str	r3, [r7, #0]
 800a25e:	4638      	mov	r0, r7
 800a260:	f000 f80e 	bl	800a280 <__malloc_unlock>
 800a264:	e797      	b.n	800a196 <_malloc_r+0x22>
 800a266:	6025      	str	r5, [r4, #0]
 800a268:	e7dc      	b.n	800a224 <_malloc_r+0xb0>
 800a26a:	605b      	str	r3, [r3, #4]
 800a26c:	deff      	udf	#255	; 0xff
 800a26e:	bf00      	nop
 800a270:	20000a5c 	.word	0x20000a5c

0800a274 <__malloc_lock>:
 800a274:	4801      	ldr	r0, [pc, #4]	; (800a27c <__malloc_lock+0x8>)
 800a276:	f001 bc73 	b.w	800bb60 <__retarget_lock_acquire_recursive>
 800a27a:	bf00      	nop
 800a27c:	20000ba4 	.word	0x20000ba4

0800a280 <__malloc_unlock>:
 800a280:	4801      	ldr	r0, [pc, #4]	; (800a288 <__malloc_unlock+0x8>)
 800a282:	f001 bc6e 	b.w	800bb62 <__retarget_lock_release_recursive>
 800a286:	bf00      	nop
 800a288:	20000ba4 	.word	0x20000ba4

0800a28c <realloc>:
 800a28c:	4b02      	ldr	r3, [pc, #8]	; (800a298 <realloc+0xc>)
 800a28e:	460a      	mov	r2, r1
 800a290:	4601      	mov	r1, r0
 800a292:	6818      	ldr	r0, [r3, #0]
 800a294:	f000 b802 	b.w	800a29c <_realloc_r>
 800a298:	20000258 	.word	0x20000258

0800a29c <_realloc_r>:
 800a29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a0:	4680      	mov	r8, r0
 800a2a2:	4614      	mov	r4, r2
 800a2a4:	460e      	mov	r6, r1
 800a2a6:	b921      	cbnz	r1, 800a2b2 <_realloc_r+0x16>
 800a2a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ac:	4611      	mov	r1, r2
 800a2ae:	f7ff bf61 	b.w	800a174 <_malloc_r>
 800a2b2:	b92a      	cbnz	r2, 800a2c0 <_realloc_r+0x24>
 800a2b4:	f002 fae6 	bl	800c884 <_free_r>
 800a2b8:	4625      	mov	r5, r4
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c0:	f003 fb43 	bl	800d94a <_malloc_usable_size_r>
 800a2c4:	4284      	cmp	r4, r0
 800a2c6:	4607      	mov	r7, r0
 800a2c8:	d802      	bhi.n	800a2d0 <_realloc_r+0x34>
 800a2ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2ce:	d812      	bhi.n	800a2f6 <_realloc_r+0x5a>
 800a2d0:	4621      	mov	r1, r4
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	f7ff ff4e 	bl	800a174 <_malloc_r>
 800a2d8:	4605      	mov	r5, r0
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	d0ed      	beq.n	800a2ba <_realloc_r+0x1e>
 800a2de:	42bc      	cmp	r4, r7
 800a2e0:	4622      	mov	r2, r4
 800a2e2:	4631      	mov	r1, r6
 800a2e4:	bf28      	it	cs
 800a2e6:	463a      	movcs	r2, r7
 800a2e8:	f001 fc3c 	bl	800bb64 <memcpy>
 800a2ec:	4631      	mov	r1, r6
 800a2ee:	4640      	mov	r0, r8
 800a2f0:	f002 fac8 	bl	800c884 <_free_r>
 800a2f4:	e7e1      	b.n	800a2ba <_realloc_r+0x1e>
 800a2f6:	4635      	mov	r5, r6
 800a2f8:	e7df      	b.n	800a2ba <_realloc_r+0x1e>

0800a2fa <sulp>:
 800a2fa:	b570      	push	{r4, r5, r6, lr}
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	460d      	mov	r5, r1
 800a300:	ec45 4b10 	vmov	d0, r4, r5
 800a304:	4616      	mov	r6, r2
 800a306:	f003 f9df 	bl	800d6c8 <__ulp>
 800a30a:	ec51 0b10 	vmov	r0, r1, d0
 800a30e:	b17e      	cbz	r6, 800a330 <sulp+0x36>
 800a310:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a314:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a318:	2b00      	cmp	r3, #0
 800a31a:	dd09      	ble.n	800a330 <sulp+0x36>
 800a31c:	051b      	lsls	r3, r3, #20
 800a31e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a322:	2400      	movs	r4, #0
 800a324:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a328:	4622      	mov	r2, r4
 800a32a:	462b      	mov	r3, r5
 800a32c:	f7f6 f974 	bl	8000618 <__aeabi_dmul>
 800a330:	bd70      	pop	{r4, r5, r6, pc}
 800a332:	0000      	movs	r0, r0
 800a334:	0000      	movs	r0, r0
	...

0800a338 <_strtod_l>:
 800a338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33c:	ed2d 8b02 	vpush	{d8}
 800a340:	b09b      	sub	sp, #108	; 0x6c
 800a342:	4604      	mov	r4, r0
 800a344:	9213      	str	r2, [sp, #76]	; 0x4c
 800a346:	2200      	movs	r2, #0
 800a348:	9216      	str	r2, [sp, #88]	; 0x58
 800a34a:	460d      	mov	r5, r1
 800a34c:	f04f 0800 	mov.w	r8, #0
 800a350:	f04f 0900 	mov.w	r9, #0
 800a354:	460a      	mov	r2, r1
 800a356:	9215      	str	r2, [sp, #84]	; 0x54
 800a358:	7811      	ldrb	r1, [r2, #0]
 800a35a:	292b      	cmp	r1, #43	; 0x2b
 800a35c:	d04c      	beq.n	800a3f8 <_strtod_l+0xc0>
 800a35e:	d83a      	bhi.n	800a3d6 <_strtod_l+0x9e>
 800a360:	290d      	cmp	r1, #13
 800a362:	d834      	bhi.n	800a3ce <_strtod_l+0x96>
 800a364:	2908      	cmp	r1, #8
 800a366:	d834      	bhi.n	800a3d2 <_strtod_l+0x9a>
 800a368:	2900      	cmp	r1, #0
 800a36a:	d03d      	beq.n	800a3e8 <_strtod_l+0xb0>
 800a36c:	2200      	movs	r2, #0
 800a36e:	920a      	str	r2, [sp, #40]	; 0x28
 800a370:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a372:	7832      	ldrb	r2, [r6, #0]
 800a374:	2a30      	cmp	r2, #48	; 0x30
 800a376:	f040 80b4 	bne.w	800a4e2 <_strtod_l+0x1aa>
 800a37a:	7872      	ldrb	r2, [r6, #1]
 800a37c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a380:	2a58      	cmp	r2, #88	; 0x58
 800a382:	d170      	bne.n	800a466 <_strtod_l+0x12e>
 800a384:	9302      	str	r3, [sp, #8]
 800a386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a388:	9301      	str	r3, [sp, #4]
 800a38a:	ab16      	add	r3, sp, #88	; 0x58
 800a38c:	9300      	str	r3, [sp, #0]
 800a38e:	4a8e      	ldr	r2, [pc, #568]	; (800a5c8 <_strtod_l+0x290>)
 800a390:	ab17      	add	r3, sp, #92	; 0x5c
 800a392:	a915      	add	r1, sp, #84	; 0x54
 800a394:	4620      	mov	r0, r4
 800a396:	f002 fb29 	bl	800c9ec <__gethex>
 800a39a:	f010 070f 	ands.w	r7, r0, #15
 800a39e:	4605      	mov	r5, r0
 800a3a0:	d005      	beq.n	800a3ae <_strtod_l+0x76>
 800a3a2:	2f06      	cmp	r7, #6
 800a3a4:	d12a      	bne.n	800a3fc <_strtod_l+0xc4>
 800a3a6:	3601      	adds	r6, #1
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	9615      	str	r6, [sp, #84]	; 0x54
 800a3ac:	930a      	str	r3, [sp, #40]	; 0x28
 800a3ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f040 857f 	bne.w	800aeb4 <_strtod_l+0xb7c>
 800a3b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3b8:	b1db      	cbz	r3, 800a3f2 <_strtod_l+0xba>
 800a3ba:	4642      	mov	r2, r8
 800a3bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a3c0:	ec43 2b10 	vmov	d0, r2, r3
 800a3c4:	b01b      	add	sp, #108	; 0x6c
 800a3c6:	ecbd 8b02 	vpop	{d8}
 800a3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ce:	2920      	cmp	r1, #32
 800a3d0:	d1cc      	bne.n	800a36c <_strtod_l+0x34>
 800a3d2:	3201      	adds	r2, #1
 800a3d4:	e7bf      	b.n	800a356 <_strtod_l+0x1e>
 800a3d6:	292d      	cmp	r1, #45	; 0x2d
 800a3d8:	d1c8      	bne.n	800a36c <_strtod_l+0x34>
 800a3da:	2101      	movs	r1, #1
 800a3dc:	910a      	str	r1, [sp, #40]	; 0x28
 800a3de:	1c51      	adds	r1, r2, #1
 800a3e0:	9115      	str	r1, [sp, #84]	; 0x54
 800a3e2:	7852      	ldrb	r2, [r2, #1]
 800a3e4:	2a00      	cmp	r2, #0
 800a3e6:	d1c3      	bne.n	800a370 <_strtod_l+0x38>
 800a3e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a3ea:	9515      	str	r5, [sp, #84]	; 0x54
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f040 855f 	bne.w	800aeb0 <_strtod_l+0xb78>
 800a3f2:	4642      	mov	r2, r8
 800a3f4:	464b      	mov	r3, r9
 800a3f6:	e7e3      	b.n	800a3c0 <_strtod_l+0x88>
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	e7ef      	b.n	800a3dc <_strtod_l+0xa4>
 800a3fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a3fe:	b13a      	cbz	r2, 800a410 <_strtod_l+0xd8>
 800a400:	2135      	movs	r1, #53	; 0x35
 800a402:	a818      	add	r0, sp, #96	; 0x60
 800a404:	f003 fa5d 	bl	800d8c2 <__copybits>
 800a408:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a40a:	4620      	mov	r0, r4
 800a40c:	f002 fe30 	bl	800d070 <_Bfree>
 800a410:	3f01      	subs	r7, #1
 800a412:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a414:	2f04      	cmp	r7, #4
 800a416:	d806      	bhi.n	800a426 <_strtod_l+0xee>
 800a418:	e8df f007 	tbb	[pc, r7]
 800a41c:	201d0314 	.word	0x201d0314
 800a420:	14          	.byte	0x14
 800a421:	00          	.byte	0x00
 800a422:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a426:	05e9      	lsls	r1, r5, #23
 800a428:	bf48      	it	mi
 800a42a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a42e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a432:	0d1b      	lsrs	r3, r3, #20
 800a434:	051b      	lsls	r3, r3, #20
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1b9      	bne.n	800a3ae <_strtod_l+0x76>
 800a43a:	f001 fb67 	bl	800bb0c <__errno>
 800a43e:	2322      	movs	r3, #34	; 0x22
 800a440:	6003      	str	r3, [r0, #0]
 800a442:	e7b4      	b.n	800a3ae <_strtod_l+0x76>
 800a444:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a448:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a44c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a450:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a454:	e7e7      	b.n	800a426 <_strtod_l+0xee>
 800a456:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a5d0 <_strtod_l+0x298>
 800a45a:	e7e4      	b.n	800a426 <_strtod_l+0xee>
 800a45c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a460:	f04f 38ff 	mov.w	r8, #4294967295
 800a464:	e7df      	b.n	800a426 <_strtod_l+0xee>
 800a466:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a468:	1c5a      	adds	r2, r3, #1
 800a46a:	9215      	str	r2, [sp, #84]	; 0x54
 800a46c:	785b      	ldrb	r3, [r3, #1]
 800a46e:	2b30      	cmp	r3, #48	; 0x30
 800a470:	d0f9      	beq.n	800a466 <_strtod_l+0x12e>
 800a472:	2b00      	cmp	r3, #0
 800a474:	d09b      	beq.n	800a3ae <_strtod_l+0x76>
 800a476:	2301      	movs	r3, #1
 800a478:	f04f 0a00 	mov.w	sl, #0
 800a47c:	9304      	str	r3, [sp, #16]
 800a47e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a480:	930b      	str	r3, [sp, #44]	; 0x2c
 800a482:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a486:	46d3      	mov	fp, sl
 800a488:	220a      	movs	r2, #10
 800a48a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a48c:	7806      	ldrb	r6, [r0, #0]
 800a48e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a492:	b2d9      	uxtb	r1, r3
 800a494:	2909      	cmp	r1, #9
 800a496:	d926      	bls.n	800a4e6 <_strtod_l+0x1ae>
 800a498:	494c      	ldr	r1, [pc, #304]	; (800a5cc <_strtod_l+0x294>)
 800a49a:	2201      	movs	r2, #1
 800a49c:	f001 fac9 	bl	800ba32 <strncmp>
 800a4a0:	2800      	cmp	r0, #0
 800a4a2:	d030      	beq.n	800a506 <_strtod_l+0x1ce>
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	4632      	mov	r2, r6
 800a4a8:	9005      	str	r0, [sp, #20]
 800a4aa:	465e      	mov	r6, fp
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2a65      	cmp	r2, #101	; 0x65
 800a4b0:	d001      	beq.n	800a4b6 <_strtod_l+0x17e>
 800a4b2:	2a45      	cmp	r2, #69	; 0x45
 800a4b4:	d113      	bne.n	800a4de <_strtod_l+0x1a6>
 800a4b6:	b91e      	cbnz	r6, 800a4c0 <_strtod_l+0x188>
 800a4b8:	9a04      	ldr	r2, [sp, #16]
 800a4ba:	4302      	orrs	r2, r0
 800a4bc:	d094      	beq.n	800a3e8 <_strtod_l+0xb0>
 800a4be:	2600      	movs	r6, #0
 800a4c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a4c2:	1c6a      	adds	r2, r5, #1
 800a4c4:	9215      	str	r2, [sp, #84]	; 0x54
 800a4c6:	786a      	ldrb	r2, [r5, #1]
 800a4c8:	2a2b      	cmp	r2, #43	; 0x2b
 800a4ca:	d074      	beq.n	800a5b6 <_strtod_l+0x27e>
 800a4cc:	2a2d      	cmp	r2, #45	; 0x2d
 800a4ce:	d078      	beq.n	800a5c2 <_strtod_l+0x28a>
 800a4d0:	f04f 0c00 	mov.w	ip, #0
 800a4d4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a4d8:	2909      	cmp	r1, #9
 800a4da:	d97f      	bls.n	800a5dc <_strtod_l+0x2a4>
 800a4dc:	9515      	str	r5, [sp, #84]	; 0x54
 800a4de:	2700      	movs	r7, #0
 800a4e0:	e09e      	b.n	800a620 <_strtod_l+0x2e8>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	e7c8      	b.n	800a478 <_strtod_l+0x140>
 800a4e6:	f1bb 0f08 	cmp.w	fp, #8
 800a4ea:	bfd8      	it	le
 800a4ec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a4ee:	f100 0001 	add.w	r0, r0, #1
 800a4f2:	bfda      	itte	le
 800a4f4:	fb02 3301 	mlale	r3, r2, r1, r3
 800a4f8:	9309      	strle	r3, [sp, #36]	; 0x24
 800a4fa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a4fe:	f10b 0b01 	add.w	fp, fp, #1
 800a502:	9015      	str	r0, [sp, #84]	; 0x54
 800a504:	e7c1      	b.n	800a48a <_strtod_l+0x152>
 800a506:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a508:	1c5a      	adds	r2, r3, #1
 800a50a:	9215      	str	r2, [sp, #84]	; 0x54
 800a50c:	785a      	ldrb	r2, [r3, #1]
 800a50e:	f1bb 0f00 	cmp.w	fp, #0
 800a512:	d037      	beq.n	800a584 <_strtod_l+0x24c>
 800a514:	9005      	str	r0, [sp, #20]
 800a516:	465e      	mov	r6, fp
 800a518:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a51c:	2b09      	cmp	r3, #9
 800a51e:	d912      	bls.n	800a546 <_strtod_l+0x20e>
 800a520:	2301      	movs	r3, #1
 800a522:	e7c4      	b.n	800a4ae <_strtod_l+0x176>
 800a524:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a526:	1c5a      	adds	r2, r3, #1
 800a528:	9215      	str	r2, [sp, #84]	; 0x54
 800a52a:	785a      	ldrb	r2, [r3, #1]
 800a52c:	3001      	adds	r0, #1
 800a52e:	2a30      	cmp	r2, #48	; 0x30
 800a530:	d0f8      	beq.n	800a524 <_strtod_l+0x1ec>
 800a532:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a536:	2b08      	cmp	r3, #8
 800a538:	f200 84c1 	bhi.w	800aebe <_strtod_l+0xb86>
 800a53c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a53e:	9005      	str	r0, [sp, #20]
 800a540:	2000      	movs	r0, #0
 800a542:	930b      	str	r3, [sp, #44]	; 0x2c
 800a544:	4606      	mov	r6, r0
 800a546:	3a30      	subs	r2, #48	; 0x30
 800a548:	f100 0301 	add.w	r3, r0, #1
 800a54c:	d014      	beq.n	800a578 <_strtod_l+0x240>
 800a54e:	9905      	ldr	r1, [sp, #20]
 800a550:	4419      	add	r1, r3
 800a552:	9105      	str	r1, [sp, #20]
 800a554:	4633      	mov	r3, r6
 800a556:	eb00 0c06 	add.w	ip, r0, r6
 800a55a:	210a      	movs	r1, #10
 800a55c:	4563      	cmp	r3, ip
 800a55e:	d113      	bne.n	800a588 <_strtod_l+0x250>
 800a560:	1833      	adds	r3, r6, r0
 800a562:	2b08      	cmp	r3, #8
 800a564:	f106 0601 	add.w	r6, r6, #1
 800a568:	4406      	add	r6, r0
 800a56a:	dc1a      	bgt.n	800a5a2 <_strtod_l+0x26a>
 800a56c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a56e:	230a      	movs	r3, #10
 800a570:	fb03 2301 	mla	r3, r3, r1, r2
 800a574:	9309      	str	r3, [sp, #36]	; 0x24
 800a576:	2300      	movs	r3, #0
 800a578:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a57a:	1c51      	adds	r1, r2, #1
 800a57c:	9115      	str	r1, [sp, #84]	; 0x54
 800a57e:	7852      	ldrb	r2, [r2, #1]
 800a580:	4618      	mov	r0, r3
 800a582:	e7c9      	b.n	800a518 <_strtod_l+0x1e0>
 800a584:	4658      	mov	r0, fp
 800a586:	e7d2      	b.n	800a52e <_strtod_l+0x1f6>
 800a588:	2b08      	cmp	r3, #8
 800a58a:	f103 0301 	add.w	r3, r3, #1
 800a58e:	dc03      	bgt.n	800a598 <_strtod_l+0x260>
 800a590:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a592:	434f      	muls	r7, r1
 800a594:	9709      	str	r7, [sp, #36]	; 0x24
 800a596:	e7e1      	b.n	800a55c <_strtod_l+0x224>
 800a598:	2b10      	cmp	r3, #16
 800a59a:	bfd8      	it	le
 800a59c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a5a0:	e7dc      	b.n	800a55c <_strtod_l+0x224>
 800a5a2:	2e10      	cmp	r6, #16
 800a5a4:	bfdc      	itt	le
 800a5a6:	230a      	movle	r3, #10
 800a5a8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a5ac:	e7e3      	b.n	800a576 <_strtod_l+0x23e>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	9305      	str	r3, [sp, #20]
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e780      	b.n	800a4b8 <_strtod_l+0x180>
 800a5b6:	f04f 0c00 	mov.w	ip, #0
 800a5ba:	1caa      	adds	r2, r5, #2
 800a5bc:	9215      	str	r2, [sp, #84]	; 0x54
 800a5be:	78aa      	ldrb	r2, [r5, #2]
 800a5c0:	e788      	b.n	800a4d4 <_strtod_l+0x19c>
 800a5c2:	f04f 0c01 	mov.w	ip, #1
 800a5c6:	e7f8      	b.n	800a5ba <_strtod_l+0x282>
 800a5c8:	0800e50c 	.word	0x0800e50c
 800a5cc:	0800e508 	.word	0x0800e508
 800a5d0:	7ff00000 	.word	0x7ff00000
 800a5d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a5d6:	1c51      	adds	r1, r2, #1
 800a5d8:	9115      	str	r1, [sp, #84]	; 0x54
 800a5da:	7852      	ldrb	r2, [r2, #1]
 800a5dc:	2a30      	cmp	r2, #48	; 0x30
 800a5de:	d0f9      	beq.n	800a5d4 <_strtod_l+0x29c>
 800a5e0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a5e4:	2908      	cmp	r1, #8
 800a5e6:	f63f af7a 	bhi.w	800a4de <_strtod_l+0x1a6>
 800a5ea:	3a30      	subs	r2, #48	; 0x30
 800a5ec:	9208      	str	r2, [sp, #32]
 800a5ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a5f0:	920c      	str	r2, [sp, #48]	; 0x30
 800a5f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a5f4:	1c57      	adds	r7, r2, #1
 800a5f6:	9715      	str	r7, [sp, #84]	; 0x54
 800a5f8:	7852      	ldrb	r2, [r2, #1]
 800a5fa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a5fe:	f1be 0f09 	cmp.w	lr, #9
 800a602:	d938      	bls.n	800a676 <_strtod_l+0x33e>
 800a604:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a606:	1a7f      	subs	r7, r7, r1
 800a608:	2f08      	cmp	r7, #8
 800a60a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a60e:	dc03      	bgt.n	800a618 <_strtod_l+0x2e0>
 800a610:	9908      	ldr	r1, [sp, #32]
 800a612:	428f      	cmp	r7, r1
 800a614:	bfa8      	it	ge
 800a616:	460f      	movge	r7, r1
 800a618:	f1bc 0f00 	cmp.w	ip, #0
 800a61c:	d000      	beq.n	800a620 <_strtod_l+0x2e8>
 800a61e:	427f      	negs	r7, r7
 800a620:	2e00      	cmp	r6, #0
 800a622:	d14f      	bne.n	800a6c4 <_strtod_l+0x38c>
 800a624:	9904      	ldr	r1, [sp, #16]
 800a626:	4301      	orrs	r1, r0
 800a628:	f47f aec1 	bne.w	800a3ae <_strtod_l+0x76>
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f47f aedb 	bne.w	800a3e8 <_strtod_l+0xb0>
 800a632:	2a69      	cmp	r2, #105	; 0x69
 800a634:	d029      	beq.n	800a68a <_strtod_l+0x352>
 800a636:	dc26      	bgt.n	800a686 <_strtod_l+0x34e>
 800a638:	2a49      	cmp	r2, #73	; 0x49
 800a63a:	d026      	beq.n	800a68a <_strtod_l+0x352>
 800a63c:	2a4e      	cmp	r2, #78	; 0x4e
 800a63e:	f47f aed3 	bne.w	800a3e8 <_strtod_l+0xb0>
 800a642:	499b      	ldr	r1, [pc, #620]	; (800a8b0 <_strtod_l+0x578>)
 800a644:	a815      	add	r0, sp, #84	; 0x54
 800a646:	f002 fc11 	bl	800ce6c <__match>
 800a64a:	2800      	cmp	r0, #0
 800a64c:	f43f aecc 	beq.w	800a3e8 <_strtod_l+0xb0>
 800a650:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	2b28      	cmp	r3, #40	; 0x28
 800a656:	d12f      	bne.n	800a6b8 <_strtod_l+0x380>
 800a658:	4996      	ldr	r1, [pc, #600]	; (800a8b4 <_strtod_l+0x57c>)
 800a65a:	aa18      	add	r2, sp, #96	; 0x60
 800a65c:	a815      	add	r0, sp, #84	; 0x54
 800a65e:	f002 fc19 	bl	800ce94 <__hexnan>
 800a662:	2805      	cmp	r0, #5
 800a664:	d128      	bne.n	800a6b8 <_strtod_l+0x380>
 800a666:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a668:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a66c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a670:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a674:	e69b      	b.n	800a3ae <_strtod_l+0x76>
 800a676:	9f08      	ldr	r7, [sp, #32]
 800a678:	210a      	movs	r1, #10
 800a67a:	fb01 2107 	mla	r1, r1, r7, r2
 800a67e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a682:	9208      	str	r2, [sp, #32]
 800a684:	e7b5      	b.n	800a5f2 <_strtod_l+0x2ba>
 800a686:	2a6e      	cmp	r2, #110	; 0x6e
 800a688:	e7d9      	b.n	800a63e <_strtod_l+0x306>
 800a68a:	498b      	ldr	r1, [pc, #556]	; (800a8b8 <_strtod_l+0x580>)
 800a68c:	a815      	add	r0, sp, #84	; 0x54
 800a68e:	f002 fbed 	bl	800ce6c <__match>
 800a692:	2800      	cmp	r0, #0
 800a694:	f43f aea8 	beq.w	800a3e8 <_strtod_l+0xb0>
 800a698:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a69a:	4988      	ldr	r1, [pc, #544]	; (800a8bc <_strtod_l+0x584>)
 800a69c:	3b01      	subs	r3, #1
 800a69e:	a815      	add	r0, sp, #84	; 0x54
 800a6a0:	9315      	str	r3, [sp, #84]	; 0x54
 800a6a2:	f002 fbe3 	bl	800ce6c <__match>
 800a6a6:	b910      	cbnz	r0, 800a6ae <_strtod_l+0x376>
 800a6a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	9315      	str	r3, [sp, #84]	; 0x54
 800a6ae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a8cc <_strtod_l+0x594>
 800a6b2:	f04f 0800 	mov.w	r8, #0
 800a6b6:	e67a      	b.n	800a3ae <_strtod_l+0x76>
 800a6b8:	4881      	ldr	r0, [pc, #516]	; (800a8c0 <_strtod_l+0x588>)
 800a6ba:	f001 fa61 	bl	800bb80 <nan>
 800a6be:	ec59 8b10 	vmov	r8, r9, d0
 800a6c2:	e674      	b.n	800a3ae <_strtod_l+0x76>
 800a6c4:	9b05      	ldr	r3, [sp, #20]
 800a6c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6c8:	1afb      	subs	r3, r7, r3
 800a6ca:	f1bb 0f00 	cmp.w	fp, #0
 800a6ce:	bf08      	it	eq
 800a6d0:	46b3      	moveq	fp, r6
 800a6d2:	2e10      	cmp	r6, #16
 800a6d4:	9308      	str	r3, [sp, #32]
 800a6d6:	4635      	mov	r5, r6
 800a6d8:	bfa8      	it	ge
 800a6da:	2510      	movge	r5, #16
 800a6dc:	f7f5 ff22 	bl	8000524 <__aeabi_ui2d>
 800a6e0:	2e09      	cmp	r6, #9
 800a6e2:	4680      	mov	r8, r0
 800a6e4:	4689      	mov	r9, r1
 800a6e6:	dd13      	ble.n	800a710 <_strtod_l+0x3d8>
 800a6e8:	4b76      	ldr	r3, [pc, #472]	; (800a8c4 <_strtod_l+0x58c>)
 800a6ea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a6ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a6f2:	f7f5 ff91 	bl	8000618 <__aeabi_dmul>
 800a6f6:	4680      	mov	r8, r0
 800a6f8:	4650      	mov	r0, sl
 800a6fa:	4689      	mov	r9, r1
 800a6fc:	f7f5 ff12 	bl	8000524 <__aeabi_ui2d>
 800a700:	4602      	mov	r2, r0
 800a702:	460b      	mov	r3, r1
 800a704:	4640      	mov	r0, r8
 800a706:	4649      	mov	r1, r9
 800a708:	f7f5 fdd0 	bl	80002ac <__adddf3>
 800a70c:	4680      	mov	r8, r0
 800a70e:	4689      	mov	r9, r1
 800a710:	2e0f      	cmp	r6, #15
 800a712:	dc38      	bgt.n	800a786 <_strtod_l+0x44e>
 800a714:	9b08      	ldr	r3, [sp, #32]
 800a716:	2b00      	cmp	r3, #0
 800a718:	f43f ae49 	beq.w	800a3ae <_strtod_l+0x76>
 800a71c:	dd24      	ble.n	800a768 <_strtod_l+0x430>
 800a71e:	2b16      	cmp	r3, #22
 800a720:	dc0b      	bgt.n	800a73a <_strtod_l+0x402>
 800a722:	4968      	ldr	r1, [pc, #416]	; (800a8c4 <_strtod_l+0x58c>)
 800a724:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a72c:	4642      	mov	r2, r8
 800a72e:	464b      	mov	r3, r9
 800a730:	f7f5 ff72 	bl	8000618 <__aeabi_dmul>
 800a734:	4680      	mov	r8, r0
 800a736:	4689      	mov	r9, r1
 800a738:	e639      	b.n	800a3ae <_strtod_l+0x76>
 800a73a:	9a08      	ldr	r2, [sp, #32]
 800a73c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a740:	4293      	cmp	r3, r2
 800a742:	db20      	blt.n	800a786 <_strtod_l+0x44e>
 800a744:	4c5f      	ldr	r4, [pc, #380]	; (800a8c4 <_strtod_l+0x58c>)
 800a746:	f1c6 060f 	rsb	r6, r6, #15
 800a74a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a74e:	4642      	mov	r2, r8
 800a750:	464b      	mov	r3, r9
 800a752:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a756:	f7f5 ff5f 	bl	8000618 <__aeabi_dmul>
 800a75a:	9b08      	ldr	r3, [sp, #32]
 800a75c:	1b9e      	subs	r6, r3, r6
 800a75e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a762:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a766:	e7e3      	b.n	800a730 <_strtod_l+0x3f8>
 800a768:	9b08      	ldr	r3, [sp, #32]
 800a76a:	3316      	adds	r3, #22
 800a76c:	db0b      	blt.n	800a786 <_strtod_l+0x44e>
 800a76e:	9b05      	ldr	r3, [sp, #20]
 800a770:	1bdf      	subs	r7, r3, r7
 800a772:	4b54      	ldr	r3, [pc, #336]	; (800a8c4 <_strtod_l+0x58c>)
 800a774:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a77c:	4640      	mov	r0, r8
 800a77e:	4649      	mov	r1, r9
 800a780:	f7f6 f874 	bl	800086c <__aeabi_ddiv>
 800a784:	e7d6      	b.n	800a734 <_strtod_l+0x3fc>
 800a786:	9b08      	ldr	r3, [sp, #32]
 800a788:	1b75      	subs	r5, r6, r5
 800a78a:	441d      	add	r5, r3
 800a78c:	2d00      	cmp	r5, #0
 800a78e:	dd70      	ble.n	800a872 <_strtod_l+0x53a>
 800a790:	f015 030f 	ands.w	r3, r5, #15
 800a794:	d00a      	beq.n	800a7ac <_strtod_l+0x474>
 800a796:	494b      	ldr	r1, [pc, #300]	; (800a8c4 <_strtod_l+0x58c>)
 800a798:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a79c:	4642      	mov	r2, r8
 800a79e:	464b      	mov	r3, r9
 800a7a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7a4:	f7f5 ff38 	bl	8000618 <__aeabi_dmul>
 800a7a8:	4680      	mov	r8, r0
 800a7aa:	4689      	mov	r9, r1
 800a7ac:	f035 050f 	bics.w	r5, r5, #15
 800a7b0:	d04d      	beq.n	800a84e <_strtod_l+0x516>
 800a7b2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a7b6:	dd22      	ble.n	800a7fe <_strtod_l+0x4c6>
 800a7b8:	2500      	movs	r5, #0
 800a7ba:	46ab      	mov	fp, r5
 800a7bc:	9509      	str	r5, [sp, #36]	; 0x24
 800a7be:	9505      	str	r5, [sp, #20]
 800a7c0:	2322      	movs	r3, #34	; 0x22
 800a7c2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a8cc <_strtod_l+0x594>
 800a7c6:	6023      	str	r3, [r4, #0]
 800a7c8:	f04f 0800 	mov.w	r8, #0
 800a7cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	f43f aded 	beq.w	800a3ae <_strtod_l+0x76>
 800a7d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f002 fc4a 	bl	800d070 <_Bfree>
 800a7dc:	9905      	ldr	r1, [sp, #20]
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f002 fc46 	bl	800d070 <_Bfree>
 800a7e4:	4659      	mov	r1, fp
 800a7e6:	4620      	mov	r0, r4
 800a7e8:	f002 fc42 	bl	800d070 <_Bfree>
 800a7ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7ee:	4620      	mov	r0, r4
 800a7f0:	f002 fc3e 	bl	800d070 <_Bfree>
 800a7f4:	4629      	mov	r1, r5
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f002 fc3a 	bl	800d070 <_Bfree>
 800a7fc:	e5d7      	b.n	800a3ae <_strtod_l+0x76>
 800a7fe:	4b32      	ldr	r3, [pc, #200]	; (800a8c8 <_strtod_l+0x590>)
 800a800:	9304      	str	r3, [sp, #16]
 800a802:	2300      	movs	r3, #0
 800a804:	112d      	asrs	r5, r5, #4
 800a806:	4640      	mov	r0, r8
 800a808:	4649      	mov	r1, r9
 800a80a:	469a      	mov	sl, r3
 800a80c:	2d01      	cmp	r5, #1
 800a80e:	dc21      	bgt.n	800a854 <_strtod_l+0x51c>
 800a810:	b10b      	cbz	r3, 800a816 <_strtod_l+0x4de>
 800a812:	4680      	mov	r8, r0
 800a814:	4689      	mov	r9, r1
 800a816:	492c      	ldr	r1, [pc, #176]	; (800a8c8 <_strtod_l+0x590>)
 800a818:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a81c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a820:	4642      	mov	r2, r8
 800a822:	464b      	mov	r3, r9
 800a824:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a828:	f7f5 fef6 	bl	8000618 <__aeabi_dmul>
 800a82c:	4b27      	ldr	r3, [pc, #156]	; (800a8cc <_strtod_l+0x594>)
 800a82e:	460a      	mov	r2, r1
 800a830:	400b      	ands	r3, r1
 800a832:	4927      	ldr	r1, [pc, #156]	; (800a8d0 <_strtod_l+0x598>)
 800a834:	428b      	cmp	r3, r1
 800a836:	4680      	mov	r8, r0
 800a838:	d8be      	bhi.n	800a7b8 <_strtod_l+0x480>
 800a83a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a83e:	428b      	cmp	r3, r1
 800a840:	bf86      	itte	hi
 800a842:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a8d4 <_strtod_l+0x59c>
 800a846:	f04f 38ff 	movhi.w	r8, #4294967295
 800a84a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a84e:	2300      	movs	r3, #0
 800a850:	9304      	str	r3, [sp, #16]
 800a852:	e07b      	b.n	800a94c <_strtod_l+0x614>
 800a854:	07ea      	lsls	r2, r5, #31
 800a856:	d505      	bpl.n	800a864 <_strtod_l+0x52c>
 800a858:	9b04      	ldr	r3, [sp, #16]
 800a85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85e:	f7f5 fedb 	bl	8000618 <__aeabi_dmul>
 800a862:	2301      	movs	r3, #1
 800a864:	9a04      	ldr	r2, [sp, #16]
 800a866:	3208      	adds	r2, #8
 800a868:	f10a 0a01 	add.w	sl, sl, #1
 800a86c:	106d      	asrs	r5, r5, #1
 800a86e:	9204      	str	r2, [sp, #16]
 800a870:	e7cc      	b.n	800a80c <_strtod_l+0x4d4>
 800a872:	d0ec      	beq.n	800a84e <_strtod_l+0x516>
 800a874:	426d      	negs	r5, r5
 800a876:	f015 020f 	ands.w	r2, r5, #15
 800a87a:	d00a      	beq.n	800a892 <_strtod_l+0x55a>
 800a87c:	4b11      	ldr	r3, [pc, #68]	; (800a8c4 <_strtod_l+0x58c>)
 800a87e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a882:	4640      	mov	r0, r8
 800a884:	4649      	mov	r1, r9
 800a886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88a:	f7f5 ffef 	bl	800086c <__aeabi_ddiv>
 800a88e:	4680      	mov	r8, r0
 800a890:	4689      	mov	r9, r1
 800a892:	112d      	asrs	r5, r5, #4
 800a894:	d0db      	beq.n	800a84e <_strtod_l+0x516>
 800a896:	2d1f      	cmp	r5, #31
 800a898:	dd1e      	ble.n	800a8d8 <_strtod_l+0x5a0>
 800a89a:	2500      	movs	r5, #0
 800a89c:	46ab      	mov	fp, r5
 800a89e:	9509      	str	r5, [sp, #36]	; 0x24
 800a8a0:	9505      	str	r5, [sp, #20]
 800a8a2:	2322      	movs	r3, #34	; 0x22
 800a8a4:	f04f 0800 	mov.w	r8, #0
 800a8a8:	f04f 0900 	mov.w	r9, #0
 800a8ac:	6023      	str	r3, [r4, #0]
 800a8ae:	e78d      	b.n	800a7cc <_strtod_l+0x494>
 800a8b0:	0800e66e 	.word	0x0800e66e
 800a8b4:	0800e520 	.word	0x0800e520
 800a8b8:	0800e666 	.word	0x0800e666
 800a8bc:	0800e6a0 	.word	0x0800e6a0
 800a8c0:	0800e930 	.word	0x0800e930
 800a8c4:	0800e810 	.word	0x0800e810
 800a8c8:	0800e7e8 	.word	0x0800e7e8
 800a8cc:	7ff00000 	.word	0x7ff00000
 800a8d0:	7ca00000 	.word	0x7ca00000
 800a8d4:	7fefffff 	.word	0x7fefffff
 800a8d8:	f015 0310 	ands.w	r3, r5, #16
 800a8dc:	bf18      	it	ne
 800a8de:	236a      	movne	r3, #106	; 0x6a
 800a8e0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ac84 <_strtod_l+0x94c>
 800a8e4:	9304      	str	r3, [sp, #16]
 800a8e6:	4640      	mov	r0, r8
 800a8e8:	4649      	mov	r1, r9
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	07ea      	lsls	r2, r5, #31
 800a8ee:	d504      	bpl.n	800a8fa <_strtod_l+0x5c2>
 800a8f0:	e9da 2300 	ldrd	r2, r3, [sl]
 800a8f4:	f7f5 fe90 	bl	8000618 <__aeabi_dmul>
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	106d      	asrs	r5, r5, #1
 800a8fc:	f10a 0a08 	add.w	sl, sl, #8
 800a900:	d1f4      	bne.n	800a8ec <_strtod_l+0x5b4>
 800a902:	b10b      	cbz	r3, 800a908 <_strtod_l+0x5d0>
 800a904:	4680      	mov	r8, r0
 800a906:	4689      	mov	r9, r1
 800a908:	9b04      	ldr	r3, [sp, #16]
 800a90a:	b1bb      	cbz	r3, 800a93c <_strtod_l+0x604>
 800a90c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a910:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a914:	2b00      	cmp	r3, #0
 800a916:	4649      	mov	r1, r9
 800a918:	dd10      	ble.n	800a93c <_strtod_l+0x604>
 800a91a:	2b1f      	cmp	r3, #31
 800a91c:	f340 811e 	ble.w	800ab5c <_strtod_l+0x824>
 800a920:	2b34      	cmp	r3, #52	; 0x34
 800a922:	bfde      	ittt	le
 800a924:	f04f 33ff 	movle.w	r3, #4294967295
 800a928:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a92c:	4093      	lslle	r3, r2
 800a92e:	f04f 0800 	mov.w	r8, #0
 800a932:	bfcc      	ite	gt
 800a934:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a938:	ea03 0901 	andle.w	r9, r3, r1
 800a93c:	2200      	movs	r2, #0
 800a93e:	2300      	movs	r3, #0
 800a940:	4640      	mov	r0, r8
 800a942:	4649      	mov	r1, r9
 800a944:	f7f6 f8d0 	bl	8000ae8 <__aeabi_dcmpeq>
 800a948:	2800      	cmp	r0, #0
 800a94a:	d1a6      	bne.n	800a89a <_strtod_l+0x562>
 800a94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a94e:	9300      	str	r3, [sp, #0]
 800a950:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a952:	4633      	mov	r3, r6
 800a954:	465a      	mov	r2, fp
 800a956:	4620      	mov	r0, r4
 800a958:	f002 fbf2 	bl	800d140 <__s2b>
 800a95c:	9009      	str	r0, [sp, #36]	; 0x24
 800a95e:	2800      	cmp	r0, #0
 800a960:	f43f af2a 	beq.w	800a7b8 <_strtod_l+0x480>
 800a964:	9a08      	ldr	r2, [sp, #32]
 800a966:	9b05      	ldr	r3, [sp, #20]
 800a968:	2a00      	cmp	r2, #0
 800a96a:	eba3 0307 	sub.w	r3, r3, r7
 800a96e:	bfa8      	it	ge
 800a970:	2300      	movge	r3, #0
 800a972:	930c      	str	r3, [sp, #48]	; 0x30
 800a974:	2500      	movs	r5, #0
 800a976:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a97a:	9312      	str	r3, [sp, #72]	; 0x48
 800a97c:	46ab      	mov	fp, r5
 800a97e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a980:	4620      	mov	r0, r4
 800a982:	6859      	ldr	r1, [r3, #4]
 800a984:	f002 fb34 	bl	800cff0 <_Balloc>
 800a988:	9005      	str	r0, [sp, #20]
 800a98a:	2800      	cmp	r0, #0
 800a98c:	f43f af18 	beq.w	800a7c0 <_strtod_l+0x488>
 800a990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a992:	691a      	ldr	r2, [r3, #16]
 800a994:	3202      	adds	r2, #2
 800a996:	f103 010c 	add.w	r1, r3, #12
 800a99a:	0092      	lsls	r2, r2, #2
 800a99c:	300c      	adds	r0, #12
 800a99e:	f001 f8e1 	bl	800bb64 <memcpy>
 800a9a2:	ec49 8b10 	vmov	d0, r8, r9
 800a9a6:	aa18      	add	r2, sp, #96	; 0x60
 800a9a8:	a917      	add	r1, sp, #92	; 0x5c
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f002 fefc 	bl	800d7a8 <__d2b>
 800a9b0:	ec49 8b18 	vmov	d8, r8, r9
 800a9b4:	9016      	str	r0, [sp, #88]	; 0x58
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	f43f af02 	beq.w	800a7c0 <_strtod_l+0x488>
 800a9bc:	2101      	movs	r1, #1
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f002 fc56 	bl	800d270 <__i2b>
 800a9c4:	4683      	mov	fp, r0
 800a9c6:	2800      	cmp	r0, #0
 800a9c8:	f43f aefa 	beq.w	800a7c0 <_strtod_l+0x488>
 800a9cc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a9ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a9d0:	2e00      	cmp	r6, #0
 800a9d2:	bfab      	itete	ge
 800a9d4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a9d6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a9d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a9da:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a9de:	bfac      	ite	ge
 800a9e0:	eb06 0a03 	addge.w	sl, r6, r3
 800a9e4:	1b9f      	sublt	r7, r3, r6
 800a9e6:	9b04      	ldr	r3, [sp, #16]
 800a9e8:	1af6      	subs	r6, r6, r3
 800a9ea:	4416      	add	r6, r2
 800a9ec:	4ba0      	ldr	r3, [pc, #640]	; (800ac70 <_strtod_l+0x938>)
 800a9ee:	3e01      	subs	r6, #1
 800a9f0:	429e      	cmp	r6, r3
 800a9f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a9f6:	f280 80c4 	bge.w	800ab82 <_strtod_l+0x84a>
 800a9fa:	1b9b      	subs	r3, r3, r6
 800a9fc:	2b1f      	cmp	r3, #31
 800a9fe:	eba2 0203 	sub.w	r2, r2, r3
 800aa02:	f04f 0101 	mov.w	r1, #1
 800aa06:	f300 80b0 	bgt.w	800ab6a <_strtod_l+0x832>
 800aa0a:	fa01 f303 	lsl.w	r3, r1, r3
 800aa0e:	930e      	str	r3, [sp, #56]	; 0x38
 800aa10:	2300      	movs	r3, #0
 800aa12:	930d      	str	r3, [sp, #52]	; 0x34
 800aa14:	eb0a 0602 	add.w	r6, sl, r2
 800aa18:	9b04      	ldr	r3, [sp, #16]
 800aa1a:	45b2      	cmp	sl, r6
 800aa1c:	4417      	add	r7, r2
 800aa1e:	441f      	add	r7, r3
 800aa20:	4653      	mov	r3, sl
 800aa22:	bfa8      	it	ge
 800aa24:	4633      	movge	r3, r6
 800aa26:	42bb      	cmp	r3, r7
 800aa28:	bfa8      	it	ge
 800aa2a:	463b      	movge	r3, r7
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	bfc2      	ittt	gt
 800aa30:	1af6      	subgt	r6, r6, r3
 800aa32:	1aff      	subgt	r7, r7, r3
 800aa34:	ebaa 0a03 	subgt.w	sl, sl, r3
 800aa38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	dd17      	ble.n	800aa6e <_strtod_l+0x736>
 800aa3e:	4659      	mov	r1, fp
 800aa40:	461a      	mov	r2, r3
 800aa42:	4620      	mov	r0, r4
 800aa44:	f002 fcd4 	bl	800d3f0 <__pow5mult>
 800aa48:	4683      	mov	fp, r0
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	f43f aeb8 	beq.w	800a7c0 <_strtod_l+0x488>
 800aa50:	4601      	mov	r1, r0
 800aa52:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aa54:	4620      	mov	r0, r4
 800aa56:	f002 fc21 	bl	800d29c <__multiply>
 800aa5a:	900b      	str	r0, [sp, #44]	; 0x2c
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	f43f aeaf 	beq.w	800a7c0 <_strtod_l+0x488>
 800aa62:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aa64:	4620      	mov	r0, r4
 800aa66:	f002 fb03 	bl	800d070 <_Bfree>
 800aa6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa6c:	9316      	str	r3, [sp, #88]	; 0x58
 800aa6e:	2e00      	cmp	r6, #0
 800aa70:	f300 808c 	bgt.w	800ab8c <_strtod_l+0x854>
 800aa74:	9b08      	ldr	r3, [sp, #32]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	dd08      	ble.n	800aa8c <_strtod_l+0x754>
 800aa7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa7c:	9905      	ldr	r1, [sp, #20]
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f002 fcb6 	bl	800d3f0 <__pow5mult>
 800aa84:	9005      	str	r0, [sp, #20]
 800aa86:	2800      	cmp	r0, #0
 800aa88:	f43f ae9a 	beq.w	800a7c0 <_strtod_l+0x488>
 800aa8c:	2f00      	cmp	r7, #0
 800aa8e:	dd08      	ble.n	800aaa2 <_strtod_l+0x76a>
 800aa90:	9905      	ldr	r1, [sp, #20]
 800aa92:	463a      	mov	r2, r7
 800aa94:	4620      	mov	r0, r4
 800aa96:	f002 fd05 	bl	800d4a4 <__lshift>
 800aa9a:	9005      	str	r0, [sp, #20]
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	f43f ae8f 	beq.w	800a7c0 <_strtod_l+0x488>
 800aaa2:	f1ba 0f00 	cmp.w	sl, #0
 800aaa6:	dd08      	ble.n	800aaba <_strtod_l+0x782>
 800aaa8:	4659      	mov	r1, fp
 800aaaa:	4652      	mov	r2, sl
 800aaac:	4620      	mov	r0, r4
 800aaae:	f002 fcf9 	bl	800d4a4 <__lshift>
 800aab2:	4683      	mov	fp, r0
 800aab4:	2800      	cmp	r0, #0
 800aab6:	f43f ae83 	beq.w	800a7c0 <_strtod_l+0x488>
 800aaba:	9a05      	ldr	r2, [sp, #20]
 800aabc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aabe:	4620      	mov	r0, r4
 800aac0:	f002 fd78 	bl	800d5b4 <__mdiff>
 800aac4:	4605      	mov	r5, r0
 800aac6:	2800      	cmp	r0, #0
 800aac8:	f43f ae7a 	beq.w	800a7c0 <_strtod_l+0x488>
 800aacc:	68c3      	ldr	r3, [r0, #12]
 800aace:	930b      	str	r3, [sp, #44]	; 0x2c
 800aad0:	2300      	movs	r3, #0
 800aad2:	60c3      	str	r3, [r0, #12]
 800aad4:	4659      	mov	r1, fp
 800aad6:	f002 fd51 	bl	800d57c <__mcmp>
 800aada:	2800      	cmp	r0, #0
 800aadc:	da60      	bge.n	800aba0 <_strtod_l+0x868>
 800aade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aae0:	ea53 0308 	orrs.w	r3, r3, r8
 800aae4:	f040 8084 	bne.w	800abf0 <_strtod_l+0x8b8>
 800aae8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d17f      	bne.n	800abf0 <_strtod_l+0x8b8>
 800aaf0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aaf4:	0d1b      	lsrs	r3, r3, #20
 800aaf6:	051b      	lsls	r3, r3, #20
 800aaf8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aafc:	d978      	bls.n	800abf0 <_strtod_l+0x8b8>
 800aafe:	696b      	ldr	r3, [r5, #20]
 800ab00:	b913      	cbnz	r3, 800ab08 <_strtod_l+0x7d0>
 800ab02:	692b      	ldr	r3, [r5, #16]
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	dd73      	ble.n	800abf0 <_strtod_l+0x8b8>
 800ab08:	4629      	mov	r1, r5
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	4620      	mov	r0, r4
 800ab0e:	f002 fcc9 	bl	800d4a4 <__lshift>
 800ab12:	4659      	mov	r1, fp
 800ab14:	4605      	mov	r5, r0
 800ab16:	f002 fd31 	bl	800d57c <__mcmp>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	dd68      	ble.n	800abf0 <_strtod_l+0x8b8>
 800ab1e:	9904      	ldr	r1, [sp, #16]
 800ab20:	4a54      	ldr	r2, [pc, #336]	; (800ac74 <_strtod_l+0x93c>)
 800ab22:	464b      	mov	r3, r9
 800ab24:	2900      	cmp	r1, #0
 800ab26:	f000 8084 	beq.w	800ac32 <_strtod_l+0x8fa>
 800ab2a:	ea02 0109 	and.w	r1, r2, r9
 800ab2e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ab32:	dc7e      	bgt.n	800ac32 <_strtod_l+0x8fa>
 800ab34:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ab38:	f77f aeb3 	ble.w	800a8a2 <_strtod_l+0x56a>
 800ab3c:	4b4e      	ldr	r3, [pc, #312]	; (800ac78 <_strtod_l+0x940>)
 800ab3e:	4640      	mov	r0, r8
 800ab40:	4649      	mov	r1, r9
 800ab42:	2200      	movs	r2, #0
 800ab44:	f7f5 fd68 	bl	8000618 <__aeabi_dmul>
 800ab48:	4b4a      	ldr	r3, [pc, #296]	; (800ac74 <_strtod_l+0x93c>)
 800ab4a:	400b      	ands	r3, r1
 800ab4c:	4680      	mov	r8, r0
 800ab4e:	4689      	mov	r9, r1
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f47f ae3f 	bne.w	800a7d4 <_strtod_l+0x49c>
 800ab56:	2322      	movs	r3, #34	; 0x22
 800ab58:	6023      	str	r3, [r4, #0]
 800ab5a:	e63b      	b.n	800a7d4 <_strtod_l+0x49c>
 800ab5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab60:	fa02 f303 	lsl.w	r3, r2, r3
 800ab64:	ea03 0808 	and.w	r8, r3, r8
 800ab68:	e6e8      	b.n	800a93c <_strtod_l+0x604>
 800ab6a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ab6e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ab72:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ab76:	36e2      	adds	r6, #226	; 0xe2
 800ab78:	fa01 f306 	lsl.w	r3, r1, r6
 800ab7c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ab80:	e748      	b.n	800aa14 <_strtod_l+0x6dc>
 800ab82:	2100      	movs	r1, #0
 800ab84:	2301      	movs	r3, #1
 800ab86:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800ab8a:	e743      	b.n	800aa14 <_strtod_l+0x6dc>
 800ab8c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab8e:	4632      	mov	r2, r6
 800ab90:	4620      	mov	r0, r4
 800ab92:	f002 fc87 	bl	800d4a4 <__lshift>
 800ab96:	9016      	str	r0, [sp, #88]	; 0x58
 800ab98:	2800      	cmp	r0, #0
 800ab9a:	f47f af6b 	bne.w	800aa74 <_strtod_l+0x73c>
 800ab9e:	e60f      	b.n	800a7c0 <_strtod_l+0x488>
 800aba0:	46ca      	mov	sl, r9
 800aba2:	d171      	bne.n	800ac88 <_strtod_l+0x950>
 800aba4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aba6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abaa:	b352      	cbz	r2, 800ac02 <_strtod_l+0x8ca>
 800abac:	4a33      	ldr	r2, [pc, #204]	; (800ac7c <_strtod_l+0x944>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d12a      	bne.n	800ac08 <_strtod_l+0x8d0>
 800abb2:	9b04      	ldr	r3, [sp, #16]
 800abb4:	4641      	mov	r1, r8
 800abb6:	b1fb      	cbz	r3, 800abf8 <_strtod_l+0x8c0>
 800abb8:	4b2e      	ldr	r3, [pc, #184]	; (800ac74 <_strtod_l+0x93c>)
 800abba:	ea09 0303 	and.w	r3, r9, r3
 800abbe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800abc2:	f04f 32ff 	mov.w	r2, #4294967295
 800abc6:	d81a      	bhi.n	800abfe <_strtod_l+0x8c6>
 800abc8:	0d1b      	lsrs	r3, r3, #20
 800abca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800abce:	fa02 f303 	lsl.w	r3, r2, r3
 800abd2:	4299      	cmp	r1, r3
 800abd4:	d118      	bne.n	800ac08 <_strtod_l+0x8d0>
 800abd6:	4b2a      	ldr	r3, [pc, #168]	; (800ac80 <_strtod_l+0x948>)
 800abd8:	459a      	cmp	sl, r3
 800abda:	d102      	bne.n	800abe2 <_strtod_l+0x8aa>
 800abdc:	3101      	adds	r1, #1
 800abde:	f43f adef 	beq.w	800a7c0 <_strtod_l+0x488>
 800abe2:	4b24      	ldr	r3, [pc, #144]	; (800ac74 <_strtod_l+0x93c>)
 800abe4:	ea0a 0303 	and.w	r3, sl, r3
 800abe8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800abec:	f04f 0800 	mov.w	r8, #0
 800abf0:	9b04      	ldr	r3, [sp, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d1a2      	bne.n	800ab3c <_strtod_l+0x804>
 800abf6:	e5ed      	b.n	800a7d4 <_strtod_l+0x49c>
 800abf8:	f04f 33ff 	mov.w	r3, #4294967295
 800abfc:	e7e9      	b.n	800abd2 <_strtod_l+0x89a>
 800abfe:	4613      	mov	r3, r2
 800ac00:	e7e7      	b.n	800abd2 <_strtod_l+0x89a>
 800ac02:	ea53 0308 	orrs.w	r3, r3, r8
 800ac06:	d08a      	beq.n	800ab1e <_strtod_l+0x7e6>
 800ac08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac0a:	b1e3      	cbz	r3, 800ac46 <_strtod_l+0x90e>
 800ac0c:	ea13 0f0a 	tst.w	r3, sl
 800ac10:	d0ee      	beq.n	800abf0 <_strtod_l+0x8b8>
 800ac12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac14:	9a04      	ldr	r2, [sp, #16]
 800ac16:	4640      	mov	r0, r8
 800ac18:	4649      	mov	r1, r9
 800ac1a:	b1c3      	cbz	r3, 800ac4e <_strtod_l+0x916>
 800ac1c:	f7ff fb6d 	bl	800a2fa <sulp>
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	ec51 0b18 	vmov	r0, r1, d8
 800ac28:	f7f5 fb40 	bl	80002ac <__adddf3>
 800ac2c:	4680      	mov	r8, r0
 800ac2e:	4689      	mov	r9, r1
 800ac30:	e7de      	b.n	800abf0 <_strtod_l+0x8b8>
 800ac32:	4013      	ands	r3, r2
 800ac34:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ac38:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ac3c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ac40:	f04f 38ff 	mov.w	r8, #4294967295
 800ac44:	e7d4      	b.n	800abf0 <_strtod_l+0x8b8>
 800ac46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac48:	ea13 0f08 	tst.w	r3, r8
 800ac4c:	e7e0      	b.n	800ac10 <_strtod_l+0x8d8>
 800ac4e:	f7ff fb54 	bl	800a2fa <sulp>
 800ac52:	4602      	mov	r2, r0
 800ac54:	460b      	mov	r3, r1
 800ac56:	ec51 0b18 	vmov	r0, r1, d8
 800ac5a:	f7f5 fb25 	bl	80002a8 <__aeabi_dsub>
 800ac5e:	2200      	movs	r2, #0
 800ac60:	2300      	movs	r3, #0
 800ac62:	4680      	mov	r8, r0
 800ac64:	4689      	mov	r9, r1
 800ac66:	f7f5 ff3f 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	d0c0      	beq.n	800abf0 <_strtod_l+0x8b8>
 800ac6e:	e618      	b.n	800a8a2 <_strtod_l+0x56a>
 800ac70:	fffffc02 	.word	0xfffffc02
 800ac74:	7ff00000 	.word	0x7ff00000
 800ac78:	39500000 	.word	0x39500000
 800ac7c:	000fffff 	.word	0x000fffff
 800ac80:	7fefffff 	.word	0x7fefffff
 800ac84:	0800e538 	.word	0x0800e538
 800ac88:	4659      	mov	r1, fp
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	f002 fde6 	bl	800d85c <__ratio>
 800ac90:	ec57 6b10 	vmov	r6, r7, d0
 800ac94:	ee10 0a10 	vmov	r0, s0
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac9e:	4639      	mov	r1, r7
 800aca0:	f7f5 ff36 	bl	8000b10 <__aeabi_dcmple>
 800aca4:	2800      	cmp	r0, #0
 800aca6:	d071      	beq.n	800ad8c <_strtod_l+0xa54>
 800aca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d17c      	bne.n	800ada8 <_strtod_l+0xa70>
 800acae:	f1b8 0f00 	cmp.w	r8, #0
 800acb2:	d15a      	bne.n	800ad6a <_strtod_l+0xa32>
 800acb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d15d      	bne.n	800ad78 <_strtod_l+0xa40>
 800acbc:	4b90      	ldr	r3, [pc, #576]	; (800af00 <_strtod_l+0xbc8>)
 800acbe:	2200      	movs	r2, #0
 800acc0:	4630      	mov	r0, r6
 800acc2:	4639      	mov	r1, r7
 800acc4:	f7f5 ff1a 	bl	8000afc <__aeabi_dcmplt>
 800acc8:	2800      	cmp	r0, #0
 800acca:	d15c      	bne.n	800ad86 <_strtod_l+0xa4e>
 800accc:	4630      	mov	r0, r6
 800acce:	4639      	mov	r1, r7
 800acd0:	4b8c      	ldr	r3, [pc, #560]	; (800af04 <_strtod_l+0xbcc>)
 800acd2:	2200      	movs	r2, #0
 800acd4:	f7f5 fca0 	bl	8000618 <__aeabi_dmul>
 800acd8:	4606      	mov	r6, r0
 800acda:	460f      	mov	r7, r1
 800acdc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ace0:	9606      	str	r6, [sp, #24]
 800ace2:	9307      	str	r3, [sp, #28]
 800ace4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ace8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800acec:	4b86      	ldr	r3, [pc, #536]	; (800af08 <_strtod_l+0xbd0>)
 800acee:	ea0a 0303 	and.w	r3, sl, r3
 800acf2:	930d      	str	r3, [sp, #52]	; 0x34
 800acf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acf6:	4b85      	ldr	r3, [pc, #532]	; (800af0c <_strtod_l+0xbd4>)
 800acf8:	429a      	cmp	r2, r3
 800acfa:	f040 8090 	bne.w	800ae1e <_strtod_l+0xae6>
 800acfe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800ad02:	ec49 8b10 	vmov	d0, r8, r9
 800ad06:	f002 fcdf 	bl	800d6c8 <__ulp>
 800ad0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad0e:	ec51 0b10 	vmov	r0, r1, d0
 800ad12:	f7f5 fc81 	bl	8000618 <__aeabi_dmul>
 800ad16:	4642      	mov	r2, r8
 800ad18:	464b      	mov	r3, r9
 800ad1a:	f7f5 fac7 	bl	80002ac <__adddf3>
 800ad1e:	460b      	mov	r3, r1
 800ad20:	4979      	ldr	r1, [pc, #484]	; (800af08 <_strtod_l+0xbd0>)
 800ad22:	4a7b      	ldr	r2, [pc, #492]	; (800af10 <_strtod_l+0xbd8>)
 800ad24:	4019      	ands	r1, r3
 800ad26:	4291      	cmp	r1, r2
 800ad28:	4680      	mov	r8, r0
 800ad2a:	d944      	bls.n	800adb6 <_strtod_l+0xa7e>
 800ad2c:	ee18 2a90 	vmov	r2, s17
 800ad30:	4b78      	ldr	r3, [pc, #480]	; (800af14 <_strtod_l+0xbdc>)
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d104      	bne.n	800ad40 <_strtod_l+0xa08>
 800ad36:	ee18 3a10 	vmov	r3, s16
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	f43f ad40 	beq.w	800a7c0 <_strtod_l+0x488>
 800ad40:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800af14 <_strtod_l+0xbdc>
 800ad44:	f04f 38ff 	mov.w	r8, #4294967295
 800ad48:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f002 f990 	bl	800d070 <_Bfree>
 800ad50:	9905      	ldr	r1, [sp, #20]
 800ad52:	4620      	mov	r0, r4
 800ad54:	f002 f98c 	bl	800d070 <_Bfree>
 800ad58:	4659      	mov	r1, fp
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f002 f988 	bl	800d070 <_Bfree>
 800ad60:	4629      	mov	r1, r5
 800ad62:	4620      	mov	r0, r4
 800ad64:	f002 f984 	bl	800d070 <_Bfree>
 800ad68:	e609      	b.n	800a97e <_strtod_l+0x646>
 800ad6a:	f1b8 0f01 	cmp.w	r8, #1
 800ad6e:	d103      	bne.n	800ad78 <_strtod_l+0xa40>
 800ad70:	f1b9 0f00 	cmp.w	r9, #0
 800ad74:	f43f ad95 	beq.w	800a8a2 <_strtod_l+0x56a>
 800ad78:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800aed0 <_strtod_l+0xb98>
 800ad7c:	4f60      	ldr	r7, [pc, #384]	; (800af00 <_strtod_l+0xbc8>)
 800ad7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad82:	2600      	movs	r6, #0
 800ad84:	e7ae      	b.n	800ace4 <_strtod_l+0x9ac>
 800ad86:	4f5f      	ldr	r7, [pc, #380]	; (800af04 <_strtod_l+0xbcc>)
 800ad88:	2600      	movs	r6, #0
 800ad8a:	e7a7      	b.n	800acdc <_strtod_l+0x9a4>
 800ad8c:	4b5d      	ldr	r3, [pc, #372]	; (800af04 <_strtod_l+0xbcc>)
 800ad8e:	4630      	mov	r0, r6
 800ad90:	4639      	mov	r1, r7
 800ad92:	2200      	movs	r2, #0
 800ad94:	f7f5 fc40 	bl	8000618 <__aeabi_dmul>
 800ad98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	460f      	mov	r7, r1
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d09c      	beq.n	800acdc <_strtod_l+0x9a4>
 800ada2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ada6:	e79d      	b.n	800ace4 <_strtod_l+0x9ac>
 800ada8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800aed8 <_strtod_l+0xba0>
 800adac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800adb0:	ec57 6b17 	vmov	r6, r7, d7
 800adb4:	e796      	b.n	800ace4 <_strtod_l+0x9ac>
 800adb6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800adba:	9b04      	ldr	r3, [sp, #16]
 800adbc:	46ca      	mov	sl, r9
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1c2      	bne.n	800ad48 <_strtod_l+0xa10>
 800adc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800adc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adc8:	0d1b      	lsrs	r3, r3, #20
 800adca:	051b      	lsls	r3, r3, #20
 800adcc:	429a      	cmp	r2, r3
 800adce:	d1bb      	bne.n	800ad48 <_strtod_l+0xa10>
 800add0:	4630      	mov	r0, r6
 800add2:	4639      	mov	r1, r7
 800add4:	f7f5 ff18 	bl	8000c08 <__aeabi_d2lz>
 800add8:	f7f5 fbf0 	bl	80005bc <__aeabi_l2d>
 800addc:	4602      	mov	r2, r0
 800adde:	460b      	mov	r3, r1
 800ade0:	4630      	mov	r0, r6
 800ade2:	4639      	mov	r1, r7
 800ade4:	f7f5 fa60 	bl	80002a8 <__aeabi_dsub>
 800ade8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800adea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800adee:	ea43 0308 	orr.w	r3, r3, r8
 800adf2:	4313      	orrs	r3, r2
 800adf4:	4606      	mov	r6, r0
 800adf6:	460f      	mov	r7, r1
 800adf8:	d054      	beq.n	800aea4 <_strtod_l+0xb6c>
 800adfa:	a339      	add	r3, pc, #228	; (adr r3, 800aee0 <_strtod_l+0xba8>)
 800adfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae00:	f7f5 fe7c 	bl	8000afc <__aeabi_dcmplt>
 800ae04:	2800      	cmp	r0, #0
 800ae06:	f47f ace5 	bne.w	800a7d4 <_strtod_l+0x49c>
 800ae0a:	a337      	add	r3, pc, #220	; (adr r3, 800aee8 <_strtod_l+0xbb0>)
 800ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae10:	4630      	mov	r0, r6
 800ae12:	4639      	mov	r1, r7
 800ae14:	f7f5 fe90 	bl	8000b38 <__aeabi_dcmpgt>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d095      	beq.n	800ad48 <_strtod_l+0xa10>
 800ae1c:	e4da      	b.n	800a7d4 <_strtod_l+0x49c>
 800ae1e:	9b04      	ldr	r3, [sp, #16]
 800ae20:	b333      	cbz	r3, 800ae70 <_strtod_l+0xb38>
 800ae22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae24:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ae28:	d822      	bhi.n	800ae70 <_strtod_l+0xb38>
 800ae2a:	a331      	add	r3, pc, #196	; (adr r3, 800aef0 <_strtod_l+0xbb8>)
 800ae2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae30:	4630      	mov	r0, r6
 800ae32:	4639      	mov	r1, r7
 800ae34:	f7f5 fe6c 	bl	8000b10 <__aeabi_dcmple>
 800ae38:	b1a0      	cbz	r0, 800ae64 <_strtod_l+0xb2c>
 800ae3a:	4639      	mov	r1, r7
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	f7f5 fec3 	bl	8000bc8 <__aeabi_d2uiz>
 800ae42:	2801      	cmp	r0, #1
 800ae44:	bf38      	it	cc
 800ae46:	2001      	movcc	r0, #1
 800ae48:	f7f5 fb6c 	bl	8000524 <__aeabi_ui2d>
 800ae4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae4e:	4606      	mov	r6, r0
 800ae50:	460f      	mov	r7, r1
 800ae52:	bb23      	cbnz	r3, 800ae9e <_strtod_l+0xb66>
 800ae54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae58:	9010      	str	r0, [sp, #64]	; 0x40
 800ae5a:	9311      	str	r3, [sp, #68]	; 0x44
 800ae5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ae60:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ae64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae68:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ae6c:	1a9b      	subs	r3, r3, r2
 800ae6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae70:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ae74:	eeb0 0a48 	vmov.f32	s0, s16
 800ae78:	eef0 0a68 	vmov.f32	s1, s17
 800ae7c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ae80:	f002 fc22 	bl	800d6c8 <__ulp>
 800ae84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ae88:	ec53 2b10 	vmov	r2, r3, d0
 800ae8c:	f7f5 fbc4 	bl	8000618 <__aeabi_dmul>
 800ae90:	ec53 2b18 	vmov	r2, r3, d8
 800ae94:	f7f5 fa0a 	bl	80002ac <__adddf3>
 800ae98:	4680      	mov	r8, r0
 800ae9a:	4689      	mov	r9, r1
 800ae9c:	e78d      	b.n	800adba <_strtod_l+0xa82>
 800ae9e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800aea2:	e7db      	b.n	800ae5c <_strtod_l+0xb24>
 800aea4:	a314      	add	r3, pc, #80	; (adr r3, 800aef8 <_strtod_l+0xbc0>)
 800aea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeaa:	f7f5 fe27 	bl	8000afc <__aeabi_dcmplt>
 800aeae:	e7b3      	b.n	800ae18 <_strtod_l+0xae0>
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	930a      	str	r3, [sp, #40]	; 0x28
 800aeb4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800aeb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aeb8:	6013      	str	r3, [r2, #0]
 800aeba:	f7ff ba7c 	b.w	800a3b6 <_strtod_l+0x7e>
 800aebe:	2a65      	cmp	r2, #101	; 0x65
 800aec0:	f43f ab75 	beq.w	800a5ae <_strtod_l+0x276>
 800aec4:	2a45      	cmp	r2, #69	; 0x45
 800aec6:	f43f ab72 	beq.w	800a5ae <_strtod_l+0x276>
 800aeca:	2301      	movs	r3, #1
 800aecc:	f7ff bbaa 	b.w	800a624 <_strtod_l+0x2ec>
 800aed0:	00000000 	.word	0x00000000
 800aed4:	bff00000 	.word	0xbff00000
 800aed8:	00000000 	.word	0x00000000
 800aedc:	3ff00000 	.word	0x3ff00000
 800aee0:	94a03595 	.word	0x94a03595
 800aee4:	3fdfffff 	.word	0x3fdfffff
 800aee8:	35afe535 	.word	0x35afe535
 800aeec:	3fe00000 	.word	0x3fe00000
 800aef0:	ffc00000 	.word	0xffc00000
 800aef4:	41dfffff 	.word	0x41dfffff
 800aef8:	94a03595 	.word	0x94a03595
 800aefc:	3fcfffff 	.word	0x3fcfffff
 800af00:	3ff00000 	.word	0x3ff00000
 800af04:	3fe00000 	.word	0x3fe00000
 800af08:	7ff00000 	.word	0x7ff00000
 800af0c:	7fe00000 	.word	0x7fe00000
 800af10:	7c9fffff 	.word	0x7c9fffff
 800af14:	7fefffff 	.word	0x7fefffff

0800af18 <strtod>:
 800af18:	460a      	mov	r2, r1
 800af1a:	4601      	mov	r1, r0
 800af1c:	4802      	ldr	r0, [pc, #8]	; (800af28 <strtod+0x10>)
 800af1e:	4b03      	ldr	r3, [pc, #12]	; (800af2c <strtod+0x14>)
 800af20:	6800      	ldr	r0, [r0, #0]
 800af22:	f7ff ba09 	b.w	800a338 <_strtod_l>
 800af26:	bf00      	nop
 800af28:	20000258 	.word	0x20000258
 800af2c:	200000a0 	.word	0x200000a0

0800af30 <__cvt>:
 800af30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af34:	ec55 4b10 	vmov	r4, r5, d0
 800af38:	2d00      	cmp	r5, #0
 800af3a:	460e      	mov	r6, r1
 800af3c:	4619      	mov	r1, r3
 800af3e:	462b      	mov	r3, r5
 800af40:	bfbb      	ittet	lt
 800af42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800af46:	461d      	movlt	r5, r3
 800af48:	2300      	movge	r3, #0
 800af4a:	232d      	movlt	r3, #45	; 0x2d
 800af4c:	700b      	strb	r3, [r1, #0]
 800af4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af50:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800af54:	4691      	mov	r9, r2
 800af56:	f023 0820 	bic.w	r8, r3, #32
 800af5a:	bfbc      	itt	lt
 800af5c:	4622      	movlt	r2, r4
 800af5e:	4614      	movlt	r4, r2
 800af60:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af64:	d005      	beq.n	800af72 <__cvt+0x42>
 800af66:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800af6a:	d100      	bne.n	800af6e <__cvt+0x3e>
 800af6c:	3601      	adds	r6, #1
 800af6e:	2102      	movs	r1, #2
 800af70:	e000      	b.n	800af74 <__cvt+0x44>
 800af72:	2103      	movs	r1, #3
 800af74:	ab03      	add	r3, sp, #12
 800af76:	9301      	str	r3, [sp, #4]
 800af78:	ab02      	add	r3, sp, #8
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	ec45 4b10 	vmov	d0, r4, r5
 800af80:	4653      	mov	r3, sl
 800af82:	4632      	mov	r2, r6
 800af84:	f000 fe8c 	bl	800bca0 <_dtoa_r>
 800af88:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800af8c:	4607      	mov	r7, r0
 800af8e:	d102      	bne.n	800af96 <__cvt+0x66>
 800af90:	f019 0f01 	tst.w	r9, #1
 800af94:	d022      	beq.n	800afdc <__cvt+0xac>
 800af96:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af9a:	eb07 0906 	add.w	r9, r7, r6
 800af9e:	d110      	bne.n	800afc2 <__cvt+0x92>
 800afa0:	783b      	ldrb	r3, [r7, #0]
 800afa2:	2b30      	cmp	r3, #48	; 0x30
 800afa4:	d10a      	bne.n	800afbc <__cvt+0x8c>
 800afa6:	2200      	movs	r2, #0
 800afa8:	2300      	movs	r3, #0
 800afaa:	4620      	mov	r0, r4
 800afac:	4629      	mov	r1, r5
 800afae:	f7f5 fd9b 	bl	8000ae8 <__aeabi_dcmpeq>
 800afb2:	b918      	cbnz	r0, 800afbc <__cvt+0x8c>
 800afb4:	f1c6 0601 	rsb	r6, r6, #1
 800afb8:	f8ca 6000 	str.w	r6, [sl]
 800afbc:	f8da 3000 	ldr.w	r3, [sl]
 800afc0:	4499      	add	r9, r3
 800afc2:	2200      	movs	r2, #0
 800afc4:	2300      	movs	r3, #0
 800afc6:	4620      	mov	r0, r4
 800afc8:	4629      	mov	r1, r5
 800afca:	f7f5 fd8d 	bl	8000ae8 <__aeabi_dcmpeq>
 800afce:	b108      	cbz	r0, 800afd4 <__cvt+0xa4>
 800afd0:	f8cd 900c 	str.w	r9, [sp, #12]
 800afd4:	2230      	movs	r2, #48	; 0x30
 800afd6:	9b03      	ldr	r3, [sp, #12]
 800afd8:	454b      	cmp	r3, r9
 800afda:	d307      	bcc.n	800afec <__cvt+0xbc>
 800afdc:	9b03      	ldr	r3, [sp, #12]
 800afde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afe0:	1bdb      	subs	r3, r3, r7
 800afe2:	4638      	mov	r0, r7
 800afe4:	6013      	str	r3, [r2, #0]
 800afe6:	b004      	add	sp, #16
 800afe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afec:	1c59      	adds	r1, r3, #1
 800afee:	9103      	str	r1, [sp, #12]
 800aff0:	701a      	strb	r2, [r3, #0]
 800aff2:	e7f0      	b.n	800afd6 <__cvt+0xa6>

0800aff4 <__exponent>:
 800aff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aff6:	4603      	mov	r3, r0
 800aff8:	2900      	cmp	r1, #0
 800affa:	bfb8      	it	lt
 800affc:	4249      	neglt	r1, r1
 800affe:	f803 2b02 	strb.w	r2, [r3], #2
 800b002:	bfb4      	ite	lt
 800b004:	222d      	movlt	r2, #45	; 0x2d
 800b006:	222b      	movge	r2, #43	; 0x2b
 800b008:	2909      	cmp	r1, #9
 800b00a:	7042      	strb	r2, [r0, #1]
 800b00c:	dd2a      	ble.n	800b064 <__exponent+0x70>
 800b00e:	f10d 0207 	add.w	r2, sp, #7
 800b012:	4617      	mov	r7, r2
 800b014:	260a      	movs	r6, #10
 800b016:	4694      	mov	ip, r2
 800b018:	fb91 f5f6 	sdiv	r5, r1, r6
 800b01c:	fb06 1415 	mls	r4, r6, r5, r1
 800b020:	3430      	adds	r4, #48	; 0x30
 800b022:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b026:	460c      	mov	r4, r1
 800b028:	2c63      	cmp	r4, #99	; 0x63
 800b02a:	f102 32ff 	add.w	r2, r2, #4294967295
 800b02e:	4629      	mov	r1, r5
 800b030:	dcf1      	bgt.n	800b016 <__exponent+0x22>
 800b032:	3130      	adds	r1, #48	; 0x30
 800b034:	f1ac 0402 	sub.w	r4, ip, #2
 800b038:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b03c:	1c41      	adds	r1, r0, #1
 800b03e:	4622      	mov	r2, r4
 800b040:	42ba      	cmp	r2, r7
 800b042:	d30a      	bcc.n	800b05a <__exponent+0x66>
 800b044:	f10d 0209 	add.w	r2, sp, #9
 800b048:	eba2 020c 	sub.w	r2, r2, ip
 800b04c:	42bc      	cmp	r4, r7
 800b04e:	bf88      	it	hi
 800b050:	2200      	movhi	r2, #0
 800b052:	4413      	add	r3, r2
 800b054:	1a18      	subs	r0, r3, r0
 800b056:	b003      	add	sp, #12
 800b058:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b05a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b05e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b062:	e7ed      	b.n	800b040 <__exponent+0x4c>
 800b064:	2330      	movs	r3, #48	; 0x30
 800b066:	3130      	adds	r1, #48	; 0x30
 800b068:	7083      	strb	r3, [r0, #2]
 800b06a:	70c1      	strb	r1, [r0, #3]
 800b06c:	1d03      	adds	r3, r0, #4
 800b06e:	e7f1      	b.n	800b054 <__exponent+0x60>

0800b070 <_printf_float>:
 800b070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b074:	ed2d 8b02 	vpush	{d8}
 800b078:	b08d      	sub	sp, #52	; 0x34
 800b07a:	460c      	mov	r4, r1
 800b07c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b080:	4616      	mov	r6, r2
 800b082:	461f      	mov	r7, r3
 800b084:	4605      	mov	r5, r0
 800b086:	f000 fce7 	bl	800ba58 <_localeconv_r>
 800b08a:	f8d0 a000 	ldr.w	sl, [r0]
 800b08e:	4650      	mov	r0, sl
 800b090:	f7f5 f8fe 	bl	8000290 <strlen>
 800b094:	2300      	movs	r3, #0
 800b096:	930a      	str	r3, [sp, #40]	; 0x28
 800b098:	6823      	ldr	r3, [r4, #0]
 800b09a:	9305      	str	r3, [sp, #20]
 800b09c:	f8d8 3000 	ldr.w	r3, [r8]
 800b0a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b0a4:	3307      	adds	r3, #7
 800b0a6:	f023 0307 	bic.w	r3, r3, #7
 800b0aa:	f103 0208 	add.w	r2, r3, #8
 800b0ae:	f8c8 2000 	str.w	r2, [r8]
 800b0b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b0ba:	9307      	str	r3, [sp, #28]
 800b0bc:	f8cd 8018 	str.w	r8, [sp, #24]
 800b0c0:	ee08 0a10 	vmov	s16, r0
 800b0c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b0c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0cc:	4b9e      	ldr	r3, [pc, #632]	; (800b348 <_printf_float+0x2d8>)
 800b0ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d2:	f7f5 fd3b 	bl	8000b4c <__aeabi_dcmpun>
 800b0d6:	bb88      	cbnz	r0, 800b13c <_printf_float+0xcc>
 800b0d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0dc:	4b9a      	ldr	r3, [pc, #616]	; (800b348 <_printf_float+0x2d8>)
 800b0de:	f04f 32ff 	mov.w	r2, #4294967295
 800b0e2:	f7f5 fd15 	bl	8000b10 <__aeabi_dcmple>
 800b0e6:	bb48      	cbnz	r0, 800b13c <_printf_float+0xcc>
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	4640      	mov	r0, r8
 800b0ee:	4649      	mov	r1, r9
 800b0f0:	f7f5 fd04 	bl	8000afc <__aeabi_dcmplt>
 800b0f4:	b110      	cbz	r0, 800b0fc <_printf_float+0x8c>
 800b0f6:	232d      	movs	r3, #45	; 0x2d
 800b0f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0fc:	4a93      	ldr	r2, [pc, #588]	; (800b34c <_printf_float+0x2dc>)
 800b0fe:	4b94      	ldr	r3, [pc, #592]	; (800b350 <_printf_float+0x2e0>)
 800b100:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b104:	bf94      	ite	ls
 800b106:	4690      	movls	r8, r2
 800b108:	4698      	movhi	r8, r3
 800b10a:	2303      	movs	r3, #3
 800b10c:	6123      	str	r3, [r4, #16]
 800b10e:	9b05      	ldr	r3, [sp, #20]
 800b110:	f023 0304 	bic.w	r3, r3, #4
 800b114:	6023      	str	r3, [r4, #0]
 800b116:	f04f 0900 	mov.w	r9, #0
 800b11a:	9700      	str	r7, [sp, #0]
 800b11c:	4633      	mov	r3, r6
 800b11e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b120:	4621      	mov	r1, r4
 800b122:	4628      	mov	r0, r5
 800b124:	f000 f9da 	bl	800b4dc <_printf_common>
 800b128:	3001      	adds	r0, #1
 800b12a:	f040 8090 	bne.w	800b24e <_printf_float+0x1de>
 800b12e:	f04f 30ff 	mov.w	r0, #4294967295
 800b132:	b00d      	add	sp, #52	; 0x34
 800b134:	ecbd 8b02 	vpop	{d8}
 800b138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b13c:	4642      	mov	r2, r8
 800b13e:	464b      	mov	r3, r9
 800b140:	4640      	mov	r0, r8
 800b142:	4649      	mov	r1, r9
 800b144:	f7f5 fd02 	bl	8000b4c <__aeabi_dcmpun>
 800b148:	b140      	cbz	r0, 800b15c <_printf_float+0xec>
 800b14a:	464b      	mov	r3, r9
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	bfbc      	itt	lt
 800b150:	232d      	movlt	r3, #45	; 0x2d
 800b152:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b156:	4a7f      	ldr	r2, [pc, #508]	; (800b354 <_printf_float+0x2e4>)
 800b158:	4b7f      	ldr	r3, [pc, #508]	; (800b358 <_printf_float+0x2e8>)
 800b15a:	e7d1      	b.n	800b100 <_printf_float+0x90>
 800b15c:	6863      	ldr	r3, [r4, #4]
 800b15e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b162:	9206      	str	r2, [sp, #24]
 800b164:	1c5a      	adds	r2, r3, #1
 800b166:	d13f      	bne.n	800b1e8 <_printf_float+0x178>
 800b168:	2306      	movs	r3, #6
 800b16a:	6063      	str	r3, [r4, #4]
 800b16c:	9b05      	ldr	r3, [sp, #20]
 800b16e:	6861      	ldr	r1, [r4, #4]
 800b170:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b174:	2300      	movs	r3, #0
 800b176:	9303      	str	r3, [sp, #12]
 800b178:	ab0a      	add	r3, sp, #40	; 0x28
 800b17a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b17e:	ab09      	add	r3, sp, #36	; 0x24
 800b180:	ec49 8b10 	vmov	d0, r8, r9
 800b184:	9300      	str	r3, [sp, #0]
 800b186:	6022      	str	r2, [r4, #0]
 800b188:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b18c:	4628      	mov	r0, r5
 800b18e:	f7ff fecf 	bl	800af30 <__cvt>
 800b192:	9b06      	ldr	r3, [sp, #24]
 800b194:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b196:	2b47      	cmp	r3, #71	; 0x47
 800b198:	4680      	mov	r8, r0
 800b19a:	d108      	bne.n	800b1ae <_printf_float+0x13e>
 800b19c:	1cc8      	adds	r0, r1, #3
 800b19e:	db02      	blt.n	800b1a6 <_printf_float+0x136>
 800b1a0:	6863      	ldr	r3, [r4, #4]
 800b1a2:	4299      	cmp	r1, r3
 800b1a4:	dd41      	ble.n	800b22a <_printf_float+0x1ba>
 800b1a6:	f1ab 0302 	sub.w	r3, fp, #2
 800b1aa:	fa5f fb83 	uxtb.w	fp, r3
 800b1ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b1b2:	d820      	bhi.n	800b1f6 <_printf_float+0x186>
 800b1b4:	3901      	subs	r1, #1
 800b1b6:	465a      	mov	r2, fp
 800b1b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b1bc:	9109      	str	r1, [sp, #36]	; 0x24
 800b1be:	f7ff ff19 	bl	800aff4 <__exponent>
 800b1c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1c4:	1813      	adds	r3, r2, r0
 800b1c6:	2a01      	cmp	r2, #1
 800b1c8:	4681      	mov	r9, r0
 800b1ca:	6123      	str	r3, [r4, #16]
 800b1cc:	dc02      	bgt.n	800b1d4 <_printf_float+0x164>
 800b1ce:	6822      	ldr	r2, [r4, #0]
 800b1d0:	07d2      	lsls	r2, r2, #31
 800b1d2:	d501      	bpl.n	800b1d8 <_printf_float+0x168>
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	6123      	str	r3, [r4, #16]
 800b1d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d09c      	beq.n	800b11a <_printf_float+0xaa>
 800b1e0:	232d      	movs	r3, #45	; 0x2d
 800b1e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1e6:	e798      	b.n	800b11a <_printf_float+0xaa>
 800b1e8:	9a06      	ldr	r2, [sp, #24]
 800b1ea:	2a47      	cmp	r2, #71	; 0x47
 800b1ec:	d1be      	bne.n	800b16c <_printf_float+0xfc>
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1bc      	bne.n	800b16c <_printf_float+0xfc>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e7b9      	b.n	800b16a <_printf_float+0xfa>
 800b1f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b1fa:	d118      	bne.n	800b22e <_printf_float+0x1be>
 800b1fc:	2900      	cmp	r1, #0
 800b1fe:	6863      	ldr	r3, [r4, #4]
 800b200:	dd0b      	ble.n	800b21a <_printf_float+0x1aa>
 800b202:	6121      	str	r1, [r4, #16]
 800b204:	b913      	cbnz	r3, 800b20c <_printf_float+0x19c>
 800b206:	6822      	ldr	r2, [r4, #0]
 800b208:	07d0      	lsls	r0, r2, #31
 800b20a:	d502      	bpl.n	800b212 <_printf_float+0x1a2>
 800b20c:	3301      	adds	r3, #1
 800b20e:	440b      	add	r3, r1
 800b210:	6123      	str	r3, [r4, #16]
 800b212:	65a1      	str	r1, [r4, #88]	; 0x58
 800b214:	f04f 0900 	mov.w	r9, #0
 800b218:	e7de      	b.n	800b1d8 <_printf_float+0x168>
 800b21a:	b913      	cbnz	r3, 800b222 <_printf_float+0x1b2>
 800b21c:	6822      	ldr	r2, [r4, #0]
 800b21e:	07d2      	lsls	r2, r2, #31
 800b220:	d501      	bpl.n	800b226 <_printf_float+0x1b6>
 800b222:	3302      	adds	r3, #2
 800b224:	e7f4      	b.n	800b210 <_printf_float+0x1a0>
 800b226:	2301      	movs	r3, #1
 800b228:	e7f2      	b.n	800b210 <_printf_float+0x1a0>
 800b22a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b230:	4299      	cmp	r1, r3
 800b232:	db05      	blt.n	800b240 <_printf_float+0x1d0>
 800b234:	6823      	ldr	r3, [r4, #0]
 800b236:	6121      	str	r1, [r4, #16]
 800b238:	07d8      	lsls	r0, r3, #31
 800b23a:	d5ea      	bpl.n	800b212 <_printf_float+0x1a2>
 800b23c:	1c4b      	adds	r3, r1, #1
 800b23e:	e7e7      	b.n	800b210 <_printf_float+0x1a0>
 800b240:	2900      	cmp	r1, #0
 800b242:	bfd4      	ite	le
 800b244:	f1c1 0202 	rsble	r2, r1, #2
 800b248:	2201      	movgt	r2, #1
 800b24a:	4413      	add	r3, r2
 800b24c:	e7e0      	b.n	800b210 <_printf_float+0x1a0>
 800b24e:	6823      	ldr	r3, [r4, #0]
 800b250:	055a      	lsls	r2, r3, #21
 800b252:	d407      	bmi.n	800b264 <_printf_float+0x1f4>
 800b254:	6923      	ldr	r3, [r4, #16]
 800b256:	4642      	mov	r2, r8
 800b258:	4631      	mov	r1, r6
 800b25a:	4628      	mov	r0, r5
 800b25c:	47b8      	blx	r7
 800b25e:	3001      	adds	r0, #1
 800b260:	d12c      	bne.n	800b2bc <_printf_float+0x24c>
 800b262:	e764      	b.n	800b12e <_printf_float+0xbe>
 800b264:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b268:	f240 80e0 	bls.w	800b42c <_printf_float+0x3bc>
 800b26c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b270:	2200      	movs	r2, #0
 800b272:	2300      	movs	r3, #0
 800b274:	f7f5 fc38 	bl	8000ae8 <__aeabi_dcmpeq>
 800b278:	2800      	cmp	r0, #0
 800b27a:	d034      	beq.n	800b2e6 <_printf_float+0x276>
 800b27c:	4a37      	ldr	r2, [pc, #220]	; (800b35c <_printf_float+0x2ec>)
 800b27e:	2301      	movs	r3, #1
 800b280:	4631      	mov	r1, r6
 800b282:	4628      	mov	r0, r5
 800b284:	47b8      	blx	r7
 800b286:	3001      	adds	r0, #1
 800b288:	f43f af51 	beq.w	800b12e <_printf_float+0xbe>
 800b28c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b290:	429a      	cmp	r2, r3
 800b292:	db02      	blt.n	800b29a <_printf_float+0x22a>
 800b294:	6823      	ldr	r3, [r4, #0]
 800b296:	07d8      	lsls	r0, r3, #31
 800b298:	d510      	bpl.n	800b2bc <_printf_float+0x24c>
 800b29a:	ee18 3a10 	vmov	r3, s16
 800b29e:	4652      	mov	r2, sl
 800b2a0:	4631      	mov	r1, r6
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	47b8      	blx	r7
 800b2a6:	3001      	adds	r0, #1
 800b2a8:	f43f af41 	beq.w	800b12e <_printf_float+0xbe>
 800b2ac:	f04f 0800 	mov.w	r8, #0
 800b2b0:	f104 091a 	add.w	r9, r4, #26
 800b2b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2b6:	3b01      	subs	r3, #1
 800b2b8:	4543      	cmp	r3, r8
 800b2ba:	dc09      	bgt.n	800b2d0 <_printf_float+0x260>
 800b2bc:	6823      	ldr	r3, [r4, #0]
 800b2be:	079b      	lsls	r3, r3, #30
 800b2c0:	f100 8107 	bmi.w	800b4d2 <_printf_float+0x462>
 800b2c4:	68e0      	ldr	r0, [r4, #12]
 800b2c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2c8:	4298      	cmp	r0, r3
 800b2ca:	bfb8      	it	lt
 800b2cc:	4618      	movlt	r0, r3
 800b2ce:	e730      	b.n	800b132 <_printf_float+0xc2>
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	464a      	mov	r2, r9
 800b2d4:	4631      	mov	r1, r6
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	47b8      	blx	r7
 800b2da:	3001      	adds	r0, #1
 800b2dc:	f43f af27 	beq.w	800b12e <_printf_float+0xbe>
 800b2e0:	f108 0801 	add.w	r8, r8, #1
 800b2e4:	e7e6      	b.n	800b2b4 <_printf_float+0x244>
 800b2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	dc39      	bgt.n	800b360 <_printf_float+0x2f0>
 800b2ec:	4a1b      	ldr	r2, [pc, #108]	; (800b35c <_printf_float+0x2ec>)
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	4631      	mov	r1, r6
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	47b8      	blx	r7
 800b2f6:	3001      	adds	r0, #1
 800b2f8:	f43f af19 	beq.w	800b12e <_printf_float+0xbe>
 800b2fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b300:	4313      	orrs	r3, r2
 800b302:	d102      	bne.n	800b30a <_printf_float+0x29a>
 800b304:	6823      	ldr	r3, [r4, #0]
 800b306:	07d9      	lsls	r1, r3, #31
 800b308:	d5d8      	bpl.n	800b2bc <_printf_float+0x24c>
 800b30a:	ee18 3a10 	vmov	r3, s16
 800b30e:	4652      	mov	r2, sl
 800b310:	4631      	mov	r1, r6
 800b312:	4628      	mov	r0, r5
 800b314:	47b8      	blx	r7
 800b316:	3001      	adds	r0, #1
 800b318:	f43f af09 	beq.w	800b12e <_printf_float+0xbe>
 800b31c:	f04f 0900 	mov.w	r9, #0
 800b320:	f104 0a1a 	add.w	sl, r4, #26
 800b324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b326:	425b      	negs	r3, r3
 800b328:	454b      	cmp	r3, r9
 800b32a:	dc01      	bgt.n	800b330 <_printf_float+0x2c0>
 800b32c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b32e:	e792      	b.n	800b256 <_printf_float+0x1e6>
 800b330:	2301      	movs	r3, #1
 800b332:	4652      	mov	r2, sl
 800b334:	4631      	mov	r1, r6
 800b336:	4628      	mov	r0, r5
 800b338:	47b8      	blx	r7
 800b33a:	3001      	adds	r0, #1
 800b33c:	f43f aef7 	beq.w	800b12e <_printf_float+0xbe>
 800b340:	f109 0901 	add.w	r9, r9, #1
 800b344:	e7ee      	b.n	800b324 <_printf_float+0x2b4>
 800b346:	bf00      	nop
 800b348:	7fefffff 	.word	0x7fefffff
 800b34c:	0800e661 	.word	0x0800e661
 800b350:	0800e665 	.word	0x0800e665
 800b354:	0800e669 	.word	0x0800e669
 800b358:	0800e66d 	.word	0x0800e66d
 800b35c:	0800e671 	.word	0x0800e671
 800b360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b362:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b364:	429a      	cmp	r2, r3
 800b366:	bfa8      	it	ge
 800b368:	461a      	movge	r2, r3
 800b36a:	2a00      	cmp	r2, #0
 800b36c:	4691      	mov	r9, r2
 800b36e:	dc37      	bgt.n	800b3e0 <_printf_float+0x370>
 800b370:	f04f 0b00 	mov.w	fp, #0
 800b374:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b378:	f104 021a 	add.w	r2, r4, #26
 800b37c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b37e:	9305      	str	r3, [sp, #20]
 800b380:	eba3 0309 	sub.w	r3, r3, r9
 800b384:	455b      	cmp	r3, fp
 800b386:	dc33      	bgt.n	800b3f0 <_printf_float+0x380>
 800b388:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b38c:	429a      	cmp	r2, r3
 800b38e:	db3b      	blt.n	800b408 <_printf_float+0x398>
 800b390:	6823      	ldr	r3, [r4, #0]
 800b392:	07da      	lsls	r2, r3, #31
 800b394:	d438      	bmi.n	800b408 <_printf_float+0x398>
 800b396:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b39a:	eba2 0903 	sub.w	r9, r2, r3
 800b39e:	9b05      	ldr	r3, [sp, #20]
 800b3a0:	1ad2      	subs	r2, r2, r3
 800b3a2:	4591      	cmp	r9, r2
 800b3a4:	bfa8      	it	ge
 800b3a6:	4691      	movge	r9, r2
 800b3a8:	f1b9 0f00 	cmp.w	r9, #0
 800b3ac:	dc35      	bgt.n	800b41a <_printf_float+0x3aa>
 800b3ae:	f04f 0800 	mov.w	r8, #0
 800b3b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3b6:	f104 0a1a 	add.w	sl, r4, #26
 800b3ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3be:	1a9b      	subs	r3, r3, r2
 800b3c0:	eba3 0309 	sub.w	r3, r3, r9
 800b3c4:	4543      	cmp	r3, r8
 800b3c6:	f77f af79 	ble.w	800b2bc <_printf_float+0x24c>
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	4652      	mov	r2, sl
 800b3ce:	4631      	mov	r1, r6
 800b3d0:	4628      	mov	r0, r5
 800b3d2:	47b8      	blx	r7
 800b3d4:	3001      	adds	r0, #1
 800b3d6:	f43f aeaa 	beq.w	800b12e <_printf_float+0xbe>
 800b3da:	f108 0801 	add.w	r8, r8, #1
 800b3de:	e7ec      	b.n	800b3ba <_printf_float+0x34a>
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	4631      	mov	r1, r6
 800b3e4:	4642      	mov	r2, r8
 800b3e6:	4628      	mov	r0, r5
 800b3e8:	47b8      	blx	r7
 800b3ea:	3001      	adds	r0, #1
 800b3ec:	d1c0      	bne.n	800b370 <_printf_float+0x300>
 800b3ee:	e69e      	b.n	800b12e <_printf_float+0xbe>
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	4631      	mov	r1, r6
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	9205      	str	r2, [sp, #20]
 800b3f8:	47b8      	blx	r7
 800b3fa:	3001      	adds	r0, #1
 800b3fc:	f43f ae97 	beq.w	800b12e <_printf_float+0xbe>
 800b400:	9a05      	ldr	r2, [sp, #20]
 800b402:	f10b 0b01 	add.w	fp, fp, #1
 800b406:	e7b9      	b.n	800b37c <_printf_float+0x30c>
 800b408:	ee18 3a10 	vmov	r3, s16
 800b40c:	4652      	mov	r2, sl
 800b40e:	4631      	mov	r1, r6
 800b410:	4628      	mov	r0, r5
 800b412:	47b8      	blx	r7
 800b414:	3001      	adds	r0, #1
 800b416:	d1be      	bne.n	800b396 <_printf_float+0x326>
 800b418:	e689      	b.n	800b12e <_printf_float+0xbe>
 800b41a:	9a05      	ldr	r2, [sp, #20]
 800b41c:	464b      	mov	r3, r9
 800b41e:	4442      	add	r2, r8
 800b420:	4631      	mov	r1, r6
 800b422:	4628      	mov	r0, r5
 800b424:	47b8      	blx	r7
 800b426:	3001      	adds	r0, #1
 800b428:	d1c1      	bne.n	800b3ae <_printf_float+0x33e>
 800b42a:	e680      	b.n	800b12e <_printf_float+0xbe>
 800b42c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b42e:	2a01      	cmp	r2, #1
 800b430:	dc01      	bgt.n	800b436 <_printf_float+0x3c6>
 800b432:	07db      	lsls	r3, r3, #31
 800b434:	d53a      	bpl.n	800b4ac <_printf_float+0x43c>
 800b436:	2301      	movs	r3, #1
 800b438:	4642      	mov	r2, r8
 800b43a:	4631      	mov	r1, r6
 800b43c:	4628      	mov	r0, r5
 800b43e:	47b8      	blx	r7
 800b440:	3001      	adds	r0, #1
 800b442:	f43f ae74 	beq.w	800b12e <_printf_float+0xbe>
 800b446:	ee18 3a10 	vmov	r3, s16
 800b44a:	4652      	mov	r2, sl
 800b44c:	4631      	mov	r1, r6
 800b44e:	4628      	mov	r0, r5
 800b450:	47b8      	blx	r7
 800b452:	3001      	adds	r0, #1
 800b454:	f43f ae6b 	beq.w	800b12e <_printf_float+0xbe>
 800b458:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b45c:	2200      	movs	r2, #0
 800b45e:	2300      	movs	r3, #0
 800b460:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b464:	f7f5 fb40 	bl	8000ae8 <__aeabi_dcmpeq>
 800b468:	b9d8      	cbnz	r0, 800b4a2 <_printf_float+0x432>
 800b46a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b46e:	f108 0201 	add.w	r2, r8, #1
 800b472:	4631      	mov	r1, r6
 800b474:	4628      	mov	r0, r5
 800b476:	47b8      	blx	r7
 800b478:	3001      	adds	r0, #1
 800b47a:	d10e      	bne.n	800b49a <_printf_float+0x42a>
 800b47c:	e657      	b.n	800b12e <_printf_float+0xbe>
 800b47e:	2301      	movs	r3, #1
 800b480:	4652      	mov	r2, sl
 800b482:	4631      	mov	r1, r6
 800b484:	4628      	mov	r0, r5
 800b486:	47b8      	blx	r7
 800b488:	3001      	adds	r0, #1
 800b48a:	f43f ae50 	beq.w	800b12e <_printf_float+0xbe>
 800b48e:	f108 0801 	add.w	r8, r8, #1
 800b492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b494:	3b01      	subs	r3, #1
 800b496:	4543      	cmp	r3, r8
 800b498:	dcf1      	bgt.n	800b47e <_printf_float+0x40e>
 800b49a:	464b      	mov	r3, r9
 800b49c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b4a0:	e6da      	b.n	800b258 <_printf_float+0x1e8>
 800b4a2:	f04f 0800 	mov.w	r8, #0
 800b4a6:	f104 0a1a 	add.w	sl, r4, #26
 800b4aa:	e7f2      	b.n	800b492 <_printf_float+0x422>
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	4642      	mov	r2, r8
 800b4b0:	e7df      	b.n	800b472 <_printf_float+0x402>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	464a      	mov	r2, r9
 800b4b6:	4631      	mov	r1, r6
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	47b8      	blx	r7
 800b4bc:	3001      	adds	r0, #1
 800b4be:	f43f ae36 	beq.w	800b12e <_printf_float+0xbe>
 800b4c2:	f108 0801 	add.w	r8, r8, #1
 800b4c6:	68e3      	ldr	r3, [r4, #12]
 800b4c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b4ca:	1a5b      	subs	r3, r3, r1
 800b4cc:	4543      	cmp	r3, r8
 800b4ce:	dcf0      	bgt.n	800b4b2 <_printf_float+0x442>
 800b4d0:	e6f8      	b.n	800b2c4 <_printf_float+0x254>
 800b4d2:	f04f 0800 	mov.w	r8, #0
 800b4d6:	f104 0919 	add.w	r9, r4, #25
 800b4da:	e7f4      	b.n	800b4c6 <_printf_float+0x456>

0800b4dc <_printf_common>:
 800b4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4e0:	4616      	mov	r6, r2
 800b4e2:	4699      	mov	r9, r3
 800b4e4:	688a      	ldr	r2, [r1, #8]
 800b4e6:	690b      	ldr	r3, [r1, #16]
 800b4e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	bfb8      	it	lt
 800b4f0:	4613      	movlt	r3, r2
 800b4f2:	6033      	str	r3, [r6, #0]
 800b4f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4f8:	4607      	mov	r7, r0
 800b4fa:	460c      	mov	r4, r1
 800b4fc:	b10a      	cbz	r2, 800b502 <_printf_common+0x26>
 800b4fe:	3301      	adds	r3, #1
 800b500:	6033      	str	r3, [r6, #0]
 800b502:	6823      	ldr	r3, [r4, #0]
 800b504:	0699      	lsls	r1, r3, #26
 800b506:	bf42      	ittt	mi
 800b508:	6833      	ldrmi	r3, [r6, #0]
 800b50a:	3302      	addmi	r3, #2
 800b50c:	6033      	strmi	r3, [r6, #0]
 800b50e:	6825      	ldr	r5, [r4, #0]
 800b510:	f015 0506 	ands.w	r5, r5, #6
 800b514:	d106      	bne.n	800b524 <_printf_common+0x48>
 800b516:	f104 0a19 	add.w	sl, r4, #25
 800b51a:	68e3      	ldr	r3, [r4, #12]
 800b51c:	6832      	ldr	r2, [r6, #0]
 800b51e:	1a9b      	subs	r3, r3, r2
 800b520:	42ab      	cmp	r3, r5
 800b522:	dc26      	bgt.n	800b572 <_printf_common+0x96>
 800b524:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b528:	1e13      	subs	r3, r2, #0
 800b52a:	6822      	ldr	r2, [r4, #0]
 800b52c:	bf18      	it	ne
 800b52e:	2301      	movne	r3, #1
 800b530:	0692      	lsls	r2, r2, #26
 800b532:	d42b      	bmi.n	800b58c <_printf_common+0xb0>
 800b534:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b538:	4649      	mov	r1, r9
 800b53a:	4638      	mov	r0, r7
 800b53c:	47c0      	blx	r8
 800b53e:	3001      	adds	r0, #1
 800b540:	d01e      	beq.n	800b580 <_printf_common+0xa4>
 800b542:	6823      	ldr	r3, [r4, #0]
 800b544:	6922      	ldr	r2, [r4, #16]
 800b546:	f003 0306 	and.w	r3, r3, #6
 800b54a:	2b04      	cmp	r3, #4
 800b54c:	bf02      	ittt	eq
 800b54e:	68e5      	ldreq	r5, [r4, #12]
 800b550:	6833      	ldreq	r3, [r6, #0]
 800b552:	1aed      	subeq	r5, r5, r3
 800b554:	68a3      	ldr	r3, [r4, #8]
 800b556:	bf0c      	ite	eq
 800b558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b55c:	2500      	movne	r5, #0
 800b55e:	4293      	cmp	r3, r2
 800b560:	bfc4      	itt	gt
 800b562:	1a9b      	subgt	r3, r3, r2
 800b564:	18ed      	addgt	r5, r5, r3
 800b566:	2600      	movs	r6, #0
 800b568:	341a      	adds	r4, #26
 800b56a:	42b5      	cmp	r5, r6
 800b56c:	d11a      	bne.n	800b5a4 <_printf_common+0xc8>
 800b56e:	2000      	movs	r0, #0
 800b570:	e008      	b.n	800b584 <_printf_common+0xa8>
 800b572:	2301      	movs	r3, #1
 800b574:	4652      	mov	r2, sl
 800b576:	4649      	mov	r1, r9
 800b578:	4638      	mov	r0, r7
 800b57a:	47c0      	blx	r8
 800b57c:	3001      	adds	r0, #1
 800b57e:	d103      	bne.n	800b588 <_printf_common+0xac>
 800b580:	f04f 30ff 	mov.w	r0, #4294967295
 800b584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b588:	3501      	adds	r5, #1
 800b58a:	e7c6      	b.n	800b51a <_printf_common+0x3e>
 800b58c:	18e1      	adds	r1, r4, r3
 800b58e:	1c5a      	adds	r2, r3, #1
 800b590:	2030      	movs	r0, #48	; 0x30
 800b592:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b596:	4422      	add	r2, r4
 800b598:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b59c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b5a0:	3302      	adds	r3, #2
 800b5a2:	e7c7      	b.n	800b534 <_printf_common+0x58>
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	4622      	mov	r2, r4
 800b5a8:	4649      	mov	r1, r9
 800b5aa:	4638      	mov	r0, r7
 800b5ac:	47c0      	blx	r8
 800b5ae:	3001      	adds	r0, #1
 800b5b0:	d0e6      	beq.n	800b580 <_printf_common+0xa4>
 800b5b2:	3601      	adds	r6, #1
 800b5b4:	e7d9      	b.n	800b56a <_printf_common+0x8e>
	...

0800b5b8 <_printf_i>:
 800b5b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5bc:	7e0f      	ldrb	r7, [r1, #24]
 800b5be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b5c0:	2f78      	cmp	r7, #120	; 0x78
 800b5c2:	4691      	mov	r9, r2
 800b5c4:	4680      	mov	r8, r0
 800b5c6:	460c      	mov	r4, r1
 800b5c8:	469a      	mov	sl, r3
 800b5ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b5ce:	d807      	bhi.n	800b5e0 <_printf_i+0x28>
 800b5d0:	2f62      	cmp	r7, #98	; 0x62
 800b5d2:	d80a      	bhi.n	800b5ea <_printf_i+0x32>
 800b5d4:	2f00      	cmp	r7, #0
 800b5d6:	f000 80d4 	beq.w	800b782 <_printf_i+0x1ca>
 800b5da:	2f58      	cmp	r7, #88	; 0x58
 800b5dc:	f000 80c0 	beq.w	800b760 <_printf_i+0x1a8>
 800b5e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b5e8:	e03a      	b.n	800b660 <_printf_i+0xa8>
 800b5ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b5ee:	2b15      	cmp	r3, #21
 800b5f0:	d8f6      	bhi.n	800b5e0 <_printf_i+0x28>
 800b5f2:	a101      	add	r1, pc, #4	; (adr r1, 800b5f8 <_printf_i+0x40>)
 800b5f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5f8:	0800b651 	.word	0x0800b651
 800b5fc:	0800b665 	.word	0x0800b665
 800b600:	0800b5e1 	.word	0x0800b5e1
 800b604:	0800b5e1 	.word	0x0800b5e1
 800b608:	0800b5e1 	.word	0x0800b5e1
 800b60c:	0800b5e1 	.word	0x0800b5e1
 800b610:	0800b665 	.word	0x0800b665
 800b614:	0800b5e1 	.word	0x0800b5e1
 800b618:	0800b5e1 	.word	0x0800b5e1
 800b61c:	0800b5e1 	.word	0x0800b5e1
 800b620:	0800b5e1 	.word	0x0800b5e1
 800b624:	0800b769 	.word	0x0800b769
 800b628:	0800b691 	.word	0x0800b691
 800b62c:	0800b723 	.word	0x0800b723
 800b630:	0800b5e1 	.word	0x0800b5e1
 800b634:	0800b5e1 	.word	0x0800b5e1
 800b638:	0800b78b 	.word	0x0800b78b
 800b63c:	0800b5e1 	.word	0x0800b5e1
 800b640:	0800b691 	.word	0x0800b691
 800b644:	0800b5e1 	.word	0x0800b5e1
 800b648:	0800b5e1 	.word	0x0800b5e1
 800b64c:	0800b72b 	.word	0x0800b72b
 800b650:	682b      	ldr	r3, [r5, #0]
 800b652:	1d1a      	adds	r2, r3, #4
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	602a      	str	r2, [r5, #0]
 800b658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b65c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b660:	2301      	movs	r3, #1
 800b662:	e09f      	b.n	800b7a4 <_printf_i+0x1ec>
 800b664:	6820      	ldr	r0, [r4, #0]
 800b666:	682b      	ldr	r3, [r5, #0]
 800b668:	0607      	lsls	r7, r0, #24
 800b66a:	f103 0104 	add.w	r1, r3, #4
 800b66e:	6029      	str	r1, [r5, #0]
 800b670:	d501      	bpl.n	800b676 <_printf_i+0xbe>
 800b672:	681e      	ldr	r6, [r3, #0]
 800b674:	e003      	b.n	800b67e <_printf_i+0xc6>
 800b676:	0646      	lsls	r6, r0, #25
 800b678:	d5fb      	bpl.n	800b672 <_printf_i+0xba>
 800b67a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b67e:	2e00      	cmp	r6, #0
 800b680:	da03      	bge.n	800b68a <_printf_i+0xd2>
 800b682:	232d      	movs	r3, #45	; 0x2d
 800b684:	4276      	negs	r6, r6
 800b686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b68a:	485a      	ldr	r0, [pc, #360]	; (800b7f4 <_printf_i+0x23c>)
 800b68c:	230a      	movs	r3, #10
 800b68e:	e012      	b.n	800b6b6 <_printf_i+0xfe>
 800b690:	682b      	ldr	r3, [r5, #0]
 800b692:	6820      	ldr	r0, [r4, #0]
 800b694:	1d19      	adds	r1, r3, #4
 800b696:	6029      	str	r1, [r5, #0]
 800b698:	0605      	lsls	r5, r0, #24
 800b69a:	d501      	bpl.n	800b6a0 <_printf_i+0xe8>
 800b69c:	681e      	ldr	r6, [r3, #0]
 800b69e:	e002      	b.n	800b6a6 <_printf_i+0xee>
 800b6a0:	0641      	lsls	r1, r0, #25
 800b6a2:	d5fb      	bpl.n	800b69c <_printf_i+0xe4>
 800b6a4:	881e      	ldrh	r6, [r3, #0]
 800b6a6:	4853      	ldr	r0, [pc, #332]	; (800b7f4 <_printf_i+0x23c>)
 800b6a8:	2f6f      	cmp	r7, #111	; 0x6f
 800b6aa:	bf0c      	ite	eq
 800b6ac:	2308      	moveq	r3, #8
 800b6ae:	230a      	movne	r3, #10
 800b6b0:	2100      	movs	r1, #0
 800b6b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b6b6:	6865      	ldr	r5, [r4, #4]
 800b6b8:	60a5      	str	r5, [r4, #8]
 800b6ba:	2d00      	cmp	r5, #0
 800b6bc:	bfa2      	ittt	ge
 800b6be:	6821      	ldrge	r1, [r4, #0]
 800b6c0:	f021 0104 	bicge.w	r1, r1, #4
 800b6c4:	6021      	strge	r1, [r4, #0]
 800b6c6:	b90e      	cbnz	r6, 800b6cc <_printf_i+0x114>
 800b6c8:	2d00      	cmp	r5, #0
 800b6ca:	d04b      	beq.n	800b764 <_printf_i+0x1ac>
 800b6cc:	4615      	mov	r5, r2
 800b6ce:	fbb6 f1f3 	udiv	r1, r6, r3
 800b6d2:	fb03 6711 	mls	r7, r3, r1, r6
 800b6d6:	5dc7      	ldrb	r7, [r0, r7]
 800b6d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b6dc:	4637      	mov	r7, r6
 800b6de:	42bb      	cmp	r3, r7
 800b6e0:	460e      	mov	r6, r1
 800b6e2:	d9f4      	bls.n	800b6ce <_printf_i+0x116>
 800b6e4:	2b08      	cmp	r3, #8
 800b6e6:	d10b      	bne.n	800b700 <_printf_i+0x148>
 800b6e8:	6823      	ldr	r3, [r4, #0]
 800b6ea:	07de      	lsls	r6, r3, #31
 800b6ec:	d508      	bpl.n	800b700 <_printf_i+0x148>
 800b6ee:	6923      	ldr	r3, [r4, #16]
 800b6f0:	6861      	ldr	r1, [r4, #4]
 800b6f2:	4299      	cmp	r1, r3
 800b6f4:	bfde      	ittt	le
 800b6f6:	2330      	movle	r3, #48	; 0x30
 800b6f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b6fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b700:	1b52      	subs	r2, r2, r5
 800b702:	6122      	str	r2, [r4, #16]
 800b704:	f8cd a000 	str.w	sl, [sp]
 800b708:	464b      	mov	r3, r9
 800b70a:	aa03      	add	r2, sp, #12
 800b70c:	4621      	mov	r1, r4
 800b70e:	4640      	mov	r0, r8
 800b710:	f7ff fee4 	bl	800b4dc <_printf_common>
 800b714:	3001      	adds	r0, #1
 800b716:	d14a      	bne.n	800b7ae <_printf_i+0x1f6>
 800b718:	f04f 30ff 	mov.w	r0, #4294967295
 800b71c:	b004      	add	sp, #16
 800b71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b722:	6823      	ldr	r3, [r4, #0]
 800b724:	f043 0320 	orr.w	r3, r3, #32
 800b728:	6023      	str	r3, [r4, #0]
 800b72a:	4833      	ldr	r0, [pc, #204]	; (800b7f8 <_printf_i+0x240>)
 800b72c:	2778      	movs	r7, #120	; 0x78
 800b72e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b732:	6823      	ldr	r3, [r4, #0]
 800b734:	6829      	ldr	r1, [r5, #0]
 800b736:	061f      	lsls	r7, r3, #24
 800b738:	f851 6b04 	ldr.w	r6, [r1], #4
 800b73c:	d402      	bmi.n	800b744 <_printf_i+0x18c>
 800b73e:	065f      	lsls	r7, r3, #25
 800b740:	bf48      	it	mi
 800b742:	b2b6      	uxthmi	r6, r6
 800b744:	07df      	lsls	r7, r3, #31
 800b746:	bf48      	it	mi
 800b748:	f043 0320 	orrmi.w	r3, r3, #32
 800b74c:	6029      	str	r1, [r5, #0]
 800b74e:	bf48      	it	mi
 800b750:	6023      	strmi	r3, [r4, #0]
 800b752:	b91e      	cbnz	r6, 800b75c <_printf_i+0x1a4>
 800b754:	6823      	ldr	r3, [r4, #0]
 800b756:	f023 0320 	bic.w	r3, r3, #32
 800b75a:	6023      	str	r3, [r4, #0]
 800b75c:	2310      	movs	r3, #16
 800b75e:	e7a7      	b.n	800b6b0 <_printf_i+0xf8>
 800b760:	4824      	ldr	r0, [pc, #144]	; (800b7f4 <_printf_i+0x23c>)
 800b762:	e7e4      	b.n	800b72e <_printf_i+0x176>
 800b764:	4615      	mov	r5, r2
 800b766:	e7bd      	b.n	800b6e4 <_printf_i+0x12c>
 800b768:	682b      	ldr	r3, [r5, #0]
 800b76a:	6826      	ldr	r6, [r4, #0]
 800b76c:	6961      	ldr	r1, [r4, #20]
 800b76e:	1d18      	adds	r0, r3, #4
 800b770:	6028      	str	r0, [r5, #0]
 800b772:	0635      	lsls	r5, r6, #24
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	d501      	bpl.n	800b77c <_printf_i+0x1c4>
 800b778:	6019      	str	r1, [r3, #0]
 800b77a:	e002      	b.n	800b782 <_printf_i+0x1ca>
 800b77c:	0670      	lsls	r0, r6, #25
 800b77e:	d5fb      	bpl.n	800b778 <_printf_i+0x1c0>
 800b780:	8019      	strh	r1, [r3, #0]
 800b782:	2300      	movs	r3, #0
 800b784:	6123      	str	r3, [r4, #16]
 800b786:	4615      	mov	r5, r2
 800b788:	e7bc      	b.n	800b704 <_printf_i+0x14c>
 800b78a:	682b      	ldr	r3, [r5, #0]
 800b78c:	1d1a      	adds	r2, r3, #4
 800b78e:	602a      	str	r2, [r5, #0]
 800b790:	681d      	ldr	r5, [r3, #0]
 800b792:	6862      	ldr	r2, [r4, #4]
 800b794:	2100      	movs	r1, #0
 800b796:	4628      	mov	r0, r5
 800b798:	f7f4 fd2a 	bl	80001f0 <memchr>
 800b79c:	b108      	cbz	r0, 800b7a2 <_printf_i+0x1ea>
 800b79e:	1b40      	subs	r0, r0, r5
 800b7a0:	6060      	str	r0, [r4, #4]
 800b7a2:	6863      	ldr	r3, [r4, #4]
 800b7a4:	6123      	str	r3, [r4, #16]
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7ac:	e7aa      	b.n	800b704 <_printf_i+0x14c>
 800b7ae:	6923      	ldr	r3, [r4, #16]
 800b7b0:	462a      	mov	r2, r5
 800b7b2:	4649      	mov	r1, r9
 800b7b4:	4640      	mov	r0, r8
 800b7b6:	47d0      	blx	sl
 800b7b8:	3001      	adds	r0, #1
 800b7ba:	d0ad      	beq.n	800b718 <_printf_i+0x160>
 800b7bc:	6823      	ldr	r3, [r4, #0]
 800b7be:	079b      	lsls	r3, r3, #30
 800b7c0:	d413      	bmi.n	800b7ea <_printf_i+0x232>
 800b7c2:	68e0      	ldr	r0, [r4, #12]
 800b7c4:	9b03      	ldr	r3, [sp, #12]
 800b7c6:	4298      	cmp	r0, r3
 800b7c8:	bfb8      	it	lt
 800b7ca:	4618      	movlt	r0, r3
 800b7cc:	e7a6      	b.n	800b71c <_printf_i+0x164>
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	4632      	mov	r2, r6
 800b7d2:	4649      	mov	r1, r9
 800b7d4:	4640      	mov	r0, r8
 800b7d6:	47d0      	blx	sl
 800b7d8:	3001      	adds	r0, #1
 800b7da:	d09d      	beq.n	800b718 <_printf_i+0x160>
 800b7dc:	3501      	adds	r5, #1
 800b7de:	68e3      	ldr	r3, [r4, #12]
 800b7e0:	9903      	ldr	r1, [sp, #12]
 800b7e2:	1a5b      	subs	r3, r3, r1
 800b7e4:	42ab      	cmp	r3, r5
 800b7e6:	dcf2      	bgt.n	800b7ce <_printf_i+0x216>
 800b7e8:	e7eb      	b.n	800b7c2 <_printf_i+0x20a>
 800b7ea:	2500      	movs	r5, #0
 800b7ec:	f104 0619 	add.w	r6, r4, #25
 800b7f0:	e7f5      	b.n	800b7de <_printf_i+0x226>
 800b7f2:	bf00      	nop
 800b7f4:	0800e673 	.word	0x0800e673
 800b7f8:	0800e684 	.word	0x0800e684

0800b7fc <std>:
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	b510      	push	{r4, lr}
 800b800:	4604      	mov	r4, r0
 800b802:	e9c0 3300 	strd	r3, r3, [r0]
 800b806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b80a:	6083      	str	r3, [r0, #8]
 800b80c:	8181      	strh	r1, [r0, #12]
 800b80e:	6643      	str	r3, [r0, #100]	; 0x64
 800b810:	81c2      	strh	r2, [r0, #14]
 800b812:	6183      	str	r3, [r0, #24]
 800b814:	4619      	mov	r1, r3
 800b816:	2208      	movs	r2, #8
 800b818:	305c      	adds	r0, #92	; 0x5c
 800b81a:	f000 f902 	bl	800ba22 <memset>
 800b81e:	4b05      	ldr	r3, [pc, #20]	; (800b834 <std+0x38>)
 800b820:	6263      	str	r3, [r4, #36]	; 0x24
 800b822:	4b05      	ldr	r3, [pc, #20]	; (800b838 <std+0x3c>)
 800b824:	62a3      	str	r3, [r4, #40]	; 0x28
 800b826:	4b05      	ldr	r3, [pc, #20]	; (800b83c <std+0x40>)
 800b828:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b82a:	4b05      	ldr	r3, [pc, #20]	; (800b840 <std+0x44>)
 800b82c:	6224      	str	r4, [r4, #32]
 800b82e:	6323      	str	r3, [r4, #48]	; 0x30
 800b830:	bd10      	pop	{r4, pc}
 800b832:	bf00      	nop
 800b834:	0800b99d 	.word	0x0800b99d
 800b838:	0800b9bf 	.word	0x0800b9bf
 800b83c:	0800b9f7 	.word	0x0800b9f7
 800b840:	0800ba1b 	.word	0x0800ba1b

0800b844 <stdio_exit_handler>:
 800b844:	4a02      	ldr	r2, [pc, #8]	; (800b850 <stdio_exit_handler+0xc>)
 800b846:	4903      	ldr	r1, [pc, #12]	; (800b854 <stdio_exit_handler+0x10>)
 800b848:	4803      	ldr	r0, [pc, #12]	; (800b858 <stdio_exit_handler+0x14>)
 800b84a:	f000 b869 	b.w	800b920 <_fwalk_sglue>
 800b84e:	bf00      	nop
 800b850:	20000094 	.word	0x20000094
 800b854:	0800dd31 	.word	0x0800dd31
 800b858:	2000020c 	.word	0x2000020c

0800b85c <cleanup_stdio>:
 800b85c:	6841      	ldr	r1, [r0, #4]
 800b85e:	4b0c      	ldr	r3, [pc, #48]	; (800b890 <cleanup_stdio+0x34>)
 800b860:	4299      	cmp	r1, r3
 800b862:	b510      	push	{r4, lr}
 800b864:	4604      	mov	r4, r0
 800b866:	d001      	beq.n	800b86c <cleanup_stdio+0x10>
 800b868:	f002 fa62 	bl	800dd30 <_fflush_r>
 800b86c:	68a1      	ldr	r1, [r4, #8]
 800b86e:	4b09      	ldr	r3, [pc, #36]	; (800b894 <cleanup_stdio+0x38>)
 800b870:	4299      	cmp	r1, r3
 800b872:	d002      	beq.n	800b87a <cleanup_stdio+0x1e>
 800b874:	4620      	mov	r0, r4
 800b876:	f002 fa5b 	bl	800dd30 <_fflush_r>
 800b87a:	68e1      	ldr	r1, [r4, #12]
 800b87c:	4b06      	ldr	r3, [pc, #24]	; (800b898 <cleanup_stdio+0x3c>)
 800b87e:	4299      	cmp	r1, r3
 800b880:	d004      	beq.n	800b88c <cleanup_stdio+0x30>
 800b882:	4620      	mov	r0, r4
 800b884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b888:	f002 ba52 	b.w	800dd30 <_fflush_r>
 800b88c:	bd10      	pop	{r4, pc}
 800b88e:	bf00      	nop
 800b890:	20000a64 	.word	0x20000a64
 800b894:	20000acc 	.word	0x20000acc
 800b898:	20000b34 	.word	0x20000b34

0800b89c <global_stdio_init.part.0>:
 800b89c:	b510      	push	{r4, lr}
 800b89e:	4b0b      	ldr	r3, [pc, #44]	; (800b8cc <global_stdio_init.part.0+0x30>)
 800b8a0:	4c0b      	ldr	r4, [pc, #44]	; (800b8d0 <global_stdio_init.part.0+0x34>)
 800b8a2:	4a0c      	ldr	r2, [pc, #48]	; (800b8d4 <global_stdio_init.part.0+0x38>)
 800b8a4:	601a      	str	r2, [r3, #0]
 800b8a6:	4620      	mov	r0, r4
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	2104      	movs	r1, #4
 800b8ac:	f7ff ffa6 	bl	800b7fc <std>
 800b8b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	2109      	movs	r1, #9
 800b8b8:	f7ff ffa0 	bl	800b7fc <std>
 800b8bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b8c0:	2202      	movs	r2, #2
 800b8c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8c6:	2112      	movs	r1, #18
 800b8c8:	f7ff bf98 	b.w	800b7fc <std>
 800b8cc:	20000b9c 	.word	0x20000b9c
 800b8d0:	20000a64 	.word	0x20000a64
 800b8d4:	0800b845 	.word	0x0800b845

0800b8d8 <__sfp_lock_acquire>:
 800b8d8:	4801      	ldr	r0, [pc, #4]	; (800b8e0 <__sfp_lock_acquire+0x8>)
 800b8da:	f000 b941 	b.w	800bb60 <__retarget_lock_acquire_recursive>
 800b8de:	bf00      	nop
 800b8e0:	20000ba5 	.word	0x20000ba5

0800b8e4 <__sfp_lock_release>:
 800b8e4:	4801      	ldr	r0, [pc, #4]	; (800b8ec <__sfp_lock_release+0x8>)
 800b8e6:	f000 b93c 	b.w	800bb62 <__retarget_lock_release_recursive>
 800b8ea:	bf00      	nop
 800b8ec:	20000ba5 	.word	0x20000ba5

0800b8f0 <__sinit>:
 800b8f0:	b510      	push	{r4, lr}
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	f7ff fff0 	bl	800b8d8 <__sfp_lock_acquire>
 800b8f8:	6a23      	ldr	r3, [r4, #32]
 800b8fa:	b11b      	cbz	r3, 800b904 <__sinit+0x14>
 800b8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b900:	f7ff bff0 	b.w	800b8e4 <__sfp_lock_release>
 800b904:	4b04      	ldr	r3, [pc, #16]	; (800b918 <__sinit+0x28>)
 800b906:	6223      	str	r3, [r4, #32]
 800b908:	4b04      	ldr	r3, [pc, #16]	; (800b91c <__sinit+0x2c>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d1f5      	bne.n	800b8fc <__sinit+0xc>
 800b910:	f7ff ffc4 	bl	800b89c <global_stdio_init.part.0>
 800b914:	e7f2      	b.n	800b8fc <__sinit+0xc>
 800b916:	bf00      	nop
 800b918:	0800b85d 	.word	0x0800b85d
 800b91c:	20000b9c 	.word	0x20000b9c

0800b920 <_fwalk_sglue>:
 800b920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b924:	4607      	mov	r7, r0
 800b926:	4688      	mov	r8, r1
 800b928:	4614      	mov	r4, r2
 800b92a:	2600      	movs	r6, #0
 800b92c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b930:	f1b9 0901 	subs.w	r9, r9, #1
 800b934:	d505      	bpl.n	800b942 <_fwalk_sglue+0x22>
 800b936:	6824      	ldr	r4, [r4, #0]
 800b938:	2c00      	cmp	r4, #0
 800b93a:	d1f7      	bne.n	800b92c <_fwalk_sglue+0xc>
 800b93c:	4630      	mov	r0, r6
 800b93e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b942:	89ab      	ldrh	r3, [r5, #12]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d907      	bls.n	800b958 <_fwalk_sglue+0x38>
 800b948:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b94c:	3301      	adds	r3, #1
 800b94e:	d003      	beq.n	800b958 <_fwalk_sglue+0x38>
 800b950:	4629      	mov	r1, r5
 800b952:	4638      	mov	r0, r7
 800b954:	47c0      	blx	r8
 800b956:	4306      	orrs	r6, r0
 800b958:	3568      	adds	r5, #104	; 0x68
 800b95a:	e7e9      	b.n	800b930 <_fwalk_sglue+0x10>

0800b95c <siprintf>:
 800b95c:	b40e      	push	{r1, r2, r3}
 800b95e:	b500      	push	{lr}
 800b960:	b09c      	sub	sp, #112	; 0x70
 800b962:	ab1d      	add	r3, sp, #116	; 0x74
 800b964:	9002      	str	r0, [sp, #8]
 800b966:	9006      	str	r0, [sp, #24]
 800b968:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b96c:	4809      	ldr	r0, [pc, #36]	; (800b994 <siprintf+0x38>)
 800b96e:	9107      	str	r1, [sp, #28]
 800b970:	9104      	str	r1, [sp, #16]
 800b972:	4909      	ldr	r1, [pc, #36]	; (800b998 <siprintf+0x3c>)
 800b974:	f853 2b04 	ldr.w	r2, [r3], #4
 800b978:	9105      	str	r1, [sp, #20]
 800b97a:	6800      	ldr	r0, [r0, #0]
 800b97c:	9301      	str	r3, [sp, #4]
 800b97e:	a902      	add	r1, sp, #8
 800b980:	f002 f852 	bl	800da28 <_svfiprintf_r>
 800b984:	9b02      	ldr	r3, [sp, #8]
 800b986:	2200      	movs	r2, #0
 800b988:	701a      	strb	r2, [r3, #0]
 800b98a:	b01c      	add	sp, #112	; 0x70
 800b98c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b990:	b003      	add	sp, #12
 800b992:	4770      	bx	lr
 800b994:	20000258 	.word	0x20000258
 800b998:	ffff0208 	.word	0xffff0208

0800b99c <__sread>:
 800b99c:	b510      	push	{r4, lr}
 800b99e:	460c      	mov	r4, r1
 800b9a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9a4:	f000 f87e 	bl	800baa4 <_read_r>
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	bfab      	itete	ge
 800b9ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9ae:	89a3      	ldrhlt	r3, [r4, #12]
 800b9b0:	181b      	addge	r3, r3, r0
 800b9b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9b6:	bfac      	ite	ge
 800b9b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9ba:	81a3      	strhlt	r3, [r4, #12]
 800b9bc:	bd10      	pop	{r4, pc}

0800b9be <__swrite>:
 800b9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c2:	461f      	mov	r7, r3
 800b9c4:	898b      	ldrh	r3, [r1, #12]
 800b9c6:	05db      	lsls	r3, r3, #23
 800b9c8:	4605      	mov	r5, r0
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	4616      	mov	r6, r2
 800b9ce:	d505      	bpl.n	800b9dc <__swrite+0x1e>
 800b9d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f000 f852 	bl	800ba80 <_lseek_r>
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9e6:	81a3      	strh	r3, [r4, #12]
 800b9e8:	4632      	mov	r2, r6
 800b9ea:	463b      	mov	r3, r7
 800b9ec:	4628      	mov	r0, r5
 800b9ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f2:	f000 b879 	b.w	800bae8 <_write_r>

0800b9f6 <__sseek>:
 800b9f6:	b510      	push	{r4, lr}
 800b9f8:	460c      	mov	r4, r1
 800b9fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9fe:	f000 f83f 	bl	800ba80 <_lseek_r>
 800ba02:	1c43      	adds	r3, r0, #1
 800ba04:	89a3      	ldrh	r3, [r4, #12]
 800ba06:	bf15      	itete	ne
 800ba08:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba12:	81a3      	strheq	r3, [r4, #12]
 800ba14:	bf18      	it	ne
 800ba16:	81a3      	strhne	r3, [r4, #12]
 800ba18:	bd10      	pop	{r4, pc}

0800ba1a <__sclose>:
 800ba1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba1e:	f000 b81f 	b.w	800ba60 <_close_r>

0800ba22 <memset>:
 800ba22:	4402      	add	r2, r0
 800ba24:	4603      	mov	r3, r0
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d100      	bne.n	800ba2c <memset+0xa>
 800ba2a:	4770      	bx	lr
 800ba2c:	f803 1b01 	strb.w	r1, [r3], #1
 800ba30:	e7f9      	b.n	800ba26 <memset+0x4>

0800ba32 <strncmp>:
 800ba32:	b510      	push	{r4, lr}
 800ba34:	b16a      	cbz	r2, 800ba52 <strncmp+0x20>
 800ba36:	3901      	subs	r1, #1
 800ba38:	1884      	adds	r4, r0, r2
 800ba3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba3e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ba42:	429a      	cmp	r2, r3
 800ba44:	d103      	bne.n	800ba4e <strncmp+0x1c>
 800ba46:	42a0      	cmp	r0, r4
 800ba48:	d001      	beq.n	800ba4e <strncmp+0x1c>
 800ba4a:	2a00      	cmp	r2, #0
 800ba4c:	d1f5      	bne.n	800ba3a <strncmp+0x8>
 800ba4e:	1ad0      	subs	r0, r2, r3
 800ba50:	bd10      	pop	{r4, pc}
 800ba52:	4610      	mov	r0, r2
 800ba54:	e7fc      	b.n	800ba50 <strncmp+0x1e>
	...

0800ba58 <_localeconv_r>:
 800ba58:	4800      	ldr	r0, [pc, #0]	; (800ba5c <_localeconv_r+0x4>)
 800ba5a:	4770      	bx	lr
 800ba5c:	20000190 	.word	0x20000190

0800ba60 <_close_r>:
 800ba60:	b538      	push	{r3, r4, r5, lr}
 800ba62:	4d06      	ldr	r5, [pc, #24]	; (800ba7c <_close_r+0x1c>)
 800ba64:	2300      	movs	r3, #0
 800ba66:	4604      	mov	r4, r0
 800ba68:	4608      	mov	r0, r1
 800ba6a:	602b      	str	r3, [r5, #0]
 800ba6c:	f7f7 fdc7 	bl	80035fe <_close>
 800ba70:	1c43      	adds	r3, r0, #1
 800ba72:	d102      	bne.n	800ba7a <_close_r+0x1a>
 800ba74:	682b      	ldr	r3, [r5, #0]
 800ba76:	b103      	cbz	r3, 800ba7a <_close_r+0x1a>
 800ba78:	6023      	str	r3, [r4, #0]
 800ba7a:	bd38      	pop	{r3, r4, r5, pc}
 800ba7c:	20000ba0 	.word	0x20000ba0

0800ba80 <_lseek_r>:
 800ba80:	b538      	push	{r3, r4, r5, lr}
 800ba82:	4d07      	ldr	r5, [pc, #28]	; (800baa0 <_lseek_r+0x20>)
 800ba84:	4604      	mov	r4, r0
 800ba86:	4608      	mov	r0, r1
 800ba88:	4611      	mov	r1, r2
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	602a      	str	r2, [r5, #0]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	f7f7 fddc 	bl	800364c <_lseek>
 800ba94:	1c43      	adds	r3, r0, #1
 800ba96:	d102      	bne.n	800ba9e <_lseek_r+0x1e>
 800ba98:	682b      	ldr	r3, [r5, #0]
 800ba9a:	b103      	cbz	r3, 800ba9e <_lseek_r+0x1e>
 800ba9c:	6023      	str	r3, [r4, #0]
 800ba9e:	bd38      	pop	{r3, r4, r5, pc}
 800baa0:	20000ba0 	.word	0x20000ba0

0800baa4 <_read_r>:
 800baa4:	b538      	push	{r3, r4, r5, lr}
 800baa6:	4d07      	ldr	r5, [pc, #28]	; (800bac4 <_read_r+0x20>)
 800baa8:	4604      	mov	r4, r0
 800baaa:	4608      	mov	r0, r1
 800baac:	4611      	mov	r1, r2
 800baae:	2200      	movs	r2, #0
 800bab0:	602a      	str	r2, [r5, #0]
 800bab2:	461a      	mov	r2, r3
 800bab4:	f7f7 fd6a 	bl	800358c <_read>
 800bab8:	1c43      	adds	r3, r0, #1
 800baba:	d102      	bne.n	800bac2 <_read_r+0x1e>
 800babc:	682b      	ldr	r3, [r5, #0]
 800babe:	b103      	cbz	r3, 800bac2 <_read_r+0x1e>
 800bac0:	6023      	str	r3, [r4, #0]
 800bac2:	bd38      	pop	{r3, r4, r5, pc}
 800bac4:	20000ba0 	.word	0x20000ba0

0800bac8 <_sbrk_r>:
 800bac8:	b538      	push	{r3, r4, r5, lr}
 800baca:	4d06      	ldr	r5, [pc, #24]	; (800bae4 <_sbrk_r+0x1c>)
 800bacc:	2300      	movs	r3, #0
 800bace:	4604      	mov	r4, r0
 800bad0:	4608      	mov	r0, r1
 800bad2:	602b      	str	r3, [r5, #0]
 800bad4:	f7f7 fdc8 	bl	8003668 <_sbrk>
 800bad8:	1c43      	adds	r3, r0, #1
 800bada:	d102      	bne.n	800bae2 <_sbrk_r+0x1a>
 800badc:	682b      	ldr	r3, [r5, #0]
 800bade:	b103      	cbz	r3, 800bae2 <_sbrk_r+0x1a>
 800bae0:	6023      	str	r3, [r4, #0]
 800bae2:	bd38      	pop	{r3, r4, r5, pc}
 800bae4:	20000ba0 	.word	0x20000ba0

0800bae8 <_write_r>:
 800bae8:	b538      	push	{r3, r4, r5, lr}
 800baea:	4d07      	ldr	r5, [pc, #28]	; (800bb08 <_write_r+0x20>)
 800baec:	4604      	mov	r4, r0
 800baee:	4608      	mov	r0, r1
 800baf0:	4611      	mov	r1, r2
 800baf2:	2200      	movs	r2, #0
 800baf4:	602a      	str	r2, [r5, #0]
 800baf6:	461a      	mov	r2, r3
 800baf8:	f7f7 fd65 	bl	80035c6 <_write>
 800bafc:	1c43      	adds	r3, r0, #1
 800bafe:	d102      	bne.n	800bb06 <_write_r+0x1e>
 800bb00:	682b      	ldr	r3, [r5, #0]
 800bb02:	b103      	cbz	r3, 800bb06 <_write_r+0x1e>
 800bb04:	6023      	str	r3, [r4, #0]
 800bb06:	bd38      	pop	{r3, r4, r5, pc}
 800bb08:	20000ba0 	.word	0x20000ba0

0800bb0c <__errno>:
 800bb0c:	4b01      	ldr	r3, [pc, #4]	; (800bb14 <__errno+0x8>)
 800bb0e:	6818      	ldr	r0, [r3, #0]
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	20000258 	.word	0x20000258

0800bb18 <__libc_init_array>:
 800bb18:	b570      	push	{r4, r5, r6, lr}
 800bb1a:	4d0d      	ldr	r5, [pc, #52]	; (800bb50 <__libc_init_array+0x38>)
 800bb1c:	4c0d      	ldr	r4, [pc, #52]	; (800bb54 <__libc_init_array+0x3c>)
 800bb1e:	1b64      	subs	r4, r4, r5
 800bb20:	10a4      	asrs	r4, r4, #2
 800bb22:	2600      	movs	r6, #0
 800bb24:	42a6      	cmp	r6, r4
 800bb26:	d109      	bne.n	800bb3c <__libc_init_array+0x24>
 800bb28:	4d0b      	ldr	r5, [pc, #44]	; (800bb58 <__libc_init_array+0x40>)
 800bb2a:	4c0c      	ldr	r4, [pc, #48]	; (800bb5c <__libc_init_array+0x44>)
 800bb2c:	f002 fc30 	bl	800e390 <_init>
 800bb30:	1b64      	subs	r4, r4, r5
 800bb32:	10a4      	asrs	r4, r4, #2
 800bb34:	2600      	movs	r6, #0
 800bb36:	42a6      	cmp	r6, r4
 800bb38:	d105      	bne.n	800bb46 <__libc_init_array+0x2e>
 800bb3a:	bd70      	pop	{r4, r5, r6, pc}
 800bb3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb40:	4798      	blx	r3
 800bb42:	3601      	adds	r6, #1
 800bb44:	e7ee      	b.n	800bb24 <__libc_init_array+0xc>
 800bb46:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb4a:	4798      	blx	r3
 800bb4c:	3601      	adds	r6, #1
 800bb4e:	e7f2      	b.n	800bb36 <__libc_init_array+0x1e>
 800bb50:	0800e934 	.word	0x0800e934
 800bb54:	0800e934 	.word	0x0800e934
 800bb58:	0800e934 	.word	0x0800e934
 800bb5c:	0800e938 	.word	0x0800e938

0800bb60 <__retarget_lock_acquire_recursive>:
 800bb60:	4770      	bx	lr

0800bb62 <__retarget_lock_release_recursive>:
 800bb62:	4770      	bx	lr

0800bb64 <memcpy>:
 800bb64:	440a      	add	r2, r1
 800bb66:	4291      	cmp	r1, r2
 800bb68:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb6c:	d100      	bne.n	800bb70 <memcpy+0xc>
 800bb6e:	4770      	bx	lr
 800bb70:	b510      	push	{r4, lr}
 800bb72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb76:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb7a:	4291      	cmp	r1, r2
 800bb7c:	d1f9      	bne.n	800bb72 <memcpy+0xe>
 800bb7e:	bd10      	pop	{r4, pc}

0800bb80 <nan>:
 800bb80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bb88 <nan+0x8>
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	00000000 	.word	0x00000000
 800bb8c:	7ff80000 	.word	0x7ff80000

0800bb90 <quorem>:
 800bb90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb94:	6903      	ldr	r3, [r0, #16]
 800bb96:	690c      	ldr	r4, [r1, #16]
 800bb98:	42a3      	cmp	r3, r4
 800bb9a:	4607      	mov	r7, r0
 800bb9c:	db7e      	blt.n	800bc9c <quorem+0x10c>
 800bb9e:	3c01      	subs	r4, #1
 800bba0:	f101 0814 	add.w	r8, r1, #20
 800bba4:	f100 0514 	add.w	r5, r0, #20
 800bba8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbac:	9301      	str	r3, [sp, #4]
 800bbae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bbb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bbbe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bbc2:	fbb2 f6f3 	udiv	r6, r2, r3
 800bbc6:	d331      	bcc.n	800bc2c <quorem+0x9c>
 800bbc8:	f04f 0e00 	mov.w	lr, #0
 800bbcc:	4640      	mov	r0, r8
 800bbce:	46ac      	mov	ip, r5
 800bbd0:	46f2      	mov	sl, lr
 800bbd2:	f850 2b04 	ldr.w	r2, [r0], #4
 800bbd6:	b293      	uxth	r3, r2
 800bbd8:	fb06 e303 	mla	r3, r6, r3, lr
 800bbdc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbe0:	0c1a      	lsrs	r2, r3, #16
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	ebaa 0303 	sub.w	r3, sl, r3
 800bbe8:	f8dc a000 	ldr.w	sl, [ip]
 800bbec:	fa13 f38a 	uxtah	r3, r3, sl
 800bbf0:	fb06 220e 	mla	r2, r6, lr, r2
 800bbf4:	9300      	str	r3, [sp, #0]
 800bbf6:	9b00      	ldr	r3, [sp, #0]
 800bbf8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbfc:	b292      	uxth	r2, r2
 800bbfe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bc02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc06:	f8bd 3000 	ldrh.w	r3, [sp]
 800bc0a:	4581      	cmp	r9, r0
 800bc0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc10:	f84c 3b04 	str.w	r3, [ip], #4
 800bc14:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bc18:	d2db      	bcs.n	800bbd2 <quorem+0x42>
 800bc1a:	f855 300b 	ldr.w	r3, [r5, fp]
 800bc1e:	b92b      	cbnz	r3, 800bc2c <quorem+0x9c>
 800bc20:	9b01      	ldr	r3, [sp, #4]
 800bc22:	3b04      	subs	r3, #4
 800bc24:	429d      	cmp	r5, r3
 800bc26:	461a      	mov	r2, r3
 800bc28:	d32c      	bcc.n	800bc84 <quorem+0xf4>
 800bc2a:	613c      	str	r4, [r7, #16]
 800bc2c:	4638      	mov	r0, r7
 800bc2e:	f001 fca5 	bl	800d57c <__mcmp>
 800bc32:	2800      	cmp	r0, #0
 800bc34:	db22      	blt.n	800bc7c <quorem+0xec>
 800bc36:	3601      	adds	r6, #1
 800bc38:	4629      	mov	r1, r5
 800bc3a:	2000      	movs	r0, #0
 800bc3c:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc40:	f8d1 c000 	ldr.w	ip, [r1]
 800bc44:	b293      	uxth	r3, r2
 800bc46:	1ac3      	subs	r3, r0, r3
 800bc48:	0c12      	lsrs	r2, r2, #16
 800bc4a:	fa13 f38c 	uxtah	r3, r3, ip
 800bc4e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bc52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc5c:	45c1      	cmp	r9, r8
 800bc5e:	f841 3b04 	str.w	r3, [r1], #4
 800bc62:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc66:	d2e9      	bcs.n	800bc3c <quorem+0xac>
 800bc68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc70:	b922      	cbnz	r2, 800bc7c <quorem+0xec>
 800bc72:	3b04      	subs	r3, #4
 800bc74:	429d      	cmp	r5, r3
 800bc76:	461a      	mov	r2, r3
 800bc78:	d30a      	bcc.n	800bc90 <quorem+0x100>
 800bc7a:	613c      	str	r4, [r7, #16]
 800bc7c:	4630      	mov	r0, r6
 800bc7e:	b003      	add	sp, #12
 800bc80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc84:	6812      	ldr	r2, [r2, #0]
 800bc86:	3b04      	subs	r3, #4
 800bc88:	2a00      	cmp	r2, #0
 800bc8a:	d1ce      	bne.n	800bc2a <quorem+0x9a>
 800bc8c:	3c01      	subs	r4, #1
 800bc8e:	e7c9      	b.n	800bc24 <quorem+0x94>
 800bc90:	6812      	ldr	r2, [r2, #0]
 800bc92:	3b04      	subs	r3, #4
 800bc94:	2a00      	cmp	r2, #0
 800bc96:	d1f0      	bne.n	800bc7a <quorem+0xea>
 800bc98:	3c01      	subs	r4, #1
 800bc9a:	e7eb      	b.n	800bc74 <quorem+0xe4>
 800bc9c:	2000      	movs	r0, #0
 800bc9e:	e7ee      	b.n	800bc7e <quorem+0xee>

0800bca0 <_dtoa_r>:
 800bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca4:	ed2d 8b04 	vpush	{d8-d9}
 800bca8:	69c5      	ldr	r5, [r0, #28]
 800bcaa:	b093      	sub	sp, #76	; 0x4c
 800bcac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bcb0:	ec57 6b10 	vmov	r6, r7, d0
 800bcb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bcb8:	9107      	str	r1, [sp, #28]
 800bcba:	4604      	mov	r4, r0
 800bcbc:	920a      	str	r2, [sp, #40]	; 0x28
 800bcbe:	930d      	str	r3, [sp, #52]	; 0x34
 800bcc0:	b975      	cbnz	r5, 800bce0 <_dtoa_r+0x40>
 800bcc2:	2010      	movs	r0, #16
 800bcc4:	f7fe fa26 	bl	800a114 <malloc>
 800bcc8:	4602      	mov	r2, r0
 800bcca:	61e0      	str	r0, [r4, #28]
 800bccc:	b920      	cbnz	r0, 800bcd8 <_dtoa_r+0x38>
 800bcce:	4bae      	ldr	r3, [pc, #696]	; (800bf88 <_dtoa_r+0x2e8>)
 800bcd0:	21ef      	movs	r1, #239	; 0xef
 800bcd2:	48ae      	ldr	r0, [pc, #696]	; (800bf8c <_dtoa_r+0x2ec>)
 800bcd4:	f002 f86e 	bl	800ddb4 <__assert_func>
 800bcd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bcdc:	6005      	str	r5, [r0, #0]
 800bcde:	60c5      	str	r5, [r0, #12]
 800bce0:	69e3      	ldr	r3, [r4, #28]
 800bce2:	6819      	ldr	r1, [r3, #0]
 800bce4:	b151      	cbz	r1, 800bcfc <_dtoa_r+0x5c>
 800bce6:	685a      	ldr	r2, [r3, #4]
 800bce8:	604a      	str	r2, [r1, #4]
 800bcea:	2301      	movs	r3, #1
 800bcec:	4093      	lsls	r3, r2
 800bcee:	608b      	str	r3, [r1, #8]
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f001 f9bd 	bl	800d070 <_Bfree>
 800bcf6:	69e3      	ldr	r3, [r4, #28]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	601a      	str	r2, [r3, #0]
 800bcfc:	1e3b      	subs	r3, r7, #0
 800bcfe:	bfbb      	ittet	lt
 800bd00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bd04:	9303      	strlt	r3, [sp, #12]
 800bd06:	2300      	movge	r3, #0
 800bd08:	2201      	movlt	r2, #1
 800bd0a:	bfac      	ite	ge
 800bd0c:	f8c8 3000 	strge.w	r3, [r8]
 800bd10:	f8c8 2000 	strlt.w	r2, [r8]
 800bd14:	4b9e      	ldr	r3, [pc, #632]	; (800bf90 <_dtoa_r+0x2f0>)
 800bd16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bd1a:	ea33 0308 	bics.w	r3, r3, r8
 800bd1e:	d11b      	bne.n	800bd58 <_dtoa_r+0xb8>
 800bd20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd22:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd26:	6013      	str	r3, [r2, #0]
 800bd28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bd2c:	4333      	orrs	r3, r6
 800bd2e:	f000 8593 	beq.w	800c858 <_dtoa_r+0xbb8>
 800bd32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd34:	b963      	cbnz	r3, 800bd50 <_dtoa_r+0xb0>
 800bd36:	4b97      	ldr	r3, [pc, #604]	; (800bf94 <_dtoa_r+0x2f4>)
 800bd38:	e027      	b.n	800bd8a <_dtoa_r+0xea>
 800bd3a:	4b97      	ldr	r3, [pc, #604]	; (800bf98 <_dtoa_r+0x2f8>)
 800bd3c:	9300      	str	r3, [sp, #0]
 800bd3e:	3308      	adds	r3, #8
 800bd40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd42:	6013      	str	r3, [r2, #0]
 800bd44:	9800      	ldr	r0, [sp, #0]
 800bd46:	b013      	add	sp, #76	; 0x4c
 800bd48:	ecbd 8b04 	vpop	{d8-d9}
 800bd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd50:	4b90      	ldr	r3, [pc, #576]	; (800bf94 <_dtoa_r+0x2f4>)
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	3303      	adds	r3, #3
 800bd56:	e7f3      	b.n	800bd40 <_dtoa_r+0xa0>
 800bd58:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	ec51 0b17 	vmov	r0, r1, d7
 800bd62:	eeb0 8a47 	vmov.f32	s16, s14
 800bd66:	eef0 8a67 	vmov.f32	s17, s15
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	f7f4 febc 	bl	8000ae8 <__aeabi_dcmpeq>
 800bd70:	4681      	mov	r9, r0
 800bd72:	b160      	cbz	r0, 800bd8e <_dtoa_r+0xee>
 800bd74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd76:	2301      	movs	r3, #1
 800bd78:	6013      	str	r3, [r2, #0]
 800bd7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f000 8568 	beq.w	800c852 <_dtoa_r+0xbb2>
 800bd82:	4b86      	ldr	r3, [pc, #536]	; (800bf9c <_dtoa_r+0x2fc>)
 800bd84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd86:	6013      	str	r3, [r2, #0]
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	9300      	str	r3, [sp, #0]
 800bd8c:	e7da      	b.n	800bd44 <_dtoa_r+0xa4>
 800bd8e:	aa10      	add	r2, sp, #64	; 0x40
 800bd90:	a911      	add	r1, sp, #68	; 0x44
 800bd92:	4620      	mov	r0, r4
 800bd94:	eeb0 0a48 	vmov.f32	s0, s16
 800bd98:	eef0 0a68 	vmov.f32	s1, s17
 800bd9c:	f001 fd04 	bl	800d7a8 <__d2b>
 800bda0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bda4:	4682      	mov	sl, r0
 800bda6:	2d00      	cmp	r5, #0
 800bda8:	d07f      	beq.n	800beaa <_dtoa_r+0x20a>
 800bdaa:	ee18 3a90 	vmov	r3, s17
 800bdae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bdb2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bdb6:	ec51 0b18 	vmov	r0, r1, d8
 800bdba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bdbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bdc2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	2200      	movs	r2, #0
 800bdca:	4b75      	ldr	r3, [pc, #468]	; (800bfa0 <_dtoa_r+0x300>)
 800bdcc:	f7f4 fa6c 	bl	80002a8 <__aeabi_dsub>
 800bdd0:	a367      	add	r3, pc, #412	; (adr r3, 800bf70 <_dtoa_r+0x2d0>)
 800bdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd6:	f7f4 fc1f 	bl	8000618 <__aeabi_dmul>
 800bdda:	a367      	add	r3, pc, #412	; (adr r3, 800bf78 <_dtoa_r+0x2d8>)
 800bddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde0:	f7f4 fa64 	bl	80002ac <__adddf3>
 800bde4:	4606      	mov	r6, r0
 800bde6:	4628      	mov	r0, r5
 800bde8:	460f      	mov	r7, r1
 800bdea:	f7f4 fbab 	bl	8000544 <__aeabi_i2d>
 800bdee:	a364      	add	r3, pc, #400	; (adr r3, 800bf80 <_dtoa_r+0x2e0>)
 800bdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf4:	f7f4 fc10 	bl	8000618 <__aeabi_dmul>
 800bdf8:	4602      	mov	r2, r0
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	4639      	mov	r1, r7
 800be00:	f7f4 fa54 	bl	80002ac <__adddf3>
 800be04:	4606      	mov	r6, r0
 800be06:	460f      	mov	r7, r1
 800be08:	f7f4 feb6 	bl	8000b78 <__aeabi_d2iz>
 800be0c:	2200      	movs	r2, #0
 800be0e:	4683      	mov	fp, r0
 800be10:	2300      	movs	r3, #0
 800be12:	4630      	mov	r0, r6
 800be14:	4639      	mov	r1, r7
 800be16:	f7f4 fe71 	bl	8000afc <__aeabi_dcmplt>
 800be1a:	b148      	cbz	r0, 800be30 <_dtoa_r+0x190>
 800be1c:	4658      	mov	r0, fp
 800be1e:	f7f4 fb91 	bl	8000544 <__aeabi_i2d>
 800be22:	4632      	mov	r2, r6
 800be24:	463b      	mov	r3, r7
 800be26:	f7f4 fe5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800be2a:	b908      	cbnz	r0, 800be30 <_dtoa_r+0x190>
 800be2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be30:	f1bb 0f16 	cmp.w	fp, #22
 800be34:	d857      	bhi.n	800bee6 <_dtoa_r+0x246>
 800be36:	4b5b      	ldr	r3, [pc, #364]	; (800bfa4 <_dtoa_r+0x304>)
 800be38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800be3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be40:	ec51 0b18 	vmov	r0, r1, d8
 800be44:	f7f4 fe5a 	bl	8000afc <__aeabi_dcmplt>
 800be48:	2800      	cmp	r0, #0
 800be4a:	d04e      	beq.n	800beea <_dtoa_r+0x24a>
 800be4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be50:	2300      	movs	r3, #0
 800be52:	930c      	str	r3, [sp, #48]	; 0x30
 800be54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be56:	1b5b      	subs	r3, r3, r5
 800be58:	1e5a      	subs	r2, r3, #1
 800be5a:	bf45      	ittet	mi
 800be5c:	f1c3 0301 	rsbmi	r3, r3, #1
 800be60:	9305      	strmi	r3, [sp, #20]
 800be62:	2300      	movpl	r3, #0
 800be64:	2300      	movmi	r3, #0
 800be66:	9206      	str	r2, [sp, #24]
 800be68:	bf54      	ite	pl
 800be6a:	9305      	strpl	r3, [sp, #20]
 800be6c:	9306      	strmi	r3, [sp, #24]
 800be6e:	f1bb 0f00 	cmp.w	fp, #0
 800be72:	db3c      	blt.n	800beee <_dtoa_r+0x24e>
 800be74:	9b06      	ldr	r3, [sp, #24]
 800be76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800be7a:	445b      	add	r3, fp
 800be7c:	9306      	str	r3, [sp, #24]
 800be7e:	2300      	movs	r3, #0
 800be80:	9308      	str	r3, [sp, #32]
 800be82:	9b07      	ldr	r3, [sp, #28]
 800be84:	2b09      	cmp	r3, #9
 800be86:	d868      	bhi.n	800bf5a <_dtoa_r+0x2ba>
 800be88:	2b05      	cmp	r3, #5
 800be8a:	bfc4      	itt	gt
 800be8c:	3b04      	subgt	r3, #4
 800be8e:	9307      	strgt	r3, [sp, #28]
 800be90:	9b07      	ldr	r3, [sp, #28]
 800be92:	f1a3 0302 	sub.w	r3, r3, #2
 800be96:	bfcc      	ite	gt
 800be98:	2500      	movgt	r5, #0
 800be9a:	2501      	movle	r5, #1
 800be9c:	2b03      	cmp	r3, #3
 800be9e:	f200 8085 	bhi.w	800bfac <_dtoa_r+0x30c>
 800bea2:	e8df f003 	tbb	[pc, r3]
 800bea6:	3b2e      	.short	0x3b2e
 800bea8:	5839      	.short	0x5839
 800beaa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800beae:	441d      	add	r5, r3
 800beb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800beb4:	2b20      	cmp	r3, #32
 800beb6:	bfc1      	itttt	gt
 800beb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bebc:	fa08 f803 	lslgt.w	r8, r8, r3
 800bec0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bec4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bec8:	bfd6      	itet	le
 800beca:	f1c3 0320 	rsble	r3, r3, #32
 800bece:	ea48 0003 	orrgt.w	r0, r8, r3
 800bed2:	fa06 f003 	lslle.w	r0, r6, r3
 800bed6:	f7f4 fb25 	bl	8000524 <__aeabi_ui2d>
 800beda:	2201      	movs	r2, #1
 800bedc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bee0:	3d01      	subs	r5, #1
 800bee2:	920e      	str	r2, [sp, #56]	; 0x38
 800bee4:	e76f      	b.n	800bdc6 <_dtoa_r+0x126>
 800bee6:	2301      	movs	r3, #1
 800bee8:	e7b3      	b.n	800be52 <_dtoa_r+0x1b2>
 800beea:	900c      	str	r0, [sp, #48]	; 0x30
 800beec:	e7b2      	b.n	800be54 <_dtoa_r+0x1b4>
 800beee:	9b05      	ldr	r3, [sp, #20]
 800bef0:	eba3 030b 	sub.w	r3, r3, fp
 800bef4:	9305      	str	r3, [sp, #20]
 800bef6:	f1cb 0300 	rsb	r3, fp, #0
 800befa:	9308      	str	r3, [sp, #32]
 800befc:	2300      	movs	r3, #0
 800befe:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf00:	e7bf      	b.n	800be82 <_dtoa_r+0x1e2>
 800bf02:	2300      	movs	r3, #0
 800bf04:	9309      	str	r3, [sp, #36]	; 0x24
 800bf06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	dc52      	bgt.n	800bfb2 <_dtoa_r+0x312>
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	9301      	str	r3, [sp, #4]
 800bf10:	9304      	str	r3, [sp, #16]
 800bf12:	461a      	mov	r2, r3
 800bf14:	920a      	str	r2, [sp, #40]	; 0x28
 800bf16:	e00b      	b.n	800bf30 <_dtoa_r+0x290>
 800bf18:	2301      	movs	r3, #1
 800bf1a:	e7f3      	b.n	800bf04 <_dtoa_r+0x264>
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf22:	445b      	add	r3, fp
 800bf24:	9301      	str	r3, [sp, #4]
 800bf26:	3301      	adds	r3, #1
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	9304      	str	r3, [sp, #16]
 800bf2c:	bfb8      	it	lt
 800bf2e:	2301      	movlt	r3, #1
 800bf30:	69e0      	ldr	r0, [r4, #28]
 800bf32:	2100      	movs	r1, #0
 800bf34:	2204      	movs	r2, #4
 800bf36:	f102 0614 	add.w	r6, r2, #20
 800bf3a:	429e      	cmp	r6, r3
 800bf3c:	d93d      	bls.n	800bfba <_dtoa_r+0x31a>
 800bf3e:	6041      	str	r1, [r0, #4]
 800bf40:	4620      	mov	r0, r4
 800bf42:	f001 f855 	bl	800cff0 <_Balloc>
 800bf46:	9000      	str	r0, [sp, #0]
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	d139      	bne.n	800bfc0 <_dtoa_r+0x320>
 800bf4c:	4b16      	ldr	r3, [pc, #88]	; (800bfa8 <_dtoa_r+0x308>)
 800bf4e:	4602      	mov	r2, r0
 800bf50:	f240 11af 	movw	r1, #431	; 0x1af
 800bf54:	e6bd      	b.n	800bcd2 <_dtoa_r+0x32>
 800bf56:	2301      	movs	r3, #1
 800bf58:	e7e1      	b.n	800bf1e <_dtoa_r+0x27e>
 800bf5a:	2501      	movs	r5, #1
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	9307      	str	r3, [sp, #28]
 800bf60:	9509      	str	r5, [sp, #36]	; 0x24
 800bf62:	f04f 33ff 	mov.w	r3, #4294967295
 800bf66:	9301      	str	r3, [sp, #4]
 800bf68:	9304      	str	r3, [sp, #16]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	2312      	movs	r3, #18
 800bf6e:	e7d1      	b.n	800bf14 <_dtoa_r+0x274>
 800bf70:	636f4361 	.word	0x636f4361
 800bf74:	3fd287a7 	.word	0x3fd287a7
 800bf78:	8b60c8b3 	.word	0x8b60c8b3
 800bf7c:	3fc68a28 	.word	0x3fc68a28
 800bf80:	509f79fb 	.word	0x509f79fb
 800bf84:	3fd34413 	.word	0x3fd34413
 800bf88:	0800e6aa 	.word	0x0800e6aa
 800bf8c:	0800e6c1 	.word	0x0800e6c1
 800bf90:	7ff00000 	.word	0x7ff00000
 800bf94:	0800e6a6 	.word	0x0800e6a6
 800bf98:	0800e69d 	.word	0x0800e69d
 800bf9c:	0800e672 	.word	0x0800e672
 800bfa0:	3ff80000 	.word	0x3ff80000
 800bfa4:	0800e810 	.word	0x0800e810
 800bfa8:	0800e719 	.word	0x0800e719
 800bfac:	2301      	movs	r3, #1
 800bfae:	9309      	str	r3, [sp, #36]	; 0x24
 800bfb0:	e7d7      	b.n	800bf62 <_dtoa_r+0x2c2>
 800bfb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfb4:	9301      	str	r3, [sp, #4]
 800bfb6:	9304      	str	r3, [sp, #16]
 800bfb8:	e7ba      	b.n	800bf30 <_dtoa_r+0x290>
 800bfba:	3101      	adds	r1, #1
 800bfbc:	0052      	lsls	r2, r2, #1
 800bfbe:	e7ba      	b.n	800bf36 <_dtoa_r+0x296>
 800bfc0:	69e3      	ldr	r3, [r4, #28]
 800bfc2:	9a00      	ldr	r2, [sp, #0]
 800bfc4:	601a      	str	r2, [r3, #0]
 800bfc6:	9b04      	ldr	r3, [sp, #16]
 800bfc8:	2b0e      	cmp	r3, #14
 800bfca:	f200 80a8 	bhi.w	800c11e <_dtoa_r+0x47e>
 800bfce:	2d00      	cmp	r5, #0
 800bfd0:	f000 80a5 	beq.w	800c11e <_dtoa_r+0x47e>
 800bfd4:	f1bb 0f00 	cmp.w	fp, #0
 800bfd8:	dd38      	ble.n	800c04c <_dtoa_r+0x3ac>
 800bfda:	4bc0      	ldr	r3, [pc, #768]	; (800c2dc <_dtoa_r+0x63c>)
 800bfdc:	f00b 020f 	and.w	r2, fp, #15
 800bfe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfe4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bfe8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bfec:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bff0:	d019      	beq.n	800c026 <_dtoa_r+0x386>
 800bff2:	4bbb      	ldr	r3, [pc, #748]	; (800c2e0 <_dtoa_r+0x640>)
 800bff4:	ec51 0b18 	vmov	r0, r1, d8
 800bff8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bffc:	f7f4 fc36 	bl	800086c <__aeabi_ddiv>
 800c000:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c004:	f008 080f 	and.w	r8, r8, #15
 800c008:	2503      	movs	r5, #3
 800c00a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c2e0 <_dtoa_r+0x640>
 800c00e:	f1b8 0f00 	cmp.w	r8, #0
 800c012:	d10a      	bne.n	800c02a <_dtoa_r+0x38a>
 800c014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c018:	4632      	mov	r2, r6
 800c01a:	463b      	mov	r3, r7
 800c01c:	f7f4 fc26 	bl	800086c <__aeabi_ddiv>
 800c020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c024:	e02b      	b.n	800c07e <_dtoa_r+0x3de>
 800c026:	2502      	movs	r5, #2
 800c028:	e7ef      	b.n	800c00a <_dtoa_r+0x36a>
 800c02a:	f018 0f01 	tst.w	r8, #1
 800c02e:	d008      	beq.n	800c042 <_dtoa_r+0x3a2>
 800c030:	4630      	mov	r0, r6
 800c032:	4639      	mov	r1, r7
 800c034:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c038:	f7f4 faee 	bl	8000618 <__aeabi_dmul>
 800c03c:	3501      	adds	r5, #1
 800c03e:	4606      	mov	r6, r0
 800c040:	460f      	mov	r7, r1
 800c042:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c046:	f109 0908 	add.w	r9, r9, #8
 800c04a:	e7e0      	b.n	800c00e <_dtoa_r+0x36e>
 800c04c:	f000 809f 	beq.w	800c18e <_dtoa_r+0x4ee>
 800c050:	f1cb 0600 	rsb	r6, fp, #0
 800c054:	4ba1      	ldr	r3, [pc, #644]	; (800c2dc <_dtoa_r+0x63c>)
 800c056:	4fa2      	ldr	r7, [pc, #648]	; (800c2e0 <_dtoa_r+0x640>)
 800c058:	f006 020f 	and.w	r2, r6, #15
 800c05c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c064:	ec51 0b18 	vmov	r0, r1, d8
 800c068:	f7f4 fad6 	bl	8000618 <__aeabi_dmul>
 800c06c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c070:	1136      	asrs	r6, r6, #4
 800c072:	2300      	movs	r3, #0
 800c074:	2502      	movs	r5, #2
 800c076:	2e00      	cmp	r6, #0
 800c078:	d17e      	bne.n	800c178 <_dtoa_r+0x4d8>
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d1d0      	bne.n	800c020 <_dtoa_r+0x380>
 800c07e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c080:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c084:	2b00      	cmp	r3, #0
 800c086:	f000 8084 	beq.w	800c192 <_dtoa_r+0x4f2>
 800c08a:	4b96      	ldr	r3, [pc, #600]	; (800c2e4 <_dtoa_r+0x644>)
 800c08c:	2200      	movs	r2, #0
 800c08e:	4640      	mov	r0, r8
 800c090:	4649      	mov	r1, r9
 800c092:	f7f4 fd33 	bl	8000afc <__aeabi_dcmplt>
 800c096:	2800      	cmp	r0, #0
 800c098:	d07b      	beq.n	800c192 <_dtoa_r+0x4f2>
 800c09a:	9b04      	ldr	r3, [sp, #16]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d078      	beq.n	800c192 <_dtoa_r+0x4f2>
 800c0a0:	9b01      	ldr	r3, [sp, #4]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	dd39      	ble.n	800c11a <_dtoa_r+0x47a>
 800c0a6:	4b90      	ldr	r3, [pc, #576]	; (800c2e8 <_dtoa_r+0x648>)
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	4640      	mov	r0, r8
 800c0ac:	4649      	mov	r1, r9
 800c0ae:	f7f4 fab3 	bl	8000618 <__aeabi_dmul>
 800c0b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0b6:	9e01      	ldr	r6, [sp, #4]
 800c0b8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c0bc:	3501      	adds	r5, #1
 800c0be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	f7f4 fa3e 	bl	8000544 <__aeabi_i2d>
 800c0c8:	4642      	mov	r2, r8
 800c0ca:	464b      	mov	r3, r9
 800c0cc:	f7f4 faa4 	bl	8000618 <__aeabi_dmul>
 800c0d0:	4b86      	ldr	r3, [pc, #536]	; (800c2ec <_dtoa_r+0x64c>)
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f7f4 f8ea 	bl	80002ac <__adddf3>
 800c0d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c0dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0e0:	9303      	str	r3, [sp, #12]
 800c0e2:	2e00      	cmp	r6, #0
 800c0e4:	d158      	bne.n	800c198 <_dtoa_r+0x4f8>
 800c0e6:	4b82      	ldr	r3, [pc, #520]	; (800c2f0 <_dtoa_r+0x650>)
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	4640      	mov	r0, r8
 800c0ec:	4649      	mov	r1, r9
 800c0ee:	f7f4 f8db 	bl	80002a8 <__aeabi_dsub>
 800c0f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0f6:	4680      	mov	r8, r0
 800c0f8:	4689      	mov	r9, r1
 800c0fa:	f7f4 fd1d 	bl	8000b38 <__aeabi_dcmpgt>
 800c0fe:	2800      	cmp	r0, #0
 800c100:	f040 8296 	bne.w	800c630 <_dtoa_r+0x990>
 800c104:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c108:	4640      	mov	r0, r8
 800c10a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c10e:	4649      	mov	r1, r9
 800c110:	f7f4 fcf4 	bl	8000afc <__aeabi_dcmplt>
 800c114:	2800      	cmp	r0, #0
 800c116:	f040 8289 	bne.w	800c62c <_dtoa_r+0x98c>
 800c11a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c11e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c120:	2b00      	cmp	r3, #0
 800c122:	f2c0 814e 	blt.w	800c3c2 <_dtoa_r+0x722>
 800c126:	f1bb 0f0e 	cmp.w	fp, #14
 800c12a:	f300 814a 	bgt.w	800c3c2 <_dtoa_r+0x722>
 800c12e:	4b6b      	ldr	r3, [pc, #428]	; (800c2dc <_dtoa_r+0x63c>)
 800c130:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c134:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	f280 80dc 	bge.w	800c2f8 <_dtoa_r+0x658>
 800c140:	9b04      	ldr	r3, [sp, #16]
 800c142:	2b00      	cmp	r3, #0
 800c144:	f300 80d8 	bgt.w	800c2f8 <_dtoa_r+0x658>
 800c148:	f040 826f 	bne.w	800c62a <_dtoa_r+0x98a>
 800c14c:	4b68      	ldr	r3, [pc, #416]	; (800c2f0 <_dtoa_r+0x650>)
 800c14e:	2200      	movs	r2, #0
 800c150:	4640      	mov	r0, r8
 800c152:	4649      	mov	r1, r9
 800c154:	f7f4 fa60 	bl	8000618 <__aeabi_dmul>
 800c158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c15c:	f7f4 fce2 	bl	8000b24 <__aeabi_dcmpge>
 800c160:	9e04      	ldr	r6, [sp, #16]
 800c162:	4637      	mov	r7, r6
 800c164:	2800      	cmp	r0, #0
 800c166:	f040 8245 	bne.w	800c5f4 <_dtoa_r+0x954>
 800c16a:	9d00      	ldr	r5, [sp, #0]
 800c16c:	2331      	movs	r3, #49	; 0x31
 800c16e:	f805 3b01 	strb.w	r3, [r5], #1
 800c172:	f10b 0b01 	add.w	fp, fp, #1
 800c176:	e241      	b.n	800c5fc <_dtoa_r+0x95c>
 800c178:	07f2      	lsls	r2, r6, #31
 800c17a:	d505      	bpl.n	800c188 <_dtoa_r+0x4e8>
 800c17c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c180:	f7f4 fa4a 	bl	8000618 <__aeabi_dmul>
 800c184:	3501      	adds	r5, #1
 800c186:	2301      	movs	r3, #1
 800c188:	1076      	asrs	r6, r6, #1
 800c18a:	3708      	adds	r7, #8
 800c18c:	e773      	b.n	800c076 <_dtoa_r+0x3d6>
 800c18e:	2502      	movs	r5, #2
 800c190:	e775      	b.n	800c07e <_dtoa_r+0x3de>
 800c192:	9e04      	ldr	r6, [sp, #16]
 800c194:	465f      	mov	r7, fp
 800c196:	e792      	b.n	800c0be <_dtoa_r+0x41e>
 800c198:	9900      	ldr	r1, [sp, #0]
 800c19a:	4b50      	ldr	r3, [pc, #320]	; (800c2dc <_dtoa_r+0x63c>)
 800c19c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c1a0:	4431      	add	r1, r6
 800c1a2:	9102      	str	r1, [sp, #8]
 800c1a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c1a6:	eeb0 9a47 	vmov.f32	s18, s14
 800c1aa:	eef0 9a67 	vmov.f32	s19, s15
 800c1ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c1b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c1b6:	2900      	cmp	r1, #0
 800c1b8:	d044      	beq.n	800c244 <_dtoa_r+0x5a4>
 800c1ba:	494e      	ldr	r1, [pc, #312]	; (800c2f4 <_dtoa_r+0x654>)
 800c1bc:	2000      	movs	r0, #0
 800c1be:	f7f4 fb55 	bl	800086c <__aeabi_ddiv>
 800c1c2:	ec53 2b19 	vmov	r2, r3, d9
 800c1c6:	f7f4 f86f 	bl	80002a8 <__aeabi_dsub>
 800c1ca:	9d00      	ldr	r5, [sp, #0]
 800c1cc:	ec41 0b19 	vmov	d9, r0, r1
 800c1d0:	4649      	mov	r1, r9
 800c1d2:	4640      	mov	r0, r8
 800c1d4:	f7f4 fcd0 	bl	8000b78 <__aeabi_d2iz>
 800c1d8:	4606      	mov	r6, r0
 800c1da:	f7f4 f9b3 	bl	8000544 <__aeabi_i2d>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	4640      	mov	r0, r8
 800c1e4:	4649      	mov	r1, r9
 800c1e6:	f7f4 f85f 	bl	80002a8 <__aeabi_dsub>
 800c1ea:	3630      	adds	r6, #48	; 0x30
 800c1ec:	f805 6b01 	strb.w	r6, [r5], #1
 800c1f0:	ec53 2b19 	vmov	r2, r3, d9
 800c1f4:	4680      	mov	r8, r0
 800c1f6:	4689      	mov	r9, r1
 800c1f8:	f7f4 fc80 	bl	8000afc <__aeabi_dcmplt>
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	d164      	bne.n	800c2ca <_dtoa_r+0x62a>
 800c200:	4642      	mov	r2, r8
 800c202:	464b      	mov	r3, r9
 800c204:	4937      	ldr	r1, [pc, #220]	; (800c2e4 <_dtoa_r+0x644>)
 800c206:	2000      	movs	r0, #0
 800c208:	f7f4 f84e 	bl	80002a8 <__aeabi_dsub>
 800c20c:	ec53 2b19 	vmov	r2, r3, d9
 800c210:	f7f4 fc74 	bl	8000afc <__aeabi_dcmplt>
 800c214:	2800      	cmp	r0, #0
 800c216:	f040 80b6 	bne.w	800c386 <_dtoa_r+0x6e6>
 800c21a:	9b02      	ldr	r3, [sp, #8]
 800c21c:	429d      	cmp	r5, r3
 800c21e:	f43f af7c 	beq.w	800c11a <_dtoa_r+0x47a>
 800c222:	4b31      	ldr	r3, [pc, #196]	; (800c2e8 <_dtoa_r+0x648>)
 800c224:	ec51 0b19 	vmov	r0, r1, d9
 800c228:	2200      	movs	r2, #0
 800c22a:	f7f4 f9f5 	bl	8000618 <__aeabi_dmul>
 800c22e:	4b2e      	ldr	r3, [pc, #184]	; (800c2e8 <_dtoa_r+0x648>)
 800c230:	ec41 0b19 	vmov	d9, r0, r1
 800c234:	2200      	movs	r2, #0
 800c236:	4640      	mov	r0, r8
 800c238:	4649      	mov	r1, r9
 800c23a:	f7f4 f9ed 	bl	8000618 <__aeabi_dmul>
 800c23e:	4680      	mov	r8, r0
 800c240:	4689      	mov	r9, r1
 800c242:	e7c5      	b.n	800c1d0 <_dtoa_r+0x530>
 800c244:	ec51 0b17 	vmov	r0, r1, d7
 800c248:	f7f4 f9e6 	bl	8000618 <__aeabi_dmul>
 800c24c:	9b02      	ldr	r3, [sp, #8]
 800c24e:	9d00      	ldr	r5, [sp, #0]
 800c250:	930f      	str	r3, [sp, #60]	; 0x3c
 800c252:	ec41 0b19 	vmov	d9, r0, r1
 800c256:	4649      	mov	r1, r9
 800c258:	4640      	mov	r0, r8
 800c25a:	f7f4 fc8d 	bl	8000b78 <__aeabi_d2iz>
 800c25e:	4606      	mov	r6, r0
 800c260:	f7f4 f970 	bl	8000544 <__aeabi_i2d>
 800c264:	3630      	adds	r6, #48	; 0x30
 800c266:	4602      	mov	r2, r0
 800c268:	460b      	mov	r3, r1
 800c26a:	4640      	mov	r0, r8
 800c26c:	4649      	mov	r1, r9
 800c26e:	f7f4 f81b 	bl	80002a8 <__aeabi_dsub>
 800c272:	f805 6b01 	strb.w	r6, [r5], #1
 800c276:	9b02      	ldr	r3, [sp, #8]
 800c278:	429d      	cmp	r5, r3
 800c27a:	4680      	mov	r8, r0
 800c27c:	4689      	mov	r9, r1
 800c27e:	f04f 0200 	mov.w	r2, #0
 800c282:	d124      	bne.n	800c2ce <_dtoa_r+0x62e>
 800c284:	4b1b      	ldr	r3, [pc, #108]	; (800c2f4 <_dtoa_r+0x654>)
 800c286:	ec51 0b19 	vmov	r0, r1, d9
 800c28a:	f7f4 f80f 	bl	80002ac <__adddf3>
 800c28e:	4602      	mov	r2, r0
 800c290:	460b      	mov	r3, r1
 800c292:	4640      	mov	r0, r8
 800c294:	4649      	mov	r1, r9
 800c296:	f7f4 fc4f 	bl	8000b38 <__aeabi_dcmpgt>
 800c29a:	2800      	cmp	r0, #0
 800c29c:	d173      	bne.n	800c386 <_dtoa_r+0x6e6>
 800c29e:	ec53 2b19 	vmov	r2, r3, d9
 800c2a2:	4914      	ldr	r1, [pc, #80]	; (800c2f4 <_dtoa_r+0x654>)
 800c2a4:	2000      	movs	r0, #0
 800c2a6:	f7f3 ffff 	bl	80002a8 <__aeabi_dsub>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	4640      	mov	r0, r8
 800c2b0:	4649      	mov	r1, r9
 800c2b2:	f7f4 fc23 	bl	8000afc <__aeabi_dcmplt>
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	f43f af2f 	beq.w	800c11a <_dtoa_r+0x47a>
 800c2bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c2be:	1e6b      	subs	r3, r5, #1
 800c2c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c2c6:	2b30      	cmp	r3, #48	; 0x30
 800c2c8:	d0f8      	beq.n	800c2bc <_dtoa_r+0x61c>
 800c2ca:	46bb      	mov	fp, r7
 800c2cc:	e04a      	b.n	800c364 <_dtoa_r+0x6c4>
 800c2ce:	4b06      	ldr	r3, [pc, #24]	; (800c2e8 <_dtoa_r+0x648>)
 800c2d0:	f7f4 f9a2 	bl	8000618 <__aeabi_dmul>
 800c2d4:	4680      	mov	r8, r0
 800c2d6:	4689      	mov	r9, r1
 800c2d8:	e7bd      	b.n	800c256 <_dtoa_r+0x5b6>
 800c2da:	bf00      	nop
 800c2dc:	0800e810 	.word	0x0800e810
 800c2e0:	0800e7e8 	.word	0x0800e7e8
 800c2e4:	3ff00000 	.word	0x3ff00000
 800c2e8:	40240000 	.word	0x40240000
 800c2ec:	401c0000 	.word	0x401c0000
 800c2f0:	40140000 	.word	0x40140000
 800c2f4:	3fe00000 	.word	0x3fe00000
 800c2f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c2fc:	9d00      	ldr	r5, [sp, #0]
 800c2fe:	4642      	mov	r2, r8
 800c300:	464b      	mov	r3, r9
 800c302:	4630      	mov	r0, r6
 800c304:	4639      	mov	r1, r7
 800c306:	f7f4 fab1 	bl	800086c <__aeabi_ddiv>
 800c30a:	f7f4 fc35 	bl	8000b78 <__aeabi_d2iz>
 800c30e:	9001      	str	r0, [sp, #4]
 800c310:	f7f4 f918 	bl	8000544 <__aeabi_i2d>
 800c314:	4642      	mov	r2, r8
 800c316:	464b      	mov	r3, r9
 800c318:	f7f4 f97e 	bl	8000618 <__aeabi_dmul>
 800c31c:	4602      	mov	r2, r0
 800c31e:	460b      	mov	r3, r1
 800c320:	4630      	mov	r0, r6
 800c322:	4639      	mov	r1, r7
 800c324:	f7f3 ffc0 	bl	80002a8 <__aeabi_dsub>
 800c328:	9e01      	ldr	r6, [sp, #4]
 800c32a:	9f04      	ldr	r7, [sp, #16]
 800c32c:	3630      	adds	r6, #48	; 0x30
 800c32e:	f805 6b01 	strb.w	r6, [r5], #1
 800c332:	9e00      	ldr	r6, [sp, #0]
 800c334:	1bae      	subs	r6, r5, r6
 800c336:	42b7      	cmp	r7, r6
 800c338:	4602      	mov	r2, r0
 800c33a:	460b      	mov	r3, r1
 800c33c:	d134      	bne.n	800c3a8 <_dtoa_r+0x708>
 800c33e:	f7f3 ffb5 	bl	80002ac <__adddf3>
 800c342:	4642      	mov	r2, r8
 800c344:	464b      	mov	r3, r9
 800c346:	4606      	mov	r6, r0
 800c348:	460f      	mov	r7, r1
 800c34a:	f7f4 fbf5 	bl	8000b38 <__aeabi_dcmpgt>
 800c34e:	b9c8      	cbnz	r0, 800c384 <_dtoa_r+0x6e4>
 800c350:	4642      	mov	r2, r8
 800c352:	464b      	mov	r3, r9
 800c354:	4630      	mov	r0, r6
 800c356:	4639      	mov	r1, r7
 800c358:	f7f4 fbc6 	bl	8000ae8 <__aeabi_dcmpeq>
 800c35c:	b110      	cbz	r0, 800c364 <_dtoa_r+0x6c4>
 800c35e:	9b01      	ldr	r3, [sp, #4]
 800c360:	07db      	lsls	r3, r3, #31
 800c362:	d40f      	bmi.n	800c384 <_dtoa_r+0x6e4>
 800c364:	4651      	mov	r1, sl
 800c366:	4620      	mov	r0, r4
 800c368:	f000 fe82 	bl	800d070 <_Bfree>
 800c36c:	2300      	movs	r3, #0
 800c36e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c370:	702b      	strb	r3, [r5, #0]
 800c372:	f10b 0301 	add.w	r3, fp, #1
 800c376:	6013      	str	r3, [r2, #0]
 800c378:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f43f ace2 	beq.w	800bd44 <_dtoa_r+0xa4>
 800c380:	601d      	str	r5, [r3, #0]
 800c382:	e4df      	b.n	800bd44 <_dtoa_r+0xa4>
 800c384:	465f      	mov	r7, fp
 800c386:	462b      	mov	r3, r5
 800c388:	461d      	mov	r5, r3
 800c38a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c38e:	2a39      	cmp	r2, #57	; 0x39
 800c390:	d106      	bne.n	800c3a0 <_dtoa_r+0x700>
 800c392:	9a00      	ldr	r2, [sp, #0]
 800c394:	429a      	cmp	r2, r3
 800c396:	d1f7      	bne.n	800c388 <_dtoa_r+0x6e8>
 800c398:	9900      	ldr	r1, [sp, #0]
 800c39a:	2230      	movs	r2, #48	; 0x30
 800c39c:	3701      	adds	r7, #1
 800c39e:	700a      	strb	r2, [r1, #0]
 800c3a0:	781a      	ldrb	r2, [r3, #0]
 800c3a2:	3201      	adds	r2, #1
 800c3a4:	701a      	strb	r2, [r3, #0]
 800c3a6:	e790      	b.n	800c2ca <_dtoa_r+0x62a>
 800c3a8:	4ba3      	ldr	r3, [pc, #652]	; (800c638 <_dtoa_r+0x998>)
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f7f4 f934 	bl	8000618 <__aeabi_dmul>
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	4606      	mov	r6, r0
 800c3b6:	460f      	mov	r7, r1
 800c3b8:	f7f4 fb96 	bl	8000ae8 <__aeabi_dcmpeq>
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	d09e      	beq.n	800c2fe <_dtoa_r+0x65e>
 800c3c0:	e7d0      	b.n	800c364 <_dtoa_r+0x6c4>
 800c3c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3c4:	2a00      	cmp	r2, #0
 800c3c6:	f000 80ca 	beq.w	800c55e <_dtoa_r+0x8be>
 800c3ca:	9a07      	ldr	r2, [sp, #28]
 800c3cc:	2a01      	cmp	r2, #1
 800c3ce:	f300 80ad 	bgt.w	800c52c <_dtoa_r+0x88c>
 800c3d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c3d4:	2a00      	cmp	r2, #0
 800c3d6:	f000 80a5 	beq.w	800c524 <_dtoa_r+0x884>
 800c3da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c3de:	9e08      	ldr	r6, [sp, #32]
 800c3e0:	9d05      	ldr	r5, [sp, #20]
 800c3e2:	9a05      	ldr	r2, [sp, #20]
 800c3e4:	441a      	add	r2, r3
 800c3e6:	9205      	str	r2, [sp, #20]
 800c3e8:	9a06      	ldr	r2, [sp, #24]
 800c3ea:	2101      	movs	r1, #1
 800c3ec:	441a      	add	r2, r3
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	9206      	str	r2, [sp, #24]
 800c3f2:	f000 ff3d 	bl	800d270 <__i2b>
 800c3f6:	4607      	mov	r7, r0
 800c3f8:	b165      	cbz	r5, 800c414 <_dtoa_r+0x774>
 800c3fa:	9b06      	ldr	r3, [sp, #24]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	dd09      	ble.n	800c414 <_dtoa_r+0x774>
 800c400:	42ab      	cmp	r3, r5
 800c402:	9a05      	ldr	r2, [sp, #20]
 800c404:	bfa8      	it	ge
 800c406:	462b      	movge	r3, r5
 800c408:	1ad2      	subs	r2, r2, r3
 800c40a:	9205      	str	r2, [sp, #20]
 800c40c:	9a06      	ldr	r2, [sp, #24]
 800c40e:	1aed      	subs	r5, r5, r3
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	9306      	str	r3, [sp, #24]
 800c414:	9b08      	ldr	r3, [sp, #32]
 800c416:	b1f3      	cbz	r3, 800c456 <_dtoa_r+0x7b6>
 800c418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	f000 80a3 	beq.w	800c566 <_dtoa_r+0x8c6>
 800c420:	2e00      	cmp	r6, #0
 800c422:	dd10      	ble.n	800c446 <_dtoa_r+0x7a6>
 800c424:	4639      	mov	r1, r7
 800c426:	4632      	mov	r2, r6
 800c428:	4620      	mov	r0, r4
 800c42a:	f000 ffe1 	bl	800d3f0 <__pow5mult>
 800c42e:	4652      	mov	r2, sl
 800c430:	4601      	mov	r1, r0
 800c432:	4607      	mov	r7, r0
 800c434:	4620      	mov	r0, r4
 800c436:	f000 ff31 	bl	800d29c <__multiply>
 800c43a:	4651      	mov	r1, sl
 800c43c:	4680      	mov	r8, r0
 800c43e:	4620      	mov	r0, r4
 800c440:	f000 fe16 	bl	800d070 <_Bfree>
 800c444:	46c2      	mov	sl, r8
 800c446:	9b08      	ldr	r3, [sp, #32]
 800c448:	1b9a      	subs	r2, r3, r6
 800c44a:	d004      	beq.n	800c456 <_dtoa_r+0x7b6>
 800c44c:	4651      	mov	r1, sl
 800c44e:	4620      	mov	r0, r4
 800c450:	f000 ffce 	bl	800d3f0 <__pow5mult>
 800c454:	4682      	mov	sl, r0
 800c456:	2101      	movs	r1, #1
 800c458:	4620      	mov	r0, r4
 800c45a:	f000 ff09 	bl	800d270 <__i2b>
 800c45e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c460:	2b00      	cmp	r3, #0
 800c462:	4606      	mov	r6, r0
 800c464:	f340 8081 	ble.w	800c56a <_dtoa_r+0x8ca>
 800c468:	461a      	mov	r2, r3
 800c46a:	4601      	mov	r1, r0
 800c46c:	4620      	mov	r0, r4
 800c46e:	f000 ffbf 	bl	800d3f0 <__pow5mult>
 800c472:	9b07      	ldr	r3, [sp, #28]
 800c474:	2b01      	cmp	r3, #1
 800c476:	4606      	mov	r6, r0
 800c478:	dd7a      	ble.n	800c570 <_dtoa_r+0x8d0>
 800c47a:	f04f 0800 	mov.w	r8, #0
 800c47e:	6933      	ldr	r3, [r6, #16]
 800c480:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c484:	6918      	ldr	r0, [r3, #16]
 800c486:	f000 fea5 	bl	800d1d4 <__hi0bits>
 800c48a:	f1c0 0020 	rsb	r0, r0, #32
 800c48e:	9b06      	ldr	r3, [sp, #24]
 800c490:	4418      	add	r0, r3
 800c492:	f010 001f 	ands.w	r0, r0, #31
 800c496:	f000 8094 	beq.w	800c5c2 <_dtoa_r+0x922>
 800c49a:	f1c0 0320 	rsb	r3, r0, #32
 800c49e:	2b04      	cmp	r3, #4
 800c4a0:	f340 8085 	ble.w	800c5ae <_dtoa_r+0x90e>
 800c4a4:	9b05      	ldr	r3, [sp, #20]
 800c4a6:	f1c0 001c 	rsb	r0, r0, #28
 800c4aa:	4403      	add	r3, r0
 800c4ac:	9305      	str	r3, [sp, #20]
 800c4ae:	9b06      	ldr	r3, [sp, #24]
 800c4b0:	4403      	add	r3, r0
 800c4b2:	4405      	add	r5, r0
 800c4b4:	9306      	str	r3, [sp, #24]
 800c4b6:	9b05      	ldr	r3, [sp, #20]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	dd05      	ble.n	800c4c8 <_dtoa_r+0x828>
 800c4bc:	4651      	mov	r1, sl
 800c4be:	461a      	mov	r2, r3
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	f000 ffef 	bl	800d4a4 <__lshift>
 800c4c6:	4682      	mov	sl, r0
 800c4c8:	9b06      	ldr	r3, [sp, #24]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	dd05      	ble.n	800c4da <_dtoa_r+0x83a>
 800c4ce:	4631      	mov	r1, r6
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	4620      	mov	r0, r4
 800c4d4:	f000 ffe6 	bl	800d4a4 <__lshift>
 800c4d8:	4606      	mov	r6, r0
 800c4da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d072      	beq.n	800c5c6 <_dtoa_r+0x926>
 800c4e0:	4631      	mov	r1, r6
 800c4e2:	4650      	mov	r0, sl
 800c4e4:	f001 f84a 	bl	800d57c <__mcmp>
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	da6c      	bge.n	800c5c6 <_dtoa_r+0x926>
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	4651      	mov	r1, sl
 800c4f0:	220a      	movs	r2, #10
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f000 fdde 	bl	800d0b4 <__multadd>
 800c4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c4fe:	4682      	mov	sl, r0
 800c500:	2b00      	cmp	r3, #0
 800c502:	f000 81b0 	beq.w	800c866 <_dtoa_r+0xbc6>
 800c506:	2300      	movs	r3, #0
 800c508:	4639      	mov	r1, r7
 800c50a:	220a      	movs	r2, #10
 800c50c:	4620      	mov	r0, r4
 800c50e:	f000 fdd1 	bl	800d0b4 <__multadd>
 800c512:	9b01      	ldr	r3, [sp, #4]
 800c514:	2b00      	cmp	r3, #0
 800c516:	4607      	mov	r7, r0
 800c518:	f300 8096 	bgt.w	800c648 <_dtoa_r+0x9a8>
 800c51c:	9b07      	ldr	r3, [sp, #28]
 800c51e:	2b02      	cmp	r3, #2
 800c520:	dc59      	bgt.n	800c5d6 <_dtoa_r+0x936>
 800c522:	e091      	b.n	800c648 <_dtoa_r+0x9a8>
 800c524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c526:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c52a:	e758      	b.n	800c3de <_dtoa_r+0x73e>
 800c52c:	9b04      	ldr	r3, [sp, #16]
 800c52e:	1e5e      	subs	r6, r3, #1
 800c530:	9b08      	ldr	r3, [sp, #32]
 800c532:	42b3      	cmp	r3, r6
 800c534:	bfbf      	itttt	lt
 800c536:	9b08      	ldrlt	r3, [sp, #32]
 800c538:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c53a:	9608      	strlt	r6, [sp, #32]
 800c53c:	1af3      	sublt	r3, r6, r3
 800c53e:	bfb4      	ite	lt
 800c540:	18d2      	addlt	r2, r2, r3
 800c542:	1b9e      	subge	r6, r3, r6
 800c544:	9b04      	ldr	r3, [sp, #16]
 800c546:	bfbc      	itt	lt
 800c548:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c54a:	2600      	movlt	r6, #0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	bfb7      	itett	lt
 800c550:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c554:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c558:	1a9d      	sublt	r5, r3, r2
 800c55a:	2300      	movlt	r3, #0
 800c55c:	e741      	b.n	800c3e2 <_dtoa_r+0x742>
 800c55e:	9e08      	ldr	r6, [sp, #32]
 800c560:	9d05      	ldr	r5, [sp, #20]
 800c562:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c564:	e748      	b.n	800c3f8 <_dtoa_r+0x758>
 800c566:	9a08      	ldr	r2, [sp, #32]
 800c568:	e770      	b.n	800c44c <_dtoa_r+0x7ac>
 800c56a:	9b07      	ldr	r3, [sp, #28]
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	dc19      	bgt.n	800c5a4 <_dtoa_r+0x904>
 800c570:	9b02      	ldr	r3, [sp, #8]
 800c572:	b9bb      	cbnz	r3, 800c5a4 <_dtoa_r+0x904>
 800c574:	9b03      	ldr	r3, [sp, #12]
 800c576:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c57a:	b99b      	cbnz	r3, 800c5a4 <_dtoa_r+0x904>
 800c57c:	9b03      	ldr	r3, [sp, #12]
 800c57e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c582:	0d1b      	lsrs	r3, r3, #20
 800c584:	051b      	lsls	r3, r3, #20
 800c586:	b183      	cbz	r3, 800c5aa <_dtoa_r+0x90a>
 800c588:	9b05      	ldr	r3, [sp, #20]
 800c58a:	3301      	adds	r3, #1
 800c58c:	9305      	str	r3, [sp, #20]
 800c58e:	9b06      	ldr	r3, [sp, #24]
 800c590:	3301      	adds	r3, #1
 800c592:	9306      	str	r3, [sp, #24]
 800c594:	f04f 0801 	mov.w	r8, #1
 800c598:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	f47f af6f 	bne.w	800c47e <_dtoa_r+0x7de>
 800c5a0:	2001      	movs	r0, #1
 800c5a2:	e774      	b.n	800c48e <_dtoa_r+0x7ee>
 800c5a4:	f04f 0800 	mov.w	r8, #0
 800c5a8:	e7f6      	b.n	800c598 <_dtoa_r+0x8f8>
 800c5aa:	4698      	mov	r8, r3
 800c5ac:	e7f4      	b.n	800c598 <_dtoa_r+0x8f8>
 800c5ae:	d082      	beq.n	800c4b6 <_dtoa_r+0x816>
 800c5b0:	9a05      	ldr	r2, [sp, #20]
 800c5b2:	331c      	adds	r3, #28
 800c5b4:	441a      	add	r2, r3
 800c5b6:	9205      	str	r2, [sp, #20]
 800c5b8:	9a06      	ldr	r2, [sp, #24]
 800c5ba:	441a      	add	r2, r3
 800c5bc:	441d      	add	r5, r3
 800c5be:	9206      	str	r2, [sp, #24]
 800c5c0:	e779      	b.n	800c4b6 <_dtoa_r+0x816>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	e7f4      	b.n	800c5b0 <_dtoa_r+0x910>
 800c5c6:	9b04      	ldr	r3, [sp, #16]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	dc37      	bgt.n	800c63c <_dtoa_r+0x99c>
 800c5cc:	9b07      	ldr	r3, [sp, #28]
 800c5ce:	2b02      	cmp	r3, #2
 800c5d0:	dd34      	ble.n	800c63c <_dtoa_r+0x99c>
 800c5d2:	9b04      	ldr	r3, [sp, #16]
 800c5d4:	9301      	str	r3, [sp, #4]
 800c5d6:	9b01      	ldr	r3, [sp, #4]
 800c5d8:	b963      	cbnz	r3, 800c5f4 <_dtoa_r+0x954>
 800c5da:	4631      	mov	r1, r6
 800c5dc:	2205      	movs	r2, #5
 800c5de:	4620      	mov	r0, r4
 800c5e0:	f000 fd68 	bl	800d0b4 <__multadd>
 800c5e4:	4601      	mov	r1, r0
 800c5e6:	4606      	mov	r6, r0
 800c5e8:	4650      	mov	r0, sl
 800c5ea:	f000 ffc7 	bl	800d57c <__mcmp>
 800c5ee:	2800      	cmp	r0, #0
 800c5f0:	f73f adbb 	bgt.w	800c16a <_dtoa_r+0x4ca>
 800c5f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5f6:	9d00      	ldr	r5, [sp, #0]
 800c5f8:	ea6f 0b03 	mvn.w	fp, r3
 800c5fc:	f04f 0800 	mov.w	r8, #0
 800c600:	4631      	mov	r1, r6
 800c602:	4620      	mov	r0, r4
 800c604:	f000 fd34 	bl	800d070 <_Bfree>
 800c608:	2f00      	cmp	r7, #0
 800c60a:	f43f aeab 	beq.w	800c364 <_dtoa_r+0x6c4>
 800c60e:	f1b8 0f00 	cmp.w	r8, #0
 800c612:	d005      	beq.n	800c620 <_dtoa_r+0x980>
 800c614:	45b8      	cmp	r8, r7
 800c616:	d003      	beq.n	800c620 <_dtoa_r+0x980>
 800c618:	4641      	mov	r1, r8
 800c61a:	4620      	mov	r0, r4
 800c61c:	f000 fd28 	bl	800d070 <_Bfree>
 800c620:	4639      	mov	r1, r7
 800c622:	4620      	mov	r0, r4
 800c624:	f000 fd24 	bl	800d070 <_Bfree>
 800c628:	e69c      	b.n	800c364 <_dtoa_r+0x6c4>
 800c62a:	2600      	movs	r6, #0
 800c62c:	4637      	mov	r7, r6
 800c62e:	e7e1      	b.n	800c5f4 <_dtoa_r+0x954>
 800c630:	46bb      	mov	fp, r7
 800c632:	4637      	mov	r7, r6
 800c634:	e599      	b.n	800c16a <_dtoa_r+0x4ca>
 800c636:	bf00      	nop
 800c638:	40240000 	.word	0x40240000
 800c63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c63e:	2b00      	cmp	r3, #0
 800c640:	f000 80c8 	beq.w	800c7d4 <_dtoa_r+0xb34>
 800c644:	9b04      	ldr	r3, [sp, #16]
 800c646:	9301      	str	r3, [sp, #4]
 800c648:	2d00      	cmp	r5, #0
 800c64a:	dd05      	ble.n	800c658 <_dtoa_r+0x9b8>
 800c64c:	4639      	mov	r1, r7
 800c64e:	462a      	mov	r2, r5
 800c650:	4620      	mov	r0, r4
 800c652:	f000 ff27 	bl	800d4a4 <__lshift>
 800c656:	4607      	mov	r7, r0
 800c658:	f1b8 0f00 	cmp.w	r8, #0
 800c65c:	d05b      	beq.n	800c716 <_dtoa_r+0xa76>
 800c65e:	6879      	ldr	r1, [r7, #4]
 800c660:	4620      	mov	r0, r4
 800c662:	f000 fcc5 	bl	800cff0 <_Balloc>
 800c666:	4605      	mov	r5, r0
 800c668:	b928      	cbnz	r0, 800c676 <_dtoa_r+0x9d6>
 800c66a:	4b83      	ldr	r3, [pc, #524]	; (800c878 <_dtoa_r+0xbd8>)
 800c66c:	4602      	mov	r2, r0
 800c66e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c672:	f7ff bb2e 	b.w	800bcd2 <_dtoa_r+0x32>
 800c676:	693a      	ldr	r2, [r7, #16]
 800c678:	3202      	adds	r2, #2
 800c67a:	0092      	lsls	r2, r2, #2
 800c67c:	f107 010c 	add.w	r1, r7, #12
 800c680:	300c      	adds	r0, #12
 800c682:	f7ff fa6f 	bl	800bb64 <memcpy>
 800c686:	2201      	movs	r2, #1
 800c688:	4629      	mov	r1, r5
 800c68a:	4620      	mov	r0, r4
 800c68c:	f000 ff0a 	bl	800d4a4 <__lshift>
 800c690:	9b00      	ldr	r3, [sp, #0]
 800c692:	3301      	adds	r3, #1
 800c694:	9304      	str	r3, [sp, #16]
 800c696:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c69a:	4413      	add	r3, r2
 800c69c:	9308      	str	r3, [sp, #32]
 800c69e:	9b02      	ldr	r3, [sp, #8]
 800c6a0:	f003 0301 	and.w	r3, r3, #1
 800c6a4:	46b8      	mov	r8, r7
 800c6a6:	9306      	str	r3, [sp, #24]
 800c6a8:	4607      	mov	r7, r0
 800c6aa:	9b04      	ldr	r3, [sp, #16]
 800c6ac:	4631      	mov	r1, r6
 800c6ae:	3b01      	subs	r3, #1
 800c6b0:	4650      	mov	r0, sl
 800c6b2:	9301      	str	r3, [sp, #4]
 800c6b4:	f7ff fa6c 	bl	800bb90 <quorem>
 800c6b8:	4641      	mov	r1, r8
 800c6ba:	9002      	str	r0, [sp, #8]
 800c6bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c6c0:	4650      	mov	r0, sl
 800c6c2:	f000 ff5b 	bl	800d57c <__mcmp>
 800c6c6:	463a      	mov	r2, r7
 800c6c8:	9005      	str	r0, [sp, #20]
 800c6ca:	4631      	mov	r1, r6
 800c6cc:	4620      	mov	r0, r4
 800c6ce:	f000 ff71 	bl	800d5b4 <__mdiff>
 800c6d2:	68c2      	ldr	r2, [r0, #12]
 800c6d4:	4605      	mov	r5, r0
 800c6d6:	bb02      	cbnz	r2, 800c71a <_dtoa_r+0xa7a>
 800c6d8:	4601      	mov	r1, r0
 800c6da:	4650      	mov	r0, sl
 800c6dc:	f000 ff4e 	bl	800d57c <__mcmp>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	4629      	mov	r1, r5
 800c6e4:	4620      	mov	r0, r4
 800c6e6:	9209      	str	r2, [sp, #36]	; 0x24
 800c6e8:	f000 fcc2 	bl	800d070 <_Bfree>
 800c6ec:	9b07      	ldr	r3, [sp, #28]
 800c6ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6f0:	9d04      	ldr	r5, [sp, #16]
 800c6f2:	ea43 0102 	orr.w	r1, r3, r2
 800c6f6:	9b06      	ldr	r3, [sp, #24]
 800c6f8:	4319      	orrs	r1, r3
 800c6fa:	d110      	bne.n	800c71e <_dtoa_r+0xa7e>
 800c6fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c700:	d029      	beq.n	800c756 <_dtoa_r+0xab6>
 800c702:	9b05      	ldr	r3, [sp, #20]
 800c704:	2b00      	cmp	r3, #0
 800c706:	dd02      	ble.n	800c70e <_dtoa_r+0xa6e>
 800c708:	9b02      	ldr	r3, [sp, #8]
 800c70a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c70e:	9b01      	ldr	r3, [sp, #4]
 800c710:	f883 9000 	strb.w	r9, [r3]
 800c714:	e774      	b.n	800c600 <_dtoa_r+0x960>
 800c716:	4638      	mov	r0, r7
 800c718:	e7ba      	b.n	800c690 <_dtoa_r+0x9f0>
 800c71a:	2201      	movs	r2, #1
 800c71c:	e7e1      	b.n	800c6e2 <_dtoa_r+0xa42>
 800c71e:	9b05      	ldr	r3, [sp, #20]
 800c720:	2b00      	cmp	r3, #0
 800c722:	db04      	blt.n	800c72e <_dtoa_r+0xa8e>
 800c724:	9907      	ldr	r1, [sp, #28]
 800c726:	430b      	orrs	r3, r1
 800c728:	9906      	ldr	r1, [sp, #24]
 800c72a:	430b      	orrs	r3, r1
 800c72c:	d120      	bne.n	800c770 <_dtoa_r+0xad0>
 800c72e:	2a00      	cmp	r2, #0
 800c730:	dded      	ble.n	800c70e <_dtoa_r+0xa6e>
 800c732:	4651      	mov	r1, sl
 800c734:	2201      	movs	r2, #1
 800c736:	4620      	mov	r0, r4
 800c738:	f000 feb4 	bl	800d4a4 <__lshift>
 800c73c:	4631      	mov	r1, r6
 800c73e:	4682      	mov	sl, r0
 800c740:	f000 ff1c 	bl	800d57c <__mcmp>
 800c744:	2800      	cmp	r0, #0
 800c746:	dc03      	bgt.n	800c750 <_dtoa_r+0xab0>
 800c748:	d1e1      	bne.n	800c70e <_dtoa_r+0xa6e>
 800c74a:	f019 0f01 	tst.w	r9, #1
 800c74e:	d0de      	beq.n	800c70e <_dtoa_r+0xa6e>
 800c750:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c754:	d1d8      	bne.n	800c708 <_dtoa_r+0xa68>
 800c756:	9a01      	ldr	r2, [sp, #4]
 800c758:	2339      	movs	r3, #57	; 0x39
 800c75a:	7013      	strb	r3, [r2, #0]
 800c75c:	462b      	mov	r3, r5
 800c75e:	461d      	mov	r5, r3
 800c760:	3b01      	subs	r3, #1
 800c762:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c766:	2a39      	cmp	r2, #57	; 0x39
 800c768:	d06c      	beq.n	800c844 <_dtoa_r+0xba4>
 800c76a:	3201      	adds	r2, #1
 800c76c:	701a      	strb	r2, [r3, #0]
 800c76e:	e747      	b.n	800c600 <_dtoa_r+0x960>
 800c770:	2a00      	cmp	r2, #0
 800c772:	dd07      	ble.n	800c784 <_dtoa_r+0xae4>
 800c774:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c778:	d0ed      	beq.n	800c756 <_dtoa_r+0xab6>
 800c77a:	9a01      	ldr	r2, [sp, #4]
 800c77c:	f109 0301 	add.w	r3, r9, #1
 800c780:	7013      	strb	r3, [r2, #0]
 800c782:	e73d      	b.n	800c600 <_dtoa_r+0x960>
 800c784:	9b04      	ldr	r3, [sp, #16]
 800c786:	9a08      	ldr	r2, [sp, #32]
 800c788:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d043      	beq.n	800c818 <_dtoa_r+0xb78>
 800c790:	4651      	mov	r1, sl
 800c792:	2300      	movs	r3, #0
 800c794:	220a      	movs	r2, #10
 800c796:	4620      	mov	r0, r4
 800c798:	f000 fc8c 	bl	800d0b4 <__multadd>
 800c79c:	45b8      	cmp	r8, r7
 800c79e:	4682      	mov	sl, r0
 800c7a0:	f04f 0300 	mov.w	r3, #0
 800c7a4:	f04f 020a 	mov.w	r2, #10
 800c7a8:	4641      	mov	r1, r8
 800c7aa:	4620      	mov	r0, r4
 800c7ac:	d107      	bne.n	800c7be <_dtoa_r+0xb1e>
 800c7ae:	f000 fc81 	bl	800d0b4 <__multadd>
 800c7b2:	4680      	mov	r8, r0
 800c7b4:	4607      	mov	r7, r0
 800c7b6:	9b04      	ldr	r3, [sp, #16]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	9304      	str	r3, [sp, #16]
 800c7bc:	e775      	b.n	800c6aa <_dtoa_r+0xa0a>
 800c7be:	f000 fc79 	bl	800d0b4 <__multadd>
 800c7c2:	4639      	mov	r1, r7
 800c7c4:	4680      	mov	r8, r0
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	220a      	movs	r2, #10
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	f000 fc72 	bl	800d0b4 <__multadd>
 800c7d0:	4607      	mov	r7, r0
 800c7d2:	e7f0      	b.n	800c7b6 <_dtoa_r+0xb16>
 800c7d4:	9b04      	ldr	r3, [sp, #16]
 800c7d6:	9301      	str	r3, [sp, #4]
 800c7d8:	9d00      	ldr	r5, [sp, #0]
 800c7da:	4631      	mov	r1, r6
 800c7dc:	4650      	mov	r0, sl
 800c7de:	f7ff f9d7 	bl	800bb90 <quorem>
 800c7e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c7e6:	9b00      	ldr	r3, [sp, #0]
 800c7e8:	f805 9b01 	strb.w	r9, [r5], #1
 800c7ec:	1aea      	subs	r2, r5, r3
 800c7ee:	9b01      	ldr	r3, [sp, #4]
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	dd07      	ble.n	800c804 <_dtoa_r+0xb64>
 800c7f4:	4651      	mov	r1, sl
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	220a      	movs	r2, #10
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f000 fc5a 	bl	800d0b4 <__multadd>
 800c800:	4682      	mov	sl, r0
 800c802:	e7ea      	b.n	800c7da <_dtoa_r+0xb3a>
 800c804:	9b01      	ldr	r3, [sp, #4]
 800c806:	2b00      	cmp	r3, #0
 800c808:	bfc8      	it	gt
 800c80a:	461d      	movgt	r5, r3
 800c80c:	9b00      	ldr	r3, [sp, #0]
 800c80e:	bfd8      	it	le
 800c810:	2501      	movle	r5, #1
 800c812:	441d      	add	r5, r3
 800c814:	f04f 0800 	mov.w	r8, #0
 800c818:	4651      	mov	r1, sl
 800c81a:	2201      	movs	r2, #1
 800c81c:	4620      	mov	r0, r4
 800c81e:	f000 fe41 	bl	800d4a4 <__lshift>
 800c822:	4631      	mov	r1, r6
 800c824:	4682      	mov	sl, r0
 800c826:	f000 fea9 	bl	800d57c <__mcmp>
 800c82a:	2800      	cmp	r0, #0
 800c82c:	dc96      	bgt.n	800c75c <_dtoa_r+0xabc>
 800c82e:	d102      	bne.n	800c836 <_dtoa_r+0xb96>
 800c830:	f019 0f01 	tst.w	r9, #1
 800c834:	d192      	bne.n	800c75c <_dtoa_r+0xabc>
 800c836:	462b      	mov	r3, r5
 800c838:	461d      	mov	r5, r3
 800c83a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c83e:	2a30      	cmp	r2, #48	; 0x30
 800c840:	d0fa      	beq.n	800c838 <_dtoa_r+0xb98>
 800c842:	e6dd      	b.n	800c600 <_dtoa_r+0x960>
 800c844:	9a00      	ldr	r2, [sp, #0]
 800c846:	429a      	cmp	r2, r3
 800c848:	d189      	bne.n	800c75e <_dtoa_r+0xabe>
 800c84a:	f10b 0b01 	add.w	fp, fp, #1
 800c84e:	2331      	movs	r3, #49	; 0x31
 800c850:	e796      	b.n	800c780 <_dtoa_r+0xae0>
 800c852:	4b0a      	ldr	r3, [pc, #40]	; (800c87c <_dtoa_r+0xbdc>)
 800c854:	f7ff ba99 	b.w	800bd8a <_dtoa_r+0xea>
 800c858:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	f47f aa6d 	bne.w	800bd3a <_dtoa_r+0x9a>
 800c860:	4b07      	ldr	r3, [pc, #28]	; (800c880 <_dtoa_r+0xbe0>)
 800c862:	f7ff ba92 	b.w	800bd8a <_dtoa_r+0xea>
 800c866:	9b01      	ldr	r3, [sp, #4]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	dcb5      	bgt.n	800c7d8 <_dtoa_r+0xb38>
 800c86c:	9b07      	ldr	r3, [sp, #28]
 800c86e:	2b02      	cmp	r3, #2
 800c870:	f73f aeb1 	bgt.w	800c5d6 <_dtoa_r+0x936>
 800c874:	e7b0      	b.n	800c7d8 <_dtoa_r+0xb38>
 800c876:	bf00      	nop
 800c878:	0800e719 	.word	0x0800e719
 800c87c:	0800e671 	.word	0x0800e671
 800c880:	0800e69d 	.word	0x0800e69d

0800c884 <_free_r>:
 800c884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c886:	2900      	cmp	r1, #0
 800c888:	d044      	beq.n	800c914 <_free_r+0x90>
 800c88a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c88e:	9001      	str	r0, [sp, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	f1a1 0404 	sub.w	r4, r1, #4
 800c896:	bfb8      	it	lt
 800c898:	18e4      	addlt	r4, r4, r3
 800c89a:	f7fd fceb 	bl	800a274 <__malloc_lock>
 800c89e:	4a1e      	ldr	r2, [pc, #120]	; (800c918 <_free_r+0x94>)
 800c8a0:	9801      	ldr	r0, [sp, #4]
 800c8a2:	6813      	ldr	r3, [r2, #0]
 800c8a4:	b933      	cbnz	r3, 800c8b4 <_free_r+0x30>
 800c8a6:	6063      	str	r3, [r4, #4]
 800c8a8:	6014      	str	r4, [r2, #0]
 800c8aa:	b003      	add	sp, #12
 800c8ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c8b0:	f7fd bce6 	b.w	800a280 <__malloc_unlock>
 800c8b4:	42a3      	cmp	r3, r4
 800c8b6:	d908      	bls.n	800c8ca <_free_r+0x46>
 800c8b8:	6825      	ldr	r5, [r4, #0]
 800c8ba:	1961      	adds	r1, r4, r5
 800c8bc:	428b      	cmp	r3, r1
 800c8be:	bf01      	itttt	eq
 800c8c0:	6819      	ldreq	r1, [r3, #0]
 800c8c2:	685b      	ldreq	r3, [r3, #4]
 800c8c4:	1949      	addeq	r1, r1, r5
 800c8c6:	6021      	streq	r1, [r4, #0]
 800c8c8:	e7ed      	b.n	800c8a6 <_free_r+0x22>
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	b10b      	cbz	r3, 800c8d4 <_free_r+0x50>
 800c8d0:	42a3      	cmp	r3, r4
 800c8d2:	d9fa      	bls.n	800c8ca <_free_r+0x46>
 800c8d4:	6811      	ldr	r1, [r2, #0]
 800c8d6:	1855      	adds	r5, r2, r1
 800c8d8:	42a5      	cmp	r5, r4
 800c8da:	d10b      	bne.n	800c8f4 <_free_r+0x70>
 800c8dc:	6824      	ldr	r4, [r4, #0]
 800c8de:	4421      	add	r1, r4
 800c8e0:	1854      	adds	r4, r2, r1
 800c8e2:	42a3      	cmp	r3, r4
 800c8e4:	6011      	str	r1, [r2, #0]
 800c8e6:	d1e0      	bne.n	800c8aa <_free_r+0x26>
 800c8e8:	681c      	ldr	r4, [r3, #0]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	6053      	str	r3, [r2, #4]
 800c8ee:	440c      	add	r4, r1
 800c8f0:	6014      	str	r4, [r2, #0]
 800c8f2:	e7da      	b.n	800c8aa <_free_r+0x26>
 800c8f4:	d902      	bls.n	800c8fc <_free_r+0x78>
 800c8f6:	230c      	movs	r3, #12
 800c8f8:	6003      	str	r3, [r0, #0]
 800c8fa:	e7d6      	b.n	800c8aa <_free_r+0x26>
 800c8fc:	6825      	ldr	r5, [r4, #0]
 800c8fe:	1961      	adds	r1, r4, r5
 800c900:	428b      	cmp	r3, r1
 800c902:	bf04      	itt	eq
 800c904:	6819      	ldreq	r1, [r3, #0]
 800c906:	685b      	ldreq	r3, [r3, #4]
 800c908:	6063      	str	r3, [r4, #4]
 800c90a:	bf04      	itt	eq
 800c90c:	1949      	addeq	r1, r1, r5
 800c90e:	6021      	streq	r1, [r4, #0]
 800c910:	6054      	str	r4, [r2, #4]
 800c912:	e7ca      	b.n	800c8aa <_free_r+0x26>
 800c914:	b003      	add	sp, #12
 800c916:	bd30      	pop	{r4, r5, pc}
 800c918:	20000a5c 	.word	0x20000a5c

0800c91c <rshift>:
 800c91c:	6903      	ldr	r3, [r0, #16]
 800c91e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c922:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c926:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c92a:	f100 0414 	add.w	r4, r0, #20
 800c92e:	dd45      	ble.n	800c9bc <rshift+0xa0>
 800c930:	f011 011f 	ands.w	r1, r1, #31
 800c934:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c938:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c93c:	d10c      	bne.n	800c958 <rshift+0x3c>
 800c93e:	f100 0710 	add.w	r7, r0, #16
 800c942:	4629      	mov	r1, r5
 800c944:	42b1      	cmp	r1, r6
 800c946:	d334      	bcc.n	800c9b2 <rshift+0x96>
 800c948:	1a9b      	subs	r3, r3, r2
 800c94a:	009b      	lsls	r3, r3, #2
 800c94c:	1eea      	subs	r2, r5, #3
 800c94e:	4296      	cmp	r6, r2
 800c950:	bf38      	it	cc
 800c952:	2300      	movcc	r3, #0
 800c954:	4423      	add	r3, r4
 800c956:	e015      	b.n	800c984 <rshift+0x68>
 800c958:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c95c:	f1c1 0820 	rsb	r8, r1, #32
 800c960:	40cf      	lsrs	r7, r1
 800c962:	f105 0e04 	add.w	lr, r5, #4
 800c966:	46a1      	mov	r9, r4
 800c968:	4576      	cmp	r6, lr
 800c96a:	46f4      	mov	ip, lr
 800c96c:	d815      	bhi.n	800c99a <rshift+0x7e>
 800c96e:	1a9a      	subs	r2, r3, r2
 800c970:	0092      	lsls	r2, r2, #2
 800c972:	3a04      	subs	r2, #4
 800c974:	3501      	adds	r5, #1
 800c976:	42ae      	cmp	r6, r5
 800c978:	bf38      	it	cc
 800c97a:	2200      	movcc	r2, #0
 800c97c:	18a3      	adds	r3, r4, r2
 800c97e:	50a7      	str	r7, [r4, r2]
 800c980:	b107      	cbz	r7, 800c984 <rshift+0x68>
 800c982:	3304      	adds	r3, #4
 800c984:	1b1a      	subs	r2, r3, r4
 800c986:	42a3      	cmp	r3, r4
 800c988:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c98c:	bf08      	it	eq
 800c98e:	2300      	moveq	r3, #0
 800c990:	6102      	str	r2, [r0, #16]
 800c992:	bf08      	it	eq
 800c994:	6143      	streq	r3, [r0, #20]
 800c996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c99a:	f8dc c000 	ldr.w	ip, [ip]
 800c99e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c9a2:	ea4c 0707 	orr.w	r7, ip, r7
 800c9a6:	f849 7b04 	str.w	r7, [r9], #4
 800c9aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c9ae:	40cf      	lsrs	r7, r1
 800c9b0:	e7da      	b.n	800c968 <rshift+0x4c>
 800c9b2:	f851 cb04 	ldr.w	ip, [r1], #4
 800c9b6:	f847 cf04 	str.w	ip, [r7, #4]!
 800c9ba:	e7c3      	b.n	800c944 <rshift+0x28>
 800c9bc:	4623      	mov	r3, r4
 800c9be:	e7e1      	b.n	800c984 <rshift+0x68>

0800c9c0 <__hexdig_fun>:
 800c9c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c9c4:	2b09      	cmp	r3, #9
 800c9c6:	d802      	bhi.n	800c9ce <__hexdig_fun+0xe>
 800c9c8:	3820      	subs	r0, #32
 800c9ca:	b2c0      	uxtb	r0, r0
 800c9cc:	4770      	bx	lr
 800c9ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c9d2:	2b05      	cmp	r3, #5
 800c9d4:	d801      	bhi.n	800c9da <__hexdig_fun+0x1a>
 800c9d6:	3847      	subs	r0, #71	; 0x47
 800c9d8:	e7f7      	b.n	800c9ca <__hexdig_fun+0xa>
 800c9da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c9de:	2b05      	cmp	r3, #5
 800c9e0:	d801      	bhi.n	800c9e6 <__hexdig_fun+0x26>
 800c9e2:	3827      	subs	r0, #39	; 0x27
 800c9e4:	e7f1      	b.n	800c9ca <__hexdig_fun+0xa>
 800c9e6:	2000      	movs	r0, #0
 800c9e8:	4770      	bx	lr
	...

0800c9ec <__gethex>:
 800c9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f0:	4617      	mov	r7, r2
 800c9f2:	680a      	ldr	r2, [r1, #0]
 800c9f4:	b085      	sub	sp, #20
 800c9f6:	f102 0b02 	add.w	fp, r2, #2
 800c9fa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c9fe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ca02:	4681      	mov	r9, r0
 800ca04:	468a      	mov	sl, r1
 800ca06:	9302      	str	r3, [sp, #8]
 800ca08:	32fe      	adds	r2, #254	; 0xfe
 800ca0a:	eb02 030b 	add.w	r3, r2, fp
 800ca0e:	46d8      	mov	r8, fp
 800ca10:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800ca14:	9301      	str	r3, [sp, #4]
 800ca16:	2830      	cmp	r0, #48	; 0x30
 800ca18:	d0f7      	beq.n	800ca0a <__gethex+0x1e>
 800ca1a:	f7ff ffd1 	bl	800c9c0 <__hexdig_fun>
 800ca1e:	4604      	mov	r4, r0
 800ca20:	2800      	cmp	r0, #0
 800ca22:	d138      	bne.n	800ca96 <__gethex+0xaa>
 800ca24:	49a7      	ldr	r1, [pc, #668]	; (800ccc4 <__gethex+0x2d8>)
 800ca26:	2201      	movs	r2, #1
 800ca28:	4640      	mov	r0, r8
 800ca2a:	f7ff f802 	bl	800ba32 <strncmp>
 800ca2e:	4606      	mov	r6, r0
 800ca30:	2800      	cmp	r0, #0
 800ca32:	d169      	bne.n	800cb08 <__gethex+0x11c>
 800ca34:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ca38:	465d      	mov	r5, fp
 800ca3a:	f7ff ffc1 	bl	800c9c0 <__hexdig_fun>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	d064      	beq.n	800cb0c <__gethex+0x120>
 800ca42:	465a      	mov	r2, fp
 800ca44:	7810      	ldrb	r0, [r2, #0]
 800ca46:	2830      	cmp	r0, #48	; 0x30
 800ca48:	4690      	mov	r8, r2
 800ca4a:	f102 0201 	add.w	r2, r2, #1
 800ca4e:	d0f9      	beq.n	800ca44 <__gethex+0x58>
 800ca50:	f7ff ffb6 	bl	800c9c0 <__hexdig_fun>
 800ca54:	2301      	movs	r3, #1
 800ca56:	fab0 f480 	clz	r4, r0
 800ca5a:	0964      	lsrs	r4, r4, #5
 800ca5c:	465e      	mov	r6, fp
 800ca5e:	9301      	str	r3, [sp, #4]
 800ca60:	4642      	mov	r2, r8
 800ca62:	4615      	mov	r5, r2
 800ca64:	3201      	adds	r2, #1
 800ca66:	7828      	ldrb	r0, [r5, #0]
 800ca68:	f7ff ffaa 	bl	800c9c0 <__hexdig_fun>
 800ca6c:	2800      	cmp	r0, #0
 800ca6e:	d1f8      	bne.n	800ca62 <__gethex+0x76>
 800ca70:	4994      	ldr	r1, [pc, #592]	; (800ccc4 <__gethex+0x2d8>)
 800ca72:	2201      	movs	r2, #1
 800ca74:	4628      	mov	r0, r5
 800ca76:	f7fe ffdc 	bl	800ba32 <strncmp>
 800ca7a:	b978      	cbnz	r0, 800ca9c <__gethex+0xb0>
 800ca7c:	b946      	cbnz	r6, 800ca90 <__gethex+0xa4>
 800ca7e:	1c6e      	adds	r6, r5, #1
 800ca80:	4632      	mov	r2, r6
 800ca82:	4615      	mov	r5, r2
 800ca84:	3201      	adds	r2, #1
 800ca86:	7828      	ldrb	r0, [r5, #0]
 800ca88:	f7ff ff9a 	bl	800c9c0 <__hexdig_fun>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d1f8      	bne.n	800ca82 <__gethex+0x96>
 800ca90:	1b73      	subs	r3, r6, r5
 800ca92:	009e      	lsls	r6, r3, #2
 800ca94:	e004      	b.n	800caa0 <__gethex+0xb4>
 800ca96:	2400      	movs	r4, #0
 800ca98:	4626      	mov	r6, r4
 800ca9a:	e7e1      	b.n	800ca60 <__gethex+0x74>
 800ca9c:	2e00      	cmp	r6, #0
 800ca9e:	d1f7      	bne.n	800ca90 <__gethex+0xa4>
 800caa0:	782b      	ldrb	r3, [r5, #0]
 800caa2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800caa6:	2b50      	cmp	r3, #80	; 0x50
 800caa8:	d13d      	bne.n	800cb26 <__gethex+0x13a>
 800caaa:	786b      	ldrb	r3, [r5, #1]
 800caac:	2b2b      	cmp	r3, #43	; 0x2b
 800caae:	d02f      	beq.n	800cb10 <__gethex+0x124>
 800cab0:	2b2d      	cmp	r3, #45	; 0x2d
 800cab2:	d031      	beq.n	800cb18 <__gethex+0x12c>
 800cab4:	1c69      	adds	r1, r5, #1
 800cab6:	f04f 0b00 	mov.w	fp, #0
 800caba:	7808      	ldrb	r0, [r1, #0]
 800cabc:	f7ff ff80 	bl	800c9c0 <__hexdig_fun>
 800cac0:	1e42      	subs	r2, r0, #1
 800cac2:	b2d2      	uxtb	r2, r2
 800cac4:	2a18      	cmp	r2, #24
 800cac6:	d82e      	bhi.n	800cb26 <__gethex+0x13a>
 800cac8:	f1a0 0210 	sub.w	r2, r0, #16
 800cacc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cad0:	f7ff ff76 	bl	800c9c0 <__hexdig_fun>
 800cad4:	f100 3cff 	add.w	ip, r0, #4294967295
 800cad8:	fa5f fc8c 	uxtb.w	ip, ip
 800cadc:	f1bc 0f18 	cmp.w	ip, #24
 800cae0:	d91d      	bls.n	800cb1e <__gethex+0x132>
 800cae2:	f1bb 0f00 	cmp.w	fp, #0
 800cae6:	d000      	beq.n	800caea <__gethex+0xfe>
 800cae8:	4252      	negs	r2, r2
 800caea:	4416      	add	r6, r2
 800caec:	f8ca 1000 	str.w	r1, [sl]
 800caf0:	b1dc      	cbz	r4, 800cb2a <__gethex+0x13e>
 800caf2:	9b01      	ldr	r3, [sp, #4]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	bf14      	ite	ne
 800caf8:	f04f 0800 	movne.w	r8, #0
 800cafc:	f04f 0806 	moveq.w	r8, #6
 800cb00:	4640      	mov	r0, r8
 800cb02:	b005      	add	sp, #20
 800cb04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb08:	4645      	mov	r5, r8
 800cb0a:	4626      	mov	r6, r4
 800cb0c:	2401      	movs	r4, #1
 800cb0e:	e7c7      	b.n	800caa0 <__gethex+0xb4>
 800cb10:	f04f 0b00 	mov.w	fp, #0
 800cb14:	1ca9      	adds	r1, r5, #2
 800cb16:	e7d0      	b.n	800caba <__gethex+0xce>
 800cb18:	f04f 0b01 	mov.w	fp, #1
 800cb1c:	e7fa      	b.n	800cb14 <__gethex+0x128>
 800cb1e:	230a      	movs	r3, #10
 800cb20:	fb03 0002 	mla	r0, r3, r2, r0
 800cb24:	e7d0      	b.n	800cac8 <__gethex+0xdc>
 800cb26:	4629      	mov	r1, r5
 800cb28:	e7e0      	b.n	800caec <__gethex+0x100>
 800cb2a:	eba5 0308 	sub.w	r3, r5, r8
 800cb2e:	3b01      	subs	r3, #1
 800cb30:	4621      	mov	r1, r4
 800cb32:	2b07      	cmp	r3, #7
 800cb34:	dc0a      	bgt.n	800cb4c <__gethex+0x160>
 800cb36:	4648      	mov	r0, r9
 800cb38:	f000 fa5a 	bl	800cff0 <_Balloc>
 800cb3c:	4604      	mov	r4, r0
 800cb3e:	b940      	cbnz	r0, 800cb52 <__gethex+0x166>
 800cb40:	4b61      	ldr	r3, [pc, #388]	; (800ccc8 <__gethex+0x2dc>)
 800cb42:	4602      	mov	r2, r0
 800cb44:	21e4      	movs	r1, #228	; 0xe4
 800cb46:	4861      	ldr	r0, [pc, #388]	; (800cccc <__gethex+0x2e0>)
 800cb48:	f001 f934 	bl	800ddb4 <__assert_func>
 800cb4c:	3101      	adds	r1, #1
 800cb4e:	105b      	asrs	r3, r3, #1
 800cb50:	e7ef      	b.n	800cb32 <__gethex+0x146>
 800cb52:	f100 0a14 	add.w	sl, r0, #20
 800cb56:	2300      	movs	r3, #0
 800cb58:	495a      	ldr	r1, [pc, #360]	; (800ccc4 <__gethex+0x2d8>)
 800cb5a:	f8cd a004 	str.w	sl, [sp, #4]
 800cb5e:	469b      	mov	fp, r3
 800cb60:	45a8      	cmp	r8, r5
 800cb62:	d342      	bcc.n	800cbea <__gethex+0x1fe>
 800cb64:	9801      	ldr	r0, [sp, #4]
 800cb66:	f840 bb04 	str.w	fp, [r0], #4
 800cb6a:	eba0 000a 	sub.w	r0, r0, sl
 800cb6e:	1080      	asrs	r0, r0, #2
 800cb70:	6120      	str	r0, [r4, #16]
 800cb72:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800cb76:	4658      	mov	r0, fp
 800cb78:	f000 fb2c 	bl	800d1d4 <__hi0bits>
 800cb7c:	683d      	ldr	r5, [r7, #0]
 800cb7e:	eba8 0000 	sub.w	r0, r8, r0
 800cb82:	42a8      	cmp	r0, r5
 800cb84:	dd59      	ble.n	800cc3a <__gethex+0x24e>
 800cb86:	eba0 0805 	sub.w	r8, r0, r5
 800cb8a:	4641      	mov	r1, r8
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	f000 febb 	bl	800d908 <__any_on>
 800cb92:	4683      	mov	fp, r0
 800cb94:	b1b8      	cbz	r0, 800cbc6 <__gethex+0x1da>
 800cb96:	f108 33ff 	add.w	r3, r8, #4294967295
 800cb9a:	1159      	asrs	r1, r3, #5
 800cb9c:	f003 021f 	and.w	r2, r3, #31
 800cba0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cba4:	f04f 0b01 	mov.w	fp, #1
 800cba8:	fa0b f202 	lsl.w	r2, fp, r2
 800cbac:	420a      	tst	r2, r1
 800cbae:	d00a      	beq.n	800cbc6 <__gethex+0x1da>
 800cbb0:	455b      	cmp	r3, fp
 800cbb2:	dd06      	ble.n	800cbc2 <__gethex+0x1d6>
 800cbb4:	f1a8 0102 	sub.w	r1, r8, #2
 800cbb8:	4620      	mov	r0, r4
 800cbba:	f000 fea5 	bl	800d908 <__any_on>
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	d138      	bne.n	800cc34 <__gethex+0x248>
 800cbc2:	f04f 0b02 	mov.w	fp, #2
 800cbc6:	4641      	mov	r1, r8
 800cbc8:	4620      	mov	r0, r4
 800cbca:	f7ff fea7 	bl	800c91c <rshift>
 800cbce:	4446      	add	r6, r8
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	42b3      	cmp	r3, r6
 800cbd4:	da41      	bge.n	800cc5a <__gethex+0x26e>
 800cbd6:	4621      	mov	r1, r4
 800cbd8:	4648      	mov	r0, r9
 800cbda:	f000 fa49 	bl	800d070 <_Bfree>
 800cbde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	6013      	str	r3, [r2, #0]
 800cbe4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800cbe8:	e78a      	b.n	800cb00 <__gethex+0x114>
 800cbea:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800cbee:	2a2e      	cmp	r2, #46	; 0x2e
 800cbf0:	d014      	beq.n	800cc1c <__gethex+0x230>
 800cbf2:	2b20      	cmp	r3, #32
 800cbf4:	d106      	bne.n	800cc04 <__gethex+0x218>
 800cbf6:	9b01      	ldr	r3, [sp, #4]
 800cbf8:	f843 bb04 	str.w	fp, [r3], #4
 800cbfc:	f04f 0b00 	mov.w	fp, #0
 800cc00:	9301      	str	r3, [sp, #4]
 800cc02:	465b      	mov	r3, fp
 800cc04:	7828      	ldrb	r0, [r5, #0]
 800cc06:	9303      	str	r3, [sp, #12]
 800cc08:	f7ff feda 	bl	800c9c0 <__hexdig_fun>
 800cc0c:	9b03      	ldr	r3, [sp, #12]
 800cc0e:	f000 000f 	and.w	r0, r0, #15
 800cc12:	4098      	lsls	r0, r3
 800cc14:	ea4b 0b00 	orr.w	fp, fp, r0
 800cc18:	3304      	adds	r3, #4
 800cc1a:	e7a1      	b.n	800cb60 <__gethex+0x174>
 800cc1c:	45a8      	cmp	r8, r5
 800cc1e:	d8e8      	bhi.n	800cbf2 <__gethex+0x206>
 800cc20:	2201      	movs	r2, #1
 800cc22:	4628      	mov	r0, r5
 800cc24:	9303      	str	r3, [sp, #12]
 800cc26:	f7fe ff04 	bl	800ba32 <strncmp>
 800cc2a:	4926      	ldr	r1, [pc, #152]	; (800ccc4 <__gethex+0x2d8>)
 800cc2c:	9b03      	ldr	r3, [sp, #12]
 800cc2e:	2800      	cmp	r0, #0
 800cc30:	d1df      	bne.n	800cbf2 <__gethex+0x206>
 800cc32:	e795      	b.n	800cb60 <__gethex+0x174>
 800cc34:	f04f 0b03 	mov.w	fp, #3
 800cc38:	e7c5      	b.n	800cbc6 <__gethex+0x1da>
 800cc3a:	da0b      	bge.n	800cc54 <__gethex+0x268>
 800cc3c:	eba5 0800 	sub.w	r8, r5, r0
 800cc40:	4621      	mov	r1, r4
 800cc42:	4642      	mov	r2, r8
 800cc44:	4648      	mov	r0, r9
 800cc46:	f000 fc2d 	bl	800d4a4 <__lshift>
 800cc4a:	eba6 0608 	sub.w	r6, r6, r8
 800cc4e:	4604      	mov	r4, r0
 800cc50:	f100 0a14 	add.w	sl, r0, #20
 800cc54:	f04f 0b00 	mov.w	fp, #0
 800cc58:	e7ba      	b.n	800cbd0 <__gethex+0x1e4>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	42b3      	cmp	r3, r6
 800cc5e:	dd73      	ble.n	800cd48 <__gethex+0x35c>
 800cc60:	1b9e      	subs	r6, r3, r6
 800cc62:	42b5      	cmp	r5, r6
 800cc64:	dc34      	bgt.n	800ccd0 <__gethex+0x2e4>
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2b02      	cmp	r3, #2
 800cc6a:	d023      	beq.n	800ccb4 <__gethex+0x2c8>
 800cc6c:	2b03      	cmp	r3, #3
 800cc6e:	d025      	beq.n	800ccbc <__gethex+0x2d0>
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d115      	bne.n	800cca0 <__gethex+0x2b4>
 800cc74:	42b5      	cmp	r5, r6
 800cc76:	d113      	bne.n	800cca0 <__gethex+0x2b4>
 800cc78:	2d01      	cmp	r5, #1
 800cc7a:	d10b      	bne.n	800cc94 <__gethex+0x2a8>
 800cc7c:	9a02      	ldr	r2, [sp, #8]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6013      	str	r3, [r2, #0]
 800cc82:	2301      	movs	r3, #1
 800cc84:	6123      	str	r3, [r4, #16]
 800cc86:	f8ca 3000 	str.w	r3, [sl]
 800cc8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc8c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cc90:	601c      	str	r4, [r3, #0]
 800cc92:	e735      	b.n	800cb00 <__gethex+0x114>
 800cc94:	1e69      	subs	r1, r5, #1
 800cc96:	4620      	mov	r0, r4
 800cc98:	f000 fe36 	bl	800d908 <__any_on>
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	d1ed      	bne.n	800cc7c <__gethex+0x290>
 800cca0:	4621      	mov	r1, r4
 800cca2:	4648      	mov	r0, r9
 800cca4:	f000 f9e4 	bl	800d070 <_Bfree>
 800cca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ccaa:	2300      	movs	r3, #0
 800ccac:	6013      	str	r3, [r2, #0]
 800ccae:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ccb2:	e725      	b.n	800cb00 <__gethex+0x114>
 800ccb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d1f2      	bne.n	800cca0 <__gethex+0x2b4>
 800ccba:	e7df      	b.n	800cc7c <__gethex+0x290>
 800ccbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d1dc      	bne.n	800cc7c <__gethex+0x290>
 800ccc2:	e7ed      	b.n	800cca0 <__gethex+0x2b4>
 800ccc4:	0800e508 	.word	0x0800e508
 800ccc8:	0800e719 	.word	0x0800e719
 800cccc:	0800e72a 	.word	0x0800e72a
 800ccd0:	f106 38ff 	add.w	r8, r6, #4294967295
 800ccd4:	f1bb 0f00 	cmp.w	fp, #0
 800ccd8:	d133      	bne.n	800cd42 <__gethex+0x356>
 800ccda:	f1b8 0f00 	cmp.w	r8, #0
 800ccde:	d004      	beq.n	800ccea <__gethex+0x2fe>
 800cce0:	4641      	mov	r1, r8
 800cce2:	4620      	mov	r0, r4
 800cce4:	f000 fe10 	bl	800d908 <__any_on>
 800cce8:	4683      	mov	fp, r0
 800ccea:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ccee:	2301      	movs	r3, #1
 800ccf0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ccf4:	f008 081f 	and.w	r8, r8, #31
 800ccf8:	fa03 f308 	lsl.w	r3, r3, r8
 800ccfc:	4213      	tst	r3, r2
 800ccfe:	4631      	mov	r1, r6
 800cd00:	4620      	mov	r0, r4
 800cd02:	bf18      	it	ne
 800cd04:	f04b 0b02 	orrne.w	fp, fp, #2
 800cd08:	1bad      	subs	r5, r5, r6
 800cd0a:	f7ff fe07 	bl	800c91c <rshift>
 800cd0e:	687e      	ldr	r6, [r7, #4]
 800cd10:	f04f 0802 	mov.w	r8, #2
 800cd14:	f1bb 0f00 	cmp.w	fp, #0
 800cd18:	d04a      	beq.n	800cdb0 <__gethex+0x3c4>
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	2b02      	cmp	r3, #2
 800cd1e:	d016      	beq.n	800cd4e <__gethex+0x362>
 800cd20:	2b03      	cmp	r3, #3
 800cd22:	d018      	beq.n	800cd56 <__gethex+0x36a>
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d109      	bne.n	800cd3c <__gethex+0x350>
 800cd28:	f01b 0f02 	tst.w	fp, #2
 800cd2c:	d006      	beq.n	800cd3c <__gethex+0x350>
 800cd2e:	f8da 3000 	ldr.w	r3, [sl]
 800cd32:	ea4b 0b03 	orr.w	fp, fp, r3
 800cd36:	f01b 0f01 	tst.w	fp, #1
 800cd3a:	d10f      	bne.n	800cd5c <__gethex+0x370>
 800cd3c:	f048 0810 	orr.w	r8, r8, #16
 800cd40:	e036      	b.n	800cdb0 <__gethex+0x3c4>
 800cd42:	f04f 0b01 	mov.w	fp, #1
 800cd46:	e7d0      	b.n	800ccea <__gethex+0x2fe>
 800cd48:	f04f 0801 	mov.w	r8, #1
 800cd4c:	e7e2      	b.n	800cd14 <__gethex+0x328>
 800cd4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd50:	f1c3 0301 	rsb	r3, r3, #1
 800cd54:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d0ef      	beq.n	800cd3c <__gethex+0x350>
 800cd5c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cd60:	f104 0214 	add.w	r2, r4, #20
 800cd64:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800cd68:	9301      	str	r3, [sp, #4]
 800cd6a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800cd6e:	2300      	movs	r3, #0
 800cd70:	4694      	mov	ip, r2
 800cd72:	f852 1b04 	ldr.w	r1, [r2], #4
 800cd76:	f1b1 3fff 	cmp.w	r1, #4294967295
 800cd7a:	d01e      	beq.n	800cdba <__gethex+0x3ce>
 800cd7c:	3101      	adds	r1, #1
 800cd7e:	f8cc 1000 	str.w	r1, [ip]
 800cd82:	f1b8 0f02 	cmp.w	r8, #2
 800cd86:	f104 0214 	add.w	r2, r4, #20
 800cd8a:	d13d      	bne.n	800ce08 <__gethex+0x41c>
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	3b01      	subs	r3, #1
 800cd90:	42ab      	cmp	r3, r5
 800cd92:	d10b      	bne.n	800cdac <__gethex+0x3c0>
 800cd94:	1169      	asrs	r1, r5, #5
 800cd96:	2301      	movs	r3, #1
 800cd98:	f005 051f 	and.w	r5, r5, #31
 800cd9c:	fa03 f505 	lsl.w	r5, r3, r5
 800cda0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cda4:	421d      	tst	r5, r3
 800cda6:	bf18      	it	ne
 800cda8:	f04f 0801 	movne.w	r8, #1
 800cdac:	f048 0820 	orr.w	r8, r8, #32
 800cdb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cdb2:	601c      	str	r4, [r3, #0]
 800cdb4:	9b02      	ldr	r3, [sp, #8]
 800cdb6:	601e      	str	r6, [r3, #0]
 800cdb8:	e6a2      	b.n	800cb00 <__gethex+0x114>
 800cdba:	4290      	cmp	r0, r2
 800cdbc:	f842 3c04 	str.w	r3, [r2, #-4]
 800cdc0:	d8d6      	bhi.n	800cd70 <__gethex+0x384>
 800cdc2:	68a2      	ldr	r2, [r4, #8]
 800cdc4:	4593      	cmp	fp, r2
 800cdc6:	db17      	blt.n	800cdf8 <__gethex+0x40c>
 800cdc8:	6861      	ldr	r1, [r4, #4]
 800cdca:	4648      	mov	r0, r9
 800cdcc:	3101      	adds	r1, #1
 800cdce:	f000 f90f 	bl	800cff0 <_Balloc>
 800cdd2:	4682      	mov	sl, r0
 800cdd4:	b918      	cbnz	r0, 800cdde <__gethex+0x3f2>
 800cdd6:	4b1b      	ldr	r3, [pc, #108]	; (800ce44 <__gethex+0x458>)
 800cdd8:	4602      	mov	r2, r0
 800cdda:	2184      	movs	r1, #132	; 0x84
 800cddc:	e6b3      	b.n	800cb46 <__gethex+0x15a>
 800cdde:	6922      	ldr	r2, [r4, #16]
 800cde0:	3202      	adds	r2, #2
 800cde2:	f104 010c 	add.w	r1, r4, #12
 800cde6:	0092      	lsls	r2, r2, #2
 800cde8:	300c      	adds	r0, #12
 800cdea:	f7fe febb 	bl	800bb64 <memcpy>
 800cdee:	4621      	mov	r1, r4
 800cdf0:	4648      	mov	r0, r9
 800cdf2:	f000 f93d 	bl	800d070 <_Bfree>
 800cdf6:	4654      	mov	r4, sl
 800cdf8:	6922      	ldr	r2, [r4, #16]
 800cdfa:	1c51      	adds	r1, r2, #1
 800cdfc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ce00:	6121      	str	r1, [r4, #16]
 800ce02:	2101      	movs	r1, #1
 800ce04:	6151      	str	r1, [r2, #20]
 800ce06:	e7bc      	b.n	800cd82 <__gethex+0x396>
 800ce08:	6921      	ldr	r1, [r4, #16]
 800ce0a:	4559      	cmp	r1, fp
 800ce0c:	dd0b      	ble.n	800ce26 <__gethex+0x43a>
 800ce0e:	2101      	movs	r1, #1
 800ce10:	4620      	mov	r0, r4
 800ce12:	f7ff fd83 	bl	800c91c <rshift>
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	3601      	adds	r6, #1
 800ce1a:	42b3      	cmp	r3, r6
 800ce1c:	f6ff aedb 	blt.w	800cbd6 <__gethex+0x1ea>
 800ce20:	f04f 0801 	mov.w	r8, #1
 800ce24:	e7c2      	b.n	800cdac <__gethex+0x3c0>
 800ce26:	f015 051f 	ands.w	r5, r5, #31
 800ce2a:	d0f9      	beq.n	800ce20 <__gethex+0x434>
 800ce2c:	9b01      	ldr	r3, [sp, #4]
 800ce2e:	441a      	add	r2, r3
 800ce30:	f1c5 0520 	rsb	r5, r5, #32
 800ce34:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ce38:	f000 f9cc 	bl	800d1d4 <__hi0bits>
 800ce3c:	42a8      	cmp	r0, r5
 800ce3e:	dbe6      	blt.n	800ce0e <__gethex+0x422>
 800ce40:	e7ee      	b.n	800ce20 <__gethex+0x434>
 800ce42:	bf00      	nop
 800ce44:	0800e719 	.word	0x0800e719

0800ce48 <L_shift>:
 800ce48:	f1c2 0208 	rsb	r2, r2, #8
 800ce4c:	0092      	lsls	r2, r2, #2
 800ce4e:	b570      	push	{r4, r5, r6, lr}
 800ce50:	f1c2 0620 	rsb	r6, r2, #32
 800ce54:	6843      	ldr	r3, [r0, #4]
 800ce56:	6804      	ldr	r4, [r0, #0]
 800ce58:	fa03 f506 	lsl.w	r5, r3, r6
 800ce5c:	432c      	orrs	r4, r5
 800ce5e:	40d3      	lsrs	r3, r2
 800ce60:	6004      	str	r4, [r0, #0]
 800ce62:	f840 3f04 	str.w	r3, [r0, #4]!
 800ce66:	4288      	cmp	r0, r1
 800ce68:	d3f4      	bcc.n	800ce54 <L_shift+0xc>
 800ce6a:	bd70      	pop	{r4, r5, r6, pc}

0800ce6c <__match>:
 800ce6c:	b530      	push	{r4, r5, lr}
 800ce6e:	6803      	ldr	r3, [r0, #0]
 800ce70:	3301      	adds	r3, #1
 800ce72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce76:	b914      	cbnz	r4, 800ce7e <__match+0x12>
 800ce78:	6003      	str	r3, [r0, #0]
 800ce7a:	2001      	movs	r0, #1
 800ce7c:	bd30      	pop	{r4, r5, pc}
 800ce7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ce86:	2d19      	cmp	r5, #25
 800ce88:	bf98      	it	ls
 800ce8a:	3220      	addls	r2, #32
 800ce8c:	42a2      	cmp	r2, r4
 800ce8e:	d0f0      	beq.n	800ce72 <__match+0x6>
 800ce90:	2000      	movs	r0, #0
 800ce92:	e7f3      	b.n	800ce7c <__match+0x10>

0800ce94 <__hexnan>:
 800ce94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce98:	680b      	ldr	r3, [r1, #0]
 800ce9a:	6801      	ldr	r1, [r0, #0]
 800ce9c:	115e      	asrs	r6, r3, #5
 800ce9e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cea2:	f013 031f 	ands.w	r3, r3, #31
 800cea6:	b087      	sub	sp, #28
 800cea8:	bf18      	it	ne
 800ceaa:	3604      	addne	r6, #4
 800ceac:	2500      	movs	r5, #0
 800ceae:	1f37      	subs	r7, r6, #4
 800ceb0:	4682      	mov	sl, r0
 800ceb2:	4690      	mov	r8, r2
 800ceb4:	9301      	str	r3, [sp, #4]
 800ceb6:	f846 5c04 	str.w	r5, [r6, #-4]
 800ceba:	46b9      	mov	r9, r7
 800cebc:	463c      	mov	r4, r7
 800cebe:	9502      	str	r5, [sp, #8]
 800cec0:	46ab      	mov	fp, r5
 800cec2:	784a      	ldrb	r2, [r1, #1]
 800cec4:	1c4b      	adds	r3, r1, #1
 800cec6:	9303      	str	r3, [sp, #12]
 800cec8:	b342      	cbz	r2, 800cf1c <__hexnan+0x88>
 800ceca:	4610      	mov	r0, r2
 800cecc:	9105      	str	r1, [sp, #20]
 800cece:	9204      	str	r2, [sp, #16]
 800ced0:	f7ff fd76 	bl	800c9c0 <__hexdig_fun>
 800ced4:	2800      	cmp	r0, #0
 800ced6:	d14f      	bne.n	800cf78 <__hexnan+0xe4>
 800ced8:	9a04      	ldr	r2, [sp, #16]
 800ceda:	9905      	ldr	r1, [sp, #20]
 800cedc:	2a20      	cmp	r2, #32
 800cede:	d818      	bhi.n	800cf12 <__hexnan+0x7e>
 800cee0:	9b02      	ldr	r3, [sp, #8]
 800cee2:	459b      	cmp	fp, r3
 800cee4:	dd13      	ble.n	800cf0e <__hexnan+0x7a>
 800cee6:	454c      	cmp	r4, r9
 800cee8:	d206      	bcs.n	800cef8 <__hexnan+0x64>
 800ceea:	2d07      	cmp	r5, #7
 800ceec:	dc04      	bgt.n	800cef8 <__hexnan+0x64>
 800ceee:	462a      	mov	r2, r5
 800cef0:	4649      	mov	r1, r9
 800cef2:	4620      	mov	r0, r4
 800cef4:	f7ff ffa8 	bl	800ce48 <L_shift>
 800cef8:	4544      	cmp	r4, r8
 800cefa:	d950      	bls.n	800cf9e <__hexnan+0x10a>
 800cefc:	2300      	movs	r3, #0
 800cefe:	f1a4 0904 	sub.w	r9, r4, #4
 800cf02:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf06:	f8cd b008 	str.w	fp, [sp, #8]
 800cf0a:	464c      	mov	r4, r9
 800cf0c:	461d      	mov	r5, r3
 800cf0e:	9903      	ldr	r1, [sp, #12]
 800cf10:	e7d7      	b.n	800cec2 <__hexnan+0x2e>
 800cf12:	2a29      	cmp	r2, #41	; 0x29
 800cf14:	d155      	bne.n	800cfc2 <__hexnan+0x12e>
 800cf16:	3102      	adds	r1, #2
 800cf18:	f8ca 1000 	str.w	r1, [sl]
 800cf1c:	f1bb 0f00 	cmp.w	fp, #0
 800cf20:	d04f      	beq.n	800cfc2 <__hexnan+0x12e>
 800cf22:	454c      	cmp	r4, r9
 800cf24:	d206      	bcs.n	800cf34 <__hexnan+0xa0>
 800cf26:	2d07      	cmp	r5, #7
 800cf28:	dc04      	bgt.n	800cf34 <__hexnan+0xa0>
 800cf2a:	462a      	mov	r2, r5
 800cf2c:	4649      	mov	r1, r9
 800cf2e:	4620      	mov	r0, r4
 800cf30:	f7ff ff8a 	bl	800ce48 <L_shift>
 800cf34:	4544      	cmp	r4, r8
 800cf36:	d934      	bls.n	800cfa2 <__hexnan+0x10e>
 800cf38:	f1a8 0204 	sub.w	r2, r8, #4
 800cf3c:	4623      	mov	r3, r4
 800cf3e:	f853 1b04 	ldr.w	r1, [r3], #4
 800cf42:	f842 1f04 	str.w	r1, [r2, #4]!
 800cf46:	429f      	cmp	r7, r3
 800cf48:	d2f9      	bcs.n	800cf3e <__hexnan+0xaa>
 800cf4a:	1b3b      	subs	r3, r7, r4
 800cf4c:	f023 0303 	bic.w	r3, r3, #3
 800cf50:	3304      	adds	r3, #4
 800cf52:	3e03      	subs	r6, #3
 800cf54:	3401      	adds	r4, #1
 800cf56:	42a6      	cmp	r6, r4
 800cf58:	bf38      	it	cc
 800cf5a:	2304      	movcc	r3, #4
 800cf5c:	4443      	add	r3, r8
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f843 2b04 	str.w	r2, [r3], #4
 800cf64:	429f      	cmp	r7, r3
 800cf66:	d2fb      	bcs.n	800cf60 <__hexnan+0xcc>
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	b91b      	cbnz	r3, 800cf74 <__hexnan+0xe0>
 800cf6c:	4547      	cmp	r7, r8
 800cf6e:	d126      	bne.n	800cfbe <__hexnan+0x12a>
 800cf70:	2301      	movs	r3, #1
 800cf72:	603b      	str	r3, [r7, #0]
 800cf74:	2005      	movs	r0, #5
 800cf76:	e025      	b.n	800cfc4 <__hexnan+0x130>
 800cf78:	3501      	adds	r5, #1
 800cf7a:	2d08      	cmp	r5, #8
 800cf7c:	f10b 0b01 	add.w	fp, fp, #1
 800cf80:	dd06      	ble.n	800cf90 <__hexnan+0xfc>
 800cf82:	4544      	cmp	r4, r8
 800cf84:	d9c3      	bls.n	800cf0e <__hexnan+0x7a>
 800cf86:	2300      	movs	r3, #0
 800cf88:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf8c:	2501      	movs	r5, #1
 800cf8e:	3c04      	subs	r4, #4
 800cf90:	6822      	ldr	r2, [r4, #0]
 800cf92:	f000 000f 	and.w	r0, r0, #15
 800cf96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cf9a:	6020      	str	r0, [r4, #0]
 800cf9c:	e7b7      	b.n	800cf0e <__hexnan+0x7a>
 800cf9e:	2508      	movs	r5, #8
 800cfa0:	e7b5      	b.n	800cf0e <__hexnan+0x7a>
 800cfa2:	9b01      	ldr	r3, [sp, #4]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d0df      	beq.n	800cf68 <__hexnan+0xd4>
 800cfa8:	f1c3 0320 	rsb	r3, r3, #32
 800cfac:	f04f 32ff 	mov.w	r2, #4294967295
 800cfb0:	40da      	lsrs	r2, r3
 800cfb2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cfb6:	4013      	ands	r3, r2
 800cfb8:	f846 3c04 	str.w	r3, [r6, #-4]
 800cfbc:	e7d4      	b.n	800cf68 <__hexnan+0xd4>
 800cfbe:	3f04      	subs	r7, #4
 800cfc0:	e7d2      	b.n	800cf68 <__hexnan+0xd4>
 800cfc2:	2004      	movs	r0, #4
 800cfc4:	b007      	add	sp, #28
 800cfc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cfca <__ascii_mbtowc>:
 800cfca:	b082      	sub	sp, #8
 800cfcc:	b901      	cbnz	r1, 800cfd0 <__ascii_mbtowc+0x6>
 800cfce:	a901      	add	r1, sp, #4
 800cfd0:	b142      	cbz	r2, 800cfe4 <__ascii_mbtowc+0x1a>
 800cfd2:	b14b      	cbz	r3, 800cfe8 <__ascii_mbtowc+0x1e>
 800cfd4:	7813      	ldrb	r3, [r2, #0]
 800cfd6:	600b      	str	r3, [r1, #0]
 800cfd8:	7812      	ldrb	r2, [r2, #0]
 800cfda:	1e10      	subs	r0, r2, #0
 800cfdc:	bf18      	it	ne
 800cfde:	2001      	movne	r0, #1
 800cfe0:	b002      	add	sp, #8
 800cfe2:	4770      	bx	lr
 800cfe4:	4610      	mov	r0, r2
 800cfe6:	e7fb      	b.n	800cfe0 <__ascii_mbtowc+0x16>
 800cfe8:	f06f 0001 	mvn.w	r0, #1
 800cfec:	e7f8      	b.n	800cfe0 <__ascii_mbtowc+0x16>
	...

0800cff0 <_Balloc>:
 800cff0:	b570      	push	{r4, r5, r6, lr}
 800cff2:	69c6      	ldr	r6, [r0, #28]
 800cff4:	4604      	mov	r4, r0
 800cff6:	460d      	mov	r5, r1
 800cff8:	b976      	cbnz	r6, 800d018 <_Balloc+0x28>
 800cffa:	2010      	movs	r0, #16
 800cffc:	f7fd f88a 	bl	800a114 <malloc>
 800d000:	4602      	mov	r2, r0
 800d002:	61e0      	str	r0, [r4, #28]
 800d004:	b920      	cbnz	r0, 800d010 <_Balloc+0x20>
 800d006:	4b18      	ldr	r3, [pc, #96]	; (800d068 <_Balloc+0x78>)
 800d008:	4818      	ldr	r0, [pc, #96]	; (800d06c <_Balloc+0x7c>)
 800d00a:	216b      	movs	r1, #107	; 0x6b
 800d00c:	f000 fed2 	bl	800ddb4 <__assert_func>
 800d010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d014:	6006      	str	r6, [r0, #0]
 800d016:	60c6      	str	r6, [r0, #12]
 800d018:	69e6      	ldr	r6, [r4, #28]
 800d01a:	68f3      	ldr	r3, [r6, #12]
 800d01c:	b183      	cbz	r3, 800d040 <_Balloc+0x50>
 800d01e:	69e3      	ldr	r3, [r4, #28]
 800d020:	68db      	ldr	r3, [r3, #12]
 800d022:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d026:	b9b8      	cbnz	r0, 800d058 <_Balloc+0x68>
 800d028:	2101      	movs	r1, #1
 800d02a:	fa01 f605 	lsl.w	r6, r1, r5
 800d02e:	1d72      	adds	r2, r6, #5
 800d030:	0092      	lsls	r2, r2, #2
 800d032:	4620      	mov	r0, r4
 800d034:	f000 fedc 	bl	800ddf0 <_calloc_r>
 800d038:	b160      	cbz	r0, 800d054 <_Balloc+0x64>
 800d03a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d03e:	e00e      	b.n	800d05e <_Balloc+0x6e>
 800d040:	2221      	movs	r2, #33	; 0x21
 800d042:	2104      	movs	r1, #4
 800d044:	4620      	mov	r0, r4
 800d046:	f000 fed3 	bl	800ddf0 <_calloc_r>
 800d04a:	69e3      	ldr	r3, [r4, #28]
 800d04c:	60f0      	str	r0, [r6, #12]
 800d04e:	68db      	ldr	r3, [r3, #12]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d1e4      	bne.n	800d01e <_Balloc+0x2e>
 800d054:	2000      	movs	r0, #0
 800d056:	bd70      	pop	{r4, r5, r6, pc}
 800d058:	6802      	ldr	r2, [r0, #0]
 800d05a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d05e:	2300      	movs	r3, #0
 800d060:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d064:	e7f7      	b.n	800d056 <_Balloc+0x66>
 800d066:	bf00      	nop
 800d068:	0800e6aa 	.word	0x0800e6aa
 800d06c:	0800e78a 	.word	0x0800e78a

0800d070 <_Bfree>:
 800d070:	b570      	push	{r4, r5, r6, lr}
 800d072:	69c6      	ldr	r6, [r0, #28]
 800d074:	4605      	mov	r5, r0
 800d076:	460c      	mov	r4, r1
 800d078:	b976      	cbnz	r6, 800d098 <_Bfree+0x28>
 800d07a:	2010      	movs	r0, #16
 800d07c:	f7fd f84a 	bl	800a114 <malloc>
 800d080:	4602      	mov	r2, r0
 800d082:	61e8      	str	r0, [r5, #28]
 800d084:	b920      	cbnz	r0, 800d090 <_Bfree+0x20>
 800d086:	4b09      	ldr	r3, [pc, #36]	; (800d0ac <_Bfree+0x3c>)
 800d088:	4809      	ldr	r0, [pc, #36]	; (800d0b0 <_Bfree+0x40>)
 800d08a:	218f      	movs	r1, #143	; 0x8f
 800d08c:	f000 fe92 	bl	800ddb4 <__assert_func>
 800d090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d094:	6006      	str	r6, [r0, #0]
 800d096:	60c6      	str	r6, [r0, #12]
 800d098:	b13c      	cbz	r4, 800d0aa <_Bfree+0x3a>
 800d09a:	69eb      	ldr	r3, [r5, #28]
 800d09c:	6862      	ldr	r2, [r4, #4]
 800d09e:	68db      	ldr	r3, [r3, #12]
 800d0a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d0a4:	6021      	str	r1, [r4, #0]
 800d0a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d0aa:	bd70      	pop	{r4, r5, r6, pc}
 800d0ac:	0800e6aa 	.word	0x0800e6aa
 800d0b0:	0800e78a 	.word	0x0800e78a

0800d0b4 <__multadd>:
 800d0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b8:	690d      	ldr	r5, [r1, #16]
 800d0ba:	4607      	mov	r7, r0
 800d0bc:	460c      	mov	r4, r1
 800d0be:	461e      	mov	r6, r3
 800d0c0:	f101 0c14 	add.w	ip, r1, #20
 800d0c4:	2000      	movs	r0, #0
 800d0c6:	f8dc 3000 	ldr.w	r3, [ip]
 800d0ca:	b299      	uxth	r1, r3
 800d0cc:	fb02 6101 	mla	r1, r2, r1, r6
 800d0d0:	0c1e      	lsrs	r6, r3, #16
 800d0d2:	0c0b      	lsrs	r3, r1, #16
 800d0d4:	fb02 3306 	mla	r3, r2, r6, r3
 800d0d8:	b289      	uxth	r1, r1
 800d0da:	3001      	adds	r0, #1
 800d0dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d0e0:	4285      	cmp	r5, r0
 800d0e2:	f84c 1b04 	str.w	r1, [ip], #4
 800d0e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d0ea:	dcec      	bgt.n	800d0c6 <__multadd+0x12>
 800d0ec:	b30e      	cbz	r6, 800d132 <__multadd+0x7e>
 800d0ee:	68a3      	ldr	r3, [r4, #8]
 800d0f0:	42ab      	cmp	r3, r5
 800d0f2:	dc19      	bgt.n	800d128 <__multadd+0x74>
 800d0f4:	6861      	ldr	r1, [r4, #4]
 800d0f6:	4638      	mov	r0, r7
 800d0f8:	3101      	adds	r1, #1
 800d0fa:	f7ff ff79 	bl	800cff0 <_Balloc>
 800d0fe:	4680      	mov	r8, r0
 800d100:	b928      	cbnz	r0, 800d10e <__multadd+0x5a>
 800d102:	4602      	mov	r2, r0
 800d104:	4b0c      	ldr	r3, [pc, #48]	; (800d138 <__multadd+0x84>)
 800d106:	480d      	ldr	r0, [pc, #52]	; (800d13c <__multadd+0x88>)
 800d108:	21ba      	movs	r1, #186	; 0xba
 800d10a:	f000 fe53 	bl	800ddb4 <__assert_func>
 800d10e:	6922      	ldr	r2, [r4, #16]
 800d110:	3202      	adds	r2, #2
 800d112:	f104 010c 	add.w	r1, r4, #12
 800d116:	0092      	lsls	r2, r2, #2
 800d118:	300c      	adds	r0, #12
 800d11a:	f7fe fd23 	bl	800bb64 <memcpy>
 800d11e:	4621      	mov	r1, r4
 800d120:	4638      	mov	r0, r7
 800d122:	f7ff ffa5 	bl	800d070 <_Bfree>
 800d126:	4644      	mov	r4, r8
 800d128:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d12c:	3501      	adds	r5, #1
 800d12e:	615e      	str	r6, [r3, #20]
 800d130:	6125      	str	r5, [r4, #16]
 800d132:	4620      	mov	r0, r4
 800d134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d138:	0800e719 	.word	0x0800e719
 800d13c:	0800e78a 	.word	0x0800e78a

0800d140 <__s2b>:
 800d140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d144:	460c      	mov	r4, r1
 800d146:	4615      	mov	r5, r2
 800d148:	461f      	mov	r7, r3
 800d14a:	2209      	movs	r2, #9
 800d14c:	3308      	adds	r3, #8
 800d14e:	4606      	mov	r6, r0
 800d150:	fb93 f3f2 	sdiv	r3, r3, r2
 800d154:	2100      	movs	r1, #0
 800d156:	2201      	movs	r2, #1
 800d158:	429a      	cmp	r2, r3
 800d15a:	db09      	blt.n	800d170 <__s2b+0x30>
 800d15c:	4630      	mov	r0, r6
 800d15e:	f7ff ff47 	bl	800cff0 <_Balloc>
 800d162:	b940      	cbnz	r0, 800d176 <__s2b+0x36>
 800d164:	4602      	mov	r2, r0
 800d166:	4b19      	ldr	r3, [pc, #100]	; (800d1cc <__s2b+0x8c>)
 800d168:	4819      	ldr	r0, [pc, #100]	; (800d1d0 <__s2b+0x90>)
 800d16a:	21d3      	movs	r1, #211	; 0xd3
 800d16c:	f000 fe22 	bl	800ddb4 <__assert_func>
 800d170:	0052      	lsls	r2, r2, #1
 800d172:	3101      	adds	r1, #1
 800d174:	e7f0      	b.n	800d158 <__s2b+0x18>
 800d176:	9b08      	ldr	r3, [sp, #32]
 800d178:	6143      	str	r3, [r0, #20]
 800d17a:	2d09      	cmp	r5, #9
 800d17c:	f04f 0301 	mov.w	r3, #1
 800d180:	6103      	str	r3, [r0, #16]
 800d182:	dd16      	ble.n	800d1b2 <__s2b+0x72>
 800d184:	f104 0909 	add.w	r9, r4, #9
 800d188:	46c8      	mov	r8, r9
 800d18a:	442c      	add	r4, r5
 800d18c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d190:	4601      	mov	r1, r0
 800d192:	3b30      	subs	r3, #48	; 0x30
 800d194:	220a      	movs	r2, #10
 800d196:	4630      	mov	r0, r6
 800d198:	f7ff ff8c 	bl	800d0b4 <__multadd>
 800d19c:	45a0      	cmp	r8, r4
 800d19e:	d1f5      	bne.n	800d18c <__s2b+0x4c>
 800d1a0:	f1a5 0408 	sub.w	r4, r5, #8
 800d1a4:	444c      	add	r4, r9
 800d1a6:	1b2d      	subs	r5, r5, r4
 800d1a8:	1963      	adds	r3, r4, r5
 800d1aa:	42bb      	cmp	r3, r7
 800d1ac:	db04      	blt.n	800d1b8 <__s2b+0x78>
 800d1ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1b2:	340a      	adds	r4, #10
 800d1b4:	2509      	movs	r5, #9
 800d1b6:	e7f6      	b.n	800d1a6 <__s2b+0x66>
 800d1b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d1bc:	4601      	mov	r1, r0
 800d1be:	3b30      	subs	r3, #48	; 0x30
 800d1c0:	220a      	movs	r2, #10
 800d1c2:	4630      	mov	r0, r6
 800d1c4:	f7ff ff76 	bl	800d0b4 <__multadd>
 800d1c8:	e7ee      	b.n	800d1a8 <__s2b+0x68>
 800d1ca:	bf00      	nop
 800d1cc:	0800e719 	.word	0x0800e719
 800d1d0:	0800e78a 	.word	0x0800e78a

0800d1d4 <__hi0bits>:
 800d1d4:	0c03      	lsrs	r3, r0, #16
 800d1d6:	041b      	lsls	r3, r3, #16
 800d1d8:	b9d3      	cbnz	r3, 800d210 <__hi0bits+0x3c>
 800d1da:	0400      	lsls	r0, r0, #16
 800d1dc:	2310      	movs	r3, #16
 800d1de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d1e2:	bf04      	itt	eq
 800d1e4:	0200      	lsleq	r0, r0, #8
 800d1e6:	3308      	addeq	r3, #8
 800d1e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d1ec:	bf04      	itt	eq
 800d1ee:	0100      	lsleq	r0, r0, #4
 800d1f0:	3304      	addeq	r3, #4
 800d1f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d1f6:	bf04      	itt	eq
 800d1f8:	0080      	lsleq	r0, r0, #2
 800d1fa:	3302      	addeq	r3, #2
 800d1fc:	2800      	cmp	r0, #0
 800d1fe:	db05      	blt.n	800d20c <__hi0bits+0x38>
 800d200:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d204:	f103 0301 	add.w	r3, r3, #1
 800d208:	bf08      	it	eq
 800d20a:	2320      	moveq	r3, #32
 800d20c:	4618      	mov	r0, r3
 800d20e:	4770      	bx	lr
 800d210:	2300      	movs	r3, #0
 800d212:	e7e4      	b.n	800d1de <__hi0bits+0xa>

0800d214 <__lo0bits>:
 800d214:	6803      	ldr	r3, [r0, #0]
 800d216:	f013 0207 	ands.w	r2, r3, #7
 800d21a:	d00c      	beq.n	800d236 <__lo0bits+0x22>
 800d21c:	07d9      	lsls	r1, r3, #31
 800d21e:	d422      	bmi.n	800d266 <__lo0bits+0x52>
 800d220:	079a      	lsls	r2, r3, #30
 800d222:	bf49      	itett	mi
 800d224:	085b      	lsrmi	r3, r3, #1
 800d226:	089b      	lsrpl	r3, r3, #2
 800d228:	6003      	strmi	r3, [r0, #0]
 800d22a:	2201      	movmi	r2, #1
 800d22c:	bf5c      	itt	pl
 800d22e:	6003      	strpl	r3, [r0, #0]
 800d230:	2202      	movpl	r2, #2
 800d232:	4610      	mov	r0, r2
 800d234:	4770      	bx	lr
 800d236:	b299      	uxth	r1, r3
 800d238:	b909      	cbnz	r1, 800d23e <__lo0bits+0x2a>
 800d23a:	0c1b      	lsrs	r3, r3, #16
 800d23c:	2210      	movs	r2, #16
 800d23e:	b2d9      	uxtb	r1, r3
 800d240:	b909      	cbnz	r1, 800d246 <__lo0bits+0x32>
 800d242:	3208      	adds	r2, #8
 800d244:	0a1b      	lsrs	r3, r3, #8
 800d246:	0719      	lsls	r1, r3, #28
 800d248:	bf04      	itt	eq
 800d24a:	091b      	lsreq	r3, r3, #4
 800d24c:	3204      	addeq	r2, #4
 800d24e:	0799      	lsls	r1, r3, #30
 800d250:	bf04      	itt	eq
 800d252:	089b      	lsreq	r3, r3, #2
 800d254:	3202      	addeq	r2, #2
 800d256:	07d9      	lsls	r1, r3, #31
 800d258:	d403      	bmi.n	800d262 <__lo0bits+0x4e>
 800d25a:	085b      	lsrs	r3, r3, #1
 800d25c:	f102 0201 	add.w	r2, r2, #1
 800d260:	d003      	beq.n	800d26a <__lo0bits+0x56>
 800d262:	6003      	str	r3, [r0, #0]
 800d264:	e7e5      	b.n	800d232 <__lo0bits+0x1e>
 800d266:	2200      	movs	r2, #0
 800d268:	e7e3      	b.n	800d232 <__lo0bits+0x1e>
 800d26a:	2220      	movs	r2, #32
 800d26c:	e7e1      	b.n	800d232 <__lo0bits+0x1e>
	...

0800d270 <__i2b>:
 800d270:	b510      	push	{r4, lr}
 800d272:	460c      	mov	r4, r1
 800d274:	2101      	movs	r1, #1
 800d276:	f7ff febb 	bl	800cff0 <_Balloc>
 800d27a:	4602      	mov	r2, r0
 800d27c:	b928      	cbnz	r0, 800d28a <__i2b+0x1a>
 800d27e:	4b05      	ldr	r3, [pc, #20]	; (800d294 <__i2b+0x24>)
 800d280:	4805      	ldr	r0, [pc, #20]	; (800d298 <__i2b+0x28>)
 800d282:	f240 1145 	movw	r1, #325	; 0x145
 800d286:	f000 fd95 	bl	800ddb4 <__assert_func>
 800d28a:	2301      	movs	r3, #1
 800d28c:	6144      	str	r4, [r0, #20]
 800d28e:	6103      	str	r3, [r0, #16]
 800d290:	bd10      	pop	{r4, pc}
 800d292:	bf00      	nop
 800d294:	0800e719 	.word	0x0800e719
 800d298:	0800e78a 	.word	0x0800e78a

0800d29c <__multiply>:
 800d29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a0:	4691      	mov	r9, r2
 800d2a2:	690a      	ldr	r2, [r1, #16]
 800d2a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	bfb8      	it	lt
 800d2ac:	460b      	movlt	r3, r1
 800d2ae:	460c      	mov	r4, r1
 800d2b0:	bfbc      	itt	lt
 800d2b2:	464c      	movlt	r4, r9
 800d2b4:	4699      	movlt	r9, r3
 800d2b6:	6927      	ldr	r7, [r4, #16]
 800d2b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d2bc:	68a3      	ldr	r3, [r4, #8]
 800d2be:	6861      	ldr	r1, [r4, #4]
 800d2c0:	eb07 060a 	add.w	r6, r7, sl
 800d2c4:	42b3      	cmp	r3, r6
 800d2c6:	b085      	sub	sp, #20
 800d2c8:	bfb8      	it	lt
 800d2ca:	3101      	addlt	r1, #1
 800d2cc:	f7ff fe90 	bl	800cff0 <_Balloc>
 800d2d0:	b930      	cbnz	r0, 800d2e0 <__multiply+0x44>
 800d2d2:	4602      	mov	r2, r0
 800d2d4:	4b44      	ldr	r3, [pc, #272]	; (800d3e8 <__multiply+0x14c>)
 800d2d6:	4845      	ldr	r0, [pc, #276]	; (800d3ec <__multiply+0x150>)
 800d2d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d2dc:	f000 fd6a 	bl	800ddb4 <__assert_func>
 800d2e0:	f100 0514 	add.w	r5, r0, #20
 800d2e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d2e8:	462b      	mov	r3, r5
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	4543      	cmp	r3, r8
 800d2ee:	d321      	bcc.n	800d334 <__multiply+0x98>
 800d2f0:	f104 0314 	add.w	r3, r4, #20
 800d2f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d2f8:	f109 0314 	add.w	r3, r9, #20
 800d2fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d300:	9202      	str	r2, [sp, #8]
 800d302:	1b3a      	subs	r2, r7, r4
 800d304:	3a15      	subs	r2, #21
 800d306:	f022 0203 	bic.w	r2, r2, #3
 800d30a:	3204      	adds	r2, #4
 800d30c:	f104 0115 	add.w	r1, r4, #21
 800d310:	428f      	cmp	r7, r1
 800d312:	bf38      	it	cc
 800d314:	2204      	movcc	r2, #4
 800d316:	9201      	str	r2, [sp, #4]
 800d318:	9a02      	ldr	r2, [sp, #8]
 800d31a:	9303      	str	r3, [sp, #12]
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d80c      	bhi.n	800d33a <__multiply+0x9e>
 800d320:	2e00      	cmp	r6, #0
 800d322:	dd03      	ble.n	800d32c <__multiply+0x90>
 800d324:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d05b      	beq.n	800d3e4 <__multiply+0x148>
 800d32c:	6106      	str	r6, [r0, #16]
 800d32e:	b005      	add	sp, #20
 800d330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d334:	f843 2b04 	str.w	r2, [r3], #4
 800d338:	e7d8      	b.n	800d2ec <__multiply+0x50>
 800d33a:	f8b3 a000 	ldrh.w	sl, [r3]
 800d33e:	f1ba 0f00 	cmp.w	sl, #0
 800d342:	d024      	beq.n	800d38e <__multiply+0xf2>
 800d344:	f104 0e14 	add.w	lr, r4, #20
 800d348:	46a9      	mov	r9, r5
 800d34a:	f04f 0c00 	mov.w	ip, #0
 800d34e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d352:	f8d9 1000 	ldr.w	r1, [r9]
 800d356:	fa1f fb82 	uxth.w	fp, r2
 800d35a:	b289      	uxth	r1, r1
 800d35c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d360:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d364:	f8d9 2000 	ldr.w	r2, [r9]
 800d368:	4461      	add	r1, ip
 800d36a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d36e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d372:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d376:	b289      	uxth	r1, r1
 800d378:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d37c:	4577      	cmp	r7, lr
 800d37e:	f849 1b04 	str.w	r1, [r9], #4
 800d382:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d386:	d8e2      	bhi.n	800d34e <__multiply+0xb2>
 800d388:	9a01      	ldr	r2, [sp, #4]
 800d38a:	f845 c002 	str.w	ip, [r5, r2]
 800d38e:	9a03      	ldr	r2, [sp, #12]
 800d390:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d394:	3304      	adds	r3, #4
 800d396:	f1b9 0f00 	cmp.w	r9, #0
 800d39a:	d021      	beq.n	800d3e0 <__multiply+0x144>
 800d39c:	6829      	ldr	r1, [r5, #0]
 800d39e:	f104 0c14 	add.w	ip, r4, #20
 800d3a2:	46ae      	mov	lr, r5
 800d3a4:	f04f 0a00 	mov.w	sl, #0
 800d3a8:	f8bc b000 	ldrh.w	fp, [ip]
 800d3ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d3b0:	fb09 220b 	mla	r2, r9, fp, r2
 800d3b4:	4452      	add	r2, sl
 800d3b6:	b289      	uxth	r1, r1
 800d3b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d3bc:	f84e 1b04 	str.w	r1, [lr], #4
 800d3c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d3c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d3c8:	f8be 1000 	ldrh.w	r1, [lr]
 800d3cc:	fb09 110a 	mla	r1, r9, sl, r1
 800d3d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d3d4:	4567      	cmp	r7, ip
 800d3d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d3da:	d8e5      	bhi.n	800d3a8 <__multiply+0x10c>
 800d3dc:	9a01      	ldr	r2, [sp, #4]
 800d3de:	50a9      	str	r1, [r5, r2]
 800d3e0:	3504      	adds	r5, #4
 800d3e2:	e799      	b.n	800d318 <__multiply+0x7c>
 800d3e4:	3e01      	subs	r6, #1
 800d3e6:	e79b      	b.n	800d320 <__multiply+0x84>
 800d3e8:	0800e719 	.word	0x0800e719
 800d3ec:	0800e78a 	.word	0x0800e78a

0800d3f0 <__pow5mult>:
 800d3f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3f4:	4615      	mov	r5, r2
 800d3f6:	f012 0203 	ands.w	r2, r2, #3
 800d3fa:	4606      	mov	r6, r0
 800d3fc:	460f      	mov	r7, r1
 800d3fe:	d007      	beq.n	800d410 <__pow5mult+0x20>
 800d400:	4c25      	ldr	r4, [pc, #148]	; (800d498 <__pow5mult+0xa8>)
 800d402:	3a01      	subs	r2, #1
 800d404:	2300      	movs	r3, #0
 800d406:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d40a:	f7ff fe53 	bl	800d0b4 <__multadd>
 800d40e:	4607      	mov	r7, r0
 800d410:	10ad      	asrs	r5, r5, #2
 800d412:	d03d      	beq.n	800d490 <__pow5mult+0xa0>
 800d414:	69f4      	ldr	r4, [r6, #28]
 800d416:	b97c      	cbnz	r4, 800d438 <__pow5mult+0x48>
 800d418:	2010      	movs	r0, #16
 800d41a:	f7fc fe7b 	bl	800a114 <malloc>
 800d41e:	4602      	mov	r2, r0
 800d420:	61f0      	str	r0, [r6, #28]
 800d422:	b928      	cbnz	r0, 800d430 <__pow5mult+0x40>
 800d424:	4b1d      	ldr	r3, [pc, #116]	; (800d49c <__pow5mult+0xac>)
 800d426:	481e      	ldr	r0, [pc, #120]	; (800d4a0 <__pow5mult+0xb0>)
 800d428:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d42c:	f000 fcc2 	bl	800ddb4 <__assert_func>
 800d430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d434:	6004      	str	r4, [r0, #0]
 800d436:	60c4      	str	r4, [r0, #12]
 800d438:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d43c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d440:	b94c      	cbnz	r4, 800d456 <__pow5mult+0x66>
 800d442:	f240 2171 	movw	r1, #625	; 0x271
 800d446:	4630      	mov	r0, r6
 800d448:	f7ff ff12 	bl	800d270 <__i2b>
 800d44c:	2300      	movs	r3, #0
 800d44e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d452:	4604      	mov	r4, r0
 800d454:	6003      	str	r3, [r0, #0]
 800d456:	f04f 0900 	mov.w	r9, #0
 800d45a:	07eb      	lsls	r3, r5, #31
 800d45c:	d50a      	bpl.n	800d474 <__pow5mult+0x84>
 800d45e:	4639      	mov	r1, r7
 800d460:	4622      	mov	r2, r4
 800d462:	4630      	mov	r0, r6
 800d464:	f7ff ff1a 	bl	800d29c <__multiply>
 800d468:	4639      	mov	r1, r7
 800d46a:	4680      	mov	r8, r0
 800d46c:	4630      	mov	r0, r6
 800d46e:	f7ff fdff 	bl	800d070 <_Bfree>
 800d472:	4647      	mov	r7, r8
 800d474:	106d      	asrs	r5, r5, #1
 800d476:	d00b      	beq.n	800d490 <__pow5mult+0xa0>
 800d478:	6820      	ldr	r0, [r4, #0]
 800d47a:	b938      	cbnz	r0, 800d48c <__pow5mult+0x9c>
 800d47c:	4622      	mov	r2, r4
 800d47e:	4621      	mov	r1, r4
 800d480:	4630      	mov	r0, r6
 800d482:	f7ff ff0b 	bl	800d29c <__multiply>
 800d486:	6020      	str	r0, [r4, #0]
 800d488:	f8c0 9000 	str.w	r9, [r0]
 800d48c:	4604      	mov	r4, r0
 800d48e:	e7e4      	b.n	800d45a <__pow5mult+0x6a>
 800d490:	4638      	mov	r0, r7
 800d492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d496:	bf00      	nop
 800d498:	0800e8d8 	.word	0x0800e8d8
 800d49c:	0800e6aa 	.word	0x0800e6aa
 800d4a0:	0800e78a 	.word	0x0800e78a

0800d4a4 <__lshift>:
 800d4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4a8:	460c      	mov	r4, r1
 800d4aa:	6849      	ldr	r1, [r1, #4]
 800d4ac:	6923      	ldr	r3, [r4, #16]
 800d4ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d4b2:	68a3      	ldr	r3, [r4, #8]
 800d4b4:	4607      	mov	r7, r0
 800d4b6:	4691      	mov	r9, r2
 800d4b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d4bc:	f108 0601 	add.w	r6, r8, #1
 800d4c0:	42b3      	cmp	r3, r6
 800d4c2:	db0b      	blt.n	800d4dc <__lshift+0x38>
 800d4c4:	4638      	mov	r0, r7
 800d4c6:	f7ff fd93 	bl	800cff0 <_Balloc>
 800d4ca:	4605      	mov	r5, r0
 800d4cc:	b948      	cbnz	r0, 800d4e2 <__lshift+0x3e>
 800d4ce:	4602      	mov	r2, r0
 800d4d0:	4b28      	ldr	r3, [pc, #160]	; (800d574 <__lshift+0xd0>)
 800d4d2:	4829      	ldr	r0, [pc, #164]	; (800d578 <__lshift+0xd4>)
 800d4d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d4d8:	f000 fc6c 	bl	800ddb4 <__assert_func>
 800d4dc:	3101      	adds	r1, #1
 800d4de:	005b      	lsls	r3, r3, #1
 800d4e0:	e7ee      	b.n	800d4c0 <__lshift+0x1c>
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	f100 0114 	add.w	r1, r0, #20
 800d4e8:	f100 0210 	add.w	r2, r0, #16
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	4553      	cmp	r3, sl
 800d4f0:	db33      	blt.n	800d55a <__lshift+0xb6>
 800d4f2:	6920      	ldr	r0, [r4, #16]
 800d4f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d4f8:	f104 0314 	add.w	r3, r4, #20
 800d4fc:	f019 091f 	ands.w	r9, r9, #31
 800d500:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d504:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d508:	d02b      	beq.n	800d562 <__lshift+0xbe>
 800d50a:	f1c9 0e20 	rsb	lr, r9, #32
 800d50e:	468a      	mov	sl, r1
 800d510:	2200      	movs	r2, #0
 800d512:	6818      	ldr	r0, [r3, #0]
 800d514:	fa00 f009 	lsl.w	r0, r0, r9
 800d518:	4310      	orrs	r0, r2
 800d51a:	f84a 0b04 	str.w	r0, [sl], #4
 800d51e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d522:	459c      	cmp	ip, r3
 800d524:	fa22 f20e 	lsr.w	r2, r2, lr
 800d528:	d8f3      	bhi.n	800d512 <__lshift+0x6e>
 800d52a:	ebac 0304 	sub.w	r3, ip, r4
 800d52e:	3b15      	subs	r3, #21
 800d530:	f023 0303 	bic.w	r3, r3, #3
 800d534:	3304      	adds	r3, #4
 800d536:	f104 0015 	add.w	r0, r4, #21
 800d53a:	4584      	cmp	ip, r0
 800d53c:	bf38      	it	cc
 800d53e:	2304      	movcc	r3, #4
 800d540:	50ca      	str	r2, [r1, r3]
 800d542:	b10a      	cbz	r2, 800d548 <__lshift+0xa4>
 800d544:	f108 0602 	add.w	r6, r8, #2
 800d548:	3e01      	subs	r6, #1
 800d54a:	4638      	mov	r0, r7
 800d54c:	612e      	str	r6, [r5, #16]
 800d54e:	4621      	mov	r1, r4
 800d550:	f7ff fd8e 	bl	800d070 <_Bfree>
 800d554:	4628      	mov	r0, r5
 800d556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d55a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d55e:	3301      	adds	r3, #1
 800d560:	e7c5      	b.n	800d4ee <__lshift+0x4a>
 800d562:	3904      	subs	r1, #4
 800d564:	f853 2b04 	ldr.w	r2, [r3], #4
 800d568:	f841 2f04 	str.w	r2, [r1, #4]!
 800d56c:	459c      	cmp	ip, r3
 800d56e:	d8f9      	bhi.n	800d564 <__lshift+0xc0>
 800d570:	e7ea      	b.n	800d548 <__lshift+0xa4>
 800d572:	bf00      	nop
 800d574:	0800e719 	.word	0x0800e719
 800d578:	0800e78a 	.word	0x0800e78a

0800d57c <__mcmp>:
 800d57c:	b530      	push	{r4, r5, lr}
 800d57e:	6902      	ldr	r2, [r0, #16]
 800d580:	690c      	ldr	r4, [r1, #16]
 800d582:	1b12      	subs	r2, r2, r4
 800d584:	d10e      	bne.n	800d5a4 <__mcmp+0x28>
 800d586:	f100 0314 	add.w	r3, r0, #20
 800d58a:	3114      	adds	r1, #20
 800d58c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d590:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d594:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d598:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d59c:	42a5      	cmp	r5, r4
 800d59e:	d003      	beq.n	800d5a8 <__mcmp+0x2c>
 800d5a0:	d305      	bcc.n	800d5ae <__mcmp+0x32>
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	4610      	mov	r0, r2
 800d5a6:	bd30      	pop	{r4, r5, pc}
 800d5a8:	4283      	cmp	r3, r0
 800d5aa:	d3f3      	bcc.n	800d594 <__mcmp+0x18>
 800d5ac:	e7fa      	b.n	800d5a4 <__mcmp+0x28>
 800d5ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d5b2:	e7f7      	b.n	800d5a4 <__mcmp+0x28>

0800d5b4 <__mdiff>:
 800d5b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b8:	460c      	mov	r4, r1
 800d5ba:	4606      	mov	r6, r0
 800d5bc:	4611      	mov	r1, r2
 800d5be:	4620      	mov	r0, r4
 800d5c0:	4690      	mov	r8, r2
 800d5c2:	f7ff ffdb 	bl	800d57c <__mcmp>
 800d5c6:	1e05      	subs	r5, r0, #0
 800d5c8:	d110      	bne.n	800d5ec <__mdiff+0x38>
 800d5ca:	4629      	mov	r1, r5
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	f7ff fd0f 	bl	800cff0 <_Balloc>
 800d5d2:	b930      	cbnz	r0, 800d5e2 <__mdiff+0x2e>
 800d5d4:	4b3a      	ldr	r3, [pc, #232]	; (800d6c0 <__mdiff+0x10c>)
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	f240 2137 	movw	r1, #567	; 0x237
 800d5dc:	4839      	ldr	r0, [pc, #228]	; (800d6c4 <__mdiff+0x110>)
 800d5de:	f000 fbe9 	bl	800ddb4 <__assert_func>
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d5e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ec:	bfa4      	itt	ge
 800d5ee:	4643      	movge	r3, r8
 800d5f0:	46a0      	movge	r8, r4
 800d5f2:	4630      	mov	r0, r6
 800d5f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d5f8:	bfa6      	itte	ge
 800d5fa:	461c      	movge	r4, r3
 800d5fc:	2500      	movge	r5, #0
 800d5fe:	2501      	movlt	r5, #1
 800d600:	f7ff fcf6 	bl	800cff0 <_Balloc>
 800d604:	b920      	cbnz	r0, 800d610 <__mdiff+0x5c>
 800d606:	4b2e      	ldr	r3, [pc, #184]	; (800d6c0 <__mdiff+0x10c>)
 800d608:	4602      	mov	r2, r0
 800d60a:	f240 2145 	movw	r1, #581	; 0x245
 800d60e:	e7e5      	b.n	800d5dc <__mdiff+0x28>
 800d610:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d614:	6926      	ldr	r6, [r4, #16]
 800d616:	60c5      	str	r5, [r0, #12]
 800d618:	f104 0914 	add.w	r9, r4, #20
 800d61c:	f108 0514 	add.w	r5, r8, #20
 800d620:	f100 0e14 	add.w	lr, r0, #20
 800d624:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d628:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d62c:	f108 0210 	add.w	r2, r8, #16
 800d630:	46f2      	mov	sl, lr
 800d632:	2100      	movs	r1, #0
 800d634:	f859 3b04 	ldr.w	r3, [r9], #4
 800d638:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d63c:	fa11 f88b 	uxtah	r8, r1, fp
 800d640:	b299      	uxth	r1, r3
 800d642:	0c1b      	lsrs	r3, r3, #16
 800d644:	eba8 0801 	sub.w	r8, r8, r1
 800d648:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d64c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d650:	fa1f f888 	uxth.w	r8, r8
 800d654:	1419      	asrs	r1, r3, #16
 800d656:	454e      	cmp	r6, r9
 800d658:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d65c:	f84a 3b04 	str.w	r3, [sl], #4
 800d660:	d8e8      	bhi.n	800d634 <__mdiff+0x80>
 800d662:	1b33      	subs	r3, r6, r4
 800d664:	3b15      	subs	r3, #21
 800d666:	f023 0303 	bic.w	r3, r3, #3
 800d66a:	3304      	adds	r3, #4
 800d66c:	3415      	adds	r4, #21
 800d66e:	42a6      	cmp	r6, r4
 800d670:	bf38      	it	cc
 800d672:	2304      	movcc	r3, #4
 800d674:	441d      	add	r5, r3
 800d676:	4473      	add	r3, lr
 800d678:	469e      	mov	lr, r3
 800d67a:	462e      	mov	r6, r5
 800d67c:	4566      	cmp	r6, ip
 800d67e:	d30e      	bcc.n	800d69e <__mdiff+0xea>
 800d680:	f10c 0203 	add.w	r2, ip, #3
 800d684:	1b52      	subs	r2, r2, r5
 800d686:	f022 0203 	bic.w	r2, r2, #3
 800d68a:	3d03      	subs	r5, #3
 800d68c:	45ac      	cmp	ip, r5
 800d68e:	bf38      	it	cc
 800d690:	2200      	movcc	r2, #0
 800d692:	4413      	add	r3, r2
 800d694:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d698:	b17a      	cbz	r2, 800d6ba <__mdiff+0x106>
 800d69a:	6107      	str	r7, [r0, #16]
 800d69c:	e7a4      	b.n	800d5e8 <__mdiff+0x34>
 800d69e:	f856 8b04 	ldr.w	r8, [r6], #4
 800d6a2:	fa11 f288 	uxtah	r2, r1, r8
 800d6a6:	1414      	asrs	r4, r2, #16
 800d6a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d6ac:	b292      	uxth	r2, r2
 800d6ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d6b2:	f84e 2b04 	str.w	r2, [lr], #4
 800d6b6:	1421      	asrs	r1, r4, #16
 800d6b8:	e7e0      	b.n	800d67c <__mdiff+0xc8>
 800d6ba:	3f01      	subs	r7, #1
 800d6bc:	e7ea      	b.n	800d694 <__mdiff+0xe0>
 800d6be:	bf00      	nop
 800d6c0:	0800e719 	.word	0x0800e719
 800d6c4:	0800e78a 	.word	0x0800e78a

0800d6c8 <__ulp>:
 800d6c8:	b082      	sub	sp, #8
 800d6ca:	ed8d 0b00 	vstr	d0, [sp]
 800d6ce:	9a01      	ldr	r2, [sp, #4]
 800d6d0:	4b0f      	ldr	r3, [pc, #60]	; (800d710 <__ulp+0x48>)
 800d6d2:	4013      	ands	r3, r2
 800d6d4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	dc08      	bgt.n	800d6ee <__ulp+0x26>
 800d6dc:	425b      	negs	r3, r3
 800d6de:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d6e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d6e6:	da04      	bge.n	800d6f2 <__ulp+0x2a>
 800d6e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d6ec:	4113      	asrs	r3, r2
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	e008      	b.n	800d704 <__ulp+0x3c>
 800d6f2:	f1a2 0314 	sub.w	r3, r2, #20
 800d6f6:	2b1e      	cmp	r3, #30
 800d6f8:	bfda      	itte	le
 800d6fa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d6fe:	40da      	lsrle	r2, r3
 800d700:	2201      	movgt	r2, #1
 800d702:	2300      	movs	r3, #0
 800d704:	4619      	mov	r1, r3
 800d706:	4610      	mov	r0, r2
 800d708:	ec41 0b10 	vmov	d0, r0, r1
 800d70c:	b002      	add	sp, #8
 800d70e:	4770      	bx	lr
 800d710:	7ff00000 	.word	0x7ff00000

0800d714 <__b2d>:
 800d714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d718:	6906      	ldr	r6, [r0, #16]
 800d71a:	f100 0814 	add.w	r8, r0, #20
 800d71e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d722:	1f37      	subs	r7, r6, #4
 800d724:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d728:	4610      	mov	r0, r2
 800d72a:	f7ff fd53 	bl	800d1d4 <__hi0bits>
 800d72e:	f1c0 0320 	rsb	r3, r0, #32
 800d732:	280a      	cmp	r0, #10
 800d734:	600b      	str	r3, [r1, #0]
 800d736:	491b      	ldr	r1, [pc, #108]	; (800d7a4 <__b2d+0x90>)
 800d738:	dc15      	bgt.n	800d766 <__b2d+0x52>
 800d73a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d73e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d742:	45b8      	cmp	r8, r7
 800d744:	ea43 0501 	orr.w	r5, r3, r1
 800d748:	bf34      	ite	cc
 800d74a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d74e:	2300      	movcs	r3, #0
 800d750:	3015      	adds	r0, #21
 800d752:	fa02 f000 	lsl.w	r0, r2, r0
 800d756:	fa23 f30c 	lsr.w	r3, r3, ip
 800d75a:	4303      	orrs	r3, r0
 800d75c:	461c      	mov	r4, r3
 800d75e:	ec45 4b10 	vmov	d0, r4, r5
 800d762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d766:	45b8      	cmp	r8, r7
 800d768:	bf3a      	itte	cc
 800d76a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d76e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d772:	2300      	movcs	r3, #0
 800d774:	380b      	subs	r0, #11
 800d776:	d012      	beq.n	800d79e <__b2d+0x8a>
 800d778:	f1c0 0120 	rsb	r1, r0, #32
 800d77c:	fa23 f401 	lsr.w	r4, r3, r1
 800d780:	4082      	lsls	r2, r0
 800d782:	4322      	orrs	r2, r4
 800d784:	4547      	cmp	r7, r8
 800d786:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800d78a:	bf8c      	ite	hi
 800d78c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d790:	2200      	movls	r2, #0
 800d792:	4083      	lsls	r3, r0
 800d794:	40ca      	lsrs	r2, r1
 800d796:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d79a:	4313      	orrs	r3, r2
 800d79c:	e7de      	b.n	800d75c <__b2d+0x48>
 800d79e:	ea42 0501 	orr.w	r5, r2, r1
 800d7a2:	e7db      	b.n	800d75c <__b2d+0x48>
 800d7a4:	3ff00000 	.word	0x3ff00000

0800d7a8 <__d2b>:
 800d7a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d7ac:	460f      	mov	r7, r1
 800d7ae:	2101      	movs	r1, #1
 800d7b0:	ec59 8b10 	vmov	r8, r9, d0
 800d7b4:	4616      	mov	r6, r2
 800d7b6:	f7ff fc1b 	bl	800cff0 <_Balloc>
 800d7ba:	4604      	mov	r4, r0
 800d7bc:	b930      	cbnz	r0, 800d7cc <__d2b+0x24>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	4b24      	ldr	r3, [pc, #144]	; (800d854 <__d2b+0xac>)
 800d7c2:	4825      	ldr	r0, [pc, #148]	; (800d858 <__d2b+0xb0>)
 800d7c4:	f240 310f 	movw	r1, #783	; 0x30f
 800d7c8:	f000 faf4 	bl	800ddb4 <__assert_func>
 800d7cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d7d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d7d4:	bb2d      	cbnz	r5, 800d822 <__d2b+0x7a>
 800d7d6:	9301      	str	r3, [sp, #4]
 800d7d8:	f1b8 0300 	subs.w	r3, r8, #0
 800d7dc:	d026      	beq.n	800d82c <__d2b+0x84>
 800d7de:	4668      	mov	r0, sp
 800d7e0:	9300      	str	r3, [sp, #0]
 800d7e2:	f7ff fd17 	bl	800d214 <__lo0bits>
 800d7e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d7ea:	b1e8      	cbz	r0, 800d828 <__d2b+0x80>
 800d7ec:	f1c0 0320 	rsb	r3, r0, #32
 800d7f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d7f4:	430b      	orrs	r3, r1
 800d7f6:	40c2      	lsrs	r2, r0
 800d7f8:	6163      	str	r3, [r4, #20]
 800d7fa:	9201      	str	r2, [sp, #4]
 800d7fc:	9b01      	ldr	r3, [sp, #4]
 800d7fe:	61a3      	str	r3, [r4, #24]
 800d800:	2b00      	cmp	r3, #0
 800d802:	bf14      	ite	ne
 800d804:	2202      	movne	r2, #2
 800d806:	2201      	moveq	r2, #1
 800d808:	6122      	str	r2, [r4, #16]
 800d80a:	b1bd      	cbz	r5, 800d83c <__d2b+0x94>
 800d80c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d810:	4405      	add	r5, r0
 800d812:	603d      	str	r5, [r7, #0]
 800d814:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d818:	6030      	str	r0, [r6, #0]
 800d81a:	4620      	mov	r0, r4
 800d81c:	b003      	add	sp, #12
 800d81e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d826:	e7d6      	b.n	800d7d6 <__d2b+0x2e>
 800d828:	6161      	str	r1, [r4, #20]
 800d82a:	e7e7      	b.n	800d7fc <__d2b+0x54>
 800d82c:	a801      	add	r0, sp, #4
 800d82e:	f7ff fcf1 	bl	800d214 <__lo0bits>
 800d832:	9b01      	ldr	r3, [sp, #4]
 800d834:	6163      	str	r3, [r4, #20]
 800d836:	3020      	adds	r0, #32
 800d838:	2201      	movs	r2, #1
 800d83a:	e7e5      	b.n	800d808 <__d2b+0x60>
 800d83c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d840:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d844:	6038      	str	r0, [r7, #0]
 800d846:	6918      	ldr	r0, [r3, #16]
 800d848:	f7ff fcc4 	bl	800d1d4 <__hi0bits>
 800d84c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d850:	e7e2      	b.n	800d818 <__d2b+0x70>
 800d852:	bf00      	nop
 800d854:	0800e719 	.word	0x0800e719
 800d858:	0800e78a 	.word	0x0800e78a

0800d85c <__ratio>:
 800d85c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d860:	4688      	mov	r8, r1
 800d862:	4669      	mov	r1, sp
 800d864:	4681      	mov	r9, r0
 800d866:	f7ff ff55 	bl	800d714 <__b2d>
 800d86a:	a901      	add	r1, sp, #4
 800d86c:	4640      	mov	r0, r8
 800d86e:	ec55 4b10 	vmov	r4, r5, d0
 800d872:	f7ff ff4f 	bl	800d714 <__b2d>
 800d876:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d87a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d87e:	eba3 0c02 	sub.w	ip, r3, r2
 800d882:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d886:	1a9b      	subs	r3, r3, r2
 800d888:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d88c:	ec51 0b10 	vmov	r0, r1, d0
 800d890:	2b00      	cmp	r3, #0
 800d892:	bfd6      	itet	le
 800d894:	460a      	movle	r2, r1
 800d896:	462a      	movgt	r2, r5
 800d898:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d89c:	468b      	mov	fp, r1
 800d89e:	462f      	mov	r7, r5
 800d8a0:	bfd4      	ite	le
 800d8a2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d8a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d8aa:	4620      	mov	r0, r4
 800d8ac:	ee10 2a10 	vmov	r2, s0
 800d8b0:	465b      	mov	r3, fp
 800d8b2:	4639      	mov	r1, r7
 800d8b4:	f7f2 ffda 	bl	800086c <__aeabi_ddiv>
 800d8b8:	ec41 0b10 	vmov	d0, r0, r1
 800d8bc:	b003      	add	sp, #12
 800d8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d8c2 <__copybits>:
 800d8c2:	3901      	subs	r1, #1
 800d8c4:	b570      	push	{r4, r5, r6, lr}
 800d8c6:	1149      	asrs	r1, r1, #5
 800d8c8:	6914      	ldr	r4, [r2, #16]
 800d8ca:	3101      	adds	r1, #1
 800d8cc:	f102 0314 	add.w	r3, r2, #20
 800d8d0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d8d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d8d8:	1f05      	subs	r5, r0, #4
 800d8da:	42a3      	cmp	r3, r4
 800d8dc:	d30c      	bcc.n	800d8f8 <__copybits+0x36>
 800d8de:	1aa3      	subs	r3, r4, r2
 800d8e0:	3b11      	subs	r3, #17
 800d8e2:	f023 0303 	bic.w	r3, r3, #3
 800d8e6:	3211      	adds	r2, #17
 800d8e8:	42a2      	cmp	r2, r4
 800d8ea:	bf88      	it	hi
 800d8ec:	2300      	movhi	r3, #0
 800d8ee:	4418      	add	r0, r3
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	4288      	cmp	r0, r1
 800d8f4:	d305      	bcc.n	800d902 <__copybits+0x40>
 800d8f6:	bd70      	pop	{r4, r5, r6, pc}
 800d8f8:	f853 6b04 	ldr.w	r6, [r3], #4
 800d8fc:	f845 6f04 	str.w	r6, [r5, #4]!
 800d900:	e7eb      	b.n	800d8da <__copybits+0x18>
 800d902:	f840 3b04 	str.w	r3, [r0], #4
 800d906:	e7f4      	b.n	800d8f2 <__copybits+0x30>

0800d908 <__any_on>:
 800d908:	f100 0214 	add.w	r2, r0, #20
 800d90c:	6900      	ldr	r0, [r0, #16]
 800d90e:	114b      	asrs	r3, r1, #5
 800d910:	4298      	cmp	r0, r3
 800d912:	b510      	push	{r4, lr}
 800d914:	db11      	blt.n	800d93a <__any_on+0x32>
 800d916:	dd0a      	ble.n	800d92e <__any_on+0x26>
 800d918:	f011 011f 	ands.w	r1, r1, #31
 800d91c:	d007      	beq.n	800d92e <__any_on+0x26>
 800d91e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d922:	fa24 f001 	lsr.w	r0, r4, r1
 800d926:	fa00 f101 	lsl.w	r1, r0, r1
 800d92a:	428c      	cmp	r4, r1
 800d92c:	d10b      	bne.n	800d946 <__any_on+0x3e>
 800d92e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d932:	4293      	cmp	r3, r2
 800d934:	d803      	bhi.n	800d93e <__any_on+0x36>
 800d936:	2000      	movs	r0, #0
 800d938:	bd10      	pop	{r4, pc}
 800d93a:	4603      	mov	r3, r0
 800d93c:	e7f7      	b.n	800d92e <__any_on+0x26>
 800d93e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d942:	2900      	cmp	r1, #0
 800d944:	d0f5      	beq.n	800d932 <__any_on+0x2a>
 800d946:	2001      	movs	r0, #1
 800d948:	e7f6      	b.n	800d938 <__any_on+0x30>

0800d94a <_malloc_usable_size_r>:
 800d94a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d94e:	1f18      	subs	r0, r3, #4
 800d950:	2b00      	cmp	r3, #0
 800d952:	bfbc      	itt	lt
 800d954:	580b      	ldrlt	r3, [r1, r0]
 800d956:	18c0      	addlt	r0, r0, r3
 800d958:	4770      	bx	lr

0800d95a <__ascii_wctomb>:
 800d95a:	b149      	cbz	r1, 800d970 <__ascii_wctomb+0x16>
 800d95c:	2aff      	cmp	r2, #255	; 0xff
 800d95e:	bf85      	ittet	hi
 800d960:	238a      	movhi	r3, #138	; 0x8a
 800d962:	6003      	strhi	r3, [r0, #0]
 800d964:	700a      	strbls	r2, [r1, #0]
 800d966:	f04f 30ff 	movhi.w	r0, #4294967295
 800d96a:	bf98      	it	ls
 800d96c:	2001      	movls	r0, #1
 800d96e:	4770      	bx	lr
 800d970:	4608      	mov	r0, r1
 800d972:	4770      	bx	lr

0800d974 <__ssputs_r>:
 800d974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d978:	688e      	ldr	r6, [r1, #8]
 800d97a:	461f      	mov	r7, r3
 800d97c:	42be      	cmp	r6, r7
 800d97e:	680b      	ldr	r3, [r1, #0]
 800d980:	4682      	mov	sl, r0
 800d982:	460c      	mov	r4, r1
 800d984:	4690      	mov	r8, r2
 800d986:	d82c      	bhi.n	800d9e2 <__ssputs_r+0x6e>
 800d988:	898a      	ldrh	r2, [r1, #12]
 800d98a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d98e:	d026      	beq.n	800d9de <__ssputs_r+0x6a>
 800d990:	6965      	ldr	r5, [r4, #20]
 800d992:	6909      	ldr	r1, [r1, #16]
 800d994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d998:	eba3 0901 	sub.w	r9, r3, r1
 800d99c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9a0:	1c7b      	adds	r3, r7, #1
 800d9a2:	444b      	add	r3, r9
 800d9a4:	106d      	asrs	r5, r5, #1
 800d9a6:	429d      	cmp	r5, r3
 800d9a8:	bf38      	it	cc
 800d9aa:	461d      	movcc	r5, r3
 800d9ac:	0553      	lsls	r3, r2, #21
 800d9ae:	d527      	bpl.n	800da00 <__ssputs_r+0x8c>
 800d9b0:	4629      	mov	r1, r5
 800d9b2:	f7fc fbdf 	bl	800a174 <_malloc_r>
 800d9b6:	4606      	mov	r6, r0
 800d9b8:	b360      	cbz	r0, 800da14 <__ssputs_r+0xa0>
 800d9ba:	6921      	ldr	r1, [r4, #16]
 800d9bc:	464a      	mov	r2, r9
 800d9be:	f7fe f8d1 	bl	800bb64 <memcpy>
 800d9c2:	89a3      	ldrh	r3, [r4, #12]
 800d9c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d9c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9cc:	81a3      	strh	r3, [r4, #12]
 800d9ce:	6126      	str	r6, [r4, #16]
 800d9d0:	6165      	str	r5, [r4, #20]
 800d9d2:	444e      	add	r6, r9
 800d9d4:	eba5 0509 	sub.w	r5, r5, r9
 800d9d8:	6026      	str	r6, [r4, #0]
 800d9da:	60a5      	str	r5, [r4, #8]
 800d9dc:	463e      	mov	r6, r7
 800d9de:	42be      	cmp	r6, r7
 800d9e0:	d900      	bls.n	800d9e4 <__ssputs_r+0x70>
 800d9e2:	463e      	mov	r6, r7
 800d9e4:	6820      	ldr	r0, [r4, #0]
 800d9e6:	4632      	mov	r2, r6
 800d9e8:	4641      	mov	r1, r8
 800d9ea:	f000 f9c9 	bl	800dd80 <memmove>
 800d9ee:	68a3      	ldr	r3, [r4, #8]
 800d9f0:	1b9b      	subs	r3, r3, r6
 800d9f2:	60a3      	str	r3, [r4, #8]
 800d9f4:	6823      	ldr	r3, [r4, #0]
 800d9f6:	4433      	add	r3, r6
 800d9f8:	6023      	str	r3, [r4, #0]
 800d9fa:	2000      	movs	r0, #0
 800d9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da00:	462a      	mov	r2, r5
 800da02:	f7fc fc4b 	bl	800a29c <_realloc_r>
 800da06:	4606      	mov	r6, r0
 800da08:	2800      	cmp	r0, #0
 800da0a:	d1e0      	bne.n	800d9ce <__ssputs_r+0x5a>
 800da0c:	6921      	ldr	r1, [r4, #16]
 800da0e:	4650      	mov	r0, sl
 800da10:	f7fe ff38 	bl	800c884 <_free_r>
 800da14:	230c      	movs	r3, #12
 800da16:	f8ca 3000 	str.w	r3, [sl]
 800da1a:	89a3      	ldrh	r3, [r4, #12]
 800da1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da20:	81a3      	strh	r3, [r4, #12]
 800da22:	f04f 30ff 	mov.w	r0, #4294967295
 800da26:	e7e9      	b.n	800d9fc <__ssputs_r+0x88>

0800da28 <_svfiprintf_r>:
 800da28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da2c:	4698      	mov	r8, r3
 800da2e:	898b      	ldrh	r3, [r1, #12]
 800da30:	061b      	lsls	r3, r3, #24
 800da32:	b09d      	sub	sp, #116	; 0x74
 800da34:	4607      	mov	r7, r0
 800da36:	460d      	mov	r5, r1
 800da38:	4614      	mov	r4, r2
 800da3a:	d50e      	bpl.n	800da5a <_svfiprintf_r+0x32>
 800da3c:	690b      	ldr	r3, [r1, #16]
 800da3e:	b963      	cbnz	r3, 800da5a <_svfiprintf_r+0x32>
 800da40:	2140      	movs	r1, #64	; 0x40
 800da42:	f7fc fb97 	bl	800a174 <_malloc_r>
 800da46:	6028      	str	r0, [r5, #0]
 800da48:	6128      	str	r0, [r5, #16]
 800da4a:	b920      	cbnz	r0, 800da56 <_svfiprintf_r+0x2e>
 800da4c:	230c      	movs	r3, #12
 800da4e:	603b      	str	r3, [r7, #0]
 800da50:	f04f 30ff 	mov.w	r0, #4294967295
 800da54:	e0d0      	b.n	800dbf8 <_svfiprintf_r+0x1d0>
 800da56:	2340      	movs	r3, #64	; 0x40
 800da58:	616b      	str	r3, [r5, #20]
 800da5a:	2300      	movs	r3, #0
 800da5c:	9309      	str	r3, [sp, #36]	; 0x24
 800da5e:	2320      	movs	r3, #32
 800da60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da64:	f8cd 800c 	str.w	r8, [sp, #12]
 800da68:	2330      	movs	r3, #48	; 0x30
 800da6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dc10 <_svfiprintf_r+0x1e8>
 800da6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da72:	f04f 0901 	mov.w	r9, #1
 800da76:	4623      	mov	r3, r4
 800da78:	469a      	mov	sl, r3
 800da7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da7e:	b10a      	cbz	r2, 800da84 <_svfiprintf_r+0x5c>
 800da80:	2a25      	cmp	r2, #37	; 0x25
 800da82:	d1f9      	bne.n	800da78 <_svfiprintf_r+0x50>
 800da84:	ebba 0b04 	subs.w	fp, sl, r4
 800da88:	d00b      	beq.n	800daa2 <_svfiprintf_r+0x7a>
 800da8a:	465b      	mov	r3, fp
 800da8c:	4622      	mov	r2, r4
 800da8e:	4629      	mov	r1, r5
 800da90:	4638      	mov	r0, r7
 800da92:	f7ff ff6f 	bl	800d974 <__ssputs_r>
 800da96:	3001      	adds	r0, #1
 800da98:	f000 80a9 	beq.w	800dbee <_svfiprintf_r+0x1c6>
 800da9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da9e:	445a      	add	r2, fp
 800daa0:	9209      	str	r2, [sp, #36]	; 0x24
 800daa2:	f89a 3000 	ldrb.w	r3, [sl]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	f000 80a1 	beq.w	800dbee <_svfiprintf_r+0x1c6>
 800daac:	2300      	movs	r3, #0
 800daae:	f04f 32ff 	mov.w	r2, #4294967295
 800dab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dab6:	f10a 0a01 	add.w	sl, sl, #1
 800daba:	9304      	str	r3, [sp, #16]
 800dabc:	9307      	str	r3, [sp, #28]
 800dabe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dac2:	931a      	str	r3, [sp, #104]	; 0x68
 800dac4:	4654      	mov	r4, sl
 800dac6:	2205      	movs	r2, #5
 800dac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dacc:	4850      	ldr	r0, [pc, #320]	; (800dc10 <_svfiprintf_r+0x1e8>)
 800dace:	f7f2 fb8f 	bl	80001f0 <memchr>
 800dad2:	9a04      	ldr	r2, [sp, #16]
 800dad4:	b9d8      	cbnz	r0, 800db0e <_svfiprintf_r+0xe6>
 800dad6:	06d0      	lsls	r0, r2, #27
 800dad8:	bf44      	itt	mi
 800dada:	2320      	movmi	r3, #32
 800dadc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dae0:	0711      	lsls	r1, r2, #28
 800dae2:	bf44      	itt	mi
 800dae4:	232b      	movmi	r3, #43	; 0x2b
 800dae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800daea:	f89a 3000 	ldrb.w	r3, [sl]
 800daee:	2b2a      	cmp	r3, #42	; 0x2a
 800daf0:	d015      	beq.n	800db1e <_svfiprintf_r+0xf6>
 800daf2:	9a07      	ldr	r2, [sp, #28]
 800daf4:	4654      	mov	r4, sl
 800daf6:	2000      	movs	r0, #0
 800daf8:	f04f 0c0a 	mov.w	ip, #10
 800dafc:	4621      	mov	r1, r4
 800dafe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db02:	3b30      	subs	r3, #48	; 0x30
 800db04:	2b09      	cmp	r3, #9
 800db06:	d94d      	bls.n	800dba4 <_svfiprintf_r+0x17c>
 800db08:	b1b0      	cbz	r0, 800db38 <_svfiprintf_r+0x110>
 800db0a:	9207      	str	r2, [sp, #28]
 800db0c:	e014      	b.n	800db38 <_svfiprintf_r+0x110>
 800db0e:	eba0 0308 	sub.w	r3, r0, r8
 800db12:	fa09 f303 	lsl.w	r3, r9, r3
 800db16:	4313      	orrs	r3, r2
 800db18:	9304      	str	r3, [sp, #16]
 800db1a:	46a2      	mov	sl, r4
 800db1c:	e7d2      	b.n	800dac4 <_svfiprintf_r+0x9c>
 800db1e:	9b03      	ldr	r3, [sp, #12]
 800db20:	1d19      	adds	r1, r3, #4
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	9103      	str	r1, [sp, #12]
 800db26:	2b00      	cmp	r3, #0
 800db28:	bfbb      	ittet	lt
 800db2a:	425b      	neglt	r3, r3
 800db2c:	f042 0202 	orrlt.w	r2, r2, #2
 800db30:	9307      	strge	r3, [sp, #28]
 800db32:	9307      	strlt	r3, [sp, #28]
 800db34:	bfb8      	it	lt
 800db36:	9204      	strlt	r2, [sp, #16]
 800db38:	7823      	ldrb	r3, [r4, #0]
 800db3a:	2b2e      	cmp	r3, #46	; 0x2e
 800db3c:	d10c      	bne.n	800db58 <_svfiprintf_r+0x130>
 800db3e:	7863      	ldrb	r3, [r4, #1]
 800db40:	2b2a      	cmp	r3, #42	; 0x2a
 800db42:	d134      	bne.n	800dbae <_svfiprintf_r+0x186>
 800db44:	9b03      	ldr	r3, [sp, #12]
 800db46:	1d1a      	adds	r2, r3, #4
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	9203      	str	r2, [sp, #12]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	bfb8      	it	lt
 800db50:	f04f 33ff 	movlt.w	r3, #4294967295
 800db54:	3402      	adds	r4, #2
 800db56:	9305      	str	r3, [sp, #20]
 800db58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dc20 <_svfiprintf_r+0x1f8>
 800db5c:	7821      	ldrb	r1, [r4, #0]
 800db5e:	2203      	movs	r2, #3
 800db60:	4650      	mov	r0, sl
 800db62:	f7f2 fb45 	bl	80001f0 <memchr>
 800db66:	b138      	cbz	r0, 800db78 <_svfiprintf_r+0x150>
 800db68:	9b04      	ldr	r3, [sp, #16]
 800db6a:	eba0 000a 	sub.w	r0, r0, sl
 800db6e:	2240      	movs	r2, #64	; 0x40
 800db70:	4082      	lsls	r2, r0
 800db72:	4313      	orrs	r3, r2
 800db74:	3401      	adds	r4, #1
 800db76:	9304      	str	r3, [sp, #16]
 800db78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db7c:	4825      	ldr	r0, [pc, #148]	; (800dc14 <_svfiprintf_r+0x1ec>)
 800db7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db82:	2206      	movs	r2, #6
 800db84:	f7f2 fb34 	bl	80001f0 <memchr>
 800db88:	2800      	cmp	r0, #0
 800db8a:	d038      	beq.n	800dbfe <_svfiprintf_r+0x1d6>
 800db8c:	4b22      	ldr	r3, [pc, #136]	; (800dc18 <_svfiprintf_r+0x1f0>)
 800db8e:	bb1b      	cbnz	r3, 800dbd8 <_svfiprintf_r+0x1b0>
 800db90:	9b03      	ldr	r3, [sp, #12]
 800db92:	3307      	adds	r3, #7
 800db94:	f023 0307 	bic.w	r3, r3, #7
 800db98:	3308      	adds	r3, #8
 800db9a:	9303      	str	r3, [sp, #12]
 800db9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db9e:	4433      	add	r3, r6
 800dba0:	9309      	str	r3, [sp, #36]	; 0x24
 800dba2:	e768      	b.n	800da76 <_svfiprintf_r+0x4e>
 800dba4:	fb0c 3202 	mla	r2, ip, r2, r3
 800dba8:	460c      	mov	r4, r1
 800dbaa:	2001      	movs	r0, #1
 800dbac:	e7a6      	b.n	800dafc <_svfiprintf_r+0xd4>
 800dbae:	2300      	movs	r3, #0
 800dbb0:	3401      	adds	r4, #1
 800dbb2:	9305      	str	r3, [sp, #20]
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	f04f 0c0a 	mov.w	ip, #10
 800dbba:	4620      	mov	r0, r4
 800dbbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbc0:	3a30      	subs	r2, #48	; 0x30
 800dbc2:	2a09      	cmp	r2, #9
 800dbc4:	d903      	bls.n	800dbce <_svfiprintf_r+0x1a6>
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d0c6      	beq.n	800db58 <_svfiprintf_r+0x130>
 800dbca:	9105      	str	r1, [sp, #20]
 800dbcc:	e7c4      	b.n	800db58 <_svfiprintf_r+0x130>
 800dbce:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbd2:	4604      	mov	r4, r0
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	e7f0      	b.n	800dbba <_svfiprintf_r+0x192>
 800dbd8:	ab03      	add	r3, sp, #12
 800dbda:	9300      	str	r3, [sp, #0]
 800dbdc:	462a      	mov	r2, r5
 800dbde:	4b0f      	ldr	r3, [pc, #60]	; (800dc1c <_svfiprintf_r+0x1f4>)
 800dbe0:	a904      	add	r1, sp, #16
 800dbe2:	4638      	mov	r0, r7
 800dbe4:	f7fd fa44 	bl	800b070 <_printf_float>
 800dbe8:	1c42      	adds	r2, r0, #1
 800dbea:	4606      	mov	r6, r0
 800dbec:	d1d6      	bne.n	800db9c <_svfiprintf_r+0x174>
 800dbee:	89ab      	ldrh	r3, [r5, #12]
 800dbf0:	065b      	lsls	r3, r3, #25
 800dbf2:	f53f af2d 	bmi.w	800da50 <_svfiprintf_r+0x28>
 800dbf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbf8:	b01d      	add	sp, #116	; 0x74
 800dbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbfe:	ab03      	add	r3, sp, #12
 800dc00:	9300      	str	r3, [sp, #0]
 800dc02:	462a      	mov	r2, r5
 800dc04:	4b05      	ldr	r3, [pc, #20]	; (800dc1c <_svfiprintf_r+0x1f4>)
 800dc06:	a904      	add	r1, sp, #16
 800dc08:	4638      	mov	r0, r7
 800dc0a:	f7fd fcd5 	bl	800b5b8 <_printf_i>
 800dc0e:	e7eb      	b.n	800dbe8 <_svfiprintf_r+0x1c0>
 800dc10:	0800e8e4 	.word	0x0800e8e4
 800dc14:	0800e8ee 	.word	0x0800e8ee
 800dc18:	0800b071 	.word	0x0800b071
 800dc1c:	0800d975 	.word	0x0800d975
 800dc20:	0800e8ea 	.word	0x0800e8ea

0800dc24 <__sflush_r>:
 800dc24:	898a      	ldrh	r2, [r1, #12]
 800dc26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc2a:	4605      	mov	r5, r0
 800dc2c:	0710      	lsls	r0, r2, #28
 800dc2e:	460c      	mov	r4, r1
 800dc30:	d458      	bmi.n	800dce4 <__sflush_r+0xc0>
 800dc32:	684b      	ldr	r3, [r1, #4]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	dc05      	bgt.n	800dc44 <__sflush_r+0x20>
 800dc38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	dc02      	bgt.n	800dc44 <__sflush_r+0x20>
 800dc3e:	2000      	movs	r0, #0
 800dc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc46:	2e00      	cmp	r6, #0
 800dc48:	d0f9      	beq.n	800dc3e <__sflush_r+0x1a>
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc50:	682f      	ldr	r7, [r5, #0]
 800dc52:	6a21      	ldr	r1, [r4, #32]
 800dc54:	602b      	str	r3, [r5, #0]
 800dc56:	d032      	beq.n	800dcbe <__sflush_r+0x9a>
 800dc58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc5a:	89a3      	ldrh	r3, [r4, #12]
 800dc5c:	075a      	lsls	r2, r3, #29
 800dc5e:	d505      	bpl.n	800dc6c <__sflush_r+0x48>
 800dc60:	6863      	ldr	r3, [r4, #4]
 800dc62:	1ac0      	subs	r0, r0, r3
 800dc64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc66:	b10b      	cbz	r3, 800dc6c <__sflush_r+0x48>
 800dc68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc6a:	1ac0      	subs	r0, r0, r3
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	4602      	mov	r2, r0
 800dc70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc72:	6a21      	ldr	r1, [r4, #32]
 800dc74:	4628      	mov	r0, r5
 800dc76:	47b0      	blx	r6
 800dc78:	1c43      	adds	r3, r0, #1
 800dc7a:	89a3      	ldrh	r3, [r4, #12]
 800dc7c:	d106      	bne.n	800dc8c <__sflush_r+0x68>
 800dc7e:	6829      	ldr	r1, [r5, #0]
 800dc80:	291d      	cmp	r1, #29
 800dc82:	d82b      	bhi.n	800dcdc <__sflush_r+0xb8>
 800dc84:	4a29      	ldr	r2, [pc, #164]	; (800dd2c <__sflush_r+0x108>)
 800dc86:	410a      	asrs	r2, r1
 800dc88:	07d6      	lsls	r6, r2, #31
 800dc8a:	d427      	bmi.n	800dcdc <__sflush_r+0xb8>
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	6062      	str	r2, [r4, #4]
 800dc90:	04d9      	lsls	r1, r3, #19
 800dc92:	6922      	ldr	r2, [r4, #16]
 800dc94:	6022      	str	r2, [r4, #0]
 800dc96:	d504      	bpl.n	800dca2 <__sflush_r+0x7e>
 800dc98:	1c42      	adds	r2, r0, #1
 800dc9a:	d101      	bne.n	800dca0 <__sflush_r+0x7c>
 800dc9c:	682b      	ldr	r3, [r5, #0]
 800dc9e:	b903      	cbnz	r3, 800dca2 <__sflush_r+0x7e>
 800dca0:	6560      	str	r0, [r4, #84]	; 0x54
 800dca2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dca4:	602f      	str	r7, [r5, #0]
 800dca6:	2900      	cmp	r1, #0
 800dca8:	d0c9      	beq.n	800dc3e <__sflush_r+0x1a>
 800dcaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcae:	4299      	cmp	r1, r3
 800dcb0:	d002      	beq.n	800dcb8 <__sflush_r+0x94>
 800dcb2:	4628      	mov	r0, r5
 800dcb4:	f7fe fde6 	bl	800c884 <_free_r>
 800dcb8:	2000      	movs	r0, #0
 800dcba:	6360      	str	r0, [r4, #52]	; 0x34
 800dcbc:	e7c0      	b.n	800dc40 <__sflush_r+0x1c>
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	4628      	mov	r0, r5
 800dcc2:	47b0      	blx	r6
 800dcc4:	1c41      	adds	r1, r0, #1
 800dcc6:	d1c8      	bne.n	800dc5a <__sflush_r+0x36>
 800dcc8:	682b      	ldr	r3, [r5, #0]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d0c5      	beq.n	800dc5a <__sflush_r+0x36>
 800dcce:	2b1d      	cmp	r3, #29
 800dcd0:	d001      	beq.n	800dcd6 <__sflush_r+0xb2>
 800dcd2:	2b16      	cmp	r3, #22
 800dcd4:	d101      	bne.n	800dcda <__sflush_r+0xb6>
 800dcd6:	602f      	str	r7, [r5, #0]
 800dcd8:	e7b1      	b.n	800dc3e <__sflush_r+0x1a>
 800dcda:	89a3      	ldrh	r3, [r4, #12]
 800dcdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dce0:	81a3      	strh	r3, [r4, #12]
 800dce2:	e7ad      	b.n	800dc40 <__sflush_r+0x1c>
 800dce4:	690f      	ldr	r7, [r1, #16]
 800dce6:	2f00      	cmp	r7, #0
 800dce8:	d0a9      	beq.n	800dc3e <__sflush_r+0x1a>
 800dcea:	0793      	lsls	r3, r2, #30
 800dcec:	680e      	ldr	r6, [r1, #0]
 800dcee:	bf08      	it	eq
 800dcf0:	694b      	ldreq	r3, [r1, #20]
 800dcf2:	600f      	str	r7, [r1, #0]
 800dcf4:	bf18      	it	ne
 800dcf6:	2300      	movne	r3, #0
 800dcf8:	eba6 0807 	sub.w	r8, r6, r7
 800dcfc:	608b      	str	r3, [r1, #8]
 800dcfe:	f1b8 0f00 	cmp.w	r8, #0
 800dd02:	dd9c      	ble.n	800dc3e <__sflush_r+0x1a>
 800dd04:	6a21      	ldr	r1, [r4, #32]
 800dd06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd08:	4643      	mov	r3, r8
 800dd0a:	463a      	mov	r2, r7
 800dd0c:	4628      	mov	r0, r5
 800dd0e:	47b0      	blx	r6
 800dd10:	2800      	cmp	r0, #0
 800dd12:	dc06      	bgt.n	800dd22 <__sflush_r+0xfe>
 800dd14:	89a3      	ldrh	r3, [r4, #12]
 800dd16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd1a:	81a3      	strh	r3, [r4, #12]
 800dd1c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd20:	e78e      	b.n	800dc40 <__sflush_r+0x1c>
 800dd22:	4407      	add	r7, r0
 800dd24:	eba8 0800 	sub.w	r8, r8, r0
 800dd28:	e7e9      	b.n	800dcfe <__sflush_r+0xda>
 800dd2a:	bf00      	nop
 800dd2c:	dfbffffe 	.word	0xdfbffffe

0800dd30 <_fflush_r>:
 800dd30:	b538      	push	{r3, r4, r5, lr}
 800dd32:	690b      	ldr	r3, [r1, #16]
 800dd34:	4605      	mov	r5, r0
 800dd36:	460c      	mov	r4, r1
 800dd38:	b913      	cbnz	r3, 800dd40 <_fflush_r+0x10>
 800dd3a:	2500      	movs	r5, #0
 800dd3c:	4628      	mov	r0, r5
 800dd3e:	bd38      	pop	{r3, r4, r5, pc}
 800dd40:	b118      	cbz	r0, 800dd4a <_fflush_r+0x1a>
 800dd42:	6a03      	ldr	r3, [r0, #32]
 800dd44:	b90b      	cbnz	r3, 800dd4a <_fflush_r+0x1a>
 800dd46:	f7fd fdd3 	bl	800b8f0 <__sinit>
 800dd4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d0f3      	beq.n	800dd3a <_fflush_r+0xa>
 800dd52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd54:	07d0      	lsls	r0, r2, #31
 800dd56:	d404      	bmi.n	800dd62 <_fflush_r+0x32>
 800dd58:	0599      	lsls	r1, r3, #22
 800dd5a:	d402      	bmi.n	800dd62 <_fflush_r+0x32>
 800dd5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd5e:	f7fd feff 	bl	800bb60 <__retarget_lock_acquire_recursive>
 800dd62:	4628      	mov	r0, r5
 800dd64:	4621      	mov	r1, r4
 800dd66:	f7ff ff5d 	bl	800dc24 <__sflush_r>
 800dd6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd6c:	07da      	lsls	r2, r3, #31
 800dd6e:	4605      	mov	r5, r0
 800dd70:	d4e4      	bmi.n	800dd3c <_fflush_r+0xc>
 800dd72:	89a3      	ldrh	r3, [r4, #12]
 800dd74:	059b      	lsls	r3, r3, #22
 800dd76:	d4e1      	bmi.n	800dd3c <_fflush_r+0xc>
 800dd78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd7a:	f7fd fef2 	bl	800bb62 <__retarget_lock_release_recursive>
 800dd7e:	e7dd      	b.n	800dd3c <_fflush_r+0xc>

0800dd80 <memmove>:
 800dd80:	4288      	cmp	r0, r1
 800dd82:	b510      	push	{r4, lr}
 800dd84:	eb01 0402 	add.w	r4, r1, r2
 800dd88:	d902      	bls.n	800dd90 <memmove+0x10>
 800dd8a:	4284      	cmp	r4, r0
 800dd8c:	4623      	mov	r3, r4
 800dd8e:	d807      	bhi.n	800dda0 <memmove+0x20>
 800dd90:	1e43      	subs	r3, r0, #1
 800dd92:	42a1      	cmp	r1, r4
 800dd94:	d008      	beq.n	800dda8 <memmove+0x28>
 800dd96:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd9e:	e7f8      	b.n	800dd92 <memmove+0x12>
 800dda0:	4402      	add	r2, r0
 800dda2:	4601      	mov	r1, r0
 800dda4:	428a      	cmp	r2, r1
 800dda6:	d100      	bne.n	800ddaa <memmove+0x2a>
 800dda8:	bd10      	pop	{r4, pc}
 800ddaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ddae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ddb2:	e7f7      	b.n	800dda4 <memmove+0x24>

0800ddb4 <__assert_func>:
 800ddb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddb6:	4614      	mov	r4, r2
 800ddb8:	461a      	mov	r2, r3
 800ddba:	4b09      	ldr	r3, [pc, #36]	; (800dde0 <__assert_func+0x2c>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	4605      	mov	r5, r0
 800ddc0:	68d8      	ldr	r0, [r3, #12]
 800ddc2:	b14c      	cbz	r4, 800ddd8 <__assert_func+0x24>
 800ddc4:	4b07      	ldr	r3, [pc, #28]	; (800dde4 <__assert_func+0x30>)
 800ddc6:	9100      	str	r1, [sp, #0]
 800ddc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ddcc:	4906      	ldr	r1, [pc, #24]	; (800dde8 <__assert_func+0x34>)
 800ddce:	462b      	mov	r3, r5
 800ddd0:	f000 f824 	bl	800de1c <fiprintf>
 800ddd4:	f000 f834 	bl	800de40 <abort>
 800ddd8:	4b04      	ldr	r3, [pc, #16]	; (800ddec <__assert_func+0x38>)
 800ddda:	461c      	mov	r4, r3
 800dddc:	e7f3      	b.n	800ddc6 <__assert_func+0x12>
 800ddde:	bf00      	nop
 800dde0:	20000258 	.word	0x20000258
 800dde4:	0800e8f5 	.word	0x0800e8f5
 800dde8:	0800e902 	.word	0x0800e902
 800ddec:	0800e930 	.word	0x0800e930

0800ddf0 <_calloc_r>:
 800ddf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddf2:	fba1 2402 	umull	r2, r4, r1, r2
 800ddf6:	b94c      	cbnz	r4, 800de0c <_calloc_r+0x1c>
 800ddf8:	4611      	mov	r1, r2
 800ddfa:	9201      	str	r2, [sp, #4]
 800ddfc:	f7fc f9ba 	bl	800a174 <_malloc_r>
 800de00:	9a01      	ldr	r2, [sp, #4]
 800de02:	4605      	mov	r5, r0
 800de04:	b930      	cbnz	r0, 800de14 <_calloc_r+0x24>
 800de06:	4628      	mov	r0, r5
 800de08:	b003      	add	sp, #12
 800de0a:	bd30      	pop	{r4, r5, pc}
 800de0c:	220c      	movs	r2, #12
 800de0e:	6002      	str	r2, [r0, #0]
 800de10:	2500      	movs	r5, #0
 800de12:	e7f8      	b.n	800de06 <_calloc_r+0x16>
 800de14:	4621      	mov	r1, r4
 800de16:	f7fd fe04 	bl	800ba22 <memset>
 800de1a:	e7f4      	b.n	800de06 <_calloc_r+0x16>

0800de1c <fiprintf>:
 800de1c:	b40e      	push	{r1, r2, r3}
 800de1e:	b503      	push	{r0, r1, lr}
 800de20:	4601      	mov	r1, r0
 800de22:	ab03      	add	r3, sp, #12
 800de24:	4805      	ldr	r0, [pc, #20]	; (800de3c <fiprintf+0x20>)
 800de26:	f853 2b04 	ldr.w	r2, [r3], #4
 800de2a:	6800      	ldr	r0, [r0, #0]
 800de2c:	9301      	str	r3, [sp, #4]
 800de2e:	f000 f837 	bl	800dea0 <_vfiprintf_r>
 800de32:	b002      	add	sp, #8
 800de34:	f85d eb04 	ldr.w	lr, [sp], #4
 800de38:	b003      	add	sp, #12
 800de3a:	4770      	bx	lr
 800de3c:	20000258 	.word	0x20000258

0800de40 <abort>:
 800de40:	b508      	push	{r3, lr}
 800de42:	2006      	movs	r0, #6
 800de44:	f000 fa04 	bl	800e250 <raise>
 800de48:	2001      	movs	r0, #1
 800de4a:	f7f5 fb95 	bl	8003578 <_exit>

0800de4e <__sfputc_r>:
 800de4e:	6893      	ldr	r3, [r2, #8]
 800de50:	3b01      	subs	r3, #1
 800de52:	2b00      	cmp	r3, #0
 800de54:	b410      	push	{r4}
 800de56:	6093      	str	r3, [r2, #8]
 800de58:	da08      	bge.n	800de6c <__sfputc_r+0x1e>
 800de5a:	6994      	ldr	r4, [r2, #24]
 800de5c:	42a3      	cmp	r3, r4
 800de5e:	db01      	blt.n	800de64 <__sfputc_r+0x16>
 800de60:	290a      	cmp	r1, #10
 800de62:	d103      	bne.n	800de6c <__sfputc_r+0x1e>
 800de64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de68:	f000 b934 	b.w	800e0d4 <__swbuf_r>
 800de6c:	6813      	ldr	r3, [r2, #0]
 800de6e:	1c58      	adds	r0, r3, #1
 800de70:	6010      	str	r0, [r2, #0]
 800de72:	7019      	strb	r1, [r3, #0]
 800de74:	4608      	mov	r0, r1
 800de76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de7a:	4770      	bx	lr

0800de7c <__sfputs_r>:
 800de7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de7e:	4606      	mov	r6, r0
 800de80:	460f      	mov	r7, r1
 800de82:	4614      	mov	r4, r2
 800de84:	18d5      	adds	r5, r2, r3
 800de86:	42ac      	cmp	r4, r5
 800de88:	d101      	bne.n	800de8e <__sfputs_r+0x12>
 800de8a:	2000      	movs	r0, #0
 800de8c:	e007      	b.n	800de9e <__sfputs_r+0x22>
 800de8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de92:	463a      	mov	r2, r7
 800de94:	4630      	mov	r0, r6
 800de96:	f7ff ffda 	bl	800de4e <__sfputc_r>
 800de9a:	1c43      	adds	r3, r0, #1
 800de9c:	d1f3      	bne.n	800de86 <__sfputs_r+0xa>
 800de9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dea0 <_vfiprintf_r>:
 800dea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dea4:	460d      	mov	r5, r1
 800dea6:	b09d      	sub	sp, #116	; 0x74
 800dea8:	4614      	mov	r4, r2
 800deaa:	4698      	mov	r8, r3
 800deac:	4606      	mov	r6, r0
 800deae:	b118      	cbz	r0, 800deb8 <_vfiprintf_r+0x18>
 800deb0:	6a03      	ldr	r3, [r0, #32]
 800deb2:	b90b      	cbnz	r3, 800deb8 <_vfiprintf_r+0x18>
 800deb4:	f7fd fd1c 	bl	800b8f0 <__sinit>
 800deb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800deba:	07d9      	lsls	r1, r3, #31
 800debc:	d405      	bmi.n	800deca <_vfiprintf_r+0x2a>
 800debe:	89ab      	ldrh	r3, [r5, #12]
 800dec0:	059a      	lsls	r2, r3, #22
 800dec2:	d402      	bmi.n	800deca <_vfiprintf_r+0x2a>
 800dec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dec6:	f7fd fe4b 	bl	800bb60 <__retarget_lock_acquire_recursive>
 800deca:	89ab      	ldrh	r3, [r5, #12]
 800decc:	071b      	lsls	r3, r3, #28
 800dece:	d501      	bpl.n	800ded4 <_vfiprintf_r+0x34>
 800ded0:	692b      	ldr	r3, [r5, #16]
 800ded2:	b99b      	cbnz	r3, 800defc <_vfiprintf_r+0x5c>
 800ded4:	4629      	mov	r1, r5
 800ded6:	4630      	mov	r0, r6
 800ded8:	f000 f93a 	bl	800e150 <__swsetup_r>
 800dedc:	b170      	cbz	r0, 800defc <_vfiprintf_r+0x5c>
 800dede:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dee0:	07dc      	lsls	r4, r3, #31
 800dee2:	d504      	bpl.n	800deee <_vfiprintf_r+0x4e>
 800dee4:	f04f 30ff 	mov.w	r0, #4294967295
 800dee8:	b01d      	add	sp, #116	; 0x74
 800deea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deee:	89ab      	ldrh	r3, [r5, #12]
 800def0:	0598      	lsls	r0, r3, #22
 800def2:	d4f7      	bmi.n	800dee4 <_vfiprintf_r+0x44>
 800def4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800def6:	f7fd fe34 	bl	800bb62 <__retarget_lock_release_recursive>
 800defa:	e7f3      	b.n	800dee4 <_vfiprintf_r+0x44>
 800defc:	2300      	movs	r3, #0
 800defe:	9309      	str	r3, [sp, #36]	; 0x24
 800df00:	2320      	movs	r3, #32
 800df02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df06:	f8cd 800c 	str.w	r8, [sp, #12]
 800df0a:	2330      	movs	r3, #48	; 0x30
 800df0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e0c0 <_vfiprintf_r+0x220>
 800df10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df14:	f04f 0901 	mov.w	r9, #1
 800df18:	4623      	mov	r3, r4
 800df1a:	469a      	mov	sl, r3
 800df1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df20:	b10a      	cbz	r2, 800df26 <_vfiprintf_r+0x86>
 800df22:	2a25      	cmp	r2, #37	; 0x25
 800df24:	d1f9      	bne.n	800df1a <_vfiprintf_r+0x7a>
 800df26:	ebba 0b04 	subs.w	fp, sl, r4
 800df2a:	d00b      	beq.n	800df44 <_vfiprintf_r+0xa4>
 800df2c:	465b      	mov	r3, fp
 800df2e:	4622      	mov	r2, r4
 800df30:	4629      	mov	r1, r5
 800df32:	4630      	mov	r0, r6
 800df34:	f7ff ffa2 	bl	800de7c <__sfputs_r>
 800df38:	3001      	adds	r0, #1
 800df3a:	f000 80a9 	beq.w	800e090 <_vfiprintf_r+0x1f0>
 800df3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df40:	445a      	add	r2, fp
 800df42:	9209      	str	r2, [sp, #36]	; 0x24
 800df44:	f89a 3000 	ldrb.w	r3, [sl]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	f000 80a1 	beq.w	800e090 <_vfiprintf_r+0x1f0>
 800df4e:	2300      	movs	r3, #0
 800df50:	f04f 32ff 	mov.w	r2, #4294967295
 800df54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df58:	f10a 0a01 	add.w	sl, sl, #1
 800df5c:	9304      	str	r3, [sp, #16]
 800df5e:	9307      	str	r3, [sp, #28]
 800df60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df64:	931a      	str	r3, [sp, #104]	; 0x68
 800df66:	4654      	mov	r4, sl
 800df68:	2205      	movs	r2, #5
 800df6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df6e:	4854      	ldr	r0, [pc, #336]	; (800e0c0 <_vfiprintf_r+0x220>)
 800df70:	f7f2 f93e 	bl	80001f0 <memchr>
 800df74:	9a04      	ldr	r2, [sp, #16]
 800df76:	b9d8      	cbnz	r0, 800dfb0 <_vfiprintf_r+0x110>
 800df78:	06d1      	lsls	r1, r2, #27
 800df7a:	bf44      	itt	mi
 800df7c:	2320      	movmi	r3, #32
 800df7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df82:	0713      	lsls	r3, r2, #28
 800df84:	bf44      	itt	mi
 800df86:	232b      	movmi	r3, #43	; 0x2b
 800df88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df8c:	f89a 3000 	ldrb.w	r3, [sl]
 800df90:	2b2a      	cmp	r3, #42	; 0x2a
 800df92:	d015      	beq.n	800dfc0 <_vfiprintf_r+0x120>
 800df94:	9a07      	ldr	r2, [sp, #28]
 800df96:	4654      	mov	r4, sl
 800df98:	2000      	movs	r0, #0
 800df9a:	f04f 0c0a 	mov.w	ip, #10
 800df9e:	4621      	mov	r1, r4
 800dfa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfa4:	3b30      	subs	r3, #48	; 0x30
 800dfa6:	2b09      	cmp	r3, #9
 800dfa8:	d94d      	bls.n	800e046 <_vfiprintf_r+0x1a6>
 800dfaa:	b1b0      	cbz	r0, 800dfda <_vfiprintf_r+0x13a>
 800dfac:	9207      	str	r2, [sp, #28]
 800dfae:	e014      	b.n	800dfda <_vfiprintf_r+0x13a>
 800dfb0:	eba0 0308 	sub.w	r3, r0, r8
 800dfb4:	fa09 f303 	lsl.w	r3, r9, r3
 800dfb8:	4313      	orrs	r3, r2
 800dfba:	9304      	str	r3, [sp, #16]
 800dfbc:	46a2      	mov	sl, r4
 800dfbe:	e7d2      	b.n	800df66 <_vfiprintf_r+0xc6>
 800dfc0:	9b03      	ldr	r3, [sp, #12]
 800dfc2:	1d19      	adds	r1, r3, #4
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	9103      	str	r1, [sp, #12]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	bfbb      	ittet	lt
 800dfcc:	425b      	neglt	r3, r3
 800dfce:	f042 0202 	orrlt.w	r2, r2, #2
 800dfd2:	9307      	strge	r3, [sp, #28]
 800dfd4:	9307      	strlt	r3, [sp, #28]
 800dfd6:	bfb8      	it	lt
 800dfd8:	9204      	strlt	r2, [sp, #16]
 800dfda:	7823      	ldrb	r3, [r4, #0]
 800dfdc:	2b2e      	cmp	r3, #46	; 0x2e
 800dfde:	d10c      	bne.n	800dffa <_vfiprintf_r+0x15a>
 800dfe0:	7863      	ldrb	r3, [r4, #1]
 800dfe2:	2b2a      	cmp	r3, #42	; 0x2a
 800dfe4:	d134      	bne.n	800e050 <_vfiprintf_r+0x1b0>
 800dfe6:	9b03      	ldr	r3, [sp, #12]
 800dfe8:	1d1a      	adds	r2, r3, #4
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	9203      	str	r2, [sp, #12]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	bfb8      	it	lt
 800dff2:	f04f 33ff 	movlt.w	r3, #4294967295
 800dff6:	3402      	adds	r4, #2
 800dff8:	9305      	str	r3, [sp, #20]
 800dffa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e0d0 <_vfiprintf_r+0x230>
 800dffe:	7821      	ldrb	r1, [r4, #0]
 800e000:	2203      	movs	r2, #3
 800e002:	4650      	mov	r0, sl
 800e004:	f7f2 f8f4 	bl	80001f0 <memchr>
 800e008:	b138      	cbz	r0, 800e01a <_vfiprintf_r+0x17a>
 800e00a:	9b04      	ldr	r3, [sp, #16]
 800e00c:	eba0 000a 	sub.w	r0, r0, sl
 800e010:	2240      	movs	r2, #64	; 0x40
 800e012:	4082      	lsls	r2, r0
 800e014:	4313      	orrs	r3, r2
 800e016:	3401      	adds	r4, #1
 800e018:	9304      	str	r3, [sp, #16]
 800e01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e01e:	4829      	ldr	r0, [pc, #164]	; (800e0c4 <_vfiprintf_r+0x224>)
 800e020:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e024:	2206      	movs	r2, #6
 800e026:	f7f2 f8e3 	bl	80001f0 <memchr>
 800e02a:	2800      	cmp	r0, #0
 800e02c:	d03f      	beq.n	800e0ae <_vfiprintf_r+0x20e>
 800e02e:	4b26      	ldr	r3, [pc, #152]	; (800e0c8 <_vfiprintf_r+0x228>)
 800e030:	bb1b      	cbnz	r3, 800e07a <_vfiprintf_r+0x1da>
 800e032:	9b03      	ldr	r3, [sp, #12]
 800e034:	3307      	adds	r3, #7
 800e036:	f023 0307 	bic.w	r3, r3, #7
 800e03a:	3308      	adds	r3, #8
 800e03c:	9303      	str	r3, [sp, #12]
 800e03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e040:	443b      	add	r3, r7
 800e042:	9309      	str	r3, [sp, #36]	; 0x24
 800e044:	e768      	b.n	800df18 <_vfiprintf_r+0x78>
 800e046:	fb0c 3202 	mla	r2, ip, r2, r3
 800e04a:	460c      	mov	r4, r1
 800e04c:	2001      	movs	r0, #1
 800e04e:	e7a6      	b.n	800df9e <_vfiprintf_r+0xfe>
 800e050:	2300      	movs	r3, #0
 800e052:	3401      	adds	r4, #1
 800e054:	9305      	str	r3, [sp, #20]
 800e056:	4619      	mov	r1, r3
 800e058:	f04f 0c0a 	mov.w	ip, #10
 800e05c:	4620      	mov	r0, r4
 800e05e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e062:	3a30      	subs	r2, #48	; 0x30
 800e064:	2a09      	cmp	r2, #9
 800e066:	d903      	bls.n	800e070 <_vfiprintf_r+0x1d0>
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d0c6      	beq.n	800dffa <_vfiprintf_r+0x15a>
 800e06c:	9105      	str	r1, [sp, #20]
 800e06e:	e7c4      	b.n	800dffa <_vfiprintf_r+0x15a>
 800e070:	fb0c 2101 	mla	r1, ip, r1, r2
 800e074:	4604      	mov	r4, r0
 800e076:	2301      	movs	r3, #1
 800e078:	e7f0      	b.n	800e05c <_vfiprintf_r+0x1bc>
 800e07a:	ab03      	add	r3, sp, #12
 800e07c:	9300      	str	r3, [sp, #0]
 800e07e:	462a      	mov	r2, r5
 800e080:	4b12      	ldr	r3, [pc, #72]	; (800e0cc <_vfiprintf_r+0x22c>)
 800e082:	a904      	add	r1, sp, #16
 800e084:	4630      	mov	r0, r6
 800e086:	f7fc fff3 	bl	800b070 <_printf_float>
 800e08a:	4607      	mov	r7, r0
 800e08c:	1c78      	adds	r0, r7, #1
 800e08e:	d1d6      	bne.n	800e03e <_vfiprintf_r+0x19e>
 800e090:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e092:	07d9      	lsls	r1, r3, #31
 800e094:	d405      	bmi.n	800e0a2 <_vfiprintf_r+0x202>
 800e096:	89ab      	ldrh	r3, [r5, #12]
 800e098:	059a      	lsls	r2, r3, #22
 800e09a:	d402      	bmi.n	800e0a2 <_vfiprintf_r+0x202>
 800e09c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e09e:	f7fd fd60 	bl	800bb62 <__retarget_lock_release_recursive>
 800e0a2:	89ab      	ldrh	r3, [r5, #12]
 800e0a4:	065b      	lsls	r3, r3, #25
 800e0a6:	f53f af1d 	bmi.w	800dee4 <_vfiprintf_r+0x44>
 800e0aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0ac:	e71c      	b.n	800dee8 <_vfiprintf_r+0x48>
 800e0ae:	ab03      	add	r3, sp, #12
 800e0b0:	9300      	str	r3, [sp, #0]
 800e0b2:	462a      	mov	r2, r5
 800e0b4:	4b05      	ldr	r3, [pc, #20]	; (800e0cc <_vfiprintf_r+0x22c>)
 800e0b6:	a904      	add	r1, sp, #16
 800e0b8:	4630      	mov	r0, r6
 800e0ba:	f7fd fa7d 	bl	800b5b8 <_printf_i>
 800e0be:	e7e4      	b.n	800e08a <_vfiprintf_r+0x1ea>
 800e0c0:	0800e8e4 	.word	0x0800e8e4
 800e0c4:	0800e8ee 	.word	0x0800e8ee
 800e0c8:	0800b071 	.word	0x0800b071
 800e0cc:	0800de7d 	.word	0x0800de7d
 800e0d0:	0800e8ea 	.word	0x0800e8ea

0800e0d4 <__swbuf_r>:
 800e0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0d6:	460e      	mov	r6, r1
 800e0d8:	4614      	mov	r4, r2
 800e0da:	4605      	mov	r5, r0
 800e0dc:	b118      	cbz	r0, 800e0e6 <__swbuf_r+0x12>
 800e0de:	6a03      	ldr	r3, [r0, #32]
 800e0e0:	b90b      	cbnz	r3, 800e0e6 <__swbuf_r+0x12>
 800e0e2:	f7fd fc05 	bl	800b8f0 <__sinit>
 800e0e6:	69a3      	ldr	r3, [r4, #24]
 800e0e8:	60a3      	str	r3, [r4, #8]
 800e0ea:	89a3      	ldrh	r3, [r4, #12]
 800e0ec:	071a      	lsls	r2, r3, #28
 800e0ee:	d525      	bpl.n	800e13c <__swbuf_r+0x68>
 800e0f0:	6923      	ldr	r3, [r4, #16]
 800e0f2:	b31b      	cbz	r3, 800e13c <__swbuf_r+0x68>
 800e0f4:	6823      	ldr	r3, [r4, #0]
 800e0f6:	6922      	ldr	r2, [r4, #16]
 800e0f8:	1a98      	subs	r0, r3, r2
 800e0fa:	6963      	ldr	r3, [r4, #20]
 800e0fc:	b2f6      	uxtb	r6, r6
 800e0fe:	4283      	cmp	r3, r0
 800e100:	4637      	mov	r7, r6
 800e102:	dc04      	bgt.n	800e10e <__swbuf_r+0x3a>
 800e104:	4621      	mov	r1, r4
 800e106:	4628      	mov	r0, r5
 800e108:	f7ff fe12 	bl	800dd30 <_fflush_r>
 800e10c:	b9e0      	cbnz	r0, 800e148 <__swbuf_r+0x74>
 800e10e:	68a3      	ldr	r3, [r4, #8]
 800e110:	3b01      	subs	r3, #1
 800e112:	60a3      	str	r3, [r4, #8]
 800e114:	6823      	ldr	r3, [r4, #0]
 800e116:	1c5a      	adds	r2, r3, #1
 800e118:	6022      	str	r2, [r4, #0]
 800e11a:	701e      	strb	r6, [r3, #0]
 800e11c:	6962      	ldr	r2, [r4, #20]
 800e11e:	1c43      	adds	r3, r0, #1
 800e120:	429a      	cmp	r2, r3
 800e122:	d004      	beq.n	800e12e <__swbuf_r+0x5a>
 800e124:	89a3      	ldrh	r3, [r4, #12]
 800e126:	07db      	lsls	r3, r3, #31
 800e128:	d506      	bpl.n	800e138 <__swbuf_r+0x64>
 800e12a:	2e0a      	cmp	r6, #10
 800e12c:	d104      	bne.n	800e138 <__swbuf_r+0x64>
 800e12e:	4621      	mov	r1, r4
 800e130:	4628      	mov	r0, r5
 800e132:	f7ff fdfd 	bl	800dd30 <_fflush_r>
 800e136:	b938      	cbnz	r0, 800e148 <__swbuf_r+0x74>
 800e138:	4638      	mov	r0, r7
 800e13a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e13c:	4621      	mov	r1, r4
 800e13e:	4628      	mov	r0, r5
 800e140:	f000 f806 	bl	800e150 <__swsetup_r>
 800e144:	2800      	cmp	r0, #0
 800e146:	d0d5      	beq.n	800e0f4 <__swbuf_r+0x20>
 800e148:	f04f 37ff 	mov.w	r7, #4294967295
 800e14c:	e7f4      	b.n	800e138 <__swbuf_r+0x64>
	...

0800e150 <__swsetup_r>:
 800e150:	b538      	push	{r3, r4, r5, lr}
 800e152:	4b2a      	ldr	r3, [pc, #168]	; (800e1fc <__swsetup_r+0xac>)
 800e154:	4605      	mov	r5, r0
 800e156:	6818      	ldr	r0, [r3, #0]
 800e158:	460c      	mov	r4, r1
 800e15a:	b118      	cbz	r0, 800e164 <__swsetup_r+0x14>
 800e15c:	6a03      	ldr	r3, [r0, #32]
 800e15e:	b90b      	cbnz	r3, 800e164 <__swsetup_r+0x14>
 800e160:	f7fd fbc6 	bl	800b8f0 <__sinit>
 800e164:	89a3      	ldrh	r3, [r4, #12]
 800e166:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e16a:	0718      	lsls	r0, r3, #28
 800e16c:	d422      	bmi.n	800e1b4 <__swsetup_r+0x64>
 800e16e:	06d9      	lsls	r1, r3, #27
 800e170:	d407      	bmi.n	800e182 <__swsetup_r+0x32>
 800e172:	2309      	movs	r3, #9
 800e174:	602b      	str	r3, [r5, #0]
 800e176:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e17a:	81a3      	strh	r3, [r4, #12]
 800e17c:	f04f 30ff 	mov.w	r0, #4294967295
 800e180:	e034      	b.n	800e1ec <__swsetup_r+0x9c>
 800e182:	0758      	lsls	r0, r3, #29
 800e184:	d512      	bpl.n	800e1ac <__swsetup_r+0x5c>
 800e186:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e188:	b141      	cbz	r1, 800e19c <__swsetup_r+0x4c>
 800e18a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e18e:	4299      	cmp	r1, r3
 800e190:	d002      	beq.n	800e198 <__swsetup_r+0x48>
 800e192:	4628      	mov	r0, r5
 800e194:	f7fe fb76 	bl	800c884 <_free_r>
 800e198:	2300      	movs	r3, #0
 800e19a:	6363      	str	r3, [r4, #52]	; 0x34
 800e19c:	89a3      	ldrh	r3, [r4, #12]
 800e19e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e1a2:	81a3      	strh	r3, [r4, #12]
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	6063      	str	r3, [r4, #4]
 800e1a8:	6923      	ldr	r3, [r4, #16]
 800e1aa:	6023      	str	r3, [r4, #0]
 800e1ac:	89a3      	ldrh	r3, [r4, #12]
 800e1ae:	f043 0308 	orr.w	r3, r3, #8
 800e1b2:	81a3      	strh	r3, [r4, #12]
 800e1b4:	6923      	ldr	r3, [r4, #16]
 800e1b6:	b94b      	cbnz	r3, 800e1cc <__swsetup_r+0x7c>
 800e1b8:	89a3      	ldrh	r3, [r4, #12]
 800e1ba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e1be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1c2:	d003      	beq.n	800e1cc <__swsetup_r+0x7c>
 800e1c4:	4621      	mov	r1, r4
 800e1c6:	4628      	mov	r0, r5
 800e1c8:	f000 f884 	bl	800e2d4 <__smakebuf_r>
 800e1cc:	89a0      	ldrh	r0, [r4, #12]
 800e1ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e1d2:	f010 0301 	ands.w	r3, r0, #1
 800e1d6:	d00a      	beq.n	800e1ee <__swsetup_r+0x9e>
 800e1d8:	2300      	movs	r3, #0
 800e1da:	60a3      	str	r3, [r4, #8]
 800e1dc:	6963      	ldr	r3, [r4, #20]
 800e1de:	425b      	negs	r3, r3
 800e1e0:	61a3      	str	r3, [r4, #24]
 800e1e2:	6923      	ldr	r3, [r4, #16]
 800e1e4:	b943      	cbnz	r3, 800e1f8 <__swsetup_r+0xa8>
 800e1e6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e1ea:	d1c4      	bne.n	800e176 <__swsetup_r+0x26>
 800e1ec:	bd38      	pop	{r3, r4, r5, pc}
 800e1ee:	0781      	lsls	r1, r0, #30
 800e1f0:	bf58      	it	pl
 800e1f2:	6963      	ldrpl	r3, [r4, #20]
 800e1f4:	60a3      	str	r3, [r4, #8]
 800e1f6:	e7f4      	b.n	800e1e2 <__swsetup_r+0x92>
 800e1f8:	2000      	movs	r0, #0
 800e1fa:	e7f7      	b.n	800e1ec <__swsetup_r+0x9c>
 800e1fc:	20000258 	.word	0x20000258

0800e200 <_raise_r>:
 800e200:	291f      	cmp	r1, #31
 800e202:	b538      	push	{r3, r4, r5, lr}
 800e204:	4604      	mov	r4, r0
 800e206:	460d      	mov	r5, r1
 800e208:	d904      	bls.n	800e214 <_raise_r+0x14>
 800e20a:	2316      	movs	r3, #22
 800e20c:	6003      	str	r3, [r0, #0]
 800e20e:	f04f 30ff 	mov.w	r0, #4294967295
 800e212:	bd38      	pop	{r3, r4, r5, pc}
 800e214:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e216:	b112      	cbz	r2, 800e21e <_raise_r+0x1e>
 800e218:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e21c:	b94b      	cbnz	r3, 800e232 <_raise_r+0x32>
 800e21e:	4620      	mov	r0, r4
 800e220:	f000 f830 	bl	800e284 <_getpid_r>
 800e224:	462a      	mov	r2, r5
 800e226:	4601      	mov	r1, r0
 800e228:	4620      	mov	r0, r4
 800e22a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e22e:	f000 b817 	b.w	800e260 <_kill_r>
 800e232:	2b01      	cmp	r3, #1
 800e234:	d00a      	beq.n	800e24c <_raise_r+0x4c>
 800e236:	1c59      	adds	r1, r3, #1
 800e238:	d103      	bne.n	800e242 <_raise_r+0x42>
 800e23a:	2316      	movs	r3, #22
 800e23c:	6003      	str	r3, [r0, #0]
 800e23e:	2001      	movs	r0, #1
 800e240:	e7e7      	b.n	800e212 <_raise_r+0x12>
 800e242:	2400      	movs	r4, #0
 800e244:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e248:	4628      	mov	r0, r5
 800e24a:	4798      	blx	r3
 800e24c:	2000      	movs	r0, #0
 800e24e:	e7e0      	b.n	800e212 <_raise_r+0x12>

0800e250 <raise>:
 800e250:	4b02      	ldr	r3, [pc, #8]	; (800e25c <raise+0xc>)
 800e252:	4601      	mov	r1, r0
 800e254:	6818      	ldr	r0, [r3, #0]
 800e256:	f7ff bfd3 	b.w	800e200 <_raise_r>
 800e25a:	bf00      	nop
 800e25c:	20000258 	.word	0x20000258

0800e260 <_kill_r>:
 800e260:	b538      	push	{r3, r4, r5, lr}
 800e262:	4d07      	ldr	r5, [pc, #28]	; (800e280 <_kill_r+0x20>)
 800e264:	2300      	movs	r3, #0
 800e266:	4604      	mov	r4, r0
 800e268:	4608      	mov	r0, r1
 800e26a:	4611      	mov	r1, r2
 800e26c:	602b      	str	r3, [r5, #0]
 800e26e:	f7f5 f973 	bl	8003558 <_kill>
 800e272:	1c43      	adds	r3, r0, #1
 800e274:	d102      	bne.n	800e27c <_kill_r+0x1c>
 800e276:	682b      	ldr	r3, [r5, #0]
 800e278:	b103      	cbz	r3, 800e27c <_kill_r+0x1c>
 800e27a:	6023      	str	r3, [r4, #0]
 800e27c:	bd38      	pop	{r3, r4, r5, pc}
 800e27e:	bf00      	nop
 800e280:	20000ba0 	.word	0x20000ba0

0800e284 <_getpid_r>:
 800e284:	f7f5 b960 	b.w	8003548 <_getpid>

0800e288 <__swhatbuf_r>:
 800e288:	b570      	push	{r4, r5, r6, lr}
 800e28a:	460c      	mov	r4, r1
 800e28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e290:	2900      	cmp	r1, #0
 800e292:	b096      	sub	sp, #88	; 0x58
 800e294:	4615      	mov	r5, r2
 800e296:	461e      	mov	r6, r3
 800e298:	da0d      	bge.n	800e2b6 <__swhatbuf_r+0x2e>
 800e29a:	89a3      	ldrh	r3, [r4, #12]
 800e29c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e2a0:	f04f 0100 	mov.w	r1, #0
 800e2a4:	bf0c      	ite	eq
 800e2a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e2aa:	2340      	movne	r3, #64	; 0x40
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	6031      	str	r1, [r6, #0]
 800e2b0:	602b      	str	r3, [r5, #0]
 800e2b2:	b016      	add	sp, #88	; 0x58
 800e2b4:	bd70      	pop	{r4, r5, r6, pc}
 800e2b6:	466a      	mov	r2, sp
 800e2b8:	f000 f848 	bl	800e34c <_fstat_r>
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	dbec      	blt.n	800e29a <__swhatbuf_r+0x12>
 800e2c0:	9901      	ldr	r1, [sp, #4]
 800e2c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e2c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e2ca:	4259      	negs	r1, r3
 800e2cc:	4159      	adcs	r1, r3
 800e2ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2d2:	e7eb      	b.n	800e2ac <__swhatbuf_r+0x24>

0800e2d4 <__smakebuf_r>:
 800e2d4:	898b      	ldrh	r3, [r1, #12]
 800e2d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e2d8:	079d      	lsls	r5, r3, #30
 800e2da:	4606      	mov	r6, r0
 800e2dc:	460c      	mov	r4, r1
 800e2de:	d507      	bpl.n	800e2f0 <__smakebuf_r+0x1c>
 800e2e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e2e4:	6023      	str	r3, [r4, #0]
 800e2e6:	6123      	str	r3, [r4, #16]
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	6163      	str	r3, [r4, #20]
 800e2ec:	b002      	add	sp, #8
 800e2ee:	bd70      	pop	{r4, r5, r6, pc}
 800e2f0:	ab01      	add	r3, sp, #4
 800e2f2:	466a      	mov	r2, sp
 800e2f4:	f7ff ffc8 	bl	800e288 <__swhatbuf_r>
 800e2f8:	9900      	ldr	r1, [sp, #0]
 800e2fa:	4605      	mov	r5, r0
 800e2fc:	4630      	mov	r0, r6
 800e2fe:	f7fb ff39 	bl	800a174 <_malloc_r>
 800e302:	b948      	cbnz	r0, 800e318 <__smakebuf_r+0x44>
 800e304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e308:	059a      	lsls	r2, r3, #22
 800e30a:	d4ef      	bmi.n	800e2ec <__smakebuf_r+0x18>
 800e30c:	f023 0303 	bic.w	r3, r3, #3
 800e310:	f043 0302 	orr.w	r3, r3, #2
 800e314:	81a3      	strh	r3, [r4, #12]
 800e316:	e7e3      	b.n	800e2e0 <__smakebuf_r+0xc>
 800e318:	89a3      	ldrh	r3, [r4, #12]
 800e31a:	6020      	str	r0, [r4, #0]
 800e31c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e320:	81a3      	strh	r3, [r4, #12]
 800e322:	9b00      	ldr	r3, [sp, #0]
 800e324:	6163      	str	r3, [r4, #20]
 800e326:	9b01      	ldr	r3, [sp, #4]
 800e328:	6120      	str	r0, [r4, #16]
 800e32a:	b15b      	cbz	r3, 800e344 <__smakebuf_r+0x70>
 800e32c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e330:	4630      	mov	r0, r6
 800e332:	f000 f81d 	bl	800e370 <_isatty_r>
 800e336:	b128      	cbz	r0, 800e344 <__smakebuf_r+0x70>
 800e338:	89a3      	ldrh	r3, [r4, #12]
 800e33a:	f023 0303 	bic.w	r3, r3, #3
 800e33e:	f043 0301 	orr.w	r3, r3, #1
 800e342:	81a3      	strh	r3, [r4, #12]
 800e344:	89a3      	ldrh	r3, [r4, #12]
 800e346:	431d      	orrs	r5, r3
 800e348:	81a5      	strh	r5, [r4, #12]
 800e34a:	e7cf      	b.n	800e2ec <__smakebuf_r+0x18>

0800e34c <_fstat_r>:
 800e34c:	b538      	push	{r3, r4, r5, lr}
 800e34e:	4d07      	ldr	r5, [pc, #28]	; (800e36c <_fstat_r+0x20>)
 800e350:	2300      	movs	r3, #0
 800e352:	4604      	mov	r4, r0
 800e354:	4608      	mov	r0, r1
 800e356:	4611      	mov	r1, r2
 800e358:	602b      	str	r3, [r5, #0]
 800e35a:	f7f5 f95c 	bl	8003616 <_fstat>
 800e35e:	1c43      	adds	r3, r0, #1
 800e360:	d102      	bne.n	800e368 <_fstat_r+0x1c>
 800e362:	682b      	ldr	r3, [r5, #0]
 800e364:	b103      	cbz	r3, 800e368 <_fstat_r+0x1c>
 800e366:	6023      	str	r3, [r4, #0]
 800e368:	bd38      	pop	{r3, r4, r5, pc}
 800e36a:	bf00      	nop
 800e36c:	20000ba0 	.word	0x20000ba0

0800e370 <_isatty_r>:
 800e370:	b538      	push	{r3, r4, r5, lr}
 800e372:	4d06      	ldr	r5, [pc, #24]	; (800e38c <_isatty_r+0x1c>)
 800e374:	2300      	movs	r3, #0
 800e376:	4604      	mov	r4, r0
 800e378:	4608      	mov	r0, r1
 800e37a:	602b      	str	r3, [r5, #0]
 800e37c:	f7f5 f95b 	bl	8003636 <_isatty>
 800e380:	1c43      	adds	r3, r0, #1
 800e382:	d102      	bne.n	800e38a <_isatty_r+0x1a>
 800e384:	682b      	ldr	r3, [r5, #0]
 800e386:	b103      	cbz	r3, 800e38a <_isatty_r+0x1a>
 800e388:	6023      	str	r3, [r4, #0]
 800e38a:	bd38      	pop	{r3, r4, r5, pc}
 800e38c:	20000ba0 	.word	0x20000ba0

0800e390 <_init>:
 800e390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e392:	bf00      	nop
 800e394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e396:	bc08      	pop	{r3}
 800e398:	469e      	mov	lr, r3
 800e39a:	4770      	bx	lr

0800e39c <_fini>:
 800e39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e39e:	bf00      	nop
 800e3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3a2:	bc08      	pop	{r3}
 800e3a4:	469e      	mov	lr, r3
 800e3a6:	4770      	bx	lr
