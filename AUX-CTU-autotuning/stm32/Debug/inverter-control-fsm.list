
inverter-control-fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800e380  0800e380  0001e380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8fc  0800e8fc  00020240  2**0
                  CONTENTS
  4 .ARM          00000000  0800e8fc  0800e8fc  00020240  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e8fc  0800e8fc  00020240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8fc  0800e8fc  0001e8fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e900  0800e900  0001e900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  0800e904  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020240  2**0
                  CONTENTS
 10 .bss          0000094c  20000240  20000240  00020240  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b8c  20000b8c  00020240  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c589  00000000  00000000  000202b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000031dc  00000000  00000000  0003c83c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ad8  00000000  00000000  0003fa18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000157e  00000000  00000000  000414f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000247a5  00000000  00000000  00042a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f591  00000000  00000000  00067213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e4e19  00000000  00000000  000867a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008a18  00000000  00000000  0016b5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b6  00000000  00000000  00173fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000240 	.word	0x20000240
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e368 	.word	0x0800e368

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000244 	.word	0x20000244
 80001cc:	0800e368 	.word	0x0800e368

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2lz>:
 8000c08:	b538      	push	{r3, r4, r5, lr}
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	4604      	mov	r4, r0
 8000c10:	460d      	mov	r5, r1
 8000c12:	f7ff ff73 	bl	8000afc <__aeabi_dcmplt>
 8000c16:	b928      	cbnz	r0, 8000c24 <__aeabi_d2lz+0x1c>
 8000c18:	4620      	mov	r0, r4
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c20:	f000 b80a 	b.w	8000c38 <__aeabi_d2ulz>
 8000c24:	4620      	mov	r0, r4
 8000c26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c2a:	f000 f805 	bl	8000c38 <__aeabi_d2ulz>
 8000c2e:	4240      	negs	r0, r0
 8000c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c34:	bd38      	pop	{r3, r4, r5, pc}
 8000c36:	bf00      	nop

08000c38 <__aeabi_d2ulz>:
 8000c38:	b5d0      	push	{r4, r6, r7, lr}
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__aeabi_d2ulz+0x34>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4606      	mov	r6, r0
 8000c40:	460f      	mov	r7, r1
 8000c42:	f7ff fce9 	bl	8000618 <__aeabi_dmul>
 8000c46:	f7ff ffbf 	bl	8000bc8 <__aeabi_d2uiz>
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	f7ff fc6a 	bl	8000524 <__aeabi_ui2d>
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <__aeabi_d2ulz+0x38>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	f7ff fce0 	bl	8000618 <__aeabi_dmul>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	4639      	mov	r1, r7
 8000c60:	f7ff fb22 	bl	80002a8 <__aeabi_dsub>
 8000c64:	f7ff ffb0 	bl	8000bc8 <__aeabi_d2uiz>
 8000c68:	4621      	mov	r1, r4
 8000c6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c6c:	3df00000 	.word	0x3df00000
 8000c70:	41f00000 	.word	0x41f00000

08000c74 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d002      	beq.n	8000c8a <case_insensitive_strcmp+0x16>
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e056      	b.n	8000d3c <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d10d      	bne.n	8000cb2 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e050      	b.n	8000d3c <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e04a      	b.n	8000d3c <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	73fb      	strb	r3, [r7, #15]
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	4a22      	ldr	r2, [pc, #136]	; (8000d48 <case_insensitive_strcmp+0xd4>)
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d103      	bne.n	8000cd2 <case_insensitive_strcmp+0x5e>
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	f103 0220 	add.w	r2, r3, #32
 8000cd0:	e000      	b.n	8000cd4 <case_insensitive_strcmp+0x60>
 8000cd2:	7bfa      	ldrb	r2, [r7, #15]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	73bb      	strb	r3, [r7, #14]
 8000cda:	7bbb      	ldrb	r3, [r7, #14]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	491a      	ldr	r1, [pc, #104]	; (8000d48 <case_insensitive_strcmp+0xd4>)
 8000ce0:	440b      	add	r3, r1
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d102      	bne.n	8000cf2 <case_insensitive_strcmp+0x7e>
 8000cec:	7bbb      	ldrb	r3, [r7, #14]
 8000cee:	3320      	adds	r3, #32
 8000cf0:	e000      	b.n	8000cf4 <case_insensitive_strcmp+0x80>
 8000cf2:	7bbb      	ldrb	r3, [r7, #14]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d0d0      	beq.n	8000c9a <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	737b      	strb	r3, [r7, #13]
 8000cfe:	7b7b      	ldrb	r3, [r7, #13]
 8000d00:	3301      	adds	r3, #1
 8000d02:	4a11      	ldr	r2, [pc, #68]	; (8000d48 <case_insensitive_strcmp+0xd4>)
 8000d04:	4413      	add	r3, r2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d103      	bne.n	8000d18 <case_insensitive_strcmp+0xa4>
 8000d10:	7b7b      	ldrb	r3, [r7, #13]
 8000d12:	f103 0220 	add.w	r2, r3, #32
 8000d16:	e000      	b.n	8000d1a <case_insensitive_strcmp+0xa6>
 8000d18:	7b7a      	ldrb	r2, [r7, #13]
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	733b      	strb	r3, [r7, #12]
 8000d20:	7b3b      	ldrb	r3, [r7, #12]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4908      	ldr	r1, [pc, #32]	; (8000d48 <case_insensitive_strcmp+0xd4>)
 8000d26:	440b      	add	r3, r1
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d102      	bne.n	8000d38 <case_insensitive_strcmp+0xc4>
 8000d32:	7b3b      	ldrb	r3, [r7, #12]
 8000d34:	3320      	adds	r3, #32
 8000d36:	e000      	b.n	8000d3a <case_insensitive_strcmp+0xc6>
 8000d38:	7b3b      	ldrb	r3, [r7, #12]
 8000d3a:	1ad3      	subs	r3, r2, r3
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	0800e528 	.word	0x0800e528

08000d4c <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2028      	movs	r0, #40	; 0x28
 8000d5a:	4798      	blx	r3
 8000d5c:	60f8      	str	r0, [r7, #12]
    if (node)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d004      	beq.n	8000d6e <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000d64:	2228      	movs	r2, #40	; 0x28
 8000d66:	2100      	movs	r1, #0
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f00a fe46 	bl	800b9fa <memset>
    }

    return node;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000d84:	e037      	b.n	8000df6 <cJSON_Delete+0x7e>
    {
        next = item->next;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d108      	bne.n	8000daa <cJSON_Delete+0x32>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d004      	beq.n	8000daa <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ffe7 	bl	8000d78 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d109      	bne.n	8000dca <cJSON_Delete+0x52>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d005      	beq.n	8000dca <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <cJSON_Delete+0x90>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	6912      	ldr	r2, [r2, #16]
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d109      	bne.n	8000dea <cJSON_Delete+0x72>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a1b      	ldr	r3, [r3, #32]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d005      	beq.n	8000dea <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <cJSON_Delete+0x90>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	6a12      	ldr	r2, [r2, #32]
 8000de6:	4610      	mov	r0, r2
 8000de8:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <cJSON_Delete+0x90>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	4798      	blx	r3
        item = next;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1c4      	bne.n	8000d86 <cJSON_Delete+0xe>
    }
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000000 	.word	0x20000000

08000e0c <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8000e10:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	0000      	movs	r0, r0
	...

08000e20 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b098      	sub	sp, #96	; 0x60
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
    double number = 0;
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	f04f 0300 	mov.w	r3, #0
 8000e32:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8000e3a:	f7ff ffe7 	bl	8000e0c <get_decimal_point>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <parse_number+0x36>
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <parse_number+0x3a>
    {
        return false;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e0a0      	b.n	8000f9c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e5e:	e03d      	b.n	8000edc <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	6899      	ldr	r1, [r3, #8]
 8000e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e6a:	440b      	add	r3, r1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b45      	cmp	r3, #69	; 0x45
 8000e72:	dc17      	bgt.n	8000ea4 <parse_number+0x84>
 8000e74:	2b2b      	cmp	r3, #43	; 0x2b
 8000e76:	db40      	blt.n	8000efa <parse_number+0xda>
 8000e78:	3b2b      	subs	r3, #43	; 0x2b
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	409a      	lsls	r2, r3
 8000e7e:	4b4c      	ldr	r3, [pc, #304]	; (8000fb0 <parse_number+0x190>)
 8000e80:	4013      	ands	r3, r2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	bf14      	ite	ne
 8000e86:	2301      	movne	r3, #1
 8000e88:	2300      	moveq	r3, #0
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d10b      	bne.n	8000ea8 <parse_number+0x88>
 8000e90:	f002 0308 	and.w	r3, r2, #8
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	bf14      	ite	ne
 8000e98:	2301      	movne	r3, #1
 8000e9a:	2300      	moveq	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d111      	bne.n	8000ec6 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8000ea2:	e02a      	b.n	8000efa <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8000ea4:	2b65      	cmp	r3, #101	; 0x65
 8000ea6:	d128      	bne.n	8000efa <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	6899      	ldr	r1, [r3, #8]
 8000eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000eb2:	440b      	add	r3, r1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	7819      	ldrb	r1, [r3, #0]
 8000eb8:	f107 0208 	add.w	r2, r7, #8
 8000ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ebe:	4413      	add	r3, r2
 8000ec0:	460a      	mov	r2, r1
 8000ec2:	701a      	strb	r2, [r3, #0]
                break;
 8000ec4:	e007      	b.n	8000ed6 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 8000ec6:	f107 0208 	add.w	r2, r7, #8
 8000eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ecc:	4413      	add	r3, r2
 8000ece:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000ed2:	701a      	strb	r2, [r3, #0]
                break;
 8000ed4:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8000ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ed8:	3301      	adds	r3, #1
 8000eda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ede:	2b3e      	cmp	r3, #62	; 0x3e
 8000ee0:	d80d      	bhi.n	8000efe <parse_number+0xde>
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00a      	beq.n	8000efe <parse_number+0xde>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000eee:	441a      	add	r2, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d3b3      	bcc.n	8000e60 <parse_number+0x40>
        }
    }
loop_end:
 8000ef8:	e001      	b.n	8000efe <parse_number+0xde>
                goto loop_end;
 8000efa:	bf00      	nop
 8000efc:	e000      	b.n	8000f00 <parse_number+0xe0>
loop_end:
 8000efe:	bf00      	nop
    number_c_string[i] = '\0';
 8000f00:	f107 0208 	add.w	r2, r7, #8
 8000f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f06:	4413      	add	r3, r2
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8000f0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f009 ffea 	bl	800aef0 <strtod>
 8000f1c:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8000f20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d101      	bne.n	8000f2e <parse_number+0x10e>
    {
        return false; /* parse_error */
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e036      	b.n	8000f9c <parse_number+0x17c>
    }

    item->valuedouble = number;
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000f34:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8000f38:	a31b      	add	r3, pc, #108	; (adr r3, 8000fa8 <parse_number+0x188>)
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000f42:	f7ff fdef 	bl	8000b24 <__aeabi_dcmpge>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d004      	beq.n	8000f56 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000f52:	615a      	str	r2, [r3, #20]
 8000f54:	e015      	b.n	8000f82 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <parse_number+0x194>)
 8000f5c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000f60:	f7ff fdd6 	bl	8000b10 <__aeabi_dcmple>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d004      	beq.n	8000f74 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f70:	615a      	str	r2, [r3, #20]
 8000f72:	e006      	b.n	8000f82 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8000f74:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000f78:	f7ff fdfe 	bl	8000b78 <__aeabi_d2iz>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2208      	movs	r2, #8
 8000f86:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000f8e:	f107 0208 	add.w	r2, r7, #8
 8000f92:	1a8a      	subs	r2, r1, r2
 8000f94:	441a      	add	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	609a      	str	r2, [r3, #8]
    return true;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3760      	adds	r7, #96	; 0x60
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	ffc00000 	.word	0xffc00000
 8000fac:	41dfffff 	.word	0x41dfffff
 8000fb0:	04007fe5 	.word	0x04007fe5
 8000fb4:	c1e00000 	.word	0xc1e00000

08000fb8 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	e04c      	b.n	8001068 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b2f      	cmp	r3, #47	; 0x2f
 8000fd8:	d90f      	bls.n	8000ffa <parse_hex4+0x42>
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4413      	add	r3, r2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b39      	cmp	r3, #57	; 0x39
 8000fe4:	d809      	bhi.n	8000ffa <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4413      	add	r3, r2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	3b30      	subs	r3, #48	; 0x30
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	e02d      	b.n	8001056 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4413      	add	r3, r2
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b40      	cmp	r3, #64	; 0x40
 8001004:	d90f      	bls.n	8001026 <parse_hex4+0x6e>
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4413      	add	r3, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b46      	cmp	r3, #70	; 0x46
 8001010:	d809      	bhi.n	8001026 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4413      	add	r3, r2
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	3b37      	subs	r3, #55	; 0x37
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	e017      	b.n	8001056 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4413      	add	r3, r2
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b60      	cmp	r3, #96	; 0x60
 8001030:	d90f      	bls.n	8001052 <parse_hex4+0x9a>
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4413      	add	r3, r2
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b66      	cmp	r3, #102	; 0x66
 800103c:	d809      	bhi.n	8001052 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4413      	add	r3, r2
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	3b57      	subs	r3, #87	; 0x57
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	e001      	b.n	8001056 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001052:	2300      	movs	r3, #0
 8001054:	e00c      	b.n	8001070 <parse_hex4+0xb8>
        }

        if (i < 3)
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d802      	bhi.n	8001062 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	3301      	adds	r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	2b03      	cmp	r3, #3
 800106c:	d9af      	bls.n	8000fce <parse_hex4+0x16>
        }
    }

    return h;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b05      	cmp	r3, #5
 80010b4:	f340 80b7 	ble.w	8001226 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	3302      	adds	r3, #2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff7b 	bl	8000fb8 <parse_hex4>
 80010c2:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80010ca:	d304      	bcc.n	80010d6 <utf16_literal_to_utf8+0x5a>
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80010d2:	f0c0 80aa 	bcc.w	800122a <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80010dc:	d337      	bcc.n	800114e <utf16_literal_to_utf8+0xd2>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80010e4:	d233      	bcs.n	800114e <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	3306      	adds	r3, #6
 80010ea:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80010f0:	230c      	movs	r3, #12
 80010f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b05      	cmp	r3, #5
 80010fe:	f340 8096 	ble.w	800122e <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b5c      	cmp	r3, #92	; 0x5c
 8001108:	f040 8093 	bne.w	8001232 <utf16_literal_to_utf8+0x1b6>
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3301      	adds	r3, #1
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b75      	cmp	r3, #117	; 0x75
 8001114:	f040 808d 	bne.w	8001232 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3302      	adds	r3, #2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff4b 	bl	8000fb8 <parse_hex4>
 8001122:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800112a:	f0c0 8084 	bcc.w	8001236 <utf16_literal_to_utf8+0x1ba>
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001134:	d27f      	bcs.n	8001236 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	029a      	lsls	r2, r3, #10
 800113a:	4b43      	ldr	r3, [pc, #268]	; (8001248 <utf16_literal_to_utf8+0x1cc>)
 800113c:	4013      	ands	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001144:	4313      	orrs	r3, r2
 8001146:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800114c:	e004      	b.n	8001158 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800114e:	2306      	movs	r3, #6
 8001150:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	2b7f      	cmp	r3, #127	; 0x7f
 800115c:	d803      	bhi.n	8001166 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800115e:	2301      	movs	r3, #1
 8001160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001164:	e01f      	b.n	80011a6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800116c:	d206      	bcs.n	800117c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800116e:	2302      	movs	r3, #2
 8001170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001174:	23c0      	movs	r3, #192	; 0xc0
 8001176:	f887 3020 	strb.w	r3, [r7, #32]
 800117a:	e014      	b.n	80011a6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001182:	d206      	bcs.n	8001192 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001184:	2303      	movs	r3, #3
 8001186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800118a:	23e0      	movs	r3, #224	; 0xe0
 800118c:	f887 3020 	strb.w	r3, [r7, #32]
 8001190:	e009      	b.n	80011a6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001198:	d24f      	bcs.n	800123a <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800119a:	2304      	movs	r3, #4
 800119c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80011a0:	23f0      	movs	r3, #240	; 0xf0
 80011a2:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80011a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80011b0:	e015      	b.n	80011de <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6819      	ldr	r1, [r3, #0]
 80011c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011c4:	440b      	add	r3, r1
 80011c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	099b      	lsrs	r3, r3, #6
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80011d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011d8:	3b01      	subs	r3, #1
 80011da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80011de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1e5      	bne.n	80011b2 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80011e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d909      	bls.n	8001202 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	b2d9      	uxtb	r1, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e007      	b.n	8001212 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	b2da      	uxtb	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800121a:	441a      	add	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001220:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001224:	e00b      	b.n	800123e <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001226:	bf00      	nop
 8001228:	e008      	b.n	800123c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800122a:	bf00      	nop
 800122c:	e006      	b.n	800123c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800122e:	bf00      	nop
 8001230:	e004      	b.n	800123c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001232:	bf00      	nop
 8001234:	e002      	b.n	800123c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001236:	bf00      	nop
 8001238:	e000      	b.n	800123c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800123a:	bf00      	nop

fail:
    return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3728      	adds	r7, #40	; 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	000ffc00 	.word	0x000ffc00

0800124c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	3301      	adds	r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	3301      	adds	r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	4413      	add	r3, r2
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b22      	cmp	r3, #34	; 0x22
 8001288:	f040 8103 	bne.w	8001492 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001294:	e017      	b.n	80012c6 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b5c      	cmp	r3, #92	; 0x5c
 800129c:	d110      	bne.n	80012c0 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	f080 80f1 	bcs.w	8001496 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	3301      	adds	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
                input_end++;
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	3301      	adds	r3, #1
 80012be:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	3301      	adds	r3, #1
 80012c4:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6a3a      	ldr	r2, [r7, #32]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d203      	bcs.n	80012e0 <parse_string+0x94>
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b22      	cmp	r3, #34	; 0x22
 80012de:	d1da      	bne.n	8001296 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6a3a      	ldr	r2, [r7, #32]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	f080 80d3 	bcs.w	800149a <parse_string+0x24e>
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b22      	cmp	r3, #34	; 0x22
 80012fa:	f040 80ce 	bne.w	800149a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	4413      	add	r3, r2
 8001308:	6a3a      	ldr	r2, [r7, #32]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	461a      	mov	r2, r3
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	3201      	adds	r2, #1
 800131c:	4610      	mov	r0, r2
 800131e:	4798      	blx	r3
 8001320:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80ba 	beq.w	800149e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800132e:	e094      	b.n	800145a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b5c      	cmp	r3, #92	; 0x5c
 8001336:	d008      	beq.n	800134a <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800133a:	1c53      	adds	r3, r2, #1
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1c59      	adds	r1, r3, #1
 8001342:	60f9      	str	r1, [r7, #12]
 8001344:	7812      	ldrb	r2, [r2, #0]
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	e087      	b.n	800145a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800134a:	2302      	movs	r3, #2
 800134c:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800134e:	6a3a      	ldr	r2, [r7, #32]
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	f340 80a4 	ble.w	80014a2 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	3301      	adds	r3, #1
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b75      	cmp	r3, #117	; 0x75
 8001362:	f300 80a0 	bgt.w	80014a6 <parse_string+0x25a>
 8001366:	2b5c      	cmp	r3, #92	; 0x5c
 8001368:	da04      	bge.n	8001374 <parse_string+0x128>
 800136a:	2b22      	cmp	r3, #34	; 0x22
 800136c:	d05c      	beq.n	8001428 <parse_string+0x1dc>
 800136e:	2b2f      	cmp	r3, #47	; 0x2f
 8001370:	d05a      	beq.n	8001428 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001372:	e098      	b.n	80014a6 <parse_string+0x25a>
            switch (input_pointer[1])
 8001374:	3b5c      	subs	r3, #92	; 0x5c
 8001376:	2b19      	cmp	r3, #25
 8001378:	f200 8095 	bhi.w	80014a6 <parse_string+0x25a>
 800137c:	a201      	add	r2, pc, #4	; (adr r2, 8001384 <parse_string+0x138>)
 800137e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001382:	bf00      	nop
 8001384:	08001429 	.word	0x08001429
 8001388:	080014a7 	.word	0x080014a7
 800138c:	080014a7 	.word	0x080014a7
 8001390:	080014a7 	.word	0x080014a7
 8001394:	080014a7 	.word	0x080014a7
 8001398:	080014a7 	.word	0x080014a7
 800139c:	080013ed 	.word	0x080013ed
 80013a0:	080014a7 	.word	0x080014a7
 80013a4:	080014a7 	.word	0x080014a7
 80013a8:	080014a7 	.word	0x080014a7
 80013ac:	080013f9 	.word	0x080013f9
 80013b0:	080014a7 	.word	0x080014a7
 80013b4:	080014a7 	.word	0x080014a7
 80013b8:	080014a7 	.word	0x080014a7
 80013bc:	080014a7 	.word	0x080014a7
 80013c0:	080014a7 	.word	0x080014a7
 80013c4:	080014a7 	.word	0x080014a7
 80013c8:	080014a7 	.word	0x080014a7
 80013cc:	08001405 	.word	0x08001405
 80013d0:	080014a7 	.word	0x080014a7
 80013d4:	080014a7 	.word	0x080014a7
 80013d8:	080014a7 	.word	0x080014a7
 80013dc:	08001411 	.word	0x08001411
 80013e0:	080014a7 	.word	0x080014a7
 80013e4:	0800141d 	.word	0x0800141d
 80013e8:	08001439 	.word	0x08001439
                    *output_pointer++ = '\b';
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	60fa      	str	r2, [r7, #12]
 80013f2:	2208      	movs	r2, #8
 80013f4:	701a      	strb	r2, [r3, #0]
                    break;
 80013f6:	e02c      	b.n	8001452 <parse_string+0x206>
                    *output_pointer++ = '\f';
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	60fa      	str	r2, [r7, #12]
 80013fe:	220c      	movs	r2, #12
 8001400:	701a      	strb	r2, [r3, #0]
                    break;
 8001402:	e026      	b.n	8001452 <parse_string+0x206>
                    *output_pointer++ = '\n';
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	60fa      	str	r2, [r7, #12]
 800140a:	220a      	movs	r2, #10
 800140c:	701a      	strb	r2, [r3, #0]
                    break;
 800140e:	e020      	b.n	8001452 <parse_string+0x206>
                    *output_pointer++ = '\r';
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	60fa      	str	r2, [r7, #12]
 8001416:	220d      	movs	r2, #13
 8001418:	701a      	strb	r2, [r3, #0]
                    break;
 800141a:	e01a      	b.n	8001452 <parse_string+0x206>
                    *output_pointer++ = '\t';
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	60fa      	str	r2, [r7, #12]
 8001422:	2209      	movs	r2, #9
 8001424:	701a      	strb	r2, [r3, #0]
                    break;
 8001426:	e014      	b.n	8001452 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1c59      	adds	r1, r3, #1
 8001430:	60f9      	str	r1, [r7, #12]
 8001432:	7812      	ldrb	r2, [r2, #0]
 8001434:	701a      	strb	r2, [r3, #0]
                    break;
 8001436:	e00c      	b.n	8001452 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	461a      	mov	r2, r3
 800143e:	6a39      	ldr	r1, [r7, #32]
 8001440:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001442:	f7ff fe1b 	bl	800107c <utf16_literal_to_utf8>
 8001446:	4603      	mov	r3, r0
 8001448:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800144a:	7dfb      	ldrb	r3, [r7, #23]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d02c      	beq.n	80014aa <parse_string+0x25e>
                    break;
 8001450:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001452:	7dfb      	ldrb	r3, [r7, #23]
 8001454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001456:	4413      	add	r3, r2
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800145a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	429a      	cmp	r2, r3
 8001460:	f4ff af66 	bcc.w	8001330 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2210      	movs	r2, #16
 800146e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6a3a      	ldr	r2, [r7, #32]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	461a      	mov	r2, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	609a      	str	r2, [r3, #8]

    return true;
 800148e:	2301      	movs	r3, #1
 8001490:	e01e      	b.n	80014d0 <parse_string+0x284>
        goto fail;
 8001492:	bf00      	nop
 8001494:	e00a      	b.n	80014ac <parse_string+0x260>
                    goto fail;
 8001496:	bf00      	nop
 8001498:	e008      	b.n	80014ac <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800149a:	bf00      	nop
 800149c:	e006      	b.n	80014ac <parse_string+0x260>
            goto fail; /* allocation failure */
 800149e:	bf00      	nop
 80014a0:	e004      	b.n	80014ac <parse_string+0x260>
                goto fail;
 80014a2:	bf00      	nop
 80014a4:	e002      	b.n	80014ac <parse_string+0x260>
                    goto fail;
 80014a6:	bf00      	nop
 80014a8:	e000      	b.n	80014ac <parse_string+0x260>
                        goto fail;
 80014aa:	bf00      	nop

fail:
    if (output != NULL)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	69f8      	ldr	r0, [r7, #28]
 80014b8:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	609a      	str	r2, [r3, #8]
    }

    return false;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <buffer_skip_whitespace+0x16>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e02c      	b.n	800154c <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <buffer_skip_whitespace+0x2c>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	429a      	cmp	r2, r3
 8001502:	d306      	bcc.n	8001512 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	e021      	b.n	800154c <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00d      	beq.n	8001534 <buffer_skip_whitespace+0x5c>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	d207      	bcs.n	8001534 <buffer_skip_whitespace+0x5c>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	4413      	add	r3, r2
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b20      	cmp	r3, #32
 8001532:	d9e9      	bls.n	8001508 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	d104      	bne.n	800154a <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	1e5a      	subs	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800154a:	687b      	ldr	r3, [r7, #4]
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <skip_utf8_bom+0x1e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <skip_utf8_bom+0x1e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <skip_utf8_bom+0x22>
    {
        return NULL;
 8001576:	2300      	movs	r3, #0
 8001578:	e01c      	b.n	80015b4 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d018      	beq.n	80015b2 <skip_utf8_bom+0x5a>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	1d1a      	adds	r2, r3, #4
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	d211      	bcs.n	80015b2 <skip_utf8_bom+0x5a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	4413      	add	r3, r2
 8001598:	2203      	movs	r2, #3
 800159a:	4908      	ldr	r1, [pc, #32]	; (80015bc <skip_utf8_bom+0x64>)
 800159c:	4618      	mov	r0, r3
 800159e:	f00a fa34 	bl	800ba0a <strncmp>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d104      	bne.n	80015b2 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	1cda      	adds	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80015b2:	687b      	ldr	r3, [r7, #4]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	0800e3b8 	.word	0x0800e3b8

080015c0 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e00c      	b.n	80015f0 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f7fe fe5a 	bl	8000290 <strlen>
 80015dc:	4603      	mov	r3, r0
 80015de:	3301      	adds	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	6979      	ldr	r1, [r7, #20]
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 f805 	bl	80015f8 <cJSON_ParseWithLengthOpts>
 80015ee:	4603      	mov	r3, r0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08e      	sub	sp, #56	; 0x38
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001606:	f107 0318 	add.w	r3, r7, #24
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800161a:	2300      	movs	r3, #0
 800161c:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800161e:	4b41      	ldr	r3, [pc, #260]	; (8001724 <cJSON_ParseWithLengthOpts+0x12c>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001624:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <cJSON_ParseWithLengthOpts+0x12c>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d042      	beq.n	80016b6 <cJSON_ParseWithLengthOpts+0xbe>
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d03f      	beq.n	80016b6 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001642:	4a39      	ldr	r2, [pc, #228]	; (8001728 <cJSON_ParseWithLengthOpts+0x130>)
 8001644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001648:	ca07      	ldmia	r2, {r0, r1, r2}
 800164a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800164e:	4836      	ldr	r0, [pc, #216]	; (8001728 <cJSON_ParseWithLengthOpts+0x130>)
 8001650:	f7ff fb7c 	bl	8000d4c <cJSON_New_Item>
 8001654:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8001656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001658:	2b00      	cmp	r3, #0
 800165a:	d02e      	beq.n	80016ba <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff79 	bl	8001558 <skip_utf8_bom>
 8001666:	4603      	mov	r3, r0
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff35 	bl	80014d8 <buffer_skip_whitespace>
 800166e:	4603      	mov	r3, r0
 8001670:	4619      	mov	r1, r3
 8001672:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001674:	f000 f868 	bl	8001748 <parse_value>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d01f      	beq.n	80016be <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00e      	beq.n	80016a2 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001684:	f107 0318 	add.w	r3, r7, #24
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff25 	bl	80014d8 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800168e:	6a3a      	ldr	r2, [r7, #32]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	429a      	cmp	r2, r3
 8001694:	d215      	bcs.n	80016c2 <cJSON_ParseWithLengthOpts+0xca>
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	4413      	add	r3, r2
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10f      	bne.n	80016c2 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	441a      	add	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	601a      	str	r2, [r3, #0]
    }

    return item;
 80016b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b4:	e031      	b.n	800171a <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 80016b6:	bf00      	nop
 80016b8:	e004      	b.n	80016c4 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80016ba:	bf00      	nop
 80016bc:	e002      	b.n	80016c4 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80016be:	bf00      	nop
 80016c0:	e000      	b.n	80016c4 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 80016c2:	bf00      	nop

fail:
    if (item != NULL)
 80016c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 80016ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016cc:	f7ff fb54 	bl	8000d78 <cJSON_Delete>
    }

    if (value != NULL)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d020      	beq.n	8001718 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 80016de:	6a3a      	ldr	r2, [r7, #32]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d202      	bcs.n	80016ec <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	e005      	b.n	80016f8 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d004      	beq.n	8001708 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	441a      	add	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <cJSON_ParseWithLengthOpts+0x12c>)
 800170a:	461a      	mov	r2, r3
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001714:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3738      	adds	r7, #56	; 0x38
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000025c 	.word	0x2000025c
 8001728:	20000000 	.word	0x20000000

0800172c <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff41 	bl	80015c0 <cJSON_ParseWithOpts>
 800173e:	4603      	mov	r3, r0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <parse_value+0x18>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <parse_value+0x1c>
    {
        return false; /* no input */
 8001760:	2300      	movs	r3, #0
 8001762:	e0d2      	b.n	800190a <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d01d      	beq.n	80017a6 <parse_value+0x5e>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	1d1a      	adds	r2, r3, #4
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	d816      	bhi.n	80017a6 <parse_value+0x5e>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4413      	add	r3, r2
 8001782:	2204      	movs	r2, #4
 8001784:	4963      	ldr	r1, [pc, #396]	; (8001914 <parse_value+0x1cc>)
 8001786:	4618      	mov	r0, r3
 8001788:	f00a f93f 	bl	800ba0a <strncmp>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2204      	movs	r2, #4
 8001796:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	1d1a      	adds	r2, r3, #4
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	609a      	str	r2, [r3, #8]
        return true;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0b1      	b.n	800190a <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d01d      	beq.n	80017e8 <parse_value+0xa0>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	1d5a      	adds	r2, r3, #5
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d816      	bhi.n	80017e8 <parse_value+0xa0>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	4413      	add	r3, r2
 80017c4:	2205      	movs	r2, #5
 80017c6:	4954      	ldr	r1, [pc, #336]	; (8001918 <parse_value+0x1d0>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f00a f91e 	bl	800ba0a <strncmp>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d109      	bne.n	80017e8 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	1d5a      	adds	r2, r3, #5
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	609a      	str	r2, [r3, #8]
        return true;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e090      	b.n	800190a <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d020      	beq.n	8001830 <parse_value+0xe8>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	1d1a      	adds	r2, r3, #4
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d819      	bhi.n	8001830 <parse_value+0xe8>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4413      	add	r3, r2
 8001806:	2204      	movs	r2, #4
 8001808:	4944      	ldr	r1, [pc, #272]	; (800191c <parse_value+0x1d4>)
 800180a:	4618      	mov	r0, r3
 800180c:	f00a f8fd 	bl	800ba0a <strncmp>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10c      	bne.n	8001830 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2202      	movs	r2, #2
 800181a:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	1d1a      	adds	r2, r3, #4
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	609a      	str	r2, [r3, #8]
        return true;
 800182c:	2301      	movs	r3, #1
 800182e:	e06c      	b.n	800190a <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d013      	beq.n	800185e <parse_value+0x116>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	429a      	cmp	r2, r3
 8001840:	d20d      	bcs.n	800185e <parse_value+0x116>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b22      	cmp	r3, #34	; 0x22
 8001850:	d105      	bne.n	800185e <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001852:	6839      	ldr	r1, [r7, #0]
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff fcf9 	bl	800124c <parse_string>
 800185a:	4603      	mov	r3, r0
 800185c:	e055      	b.n	800190a <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d023      	beq.n	80018ac <parse_value+0x164>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	d21d      	bcs.n	80018ac <parse_value+0x164>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4413      	add	r3, r2
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b2d      	cmp	r3, #45	; 0x2d
 800187e:	d00f      	beq.n	80018a0 <parse_value+0x158>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b2f      	cmp	r3, #47	; 0x2f
 800188e:	d90d      	bls.n	80018ac <parse_value+0x164>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4413      	add	r3, r2
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b39      	cmp	r3, #57	; 0x39
 800189e:	d805      	bhi.n	80018ac <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 80018a0:	6839      	ldr	r1, [r7, #0]
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff fabc 	bl	8000e20 <parse_number>
 80018a8:	4603      	mov	r3, r0
 80018aa:	e02e      	b.n	800190a <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d013      	beq.n	80018da <parse_value+0x192>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d20d      	bcs.n	80018da <parse_value+0x192>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	4413      	add	r3, r2
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b5b      	cmp	r3, #91	; 0x5b
 80018cc:	d105      	bne.n	80018da <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80018ce:	6839      	ldr	r1, [r7, #0]
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f825 	bl	8001920 <parse_array>
 80018d6:	4603      	mov	r3, r0
 80018d8:	e017      	b.n	800190a <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <parse_value+0x1c0>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d20d      	bcs.n	8001908 <parse_value+0x1c0>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	4413      	add	r3, r2
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b7b      	cmp	r3, #123	; 0x7b
 80018fa:	d105      	bne.n	8001908 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 80018fc:	6839      	ldr	r1, [r7, #0]
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f8d2 	bl	8001aa8 <parse_object>
 8001904:	4603      	mov	r3, r0
 8001906:	e000      	b.n	800190a <parse_value+0x1c2>
    }

    return false;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	0800e38c 	.word	0x0800e38c
 8001918:	0800e3bc 	.word	0x0800e3bc
 800191c:	0800e3c4 	.word	0x0800e3c4

08001920 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800193a:	d301      	bcc.n	8001940 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800193c:	2300      	movs	r3, #0
 800193e:	e0af      	b.n	8001aa0 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	4413      	add	r3, r2
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b5b      	cmp	r3, #91	; 0x5b
 8001958:	f040 8094 	bne.w	8001a84 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001966:	6838      	ldr	r0, [r7, #0]
 8001968:	f7ff fdb6 	bl	80014d8 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00d      	beq.n	800198e <parse_array+0x6e>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	d207      	bcs.n	800198e <parse_array+0x6e>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	4413      	add	r3, r2
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b5d      	cmp	r3, #93	; 0x5d
 800198c:	d061      	beq.n	8001a52 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <parse_array+0x80>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	d305      	bcc.n	80019ac <parse_array+0x8c>
    {
        input_buffer->offset--;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	1e5a      	subs	r2, r3, #1
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	609a      	str	r2, [r3, #8]
        goto fail;
 80019aa:	e072      	b.n	8001a92 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	1e5a      	subs	r2, r3, #1
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	3310      	adds	r3, #16
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f9c6 	bl	8000d4c <cJSON_New_Item>
 80019c0:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d05f      	beq.n	8001a88 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d104      	bne.n	80019d8 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	e007      	b.n	80019e8 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80019f2:	6838      	ldr	r0, [r7, #0]
 80019f4:	f7ff fd70 	bl	80014d8 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80019f8:	6839      	ldr	r1, [r7, #0]
 80019fa:	6938      	ldr	r0, [r7, #16]
 80019fc:	f7ff fea4 	bl	8001748 <parse_value>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d042      	beq.n	8001a8c <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001a06:	6838      	ldr	r0, [r7, #0]
 8001a08:	f7ff fd66 	bl	80014d8 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00d      	beq.n	8001a2e <parse_array+0x10e>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d207      	bcs.n	8001a2e <parse_array+0x10e>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	4413      	add	r3, r2
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b2c      	cmp	r3, #44	; 0x2c
 8001a2c:	d0c3      	beq.n	80019b6 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d02d      	beq.n	8001a90 <parse_array+0x170>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d227      	bcs.n	8001a90 <parse_array+0x170>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	4413      	add	r3, r2
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b5d      	cmp	r3, #93	; 0x5d
 8001a4e:	d11f      	bne.n	8001a90 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001a50:	e000      	b.n	8001a54 <parse_array+0x134>
        goto success;
 8001a52:	bf00      	nop
    input_buffer->depth--;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	1e5a      	subs	r2, r3, #1
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <parse_array+0x14a>
        head->prev = current_item;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	609a      	str	r2, [r3, #8]

    return true;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e00d      	b.n	8001aa0 <parse_array+0x180>
        goto fail;
 8001a84:	bf00      	nop
 8001a86:	e004      	b.n	8001a92 <parse_array+0x172>
            goto fail; /* allocation failure */
 8001a88:	bf00      	nop
 8001a8a:	e002      	b.n	8001a92 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001a8c:	bf00      	nop
 8001a8e:	e000      	b.n	8001a92 <parse_array+0x172>
        goto fail; /* expected end of array */
 8001a90:	bf00      	nop

fail:
    if (head != NULL)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001a98:	6978      	ldr	r0, [r7, #20]
 8001a9a:	f7ff f96d 	bl	8000d78 <cJSON_Delete>
    }

    return false;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ac2:	d301      	bcc.n	8001ac8 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e0ea      	b.n	8001c9e <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80d0 	beq.w	8001c7a <parse_object+0x1d2>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	f080 80c9 	bcs.w	8001c7a <parse_object+0x1d2>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4413      	add	r3, r2
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b7b      	cmp	r3, #123	; 0x7b
 8001af6:	f040 80c0 	bne.w	8001c7a <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001b04:	6838      	ldr	r0, [r7, #0]
 8001b06:	f7ff fce7 	bl	80014d8 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00e      	beq.n	8001b2e <parse_object+0x86>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d208      	bcs.n	8001b2e <parse_object+0x86>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b7d      	cmp	r3, #125	; 0x7d
 8001b2a:	f000 808d 	beq.w	8001c48 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <parse_object+0x98>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d305      	bcc.n	8001b4c <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	1e5a      	subs	r2, r3, #1
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	609a      	str	r2, [r3, #8]
        goto fail;
 8001b4a:	e0a1      	b.n	8001c90 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	1e5a      	subs	r2, r3, #1
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	3310      	adds	r3, #16
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff f8f6 	bl	8000d4c <cJSON_New_Item>
 8001b60:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 808a 	beq.w	8001c7e <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d104      	bne.n	8001b7a <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	e007      	b.n	8001b8a <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001b94:	6838      	ldr	r0, [r7, #0]
 8001b96:	f7ff fc9f 	bl	80014d8 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001b9a:	6839      	ldr	r1, [r7, #0]
 8001b9c:	6938      	ldr	r0, [r7, #16]
 8001b9e:	f7ff fb55 	bl	800124c <parse_string>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d06c      	beq.n	8001c82 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001ba8:	6838      	ldr	r0, [r7, #0]
 8001baa:	f7ff fc95 	bl	80014d8 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d061      	beq.n	8001c86 <parse_object+0x1de>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d25b      	bcs.n	8001c86 <parse_object+0x1de>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b3a      	cmp	r3, #58	; 0x3a
 8001bdc:	d153      	bne.n	8001c86 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001be8:	6838      	ldr	r0, [r7, #0]
 8001bea:	f7ff fc75 	bl	80014d8 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001bee:	6839      	ldr	r1, [r7, #0]
 8001bf0:	6938      	ldr	r0, [r7, #16]
 8001bf2:	f7ff fda9 	bl	8001748 <parse_value>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d046      	beq.n	8001c8a <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001bfc:	6838      	ldr	r0, [r7, #0]
 8001bfe:	f7ff fc6b 	bl	80014d8 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00d      	beq.n	8001c24 <parse_object+0x17c>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d207      	bcs.n	8001c24 <parse_object+0x17c>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b2c      	cmp	r3, #44	; 0x2c
 8001c22:	d098      	beq.n	8001b56 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d031      	beq.n	8001c8e <parse_object+0x1e6>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d22b      	bcs.n	8001c8e <parse_object+0x1e6>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	4413      	add	r3, r2
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b7d      	cmp	r3, #125	; 0x7d
 8001c44:	d123      	bne.n	8001c8e <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8001c46:	e000      	b.n	8001c4a <parse_object+0x1a2>
        goto success; /* empty object */
 8001c48:	bf00      	nop
    input_buffer->depth--;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	1e5a      	subs	r2, r3, #1
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <parse_object+0x1b8>
        head->prev = current_item;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2240      	movs	r2, #64	; 0x40
 8001c64:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	609a      	str	r2, [r3, #8]
    return true;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e011      	b.n	8001c9e <parse_object+0x1f6>
        goto fail; /* not an object */
 8001c7a:	bf00      	nop
 8001c7c:	e008      	b.n	8001c90 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8001c7e:	bf00      	nop
 8001c80:	e006      	b.n	8001c90 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8001c82:	bf00      	nop
 8001c84:	e004      	b.n	8001c90 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8001c86:	bf00      	nop
 8001c88:	e002      	b.n	8001c90 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8001c8a:	bf00      	nop
 8001c8c:	e000      	b.n	8001c90 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8001c8e:	bf00      	nop

fail:
    if (head != NULL)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff f86e 	bl	8000d78 <cJSON_Delete>
    }

    return false;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <get_object_item+0x1c>
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <get_object_item+0x20>
    {
        return NULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e033      	b.n	8001d2e <get_object_item+0x88>
    }

    current_element = object->child;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d017      	beq.n	8001d02 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001cd2:	e002      	b.n	8001cda <get_object_item+0x34>
        {
            current_element = current_element->next;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d01c      	beq.n	8001d1a <get_object_item+0x74>
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d018      	beq.n	8001d1a <get_object_item+0x74>
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4619      	mov	r1, r3
 8001cee:	68b8      	ldr	r0, [r7, #8]
 8001cf0:	f7fe fa6e 	bl	80001d0 <strcmp>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1ec      	bne.n	8001cd4 <get_object_item+0x2e>
 8001cfa:	e00e      	b.n	8001d1a <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <get_object_item+0x74>
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	68b8      	ldr	r0, [r7, #8]
 8001d10:	f7fe ffb0 	bl	8000c74 <case_insensitive_strcmp>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <get_object_item+0x82>
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <get_object_item+0x86>
        return NULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e000      	b.n	8001d2e <get_object_item+0x88>
    }

    return current_element;
 8001d2c:	697b      	ldr	r3, [r7, #20]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8001d40:	2201      	movs	r2, #1
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ffae 	bl	8001ca6 <get_object_item>
 8001d4a:	4603      	mov	r3, r0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <cJSON_IsNumber+0x12>
    {
        return false;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e007      	b.n	8001d76 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	bf0c      	ite	eq
 8001d70:	2301      	moveq	r3, #1
 8001d72:	2300      	movne	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <cJSON_IsString+0x12>
    {
        return false;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e007      	b.n	8001da4 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b10      	cmp	r3, #16
 8001d9c:	bf0c      	ite	eq
 8001d9e:	2301      	moveq	r3, #1
 8001da0:	2300      	movne	r3, #0
 8001da2:	b2db      	uxtb	r3, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	f2ad 5ddc 	subw	sp, sp, #1500	; 0x5dc
 8001db6:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001db8:	f001 fcb6 	bl	8003728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dbc:	f000 fcd6 	bl	800276c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc0:	f000 ffae 	bl	8002d20 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dc4:	f000 ff8e 	bl	8002ce4 <MX_DMA_Init>
  MX_I2C1_Init();
 8001dc8:	f000 fee4 	bl	8002b94 <MX_I2C1_Init>
  MX_ADC2_Init();
 8001dcc:	f000 fd30 	bl	8002830 <MX_ADC2_Init>
  MX_HRTIM1_Init();
 8001dd0:	f000 fd8e 	bl	80028f0 <MX_HRTIM1_Init>
  MX_USART2_UART_Init();
 8001dd4:	f000 ff56 	bl	8002c84 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001dd8:	f000 ff1c 	bl	8002c14 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001ddc:	2100      	movs	r1, #0
 8001dde:	48aa      	ldr	r0, [pc, #680]	; (8002088 <main+0x2d8>)
 8001de0:	f001 ffb6 	bl	8003d50 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8001de4:	2297      	movs	r2, #151	; 0x97
 8001de6:	49a9      	ldr	r1, [pc, #676]	; (800208c <main+0x2dc>)
 8001de8:	48a7      	ldr	r0, [pc, #668]	; (8002088 <main+0x2d8>)
 8001dea:	f001 fed7 	bl	8003b9c <HAL_ADC_Start_DMA>
	// Buffers for I2C
	uint8_t aTxRegPtr[1];
	uint8_t aTxData[2];

	// Set current sensor averaging
	aTxRegPtr[0] = 0x00;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f887 353c 	strb.w	r3, [r7, #1340]	; 0x53c
	aTxData[0] = 0b01000111;
 8001df4:	2347      	movs	r3, #71	; 0x47
 8001df6:	f887 3538 	strb.w	r3, [r7, #1336]	; 0x538
	aTxData[1] = 0b00100111;
 8001dfa:	2327      	movs	r3, #39	; 0x27
 8001dfc:	f887 3539 	strb.w	r3, [r7, #1337]	; 0x539
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
			(uint16_t) aTxRegPtr[0], 1, (uint8_t*) aTxData, 2, HAL_MAX_DELAY);
 8001e00:	f897 353c 	ldrb.w	r3, [r7, #1340]	; 0x53c
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0a:	9302      	str	r3, [sp, #8]
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	2301      	movs	r3, #1
 8001e18:	2180      	movs	r1, #128	; 0x80
 8001e1a:	489d      	ldr	r0, [pc, #628]	; (8002090 <main+0x2e0>)
 8001e1c:	f004 fb60 	bl	80064e0 <HAL_I2C_Mem_Write>

	double initial_duty = 0.30;
 8001e20:	a38f      	add	r3, pc, #572	; (adr r3, 8002060 <main+0x2b0>)
 8001e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e26:	f507 61ae 	add.w	r1, r7, #1392	; 0x570
 8001e2a:	e9c1 2300 	strd	r2, r3, [r1]
	double current_duty = initial_duty;
 8001e2e:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8001e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e36:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8001e3a:	e9c1 2300 	strd	r2, r3, [r1]
	double cal_duty = current_duty;
 8001e3e:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8001e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e46:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 8001e4a:	e9c1 2300 	strd	r2, r3, [r1]
	double max_duty = 0.40;
 8001e4e:	a386      	add	r3, pc, #536	; (adr r3, 8002068 <main+0x2b8>)
 8001e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e54:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8001e58:	e9c1 2300 	strd	r2, r3, [r1]
	double min_duty = 0.20;
 8001e5c:	a384      	add	r3, pc, #528	; (adr r3, 8002070 <main+0x2c0>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 8001e66:	e9c1 2300 	strd	r2, r3, [r1]
	uint16_t signal_period = 604;
 8001e6a:	f44f 7317 	mov.w	r3, #604	; 0x25c
 8001e6e:	f8a7 356e 	strh.w	r3, [r7, #1390]	; 0x56e
	uint16_t compare1_val = initial_duty * signal_period;
 8001e72:	f8b7 356e 	ldrh.w	r3, [r7, #1390]	; 0x56e
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fb64 	bl	8000544 <__aeabi_i2d>
 8001e7c:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	f7fe fbc8 	bl	8000618 <__aeabi_dmul>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7fe fe9a 	bl	8000bc8 <__aeabi_d2uiz>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f8a7 356c 	strh.w	r3, [r7, #1388]	; 0x56c
	uint16_t compare3_val = compare1_val + signal_period / 2;
 8001e9a:	f8b7 356e 	ldrh.w	r3, [r7, #1390]	; 0x56e
 8001e9e:	085b      	lsrs	r3, r3, #1
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	f8b7 356c 	ldrh.w	r3, [r7, #1388]	; 0x56c
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f8a7 356a 	strh.w	r3, [r7, #1386]	; 0x56a

	HAL_HRTIM_WaveformCountStart(&hhrtim1,
 8001eac:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8001eb0:	4878      	ldr	r0, [pc, #480]	; (8002094 <main+0x2e4>)
 8001eb2:	f003 fcec 	bl	800588e <HAL_HRTIM_WaveformCountStart>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_MASTER | HRTIM_TIMERID_TIMER_B);
	HAL_HRTIM_WaveformOutputStart(&hhrtim1,
 8001eb6:	2103      	movs	r1, #3
 8001eb8:	4876      	ldr	r0, [pc, #472]	; (8002094 <main+0x2e4>)
 8001eba:	f003 fc8e 	bl	80057da <HAL_HRTIM_WaveformOutputStart>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2);
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 8001ebe:	4b75      	ldr	r3, [pc, #468]	; (8002094 <main+0x2e4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8b7 256c 	ldrh.w	r2, [r7, #1388]	; 0x56c
 8001ec6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			HRTIM_COMPAREUNIT_1, compare1_val);
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 8001eca:	4b72      	ldr	r3, [pc, #456]	; (8002094 <main+0x2e4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8b7 256a 	ldrh.w	r2, [r7, #1386]	; 0x56a
 8001ed2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			HRTIM_COMPAREUNIT_3, compare3_val);
	HAL_HRTIM_SoftwareUpdate(&hhrtim1,
 8001ed6:	2107      	movs	r1, #7
 8001ed8:	486e      	ldr	r0, [pc, #440]	; (8002094 <main+0x2e4>)
 8001eda:	f003 fd03 	bl	80058e4 <HAL_HRTIM_SoftwareUpdate>

	int16_t tuning;
	uint16_t adc_max;
	uint8_t low_vds_count;

	uint8_t zero_cross = 103;
 8001ede:	2367      	movs	r3, #103	; 0x67
 8001ee0:	f887 3569 	strb.w	r3, [r7, #1385]	; 0x569
	uint8_t low_vds_count_threshold = current_duty * ADC_BUF_LEN - 1;
 8001ee4:	a364      	add	r3, pc, #400	; (adr r3, 8002078 <main+0x2c8>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8001eee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ef2:	f7fe fb91 	bl	8000618 <__aeabi_dmul>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4610      	mov	r0, r2
 8001efc:	4619      	mov	r1, r3
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	4b65      	ldr	r3, [pc, #404]	; (8002098 <main+0x2e8>)
 8001f04:	f7fe f9d0 	bl	80002a8 <__aeabi_dsub>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f7fe fe5a 	bl	8000bc8 <__aeabi_d2uiz>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f887 3584 	strb.w	r3, [r7, #1412]	; 0x584
	uint16_t low_vds_threshold = 200;
 8001f1a:	23c8      	movs	r3, #200	; 0xc8
 8001f1c:	f8a7 3566 	strh.w	r3, [r7, #1382]	; 0x566
	uint16_t vds_checking_threshold = 1800;
 8001f20:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001f24:	f8a7 3564 	strh.w	r3, [r7, #1380]	; 0x564
	int16_t tuning_threshold = 400;
 8001f28:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001f2c:	f8a7 3562 	strh.w	r3, [r7, #1378]	; 0x562


	char json[1024];

	HAL_UART_Receive_IT(&huart2, &rxBuffer[rxIndex], 1); // Enable UART receive interrupt
 8001f30:	4b5a      	ldr	r3, [pc, #360]	; (800209c <main+0x2ec>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	461a      	mov	r2, r3
 8001f38:	4b59      	ldr	r3, [pc, #356]	; (80020a0 <main+0x2f0>)
 8001f3a:	4413      	add	r3, r2
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4858      	ldr	r0, [pc, #352]	; (80020a4 <main+0x2f4>)
 8001f42:	f006 fed5 	bl	8008cf0 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8001f46:	4858      	ldr	r0, [pc, #352]	; (80020a8 <main+0x2f8>)
 8001f48:	f006 fb7e 	bl	8008648 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		adc_max = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8a7 3586 	strh.w	r3, [r7, #1414]	; 0x586
		low_vds_count = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f887 3585 	strb.w	r3, [r7, #1413]	; 0x585
		uint16_t adc_buf2[ADC_BUF_LEN];

		/* Transfer buffer and find maximum value */
		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 8001f5e:	e028      	b.n	8001fb2 <main+0x202>
			adc_buf2[i] = adc_buf[i]; // convert to real value
 8001f60:	4a4a      	ldr	r2, [pc, #296]	; (800208c <main+0x2dc>)
 8001f62:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8001f66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f6a:	b299      	uxth	r1, r3
 8001f6c:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8001f70:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 8001f74:	f8d7 2580 	ldr.w	r2, [r7, #1408]	; 0x580
 8001f78:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			if (adc_buf2[i] > adc_max) {
 8001f7c:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8001f80:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 8001f84:	f8d7 2580 	ldr.w	r2, [r7, #1408]	; 0x580
 8001f88:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f8c:	f8b7 2586 	ldrh.w	r2, [r7, #1414]	; 0x586
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d209      	bcs.n	8001fa8 <main+0x1f8>
				adc_max = adc_buf2[i];	// find maximum value in buffer
 8001f94:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8001f98:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 8001f9c:	f8d7 2580 	ldr.w	r2, [r7, #1408]	; 0x580
 8001fa0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001fa4:	f8a7 3586 	strh.w	r3, [r7, #1414]	; 0x586
		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001fa8:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8001fac:	3301      	adds	r3, #1
 8001fae:	f8c7 3580 	str.w	r3, [r7, #1408]	; 0x580
 8001fb2:	f8d7 3580 	ldr.w	r3, [r7, #1408]	; 0x580
 8001fb6:	2b96      	cmp	r3, #150	; 0x96
 8001fb8:	ddd2      	ble.n	8001f60 <main+0x1b0>
			}
		}

		/* Count how much values are 'zero' */
		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8001fc0:	e01b      	b.n	8001ffa <main+0x24a>
			if (adc_buf2[i] < low_vds_threshold
 8001fc2:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8001fc6:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 8001fca:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8001fce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001fd2:	f8b7 2566 	ldrh.w	r2, [r7, #1382]	; 0x566
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d90a      	bls.n	8001ff0 <main+0x240>
					&& adc_max > vds_checking_threshold) {
 8001fda:	f8b7 2586 	ldrh.w	r2, [r7, #1414]	; 0x586
 8001fde:	f8b7 3564 	ldrh.w	r3, [r7, #1380]	; 0x564
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d904      	bls.n	8001ff0 <main+0x240>
				low_vds_count++;
 8001fe6:	f897 3585 	ldrb.w	r3, [r7, #1413]	; 0x585
 8001fea:	3301      	adds	r3, #1
 8001fec:	f887 3585 	strb.w	r3, [r7, #1413]	; 0x585
		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001ff0:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8001ffa:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8001ffe:	2b96      	cmp	r3, #150	; 0x96
 8002000:	dddf      	ble.n	8001fc2 <main+0x212>
			}
		}

		/* Find hard-switching value */
		tuning = adc_buf2[zero_cross];
 8002002:	f897 2569 	ldrb.w	r2, [r7, #1385]	; 0x569
 8002006:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800200a:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 800200e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002012:	f8a7 3560 	strh.w	r3, [r7, #1376]	; 0x560

		/* Set duty cycle limits based on current limits */
		if (currentState != STATE_CALIBRATING)
 8002016:	4b25      	ldr	r3, [pc, #148]	; (80020ac <main+0x2fc>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d048      	beq.n	80020b0 <main+0x300>
		{
			min_duty = cal_duty - 0.015;
 800201e:	a318      	add	r3, pc, #96	; (adr r3, 8002080 <main+0x2d0>)
 8002020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002024:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 8002028:	e9d1 0100 	ldrd	r0, r1, [r1]
 800202c:	f7fe f93c 	bl	80002a8 <__aeabi_dsub>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 8002038:	e9c1 2300 	strd	r2, r3, [r1]
			max_duty = cal_duty + 0.015;
 800203c:	a310      	add	r3, pc, #64	; (adr r3, 8002080 <main+0x2d0>)
 800203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002042:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 8002046:	e9d1 0100 	ldrd	r0, r1, [r1]
 800204a:	f7fe f92f 	bl	80002ac <__adddf3>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8002056:	e9c1 2300 	strd	r2, r3, [r1]
 800205a:	e037      	b.n	80020cc <main+0x31c>
 800205c:	f3af 8000 	nop.w
 8002060:	33333333 	.word	0x33333333
 8002064:	3fd33333 	.word	0x3fd33333
 8002068:	9999999a 	.word	0x9999999a
 800206c:	3fd99999 	.word	0x3fd99999
 8002070:	9999999a 	.word	0x9999999a
 8002074:	3fc99999 	.word	0x3fc99999
 8002078:	00000000 	.word	0x00000000
 800207c:	4062e000 	.word	0x4062e000
 8002080:	eb851eb8 	.word	0xeb851eb8
 8002084:	3f8eb851 	.word	0x3f8eb851
 8002088:	20000264 	.word	0x20000264
 800208c:	20000500 	.word	0x20000500
 8002090:	200003d4 	.word	0x200003d4
 8002094:	200002f8 	.word	0x200002f8
 8002098:	3ff00000 	.word	0x3ff00000
 800209c:	20000a30 	.word	0x20000a30
 80020a0:	20000630 	.word	0x20000630
 80020a4:	20000474 	.word	0x20000474
 80020a8:	20000428 	.word	0x20000428
 80020ac:	200004fc 	.word	0x200004fc
		} else {
			min_duty = 0.2;
 80020b0:	a3d8      	add	r3, pc, #864	; (adr r3, 8002414 <main+0x664>)
 80020b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b6:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 80020ba:	e9c1 2300 	strd	r2, r3, [r1]
			max_duty = 0.4;
 80020be:	a3d7      	add	r3, pc, #860	; (adr r3, 800241c <main+0x66c>)
 80020c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c4:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 80020c8:	e9c1 2300 	strd	r2, r3, [r1]
		}

		// I2C readings
		uint8_t aRxBuffer[2];

		aTxRegPtr[0] = 0x02;
 80020cc:	2302      	movs	r3, #2
 80020ce:	f887 353c 	strb.w	r3, [r7, #1340]	; 0x53c
		aRxBuffer[0] = 0x00;
 80020d2:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 80020d6:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
		aRxBuffer[1] = 0x00;
 80020de:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 80020e2:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80020e6:	2200      	movs	r2, #0
 80020e8:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
 80020ea:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2301      	movs	r3, #1
 80020f6:	2180      	movs	r1, #128	; 0x80
 80020f8:	48c1      	ldr	r0, [pc, #772]	; (8002400 <main+0x650>)
 80020fa:	f004 f807 	bl	800610c <HAL_I2C_Master_Transmit>
				(uint8_t*) aTxRegPtr, 1, HAL_MAX_DELAY);
		HAL_I2C_Master_Receive(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
 80020fe:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	2302      	movs	r3, #2
 800210a:	2180      	movs	r1, #128	; 0x80
 800210c:	48bc      	ldr	r0, [pc, #752]	; (8002400 <main+0x650>)
 800210e:	f004 f8f1 	bl	80062f4 <HAL_I2C_Master_Receive>
				(uint8_t*) aRxBuffer, 2, HAL_MAX_DELAY);
		double voltage = (aRxBuffer[0] << 8 | aRxBuffer[1]) * 0.00125 * 20.1 / 5.1;
 8002112:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8002116:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	f507 62b5 	add.w	r2, r7, #1448	; 0x5a8
 8002122:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 8002126:	7852      	ldrb	r2, [r2, #1]
 8002128:	4313      	orrs	r3, r2
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fa0a 	bl	8000544 <__aeabi_i2d>
 8002130:	a3a5      	add	r3, pc, #660	; (adr r3, 80023c8 <main+0x618>)
 8002132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002136:	f7fe fa6f 	bl	8000618 <__aeabi_dmul>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	a3a3      	add	r3, pc, #652	; (adr r3, 80023d0 <main+0x620>)
 8002144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002148:	f7fe fa66 	bl	8000618 <__aeabi_dmul>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	a3a0      	add	r3, pc, #640	; (adr r3, 80023d8 <main+0x628>)
 8002156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215a:	f7fe fb87 	bl	800086c <__aeabi_ddiv>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8002166:	e9c1 2300 	strd	r2, r3, [r1]

		aTxRegPtr[0] = 0x00;
 800216a:	2300      	movs	r3, #0
 800216c:	f887 353c 	strb.w	r3, [r7, #1340]	; 0x53c
		aRxBuffer[0] = 0x00;
 8002170:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8002174:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
		aRxBuffer[1] = 0x00;
 800217c:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8002180:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8002184:	2200      	movs	r2, #0
 8002186:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) I2C_ADD_TEMP1 << 1,
 8002188:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 800218c:	f04f 33ff 	mov.w	r3, #4294967295
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	2301      	movs	r3, #1
 8002194:	2190      	movs	r1, #144	; 0x90
 8002196:	489a      	ldr	r0, [pc, #616]	; (8002400 <main+0x650>)
 8002198:	f003 ffb8 	bl	800610c <HAL_I2C_Master_Transmit>
				(uint8_t*) aTxRegPtr, 1, HAL_MAX_DELAY);
		HAL_I2C_Master_Receive(&hi2c1, (uint16_t) I2C_ADD_TEMP1 << 1,
 800219c:	f507 729a 	add.w	r2, r7, #308	; 0x134
 80021a0:	f04f 33ff 	mov.w	r3, #4294967295
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	2302      	movs	r3, #2
 80021a8:	2190      	movs	r1, #144	; 0x90
 80021aa:	4895      	ldr	r0, [pc, #596]	; (8002400 <main+0x650>)
 80021ac:	f004 f8a2 	bl	80062f4 <HAL_I2C_Master_Receive>
				(uint8_t*) aRxBuffer, 2, HAL_MAX_DELAY);
		double temp1 = (aRxBuffer[0] << 4 | aRxBuffer[1] >> 4) * 0.0625;
 80021b0:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 80021b4:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	f507 62b5 	add.w	r2, r7, #1448	; 0x5a8
 80021c0:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 80021c4:	7852      	ldrb	r2, [r2, #1]
 80021c6:	0912      	lsrs	r2, r2, #4
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	4313      	orrs	r3, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe f9b9 	bl	8000544 <__aeabi_i2d>
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	4b8b      	ldr	r3, [pc, #556]	; (8002404 <main+0x654>)
 80021d8:	f7fe fa1e 	bl	8000618 <__aeabi_dmul>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 80021e4:	e9c1 2300 	strd	r2, r3, [r1]

		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) I2C_ADD_TEMP2 << 1U,
 80021e8:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 80021ec:	f04f 33ff 	mov.w	r3, #4294967295
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2301      	movs	r3, #1
 80021f4:	2192      	movs	r1, #146	; 0x92
 80021f6:	4882      	ldr	r0, [pc, #520]	; (8002400 <main+0x650>)
 80021f8:	f003 ff88 	bl	800610c <HAL_I2C_Master_Transmit>
				(uint8_t*) aTxRegPtr, 1, HAL_MAX_DELAY);
		HAL_I2C_Master_Receive(&hi2c1, (uint16_t) I2C_ADD_TEMP2 << 1U,
 80021fc:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8002200:	f04f 33ff 	mov.w	r3, #4294967295
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	2302      	movs	r3, #2
 8002208:	2192      	movs	r1, #146	; 0x92
 800220a:	487d      	ldr	r0, [pc, #500]	; (8002400 <main+0x650>)
 800220c:	f004 f872 	bl	80062f4 <HAL_I2C_Master_Receive>
				(uint8_t*) aRxBuffer, 2, HAL_MAX_DELAY);
		double temp2 = (aRxBuffer[0] << 4 | aRxBuffer[1] >> 4) * 0.0625;
 8002210:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8002214:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	f507 62b5 	add.w	r2, r7, #1448	; 0x5a8
 8002220:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 8002224:	7852      	ldrb	r2, [r2, #1]
 8002226:	0912      	lsrs	r2, r2, #4
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	4313      	orrs	r3, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe f989 	bl	8000544 <__aeabi_i2d>
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	4b73      	ldr	r3, [pc, #460]	; (8002404 <main+0x654>)
 8002238:	f7fe f9ee 	bl	8000618 <__aeabi_dmul>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 8002244:	e9c1 2300 	strd	r2, r3, [r1]

		aTxRegPtr[0] = 0x01;
 8002248:	2301      	movs	r3, #1
 800224a:	f887 353c 	strb.w	r3, [r7, #1340]	; 0x53c
		aRxBuffer[0] = 0x00;
 800224e:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8002252:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
		aRxBuffer[1] = 0x00;
 800225a:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800225e:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8002262:	2200      	movs	r2, #0
 8002264:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
 8002266:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 800226a:	f04f 33ff 	mov.w	r3, #4294967295
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2301      	movs	r3, #1
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	4862      	ldr	r0, [pc, #392]	; (8002400 <main+0x650>)
 8002276:	f003 ff49 	bl	800610c <HAL_I2C_Master_Transmit>
				(uint8_t*) aTxRegPtr, 1, HAL_MAX_DELAY);
		HAL_I2C_Master_Receive(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
 800227a:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800227e:	f04f 33ff 	mov.w	r3, #4294967295
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	2302      	movs	r3, #2
 8002286:	2180      	movs	r1, #128	; 0x80
 8002288:	485d      	ldr	r0, [pc, #372]	; (8002400 <main+0x650>)
 800228a:	f004 f833 	bl	80062f4 <HAL_I2C_Master_Receive>
				(uint8_t*) aRxBuffer, 2, HAL_MAX_DELAY);
		double current = (int16_t) (aRxBuffer[0] << 8 | aRxBuffer[1])
 800228e:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8002292:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	b21a      	sxth	r2, r3
 800229c:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 80022a0:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80022a4:	785b      	ldrb	r3, [r3, #1]
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	4313      	orrs	r3, r2
 80022aa:	b21b      	sxth	r3, r3
				* 0.0000025 / 0.012;
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe f949 	bl	8000544 <__aeabi_i2d>
 80022b2:	a34b      	add	r3, pc, #300	; (adr r3, 80023e0 <main+0x630>)
 80022b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b8:	f7fe f9ae 	bl	8000618 <__aeabi_dmul>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
		double current = (int16_t) (aRxBuffer[0] << 8 | aRxBuffer[1])
 80022c4:	a348      	add	r3, pc, #288	; (adr r3, 80023e8 <main+0x638>)
 80022c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ca:	f7fe facf 	bl	800086c <__aeabi_ddiv>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 80022d6:	e9c1 2300 	strd	r2, r3, [r1]


		// check for High Switching or Diode Conducting
		// avoid transient cycle
		if (adc_max > vds_checking_threshold)
 80022da:	f8b7 2586 	ldrh.w	r2, [r7, #1414]	; 0x586
 80022de:	f8b7 3564 	ldrh.w	r3, [r7, #1380]	; 0x564
 80022e2:	429a      	cmp	r2, r3
 80022e4:	f240 8136 	bls.w	8002554 <main+0x7a4>
		{
			if (tuning > tuning_threshold) {
 80022e8:	f9b7 2560 	ldrsh.w	r2, [r7, #1376]	; 0x560
 80022ec:	f9b7 3562 	ldrsh.w	r3, [r7, #1378]	; 0x562
 80022f0:	429a      	cmp	r2, r3
 80022f2:	f340 8097 	ble.w	8002424 <main+0x674>
				current_duty = current_duty - 0.002;
 80022f6:	a33e      	add	r3, pc, #248	; (adr r3, 80023f0 <main+0x640>)
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8002300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002304:	f7fd ffd0 	bl	80002a8 <__aeabi_dsub>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8002310:	e9c1 2300 	strd	r2, r3, [r1]
				low_vds_count_threshold = current_duty * ADC_BUF_LEN - 1;
 8002314:	a338      	add	r3, pc, #224	; (adr r3, 80023f8 <main+0x648>)
 8002316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231a:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 800231e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002322:	f7fe f979 	bl	8000618 <__aeabi_dmul>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	4b35      	ldr	r3, [pc, #212]	; (8002408 <main+0x658>)
 8002334:	f7fd ffb8 	bl	80002a8 <__aeabi_dsub>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4610      	mov	r0, r2
 800233e:	4619      	mov	r1, r3
 8002340:	f7fe fc42 	bl	8000bc8 <__aeabi_d2uiz>
 8002344:	4603      	mov	r3, r0
 8002346:	f887 3584 	strb.w	r3, [r7, #1412]	; 0x584
				if (current_duty > min_duty) {
 800234a:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002352:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8002356:	e9d1 0100 	ldrd	r0, r1, [r1]
 800235a:	f7fe fbed 	bl	8000b38 <__aeabi_dcmpgt>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d02d      	beq.n	80023c0 <main+0x610>
					compare1_val = current_duty * signal_period;
 8002364:	f8b7 356e 	ldrh.w	r3, [r7, #1390]	; 0x56e
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f8eb 	bl	8000544 <__aeabi_i2d>
 800236e:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8002372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002376:	f7fe f94f 	bl	8000618 <__aeabi_dmul>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4610      	mov	r0, r2
 8002380:	4619      	mov	r1, r3
 8002382:	f7fe fc21 	bl	8000bc8 <__aeabi_d2uiz>
 8002386:	4603      	mov	r3, r0
 8002388:	f8a7 356c 	strh.w	r3, [r7, #1388]	; 0x56c
					compare3_val = compare1_val + signal_period / 2;
 800238c:	f8b7 356e 	ldrh.w	r3, [r7, #1390]	; 0x56e
 8002390:	085b      	lsrs	r3, r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	f8b7 356c 	ldrh.w	r3, [r7, #1388]	; 0x56c
 8002398:	4413      	add	r3, r2
 800239a:	f8a7 356a 	strh.w	r3, [r7, #1386]	; 0x56a
					__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 800239e:	4b1b      	ldr	r3, [pc, #108]	; (800240c <main+0x65c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f8b7 256c 	ldrh.w	r2, [r7, #1388]	; 0x56c
 80023a6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
							HRTIM_COMPAREUNIT_1, compare1_val);
					__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 80023aa:	4b18      	ldr	r3, [pc, #96]	; (800240c <main+0x65c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f8b7 256a 	ldrh.w	r2, [r7, #1386]	; 0x56a
 80023b2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
							HRTIM_COMPAREUNIT_3, compare3_val);
					HAL_HRTIM_SoftwareUpdate(&hhrtim1, HRTIM_TIMERUPDATE_A);
 80023b6:	2102      	movs	r1, #2
 80023b8:	4814      	ldr	r0, [pc, #80]	; (800240c <main+0x65c>)
 80023ba:	f003 fa93 	bl	80058e4 <HAL_HRTIM_SoftwareUpdate>
 80023be:	e0c9      	b.n	8002554 <main+0x7a4>
				} else {
					gAlertType = HS;
 80023c0:	4b13      	ldr	r3, [pc, #76]	; (8002410 <main+0x660>)
 80023c2:	2204      	movs	r2, #4
 80023c4:	701a      	strb	r2, [r3, #0]
 80023c6:	e0c5      	b.n	8002554 <main+0x7a4>
 80023c8:	47ae147b 	.word	0x47ae147b
 80023cc:	3f547ae1 	.word	0x3f547ae1
 80023d0:	9999999a 	.word	0x9999999a
 80023d4:	40341999 	.word	0x40341999
 80023d8:	66666666 	.word	0x66666666
 80023dc:	40146666 	.word	0x40146666
 80023e0:	88e368f1 	.word	0x88e368f1
 80023e4:	3ec4f8b5 	.word	0x3ec4f8b5
 80023e8:	bc6a7efa 	.word	0xbc6a7efa
 80023ec:	3f889374 	.word	0x3f889374
 80023f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80023f4:	3f60624d 	.word	0x3f60624d
 80023f8:	00000000 	.word	0x00000000
 80023fc:	4062e000 	.word	0x4062e000
 8002400:	200003d4 	.word	0x200003d4
 8002404:	3fb00000 	.word	0x3fb00000
 8002408:	3ff00000 	.word	0x3ff00000
 800240c:	200002f8 	.word	0x200002f8
 8002410:	20000a34 	.word	0x20000a34
 8002414:	9999999a 	.word	0x9999999a
 8002418:	3fc99999 	.word	0x3fc99999
 800241c:	9999999a 	.word	0x9999999a
 8002420:	3fd99999 	.word	0x3fd99999
				}
			} else if (low_vds_count > low_vds_count_threshold) {
 8002424:	f897 2585 	ldrb.w	r2, [r7, #1413]	; 0x585
 8002428:	f897 3584 	ldrb.w	r3, [r7, #1412]	; 0x584
 800242c:	429a      	cmp	r2, r3
 800242e:	d968      	bls.n	8002502 <main+0x752>
				current_duty = current_duty + 0.002;
 8002430:	a3cc      	add	r3, pc, #816	; (adr r3, 8002764 <main+0x9b4>)
 8002432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002436:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 800243a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800243e:	f7fd ff35 	bl	80002ac <__adddf3>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 800244a:	e9c1 2300 	strd	r2, r3, [r1]
				low_vds_count_threshold = current_duty * ADC_BUF_LEN - 1;
 800244e:	a3b8      	add	r3, pc, #736	; (adr r3, 8002730 <main+0x980>)
 8002450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002454:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8002458:	e9d1 0100 	ldrd	r0, r1, [r1]
 800245c:	f7fe f8dc 	bl	8000618 <__aeabi_dmul>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	4bb2      	ldr	r3, [pc, #712]	; (8002738 <main+0x988>)
 800246e:	f7fd ff1b 	bl	80002a8 <__aeabi_dsub>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f7fe fba5 	bl	8000bc8 <__aeabi_d2uiz>
 800247e:	4603      	mov	r3, r0
 8002480:	f887 3584 	strb.w	r3, [r7, #1412]	; 0x584
				if (current_duty < max_duty) {
 8002484:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8002488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248c:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8002490:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002494:	f7fe fb32 	bl	8000afc <__aeabi_dcmplt>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d02d      	beq.n	80024fa <main+0x74a>
					compare1_val = current_duty * signal_period;
 800249e:	f8b7 356e 	ldrh.w	r3, [r7, #1390]	; 0x56e
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fe f84e 	bl	8000544 <__aeabi_i2d>
 80024a8:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	f7fe f8b2 	bl	8000618 <__aeabi_dmul>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7fe fb84 	bl	8000bc8 <__aeabi_d2uiz>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f8a7 356c 	strh.w	r3, [r7, #1388]	; 0x56c
					compare3_val = compare1_val + signal_period / 2;
 80024c6:	f8b7 356e 	ldrh.w	r3, [r7, #1390]	; 0x56e
 80024ca:	085b      	lsrs	r3, r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	f8b7 356c 	ldrh.w	r3, [r7, #1388]	; 0x56c
 80024d2:	4413      	add	r3, r2
 80024d4:	f8a7 356a 	strh.w	r3, [r7, #1386]	; 0x56a
					__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 80024d8:	4b98      	ldr	r3, [pc, #608]	; (800273c <main+0x98c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8b7 256c 	ldrh.w	r2, [r7, #1388]	; 0x56c
 80024e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
							HRTIM_COMPAREUNIT_1, compare1_val);
					__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 80024e4:	4b95      	ldr	r3, [pc, #596]	; (800273c <main+0x98c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8b7 256a 	ldrh.w	r2, [r7, #1386]	; 0x56a
 80024ec:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
							HRTIM_COMPAREUNIT_3, compare3_val);
					HAL_HRTIM_SoftwareUpdate(&hhrtim1, HRTIM_TIMERUPDATE_A);
 80024f0:	2102      	movs	r1, #2
 80024f2:	4892      	ldr	r0, [pc, #584]	; (800273c <main+0x98c>)
 80024f4:	f003 f9f6 	bl	80058e4 <HAL_HRTIM_SoftwareUpdate>
 80024f8:	e02c      	b.n	8002554 <main+0x7a4>
				} else {
					gAlertType = DI;
 80024fa:	4b91      	ldr	r3, [pc, #580]	; (8002740 <main+0x990>)
 80024fc:	2205      	movs	r2, #5
 80024fe:	701a      	strb	r2, [r3, #0]
 8002500:	e028      	b.n	8002554 <main+0x7a4>
				}
			} else if ((currentState == STATE_CALIBRATING) && (voltage > 66.5)) {
 8002502:	4b90      	ldr	r3, [pc, #576]	; (8002744 <main+0x994>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d124      	bne.n	8002554 <main+0x7a4>
 800250a:	a387      	add	r3, pc, #540	; (adr r3, 8002728 <main+0x978>)
 800250c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002510:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8002514:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002518:	f7fe fb0e 	bl	8000b38 <__aeabi_dcmpgt>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d018      	beq.n	8002554 <main+0x7a4>

				if (cal_duty != current_duty)
 8002522:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 800252e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002532:	f7fe fad9 	bl	8000ae8 <__aeabi_dcmpeq>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d108      	bne.n	800254e <main+0x79e>
					cal_duty = current_duty;
 800253c:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8002540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002544:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 8002548:	e9c1 2300 	strd	r2, r3, [r1]
 800254c:	e002      	b.n	8002554 <main+0x7a4>
				 else
					handleEvent(EVENT_CALIBRATE_DONE);
 800254e:	2001      	movs	r0, #1
 8002550:	f000 fc3e 	bl	8002dd0 <handleEvent>
			}
		}

		// handle ALERTS
		if ((temp1 > TEMP_LIMIT) || (temp2 > TEMP_LIMIT)) {
 8002554:	4b7c      	ldr	r3, [pc, #496]	; (8002748 <main+0x998>)
 8002556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255a:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 800255e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002562:	f7fe fae9 	bl	8000b38 <__aeabi_dcmpgt>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10b      	bne.n	8002584 <main+0x7d4>
 800256c:	4b76      	ldr	r3, [pc, #472]	; (8002748 <main+0x998>)
 800256e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002572:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 8002576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800257a:	f7fe fadd 	bl	8000b38 <__aeabi_dcmpgt>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <main+0x7dc>
			gAlertType = OT;
 8002584:	4b6e      	ldr	r3, [pc, #440]	; (8002740 <main+0x990>)
 8002586:	2203      	movs	r2, #3
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	e01e      	b.n	80025ca <main+0x81a>
		} else if (voltage > VOLT_LIMIT){
 800258c:	4b6f      	ldr	r3, [pc, #444]	; (800274c <main+0x99c>)
 800258e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002592:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8002596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800259a:	f7fe facd 	bl	8000b38 <__aeabi_dcmpgt>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <main+0x7fc>
			gAlertType = OV;
 80025a4:	4b66      	ldr	r3, [pc, #408]	; (8002740 <main+0x990>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	701a      	strb	r2, [r3, #0]
 80025aa:	e00e      	b.n	80025ca <main+0x81a>
		} else if (current > CURRENT_LIMIT) {
 80025ac:	4b68      	ldr	r3, [pc, #416]	; (8002750 <main+0x9a0>)
 80025ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b2:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 80025b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025ba:	f7fe fabd 	bl	8000b38 <__aeabi_dcmpgt>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <main+0x81a>
			gAlertType = OC;
 80025c4:	4b5e      	ldr	r3, [pc, #376]	; (8002740 <main+0x990>)
 80025c6:	2202      	movs	r2, #2
 80025c8:	701a      	strb	r2, [r3, #0]
		}

		if ((gAlertType != NONE) && (currentState != STATE_IDLE))
 80025ca:	4b5d      	ldr	r3, [pc, #372]	; (8002740 <main+0x990>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d056      	beq.n	8002680 <main+0x8d0>
 80025d2:	4b5c      	ldr	r3, [pc, #368]	; (8002744 <main+0x994>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d052      	beq.n	8002680 <main+0x8d0>
		{
			handleEvent(EVENT_ALERT);
 80025da:	2003      	movs	r0, #3
 80025dc:	f000 fbf8 	bl	8002dd0 <handleEvent>
			// reset waveform
			current_duty = initial_duty;
 80025e0:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e8:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 80025ec:	e9c1 2300 	strd	r2, r3, [r1]
			compare1_val = current_duty * signal_period;
 80025f0:	f8b7 356e 	ldrh.w	r3, [r7, #1390]	; 0x56e
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd ffa5 	bl	8000544 <__aeabi_i2d>
 80025fa:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	f7fe f809 	bl	8000618 <__aeabi_dmul>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f7fe fadb 	bl	8000bc8 <__aeabi_d2uiz>
 8002612:	4603      	mov	r3, r0
 8002614:	f8a7 356c 	strh.w	r3, [r7, #1388]	; 0x56c
			compare3_val = compare1_val + signal_period / 2;
 8002618:	f8b7 356e 	ldrh.w	r3, [r7, #1390]	; 0x56e
 800261c:	085b      	lsrs	r3, r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	f8b7 356c 	ldrh.w	r3, [r7, #1388]	; 0x56c
 8002624:	4413      	add	r3, r2
 8002626:	f8a7 356a 	strh.w	r3, [r7, #1386]	; 0x56a
			low_vds_count_threshold = current_duty * ADC_BUF_LEN - 1;
 800262a:	a341      	add	r3, pc, #260	; (adr r3, 8002730 <main+0x980>)
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8002634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002638:	f7fd ffee 	bl	8000618 <__aeabi_dmul>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	4b3b      	ldr	r3, [pc, #236]	; (8002738 <main+0x988>)
 800264a:	f7fd fe2d 	bl	80002a8 <__aeabi_dsub>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f7fe fab7 	bl	8000bc8 <__aeabi_d2uiz>
 800265a:	4603      	mov	r3, r0
 800265c:	f887 3584 	strb.w	r3, [r7, #1412]	; 0x584
			__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 8002660:	4b36      	ldr	r3, [pc, #216]	; (800273c <main+0x98c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f8b7 256c 	ldrh.w	r2, [r7, #1388]	; 0x56c
 8002668:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					HRTIM_COMPAREUNIT_1, compare1_val);
			__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 800266c:	4b33      	ldr	r3, [pc, #204]	; (800273c <main+0x98c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8b7 256a 	ldrh.w	r2, [r7, #1386]	; 0x56a
 8002674:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					HRTIM_COMPAREUNIT_3, compare3_val);
			HAL_HRTIM_SoftwareUpdate(&hhrtim1, HRTIM_TIMERUPDATE_A);
 8002678:	2102      	movs	r1, #2
 800267a:	4830      	ldr	r0, [pc, #192]	; (800273c <main+0x98c>)
 800267c:	f003 f932 	bl	80058e4 <HAL_HRTIM_SoftwareUpdate>
		}

		if (SEND_TIMER_FLAG && UART_READY && (currentState != STATE_CALIBRATING))
 8002680:	4b34      	ldr	r3, [pc, #208]	; (8002754 <main+0x9a4>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d049      	beq.n	800271e <main+0x96e>
 800268a:	4b33      	ldr	r3, [pc, #204]	; (8002758 <main+0x9a8>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d044      	beq.n	800271e <main+0x96e>
 8002694:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <main+0x994>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d040      	beq.n	800271e <main+0x96e>
		{
			sprintf(json,
 800269c:	f9b7 3560 	ldrsh.w	r3, [r7, #1376]	; 0x560
 80026a0:	f897 2585 	ldrb.w	r2, [r7, #1413]	; 0x585
 80026a4:	f897 1584 	ldrb.w	r1, [r7, #1412]	; 0x584
 80026a8:	4825      	ldr	r0, [pc, #148]	; (8002740 <main+0x990>)
 80026aa:	7800      	ldrb	r0, [r0, #0]
 80026ac:	4604      	mov	r4, r0
 80026ae:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80026b2:	940b      	str	r4, [sp, #44]	; 0x2c
 80026b4:	910a      	str	r1, [sp, #40]	; 0x28
 80026b6:	9209      	str	r2, [sp, #36]	; 0x24
 80026b8:	9308      	str	r3, [sp, #32]
 80026ba:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 80026be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80026c6:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 80026ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80026d2:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 80026d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80026de:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 80026e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e6:	e9cd 2300 	strd	r2, r3, [sp]
 80026ea:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 80026ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f2:	491a      	ldr	r1, [pc, #104]	; (800275c <main+0x9ac>)
 80026f4:	f009 f91e 	bl	800b934 <siprintf>
					"{\"temperature1\":%.2f,\"temperature2\":%.2f,\"duty\":%.3f,\"voltage\":%.2f,\"current\":%.2f,\"tuning\":%i,\"low_vds\":%i,\"low_vds_threshold\":%i,\"alert\":%i}",
					temp1, temp2, current_duty, voltage, current, tuning,
					low_vds_count, low_vds_count_threshold, gAlertType);

			HAL_UART_Transmit_IT(&huart2, (uint8_t*) json, strlen(json));
 80026f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd fdc7 	bl	8000290 <strlen>
 8002702:	4603      	mov	r3, r0
 8002704:	b29a      	uxth	r2, r3
 8002706:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800270a:	4619      	mov	r1, r3
 800270c:	4814      	ldr	r0, [pc, #80]	; (8002760 <main+0x9b0>)
 800270e:	f006 fa91 	bl	8008c34 <HAL_UART_Transmit_IT>
			UART_READY = false;
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <main+0x9a8>)
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
			SEND_TIMER_FLAG = false;
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <main+0x9a4>)
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
		}

		HAL_Delay(10);
 800271e:	200a      	movs	r0, #10
 8002720:	f001 f868 	bl	80037f4 <HAL_Delay>
	while (1) {
 8002724:	e412      	b.n	8001f4c <main+0x19c>
 8002726:	bf00      	nop
 8002728:	00000000 	.word	0x00000000
 800272c:	4050a000 	.word	0x4050a000
 8002730:	00000000 	.word	0x00000000
 8002734:	4062e000 	.word	0x4062e000
 8002738:	3ff00000 	.word	0x3ff00000
 800273c:	200002f8 	.word	0x200002f8
 8002740:	20000a34 	.word	0x20000a34
 8002744:	200004fc 	.word	0x200004fc
 8002748:	20000010 	.word	0x20000010
 800274c:	20000020 	.word	0x20000020
 8002750:	20000018 	.word	0x20000018
 8002754:	20000a33 	.word	0x20000a33
 8002758:	20000028 	.word	0x20000028
 800275c:	0800e3cc 	.word	0x0800e3cc
 8002760:	20000474 	.word	0x20000474
 8002764:	d2f1a9fc 	.word	0xd2f1a9fc
 8002768:	3f60624d 	.word	0x3f60624d

0800276c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b096      	sub	sp, #88	; 0x58
 8002770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002772:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002776:	2228      	movs	r2, #40	; 0x28
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f009 f93d 	bl	800b9fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002780:	f107 031c 	add.w	r3, r7, #28
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002790:	463b      	mov	r3, r7
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	609a      	str	r2, [r3, #8]
 800279a:	60da      	str	r2, [r3, #12]
 800279c:	611a      	str	r2, [r3, #16]
 800279e:	615a      	str	r2, [r3, #20]
 80027a0:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027a2:	2301      	movs	r3, #1
 80027a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80027ac:	2300      	movs	r3, #0
 80027ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027b0:	2301      	movs	r3, #1
 80027b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027b4:	2302      	movs	r3, #2
 80027b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80027be:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80027c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027c8:	4618      	mov	r0, r3
 80027ca:	f004 fb3b 	bl	8006e44 <HAL_RCC_OscConfig>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80027d4:	f000 fcb4 	bl	8003140 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027d8:	230f      	movs	r3, #15
 80027da:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027dc:	2302      	movs	r3, #2
 80027de:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027e0:	2300      	movs	r3, #0
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ea:	2300      	movs	r3, #0
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027ee:	f107 031c 	add.w	r3, r7, #28
 80027f2:	2102      	movs	r1, #2
 80027f4:	4618      	mov	r0, r3
 80027f6:	f005 fb63 	bl	8007ec0 <HAL_RCC_ClockConfig>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002800:	f000 fc9e 	bl	8003140 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_I2C1;
 8002804:	f244 0320 	movw	r3, #16416	; 0x4020
 8002808:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 800280a:	2310      	movs	r3, #16
 800280c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_PLLCLK;
 800280e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002812:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002814:	463b      	mov	r3, r7
 8002816:	4618      	mov	r0, r3
 8002818:	f005 fd88 	bl	800832c <HAL_RCCEx_PeriphCLKConfig>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002822:	f000 fc8d 	bl	8003140 <Error_Handler>
  }
}
 8002826:	bf00      	nop
 8002828:	3758      	adds	r7, #88	; 0x58
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
	...

08002830 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002836:	463b      	mov	r3, r7
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
 8002844:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002846:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <MX_ADC2_Init+0xb8>)
 8002848:	4a28      	ldr	r2, [pc, #160]	; (80028ec <MX_ADC2_Init+0xbc>)
 800284a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800284c:	4b26      	ldr	r3, [pc, #152]	; (80028e8 <MX_ADC2_Init+0xb8>)
 800284e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002852:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002854:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <MX_ADC2_Init+0xb8>)
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800285a:	4b23      	ldr	r3, [pc, #140]	; (80028e8 <MX_ADC2_Init+0xb8>)
 800285c:	2200      	movs	r2, #0
 800285e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002860:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <MX_ADC2_Init+0xb8>)
 8002862:	2200      	movs	r2, #0
 8002864:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002866:	4b20      	ldr	r3, [pc, #128]	; (80028e8 <MX_ADC2_Init+0xb8>)
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800286e:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <MX_ADC2_Init+0xb8>)
 8002870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002874:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONVHRTIM_TRG1;
 8002876:	4b1c      	ldr	r3, [pc, #112]	; (80028e8 <MX_ADC2_Init+0xb8>)
 8002878:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800287c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800287e:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <MX_ADC2_Init+0xb8>)
 8002880:	2200      	movs	r2, #0
 8002882:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002884:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <MX_ADC2_Init+0xb8>)
 8002886:	2201      	movs	r2, #1
 8002888:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800288a:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <MX_ADC2_Init+0xb8>)
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002892:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <MX_ADC2_Init+0xb8>)
 8002894:	2204      	movs	r2, #4
 8002896:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002898:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <MX_ADC2_Init+0xb8>)
 800289a:	2200      	movs	r2, #0
 800289c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <MX_ADC2_Init+0xb8>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80028a4:	4810      	ldr	r0, [pc, #64]	; (80028e8 <MX_ADC2_Init+0xb8>)
 80028a6:	f000 ffe7 	bl	8003878 <HAL_ADC_Init>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 80028b0:	f000 fc46 	bl	8003140 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80028b4:	2305      	movs	r3, #5
 80028b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80028b8:	2301      	movs	r3, #1
 80028ba:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028cc:	463b      	mov	r3, r7
 80028ce:	4619      	mov	r1, r3
 80028d0:	4805      	ldr	r0, [pc, #20]	; (80028e8 <MX_ADC2_Init+0xb8>)
 80028d2:	f001 faaf 	bl	8003e34 <HAL_ADC_ConfigChannel>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 80028dc:	f000 fc30 	bl	8003140 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80028e0:	bf00      	nop
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000264 	.word	0x20000264
 80028ec:	50000100 	.word	0x50000100

080028f0 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b0a6      	sub	sp, #152	; 0x98
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 80028f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8002900:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 800290e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002912:	2254      	movs	r2, #84	; 0x54
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f009 f86f 	bl	800b9fa <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 800291c:	f107 0320 	add.w	r3, r7, #32
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8002928:	463b      	mov	r3, r7
 800292a:	2220      	movs	r2, #32
 800292c:	2100      	movs	r1, #0
 800292e:	4618      	mov	r0, r3
 8002930:	f009 f863 	bl	800b9fa <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8002934:	4b95      	ldr	r3, [pc, #596]	; (8002b8c <MX_HRTIM1_Init+0x29c>)
 8002936:	4a96      	ldr	r2, [pc, #600]	; (8002b90 <MX_HRTIM1_Init+0x2a0>)
 8002938:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 800293a:	4b94      	ldr	r3, [pc, #592]	; (8002b8c <MX_HRTIM1_Init+0x29c>)
 800293c:	2200      	movs	r2, #0
 800293e:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8002940:	4b92      	ldr	r3, [pc, #584]	; (8002b8c <MX_HRTIM1_Init+0x29c>)
 8002942:	2200      	movs	r2, #0
 8002944:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8002946:	4891      	ldr	r0, [pc, #580]	; (8002b8c <MX_HRTIM1_Init+0x29c>)
 8002948:	f002 fb0c 	bl	8004f64 <HAL_HRTIM_Init>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_HRTIM1_Init+0x66>
  {
    Error_Handler();
 8002952:	f000 fbf5 	bl	8003140 <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_14) != HAL_OK)
 8002956:	210c      	movs	r1, #12
 8002958:	488c      	ldr	r0, [pc, #560]	; (8002b8c <MX_HRTIM1_Init+0x29c>)
 800295a:	f002 fbcf 	bl	80050fc <HAL_HRTIM_DLLCalibrationStart>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_HRTIM1_Init+0x78>
  {
    Error_Handler();
 8002964:	f000 fbec 	bl	8003140 <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8002968:	210a      	movs	r1, #10
 800296a:	4888      	ldr	r0, [pc, #544]	; (8002b8c <MX_HRTIM1_Init+0x29c>)
 800296c:	f002 fc1e 	bl	80051ac <HAL_HRTIM_PollForDLLCalibration>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_HRTIM1_Init+0x8a>
  {
    Error_Handler();
 8002976:	f000 fbe3 	bl	8003140 <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_B;
 800297a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800297e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERB_PERIOD;
 8002982:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002986:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 800298a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800298e:	461a      	mov	r2, r3
 8002990:	2101      	movs	r1, #1
 8002992:	487e      	ldr	r0, [pc, #504]	; (8002b8c <MX_HRTIM1_Init+0x29c>)
 8002994:	f002 fc66 	bl	8005264 <HAL_HRTIM_ADCTriggerConfig>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_HRTIM1_Init+0xb2>
  {
    Error_Handler();
 800299e:	f000 fbcf 	bl	8003140 <Error_Handler>
  }
  pTimeBaseCfg.Period = 604;
 80029a2:	f44f 7317 	mov.w	r3, #604	; 0x25c
 80029a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80029b6:	2308      	movs	r3, #8
 80029b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 80029bc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80029c0:	461a      	mov	r2, r3
 80029c2:	2105      	movs	r1, #5
 80029c4:	4871      	ldr	r0, [pc, #452]	; (8002b8c <MX_HRTIM1_Init+0x29c>)
 80029c6:	f002 fc25 	bl	8005214 <HAL_HRTIM_TimeBaseConfig>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_HRTIM1_Init+0xe4>
  {
    Error_Handler();
 80029d0:	f000 fbb6 	bl	8003140 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 80029d8:	2300      	movs	r3, #0
 80029da:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 80029dc:	2300      	movs	r3, #0
 80029de:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 80029e0:	2300      	movs	r3, #0
 80029e2:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 80029e4:	2301      	movs	r3, #1
 80029e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80029e8:	2300      	movs	r3, #0
 80029ea:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80029ec:	2300      	movs	r3, #0
 80029ee:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80029f0:	2300      	movs	r3, #0
 80029f2:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 80029f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80029fc:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80029fe:	2300      	movs	r3, #0
 8002a00:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8002a06:	2300      	movs	r3, #0
 8002a08:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8002a0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a0e:	461a      	mov	r2, r3
 8002a10:	2105      	movs	r1, #5
 8002a12:	485e      	ldr	r0, [pc, #376]	; (8002b8c <MX_HRTIM1_Init+0x29c>)
 8002a14:	f002 fcd0 	bl	80053b8 <HAL_HRTIM_WaveformTimerConfig>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_HRTIM1_Init+0x132>
  {
    Error_Handler();
 8002a1e:	f000 fb8f 	bl	8003140 <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xA0FF;
 8002a22:	f24a 03ff 	movw	r3, #41215	; 0xa0ff
 8002a26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.Mode = HRTIM_MODE_SINGLESHOT_RETRIGGERABLE;
 8002a2a:	2310      	movs	r3, #16
 8002a2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8002a30:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a34:	461a      	mov	r2, r3
 8002a36:	2100      	movs	r1, #0
 8002a38:	4854      	ldr	r0, [pc, #336]	; (8002b8c <MX_HRTIM1_Init+0x29c>)
 8002a3a:	f002 fbeb 	bl	8005214 <HAL_HRTIM_TimeBaseConfig>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_HRTIM1_Init+0x158>
  {
    Error_Handler();
 8002a44:	f000 fb7c 	bl	8003140 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8002a50:	2300      	movs	r3, #0
 8002a52:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8002a60:	2300      	movs	r3, #0
 8002a62:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8002a64:	2300      	movs	r3, #0
 8002a66:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_PER;
 8002a68:	2310      	movs	r3, #16
 8002a6a:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8002a70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a74:	461a      	mov	r2, r3
 8002a76:	2100      	movs	r1, #0
 8002a78:	4844      	ldr	r0, [pc, #272]	; (8002b8c <MX_HRTIM1_Init+0x29c>)
 8002a7a:	f002 fc9d 	bl	80053b8 <HAL_HRTIM_WaveformTimerConfig>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_HRTIM1_Init+0x198>
  {
    Error_Handler();
 8002a84:	f000 fb5c 	bl	8003140 <Error_Handler>
  }
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8002a8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a90:	461a      	mov	r2, r3
 8002a92:	2101      	movs	r1, #1
 8002a94:	483d      	ldr	r0, [pc, #244]	; (8002b8c <MX_HRTIM1_Init+0x29c>)
 8002a96:	f002 fc8f 	bl	80053b8 <HAL_HRTIM_WaveformTimerConfig>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_HRTIM1_Init+0x1b4>
  {
    Error_Handler();
 8002aa0:	f000 fb4e 	bl	8003140 <Error_Handler>
  }
  pCompareCfg.CompareValue = 207;
 8002aa4:	23cf      	movs	r3, #207	; 0xcf
 8002aa6:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002aa8:	f107 0320 	add.w	r3, r7, #32
 8002aac:	2201      	movs	r2, #1
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4836      	ldr	r0, [pc, #216]	; (8002b8c <MX_HRTIM1_Init+0x29c>)
 8002ab2:	f002 fcf3 	bl	800549c <HAL_HRTIM_WaveformCompareConfig>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_HRTIM1_Init+0x1d0>
  {
    Error_Handler();
 8002abc:	f000 fb40 	bl	8003140 <Error_Handler>
  }
  pCompareCfg.CompareValue = 302;
 8002ac0:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8002ac4:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8002aca:	2300      	movs	r3, #0
 8002acc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002ace:	f107 0320 	add.w	r3, r7, #32
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	482d      	ldr	r0, [pc, #180]	; (8002b8c <MX_HRTIM1_Init+0x29c>)
 8002ad8:	f002 fce0 	bl	800549c <HAL_HRTIM_WaveformCompareConfig>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_HRTIM1_Init+0x1f6>
  {
    Error_Handler();
 8002ae2:	f000 fb2d 	bl	8003140 <Error_Handler>
  }
  pCompareCfg.CompareValue = 509;
 8002ae6:	f240 13fd 	movw	r3, #509	; 0x1fd
 8002aea:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002aec:	f107 0320 	add.w	r3, r7, #32
 8002af0:	2204      	movs	r2, #4
 8002af2:	2100      	movs	r1, #0
 8002af4:	4825      	ldr	r0, [pc, #148]	; (8002b8c <MX_HRTIM1_Init+0x29c>)
 8002af6:	f002 fcd1 	bl	800549c <HAL_HRTIM_WaveformCompareConfig>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_HRTIM1_Init+0x214>
  {
    Error_Handler();
 8002b00:	f000 fb1e 	bl	8003140 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8002b04:	2300      	movs	r3, #0
 8002b06:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_MASTERPER;
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8002b0c:	2308      	movs	r3, #8
 8002b0e:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002b14:	2308      	movs	r3, #8
 8002b16:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8002b24:	463b      	mov	r3, r7
 8002b26:	2201      	movs	r2, #1
 8002b28:	2100      	movs	r1, #0
 8002b2a:	4818      	ldr	r0, [pc, #96]	; (8002b8c <MX_HRTIM1_Init+0x29c>)
 8002b2c:	f002 fe24 	bl	8005778 <HAL_HRTIM_WaveformOutputConfig>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <MX_HRTIM1_Init+0x24a>
  {
    Error_Handler();
 8002b36:	f000 fb03 	bl	8003140 <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 8002b3a:	2310      	movs	r3, #16
 8002b3c:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP3;
 8002b3e:	2320      	movs	r3, #32
 8002b40:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8002b42:	463b      	mov	r3, r7
 8002b44:	2202      	movs	r2, #2
 8002b46:	2100      	movs	r1, #0
 8002b48:	4810      	ldr	r0, [pc, #64]	; (8002b8c <MX_HRTIM1_Init+0x29c>)
 8002b4a:	f002 fe15 	bl	8005778 <HAL_HRTIM_WaveformOutputConfig>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <MX_HRTIM1_Init+0x268>
  {
    Error_Handler();
 8002b54:	f000 faf4 	bl	8003140 <Error_Handler>
  }
  pTimeBaseCfg.Period = 1216;
 8002b58:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002b5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8002b60:	2308      	movs	r3, #8
 8002b62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8002b66:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	4807      	ldr	r0, [pc, #28]	; (8002b8c <MX_HRTIM1_Init+0x29c>)
 8002b70:	f002 fb50 	bl	8005214 <HAL_HRTIM_TimeBaseConfig>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_HRTIM1_Init+0x28e>
  {
    Error_Handler();
 8002b7a:	f000 fae1 	bl	8003140 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8002b7e:	4803      	ldr	r0, [pc, #12]	; (8002b8c <MX_HRTIM1_Init+0x29c>)
 8002b80:	f000 fb94 	bl	80032ac <HAL_HRTIM_MspPostInit>

}
 8002b84:	bf00      	nop
 8002b86:	3798      	adds	r7, #152	; 0x98
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	200002f8 	.word	0x200002f8
 8002b90:	40017400 	.word	0x40017400

08002b94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b98:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <MX_I2C1_Init+0x74>)
 8002b9a:	4a1c      	ldr	r2, [pc, #112]	; (8002c0c <MX_I2C1_Init+0x78>)
 8002b9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8002b9e:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <MX_I2C1_Init+0x74>)
 8002ba0:	4a1b      	ldr	r2, [pc, #108]	; (8002c10 <MX_I2C1_Init+0x7c>)
 8002ba2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002ba4:	4b18      	ldr	r3, [pc, #96]	; (8002c08 <MX_I2C1_Init+0x74>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002baa:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <MX_I2C1_Init+0x74>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bb0:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <MX_I2C1_Init+0x74>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002bb6:	4b14      	ldr	r3, [pc, #80]	; (8002c08 <MX_I2C1_Init+0x74>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <MX_I2C1_Init+0x74>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bc2:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <MX_I2C1_Init+0x74>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <MX_I2C1_Init+0x74>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bce:	480e      	ldr	r0, [pc, #56]	; (8002c08 <MX_I2C1_Init+0x74>)
 8002bd0:	f003 fa0c 	bl	8005fec <HAL_I2C_Init>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002bda:	f000 fab1 	bl	8003140 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bde:	2100      	movs	r1, #0
 8002be0:	4809      	ldr	r0, [pc, #36]	; (8002c08 <MX_I2C1_Init+0x74>)
 8002be2:	f004 f877 	bl	8006cd4 <HAL_I2CEx_ConfigAnalogFilter>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002bec:	f000 faa8 	bl	8003140 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4805      	ldr	r0, [pc, #20]	; (8002c08 <MX_I2C1_Init+0x74>)
 8002bf4:	f004 f8b9 	bl	8006d6a <HAL_I2CEx_ConfigDigitalFilter>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002bfe:	f000 fa9f 	bl	8003140 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200003d4 	.word	0x200003d4
 8002c0c:	40005400 	.word	0x40005400
 8002c10:	10707dbc 	.word	0x10707dbc

08002c14 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c1a:	1d3b      	adds	r3, r7, #4
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c24:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <MX_TIM6_Init+0x68>)
 8002c26:	4a16      	ldr	r2, [pc, #88]	; (8002c80 <MX_TIM6_Init+0x6c>)
 8002c28:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1024;
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <MX_TIM6_Init+0x68>)
 8002c2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c30:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c32:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <MX_TIM6_Init+0x68>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 18750;
 8002c38:	4b10      	ldr	r3, [pc, #64]	; (8002c7c <MX_TIM6_Init+0x68>)
 8002c3a:	f644 123e 	movw	r2, #18750	; 0x493e
 8002c3e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c40:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <MX_TIM6_Init+0x68>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c46:	480d      	ldr	r0, [pc, #52]	; (8002c7c <MX_TIM6_Init+0x68>)
 8002c48:	f005 fca6 	bl	8008598 <HAL_TIM_Base_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002c52:	f000 fa75 	bl	8003140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c5e:	1d3b      	adds	r3, r7, #4
 8002c60:	4619      	mov	r1, r3
 8002c62:	4806      	ldr	r0, [pc, #24]	; (8002c7c <MX_TIM6_Init+0x68>)
 8002c64:	f005 ff0c 	bl	8008a80 <HAL_TIMEx_MasterConfigSynchronization>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002c6e:	f000 fa67 	bl	8003140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000428 	.word	0x20000428
 8002c80:	40001000 	.word	0x40001000

08002c84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c88:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <MX_USART2_UART_Init+0x58>)
 8002c8a:	4a15      	ldr	r2, [pc, #84]	; (8002ce0 <MX_USART2_UART_Init+0x5c>)
 8002c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c8e:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <MX_USART2_UART_Init+0x58>)
 8002c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c96:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <MX_USART2_UART_Init+0x58>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <MX_USART2_UART_Init+0x58>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <MX_USART2_UART_Init+0x58>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ca8:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <MX_USART2_UART_Init+0x58>)
 8002caa:	220c      	movs	r2, #12
 8002cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cae:	4b0b      	ldr	r3, [pc, #44]	; (8002cdc <MX_USART2_UART_Init+0x58>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cb4:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <MX_USART2_UART_Init+0x58>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cba:	4b08      	ldr	r3, [pc, #32]	; (8002cdc <MX_USART2_UART_Init+0x58>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <MX_USART2_UART_Init+0x58>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cc6:	4805      	ldr	r0, [pc, #20]	; (8002cdc <MX_USART2_UART_Init+0x58>)
 8002cc8:	f005 ff66 	bl	8008b98 <HAL_UART_Init>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002cd2:	f000 fa35 	bl	8003140 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	20000474 	.word	0x20000474
 8002ce0:	40004400 	.word	0x40004400

08002ce4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cea:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <MX_DMA_Init+0x38>)
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	4a0b      	ldr	r2, [pc, #44]	; (8002d1c <MX_DMA_Init+0x38>)
 8002cf0:	f043 0301 	orr.w	r3, r3, #1
 8002cf4:	6153      	str	r3, [r2, #20]
 8002cf6:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <MX_DMA_Init+0x38>)
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002d02:	2200      	movs	r2, #0
 8002d04:	2100      	movs	r1, #0
 8002d06:	200c      	movs	r0, #12
 8002d08:	f001 fd5d 	bl	80047c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002d0c:	200c      	movs	r0, #12
 8002d0e:	f001 fd76 	bl	80047fe <HAL_NVIC_EnableIRQ>

}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40021000 	.word	0x40021000

08002d20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	; 0x28
 8002d24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d26:	f107 0314 	add.w	r3, r7, #20
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	60da      	str	r2, [r3, #12]
 8002d34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d36:	4b24      	ldr	r3, [pc, #144]	; (8002dc8 <MX_GPIO_Init+0xa8>)
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	4a23      	ldr	r2, [pc, #140]	; (8002dc8 <MX_GPIO_Init+0xa8>)
 8002d3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d40:	6153      	str	r3, [r2, #20]
 8002d42:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <MX_GPIO_Init+0xa8>)
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4e:	4b1e      	ldr	r3, [pc, #120]	; (8002dc8 <MX_GPIO_Init+0xa8>)
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	4a1d      	ldr	r2, [pc, #116]	; (8002dc8 <MX_GPIO_Init+0xa8>)
 8002d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d58:	6153      	str	r3, [r2, #20]
 8002d5a:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <MX_GPIO_Init+0xa8>)
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d66:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <MX_GPIO_Init+0xa8>)
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	4a17      	ldr	r2, [pc, #92]	; (8002dc8 <MX_GPIO_Init+0xa8>)
 8002d6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002d70:	6153      	str	r3, [r2, #20]
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <MX_GPIO_Init+0xa8>)
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d7e:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <MX_GPIO_Init+0xa8>)
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	4a11      	ldr	r2, [pc, #68]	; (8002dc8 <MX_GPIO_Init+0xa8>)
 8002d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d88:	6153      	str	r3, [r2, #20]
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <MX_GPIO_Init+0xa8>)
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d92:	607b      	str	r3, [r7, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_DATA_Pin|EN_FULL_Pin, GPIO_PIN_RESET);
 8002d96:	2200      	movs	r2, #0
 8002d98:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002d9c:	480b      	ldr	r0, [pc, #44]	; (8002dcc <MX_GPIO_Init+0xac>)
 8002d9e:	f002 f8c9 	bl	8004f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_DATA_Pin EN_FULL_Pin */
  GPIO_InitStruct.Pin = LED_DATA_Pin|EN_FULL_Pin;
 8002da2:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da8:	2301      	movs	r3, #1
 8002daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db0:	2300      	movs	r3, #0
 8002db2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db4:	f107 0314 	add.w	r3, r7, #20
 8002db8:	4619      	mov	r1, r3
 8002dba:	4804      	ldr	r0, [pc, #16]	; (8002dcc <MX_GPIO_Init+0xac>)
 8002dbc:	f001 ff48 	bl	8004c50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002dc0:	bf00      	nop
 8002dc2:	3728      	adds	r7, #40	; 0x28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	48000400 	.word	0x48000400

08002dd0 <handleEvent>:

/* USER CODE BEGIN 4 */

void handleEvent(event_t event) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	71fb      	strb	r3, [r7, #7]
	bool transitionFound = false;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < sizeof(transitionTable) / sizeof(transition_t); i++) {
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]
 8002de2:	e029      	b.n	8002e38 <handleEvent+0x68>
		if (transitionTable[i].currentState == currentState
 8002de4:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <handleEvent+0x78>)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8002dec:	4b17      	ldr	r3, [pc, #92]	; (8002e4c <handleEvent+0x7c>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d11e      	bne.n	8002e32 <handleEvent+0x62>
				&& transitionTable[i].event == event) {
 8002df4:	4a14      	ldr	r2, [pc, #80]	; (8002e48 <handleEvent+0x78>)
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	785b      	ldrb	r3, [r3, #1]
 8002dfe:	79fa      	ldrb	r2, [r7, #7]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d116      	bne.n	8002e32 <handleEvent+0x62>
			currentState = transitionTable[i].nextState;
 8002e04:	4a10      	ldr	r2, [pc, #64]	; (8002e48 <handleEvent+0x78>)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	789a      	ldrb	r2, [r3, #2]
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <handleEvent+0x7c>)
 8002e10:	701a      	strb	r2, [r3, #0]
			if (transitionTable[i].action != NULL) {
 8002e12:	4a0d      	ldr	r2, [pc, #52]	; (8002e48 <handleEvent+0x78>)
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4413      	add	r3, r2
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <handleEvent+0x5c>
				transitionTable[i].action(); // Call the action function if it is not NULL
 8002e20:	4a09      	ldr	r2, [pc, #36]	; (8002e48 <handleEvent+0x78>)
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4413      	add	r3, r2
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	4798      	blx	r3
			}

			transitionFound = true;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
			break;
 8002e30:	e005      	b.n	8002e3e <handleEvent+0x6e>
	for (int i = 0; i < sizeof(transitionTable) / sizeof(transition_t); i++) {
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	3301      	adds	r3, #1
 8002e36:	60bb      	str	r3, [r7, #8]
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b07      	cmp	r3, #7
 8002e3c:	d9d2      	bls.n	8002de4 <handleEvent+0x14>
	}

	if (!transitionFound) {
//        printf("Invalid event in the current state\n");
	}
}
 8002e3e:	bf00      	nop
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	2000002c 	.word	0x2000002c
 8002e4c:	200004fc 	.word	0x200004fc

08002e50 <actionTurnOn>:

void actionTurnOn() {
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_FULL_GPIO_Port, EN_FULL_Pin, GPIO_PIN_SET);
 8002e54:	2201      	movs	r2, #1
 8002e56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e5a:	4802      	ldr	r0, [pc, #8]	; (8002e64 <actionTurnOn+0x14>)
 8002e5c:	f002 f86a 	bl	8004f34 <HAL_GPIO_WritePin>
}
 8002e60:	bf00      	nop
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	48000400 	.word	0x48000400

08002e68 <actionTurnOff>:

void actionTurnOff() {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_FULL_GPIO_Port, EN_FULL_Pin, GPIO_PIN_RESET);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e72:	4808      	ldr	r0, [pc, #32]	; (8002e94 <actionTurnOff+0x2c>)
 8002e74:	f002 f85e 	bl	8004f34 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 8002e78:	2032      	movs	r0, #50	; 0x32
 8002e7a:	f000 fcbb 	bl	80037f4 <HAL_Delay>

	HAL_HRTIM_WaveformOutputStop(&hhrtim1,
 8002e7e:	2103      	movs	r1, #3
 8002e80:	4805      	ldr	r0, [pc, #20]	; (8002e98 <actionTurnOff+0x30>)
 8002e82:	f002 fcd7 	bl	8005834 <HAL_HRTIM_WaveformOutputStop>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2);
	HAL_HRTIM_SoftwareUpdate(&hhrtim1,
 8002e86:	2102      	movs	r1, #2
 8002e88:	4803      	ldr	r0, [pc, #12]	; (8002e98 <actionTurnOff+0x30>)
 8002e8a:	f002 fd2b 	bl	80058e4 <HAL_HRTIM_SoftwareUpdate>
	HRTIM_TIMERUPDATE_A);
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	48000400 	.word	0x48000400
 8002e98:	200002f8 	.word	0x200002f8

08002e9c <actionCalibrate>:

void actionCalibrate() {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
	HAL_HRTIM_WaveformOutputStart(&hhrtim1,
 8002ea0:	2103      	movs	r1, #3
 8002ea2:	4809      	ldr	r0, [pc, #36]	; (8002ec8 <actionCalibrate+0x2c>)
 8002ea4:	f002 fc99 	bl	80057da <HAL_HRTIM_WaveformOutputStart>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2);
	HAL_HRTIM_SoftwareUpdate(&hhrtim1,
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	4807      	ldr	r0, [pc, #28]	; (8002ec8 <actionCalibrate+0x2c>)
 8002eac:	f002 fd1a 	bl	80058e4 <HAL_HRTIM_SoftwareUpdate>
	HRTIM_TIMERUPDATE_A);

	HAL_Delay(50);
 8002eb0:	2032      	movs	r0, #50	; 0x32
 8002eb2:	f000 fc9f 	bl	80037f4 <HAL_Delay>

	HAL_GPIO_WritePin(EN_FULL_GPIO_Port, EN_FULL_Pin, GPIO_PIN_SET);
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ebc:	4803      	ldr	r0, [pc, #12]	; (8002ecc <actionCalibrate+0x30>)
 8002ebe:	f002 f839 	bl	8004f34 <HAL_GPIO_WritePin>
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200002f8 	.word	0x200002f8
 8002ecc:	48000400 	.word	0x48000400

08002ed0 <parse_json>:

void parse_json(const char *json) {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b088      	sub	sp, #32
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	cJSON *root = cJSON_Parse(json);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7fe fc27 	bl	800172c <cJSON_Parse>
 8002ede:	61f8      	str	r0, [r7, #28]
	if (root == NULL) {
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 8083 	beq.w	8002fee <parse_json+0x11e>
		return;
	}

	cJSON *overtemp = cJSON_GetObjectItemCaseSensitive(root, "overtemperature");
 8002ee8:	4943      	ldr	r1, [pc, #268]	; (8002ff8 <parse_json+0x128>)
 8002eea:	69f8      	ldr	r0, [r7, #28]
 8002eec:	f7fe ff23 	bl	8001d36 <cJSON_GetObjectItemCaseSensitive>
 8002ef0:	61b8      	str	r0, [r7, #24]
	if (cJSON_IsNumber(overtemp) && (overtemp->valuedouble != 0))
 8002ef2:	69b8      	ldr	r0, [r7, #24]
 8002ef4:	f7fe ff2e 	bl	8001d54 <cJSON_IsNumber>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d011      	beq.n	8002f22 <parse_json+0x52>
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	f7fd fdec 	bl	8000ae8 <__aeabi_dcmpeq>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d105      	bne.n	8002f22 <parse_json+0x52>
		TEMP_LIMIT = overtemp->valuedouble;
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f1c:	4937      	ldr	r1, [pc, #220]	; (8002ffc <parse_json+0x12c>)
 8002f1e:	e9c1 2300 	strd	r2, r3, [r1]

	cJSON *overcurr = cJSON_GetObjectItemCaseSensitive(root, "overcurrent");
 8002f22:	4937      	ldr	r1, [pc, #220]	; (8003000 <parse_json+0x130>)
 8002f24:	69f8      	ldr	r0, [r7, #28]
 8002f26:	f7fe ff06 	bl	8001d36 <cJSON_GetObjectItemCaseSensitive>
 8002f2a:	6178      	str	r0, [r7, #20]
	if (cJSON_IsNumber(overcurr) && (overcurr->valuedouble != 0))
 8002f2c:	6978      	ldr	r0, [r7, #20]
 8002f2e:	f7fe ff11 	bl	8001d54 <cJSON_IsNumber>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d011      	beq.n	8002f5c <parse_json+0x8c>
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	f7fd fdcf 	bl	8000ae8 <__aeabi_dcmpeq>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <parse_json+0x8c>
		CURRENT_LIMIT = overcurr->valuedouble;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f56:	492b      	ldr	r1, [pc, #172]	; (8003004 <parse_json+0x134>)
 8002f58:	e9c1 2300 	strd	r2, r3, [r1]

	cJSON *overvolt = cJSON_GetObjectItemCaseSensitive(root, "overvoltage");
 8002f5c:	492a      	ldr	r1, [pc, #168]	; (8003008 <parse_json+0x138>)
 8002f5e:	69f8      	ldr	r0, [r7, #28]
 8002f60:	f7fe fee9 	bl	8001d36 <cJSON_GetObjectItemCaseSensitive>
 8002f64:	6138      	str	r0, [r7, #16]
	if (cJSON_IsNumber(overvolt) && (overvolt->valuedouble != 0))
 8002f66:	6938      	ldr	r0, [r7, #16]
 8002f68:	f7fe fef4 	bl	8001d54 <cJSON_IsNumber>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d011      	beq.n	8002f96 <parse_json+0xc6>
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	f7fd fdb2 	bl	8000ae8 <__aeabi_dcmpeq>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d105      	bne.n	8002f96 <parse_json+0xc6>
		VOLT_LIMIT = overvolt->valuedouble;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f90:	491e      	ldr	r1, [pc, #120]	; (800300c <parse_json+0x13c>)
 8002f92:	e9c1 2300 	strd	r2, r3, [r1]

	cJSON *mode = cJSON_GetObjectItemCaseSensitive(root, "mode");
 8002f96:	491e      	ldr	r1, [pc, #120]	; (8003010 <parse_json+0x140>)
 8002f98:	69f8      	ldr	r0, [r7, #28]
 8002f9a:	f7fe fecc 	bl	8001d36 <cJSON_GetObjectItemCaseSensitive>
 8002f9e:	60f8      	str	r0, [r7, #12]
	if (cJSON_IsString(mode) && (mode->valuestring != NULL)) {
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f7fe feee 	bl	8001d82 <cJSON_IsString>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d021      	beq.n	8002ff0 <parse_json+0x120>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01d      	beq.n	8002ff0 <parse_json+0x120>
		if (strcmp(mode->valuestring, "off") == 0) {
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	4916      	ldr	r1, [pc, #88]	; (8003014 <parse_json+0x144>)
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd f908 	bl	80001d0 <strcmp>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d103      	bne.n	8002fce <parse_json+0xfe>
			handleEvent(EVENT_OFF_BUTTON);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f7ff ff02 	bl	8002dd0 <handleEvent>
 8002fcc:	e00b      	b.n	8002fe6 <parse_json+0x116>
		}else if (strcmp(mode->valuestring, "deploy") == 0) {
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	4911      	ldr	r1, [pc, #68]	; (8003018 <parse_json+0x148>)
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fd f8fb 	bl	80001d0 <strcmp>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d102      	bne.n	8002fe6 <parse_json+0x116>
			handleEvent(EVENT_DEPLOY_BUTTON);
 8002fe0:	2002      	movs	r0, #2
 8002fe2:	f7ff fef5 	bl	8002dd0 <handleEvent>
		}

	cJSON_Delete(root);
 8002fe6:	69f8      	ldr	r0, [r7, #28]
 8002fe8:	f7fd fec6 	bl	8000d78 <cJSON_Delete>
 8002fec:	e000      	b.n	8002ff0 <parse_json+0x120>
		return;
 8002fee:	bf00      	nop
	}
}
 8002ff0:	3720      	adds	r7, #32
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	0800e45c 	.word	0x0800e45c
 8002ffc:	20000010 	.word	0x20000010
 8003000:	0800e46c 	.word	0x0800e46c
 8003004:	20000018 	.word	0x20000018
 8003008:	0800e478 	.word	0x0800e478
 800300c:	20000020 	.word	0x20000020
 8003010:	0800e484 	.word	0x0800e484
 8003014:	0800e48c 	.word	0x0800e48c
 8003018:	0800e490 	.word	0x0800e490

0800301c <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
	UART_READY = true;
 8003024:	4b07      	ldr	r3, [pc, #28]	; (8003044 <HAL_UART_TxCpltCallback+0x28>)
 8003026:	2201      	movs	r2, #1
 8003028:	701a      	strb	r2, [r3, #0]
	if (gAlertType != NONE)
 800302a:	4b07      	ldr	r3, [pc, #28]	; (8003048 <HAL_UART_TxCpltCallback+0x2c>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <HAL_UART_TxCpltCallback+0x1c>
		gAlertType = NONE;
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_UART_TxCpltCallback+0x2c>)
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	20000028 	.word	0x20000028
 8003048:	20000a34 	.word	0x20000a34

0800304c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	SEND_TIMER_FLAG = true;
 8003054:	4b04      	ldr	r3, [pc, #16]	; (8003068 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8003056:	2201      	movs	r2, #1
 8003058:	701a      	strb	r2, [r3, #0]

}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20000a33 	.word	0x20000a33

0800306c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a2e      	ldr	r2, [pc, #184]	; (8003130 <HAL_UART_RxCpltCallback+0xc4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d155      	bne.n	8003128 <HAL_UART_RxCpltCallback+0xbc>
		if (rxIndex < BUFFER_SIZE) {
 800307c:	4b2d      	ldr	r3, [pc, #180]	; (8003134 <HAL_UART_RxCpltCallback+0xc8>)
 800307e:	881b      	ldrh	r3, [r3, #0]
 8003080:	b29b      	uxth	r3, r3
 8003082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003086:	d244      	bcs.n	8003112 <HAL_UART_RxCpltCallback+0xa6>
			if (rxBuffer[rxIndex] == '{') {
 8003088:	4b2a      	ldr	r3, [pc, #168]	; (8003134 <HAL_UART_RxCpltCallback+0xc8>)
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	b29b      	uxth	r3, r3
 800308e:	461a      	mov	r2, r3
 8003090:	4b29      	ldr	r3, [pc, #164]	; (8003138 <HAL_UART_RxCpltCallback+0xcc>)
 8003092:	5c9b      	ldrb	r3, [r3, r2]
 8003094:	2b7b      	cmp	r3, #123	; 0x7b
 8003096:	d105      	bne.n	80030a4 <HAL_UART_RxCpltCallback+0x38>
				// Start of JSON data
				rxIndex = 0;
 8003098:	4b26      	ldr	r3, [pc, #152]	; (8003134 <HAL_UART_RxCpltCallback+0xc8>)
 800309a:	2200      	movs	r2, #0
 800309c:	801a      	strh	r2, [r3, #0]
				jsonFlag = 1;
 800309e:	4b27      	ldr	r3, [pc, #156]	; (800313c <HAL_UART_RxCpltCallback+0xd0>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	701a      	strb	r2, [r3, #0]
			}

			if (jsonFlag) {
 80030a4:	4b25      	ldr	r3, [pc, #148]	; (800313c <HAL_UART_RxCpltCallback+0xd0>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d031      	beq.n	8003112 <HAL_UART_RxCpltCallback+0xa6>
				// Store received data in the buffer
				rxBuffer[rxIndex] =
						rxBuffer[rxIndex] == '\r' ? '\n' : rxBuffer[rxIndex]; // Replace '\r' with '\n'
 80030ae:	4b21      	ldr	r3, [pc, #132]	; (8003134 <HAL_UART_RxCpltCallback+0xc8>)
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	4b20      	ldr	r3, [pc, #128]	; (8003138 <HAL_UART_RxCpltCallback+0xcc>)
 80030b8:	5c9b      	ldrb	r3, [r3, r2]
				rxBuffer[rxIndex] =
 80030ba:	2b0d      	cmp	r3, #13
 80030bc:	d006      	beq.n	80030cc <HAL_UART_RxCpltCallback+0x60>
						rxBuffer[rxIndex] == '\r' ? '\n' : rxBuffer[rxIndex]; // Replace '\r' with '\n'
 80030be:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <HAL_UART_RxCpltCallback+0xc8>)
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	461a      	mov	r2, r3
				rxBuffer[rxIndex] =
 80030c6:	4b1c      	ldr	r3, [pc, #112]	; (8003138 <HAL_UART_RxCpltCallback+0xcc>)
 80030c8:	5c9b      	ldrb	r3, [r3, r2]
 80030ca:	e000      	b.n	80030ce <HAL_UART_RxCpltCallback+0x62>
 80030cc:	230a      	movs	r3, #10
 80030ce:	4a19      	ldr	r2, [pc, #100]	; (8003134 <HAL_UART_RxCpltCallback+0xc8>)
 80030d0:	8812      	ldrh	r2, [r2, #0]
 80030d2:	b292      	uxth	r2, r2
 80030d4:	4611      	mov	r1, r2
 80030d6:	4a18      	ldr	r2, [pc, #96]	; (8003138 <HAL_UART_RxCpltCallback+0xcc>)
 80030d8:	5453      	strb	r3, [r2, r1]
				rxIndex++;
 80030da:	4b16      	ldr	r3, [pc, #88]	; (8003134 <HAL_UART_RxCpltCallback+0xc8>)
 80030dc:	881b      	ldrh	r3, [r3, #0]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	3301      	adds	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	4b13      	ldr	r3, [pc, #76]	; (8003134 <HAL_UART_RxCpltCallback+0xc8>)
 80030e6:	801a      	strh	r2, [r3, #0]

				if (rxBuffer[rxIndex - 1] == '}') {
 80030e8:	4b12      	ldr	r3, [pc, #72]	; (8003134 <HAL_UART_RxCpltCallback+0xc8>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	3b01      	subs	r3, #1
 80030f0:	4a11      	ldr	r2, [pc, #68]	; (8003138 <HAL_UART_RxCpltCallback+0xcc>)
 80030f2:	5cd3      	ldrb	r3, [r2, r3]
 80030f4:	2b7d      	cmp	r3, #125	; 0x7d
 80030f6:	d10c      	bne.n	8003112 <HAL_UART_RxCpltCallback+0xa6>
					// End of JSON data
					rxBuffer[rxIndex] = '\0'; // Null-terminate the JSON string
 80030f8:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <HAL_UART_RxCpltCallback+0xc8>)
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <HAL_UART_RxCpltCallback+0xcc>)
 8003102:	2100      	movs	r1, #0
 8003104:	5499      	strb	r1, [r3, r2]
					jsonFlag = 0;
 8003106:	4b0d      	ldr	r3, [pc, #52]	; (800313c <HAL_UART_RxCpltCallback+0xd0>)
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
					parse_json((const char*) rxBuffer);
 800310c:	480a      	ldr	r0, [pc, #40]	; (8003138 <HAL_UART_RxCpltCallback+0xcc>)
 800310e:	f7ff fedf 	bl	8002ed0 <parse_json>
				}
			}
		}

		HAL_UART_Receive_IT(&huart2, &rxBuffer[rxIndex], 1); // Enable UART receive interrupt again
 8003112:	4b08      	ldr	r3, [pc, #32]	; (8003134 <HAL_UART_RxCpltCallback+0xc8>)
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	b29b      	uxth	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	4b07      	ldr	r3, [pc, #28]	; (8003138 <HAL_UART_RxCpltCallback+0xcc>)
 800311c:	4413      	add	r3, r2
 800311e:	2201      	movs	r2, #1
 8003120:	4619      	mov	r1, r3
 8003122:	4803      	ldr	r0, [pc, #12]	; (8003130 <HAL_UART_RxCpltCallback+0xc4>)
 8003124:	f005 fde4 	bl	8008cf0 <HAL_UART_Receive_IT>
	}
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	20000474 	.word	0x20000474
 8003134:	20000a30 	.word	0x20000a30
 8003138:	20000630 	.word	0x20000630
 800313c:	20000a32 	.word	0x20000a32

08003140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003144:	b672      	cpsid	i
}
 8003146:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003148:	e7fe      	b.n	8003148 <Error_Handler+0x8>
	...

0800314c <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003152:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <HAL_MspInit+0x44>)
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	4a0e      	ldr	r2, [pc, #56]	; (8003190 <HAL_MspInit+0x44>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6193      	str	r3, [r2, #24]
 800315e:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <HAL_MspInit+0x44>)
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	607b      	str	r3, [r7, #4]
 8003168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_MspInit+0x44>)
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	4a08      	ldr	r2, [pc, #32]	; (8003190 <HAL_MspInit+0x44>)
 8003170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003174:	61d3      	str	r3, [r2, #28]
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_MspInit+0x44>)
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000

08003194 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08a      	sub	sp, #40	; 0x28
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800319c:	f107 0314 	add.w	r3, r7, #20
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a29      	ldr	r2, [pc, #164]	; (8003258 <HAL_ADC_MspInit+0xc4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d14b      	bne.n	800324e <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80031b6:	4b29      	ldr	r3, [pc, #164]	; (800325c <HAL_ADC_MspInit+0xc8>)
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	4a28      	ldr	r2, [pc, #160]	; (800325c <HAL_ADC_MspInit+0xc8>)
 80031bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c0:	6153      	str	r3, [r2, #20]
 80031c2:	4b26      	ldr	r3, [pc, #152]	; (800325c <HAL_ADC_MspInit+0xc8>)
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ce:	4b23      	ldr	r3, [pc, #140]	; (800325c <HAL_ADC_MspInit+0xc8>)
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	4a22      	ldr	r2, [pc, #136]	; (800325c <HAL_ADC_MspInit+0xc8>)
 80031d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80031d8:	6153      	str	r3, [r2, #20]
 80031da:	4b20      	ldr	r3, [pc, #128]	; (800325c <HAL_ADC_MspInit+0xc8>)
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC4     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80031e6:	2310      	movs	r3, #16
 80031e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031ea:	2303      	movs	r3, #3
 80031ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031f2:	f107 0314 	add.w	r3, r7, #20
 80031f6:	4619      	mov	r1, r3
 80031f8:	4819      	ldr	r0, [pc, #100]	; (8003260 <HAL_ADC_MspInit+0xcc>)
 80031fa:	f001 fd29 	bl	8004c50 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 80031fe:	4b19      	ldr	r3, [pc, #100]	; (8003264 <HAL_ADC_MspInit+0xd0>)
 8003200:	4a19      	ldr	r2, [pc, #100]	; (8003268 <HAL_ADC_MspInit+0xd4>)
 8003202:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003204:	4b17      	ldr	r3, [pc, #92]	; (8003264 <HAL_ADC_MspInit+0xd0>)
 8003206:	2200      	movs	r2, #0
 8003208:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800320a:	4b16      	ldr	r3, [pc, #88]	; (8003264 <HAL_ADC_MspInit+0xd0>)
 800320c:	2200      	movs	r2, #0
 800320e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003210:	4b14      	ldr	r3, [pc, #80]	; (8003264 <HAL_ADC_MspInit+0xd0>)
 8003212:	2280      	movs	r2, #128	; 0x80
 8003214:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003216:	4b13      	ldr	r3, [pc, #76]	; (8003264 <HAL_ADC_MspInit+0xd0>)
 8003218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800321c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800321e:	4b11      	ldr	r3, [pc, #68]	; (8003264 <HAL_ADC_MspInit+0xd0>)
 8003220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003224:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003226:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <HAL_ADC_MspInit+0xd0>)
 8003228:	2220      	movs	r2, #32
 800322a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800322c:	4b0d      	ldr	r3, [pc, #52]	; (8003264 <HAL_ADC_MspInit+0xd0>)
 800322e:	2200      	movs	r2, #0
 8003230:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003232:	480c      	ldr	r0, [pc, #48]	; (8003264 <HAL_ADC_MspInit+0xd0>)
 8003234:	f001 fafd 	bl	8004832 <HAL_DMA_Init>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 800323e:	f7ff ff7f 	bl	8003140 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a07      	ldr	r2, [pc, #28]	; (8003264 <HAL_ADC_MspInit+0xd0>)
 8003246:	639a      	str	r2, [r3, #56]	; 0x38
 8003248:	4a06      	ldr	r2, [pc, #24]	; (8003264 <HAL_ADC_MspInit+0xd0>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800324e:	bf00      	nop
 8003250:	3728      	adds	r7, #40	; 0x28
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	50000100 	.word	0x50000100
 800325c:	40021000 	.word	0x40021000
 8003260:	48000800 	.word	0x48000800
 8003264:	200002b4 	.word	0x200002b4
 8003268:	4002001c 	.word	0x4002001c

0800326c <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a0a      	ldr	r2, [pc, #40]	; (80032a4 <HAL_HRTIM_MspInit+0x38>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d10b      	bne.n	8003296 <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <HAL_HRTIM_MspInit+0x3c>)
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	4a09      	ldr	r2, [pc, #36]	; (80032a8 <HAL_HRTIM_MspInit+0x3c>)
 8003284:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003288:	6193      	str	r3, [r2, #24]
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_HRTIM_MspInit+0x3c>)
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40017400 	.word	0x40017400
 80032a8:	40021000 	.word	0x40021000

080032ac <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b4:	f107 030c 	add.w	r3, r7, #12
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a12      	ldr	r2, [pc, #72]	; (8003314 <HAL_HRTIM_MspPostInit+0x68>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d11d      	bne.n	800330a <HAL_HRTIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ce:	4b12      	ldr	r3, [pc, #72]	; (8003318 <HAL_HRTIM_MspPostInit+0x6c>)
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	4a11      	ldr	r2, [pc, #68]	; (8003318 <HAL_HRTIM_MspPostInit+0x6c>)
 80032d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d8:	6153      	str	r3, [r2, #20]
 80032da:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <HAL_HRTIM_MspPostInit+0x6c>)
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e2:	60bb      	str	r3, [r7, #8]
 80032e4:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ec:	2302      	movs	r3, #2
 80032ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032f4:	2303      	movs	r3, #3
 80032f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80032f8:	230d      	movs	r3, #13
 80032fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fc:	f107 030c 	add.w	r3, r7, #12
 8003300:	4619      	mov	r1, r3
 8003302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003306:	f001 fca3 	bl	8004c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 800330a:	bf00      	nop
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40017400 	.word	0x40017400
 8003318:	40021000 	.word	0x40021000

0800331c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	; 0x28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003324:	f107 0314 	add.w	r3, r7, #20
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	60da      	str	r2, [r3, #12]
 8003332:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1b      	ldr	r2, [pc, #108]	; (80033a8 <HAL_I2C_MspInit+0x8c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d12f      	bne.n	800339e <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800333e:	4b1b      	ldr	r3, [pc, #108]	; (80033ac <HAL_I2C_MspInit+0x90>)
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	4a1a      	ldr	r2, [pc, #104]	; (80033ac <HAL_I2C_MspInit+0x90>)
 8003344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003348:	6153      	str	r3, [r2, #20]
 800334a:	4b18      	ldr	r3, [pc, #96]	; (80033ac <HAL_I2C_MspInit+0x90>)
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003352:	613b      	str	r3, [r7, #16]
 8003354:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003356:	23c0      	movs	r3, #192	; 0xc0
 8003358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800335a:	2312      	movs	r3, #18
 800335c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003362:	2303      	movs	r3, #3
 8003364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003366:	2304      	movs	r3, #4
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336a:	f107 0314 	add.w	r3, r7, #20
 800336e:	4619      	mov	r1, r3
 8003370:	480f      	ldr	r0, [pc, #60]	; (80033b0 <HAL_I2C_MspInit+0x94>)
 8003372:	f001 fc6d 	bl	8004c50 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 8003376:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800337a:	f003 fd43 	bl	8006e04 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 800337e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003382:	f003 fd3f 	bl	8006e04 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003386:	4b09      	ldr	r3, [pc, #36]	; (80033ac <HAL_I2C_MspInit+0x90>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	4a08      	ldr	r2, [pc, #32]	; (80033ac <HAL_I2C_MspInit+0x90>)
 800338c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003390:	61d3      	str	r3, [r2, #28]
 8003392:	4b06      	ldr	r3, [pc, #24]	; (80033ac <HAL_I2C_MspInit+0x90>)
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800339e:	bf00      	nop
 80033a0:	3728      	adds	r7, #40	; 0x28
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40005400 	.word	0x40005400
 80033ac:	40021000 	.word	0x40021000
 80033b0:	48000400 	.word	0x48000400

080033b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a0d      	ldr	r2, [pc, #52]	; (80033f8 <HAL_TIM_Base_MspInit+0x44>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d113      	bne.n	80033ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80033c6:	4b0d      	ldr	r3, [pc, #52]	; (80033fc <HAL_TIM_Base_MspInit+0x48>)
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	4a0c      	ldr	r2, [pc, #48]	; (80033fc <HAL_TIM_Base_MspInit+0x48>)
 80033cc:	f043 0310 	orr.w	r3, r3, #16
 80033d0:	61d3      	str	r3, [r2, #28]
 80033d2:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <HAL_TIM_Base_MspInit+0x48>)
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 80033de:	2200      	movs	r2, #0
 80033e0:	2100      	movs	r1, #0
 80033e2:	2036      	movs	r0, #54	; 0x36
 80033e4:	f001 f9ef 	bl	80047c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80033e8:	2036      	movs	r0, #54	; 0x36
 80033ea:	f001 fa08 	bl	80047fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	40001000 	.word	0x40001000
 80033fc:	40021000 	.word	0x40021000

08003400 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08a      	sub	sp, #40	; 0x28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003408:	f107 0314 	add.w	r3, r7, #20
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a1b      	ldr	r2, [pc, #108]	; (800348c <HAL_UART_MspInit+0x8c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d130      	bne.n	8003484 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003422:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <HAL_UART_MspInit+0x90>)
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	4a1a      	ldr	r2, [pc, #104]	; (8003490 <HAL_UART_MspInit+0x90>)
 8003428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800342c:	61d3      	str	r3, [r2, #28]
 800342e:	4b18      	ldr	r3, [pc, #96]	; (8003490 <HAL_UART_MspInit+0x90>)
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800343a:	4b15      	ldr	r3, [pc, #84]	; (8003490 <HAL_UART_MspInit+0x90>)
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	4a14      	ldr	r2, [pc, #80]	; (8003490 <HAL_UART_MspInit+0x90>)
 8003440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003444:	6153      	str	r3, [r2, #20]
 8003446:	4b12      	ldr	r3, [pc, #72]	; (8003490 <HAL_UART_MspInit+0x90>)
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	60fb      	str	r3, [r7, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003452:	230c      	movs	r3, #12
 8003454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003456:	2302      	movs	r3, #2
 8003458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800345e:	2303      	movs	r3, #3
 8003460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003462:	2307      	movs	r3, #7
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003466:	f107 0314 	add.w	r3, r7, #20
 800346a:	4619      	mov	r1, r3
 800346c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003470:	f001 fbee 	bl	8004c50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 11, 0);
 8003474:	2200      	movs	r2, #0
 8003476:	210b      	movs	r1, #11
 8003478:	2026      	movs	r0, #38	; 0x26
 800347a:	f001 f9a4 	bl	80047c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800347e:	2026      	movs	r0, #38	; 0x26
 8003480:	f001 f9bd 	bl	80047fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003484:	bf00      	nop
 8003486:	3728      	adds	r7, #40	; 0x28
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40004400 	.word	0x40004400
 8003490:	40021000 	.word	0x40021000

08003494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003498:	e7fe      	b.n	8003498 <NMI_Handler+0x4>

0800349a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800349a:	b480      	push	{r7}
 800349c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800349e:	e7fe      	b.n	800349e <HardFault_Handler+0x4>

080034a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034a4:	e7fe      	b.n	80034a4 <MemManage_Handler+0x4>

080034a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034a6:	b480      	push	{r7}
 80034a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034aa:	e7fe      	b.n	80034aa <BusFault_Handler+0x4>

080034ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034b0:	e7fe      	b.n	80034b0 <UsageFault_Handler+0x4>

080034b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034b2:	b480      	push	{r7}
 80034b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034b6:	bf00      	nop
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034ce:	b480      	push	{r7}
 80034d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034d2:	bf00      	nop
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034e0:	f000 f968 	bl	80037b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034e4:	bf00      	nop
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80034ec:	4802      	ldr	r0, [pc, #8]	; (80034f8 <DMA1_Channel2_IRQHandler+0x10>)
 80034ee:	f001 fabd 	bl	8004a6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	200002b4 	.word	0x200002b4

080034fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003500:	4802      	ldr	r0, [pc, #8]	; (800350c <USART2_IRQHandler+0x10>)
 8003502:	f005 fc39 	bl	8008d78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003506:	bf00      	nop
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20000474 	.word	0x20000474

08003510 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003514:	4802      	ldr	r0, [pc, #8]	; (8003520 <TIM6_DAC1_IRQHandler+0x10>)
 8003516:	f005 f8f3 	bl	8008700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800351a:	bf00      	nop
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20000428 	.word	0x20000428

08003524 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return 1;
 8003528:	2301      	movs	r3, #1
}
 800352a:	4618      	mov	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <_kill>:

int _kill(int pid, int sig)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800353e:	f008 fad1 	bl	800bae4 <__errno>
 8003542:	4603      	mov	r3, r0
 8003544:	2216      	movs	r2, #22
 8003546:	601a      	str	r2, [r3, #0]
  return -1;
 8003548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <_exit>:

void _exit (int status)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800355c:	f04f 31ff 	mov.w	r1, #4294967295
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff ffe7 	bl	8003534 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003566:	e7fe      	b.n	8003566 <_exit+0x12>

08003568 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]
 8003578:	e00a      	b.n	8003590 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800357a:	f3af 8000 	nop.w
 800357e:	4601      	mov	r1, r0
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	60ba      	str	r2, [r7, #8]
 8003586:	b2ca      	uxtb	r2, r1
 8003588:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	3301      	adds	r3, #1
 800358e:	617b      	str	r3, [r7, #20]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	429a      	cmp	r2, r3
 8003596:	dbf0      	blt.n	800357a <_read+0x12>
  }

  return len;
 8003598:	687b      	ldr	r3, [r7, #4]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b086      	sub	sp, #24
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	e009      	b.n	80035c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	60ba      	str	r2, [r7, #8]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	3301      	adds	r3, #1
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	dbf1      	blt.n	80035b4 <_write+0x12>
  }
  return len;
 80035d0:	687b      	ldr	r3, [r7, #4]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <_close>:

int _close(int file)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003602:	605a      	str	r2, [r3, #4]
  return 0;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <_isatty>:

int _isatty(int file)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800361a:	2301      	movs	r3, #1
}
 800361c:	4618      	mov	r0, r3
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800364c:	4a14      	ldr	r2, [pc, #80]	; (80036a0 <_sbrk+0x5c>)
 800364e:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <_sbrk+0x60>)
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003658:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <_sbrk+0x64>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003660:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <_sbrk+0x64>)
 8003662:	4a12      	ldr	r2, [pc, #72]	; (80036ac <_sbrk+0x68>)
 8003664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <_sbrk+0x64>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	429a      	cmp	r2, r3
 8003672:	d207      	bcs.n	8003684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003674:	f008 fa36 	bl	800bae4 <__errno>
 8003678:	4603      	mov	r3, r0
 800367a:	220c      	movs	r2, #12
 800367c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800367e:	f04f 33ff 	mov.w	r3, #4294967295
 8003682:	e009      	b.n	8003698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003684:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <_sbrk+0x64>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800368a:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <_sbrk+0x64>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	4a05      	ldr	r2, [pc, #20]	; (80036a8 <_sbrk+0x64>)
 8003694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003696:	68fb      	ldr	r3, [r7, #12]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20003000 	.word	0x20003000
 80036a4:	00000400 	.word	0x00000400
 80036a8:	20000a38 	.word	0x20000a38
 80036ac:	20000b90 	.word	0x20000b90

080036b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036b4:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <SystemInit+0x20>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ba:	4a05      	ldr	r2, [pc, #20]	; (80036d0 <SystemInit+0x20>)
 80036bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036c4:	bf00      	nop
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80036d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800370c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80036d8:	f7ff ffea 	bl	80036b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036dc:	480c      	ldr	r0, [pc, #48]	; (8003710 <LoopForever+0x6>)
  ldr r1, =_edata
 80036de:	490d      	ldr	r1, [pc, #52]	; (8003714 <LoopForever+0xa>)
  ldr r2, =_sidata
 80036e0:	4a0d      	ldr	r2, [pc, #52]	; (8003718 <LoopForever+0xe>)
  movs r3, #0
 80036e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036e4:	e002      	b.n	80036ec <LoopCopyDataInit>

080036e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036ea:	3304      	adds	r3, #4

080036ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036f0:	d3f9      	bcc.n	80036e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036f2:	4a0a      	ldr	r2, [pc, #40]	; (800371c <LoopForever+0x12>)
  ldr r4, =_ebss
 80036f4:	4c0a      	ldr	r4, [pc, #40]	; (8003720 <LoopForever+0x16>)
  movs r3, #0
 80036f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036f8:	e001      	b.n	80036fe <LoopFillZerobss>

080036fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036fc:	3204      	adds	r2, #4

080036fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003700:	d3fb      	bcc.n	80036fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003702:	f008 f9f5 	bl	800baf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003706:	f7fe fb53 	bl	8001db0 <main>

0800370a <LoopForever>:

LoopForever:
    b LoopForever
 800370a:	e7fe      	b.n	800370a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800370c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8003710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003714:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 8003718:	0800e904 	.word	0x0800e904
  ldr r2, =_sbss
 800371c:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8003720:	20000b8c 	.word	0x20000b8c

08003724 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003724:	e7fe      	b.n	8003724 <ADC1_2_IRQHandler>
	...

08003728 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800372c:	4b08      	ldr	r3, [pc, #32]	; (8003750 <HAL_Init+0x28>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a07      	ldr	r2, [pc, #28]	; (8003750 <HAL_Init+0x28>)
 8003732:	f043 0310 	orr.w	r3, r3, #16
 8003736:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003738:	2003      	movs	r0, #3
 800373a:	f001 f839 	bl	80047b0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800373e:	200a      	movs	r0, #10
 8003740:	f000 f808 	bl	8003754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003744:	f7ff fd02 	bl	800314c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40022000 	.word	0x40022000

08003754 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800375c:	4b12      	ldr	r3, [pc, #72]	; (80037a8 <HAL_InitTick+0x54>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	4b12      	ldr	r3, [pc, #72]	; (80037ac <HAL_InitTick+0x58>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	4619      	mov	r1, r3
 8003766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800376a:	fbb3 f3f1 	udiv	r3, r3, r1
 800376e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003772:	4618      	mov	r0, r3
 8003774:	f001 f851 	bl	800481a <HAL_SYSTICK_Config>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e00e      	b.n	80037a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b0f      	cmp	r3, #15
 8003786:	d80a      	bhi.n	800379e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003788:	2200      	movs	r2, #0
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	f04f 30ff 	mov.w	r0, #4294967295
 8003790:	f001 f819 	bl	80047c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003794:	4a06      	ldr	r2, [pc, #24]	; (80037b0 <HAL_InitTick+0x5c>)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
 800379c:	e000      	b.n	80037a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	2000006c 	.word	0x2000006c
 80037ac:	20000074 	.word	0x20000074
 80037b0:	20000070 	.word	0x20000070

080037b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <HAL_IncTick+0x20>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	461a      	mov	r2, r3
 80037be:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_IncTick+0x24>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4413      	add	r3, r2
 80037c4:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <HAL_IncTick+0x24>)
 80037c6:	6013      	str	r3, [r2, #0]
}
 80037c8:	bf00      	nop
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000074 	.word	0x20000074
 80037d8:	20000a3c 	.word	0x20000a3c

080037dc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  return uwTick;  
 80037e0:	4b03      	ldr	r3, [pc, #12]	; (80037f0 <HAL_GetTick+0x14>)
 80037e2:	681b      	ldr	r3, [r3, #0]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20000a3c 	.word	0x20000a3c

080037f4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037fc:	f7ff ffee 	bl	80037dc <HAL_GetTick>
 8003800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380c:	d005      	beq.n	800381a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800380e:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <HAL_Delay+0x44>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	461a      	mov	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4413      	add	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800381a:	bf00      	nop
 800381c:	f7ff ffde 	bl	80037dc <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	429a      	cmp	r2, r3
 800382a:	d8f7      	bhi.n	800381c <HAL_Delay+0x28>
  {
  }
}
 800382c:	bf00      	nop
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20000074 	.word	0x20000074

0800383c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b09a      	sub	sp, #104	; 0x68
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e172      	b.n	8003b7e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d176      	bne.n	8003998 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d152      	bne.n	8003958 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff fc61 	bl	8003194 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d13b      	bne.n	8003958 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fe2f 	bl	8004544 <ADC_Disable>
 80038e6:	4603      	mov	r3, r0
 80038e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d12f      	bne.n	8003958 <HAL_ADC_Init+0xe0>
 80038f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d12b      	bne.n	8003958 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003908:	f023 0302 	bic.w	r3, r3, #2
 800390c:	f043 0202 	orr.w	r2, r3, #2
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003922:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	689a      	ldr	r2, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003932:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003934:	4b94      	ldr	r3, [pc, #592]	; (8003b88 <HAL_ADC_Init+0x310>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a94      	ldr	r2, [pc, #592]	; (8003b8c <HAL_ADC_Init+0x314>)
 800393a:	fba2 2303 	umull	r2, r3, r2, r3
 800393e:	0c9a      	lsrs	r2, r3, #18
 8003940:	4613      	mov	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800394a:	e002      	b.n	8003952 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	3b01      	subs	r3, #1
 8003950:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1f9      	bne.n	800394c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d007      	beq.n	8003976 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003974:	d110      	bne.n	8003998 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f023 0312 	bic.w	r3, r3, #18
 800397e:	f043 0210 	orr.w	r2, r3, #16
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800398a:	f043 0201 	orr.w	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f040 80df 	bne.w	8003b64 <HAL_ADC_Init+0x2ec>
 80039a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f040 80da 	bne.w	8003b64 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f040 80d2 	bne.w	8003b64 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80039c8:	f043 0202 	orr.w	r2, r3, #2
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039d0:	4b6f      	ldr	r3, [pc, #444]	; (8003b90 <HAL_ADC_Init+0x318>)
 80039d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039dc:	d102      	bne.n	80039e4 <HAL_ADC_Init+0x16c>
 80039de:	4b6d      	ldr	r3, [pc, #436]	; (8003b94 <HAL_ADC_Init+0x31c>)
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	e002      	b.n	80039ea <HAL_ADC_Init+0x172>
 80039e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80039e8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 0303 	and.w	r3, r3, #3
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d108      	bne.n	8003a0a <HAL_ADC_Init+0x192>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_ADC_Init+0x192>
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_ADC_Init+0x194>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d11c      	bne.n	8003a4a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a10:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d010      	beq.n	8003a38 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d107      	bne.n	8003a32 <HAL_ADC_Init+0x1ba>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_ADC_Init+0x1ba>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <HAL_ADC_Init+0x1bc>
 8003a32:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d108      	bne.n	8003a4a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	431a      	orrs	r2, r3
 8003a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a48:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	7e5b      	ldrb	r3, [r3, #25]
 8003a4e:	035b      	lsls	r3, r3, #13
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a54:	2a01      	cmp	r2, #1
 8003a56:	d002      	beq.n	8003a5e <HAL_ADC_Init+0x1e6>
 8003a58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a5c:	e000      	b.n	8003a60 <HAL_ADC_Init+0x1e8>
 8003a5e:	2200      	movs	r2, #0
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a70:	4313      	orrs	r3, r2
 8003a72:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d11b      	bne.n	8003ab6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	7e5b      	ldrb	r3, [r3, #25]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d109      	bne.n	8003a9a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	045a      	lsls	r2, r3, #17
 8003a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a96:	663b      	str	r3, [r7, #96]	; 0x60
 8003a98:	e00d      	b.n	8003ab6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003aa2:	f043 0220 	orr.w	r2, r3, #32
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aae:	f043 0201 	orr.w	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d007      	beq.n	8003ace <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003aca:	4313      	orrs	r3, r2
 8003acc:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 030c 	and.w	r3, r3, #12
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d114      	bne.n	8003b06 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6812      	ldr	r2, [r2, #0]
 8003ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003aea:	f023 0302 	bic.w	r3, r3, #2
 8003aee:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	7e1b      	ldrb	r3, [r3, #24]
 8003af4:	039a      	lsls	r2, r3, #14
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	4313      	orrs	r3, r2
 8003b00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b02:	4313      	orrs	r3, r2
 8003b04:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	4b22      	ldr	r3, [pc, #136]	; (8003b98 <HAL_ADC_Init+0x320>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003b16:	430b      	orrs	r3, r1
 8003b18:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d10c      	bne.n	8003b3c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	f023 010f 	bic.w	r1, r3, #15
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	1e5a      	subs	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	631a      	str	r2, [r3, #48]	; 0x30
 8003b3a:	e007      	b.n	8003b4c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 020f 	bic.w	r2, r2, #15
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f023 0303 	bic.w	r3, r3, #3
 8003b5a:	f043 0201 	orr.w	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40
 8003b62:	e00a      	b.n	8003b7a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b68:	f023 0312 	bic.w	r3, r3, #18
 8003b6c:	f043 0210 	orr.w	r2, r3, #16
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003b7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3768      	adds	r7, #104	; 0x68
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	2000006c 	.word	0x2000006c
 8003b8c:	431bde83 	.word	0x431bde83
 8003b90:	50000300 	.word	0x50000300
 8003b94:	50000100 	.word	0x50000100
 8003b98:	fff0c007 	.word	0xfff0c007

08003b9c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f040 80b9 	bne.w	8003d2e <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_ADC_Start_DMA+0x2e>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e0b4      	b.n	8003d34 <HAL_ADC_Start_DMA+0x198>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8003bd2:	4b5a      	ldr	r3, [pc, #360]	; (8003d3c <HAL_ADC_Start_DMA+0x1a0>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 031f 	and.w	r3, r3, #31
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f040 80a0 	bne.w	8003d20 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 fc4b 	bl	800447c <ADC_Enable>
 8003be6:	4603      	mov	r3, r0
 8003be8:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f040 8092 	bne.w	8003d16 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003bfa:	f023 0301 	bic.w	r3, r3, #1
 8003bfe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003c06:	4b4d      	ldr	r3, [pc, #308]	; (8003d3c <HAL_ADC_Start_DMA+0x1a0>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 031f 	and.w	r3, r3, #31
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d004      	beq.n	8003c1c <HAL_ADC_Start_DMA+0x80>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c1a:	d115      	bne.n	8003c48 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d027      	beq.n	8003c86 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c3e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003c46:	e01e      	b.n	8003c86 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c5c:	d004      	beq.n	8003c68 <HAL_ADC_Start_DMA+0xcc>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a37      	ldr	r2, [pc, #220]	; (8003d40 <HAL_ADC_Start_DMA+0x1a4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d10e      	bne.n	8003c86 <HAL_ADC_Start_DMA+0xea>
 8003c68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d007      	beq.n	8003c86 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c92:	d106      	bne.n	8003ca2 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c98:	f023 0206 	bic.w	r2, r3, #6
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	645a      	str	r2, [r3, #68]	; 0x44
 8003ca0:	e002      	b.n	8003ca8 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	4a23      	ldr	r2, [pc, #140]	; (8003d44 <HAL_ADC_Start_DMA+0x1a8>)
 8003cb6:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	4a22      	ldr	r2, [pc, #136]	; (8003d48 <HAL_ADC_Start_DMA+0x1ac>)
 8003cbe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc4:	4a21      	ldr	r2, [pc, #132]	; (8003d4c <HAL_ADC_Start_DMA+0x1b0>)
 8003cc6:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	221c      	movs	r2, #28
 8003cce:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0210 	orr.w	r2, r2, #16
 8003cde:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3340      	adds	r3, #64	; 0x40
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f000 fdde 	bl	80048c0 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0204 	orr.w	r2, r2, #4
 8003d12:	609a      	str	r2, [r3, #8]
 8003d14:	e00d      	b.n	8003d32 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d1e:	e008      	b.n	8003d32 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d2c:	e001      	b.n	8003d32 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d2e:	2302      	movs	r3, #2
 8003d30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	50000300 	.word	0x50000300
 8003d40:	50000100 	.word	0x50000100
 8003d44:	080043b1 	.word	0x080043b1
 8003d48:	0800442b 	.word	0x0800442b
 8003d4c:	08004447 	.word	0x08004447

08003d50 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_ADCEx_Calibration_Start+0x1c>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e05f      	b.n	8003e2c <HAL_ADCEx_Calibration_Start+0xdc>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fbe5 	bl	8004544 <ADC_Disable>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d14e      	bne.n	8003e22 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003d98:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d107      	bne.n	8003db0 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003dae:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003dbe:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003dc0:	f7ff fd0c 	bl	80037dc <HAL_GetTick>
 8003dc4:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003dc6:	e01c      	b.n	8003e02 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003dc8:	f7ff fd08 	bl	80037dc <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b0a      	cmp	r3, #10
 8003dd4:	d915      	bls.n	8003e02 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003de0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003de4:	d10d      	bne.n	8003e02 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f023 0312 	bic.w	r3, r3, #18
 8003dee:	f043 0210 	orr.w	r2, r3, #16
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e014      	b.n	8003e2c <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e10:	d0da      	beq.n	8003dc8 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f023 0303 	bic.w	r3, r3, #3
 8003e1a:	f043 0201 	orr.w	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b09b      	sub	sp, #108	; 0x6c
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_ADC_ConfigChannel+0x22>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e2a1      	b.n	800439a <HAL_ADC_ConfigChannel+0x566>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f040 8285 	bne.w	8004378 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d81c      	bhi.n	8003eb0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	4413      	add	r3, r2
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	461a      	mov	r2, r3
 8003e8a:	231f      	movs	r3, #31
 8003e8c:	4093      	lsls	r3, r2
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	4019      	ands	r1, r3
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	4413      	add	r3, r2
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	631a      	str	r2, [r3, #48]	; 0x30
 8003eae:	e063      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	2b09      	cmp	r3, #9
 8003eb6:	d81e      	bhi.n	8003ef6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	4413      	add	r3, r2
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	3b1e      	subs	r3, #30
 8003ecc:	221f      	movs	r2, #31
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	4019      	ands	r1, r3
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	4413      	add	r3, r2
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	3b1e      	subs	r3, #30
 8003ee8:	fa00 f203 	lsl.w	r2, r0, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	635a      	str	r2, [r3, #52]	; 0x34
 8003ef4:	e040      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b0e      	cmp	r3, #14
 8003efc:	d81e      	bhi.n	8003f3c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	4413      	add	r3, r2
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	3b3c      	subs	r3, #60	; 0x3c
 8003f12:	221f      	movs	r2, #31
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	4019      	ands	r1, r3
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	6818      	ldr	r0, [r3, #0]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	4413      	add	r3, r2
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	3b3c      	subs	r3, #60	; 0x3c
 8003f2e:	fa00 f203 	lsl.w	r2, r0, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	639a      	str	r2, [r3, #56]	; 0x38
 8003f3a:	e01d      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	4613      	mov	r3, r2
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	4413      	add	r3, r2
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	3b5a      	subs	r3, #90	; 0x5a
 8003f50:	221f      	movs	r2, #31
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43db      	mvns	r3, r3
 8003f58:	4019      	ands	r1, r3
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	4413      	add	r3, r2
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	3b5a      	subs	r3, #90	; 0x5a
 8003f6c:	fa00 f203 	lsl.w	r2, r0, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f040 80e5 	bne.w	8004152 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b09      	cmp	r3, #9
 8003f8e:	d91c      	bls.n	8003fca <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6999      	ldr	r1, [r3, #24]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3b1e      	subs	r3, #30
 8003fa2:	2207      	movs	r2, #7
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	4019      	ands	r1, r3
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	6898      	ldr	r0, [r3, #8]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	4413      	add	r3, r2
 8003fba:	3b1e      	subs	r3, #30
 8003fbc:	fa00 f203 	lsl.w	r2, r0, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	619a      	str	r2, [r3, #24]
 8003fc8:	e019      	b.n	8003ffe <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6959      	ldr	r1, [r3, #20]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	4413      	add	r3, r2
 8003fda:	2207      	movs	r2, #7
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	4019      	ands	r1, r3
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	6898      	ldr	r0, [r3, #8]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	4613      	mov	r3, r2
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	4413      	add	r3, r2
 8003ff2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	08db      	lsrs	r3, r3, #3
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	3b01      	subs	r3, #1
 800401c:	2b03      	cmp	r3, #3
 800401e:	d84f      	bhi.n	80040c0 <HAL_ADC_ConfigChannel+0x28c>
 8004020:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <HAL_ADC_ConfigChannel+0x1f4>)
 8004022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004026:	bf00      	nop
 8004028:	08004039 	.word	0x08004039
 800402c:	0800405b 	.word	0x0800405b
 8004030:	0800407d 	.word	0x0800407d
 8004034:	0800409f 	.word	0x0800409f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800403e:	4b9c      	ldr	r3, [pc, #624]	; (80042b0 <HAL_ADC_ConfigChannel+0x47c>)
 8004040:	4013      	ands	r3, r2
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	0691      	lsls	r1, r2, #26
 8004048:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800404a:	430a      	orrs	r2, r1
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004056:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004058:	e07b      	b.n	8004152 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004060:	4b93      	ldr	r3, [pc, #588]	; (80042b0 <HAL_ADC_ConfigChannel+0x47c>)
 8004062:	4013      	ands	r3, r2
 8004064:	683a      	ldr	r2, [r7, #0]
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	0691      	lsls	r1, r2, #26
 800406a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800406c:	430a      	orrs	r2, r1
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004078:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800407a:	e06a      	b.n	8004152 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004082:	4b8b      	ldr	r3, [pc, #556]	; (80042b0 <HAL_ADC_ConfigChannel+0x47c>)
 8004084:	4013      	ands	r3, r2
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	6812      	ldr	r2, [r2, #0]
 800408a:	0691      	lsls	r1, r2, #26
 800408c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800408e:	430a      	orrs	r2, r1
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800409a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800409c:	e059      	b.n	8004152 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80040a4:	4b82      	ldr	r3, [pc, #520]	; (80042b0 <HAL_ADC_ConfigChannel+0x47c>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	6812      	ldr	r2, [r2, #0]
 80040ac:	0691      	lsls	r1, r2, #26
 80040ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040b0:	430a      	orrs	r2, r1
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80040bc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80040be:	e048      	b.n	8004152 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	069b      	lsls	r3, r3, #26
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d107      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040e2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	069b      	lsls	r3, r3, #26
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d107      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004106:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800410e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	069b      	lsls	r3, r3, #26
 8004118:	429a      	cmp	r2, r3
 800411a:	d107      	bne.n	800412c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800412a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004132:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	069b      	lsls	r3, r3, #26
 800413c:	429a      	cmp	r2, r3
 800413e:	d107      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800414e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004150:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 0303 	and.w	r3, r3, #3
 800415c:	2b01      	cmp	r3, #1
 800415e:	d108      	bne.n	8004172 <HAL_ADC_ConfigChannel+0x33e>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <HAL_ADC_ConfigChannel+0x33e>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <HAL_ADC_ConfigChannel+0x340>
 8004172:	2300      	movs	r3, #0
 8004174:	2b00      	cmp	r3, #0
 8004176:	f040 810a 	bne.w	800438e <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d00f      	beq.n	80041a2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2201      	movs	r2, #1
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43da      	mvns	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	400a      	ands	r2, r1
 800419c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80041a0:	e049      	b.n	8004236 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2201      	movs	r2, #1
 80041b0:	409a      	lsls	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b09      	cmp	r3, #9
 80041c2:	d91c      	bls.n	80041fe <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6999      	ldr	r1, [r3, #24]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	4613      	mov	r3, r2
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	4413      	add	r3, r2
 80041d4:	3b1b      	subs	r3, #27
 80041d6:	2207      	movs	r2, #7
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	43db      	mvns	r3, r3
 80041de:	4019      	ands	r1, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	6898      	ldr	r0, [r3, #8]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	4613      	mov	r3, r2
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	4413      	add	r3, r2
 80041ee:	3b1b      	subs	r3, #27
 80041f0:	fa00 f203 	lsl.w	r2, r0, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	619a      	str	r2, [r3, #24]
 80041fc:	e01b      	b.n	8004236 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6959      	ldr	r1, [r3, #20]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	4613      	mov	r3, r2
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	4413      	add	r3, r2
 8004210:	2207      	movs	r2, #7
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	4019      	ands	r1, r3
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6898      	ldr	r0, [r3, #8]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	4613      	mov	r3, r2
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	4413      	add	r3, r2
 800422a:	fa00 f203 	lsl.w	r2, r0, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004236:	4b1f      	ldr	r3, [pc, #124]	; (80042b4 <HAL_ADC_ConfigChannel+0x480>)
 8004238:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b10      	cmp	r3, #16
 8004240:	d105      	bne.n	800424e <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800424a:	2b00      	cmp	r3, #0
 800424c:	d015      	beq.n	800427a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004252:	2b11      	cmp	r3, #17
 8004254:	d105      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00b      	beq.n	800427a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004266:	2b12      	cmp	r3, #18
 8004268:	f040 8091 	bne.w	800438e <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800426c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004274:	2b00      	cmp	r3, #0
 8004276:	f040 808a 	bne.w	800438e <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004282:	d102      	bne.n	800428a <HAL_ADC_ConfigChannel+0x456>
 8004284:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <HAL_ADC_ConfigChannel+0x484>)
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	e002      	b.n	8004290 <HAL_ADC_ConfigChannel+0x45c>
 800428a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800428e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	2b01      	cmp	r3, #1
 800429c:	d10e      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x488>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d107      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x488>
 80042ac:	2301      	movs	r3, #1
 80042ae:	e006      	b.n	80042be <HAL_ADC_ConfigChannel+0x48a>
 80042b0:	83fff000 	.word	0x83fff000
 80042b4:	50000300 	.word	0x50000300
 80042b8:	50000100 	.word	0x50000100
 80042bc:	2300      	movs	r3, #0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d150      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80042c2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d010      	beq.n	80042ea <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d107      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0x4b0>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_ADC_ConfigChannel+0x4b0>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <HAL_ADC_ConfigChannel+0x4b2>
 80042e4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d13c      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b10      	cmp	r3, #16
 80042f0:	d11d      	bne.n	800432e <HAL_ADC_ConfigChannel+0x4fa>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042fa:	d118      	bne.n	800432e <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80042fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004306:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004308:	4b27      	ldr	r3, [pc, #156]	; (80043a8 <HAL_ADC_ConfigChannel+0x574>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a27      	ldr	r2, [pc, #156]	; (80043ac <HAL_ADC_ConfigChannel+0x578>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	0c9a      	lsrs	r2, r3, #18
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800431e:	e002      	b.n	8004326 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	3b01      	subs	r3, #1
 8004324:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1f9      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800432c:	e02e      	b.n	800438c <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b11      	cmp	r3, #17
 8004334:	d10b      	bne.n	800434e <HAL_ADC_ConfigChannel+0x51a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800433e:	d106      	bne.n	800434e <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004348:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800434a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800434c:	e01e      	b.n	800438c <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b12      	cmp	r3, #18
 8004354:	d11a      	bne.n	800438c <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800435e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004360:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004362:	e013      	b.n	800438c <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	f043 0220 	orr.w	r2, r3, #32
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004376:	e00a      	b.n	800438e <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	f043 0220 	orr.w	r2, r3, #32
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800438a:	e000      	b.n	800438e <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800438c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004396:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800439a:	4618      	mov	r0, r3
 800439c:	376c      	adds	r7, #108	; 0x6c
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	2000006c 	.word	0x2000006c
 80043ac:	431bde83 	.word	0x431bde83

080043b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d126      	bne.n	8004418 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d115      	bne.n	8004410 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d111      	bne.n	8004410 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d105      	bne.n	8004410 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	f043 0201 	orr.w	r2, r3, #1
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f7ff fa13 	bl	800383c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004416:	e004      	b.n	8004422 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	4798      	blx	r3
}
 8004422:	bf00      	nop
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b084      	sub	sp, #16
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f7ff fa09 	bl	8003850 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800443e:	bf00      	nop
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004464:	f043 0204 	orr.w	r2, r3, #4
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f7ff f9f9 	bl	8003864 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004472:	bf00      	nop
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b01      	cmp	r3, #1
 8004494:	d108      	bne.n	80044a8 <ADC_Enable+0x2c>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <ADC_Enable+0x2c>
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <ADC_Enable+0x2e>
 80044a8:	2300      	movs	r3, #0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d143      	bne.n	8004536 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	4b22      	ldr	r3, [pc, #136]	; (8004540 <ADC_Enable+0xc4>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00d      	beq.n	80044d8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	f043 0210 	orr.w	r2, r3, #16
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044cc:	f043 0201 	orr.w	r2, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e02f      	b.n	8004538 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80044e8:	f7ff f978 	bl	80037dc <HAL_GetTick>
 80044ec:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80044ee:	e01b      	b.n	8004528 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044f0:	f7ff f974 	bl	80037dc <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d914      	bls.n	8004528 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b01      	cmp	r3, #1
 800450a:	d00d      	beq.n	8004528 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	f043 0210 	orr.w	r2, r3, #16
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451c:	f043 0201 	orr.w	r2, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e007      	b.n	8004538 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b01      	cmp	r3, #1
 8004534:	d1dc      	bne.n	80044f0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	8000003f 	.word	0x8000003f

08004544 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 0303 	and.w	r3, r3, #3
 800455a:	2b01      	cmp	r3, #1
 800455c:	d108      	bne.n	8004570 <ADC_Disable+0x2c>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <ADC_Disable+0x2c>
 800456c:	2301      	movs	r3, #1
 800456e:	e000      	b.n	8004572 <ADC_Disable+0x2e>
 8004570:	2300      	movs	r3, #0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d047      	beq.n	8004606 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f003 030d 	and.w	r3, r3, #13
 8004580:	2b01      	cmp	r3, #1
 8004582:	d10f      	bne.n	80045a4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0202 	orr.w	r2, r2, #2
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2203      	movs	r2, #3
 800459a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800459c:	f7ff f91e 	bl	80037dc <HAL_GetTick>
 80045a0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80045a2:	e029      	b.n	80045f8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	f043 0210 	orr.w	r2, r3, #16
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b4:	f043 0201 	orr.w	r2, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e023      	b.n	8004608 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045c0:	f7ff f90c 	bl	80037dc <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d914      	bls.n	80045f8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d10d      	bne.n	80045f8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	f043 0210 	orr.w	r2, r3, #16
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ec:	f043 0201 	orr.w	r2, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e007      	b.n	8004608 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b01      	cmp	r3, #1
 8004604:	d0dc      	beq.n	80045c0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004620:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <__NVIC_SetPriorityGrouping+0x44>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800462c:	4013      	ands	r3, r2
 800462e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800463c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004642:	4a04      	ldr	r2, [pc, #16]	; (8004654 <__NVIC_SetPriorityGrouping+0x44>)
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	60d3      	str	r3, [r2, #12]
}
 8004648:	bf00      	nop
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	e000ed00 	.word	0xe000ed00

08004658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <__NVIC_GetPriorityGrouping+0x18>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	0a1b      	lsrs	r3, r3, #8
 8004662:	f003 0307 	and.w	r3, r3, #7
}
 8004666:	4618      	mov	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	e000ed00 	.word	0xe000ed00

08004674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	4603      	mov	r3, r0
 800467c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800467e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004682:	2b00      	cmp	r3, #0
 8004684:	db0b      	blt.n	800469e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	f003 021f 	and.w	r2, r3, #31
 800468c:	4907      	ldr	r1, [pc, #28]	; (80046ac <__NVIC_EnableIRQ+0x38>)
 800468e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004692:	095b      	lsrs	r3, r3, #5
 8004694:	2001      	movs	r0, #1
 8004696:	fa00 f202 	lsl.w	r2, r0, r2
 800469a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	e000e100 	.word	0xe000e100

080046b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4603      	mov	r3, r0
 80046b8:	6039      	str	r1, [r7, #0]
 80046ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	db0a      	blt.n	80046da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	490c      	ldr	r1, [pc, #48]	; (80046fc <__NVIC_SetPriority+0x4c>)
 80046ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ce:	0112      	lsls	r2, r2, #4
 80046d0:	b2d2      	uxtb	r2, r2
 80046d2:	440b      	add	r3, r1
 80046d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046d8:	e00a      	b.n	80046f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	4908      	ldr	r1, [pc, #32]	; (8004700 <__NVIC_SetPriority+0x50>)
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	3b04      	subs	r3, #4
 80046e8:	0112      	lsls	r2, r2, #4
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	440b      	add	r3, r1
 80046ee:	761a      	strb	r2, [r3, #24]
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	e000e100 	.word	0xe000e100
 8004700:	e000ed00 	.word	0xe000ed00

08004704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004704:	b480      	push	{r7}
 8004706:	b089      	sub	sp, #36	; 0x24
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 0307 	and.w	r3, r3, #7
 8004716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f1c3 0307 	rsb	r3, r3, #7
 800471e:	2b04      	cmp	r3, #4
 8004720:	bf28      	it	cs
 8004722:	2304      	movcs	r3, #4
 8004724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	3304      	adds	r3, #4
 800472a:	2b06      	cmp	r3, #6
 800472c:	d902      	bls.n	8004734 <NVIC_EncodePriority+0x30>
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	3b03      	subs	r3, #3
 8004732:	e000      	b.n	8004736 <NVIC_EncodePriority+0x32>
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004738:	f04f 32ff 	mov.w	r2, #4294967295
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43da      	mvns	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	401a      	ands	r2, r3
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800474c:	f04f 31ff 	mov.w	r1, #4294967295
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	fa01 f303 	lsl.w	r3, r1, r3
 8004756:	43d9      	mvns	r1, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800475c:	4313      	orrs	r3, r2
         );
}
 800475e:	4618      	mov	r0, r3
 8004760:	3724      	adds	r7, #36	; 0x24
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
	...

0800476c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	3b01      	subs	r3, #1
 8004778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800477c:	d301      	bcc.n	8004782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800477e:	2301      	movs	r3, #1
 8004780:	e00f      	b.n	80047a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004782:	4a0a      	ldr	r2, [pc, #40]	; (80047ac <SysTick_Config+0x40>)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3b01      	subs	r3, #1
 8004788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800478a:	210f      	movs	r1, #15
 800478c:	f04f 30ff 	mov.w	r0, #4294967295
 8004790:	f7ff ff8e 	bl	80046b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <SysTick_Config+0x40>)
 8004796:	2200      	movs	r2, #0
 8004798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800479a:	4b04      	ldr	r3, [pc, #16]	; (80047ac <SysTick_Config+0x40>)
 800479c:	2207      	movs	r2, #7
 800479e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	e000e010 	.word	0xe000e010

080047b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7ff ff29 	bl	8004610 <__NVIC_SetPriorityGrouping>
}
 80047be:	bf00      	nop
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	4603      	mov	r3, r0
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
 80047d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047d8:	f7ff ff3e 	bl	8004658 <__NVIC_GetPriorityGrouping>
 80047dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	6978      	ldr	r0, [r7, #20]
 80047e4:	f7ff ff8e 	bl	8004704 <NVIC_EncodePriority>
 80047e8:	4602      	mov	r2, r0
 80047ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ee:	4611      	mov	r1, r2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff ff5d 	bl	80046b0 <__NVIC_SetPriority>
}
 80047f6:	bf00      	nop
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	4603      	mov	r3, r0
 8004806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff ff31 	bl	8004674 <__NVIC_EnableIRQ>
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff ffa2 	bl	800476c <SysTick_Config>
 8004828:	4603      	mov	r3, r0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e037      	b.n	80048b8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800485e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004862:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800486c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004878:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004884:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f9b8 	bl	8004c10 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}  
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
 80048cc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d101      	bne.n	80048e0 <HAL_DMA_Start_IT+0x20>
 80048dc:	2302      	movs	r3, #2
 80048de:	e04a      	b.n	8004976 <HAL_DMA_Start_IT+0xb6>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d13a      	bne.n	8004968 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2202      	movs	r2, #2
 80048f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	68b9      	ldr	r1, [r7, #8]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 f94b 	bl	8004bb2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 020e 	orr.w	r2, r2, #14
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	e00f      	b.n	8004956 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f042 020a 	orr.w	r2, r2, #10
 8004944:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0204 	bic.w	r2, r2, #4
 8004954:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f042 0201 	orr.w	r2, r2, #1
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	e005      	b.n	8004974 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004970:	2302      	movs	r3, #2
 8004972:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004974:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800498c:	2b02      	cmp	r3, #2
 800498e:	d008      	beq.n	80049a2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2204      	movs	r2, #4
 8004994:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e020      	b.n	80049e4 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 020e 	bic.w	r2, r2, #14
 80049b0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0201 	bic.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ca:	2101      	movs	r1, #1
 80049cc:	fa01 f202 	lsl.w	r2, r1, r2
 80049d0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d005      	beq.n	8004a12 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2204      	movs	r2, #4
 8004a0a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
 8004a10:	e027      	b.n	8004a62 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 020e 	bic.w	r2, r2, #14
 8004a20:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0201 	bic.w	r2, r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8004a40:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	4798      	blx	r3
    } 
  }
  return status;
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	2204      	movs	r2, #4
 8004a8a:	409a      	lsls	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d024      	beq.n	8004ade <HAL_DMA_IRQHandler+0x72>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d01f      	beq.n	8004ade <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0320 	and.w	r3, r3, #32
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d107      	bne.n	8004abc <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0204 	bic.w	r2, r2, #4
 8004aba:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac4:	2104      	movs	r1, #4
 8004ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aca:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d06a      	beq.n	8004baa <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004adc:	e065      	b.n	8004baa <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	2202      	movs	r2, #2
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d02c      	beq.n	8004b48 <HAL_DMA_IRQHandler+0xdc>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d027      	beq.n	8004b48 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10b      	bne.n	8004b1e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 020a 	bic.w	r2, r2, #10
 8004b14:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b26:	2102      	movs	r1, #2
 8004b28:	fa01 f202 	lsl.w	r2, r1, r2
 8004b2c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d035      	beq.n	8004baa <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004b46:	e030      	b.n	8004baa <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	2208      	movs	r2, #8
 8004b4e:	409a      	lsls	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d028      	beq.n	8004baa <HAL_DMA_IRQHandler+0x13e>
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d023      	beq.n	8004baa <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 020e 	bic.w	r2, r2, #14
 8004b70:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b80:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d004      	beq.n	8004baa <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	4798      	blx	r3
    }
  }
}  
 8004ba8:	e7ff      	b.n	8004baa <HAL_DMA_IRQHandler+0x13e>
 8004baa:	bf00      	nop
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b085      	sub	sp, #20
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
 8004bbe:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc8:	2101      	movs	r1, #1
 8004bca:	fa01 f202 	lsl.w	r2, r1, r2
 8004bce:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b10      	cmp	r3, #16
 8004bde:	d108      	bne.n	8004bf2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004bf0:	e007      	b.n	8004c02 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	60da      	str	r2, [r3, #12]
}
 8004c02:	bf00      	nop
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
	...

08004c10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <DMA_CalcBaseAndBitshift+0x34>)
 8004c20:	4413      	add	r3, r2
 8004c22:	4a09      	ldr	r2, [pc, #36]	; (8004c48 <DMA_CalcBaseAndBitshift+0x38>)
 8004c24:	fba2 2303 	umull	r2, r3, r2, r3
 8004c28:	091b      	lsrs	r3, r3, #4
 8004c2a:	009a      	lsls	r2, r3, #2
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a06      	ldr	r2, [pc, #24]	; (8004c4c <DMA_CalcBaseAndBitshift+0x3c>)
 8004c34:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	bffdfff8 	.word	0xbffdfff8
 8004c48:	cccccccd 	.word	0xcccccccd
 8004c4c:	40020000 	.word	0x40020000

08004c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c5e:	e14e      	b.n	8004efe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	2101      	movs	r1, #1
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 8140 	beq.w	8004ef8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f003 0303 	and.w	r3, r3, #3
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d005      	beq.n	8004c90 <HAL_GPIO_Init+0x40>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f003 0303 	and.w	r3, r3, #3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d130      	bne.n	8004cf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	2203      	movs	r2, #3
 8004c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	005b      	lsls	r3, r3, #1
 8004cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	091b      	lsrs	r3, r3, #4
 8004cdc:	f003 0201 	and.w	r2, r3, #1
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d017      	beq.n	8004d2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	005b      	lsls	r3, r3, #1
 8004d08:	2203      	movs	r2, #3
 8004d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0e:	43db      	mvns	r3, r3
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4013      	ands	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d123      	bne.n	8004d82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	08da      	lsrs	r2, r3, #3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3208      	adds	r2, #8
 8004d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	220f      	movs	r2, #15
 8004d52:	fa02 f303 	lsl.w	r3, r2, r3
 8004d56:	43db      	mvns	r3, r3
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	08da      	lsrs	r2, r3, #3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3208      	adds	r2, #8
 8004d7c:	6939      	ldr	r1, [r7, #16]
 8004d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	2203      	movs	r2, #3
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	43db      	mvns	r3, r3
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	4013      	ands	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f003 0203 	and.w	r2, r3, #3
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 809a 	beq.w	8004ef8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dc4:	4b55      	ldr	r3, [pc, #340]	; (8004f1c <HAL_GPIO_Init+0x2cc>)
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	4a54      	ldr	r2, [pc, #336]	; (8004f1c <HAL_GPIO_Init+0x2cc>)
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	6193      	str	r3, [r2, #24]
 8004dd0:	4b52      	ldr	r3, [pc, #328]	; (8004f1c <HAL_GPIO_Init+0x2cc>)
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	60bb      	str	r3, [r7, #8]
 8004dda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004ddc:	4a50      	ldr	r2, [pc, #320]	; (8004f20 <HAL_GPIO_Init+0x2d0>)
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	089b      	lsrs	r3, r3, #2
 8004de2:	3302      	adds	r3, #2
 8004de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004de8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	220f      	movs	r2, #15
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e06:	d013      	beq.n	8004e30 <HAL_GPIO_Init+0x1e0>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a46      	ldr	r2, [pc, #280]	; (8004f24 <HAL_GPIO_Init+0x2d4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00d      	beq.n	8004e2c <HAL_GPIO_Init+0x1dc>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a45      	ldr	r2, [pc, #276]	; (8004f28 <HAL_GPIO_Init+0x2d8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d007      	beq.n	8004e28 <HAL_GPIO_Init+0x1d8>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a44      	ldr	r2, [pc, #272]	; (8004f2c <HAL_GPIO_Init+0x2dc>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d101      	bne.n	8004e24 <HAL_GPIO_Init+0x1d4>
 8004e20:	2303      	movs	r3, #3
 8004e22:	e006      	b.n	8004e32 <HAL_GPIO_Init+0x1e2>
 8004e24:	2305      	movs	r3, #5
 8004e26:	e004      	b.n	8004e32 <HAL_GPIO_Init+0x1e2>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e002      	b.n	8004e32 <HAL_GPIO_Init+0x1e2>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e000      	b.n	8004e32 <HAL_GPIO_Init+0x1e2>
 8004e30:	2300      	movs	r3, #0
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	f002 0203 	and.w	r2, r2, #3
 8004e38:	0092      	lsls	r2, r2, #2
 8004e3a:	4093      	lsls	r3, r2
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e42:	4937      	ldr	r1, [pc, #220]	; (8004f20 <HAL_GPIO_Init+0x2d0>)
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	089b      	lsrs	r3, r3, #2
 8004e48:	3302      	adds	r3, #2
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e50:	4b37      	ldr	r3, [pc, #220]	; (8004f30 <HAL_GPIO_Init+0x2e0>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	43db      	mvns	r3, r3
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004e74:	4a2e      	ldr	r2, [pc, #184]	; (8004f30 <HAL_GPIO_Init+0x2e0>)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e7a:	4b2d      	ldr	r3, [pc, #180]	; (8004f30 <HAL_GPIO_Init+0x2e0>)
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	43db      	mvns	r3, r3
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4013      	ands	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004e9e:	4a24      	ldr	r2, [pc, #144]	; (8004f30 <HAL_GPIO_Init+0x2e0>)
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ea4:	4b22      	ldr	r3, [pc, #136]	; (8004f30 <HAL_GPIO_Init+0x2e0>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004ec8:	4a19      	ldr	r2, [pc, #100]	; (8004f30 <HAL_GPIO_Init+0x2e0>)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ece:	4b18      	ldr	r3, [pc, #96]	; (8004f30 <HAL_GPIO_Init+0x2e0>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	43db      	mvns	r3, r3
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	4013      	ands	r3, r2
 8004edc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004ef2:	4a0f      	ldr	r2, [pc, #60]	; (8004f30 <HAL_GPIO_Init+0x2e0>)
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	3301      	adds	r3, #1
 8004efc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	fa22 f303 	lsr.w	r3, r2, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f47f aea9 	bne.w	8004c60 <HAL_GPIO_Init+0x10>
  }
}
 8004f0e:	bf00      	nop
 8004f10:	bf00      	nop
 8004f12:	371c      	adds	r7, #28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	40010000 	.word	0x40010000
 8004f24:	48000400 	.word	0x48000400
 8004f28:	48000800 	.word	0x48000800
 8004f2c:	48000c00 	.word	0x48000c00
 8004f30:	40010400 	.word	0x40010400

08004f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	807b      	strh	r3, [r7, #2]
 8004f40:	4613      	mov	r3, r2
 8004f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f44:	787b      	ldrb	r3, [r7, #1]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f4a:	887a      	ldrh	r2, [r7, #2]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f50:	e002      	b.n	8004f58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f52:	887a      	ldrh	r2, [r7, #2]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e0ba      	b.n	80050ec <HAL_HRTIM_Init+0x188>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2202      	movs	r2, #2
 8004f7a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d02e      	beq.n	8005018 <HAL_HRTIM_Init+0xb4>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a4d      	ldr	r2, [pc, #308]	; (80050f4 <HAL_HRTIM_Init+0x190>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d10b      	bne.n	8004fdc <HAL_HRTIM_Init+0x78>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8004fc4:	4b4c      	ldr	r3, [pc, #304]	; (80050f8 <HAL_HRTIM_Init+0x194>)
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	4a4b      	ldr	r2, [pc, #300]	; (80050f8 <HAL_HRTIM_Init+0x194>)
 8004fca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fce:	6193      	str	r3, [r2, #24]
 8004fd0:	4b49      	ldr	r3, [pc, #292]	; (80050f8 <HAL_HRTIM_Init+0x194>)
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004fea:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005000:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7fe f927 	bl	800326c <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d012      	beq.n	8005050 <HAL_HRTIM_Init+0xec>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005038:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8005060:	2300      	movs	r3, #0
 8005062:	75fb      	strb	r3, [r7, #23]
 8005064:	e03e      	b.n	80050e4 <HAL_HRTIM_Init+0x180>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8005066:	7dfa      	ldrb	r2, [r7, #23]
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	4613      	mov	r3, r2
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	1a9b      	subs	r3, r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	440b      	add	r3, r1
 8005074:	3318      	adds	r3, #24
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 800507a:	7dfa      	ldrb	r2, [r7, #23]
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	4613      	mov	r3, r2
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	1a9b      	subs	r3, r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	440b      	add	r3, r1
 8005088:	331c      	adds	r3, #28
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800508e:	7dfa      	ldrb	r2, [r7, #23]
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	4613      	mov	r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	1a9b      	subs	r3, r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	440b      	add	r3, r1
 800509c:	3320      	adds	r3, #32
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80050a2:	7dfa      	ldrb	r2, [r7, #23]
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	4613      	mov	r3, r2
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	1a9b      	subs	r3, r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	440b      	add	r3, r1
 80050b0:	3324      	adds	r3, #36	; 0x24
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80050b6:	7dfa      	ldrb	r2, [r7, #23]
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	4613      	mov	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	1a9b      	subs	r3, r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	440b      	add	r3, r1
 80050c4:	3328      	adds	r3, #40	; 0x28
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80050ca:	7dfa      	ldrb	r2, [r7, #23]
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	4613      	mov	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	3330      	adds	r3, #48	; 0x30
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80050de:	7dfb      	ldrb	r3, [r7, #23]
 80050e0:	3301      	adds	r3, #1
 80050e2:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80050e4:	7dfb      	ldrb	r3, [r7, #23]
 80050e6:	2b05      	cmp	r3, #5
 80050e8:	d9bd      	bls.n	8005066 <HAL_HRTIM_Init+0x102>
  }

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40017400 	.word	0x40017400
 80050f8:	40021000 	.word	0x40021000

080050fc <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_HRTIM_DLLCalibrationStart+0x18>
 8005110:	2302      	movs	r3, #2
 8005112:	e045      	b.n	80051a0 <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512a:	d114      	bne.n	8005156 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0202 	bic.w	r2, r2, #2
 800513c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0201 	orr.w	r2, r2, #1
 8005150:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8005154:	e01f      	b.n	8005196 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0202 	orr.w	r2, r2, #2
 8005166:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8005172:	f023 010c 	bic.w	r1, r3, #12
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 80051b6:	f7fe fb11 	bl	80037dc <HAL_GetTick>
 80051ba:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80051bc:	e014      	b.n	80051e8 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c4:	d010      	beq.n	80051e8 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 80051c6:	f7fe fb09 	bl	80037dc <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d302      	bcc.n	80051dc <HAL_HRTIM_PollForDLLCalibration+0x30>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d105      	bne.n	80051e8 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2207      	movs	r2, #7
 80051e0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
        return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e011      	b.n	800520c <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80051f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f8:	d1e1      	bne.n	80051be <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d101      	bne.n	8005230 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 800522c:	2302      	movs	r3, #2
 800522e:	e015      	b.n	800525c <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b05      	cmp	r3, #5
 800523c:	d104      	bne.n	8005248 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 fb84 	bl	800594e <HRTIM_MasterBase_Config>
 8005246:	e004      	b.n	8005252 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	68b9      	ldr	r1, [r7, #8]
 800524c:	68f8      	ldr	r0, [r7, #12]
 800524e:	f000 fbad 	bl	80059ac <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             const HRTIM_ADCTriggerCfgTypeDef* pADCTriggerCfg)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b02      	cmp	r3, #2
 800527a:	d101      	bne.n	8005280 <HAL_HRTIM_ADCTriggerConfig+0x1c>
  {
     return HAL_BUSY;
 800527c:	2302      	movs	r3, #2
 800527e:	e095      	b.n	80053ac <HAL_HRTIM_ADCTriggerConfig+0x148>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_HRTIM_ADCTriggerConfig+0x2a>
 800528a:	2302      	movs	r3, #2
 800528c:	e08e      	b.n	80053ac <HAL_HRTIM_ADCTriggerConfig+0x148>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2202      	movs	r2, #2
 800529a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80052a6:	617b      	str	r3, [r7, #20]

  switch (ADCTrigger)
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	2b07      	cmp	r3, #7
 80052ae:	d85e      	bhi.n	800536e <HAL_HRTIM_ADCTriggerConfig+0x10a>
 80052b0:	a201      	add	r2, pc, #4	; (adr r2, 80052b8 <HAL_HRTIM_ADCTriggerConfig+0x54>)
 80052b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b6:	bf00      	nop
 80052b8:	080052d9 	.word	0x080052d9
 80052bc:	080052fd 	.word	0x080052fd
 80052c0:	0800536f 	.word	0x0800536f
 80052c4:	08005323 	.word	0x08005323
 80052c8:	0800536f 	.word	0x0800536f
 80052cc:	0800536f 	.word	0x0800536f
 80052d0:	0800536f 	.word	0x0800536f
 80052d4:	08005349 	.word	0x08005349
  {
  case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80052de:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6852      	ldr	r2, [r2, #4]
 80052f6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
      break;
 80052fa:	e041      	b.n	8005380 <HAL_HRTIM_ADCTriggerConfig+0x11c>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8005302:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	00db      	lsls	r3, r3, #3
 800530a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	4313      	orrs	r3, r2
 8005312:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6852      	ldr	r2, [r2, #4]
 800531c:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
      break;
 8005320:	e02e      	b.n	8005380 <HAL_HRTIM_ADCTriggerConfig+0x11c>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005328:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	019b      	lsls	r3, r3, #6
 8005330:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6852      	ldr	r2, [r2, #4]
 8005342:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
      break;
 8005346:	e01b      	b.n	8005380 <HAL_HRTIM_ADCTriggerConfig+0x11c>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800534e:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	025b      	lsls	r3, r3, #9
 8005356:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6852      	ldr	r2, [r2, #4]
 8005368:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
      break;
 800536c:	e008      	b.n	8005380 <HAL_HRTIM_ADCTriggerConfig+0x11c>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2207      	movs	r2, #7
 8005372:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 800537e:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b07      	cmp	r3, #7
 800538a:	d101      	bne.n	8005390 <HAL_HRTIM_ADCTriggerConfig+0x12c>
  {
     return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e00d      	b.n	80053ac <HAL_HRTIM_ADCTriggerConfig+0x148>
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	371c      	adds	r7, #28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d101      	bne.n	80053d4 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80053d0:	2302      	movs	r3, #2
 80053d2:	e05f      	b.n	8005494 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80053de:	2302      	movs	r3, #2
 80053e0:	e058      	b.n	8005494 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2202      	movs	r2, #2
 80053ee:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b05      	cmp	r3, #5
 80053f6:	d104      	bne.n	8005402 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 fb16 	bl	8005a2c <HRTIM_MasterWaveform_Config>
 8005400:	e004      	b.n	800540c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 fb76 	bl	8005af8 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6819      	ldr	r1, [r3, #0]
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	4613      	mov	r3, r2
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	1a9b      	subs	r3, r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4403      	add	r3, r0
 800541e:	3320      	adds	r3, #32
 8005420:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6859      	ldr	r1, [r3, #4]
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	68ba      	ldr	r2, [r7, #8]
 800542a:	4613      	mov	r3, r2
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	1a9b      	subs	r3, r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4403      	add	r3, r0
 8005434:	3324      	adds	r3, #36	; 0x24
 8005436:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6899      	ldr	r1, [r3, #8]
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	4613      	mov	r3, r2
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4403      	add	r3, r0
 800544a:	3328      	adds	r3, #40	; 0x28
 800544c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68d9      	ldr	r1, [r3, #12]
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	4613      	mov	r3, r2
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	1a9b      	subs	r3, r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4403      	add	r3, r0
 8005460:	332c      	adds	r3, #44	; 0x2c
 8005462:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6919      	ldr	r1, [r3, #16]
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	4613      	mov	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	1a9b      	subs	r3, r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4403      	add	r3, r0
 8005476:	3330      	adds	r3, #48	; 0x30
 8005478:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800547a:	68b9      	ldr	r1, [r7, #8]
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 fd53 	bl	8005f28 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d101      	bne.n	80054ba <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80054b6:	2302      	movs	r3, #2
 80054b8:	e157      	b.n	800576a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d101      	bne.n	80054c8 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80054c4:	2302      	movs	r3, #2
 80054c6:	e150      	b.n	800576a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b05      	cmp	r3, #5
 80054dc:	d140      	bne.n	8005560 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	2b07      	cmp	r3, #7
 80054e4:	d82a      	bhi.n	800553c <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80054e6:	a201      	add	r2, pc, #4	; (adr r2, 80054ec <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80054e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ec:	0800550d 	.word	0x0800550d
 80054f0:	08005519 	.word	0x08005519
 80054f4:	0800553d 	.word	0x0800553d
 80054f8:	08005525 	.word	0x08005525
 80054fc:	0800553d 	.word	0x0800553d
 8005500:	0800553d 	.word	0x0800553d
 8005504:	0800553d 	.word	0x0800553d
 8005508:	08005531 	.word	0x08005531
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	6812      	ldr	r2, [r2, #0]
 8005514:	61da      	str	r2, [r3, #28]
        break;
 8005516:	e01a      	b.n	800554e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	6812      	ldr	r2, [r2, #0]
 8005520:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8005522:	e014      	b.n	800554e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	6812      	ldr	r2, [r2, #0]
 800552c:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 800552e:	e00e      	b.n	800554e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	6812      	ldr	r2, [r2, #0]
 8005538:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800553a:	e008      	b.n	800554e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2207      	movs	r2, #7
 8005540:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 800554c:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b07      	cmp	r3, #7
 8005558:	f040 80fe 	bne.w	8005758 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e104      	b.n	800576a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3b01      	subs	r3, #1
 8005564:	2b07      	cmp	r3, #7
 8005566:	f200 80e3 	bhi.w	8005730 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800556a:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 800556c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005570:	08005591 	.word	0x08005591
 8005574:	080055a5 	.word	0x080055a5
 8005578:	08005731 	.word	0x08005731
 800557c:	08005661 	.word	0x08005661
 8005580:	08005731 	.word	0x08005731
 8005584:	08005731 	.word	0x08005731
 8005588:	08005731 	.word	0x08005731
 800558c:	08005675 	.word	0x08005675
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6819      	ldr	r1, [r3, #0]
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	01db      	lsls	r3, r3, #7
 800559c:	440b      	add	r3, r1
 800559e:	339c      	adds	r3, #156	; 0x9c
 80055a0:	601a      	str	r2, [r3, #0]
        break;
 80055a2:	e0d1      	b.n	8005748 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6819      	ldr	r1, [r3, #0]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	01db      	lsls	r3, r3, #7
 80055b0:	440b      	add	r3, r1
 80055b2:	33a4      	adds	r3, #164	; 0xa4
 80055b4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d03f      	beq.n	800563e <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	3301      	adds	r3, #1
 80055c6:	01db      	lsls	r3, r3, #7
 80055c8:	4413      	add	r3, r2
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	6811      	ldr	r1, [r2, #0]
 80055d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	3301      	adds	r3, #1
 80055d8:	01db      	lsls	r3, r3, #7
 80055da:	440b      	add	r3, r1
 80055dc:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	3301      	adds	r3, #1
 80055e6:	01db      	lsls	r3, r3, #7
 80055e8:	4413      	add	r3, r2
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	68f9      	ldr	r1, [r7, #12]
 80055f2:	6809      	ldr	r1, [r1, #0]
 80055f4:	431a      	orrs	r2, r3
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	3301      	adds	r3, #1
 80055fa:	01db      	lsls	r3, r3, #7
 80055fc:	440b      	add	r3, r1
 80055fe:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005608:	d109      	bne.n	800561e <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6819      	ldr	r1, [r3, #0]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	01db      	lsls	r3, r3, #7
 8005616:	440b      	add	r3, r1
 8005618:	339c      	adds	r3, #156	; 0x9c
 800561a:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 800561c:	e091      	b.n	8005742 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005626:	f040 808c 	bne.w	8005742 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6819      	ldr	r1, [r3, #0]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	01db      	lsls	r3, r3, #7
 8005636:	440b      	add	r3, r1
 8005638:	33a8      	adds	r3, #168	; 0xa8
 800563a:	601a      	str	r2, [r3, #0]
         break;
 800563c:	e081      	b.n	8005742 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	3301      	adds	r3, #1
 8005646:	01db      	lsls	r3, r3, #7
 8005648:	4413      	add	r3, r2
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	6811      	ldr	r1, [r2, #0]
 8005650:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	3301      	adds	r3, #1
 8005658:	01db      	lsls	r3, r3, #7
 800565a:	440b      	add	r3, r1
 800565c:	601a      	str	r2, [r3, #0]
         break;
 800565e:	e070      	b.n	8005742 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6819      	ldr	r1, [r3, #0]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	01db      	lsls	r3, r3, #7
 800566c:	440b      	add	r3, r1
 800566e:	33a8      	adds	r3, #168	; 0xa8
 8005670:	601a      	str	r2, [r3, #0]
        break;
 8005672:	e069      	b.n	8005748 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6819      	ldr	r1, [r3, #0]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	01db      	lsls	r3, r3, #7
 8005680:	440b      	add	r3, r1
 8005682:	33ac      	adds	r3, #172	; 0xac
 8005684:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d03f      	beq.n	800570e <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	3301      	adds	r3, #1
 8005696:	01db      	lsls	r3, r3, #7
 8005698:	4413      	add	r3, r2
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	6811      	ldr	r1, [r2, #0]
 80056a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	3301      	adds	r3, #1
 80056a8:	01db      	lsls	r3, r3, #7
 80056aa:	440b      	add	r3, r1
 80056ac:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	3301      	adds	r3, #1
 80056b6:	01db      	lsls	r3, r3, #7
 80056b8:	4413      	add	r3, r2
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	68f9      	ldr	r1, [r7, #12]
 80056c4:	6809      	ldr	r1, [r1, #0]
 80056c6:	431a      	orrs	r2, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	3301      	adds	r3, #1
 80056cc:	01db      	lsls	r3, r3, #7
 80056ce:	440b      	add	r3, r1
 80056d0:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056da:	d109      	bne.n	80056f0 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6819      	ldr	r1, [r3, #0]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	01db      	lsls	r3, r3, #7
 80056e8:	440b      	add	r3, r1
 80056ea:	339c      	adds	r3, #156	; 0x9c
 80056ec:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80056ee:	e02a      	b.n	8005746 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056f8:	d125      	bne.n	8005746 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6819      	ldr	r1, [r3, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	01db      	lsls	r3, r3, #7
 8005706:	440b      	add	r3, r1
 8005708:	33a8      	adds	r3, #168	; 0xa8
 800570a:	601a      	str	r2, [r3, #0]
         break;
 800570c:	e01b      	b.n	8005746 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	3301      	adds	r3, #1
 8005716:	01db      	lsls	r3, r3, #7
 8005718:	4413      	add	r3, r2
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	6811      	ldr	r1, [r2, #0]
 8005720:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	3301      	adds	r3, #1
 8005728:	01db      	lsls	r3, r3, #7
 800572a:	440b      	add	r3, r1
 800572c:	601a      	str	r2, [r3, #0]
         break;
 800572e:	e00a      	b.n	8005746 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2207      	movs	r2, #7
 8005734:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8005740:	e002      	b.n	8005748 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005742:	bf00      	nop
 8005744:	e000      	b.n	8005748 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005746:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b07      	cmp	r3, #7
 8005752:	d101      	bne.n	8005758 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e008      	b.n	800576a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop

08005778 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d101      	bne.n	8005796 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8005792:	2302      	movs	r3, #2
 8005794:	e01d      	b.n	80057d2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80057a0:	2302      	movs	r3, #2
 80057a2:	e016      	b.n	80057d2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	68b9      	ldr	r1, [r7, #8]
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f000 fadc 	bl	8005d78 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d101      	bne.n	80057f2 <HAL_HRTIM_WaveformOutputStart+0x18>
 80057ee:	2302      	movs	r3, #2
 80057f0:	e01a      	b.n	8005828 <HAL_HRTIM_WaveformOutputStart+0x4e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2202      	movs	r2, #2
 80057fe:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_HRTIM_WaveformOutputStop+0x18>
 8005848:	2302      	movs	r3, #2
 800584a:	e01a      	b.n	8005882 <HAL_HRTIM_WaveformOutputStop+0x4e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_E
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d101      	bne.n	80058a6 <HAL_HRTIM_WaveformCountStart+0x18>
 80058a2:	2302      	movs	r3, #2
 80058a4:	e018      	b.n	80058d8 <HAL_HRTIM_WaveformCountStart+0x4a>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2202      	movs	r2, #2
 80058b2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6819      	ldr	r1, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_HRTIM_SoftwareUpdate>:
  * @note The 'software update' bits in the HRTIM control register 2 register are
  *       automatically reset by hardware
  */
HAL_StatusTypeDef HAL_HRTIM_SoftwareUpdate(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t Timers)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERUPDATE(Timers));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d101      	bne.n	80058fe <HAL_HRTIM_SoftwareUpdate+0x1a>
  {
     return HAL_BUSY;
 80058fa:	2302      	movs	r3, #2
 80058fc:	e021      	b.n	8005942 <HAL_HRTIM_SoftwareUpdate+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <HAL_HRTIM_SoftwareUpdate+0x28>
 8005908:	2302      	movs	r3, #2
 800590a:	e01a      	b.n	8005942 <HAL_HRTIM_SoftwareUpdate+0x5e>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Force timer(s) registers update */
  hhrtim->Instance->sCommonRegs.CR2 |= Timers;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f8d3 1384 	ldr.w	r1, [r3, #900]	; 0x384
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800594e:	b480      	push	{r7}
 8005950:	b085      	sub	sp, #20
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0307 	bic.w	r3, r3, #7
 8005966:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f023 0318 	bic.w	r3, r3, #24
 8005978:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	6812      	ldr	r2, [r2, #0]
 8005994:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	6852      	ldr	r2, [r2, #4]
 800599e:	619a      	str	r2, [r3, #24]
}
 80059a0:	bf00      	nop
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	3301      	adds	r3, #1
 80059c0:	01db      	lsls	r3, r3, #7
 80059c2:	4413      	add	r3, r2
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f023 0307 	bic.w	r3, r3, #7
 80059ce:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f023 0318 	bic.w	r3, r3, #24
 80059e0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	3301      	adds	r3, #1
 80059f4:	01db      	lsls	r3, r3, #7
 80059f6:	4413      	add	r3, r2
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6819      	ldr	r1, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	01db      	lsls	r3, r3, #7
 8005a08:	440b      	add	r3, r1
 8005a0a:	3394      	adds	r3, #148	; 0x94
 8005a0c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6819      	ldr	r1, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	01db      	lsls	r3, r3, #7
 8005a1a:	440b      	add	r3, r1
 8005a1c:	3398      	adds	r3, #152	; 0x98
 8005a1e:	601a      	str	r2, [r3, #0]
}
 8005a20:	bf00      	nop
 8005a22:	371c      	adds	r7, #28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8005a46:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0320 	bic.w	r3, r3, #32
 8005a4e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a60:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a72:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	69db      	ldr	r3, [r3, #28]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a84:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005a96:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005aa8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005abc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ace:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8005aec:	bf00      	nop
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b08b      	sub	sp, #44	; 0x2c
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	01db      	lsls	r3, r3, #7
 8005b0e:	4413      	add	r3, r2
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	6811      	ldr	r1, [r2, #0]
 8005b16:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	01db      	lsls	r3, r3, #7
 8005b20:	440b      	add	r3, r1
 8005b22:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	01db      	lsls	r3, r3, #7
 8005b2e:	4413      	add	r3, r2
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	01db      	lsls	r3, r3, #7
 8005b3c:	4413      	add	r3, r2
 8005b3e:	33e8      	adds	r3, #232	; 0xe8
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	01db      	lsls	r3, r3, #7
 8005b4c:	4413      	add	r3, r2
 8005b4e:	33e4      	adds	r3, #228	; 0xe4
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8005b5c:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	f023 0320 	bic.w	r3, r3, #32
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b76:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b90:	4313      	orrs	r3, r2
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bda:	d103      	bne.n	8005be4 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c04:	4313      	orrs	r3, r2
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8005c0e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c16:	4313      	orrs	r3, r2
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	f023 031f 	bic.w	r3, r3, #31
 8005c20:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c36:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d108      	bne.n	8005c5c <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c50:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	6a3a      	ldr	r2, [r7, #32]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c60:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8005c64:	d004      	beq.n	8005c70 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6a:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8005c6e:	d103      	bne.n	8005c78 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c74:	2b40      	cmp	r3, #64	; 0x40
 8005c76:	d108      	bne.n	8005c8a <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8005c7e:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c84:	6a3a      	ldr	r2, [r7, #32]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c8e:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	2b04      	cmp	r3, #4
 8005c94:	d843      	bhi.n	8005d1e <HRTIM_TimingUnitWaveform_Config+0x226>
 8005c96:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005cb1 	.word	0x08005cb1
 8005ca0:	08005cc7 	.word	0x08005cc7
 8005ca4:	08005cdd 	.word	0x08005cdd
 8005ca8:	08005cf3 	.word	0x08005cf3
 8005cac:	08005d09 	.word	0x08005d09
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005cb6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	69fa      	ldr	r2, [r7, #28]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	61fb      	str	r3, [r7, #28]
      break;
 8005cc4:	e02c      	b.n	8005d20 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ccc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	69fa      	ldr	r2, [r7, #28]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	61fb      	str	r3, [r7, #28]
      break;
 8005cda:	e021      	b.n	8005d20 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005ce2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	69fa      	ldr	r2, [r7, #28]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	61fb      	str	r3, [r7, #28]
      break;
 8005cf0:	e016      	b.n	8005d20 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005cf8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	69fa      	ldr	r2, [r7, #28]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	61fb      	str	r3, [r7, #28]
      break;
 8005d06:	e00b      	b.n	8005d20 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d0e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d14:	015b      	lsls	r3, r3, #5
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	61fb      	str	r3, [r7, #28]
      break;
 8005d1c:	e000      	b.n	8005d20 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8005d1e:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	3301      	adds	r3, #1
 8005d28:	01db      	lsls	r3, r3, #7
 8005d2a:	4413      	add	r3, r2
 8005d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	01db      	lsls	r3, r3, #7
 8005d38:	4413      	add	r3, r2
 8005d3a:	33e8      	adds	r3, #232	; 0xe8
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	01db      	lsls	r3, r3, #7
 8005d48:	4413      	add	r3, r2
 8005d4a:	33e4      	adds	r3, #228	; 0xe4
 8005d4c:	6a3a      	ldr	r2, [r7, #32]
 8005d4e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	01db      	lsls	r3, r3, #7
 8005d58:	4413      	add	r3, r2
 8005d5a:	33d4      	adds	r3, #212	; 0xd4
 8005d5c:	697a      	ldr	r2, [r7, #20]
 8005d5e:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	69fa      	ldr	r2, [r7, #28]
 8005d66:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8005d6a:	bf00      	nop
 8005d6c:	372c      	adds	r7, #44	; 0x2c
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop

08005d78 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b089      	sub	sp, #36	; 0x24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8005d86:	2300      	movs	r3, #0
 8005d88:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	01db      	lsls	r3, r3, #7
 8005d92:	4413      	add	r3, r2
 8005d94:	33e4      	adds	r3, #228	; 0xe4
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	01db      	lsls	r3, r3, #7
 8005da2:	4413      	add	r3, r2
 8005da4:	33b8      	adds	r3, #184	; 0xb8
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	617b      	str	r3, [r7, #20]

  switch (Output)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db0:	d04d      	beq.n	8005e4e <HRTIM_OutputConfig+0xd6>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db8:	d85e      	bhi.n	8005e78 <HRTIM_OutputConfig+0x100>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc0:	d032      	beq.n	8005e28 <HRTIM_OutputConfig+0xb0>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc8:	d856      	bhi.n	8005e78 <HRTIM_OutputConfig+0x100>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b80      	cmp	r3, #128	; 0x80
 8005dce:	d03e      	beq.n	8005e4e <HRTIM_OutputConfig+0xd6>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b80      	cmp	r3, #128	; 0x80
 8005dd4:	d850      	bhi.n	8005e78 <HRTIM_OutputConfig+0x100>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b40      	cmp	r3, #64	; 0x40
 8005dda:	d025      	beq.n	8005e28 <HRTIM_OutputConfig+0xb0>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b40      	cmp	r3, #64	; 0x40
 8005de0:	d84a      	bhi.n	8005e78 <HRTIM_OutputConfig+0x100>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d01f      	beq.n	8005e28 <HRTIM_OutputConfig+0xb0>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d044      	beq.n	8005e78 <HRTIM_OutputConfig+0x100>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b20      	cmp	r3, #32
 8005df2:	d841      	bhi.n	8005e78 <HRTIM_OutputConfig+0x100>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d33e      	bcc.n	8005e78 <HRTIM_OutputConfig+0x100>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3b02      	subs	r3, #2
 8005dfe:	2201      	movs	r2, #1
 8005e00:	409a      	lsls	r2, r3
 8005e02:	4b48      	ldr	r3, [pc, #288]	; (8005f24 <HRTIM_OutputConfig+0x1ac>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	bf14      	ite	ne
 8005e0a:	2301      	movne	r3, #1
 8005e0c:	2300      	moveq	r3, #0
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d11c      	bne.n	8005e4e <HRTIM_OutputConfig+0xd6>
 8005e14:	f244 0304 	movw	r3, #16388	; 0x4004
 8005e18:	4013      	ands	r3, r2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	bf14      	ite	ne
 8005e1e:	2301      	movne	r3, #1
 8005e20:	2300      	moveq	r3, #0
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d027      	beq.n	8005e78 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6819      	ldr	r1, [r3, #0]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	01db      	lsls	r3, r3, #7
 8005e34:	440b      	add	r3, r1
 8005e36:	33bc      	adds	r3, #188	; 0xbc
 8005e38:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6819      	ldr	r1, [r3, #0]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	01db      	lsls	r3, r3, #7
 8005e46:	440b      	add	r3, r1
 8005e48:	33c0      	adds	r3, #192	; 0xc0
 8005e4a:	601a      	str	r2, [r3, #0]
      break;
 8005e4c:	e015      	b.n	8005e7a <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6819      	ldr	r1, [r3, #0]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	01db      	lsls	r3, r3, #7
 8005e5a:	440b      	add	r3, r1
 8005e5c:	33c4      	adds	r3, #196	; 0xc4
 8005e5e:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6819      	ldr	r1, [r3, #0]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	01db      	lsls	r3, r3, #7
 8005e6c:	440b      	add	r3, r1
 8005e6e:	33c8      	adds	r3, #200	; 0xc8
 8005e70:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8005e72:	2310      	movs	r3, #16
 8005e74:	61bb      	str	r3, [r7, #24]
      break;
 8005e76:	e000      	b.n	8005e7a <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8005e78:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8005e7a:	22fe      	movs	r2, #254	; 0xfe
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8005e82:	43db      	mvns	r3, r3
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	4013      	ands	r3, r2
 8005e88:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	69fa      	ldr	r2, [r7, #28]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea4:	69fa      	ldr	r2, [r7, #28]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb4:	69fa      	ldr	r2, [r7, #28]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	695a      	ldr	r2, [r3, #20]
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec4:	69fa      	ldr	r2, [r7, #28]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	699a      	ldr	r2, [r3, #24]
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed4:	69fa      	ldr	r2, [r7, #28]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	2b08      	cmp	r3, #8
 8005ee0:	d111      	bne.n	8005f06 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10c      	bne.n	8005f06 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d107      	bne.n	8005f06 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	69da      	ldr	r2, [r3, #28]
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	69fa      	ldr	r2, [r7, #28]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	01db      	lsls	r3, r3, #7
 8005f0e:	4413      	add	r3, r2
 8005f10:	33e4      	adds	r3, #228	; 0xe4
 8005f12:	69fa      	ldr	r2, [r7, #28]
 8005f14:	601a      	str	r2, [r3, #0]
}
 8005f16:	bf00      	nop
 8005f18:	3724      	adds	r7, #36	; 0x24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	40000041 	.word	0x40000041

08005f28 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b05      	cmp	r3, #5
 8005f36:	d851      	bhi.n	8005fdc <HRTIM_ForceRegistersUpdate+0xb4>
 8005f38:	a201      	add	r2, pc, #4	; (adr r2, 8005f40 <HRTIM_ForceRegistersUpdate+0x18>)
 8005f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3e:	bf00      	nop
 8005f40:	08005f6f 	.word	0x08005f6f
 8005f44:	08005f85 	.word	0x08005f85
 8005f48:	08005f9b 	.word	0x08005f9b
 8005f4c:	08005fb1 	.word	0x08005fb1
 8005f50:	08005fc7 	.word	0x08005fc7
 8005f54:	08005f59 	.word	0x08005f59
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f042 0201 	orr.w	r2, r2, #1
 8005f68:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8005f6c:	e037      	b.n	8005fde <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0202 	orr.w	r2, r2, #2
 8005f7e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8005f82:	e02c      	b.n	8005fde <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f042 0204 	orr.w	r2, r2, #4
 8005f94:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8005f98:	e021      	b.n	8005fde <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0208 	orr.w	r2, r2, #8
 8005faa:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8005fae:	e016      	b.n	8005fde <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f042 0210 	orr.w	r2, r2, #16
 8005fc0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8005fc4:	e00b      	b.n	8005fde <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0220 	orr.w	r2, r2, #32
 8005fd6:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8005fda:	e000      	b.n	8005fde <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8005fdc:	bf00      	nop
  }
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop

08005fec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e081      	b.n	8006102 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d106      	bne.n	8006018 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7fd f982 	bl	800331c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2224      	movs	r2, #36	; 0x24
 800601c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0201 	bic.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800603c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800604c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d107      	bne.n	8006066 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006062:	609a      	str	r2, [r3, #8]
 8006064:	e006      	b.n	8006074 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006072:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	2b02      	cmp	r3, #2
 800607a:	d104      	bne.n	8006086 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006084:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6812      	ldr	r2, [r2, #0]
 8006090:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006098:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68da      	ldr	r2, [r3, #12]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691a      	ldr	r2, [r3, #16]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	69d9      	ldr	r1, [r3, #28]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a1a      	ldr	r2, [r3, #32]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	430a      	orrs	r2, r1
 80060d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0201 	orr.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b088      	sub	sp, #32
 8006110:	af02      	add	r7, sp, #8
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	607a      	str	r2, [r7, #4]
 8006116:	461a      	mov	r2, r3
 8006118:	460b      	mov	r3, r1
 800611a:	817b      	strh	r3, [r7, #10]
 800611c:	4613      	mov	r3, r2
 800611e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b20      	cmp	r3, #32
 800612a:	f040 80da 	bne.w	80062e2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006134:	2b01      	cmp	r3, #1
 8006136:	d101      	bne.n	800613c <HAL_I2C_Master_Transmit+0x30>
 8006138:	2302      	movs	r3, #2
 800613a:	e0d3      	b.n	80062e4 <HAL_I2C_Master_Transmit+0x1d8>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006144:	f7fd fb4a 	bl	80037dc <HAL_GetTick>
 8006148:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	2319      	movs	r3, #25
 8006150:	2201      	movs	r2, #1
 8006152:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 fb4e 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e0be      	b.n	80062e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2221      	movs	r2, #33	; 0x21
 800616a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2210      	movs	r2, #16
 8006172:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	893a      	ldrh	r2, [r7, #8]
 8006186:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006192:	b29b      	uxth	r3, r3
 8006194:	2bff      	cmp	r3, #255	; 0xff
 8006196:	d90e      	bls.n	80061b6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	22ff      	movs	r2, #255	; 0xff
 800619c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	8979      	ldrh	r1, [r7, #10]
 80061a6:	4b51      	ldr	r3, [pc, #324]	; (80062ec <HAL_I2C_Master_Transmit+0x1e0>)
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 fd5e 	bl	8006c70 <I2C_TransferConfig>
 80061b4:	e06c      	b.n	8006290 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	8979      	ldrh	r1, [r7, #10]
 80061c8:	4b48      	ldr	r3, [pc, #288]	; (80062ec <HAL_I2C_Master_Transmit+0x1e0>)
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f000 fd4d 	bl	8006c70 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80061d6:	e05b      	b.n	8006290 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	6a39      	ldr	r1, [r7, #32]
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fb5a 	bl	8006896 <I2C_WaitOnTXISFlagUntilTimeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e07b      	b.n	80062e4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	781a      	ldrb	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006206:	b29b      	uxth	r3, r3
 8006208:	3b01      	subs	r3, #1
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006220:	b29b      	uxth	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d034      	beq.n	8006290 <HAL_I2C_Master_Transmit+0x184>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800622a:	2b00      	cmp	r3, #0
 800622c:	d130      	bne.n	8006290 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	2200      	movs	r2, #0
 8006236:	2180      	movs	r1, #128	; 0x80
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 fadd 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e04d      	b.n	80062e4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624c:	b29b      	uxth	r3, r3
 800624e:	2bff      	cmp	r3, #255	; 0xff
 8006250:	d90e      	bls.n	8006270 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	22ff      	movs	r2, #255	; 0xff
 8006256:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800625c:	b2da      	uxtb	r2, r3
 800625e:	8979      	ldrh	r1, [r7, #10]
 8006260:	2300      	movs	r3, #0
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 fd01 	bl	8006c70 <I2C_TransferConfig>
 800626e:	e00f      	b.n	8006290 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800627e:	b2da      	uxtb	r2, r3
 8006280:	8979      	ldrh	r1, [r7, #10]
 8006282:	2300      	movs	r3, #0
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 fcf0 	bl	8006c70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d19e      	bne.n	80061d8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	6a39      	ldr	r1, [r7, #32]
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 fb40 	bl	8006924 <I2C_WaitOnSTOPFlagUntilTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e01a      	b.n	80062e4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2220      	movs	r2, #32
 80062b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6859      	ldr	r1, [r3, #4]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <HAL_I2C_Master_Transmit+0x1e4>)
 80062c2:	400b      	ands	r3, r1
 80062c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	e000      	b.n	80062e4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80062e2:	2302      	movs	r3, #2
  }
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	80002000 	.word	0x80002000
 80062f0:	fe00e800 	.word	0xfe00e800

080062f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af02      	add	r7, sp, #8
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	607a      	str	r2, [r7, #4]
 80062fe:	461a      	mov	r2, r3
 8006300:	460b      	mov	r3, r1
 8006302:	817b      	strh	r3, [r7, #10]
 8006304:	4613      	mov	r3, r2
 8006306:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b20      	cmp	r3, #32
 8006312:	f040 80db 	bne.w	80064cc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <HAL_I2C_Master_Receive+0x30>
 8006320:	2302      	movs	r3, #2
 8006322:	e0d4      	b.n	80064ce <HAL_I2C_Master_Receive+0x1da>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800632c:	f7fd fa56 	bl	80037dc <HAL_GetTick>
 8006330:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	2319      	movs	r3, #25
 8006338:	2201      	movs	r2, #1
 800633a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 fa5a 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e0bf      	b.n	80064ce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2222      	movs	r2, #34	; 0x22
 8006352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2210      	movs	r2, #16
 800635a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	893a      	ldrh	r2, [r7, #8]
 800636e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637a:	b29b      	uxth	r3, r3
 800637c:	2bff      	cmp	r3, #255	; 0xff
 800637e:	d90e      	bls.n	800639e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	22ff      	movs	r2, #255	; 0xff
 8006384:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800638a:	b2da      	uxtb	r2, r3
 800638c:	8979      	ldrh	r1, [r7, #10]
 800638e:	4b52      	ldr	r3, [pc, #328]	; (80064d8 <HAL_I2C_Master_Receive+0x1e4>)
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f000 fc6a 	bl	8006c70 <I2C_TransferConfig>
 800639c:	e06d      	b.n	800647a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	8979      	ldrh	r1, [r7, #10]
 80063b0:	4b49      	ldr	r3, [pc, #292]	; (80064d8 <HAL_I2C_Master_Receive+0x1e4>)
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 fc59 	bl	8006c70 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80063be:	e05c      	b.n	800647a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	6a39      	ldr	r1, [r7, #32]
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 faf1 	bl	80069ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	e07c      	b.n	80064ce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063de:	b2d2      	uxtb	r2, r2
 80063e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f0:	3b01      	subs	r3, #1
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29a      	uxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640a:	b29b      	uxth	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d034      	beq.n	800647a <HAL_I2C_Master_Receive+0x186>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006414:	2b00      	cmp	r3, #0
 8006416:	d130      	bne.n	800647a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	2200      	movs	r2, #0
 8006420:	2180      	movs	r1, #128	; 0x80
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 f9e8 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e04d      	b.n	80064ce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006436:	b29b      	uxth	r3, r3
 8006438:	2bff      	cmp	r3, #255	; 0xff
 800643a:	d90e      	bls.n	800645a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	22ff      	movs	r2, #255	; 0xff
 8006440:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006446:	b2da      	uxtb	r2, r3
 8006448:	8979      	ldrh	r1, [r7, #10]
 800644a:	2300      	movs	r3, #0
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 fc0c 	bl	8006c70 <I2C_TransferConfig>
 8006458:	e00f      	b.n	800647a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800645e:	b29a      	uxth	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006468:	b2da      	uxtb	r2, r3
 800646a:	8979      	ldrh	r1, [r7, #10]
 800646c:	2300      	movs	r3, #0
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 fbfb 	bl	8006c70 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800647e:	b29b      	uxth	r3, r3
 8006480:	2b00      	cmp	r3, #0
 8006482:	d19d      	bne.n	80063c0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	6a39      	ldr	r1, [r7, #32]
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 fa4b 	bl	8006924 <I2C_WaitOnSTOPFlagUntilTimeout>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e01a      	b.n	80064ce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2220      	movs	r2, #32
 800649e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6859      	ldr	r1, [r3, #4]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	4b0c      	ldr	r3, [pc, #48]	; (80064dc <HAL_I2C_Master_Receive+0x1e8>)
 80064ac:	400b      	ands	r3, r1
 80064ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2220      	movs	r2, #32
 80064b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	e000      	b.n	80064ce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80064cc:	2302      	movs	r3, #2
  }
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	80002400 	.word	0x80002400
 80064dc:	fe00e800 	.word	0xfe00e800

080064e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	4608      	mov	r0, r1
 80064ea:	4611      	mov	r1, r2
 80064ec:	461a      	mov	r2, r3
 80064ee:	4603      	mov	r3, r0
 80064f0:	817b      	strh	r3, [r7, #10]
 80064f2:	460b      	mov	r3, r1
 80064f4:	813b      	strh	r3, [r7, #8]
 80064f6:	4613      	mov	r3, r2
 80064f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b20      	cmp	r3, #32
 8006504:	f040 80f9 	bne.w	80066fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <HAL_I2C_Mem_Write+0x34>
 800650e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006510:	2b00      	cmp	r3, #0
 8006512:	d105      	bne.n	8006520 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800651a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e0ed      	b.n	80066fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006526:	2b01      	cmp	r3, #1
 8006528:	d101      	bne.n	800652e <HAL_I2C_Mem_Write+0x4e>
 800652a:	2302      	movs	r3, #2
 800652c:	e0e6      	b.n	80066fc <HAL_I2C_Mem_Write+0x21c>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006536:	f7fd f951 	bl	80037dc <HAL_GetTick>
 800653a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	9300      	str	r3, [sp, #0]
 8006540:	2319      	movs	r3, #25
 8006542:	2201      	movs	r2, #1
 8006544:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 f955 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e0d1      	b.n	80066fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2221      	movs	r2, #33	; 0x21
 800655c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2240      	movs	r2, #64	; 0x40
 8006564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a3a      	ldr	r2, [r7, #32]
 8006572:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006578:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006580:	88f8      	ldrh	r0, [r7, #6]
 8006582:	893a      	ldrh	r2, [r7, #8]
 8006584:	8979      	ldrh	r1, [r7, #10]
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	9301      	str	r3, [sp, #4]
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	4603      	mov	r3, r0
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f8b9 	bl	8006708 <I2C_RequestMemoryWrite>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e0a9      	b.n	80066fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	2bff      	cmp	r3, #255	; 0xff
 80065b0:	d90e      	bls.n	80065d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	22ff      	movs	r2, #255	; 0xff
 80065b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	8979      	ldrh	r1, [r7, #10]
 80065c0:	2300      	movs	r3, #0
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 fb51 	bl	8006c70 <I2C_TransferConfig>
 80065ce:	e00f      	b.n	80065f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	8979      	ldrh	r1, [r7, #10]
 80065e2:	2300      	movs	r3, #0
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 fb40 	bl	8006c70 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f94e 	bl	8006896 <I2C_WaitOnTXISFlagUntilTimeout>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e07b      	b.n	80066fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	781a      	ldrb	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661e:	b29b      	uxth	r3, r3
 8006620:	3b01      	subs	r3, #1
 8006622:	b29a      	uxth	r2, r3
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800662c:	3b01      	subs	r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d034      	beq.n	80066a8 <HAL_I2C_Mem_Write+0x1c8>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006642:	2b00      	cmp	r3, #0
 8006644:	d130      	bne.n	80066a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	2200      	movs	r2, #0
 800664e:	2180      	movs	r1, #128	; 0x80
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 f8d1 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e04d      	b.n	80066fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006664:	b29b      	uxth	r3, r3
 8006666:	2bff      	cmp	r3, #255	; 0xff
 8006668:	d90e      	bls.n	8006688 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	22ff      	movs	r2, #255	; 0xff
 800666e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006674:	b2da      	uxtb	r2, r3
 8006676:	8979      	ldrh	r1, [r7, #10]
 8006678:	2300      	movs	r3, #0
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 faf5 	bl	8006c70 <I2C_TransferConfig>
 8006686:	e00f      	b.n	80066a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668c:	b29a      	uxth	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006696:	b2da      	uxtb	r2, r3
 8006698:	8979      	ldrh	r1, [r7, #10]
 800669a:	2300      	movs	r3, #0
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 fae4 	bl	8006c70 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d19e      	bne.n	80065f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 f934 	bl	8006924 <I2C_WaitOnSTOPFlagUntilTimeout>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e01a      	b.n	80066fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2220      	movs	r2, #32
 80066cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6859      	ldr	r1, [r3, #4]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	4b0a      	ldr	r3, [pc, #40]	; (8006704 <HAL_I2C_Mem_Write+0x224>)
 80066da:	400b      	ands	r3, r1
 80066dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	e000      	b.n	80066fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80066fa:	2302      	movs	r3, #2
  }
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	fe00e800 	.word	0xfe00e800

08006708 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af02      	add	r7, sp, #8
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	4608      	mov	r0, r1
 8006712:	4611      	mov	r1, r2
 8006714:	461a      	mov	r2, r3
 8006716:	4603      	mov	r3, r0
 8006718:	817b      	strh	r3, [r7, #10]
 800671a:	460b      	mov	r3, r1
 800671c:	813b      	strh	r3, [r7, #8]
 800671e:	4613      	mov	r3, r2
 8006720:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006722:	88fb      	ldrh	r3, [r7, #6]
 8006724:	b2da      	uxtb	r2, r3
 8006726:	8979      	ldrh	r1, [r7, #10]
 8006728:	4b20      	ldr	r3, [pc, #128]	; (80067ac <I2C_RequestMemoryWrite+0xa4>)
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 fa9d 	bl	8006c70 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006736:	69fa      	ldr	r2, [r7, #28]
 8006738:	69b9      	ldr	r1, [r7, #24]
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 f8ab 	bl	8006896 <I2C_WaitOnTXISFlagUntilTimeout>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d001      	beq.n	800674a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e02c      	b.n	80067a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800674a:	88fb      	ldrh	r3, [r7, #6]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d105      	bne.n	800675c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006750:	893b      	ldrh	r3, [r7, #8]
 8006752:	b2da      	uxtb	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	629a      	str	r2, [r3, #40]	; 0x28
 800675a:	e015      	b.n	8006788 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800675c:	893b      	ldrh	r3, [r7, #8]
 800675e:	0a1b      	lsrs	r3, r3, #8
 8006760:	b29b      	uxth	r3, r3
 8006762:	b2da      	uxtb	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800676a:	69fa      	ldr	r2, [r7, #28]
 800676c:	69b9      	ldr	r1, [r7, #24]
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 f891 	bl	8006896 <I2C_WaitOnTXISFlagUntilTimeout>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e012      	b.n	80067a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800677e:	893b      	ldrh	r3, [r7, #8]
 8006780:	b2da      	uxtb	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	2200      	movs	r2, #0
 8006790:	2180      	movs	r1, #128	; 0x80
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f000 f830 	bl	80067f8 <I2C_WaitOnFlagUntilTimeout>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e000      	b.n	80067a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	80002000 	.word	0x80002000

080067b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d103      	bne.n	80067ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2200      	movs	r2, #0
 80067cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d007      	beq.n	80067ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	699a      	ldr	r2, [r3, #24]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f042 0201 	orr.w	r2, r2, #1
 80067ea:	619a      	str	r2, [r3, #24]
  }
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	603b      	str	r3, [r7, #0]
 8006804:	4613      	mov	r3, r2
 8006806:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006808:	e031      	b.n	800686e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006810:	d02d      	beq.n	800686e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006812:	f7fc ffe3 	bl	80037dc <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	429a      	cmp	r2, r3
 8006820:	d302      	bcc.n	8006828 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d122      	bne.n	800686e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	699a      	ldr	r2, [r3, #24]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	4013      	ands	r3, r2
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	429a      	cmp	r2, r3
 8006836:	bf0c      	ite	eq
 8006838:	2301      	moveq	r3, #1
 800683a:	2300      	movne	r3, #0
 800683c:	b2db      	uxtb	r3, r3
 800683e:	461a      	mov	r2, r3
 8006840:	79fb      	ldrb	r3, [r7, #7]
 8006842:	429a      	cmp	r2, r3
 8006844:	d113      	bne.n	800686e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684a:	f043 0220 	orr.w	r2, r3, #32
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2220      	movs	r2, #32
 8006856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e00f      	b.n	800688e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	699a      	ldr	r2, [r3, #24]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	4013      	ands	r3, r2
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	429a      	cmp	r2, r3
 800687c:	bf0c      	ite	eq
 800687e:	2301      	moveq	r3, #1
 8006880:	2300      	movne	r3, #0
 8006882:	b2db      	uxtb	r3, r3
 8006884:	461a      	mov	r2, r3
 8006886:	79fb      	ldrb	r3, [r7, #7]
 8006888:	429a      	cmp	r2, r3
 800688a:	d0be      	beq.n	800680a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b084      	sub	sp, #16
 800689a:	af00      	add	r7, sp, #0
 800689c:	60f8      	str	r0, [r7, #12]
 800689e:	60b9      	str	r1, [r7, #8]
 80068a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068a2:	e033      	b.n	800690c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	68b9      	ldr	r1, [r7, #8]
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f000 f901 	bl	8006ab0 <I2C_IsErrorOccurred>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e031      	b.n	800691c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068be:	d025      	beq.n	800690c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c0:	f7fc ff8c 	bl	80037dc <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d302      	bcc.n	80068d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d11a      	bne.n	800690c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d013      	beq.n	800690c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e8:	f043 0220 	orr.w	r2, r3, #32
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e007      	b.n	800691c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	2b02      	cmp	r3, #2
 8006918:	d1c4      	bne.n	80068a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006930:	e02f      	b.n	8006992 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	68b9      	ldr	r1, [r7, #8]
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f000 f8ba 	bl	8006ab0 <I2C_IsErrorOccurred>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e02d      	b.n	80069a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006946:	f7fc ff49 	bl	80037dc <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	429a      	cmp	r2, r3
 8006954:	d302      	bcc.n	800695c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d11a      	bne.n	8006992 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	f003 0320 	and.w	r3, r3, #32
 8006966:	2b20      	cmp	r3, #32
 8006968:	d013      	beq.n	8006992 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696e:	f043 0220 	orr.w	r2, r3, #32
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2220      	movs	r2, #32
 800697a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e007      	b.n	80069a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	f003 0320 	and.w	r3, r3, #32
 800699c:	2b20      	cmp	r3, #32
 800699e:	d1c8      	bne.n	8006932 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069b8:	e06b      	b.n	8006a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	68b9      	ldr	r1, [r7, #8]
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 f876 	bl	8006ab0 <I2C_IsErrorOccurred>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e069      	b.n	8006aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	f003 0320 	and.w	r3, r3, #32
 80069d8:	2b20      	cmp	r3, #32
 80069da:	d138      	bne.n	8006a4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d105      	bne.n	80069f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e055      	b.n	8006aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	f003 0310 	and.w	r3, r3, #16
 8006a00:	2b10      	cmp	r3, #16
 8006a02:	d107      	bne.n	8006a14 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2210      	movs	r2, #16
 8006a0a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2204      	movs	r2, #4
 8006a10:	645a      	str	r2, [r3, #68]	; 0x44
 8006a12:	e002      	b.n	8006a1a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6859      	ldr	r1, [r3, #4]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	4b1f      	ldr	r3, [pc, #124]	; (8006aac <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8006a2e:	400b      	ands	r3, r1
 8006a30:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e029      	b.n	8006aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a4e:	f7fc fec5 	bl	80037dc <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d302      	bcc.n	8006a64 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d116      	bne.n	8006a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	f003 0304 	and.w	r3, r3, #4
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	d00f      	beq.n	8006a92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a76:	f043 0220 	orr.w	r2, r3, #32
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2220      	movs	r2, #32
 8006a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e007      	b.n	8006aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	f003 0304 	and.w	r3, r3, #4
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d18c      	bne.n	80069ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	fe00e800 	.word	0xfe00e800

08006ab0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08a      	sub	sp, #40	; 0x28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006aca:	2300      	movs	r3, #0
 8006acc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	f003 0310 	and.w	r3, r3, #16
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d068      	beq.n	8006bae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2210      	movs	r2, #16
 8006ae2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ae4:	e049      	b.n	8006b7a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aec:	d045      	beq.n	8006b7a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006aee:	f7fc fe75 	bl	80037dc <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d302      	bcc.n	8006b04 <I2C_IsErrorOccurred+0x54>
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d13a      	bne.n	8006b7a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b0e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b16:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b26:	d121      	bne.n	8006b6c <I2C_IsErrorOccurred+0xbc>
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b2e:	d01d      	beq.n	8006b6c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006b30:	7cfb      	ldrb	r3, [r7, #19]
 8006b32:	2b20      	cmp	r3, #32
 8006b34:	d01a      	beq.n	8006b6c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685a      	ldr	r2, [r3, #4]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b44:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006b46:	f7fc fe49 	bl	80037dc <HAL_GetTick>
 8006b4a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b4c:	e00e      	b.n	8006b6c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006b4e:	f7fc fe45 	bl	80037dc <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b19      	cmp	r3, #25
 8006b5a:	d907      	bls.n	8006b6c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	f043 0320 	orr.w	r3, r3, #32
 8006b62:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006b6a:	e006      	b.n	8006b7a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	f003 0320 	and.w	r3, r3, #32
 8006b76:	2b20      	cmp	r3, #32
 8006b78:	d1e9      	bne.n	8006b4e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	f003 0320 	and.w	r3, r3, #32
 8006b84:	2b20      	cmp	r3, #32
 8006b86:	d003      	beq.n	8006b90 <I2C_IsErrorOccurred+0xe0>
 8006b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d0aa      	beq.n	8006ae6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d103      	bne.n	8006ba0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	f043 0304 	orr.w	r3, r3, #4
 8006ba6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00b      	beq.n	8006bd8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	f043 0301 	orr.w	r3, r3, #1
 8006bc6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00b      	beq.n	8006bfa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	f043 0308 	orr.w	r3, r3, #8
 8006be8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bf2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00b      	beq.n	8006c1c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	f043 0302 	orr.w	r3, r3, #2
 8006c0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d01c      	beq.n	8006c5e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f7ff fdc3 	bl	80067b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6859      	ldr	r1, [r3, #4]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	4b0d      	ldr	r3, [pc, #52]	; (8006c6c <I2C_IsErrorOccurred+0x1bc>)
 8006c36:	400b      	ands	r3, r1
 8006c38:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	431a      	orrs	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2220      	movs	r2, #32
 8006c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006c5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3728      	adds	r7, #40	; 0x28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	fe00e800 	.word	0xfe00e800

08006c70 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	607b      	str	r3, [r7, #4]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	817b      	strh	r3, [r7, #10]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c82:	897b      	ldrh	r3, [r7, #10]
 8006c84:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c88:	7a7b      	ldrb	r3, [r7, #9]
 8006c8a:	041b      	lsls	r3, r3, #16
 8006c8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c90:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c9e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	0d5b      	lsrs	r3, r3, #21
 8006caa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006cae:	4b08      	ldr	r3, [pc, #32]	; (8006cd0 <I2C_TransferConfig+0x60>)
 8006cb0:	430b      	orrs	r3, r1
 8006cb2:	43db      	mvns	r3, r3
 8006cb4:	ea02 0103 	and.w	r1, r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	697a      	ldr	r2, [r7, #20]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006cc2:	bf00      	nop
 8006cc4:	371c      	adds	r7, #28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	03ff63ff 	.word	0x03ff63ff

08006cd4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b20      	cmp	r3, #32
 8006ce8:	d138      	bne.n	8006d5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d101      	bne.n	8006cf8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	e032      	b.n	8006d5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2224      	movs	r2, #36	; 0x24
 8006d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f022 0201 	bic.w	r2, r2, #1
 8006d16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6819      	ldr	r1, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f042 0201 	orr.w	r2, r2, #1
 8006d46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2220      	movs	r2, #32
 8006d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	e000      	b.n	8006d5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d5c:	2302      	movs	r3, #2
  }
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b085      	sub	sp, #20
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b20      	cmp	r3, #32
 8006d7e:	d139      	bne.n	8006df4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d101      	bne.n	8006d8e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	e033      	b.n	8006df6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2224      	movs	r2, #36	; 0x24
 8006d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 0201 	bic.w	r2, r2, #1
 8006dac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006dbc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	021b      	lsls	r3, r3, #8
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f042 0201 	orr.w	r2, r2, #1
 8006dde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	e000      	b.n	8006df6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006df4:	2302      	movs	r3, #2
  }
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
	...

08006e04 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e0c:	4b0b      	ldr	r3, [pc, #44]	; (8006e3c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	4a0a      	ldr	r2, [pc, #40]	; (8006e3c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006e12:	f043 0301 	orr.w	r3, r3, #1
 8006e16:	6193      	str	r3, [r2, #24]
 8006e18:	4b08      	ldr	r3, [pc, #32]	; (8006e3c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	60fb      	str	r3, [r7, #12]
 8006e22:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8006e24:	4b06      	ldr	r3, [pc, #24]	; (8006e40 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	4905      	ldr	r1, [pc, #20]	; (8006e40 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	600b      	str	r3, [r1, #0]
}
 8006e30:	bf00      	nop
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	40021000 	.word	0x40021000
 8006e40:	40010000 	.word	0x40010000

08006e44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e50:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e54:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d102      	bne.n	8006e6a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	f001 b823 	b.w	8007eb0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 817d 	beq.w	800717a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006e80:	4bbc      	ldr	r3, [pc, #752]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f003 030c 	and.w	r3, r3, #12
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d00c      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006e8c:	4bb9      	ldr	r3, [pc, #740]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f003 030c 	and.w	r3, r3, #12
 8006e94:	2b08      	cmp	r3, #8
 8006e96:	d15c      	bne.n	8006f52 <HAL_RCC_OscConfig+0x10e>
 8006e98:	4bb6      	ldr	r3, [pc, #728]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea4:	d155      	bne.n	8006f52 <HAL_RCC_OscConfig+0x10e>
 8006ea6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006eaa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8006eb2:	fa93 f3a3 	rbit	r3, r3
 8006eb6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006eba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ebe:	fab3 f383 	clz	r3, r3
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	095b      	lsrs	r3, r3, #5
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	f043 0301 	orr.w	r3, r3, #1
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d102      	bne.n	8006ed8 <HAL_RCC_OscConfig+0x94>
 8006ed2:	4ba8      	ldr	r3, [pc, #672]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	e015      	b.n	8006f04 <HAL_RCC_OscConfig+0xc0>
 8006ed8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006edc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ee0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006ee4:	fa93 f3a3 	rbit	r3, r3
 8006ee8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ef0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006ef4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006ef8:	fa93 f3a3 	rbit	r3, r3
 8006efc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8006f00:	4b9c      	ldr	r3, [pc, #624]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006f08:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8006f0c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006f10:	fa92 f2a2 	rbit	r2, r2
 8006f14:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8006f18:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8006f1c:	fab2 f282 	clz	r2, r2
 8006f20:	b2d2      	uxtb	r2, r2
 8006f22:	f042 0220 	orr.w	r2, r2, #32
 8006f26:	b2d2      	uxtb	r2, r2
 8006f28:	f002 021f 	and.w	r2, r2, #31
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8006f32:	4013      	ands	r3, r2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 811f 	beq.w	8007178 <HAL_RCC_OscConfig+0x334>
 8006f3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f040 8116 	bne.w	8007178 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	f000 bfaf 	b.w	8007eb0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f62:	d106      	bne.n	8006f72 <HAL_RCC_OscConfig+0x12e>
 8006f64:	4b83      	ldr	r3, [pc, #524]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a82      	ldr	r2, [pc, #520]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f6e:	6013      	str	r3, [r2, #0]
 8006f70:	e036      	b.n	8006fe0 <HAL_RCC_OscConfig+0x19c>
 8006f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10c      	bne.n	8006f9c <HAL_RCC_OscConfig+0x158>
 8006f82:	4b7c      	ldr	r3, [pc, #496]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a7b      	ldr	r2, [pc, #492]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f8c:	6013      	str	r3, [r2, #0]
 8006f8e:	4b79      	ldr	r3, [pc, #484]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a78      	ldr	r2, [pc, #480]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006f94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f98:	6013      	str	r3, [r2, #0]
 8006f9a:	e021      	b.n	8006fe0 <HAL_RCC_OscConfig+0x19c>
 8006f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fa0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fac:	d10c      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x184>
 8006fae:	4b71      	ldr	r3, [pc, #452]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a70      	ldr	r2, [pc, #448]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	4b6e      	ldr	r3, [pc, #440]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a6d      	ldr	r2, [pc, #436]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	e00b      	b.n	8006fe0 <HAL_RCC_OscConfig+0x19c>
 8006fc8:	4b6a      	ldr	r3, [pc, #424]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a69      	ldr	r2, [pc, #420]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	4b67      	ldr	r3, [pc, #412]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a66      	ldr	r2, [pc, #408]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fde:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006fe0:	4b64      	ldr	r3, [pc, #400]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe4:	f023 020f 	bic.w	r2, r3, #15
 8006fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	495f      	ldr	r1, [pc, #380]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006ffe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d059      	beq.n	80070be <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800700a:	f7fc fbe7 	bl	80037dc <HAL_GetTick>
 800700e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007012:	e00a      	b.n	800702a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007014:	f7fc fbe2 	bl	80037dc <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800701e:	1ad3      	subs	r3, r2, r3
 8007020:	2b64      	cmp	r3, #100	; 0x64
 8007022:	d902      	bls.n	800702a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	f000 bf43 	b.w	8007eb0 <HAL_RCC_OscConfig+0x106c>
 800702a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800702e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007032:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8007036:	fa93 f3a3 	rbit	r3, r3
 800703a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800703e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007042:	fab3 f383 	clz	r3, r3
 8007046:	b2db      	uxtb	r3, r3
 8007048:	095b      	lsrs	r3, r3, #5
 800704a:	b2db      	uxtb	r3, r3
 800704c:	f043 0301 	orr.w	r3, r3, #1
 8007050:	b2db      	uxtb	r3, r3
 8007052:	2b01      	cmp	r3, #1
 8007054:	d102      	bne.n	800705c <HAL_RCC_OscConfig+0x218>
 8007056:	4b47      	ldr	r3, [pc, #284]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	e015      	b.n	8007088 <HAL_RCC_OscConfig+0x244>
 800705c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007060:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007064:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007068:	fa93 f3a3 	rbit	r3, r3
 800706c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007070:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007074:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007078:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800707c:	fa93 f3a3 	rbit	r3, r3
 8007080:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007084:	4b3b      	ldr	r3, [pc, #236]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 8007086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007088:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800708c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007090:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007094:	fa92 f2a2 	rbit	r2, r2
 8007098:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800709c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80070a0:	fab2 f282 	clz	r2, r2
 80070a4:	b2d2      	uxtb	r2, r2
 80070a6:	f042 0220 	orr.w	r2, r2, #32
 80070aa:	b2d2      	uxtb	r2, r2
 80070ac:	f002 021f 	and.w	r2, r2, #31
 80070b0:	2101      	movs	r1, #1
 80070b2:	fa01 f202 	lsl.w	r2, r1, r2
 80070b6:	4013      	ands	r3, r2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d0ab      	beq.n	8007014 <HAL_RCC_OscConfig+0x1d0>
 80070bc:	e05d      	b.n	800717a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070be:	f7fc fb8d 	bl	80037dc <HAL_GetTick>
 80070c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070c6:	e00a      	b.n	80070de <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070c8:	f7fc fb88 	bl	80037dc <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	2b64      	cmp	r3, #100	; 0x64
 80070d6:	d902      	bls.n	80070de <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	f000 bee9 	b.w	8007eb0 <HAL_RCC_OscConfig+0x106c>
 80070de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070e2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070e6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80070ea:	fa93 f3a3 	rbit	r3, r3
 80070ee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80070f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070f6:	fab3 f383 	clz	r3, r3
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	095b      	lsrs	r3, r3, #5
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	f043 0301 	orr.w	r3, r3, #1
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b01      	cmp	r3, #1
 8007108:	d102      	bne.n	8007110 <HAL_RCC_OscConfig+0x2cc>
 800710a:	4b1a      	ldr	r3, [pc, #104]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	e015      	b.n	800713c <HAL_RCC_OscConfig+0x2f8>
 8007110:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007114:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007118:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800711c:	fa93 f3a3 	rbit	r3, r3
 8007120:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007128:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800712c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007130:	fa93 f3a3 	rbit	r3, r3
 8007134:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007138:	4b0e      	ldr	r3, [pc, #56]	; (8007174 <HAL_RCC_OscConfig+0x330>)
 800713a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007140:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007144:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007148:	fa92 f2a2 	rbit	r2, r2
 800714c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007150:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007154:	fab2 f282 	clz	r2, r2
 8007158:	b2d2      	uxtb	r2, r2
 800715a:	f042 0220 	orr.w	r2, r2, #32
 800715e:	b2d2      	uxtb	r2, r2
 8007160:	f002 021f 	and.w	r2, r2, #31
 8007164:	2101      	movs	r1, #1
 8007166:	fa01 f202 	lsl.w	r2, r1, r2
 800716a:	4013      	ands	r3, r2
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1ab      	bne.n	80070c8 <HAL_RCC_OscConfig+0x284>
 8007170:	e003      	b.n	800717a <HAL_RCC_OscConfig+0x336>
 8007172:	bf00      	nop
 8007174:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800717a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800717e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b00      	cmp	r3, #0
 800718c:	f000 817d 	beq.w	800748a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007190:	4ba6      	ldr	r3, [pc, #664]	; (800742c <HAL_RCC_OscConfig+0x5e8>)
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f003 030c 	and.w	r3, r3, #12
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00b      	beq.n	80071b4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800719c:	4ba3      	ldr	r3, [pc, #652]	; (800742c <HAL_RCC_OscConfig+0x5e8>)
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f003 030c 	and.w	r3, r3, #12
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	d172      	bne.n	800728e <HAL_RCC_OscConfig+0x44a>
 80071a8:	4ba0      	ldr	r3, [pc, #640]	; (800742c <HAL_RCC_OscConfig+0x5e8>)
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d16c      	bne.n	800728e <HAL_RCC_OscConfig+0x44a>
 80071b4:	2302      	movs	r3, #2
 80071b6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80071be:	fa93 f3a3 	rbit	r3, r3
 80071c2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80071c6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071ca:	fab3 f383 	clz	r3, r3
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	095b      	lsrs	r3, r3, #5
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	f043 0301 	orr.w	r3, r3, #1
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d102      	bne.n	80071e4 <HAL_RCC_OscConfig+0x3a0>
 80071de:	4b93      	ldr	r3, [pc, #588]	; (800742c <HAL_RCC_OscConfig+0x5e8>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	e013      	b.n	800720c <HAL_RCC_OscConfig+0x3c8>
 80071e4:	2302      	movs	r3, #2
 80071e6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ea:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80071ee:	fa93 f3a3 	rbit	r3, r3
 80071f2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80071f6:	2302      	movs	r3, #2
 80071f8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80071fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007200:	fa93 f3a3 	rbit	r3, r3
 8007204:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8007208:	4b88      	ldr	r3, [pc, #544]	; (800742c <HAL_RCC_OscConfig+0x5e8>)
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	2202      	movs	r2, #2
 800720e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007212:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007216:	fa92 f2a2 	rbit	r2, r2
 800721a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800721e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007222:	fab2 f282 	clz	r2, r2
 8007226:	b2d2      	uxtb	r2, r2
 8007228:	f042 0220 	orr.w	r2, r2, #32
 800722c:	b2d2      	uxtb	r2, r2
 800722e:	f002 021f 	and.w	r2, r2, #31
 8007232:	2101      	movs	r1, #1
 8007234:	fa01 f202 	lsl.w	r2, r1, r2
 8007238:	4013      	ands	r3, r2
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <HAL_RCC_OscConfig+0x410>
 800723e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007242:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d002      	beq.n	8007254 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	f000 be2e 	b.w	8007eb0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007254:	4b75      	ldr	r3, [pc, #468]	; (800742c <HAL_RCC_OscConfig+0x5e8>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800725c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007260:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	21f8      	movs	r1, #248	; 0xf8
 800726a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800726e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007272:	fa91 f1a1 	rbit	r1, r1
 8007276:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800727a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800727e:	fab1 f181 	clz	r1, r1
 8007282:	b2c9      	uxtb	r1, r1
 8007284:	408b      	lsls	r3, r1
 8007286:	4969      	ldr	r1, [pc, #420]	; (800742c <HAL_RCC_OscConfig+0x5e8>)
 8007288:	4313      	orrs	r3, r2
 800728a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800728c:	e0fd      	b.n	800748a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800728e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007292:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 8088 	beq.w	80073b0 <HAL_RCC_OscConfig+0x56c>
 80072a0:	2301      	movs	r3, #1
 80072a2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80072aa:	fa93 f3a3 	rbit	r3, r3
 80072ae:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80072b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80072b6:	fab3 f383 	clz	r3, r3
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80072c0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	461a      	mov	r2, r3
 80072c8:	2301      	movs	r3, #1
 80072ca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072cc:	f7fc fa86 	bl	80037dc <HAL_GetTick>
 80072d0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072d4:	e00a      	b.n	80072ec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072d6:	f7fc fa81 	bl	80037dc <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d902      	bls.n	80072ec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	f000 bde2 	b.w	8007eb0 <HAL_RCC_OscConfig+0x106c>
 80072ec:	2302      	movs	r3, #2
 80072ee:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072f2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80072f6:	fa93 f3a3 	rbit	r3, r3
 80072fa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80072fe:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007302:	fab3 f383 	clz	r3, r3
 8007306:	b2db      	uxtb	r3, r3
 8007308:	095b      	lsrs	r3, r3, #5
 800730a:	b2db      	uxtb	r3, r3
 800730c:	f043 0301 	orr.w	r3, r3, #1
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b01      	cmp	r3, #1
 8007314:	d102      	bne.n	800731c <HAL_RCC_OscConfig+0x4d8>
 8007316:	4b45      	ldr	r3, [pc, #276]	; (800742c <HAL_RCC_OscConfig+0x5e8>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	e013      	b.n	8007344 <HAL_RCC_OscConfig+0x500>
 800731c:	2302      	movs	r3, #2
 800731e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007322:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007326:	fa93 f3a3 	rbit	r3, r3
 800732a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800732e:	2302      	movs	r3, #2
 8007330:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007334:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007338:	fa93 f3a3 	rbit	r3, r3
 800733c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007340:	4b3a      	ldr	r3, [pc, #232]	; (800742c <HAL_RCC_OscConfig+0x5e8>)
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	2202      	movs	r2, #2
 8007346:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800734a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800734e:	fa92 f2a2 	rbit	r2, r2
 8007352:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007356:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800735a:	fab2 f282 	clz	r2, r2
 800735e:	b2d2      	uxtb	r2, r2
 8007360:	f042 0220 	orr.w	r2, r2, #32
 8007364:	b2d2      	uxtb	r2, r2
 8007366:	f002 021f 	and.w	r2, r2, #31
 800736a:	2101      	movs	r1, #1
 800736c:	fa01 f202 	lsl.w	r2, r1, r2
 8007370:	4013      	ands	r3, r2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0af      	beq.n	80072d6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007376:	4b2d      	ldr	r3, [pc, #180]	; (800742c <HAL_RCC_OscConfig+0x5e8>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800737e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007382:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	695b      	ldr	r3, [r3, #20]
 800738a:	21f8      	movs	r1, #248	; 0xf8
 800738c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007390:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007394:	fa91 f1a1 	rbit	r1, r1
 8007398:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800739c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80073a0:	fab1 f181 	clz	r1, r1
 80073a4:	b2c9      	uxtb	r1, r1
 80073a6:	408b      	lsls	r3, r1
 80073a8:	4920      	ldr	r1, [pc, #128]	; (800742c <HAL_RCC_OscConfig+0x5e8>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	600b      	str	r3, [r1, #0]
 80073ae:	e06c      	b.n	800748a <HAL_RCC_OscConfig+0x646>
 80073b0:	2301      	movs	r3, #1
 80073b2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80073ba:	fa93 f3a3 	rbit	r3, r3
 80073be:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80073c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073c6:	fab3 f383 	clz	r3, r3
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80073d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	461a      	mov	r2, r3
 80073d8:	2300      	movs	r3, #0
 80073da:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073dc:	f7fc f9fe 	bl	80037dc <HAL_GetTick>
 80073e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073e4:	e00a      	b.n	80073fc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073e6:	f7fc f9f9 	bl	80037dc <HAL_GetTick>
 80073ea:	4602      	mov	r2, r0
 80073ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	2b02      	cmp	r3, #2
 80073f4:	d902      	bls.n	80073fc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	f000 bd5a 	b.w	8007eb0 <HAL_RCC_OscConfig+0x106c>
 80073fc:	2302      	movs	r3, #2
 80073fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007402:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007406:	fa93 f3a3 	rbit	r3, r3
 800740a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800740e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007412:	fab3 f383 	clz	r3, r3
 8007416:	b2db      	uxtb	r3, r3
 8007418:	095b      	lsrs	r3, r3, #5
 800741a:	b2db      	uxtb	r3, r3
 800741c:	f043 0301 	orr.w	r3, r3, #1
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b01      	cmp	r3, #1
 8007424:	d104      	bne.n	8007430 <HAL_RCC_OscConfig+0x5ec>
 8007426:	4b01      	ldr	r3, [pc, #4]	; (800742c <HAL_RCC_OscConfig+0x5e8>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	e015      	b.n	8007458 <HAL_RCC_OscConfig+0x614>
 800742c:	40021000 	.word	0x40021000
 8007430:	2302      	movs	r3, #2
 8007432:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007436:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800743a:	fa93 f3a3 	rbit	r3, r3
 800743e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007442:	2302      	movs	r3, #2
 8007444:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007448:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800744c:	fa93 f3a3 	rbit	r3, r3
 8007450:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007454:	4bc8      	ldr	r3, [pc, #800]	; (8007778 <HAL_RCC_OscConfig+0x934>)
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	2202      	movs	r2, #2
 800745a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800745e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007462:	fa92 f2a2 	rbit	r2, r2
 8007466:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800746a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800746e:	fab2 f282 	clz	r2, r2
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	f042 0220 	orr.w	r2, r2, #32
 8007478:	b2d2      	uxtb	r2, r2
 800747a:	f002 021f 	and.w	r2, r2, #31
 800747e:	2101      	movs	r1, #1
 8007480:	fa01 f202 	lsl.w	r2, r1, r2
 8007484:	4013      	ands	r3, r2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1ad      	bne.n	80073e6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800748a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800748e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0308 	and.w	r3, r3, #8
 800749a:	2b00      	cmp	r3, #0
 800749c:	f000 8110 	beq.w	80076c0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80074a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d079      	beq.n	80075a4 <HAL_RCC_OscConfig+0x760>
 80074b0:	2301      	movs	r3, #1
 80074b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80074ba:	fa93 f3a3 	rbit	r3, r3
 80074be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80074c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074c6:	fab3 f383 	clz	r3, r3
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	461a      	mov	r2, r3
 80074ce:	4bab      	ldr	r3, [pc, #684]	; (800777c <HAL_RCC_OscConfig+0x938>)
 80074d0:	4413      	add	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	461a      	mov	r2, r3
 80074d6:	2301      	movs	r3, #1
 80074d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074da:	f7fc f97f 	bl	80037dc <HAL_GetTick>
 80074de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074e2:	e00a      	b.n	80074fa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074e4:	f7fc f97a 	bl	80037dc <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d902      	bls.n	80074fa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	f000 bcdb 	b.w	8007eb0 <HAL_RCC_OscConfig+0x106c>
 80074fa:	2302      	movs	r3, #2
 80074fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007500:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007504:	fa93 f3a3 	rbit	r3, r3
 8007508:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800750c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007510:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007514:	2202      	movs	r2, #2
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800751c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	fa93 f2a3 	rbit	r2, r3
 8007526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800752a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800752e:	601a      	str	r2, [r3, #0]
 8007530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007538:	2202      	movs	r2, #2
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	fa93 f2a3 	rbit	r2, r3
 800754a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800754e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007552:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007554:	4b88      	ldr	r3, [pc, #544]	; (8007778 <HAL_RCC_OscConfig+0x934>)
 8007556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800755c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007560:	2102      	movs	r1, #2
 8007562:	6019      	str	r1, [r3, #0]
 8007564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007568:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	fa93 f1a3 	rbit	r1, r3
 8007572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007576:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800757a:	6019      	str	r1, [r3, #0]
  return result;
 800757c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007580:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	fab3 f383 	clz	r3, r3
 800758a:	b2db      	uxtb	r3, r3
 800758c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007590:	b2db      	uxtb	r3, r3
 8007592:	f003 031f 	and.w	r3, r3, #31
 8007596:	2101      	movs	r1, #1
 8007598:	fa01 f303 	lsl.w	r3, r1, r3
 800759c:	4013      	ands	r3, r2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0a0      	beq.n	80074e4 <HAL_RCC_OscConfig+0x6a0>
 80075a2:	e08d      	b.n	80076c0 <HAL_RCC_OscConfig+0x87c>
 80075a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80075ac:	2201      	movs	r2, #1
 80075ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	fa93 f2a3 	rbit	r2, r3
 80075be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80075c6:	601a      	str	r2, [r3, #0]
  return result;
 80075c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80075d0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075d2:	fab3 f383 	clz	r3, r3
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	461a      	mov	r2, r3
 80075da:	4b68      	ldr	r3, [pc, #416]	; (800777c <HAL_RCC_OscConfig+0x938>)
 80075dc:	4413      	add	r3, r2
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	461a      	mov	r2, r3
 80075e2:	2300      	movs	r3, #0
 80075e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075e6:	f7fc f8f9 	bl	80037dc <HAL_GetTick>
 80075ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075ee:	e00a      	b.n	8007606 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075f0:	f7fc f8f4 	bl	80037dc <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d902      	bls.n	8007606 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	f000 bc55 	b.w	8007eb0 <HAL_RCC_OscConfig+0x106c>
 8007606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800760a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800760e:	2202      	movs	r2, #2
 8007610:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007612:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007616:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	fa93 f2a3 	rbit	r2, r3
 8007620:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007624:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800762e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007632:	2202      	movs	r2, #2
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800763a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	fa93 f2a3 	rbit	r2, r3
 8007644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007648:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007656:	2202      	movs	r2, #2
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800765e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	fa93 f2a3 	rbit	r2, r3
 8007668:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800766c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007670:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007672:	4b41      	ldr	r3, [pc, #260]	; (8007778 <HAL_RCC_OscConfig+0x934>)
 8007674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800767a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800767e:	2102      	movs	r1, #2
 8007680:	6019      	str	r1, [r3, #0]
 8007682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007686:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	fa93 f1a3 	rbit	r1, r3
 8007690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007694:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007698:	6019      	str	r1, [r3, #0]
  return result;
 800769a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800769e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	fab3 f383 	clz	r3, r3
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	f003 031f 	and.w	r3, r3, #31
 80076b4:	2101      	movs	r1, #1
 80076b6:	fa01 f303 	lsl.w	r3, r1, r3
 80076ba:	4013      	ands	r3, r2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d197      	bne.n	80075f0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0304 	and.w	r3, r3, #4
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 81a1 	beq.w	8007a18 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076d6:	2300      	movs	r3, #0
 80076d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076dc:	4b26      	ldr	r3, [pc, #152]	; (8007778 <HAL_RCC_OscConfig+0x934>)
 80076de:	69db      	ldr	r3, [r3, #28]
 80076e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d116      	bne.n	8007716 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076e8:	4b23      	ldr	r3, [pc, #140]	; (8007778 <HAL_RCC_OscConfig+0x934>)
 80076ea:	69db      	ldr	r3, [r3, #28]
 80076ec:	4a22      	ldr	r2, [pc, #136]	; (8007778 <HAL_RCC_OscConfig+0x934>)
 80076ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076f2:	61d3      	str	r3, [r2, #28]
 80076f4:	4b20      	ldr	r3, [pc, #128]	; (8007778 <HAL_RCC_OscConfig+0x934>)
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80076fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007700:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007704:	601a      	str	r2, [r3, #0]
 8007706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800770a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800770e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007710:	2301      	movs	r3, #1
 8007712:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007716:	4b1a      	ldr	r3, [pc, #104]	; (8007780 <HAL_RCC_OscConfig+0x93c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800771e:	2b00      	cmp	r3, #0
 8007720:	d11a      	bne.n	8007758 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007722:	4b17      	ldr	r3, [pc, #92]	; (8007780 <HAL_RCC_OscConfig+0x93c>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a16      	ldr	r2, [pc, #88]	; (8007780 <HAL_RCC_OscConfig+0x93c>)
 8007728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800772c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800772e:	f7fc f855 	bl	80037dc <HAL_GetTick>
 8007732:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007736:	e009      	b.n	800774c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007738:	f7fc f850 	bl	80037dc <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	2b64      	cmp	r3, #100	; 0x64
 8007746:	d901      	bls.n	800774c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e3b1      	b.n	8007eb0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800774c:	4b0c      	ldr	r3, [pc, #48]	; (8007780 <HAL_RCC_OscConfig+0x93c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007754:	2b00      	cmp	r3, #0
 8007756:	d0ef      	beq.n	8007738 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800775c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d10d      	bne.n	8007784 <HAL_RCC_OscConfig+0x940>
 8007768:	4b03      	ldr	r3, [pc, #12]	; (8007778 <HAL_RCC_OscConfig+0x934>)
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	4a02      	ldr	r2, [pc, #8]	; (8007778 <HAL_RCC_OscConfig+0x934>)
 800776e:	f043 0301 	orr.w	r3, r3, #1
 8007772:	6213      	str	r3, [r2, #32]
 8007774:	e03c      	b.n	80077f0 <HAL_RCC_OscConfig+0x9ac>
 8007776:	bf00      	nop
 8007778:	40021000 	.word	0x40021000
 800777c:	10908120 	.word	0x10908120
 8007780:	40007000 	.word	0x40007000
 8007784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007788:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10c      	bne.n	80077ae <HAL_RCC_OscConfig+0x96a>
 8007794:	4bc1      	ldr	r3, [pc, #772]	; (8007a9c <HAL_RCC_OscConfig+0xc58>)
 8007796:	6a1b      	ldr	r3, [r3, #32]
 8007798:	4ac0      	ldr	r2, [pc, #768]	; (8007a9c <HAL_RCC_OscConfig+0xc58>)
 800779a:	f023 0301 	bic.w	r3, r3, #1
 800779e:	6213      	str	r3, [r2, #32]
 80077a0:	4bbe      	ldr	r3, [pc, #760]	; (8007a9c <HAL_RCC_OscConfig+0xc58>)
 80077a2:	6a1b      	ldr	r3, [r3, #32]
 80077a4:	4abd      	ldr	r2, [pc, #756]	; (8007a9c <HAL_RCC_OscConfig+0xc58>)
 80077a6:	f023 0304 	bic.w	r3, r3, #4
 80077aa:	6213      	str	r3, [r2, #32]
 80077ac:	e020      	b.n	80077f0 <HAL_RCC_OscConfig+0x9ac>
 80077ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	2b05      	cmp	r3, #5
 80077bc:	d10c      	bne.n	80077d8 <HAL_RCC_OscConfig+0x994>
 80077be:	4bb7      	ldr	r3, [pc, #732]	; (8007a9c <HAL_RCC_OscConfig+0xc58>)
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	4ab6      	ldr	r2, [pc, #728]	; (8007a9c <HAL_RCC_OscConfig+0xc58>)
 80077c4:	f043 0304 	orr.w	r3, r3, #4
 80077c8:	6213      	str	r3, [r2, #32]
 80077ca:	4bb4      	ldr	r3, [pc, #720]	; (8007a9c <HAL_RCC_OscConfig+0xc58>)
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	4ab3      	ldr	r2, [pc, #716]	; (8007a9c <HAL_RCC_OscConfig+0xc58>)
 80077d0:	f043 0301 	orr.w	r3, r3, #1
 80077d4:	6213      	str	r3, [r2, #32]
 80077d6:	e00b      	b.n	80077f0 <HAL_RCC_OscConfig+0x9ac>
 80077d8:	4bb0      	ldr	r3, [pc, #704]	; (8007a9c <HAL_RCC_OscConfig+0xc58>)
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	4aaf      	ldr	r2, [pc, #700]	; (8007a9c <HAL_RCC_OscConfig+0xc58>)
 80077de:	f023 0301 	bic.w	r3, r3, #1
 80077e2:	6213      	str	r3, [r2, #32]
 80077e4:	4bad      	ldr	r3, [pc, #692]	; (8007a9c <HAL_RCC_OscConfig+0xc58>)
 80077e6:	6a1b      	ldr	r3, [r3, #32]
 80077e8:	4aac      	ldr	r2, [pc, #688]	; (8007a9c <HAL_RCC_OscConfig+0xc58>)
 80077ea:	f023 0304 	bic.w	r3, r3, #4
 80077ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80077f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 8081 	beq.w	8007904 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007802:	f7fb ffeb 	bl	80037dc <HAL_GetTick>
 8007806:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800780a:	e00b      	b.n	8007824 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800780c:	f7fb ffe6 	bl	80037dc <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	f241 3288 	movw	r2, #5000	; 0x1388
 800781c:	4293      	cmp	r3, r2
 800781e:	d901      	bls.n	8007824 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e345      	b.n	8007eb0 <HAL_RCC_OscConfig+0x106c>
 8007824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007828:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800782c:	2202      	movs	r2, #2
 800782e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007834:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	fa93 f2a3 	rbit	r2, r3
 800783e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007842:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800784c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007850:	2202      	movs	r2, #2
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007858:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	fa93 f2a3 	rbit	r2, r3
 8007862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007866:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800786a:	601a      	str	r2, [r3, #0]
  return result;
 800786c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007870:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007874:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007876:	fab3 f383 	clz	r3, r3
 800787a:	b2db      	uxtb	r3, r3
 800787c:	095b      	lsrs	r3, r3, #5
 800787e:	b2db      	uxtb	r3, r3
 8007880:	f043 0302 	orr.w	r3, r3, #2
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b02      	cmp	r3, #2
 8007888:	d102      	bne.n	8007890 <HAL_RCC_OscConfig+0xa4c>
 800788a:	4b84      	ldr	r3, [pc, #528]	; (8007a9c <HAL_RCC_OscConfig+0xc58>)
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	e013      	b.n	80078b8 <HAL_RCC_OscConfig+0xa74>
 8007890:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007894:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007898:	2202      	movs	r2, #2
 800789a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800789c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078a0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	fa93 f2a3 	rbit	r2, r3
 80078aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078ae:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	4b79      	ldr	r3, [pc, #484]	; (8007a9c <HAL_RCC_OscConfig+0xc58>)
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80078c0:	2102      	movs	r1, #2
 80078c2:	6011      	str	r1, [r2, #0]
 80078c4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078c8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80078cc:	6812      	ldr	r2, [r2, #0]
 80078ce:	fa92 f1a2 	rbit	r1, r2
 80078d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078d6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80078da:	6011      	str	r1, [r2, #0]
  return result;
 80078dc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078e0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80078e4:	6812      	ldr	r2, [r2, #0]
 80078e6:	fab2 f282 	clz	r2, r2
 80078ea:	b2d2      	uxtb	r2, r2
 80078ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078f0:	b2d2      	uxtb	r2, r2
 80078f2:	f002 021f 	and.w	r2, r2, #31
 80078f6:	2101      	movs	r1, #1
 80078f8:	fa01 f202 	lsl.w	r2, r1, r2
 80078fc:	4013      	ands	r3, r2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d084      	beq.n	800780c <HAL_RCC_OscConfig+0x9c8>
 8007902:	e07f      	b.n	8007a04 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007904:	f7fb ff6a 	bl	80037dc <HAL_GetTick>
 8007908:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800790c:	e00b      	b.n	8007926 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800790e:	f7fb ff65 	bl	80037dc <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	f241 3288 	movw	r2, #5000	; 0x1388
 800791e:	4293      	cmp	r3, r2
 8007920:	d901      	bls.n	8007926 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e2c4      	b.n	8007eb0 <HAL_RCC_OscConfig+0x106c>
 8007926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800792a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800792e:	2202      	movs	r2, #2
 8007930:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007936:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	fa93 f2a3 	rbit	r2, r3
 8007940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007944:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800794e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007952:	2202      	movs	r2, #2
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800795a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	fa93 f2a3 	rbit	r2, r3
 8007964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007968:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800796c:	601a      	str	r2, [r3, #0]
  return result;
 800796e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007972:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007976:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007978:	fab3 f383 	clz	r3, r3
 800797c:	b2db      	uxtb	r3, r3
 800797e:	095b      	lsrs	r3, r3, #5
 8007980:	b2db      	uxtb	r3, r3
 8007982:	f043 0302 	orr.w	r3, r3, #2
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b02      	cmp	r3, #2
 800798a:	d102      	bne.n	8007992 <HAL_RCC_OscConfig+0xb4e>
 800798c:	4b43      	ldr	r3, [pc, #268]	; (8007a9c <HAL_RCC_OscConfig+0xc58>)
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	e013      	b.n	80079ba <HAL_RCC_OscConfig+0xb76>
 8007992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007996:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800799a:	2202      	movs	r2, #2
 800799c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800799e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079a2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	fa93 f2a3 	rbit	r2, r3
 80079ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079b0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	4b39      	ldr	r3, [pc, #228]	; (8007a9c <HAL_RCC_OscConfig+0xc58>)
 80079b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80079be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80079c2:	2102      	movs	r1, #2
 80079c4:	6011      	str	r1, [r2, #0]
 80079c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80079ca:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80079ce:	6812      	ldr	r2, [r2, #0]
 80079d0:	fa92 f1a2 	rbit	r1, r2
 80079d4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80079d8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80079dc:	6011      	str	r1, [r2, #0]
  return result;
 80079de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80079e2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80079e6:	6812      	ldr	r2, [r2, #0]
 80079e8:	fab2 f282 	clz	r2, r2
 80079ec:	b2d2      	uxtb	r2, r2
 80079ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079f2:	b2d2      	uxtb	r2, r2
 80079f4:	f002 021f 	and.w	r2, r2, #31
 80079f8:	2101      	movs	r1, #1
 80079fa:	fa01 f202 	lsl.w	r2, r1, r2
 80079fe:	4013      	ands	r3, r2
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d184      	bne.n	800790e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007a04:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d105      	bne.n	8007a18 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a0c:	4b23      	ldr	r3, [pc, #140]	; (8007a9c <HAL_RCC_OscConfig+0xc58>)
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	4a22      	ldr	r2, [pc, #136]	; (8007a9c <HAL_RCC_OscConfig+0xc58>)
 8007a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a16:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a1c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69db      	ldr	r3, [r3, #28]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 8242 	beq.w	8007eae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a2a:	4b1c      	ldr	r3, [pc, #112]	; (8007a9c <HAL_RCC_OscConfig+0xc58>)
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f003 030c 	and.w	r3, r3, #12
 8007a32:	2b08      	cmp	r3, #8
 8007a34:	f000 8213 	beq.w	8007e5e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	f040 8162 	bne.w	8007d0e <HAL_RCC_OscConfig+0xeca>
 8007a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a4e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007a52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a5c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	fa93 f2a3 	rbit	r2, r3
 8007a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a6a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007a6e:	601a      	str	r2, [r3, #0]
  return result;
 8007a70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a74:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007a78:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a7a:	fab3 f383 	clz	r3, r3
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007a84:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a90:	f7fb fea4 	bl	80037dc <HAL_GetTick>
 8007a94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a98:	e00c      	b.n	8007ab4 <HAL_RCC_OscConfig+0xc70>
 8007a9a:	bf00      	nop
 8007a9c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007aa0:	f7fb fe9c 	bl	80037dc <HAL_GetTick>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d901      	bls.n	8007ab4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e1fd      	b.n	8007eb0 <HAL_RCC_OscConfig+0x106c>
 8007ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ab8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007abc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ac0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ac6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	fa93 f2a3 	rbit	r2, r3
 8007ad0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ad4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007ad8:	601a      	str	r2, [r3, #0]
  return result;
 8007ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ade:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007ae2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ae4:	fab3 f383 	clz	r3, r3
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	095b      	lsrs	r3, r3, #5
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	f043 0301 	orr.w	r3, r3, #1
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d102      	bne.n	8007afe <HAL_RCC_OscConfig+0xcba>
 8007af8:	4bb0      	ldr	r3, [pc, #704]	; (8007dbc <HAL_RCC_OscConfig+0xf78>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	e027      	b.n	8007b4e <HAL_RCC_OscConfig+0xd0a>
 8007afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b02:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007b06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007b0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b10:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	fa93 f2a3 	rbit	r2, r3
 8007b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b1e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b28:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007b2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007b30:	601a      	str	r2, [r3, #0]
 8007b32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b36:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	fa93 f2a3 	rbit	r2, r3
 8007b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b44:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	4b9c      	ldr	r3, [pc, #624]	; (8007dbc <HAL_RCC_OscConfig+0xf78>)
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007b52:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007b56:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007b5a:	6011      	str	r1, [r2, #0]
 8007b5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007b60:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007b64:	6812      	ldr	r2, [r2, #0]
 8007b66:	fa92 f1a2 	rbit	r1, r2
 8007b6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007b6e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007b72:	6011      	str	r1, [r2, #0]
  return result;
 8007b74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007b78:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007b7c:	6812      	ldr	r2, [r2, #0]
 8007b7e:	fab2 f282 	clz	r2, r2
 8007b82:	b2d2      	uxtb	r2, r2
 8007b84:	f042 0220 	orr.w	r2, r2, #32
 8007b88:	b2d2      	uxtb	r2, r2
 8007b8a:	f002 021f 	and.w	r2, r2, #31
 8007b8e:	2101      	movs	r1, #1
 8007b90:	fa01 f202 	lsl.w	r2, r1, r2
 8007b94:	4013      	ands	r3, r2
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d182      	bne.n	8007aa0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b9a:	4b88      	ldr	r3, [pc, #544]	; (8007dbc <HAL_RCC_OscConfig+0xf78>)
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007ba2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ba6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	430b      	orrs	r3, r1
 8007bbc:	497f      	ldr	r1, [pc, #508]	; (8007dbc <HAL_RCC_OscConfig+0xf78>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	604b      	str	r3, [r1, #4]
 8007bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bc6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007bca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bd4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	fa93 f2a3 	rbit	r2, r3
 8007bde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007be2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007be6:	601a      	str	r2, [r3, #0]
  return result;
 8007be8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007bf0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bf2:	fab3 f383 	clz	r3, r3
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007bfc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	461a      	mov	r2, r3
 8007c04:	2301      	movs	r3, #1
 8007c06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c08:	f7fb fde8 	bl	80037dc <HAL_GetTick>
 8007c0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007c10:	e009      	b.n	8007c26 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c12:	f7fb fde3 	bl	80037dc <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d901      	bls.n	8007c26 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e144      	b.n	8007eb0 <HAL_RCC_OscConfig+0x106c>
 8007c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c2a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007c2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007c32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c38:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	fa93 f2a3 	rbit	r2, r3
 8007c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c46:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007c4a:	601a      	str	r2, [r3, #0]
  return result;
 8007c4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c50:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007c54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007c56:	fab3 f383 	clz	r3, r3
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	095b      	lsrs	r3, r3, #5
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	f043 0301 	orr.w	r3, r3, #1
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d102      	bne.n	8007c70 <HAL_RCC_OscConfig+0xe2c>
 8007c6a:	4b54      	ldr	r3, [pc, #336]	; (8007dbc <HAL_RCC_OscConfig+0xf78>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	e027      	b.n	8007cc0 <HAL_RCC_OscConfig+0xe7c>
 8007c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c74:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007c78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007c7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c82:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	fa93 f2a3 	rbit	r2, r3
 8007c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c90:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007c94:	601a      	str	r2, [r3, #0]
 8007c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c9a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007c9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ca8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	fa93 f2a3 	rbit	r2, r3
 8007cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cb6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	4b3f      	ldr	r3, [pc, #252]	; (8007dbc <HAL_RCC_OscConfig+0xf78>)
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007cc4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007cc8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007ccc:	6011      	str	r1, [r2, #0]
 8007cce:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007cd2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007cd6:	6812      	ldr	r2, [r2, #0]
 8007cd8:	fa92 f1a2 	rbit	r1, r2
 8007cdc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ce0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007ce4:	6011      	str	r1, [r2, #0]
  return result;
 8007ce6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007cea:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007cee:	6812      	ldr	r2, [r2, #0]
 8007cf0:	fab2 f282 	clz	r2, r2
 8007cf4:	b2d2      	uxtb	r2, r2
 8007cf6:	f042 0220 	orr.w	r2, r2, #32
 8007cfa:	b2d2      	uxtb	r2, r2
 8007cfc:	f002 021f 	and.w	r2, r2, #31
 8007d00:	2101      	movs	r1, #1
 8007d02:	fa01 f202 	lsl.w	r2, r1, r2
 8007d06:	4013      	ands	r3, r2
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d082      	beq.n	8007c12 <HAL_RCC_OscConfig+0xdce>
 8007d0c:	e0cf      	b.n	8007eae <HAL_RCC_OscConfig+0x106a>
 8007d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d12:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007d16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d20:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	fa93 f2a3 	rbit	r2, r3
 8007d2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d2e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007d32:	601a      	str	r2, [r3, #0]
  return result;
 8007d34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d38:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007d3c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d3e:	fab3 f383 	clz	r3, r3
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007d48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	461a      	mov	r2, r3
 8007d50:	2300      	movs	r3, #0
 8007d52:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d54:	f7fb fd42 	bl	80037dc <HAL_GetTick>
 8007d58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d5c:	e009      	b.n	8007d72 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d5e:	f7fb fd3d 	bl	80037dc <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d901      	bls.n	8007d72 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e09e      	b.n	8007eb0 <HAL_RCC_OscConfig+0x106c>
 8007d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d76:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007d7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007d7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d84:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	fa93 f2a3 	rbit	r2, r3
 8007d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d92:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007d96:	601a      	str	r2, [r3, #0]
  return result;
 8007d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d9c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007da0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007da2:	fab3 f383 	clz	r3, r3
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	095b      	lsrs	r3, r3, #5
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	f043 0301 	orr.w	r3, r3, #1
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d104      	bne.n	8007dc0 <HAL_RCC_OscConfig+0xf7c>
 8007db6:	4b01      	ldr	r3, [pc, #4]	; (8007dbc <HAL_RCC_OscConfig+0xf78>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	e029      	b.n	8007e10 <HAL_RCC_OscConfig+0xfcc>
 8007dbc:	40021000 	.word	0x40021000
 8007dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dc4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007dc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007dcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dd2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	fa93 f2a3 	rbit	r2, r3
 8007ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007de0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dea:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007dee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007df8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	fa93 f2a3 	rbit	r2, r3
 8007e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e06:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007e0a:	601a      	str	r2, [r3, #0]
 8007e0c:	4b2b      	ldr	r3, [pc, #172]	; (8007ebc <HAL_RCC_OscConfig+0x1078>)
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e14:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007e18:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007e1c:	6011      	str	r1, [r2, #0]
 8007e1e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e22:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007e26:	6812      	ldr	r2, [r2, #0]
 8007e28:	fa92 f1a2 	rbit	r1, r2
 8007e2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e30:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007e34:	6011      	str	r1, [r2, #0]
  return result;
 8007e36:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e3a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007e3e:	6812      	ldr	r2, [r2, #0]
 8007e40:	fab2 f282 	clz	r2, r2
 8007e44:	b2d2      	uxtb	r2, r2
 8007e46:	f042 0220 	orr.w	r2, r2, #32
 8007e4a:	b2d2      	uxtb	r2, r2
 8007e4c:	f002 021f 	and.w	r2, r2, #31
 8007e50:	2101      	movs	r1, #1
 8007e52:	fa01 f202 	lsl.w	r2, r1, r2
 8007e56:	4013      	ands	r3, r2
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d180      	bne.n	8007d5e <HAL_RCC_OscConfig+0xf1a>
 8007e5c:	e027      	b.n	8007eae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	69db      	ldr	r3, [r3, #28]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d101      	bne.n	8007e72 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e01e      	b.n	8007eb0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007e72:	4b12      	ldr	r3, [pc, #72]	; (8007ebc <HAL_RCC_OscConfig+0x1078>)
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007e7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007e7e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e86:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d10b      	bne.n	8007eaa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8007e92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007e96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d001      	beq.n	8007eae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e000      	b.n	8007eb0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	40021000 	.word	0x40021000

08007ec0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b09e      	sub	sp, #120	; 0x78
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e162      	b.n	800819e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ed8:	4b90      	ldr	r3, [pc, #576]	; (800811c <HAL_RCC_ClockConfig+0x25c>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0307 	and.w	r3, r3, #7
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d910      	bls.n	8007f08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ee6:	4b8d      	ldr	r3, [pc, #564]	; (800811c <HAL_RCC_ClockConfig+0x25c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f023 0207 	bic.w	r2, r3, #7
 8007eee:	498b      	ldr	r1, [pc, #556]	; (800811c <HAL_RCC_ClockConfig+0x25c>)
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ef6:	4b89      	ldr	r3, [pc, #548]	; (800811c <HAL_RCC_ClockConfig+0x25c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0307 	and.w	r3, r3, #7
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d001      	beq.n	8007f08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e14a      	b.n	800819e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0302 	and.w	r3, r3, #2
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d008      	beq.n	8007f26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f14:	4b82      	ldr	r3, [pc, #520]	; (8008120 <HAL_RCC_ClockConfig+0x260>)
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	497f      	ldr	r1, [pc, #508]	; (8008120 <HAL_RCC_ClockConfig+0x260>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f000 80dc 	beq.w	80080ec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d13c      	bne.n	8007fb6 <HAL_RCC_ClockConfig+0xf6>
 8007f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f40:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f44:	fa93 f3a3 	rbit	r3, r3
 8007f48:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f4c:	fab3 f383 	clz	r3, r3
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	095b      	lsrs	r3, r3, #5
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	f043 0301 	orr.w	r3, r3, #1
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d102      	bne.n	8007f66 <HAL_RCC_ClockConfig+0xa6>
 8007f60:	4b6f      	ldr	r3, [pc, #444]	; (8008120 <HAL_RCC_ClockConfig+0x260>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	e00f      	b.n	8007f86 <HAL_RCC_ClockConfig+0xc6>
 8007f66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f6e:	fa93 f3a3 	rbit	r3, r3
 8007f72:	667b      	str	r3, [r7, #100]	; 0x64
 8007f74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f78:	663b      	str	r3, [r7, #96]	; 0x60
 8007f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f7c:	fa93 f3a3 	rbit	r3, r3
 8007f80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f82:	4b67      	ldr	r3, [pc, #412]	; (8008120 <HAL_RCC_ClockConfig+0x260>)
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007f8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f8e:	fa92 f2a2 	rbit	r2, r2
 8007f92:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007f94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f96:	fab2 f282 	clz	r2, r2
 8007f9a:	b2d2      	uxtb	r2, r2
 8007f9c:	f042 0220 	orr.w	r2, r2, #32
 8007fa0:	b2d2      	uxtb	r2, r2
 8007fa2:	f002 021f 	and.w	r2, r2, #31
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8007fac:	4013      	ands	r3, r2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d17b      	bne.n	80080aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e0f3      	b.n	800819e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d13c      	bne.n	8008038 <HAL_RCC_ClockConfig+0x178>
 8007fbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fc2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fc6:	fa93 f3a3 	rbit	r3, r3
 8007fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fce:	fab3 f383 	clz	r3, r3
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	095b      	lsrs	r3, r3, #5
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	f043 0301 	orr.w	r3, r3, #1
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d102      	bne.n	8007fe8 <HAL_RCC_ClockConfig+0x128>
 8007fe2:	4b4f      	ldr	r3, [pc, #316]	; (8008120 <HAL_RCC_ClockConfig+0x260>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	e00f      	b.n	8008008 <HAL_RCC_ClockConfig+0x148>
 8007fe8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ff0:	fa93 f3a3 	rbit	r3, r3
 8007ff4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ff6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ffa:	643b      	str	r3, [r7, #64]	; 0x40
 8007ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ffe:	fa93 f3a3 	rbit	r3, r3
 8008002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008004:	4b46      	ldr	r3, [pc, #280]	; (8008120 <HAL_RCC_ClockConfig+0x260>)
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800800c:	63ba      	str	r2, [r7, #56]	; 0x38
 800800e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008010:	fa92 f2a2 	rbit	r2, r2
 8008014:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8008016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008018:	fab2 f282 	clz	r2, r2
 800801c:	b2d2      	uxtb	r2, r2
 800801e:	f042 0220 	orr.w	r2, r2, #32
 8008022:	b2d2      	uxtb	r2, r2
 8008024:	f002 021f 	and.w	r2, r2, #31
 8008028:	2101      	movs	r1, #1
 800802a:	fa01 f202 	lsl.w	r2, r1, r2
 800802e:	4013      	ands	r3, r2
 8008030:	2b00      	cmp	r3, #0
 8008032:	d13a      	bne.n	80080aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e0b2      	b.n	800819e <HAL_RCC_ClockConfig+0x2de>
 8008038:	2302      	movs	r3, #2
 800803a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800803c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803e:	fa93 f3a3 	rbit	r3, r3
 8008042:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008046:	fab3 f383 	clz	r3, r3
 800804a:	b2db      	uxtb	r3, r3
 800804c:	095b      	lsrs	r3, r3, #5
 800804e:	b2db      	uxtb	r3, r3
 8008050:	f043 0301 	orr.w	r3, r3, #1
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b01      	cmp	r3, #1
 8008058:	d102      	bne.n	8008060 <HAL_RCC_ClockConfig+0x1a0>
 800805a:	4b31      	ldr	r3, [pc, #196]	; (8008120 <HAL_RCC_ClockConfig+0x260>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	e00d      	b.n	800807c <HAL_RCC_ClockConfig+0x1bc>
 8008060:	2302      	movs	r3, #2
 8008062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008066:	fa93 f3a3 	rbit	r3, r3
 800806a:	627b      	str	r3, [r7, #36]	; 0x24
 800806c:	2302      	movs	r3, #2
 800806e:	623b      	str	r3, [r7, #32]
 8008070:	6a3b      	ldr	r3, [r7, #32]
 8008072:	fa93 f3a3 	rbit	r3, r3
 8008076:	61fb      	str	r3, [r7, #28]
 8008078:	4b29      	ldr	r3, [pc, #164]	; (8008120 <HAL_RCC_ClockConfig+0x260>)
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	2202      	movs	r2, #2
 800807e:	61ba      	str	r2, [r7, #24]
 8008080:	69ba      	ldr	r2, [r7, #24]
 8008082:	fa92 f2a2 	rbit	r2, r2
 8008086:	617a      	str	r2, [r7, #20]
  return result;
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	fab2 f282 	clz	r2, r2
 800808e:	b2d2      	uxtb	r2, r2
 8008090:	f042 0220 	orr.w	r2, r2, #32
 8008094:	b2d2      	uxtb	r2, r2
 8008096:	f002 021f 	and.w	r2, r2, #31
 800809a:	2101      	movs	r1, #1
 800809c:	fa01 f202 	lsl.w	r2, r1, r2
 80080a0:	4013      	ands	r3, r2
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d101      	bne.n	80080aa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e079      	b.n	800819e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080aa:	4b1d      	ldr	r3, [pc, #116]	; (8008120 <HAL_RCC_ClockConfig+0x260>)
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	f023 0203 	bic.w	r2, r3, #3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	491a      	ldr	r1, [pc, #104]	; (8008120 <HAL_RCC_ClockConfig+0x260>)
 80080b8:	4313      	orrs	r3, r2
 80080ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080bc:	f7fb fb8e 	bl	80037dc <HAL_GetTick>
 80080c0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080c2:	e00a      	b.n	80080da <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080c4:	f7fb fb8a 	bl	80037dc <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d901      	bls.n	80080da <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e061      	b.n	800819e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080da:	4b11      	ldr	r3, [pc, #68]	; (8008120 <HAL_RCC_ClockConfig+0x260>)
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	f003 020c 	and.w	r2, r3, #12
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d1eb      	bne.n	80080c4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080ec:	4b0b      	ldr	r3, [pc, #44]	; (800811c <HAL_RCC_ClockConfig+0x25c>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0307 	and.w	r3, r3, #7
 80080f4:	683a      	ldr	r2, [r7, #0]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d214      	bcs.n	8008124 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080fa:	4b08      	ldr	r3, [pc, #32]	; (800811c <HAL_RCC_ClockConfig+0x25c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f023 0207 	bic.w	r2, r3, #7
 8008102:	4906      	ldr	r1, [pc, #24]	; (800811c <HAL_RCC_ClockConfig+0x25c>)
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	4313      	orrs	r3, r2
 8008108:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800810a:	4b04      	ldr	r3, [pc, #16]	; (800811c <HAL_RCC_ClockConfig+0x25c>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0307 	and.w	r3, r3, #7
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	429a      	cmp	r2, r3
 8008116:	d005      	beq.n	8008124 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e040      	b.n	800819e <HAL_RCC_ClockConfig+0x2de>
 800811c:	40022000 	.word	0x40022000
 8008120:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d008      	beq.n	8008142 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008130:	4b1d      	ldr	r3, [pc, #116]	; (80081a8 <HAL_RCC_ClockConfig+0x2e8>)
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	491a      	ldr	r1, [pc, #104]	; (80081a8 <HAL_RCC_ClockConfig+0x2e8>)
 800813e:	4313      	orrs	r3, r2
 8008140:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0308 	and.w	r3, r3, #8
 800814a:	2b00      	cmp	r3, #0
 800814c:	d009      	beq.n	8008162 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800814e:	4b16      	ldr	r3, [pc, #88]	; (80081a8 <HAL_RCC_ClockConfig+0x2e8>)
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	4912      	ldr	r1, [pc, #72]	; (80081a8 <HAL_RCC_ClockConfig+0x2e8>)
 800815e:	4313      	orrs	r3, r2
 8008160:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008162:	f000 f829 	bl	80081b8 <HAL_RCC_GetSysClockFreq>
 8008166:	4601      	mov	r1, r0
 8008168:	4b0f      	ldr	r3, [pc, #60]	; (80081a8 <HAL_RCC_ClockConfig+0x2e8>)
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008170:	22f0      	movs	r2, #240	; 0xf0
 8008172:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	fa92 f2a2 	rbit	r2, r2
 800817a:	60fa      	str	r2, [r7, #12]
  return result;
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	fab2 f282 	clz	r2, r2
 8008182:	b2d2      	uxtb	r2, r2
 8008184:	40d3      	lsrs	r3, r2
 8008186:	4a09      	ldr	r2, [pc, #36]	; (80081ac <HAL_RCC_ClockConfig+0x2ec>)
 8008188:	5cd3      	ldrb	r3, [r2, r3]
 800818a:	fa21 f303 	lsr.w	r3, r1, r3
 800818e:	4a08      	ldr	r2, [pc, #32]	; (80081b0 <HAL_RCC_ClockConfig+0x2f0>)
 8008190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008192:	4b08      	ldr	r3, [pc, #32]	; (80081b4 <HAL_RCC_ClockConfig+0x2f4>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4618      	mov	r0, r3
 8008198:	f7fb fadc 	bl	8003754 <HAL_InitTick>
  
  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3778      	adds	r7, #120	; 0x78
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	40021000 	.word	0x40021000
 80081ac:	0800e498 	.word	0x0800e498
 80081b0:	2000006c 	.word	0x2000006c
 80081b4:	20000070 	.word	0x20000070

080081b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b08b      	sub	sp, #44	; 0x2c
 80081bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80081be:	2300      	movs	r3, #0
 80081c0:	61fb      	str	r3, [r7, #28]
 80081c2:	2300      	movs	r3, #0
 80081c4:	61bb      	str	r3, [r7, #24]
 80081c6:	2300      	movs	r3, #0
 80081c8:	627b      	str	r3, [r7, #36]	; 0x24
 80081ca:	2300      	movs	r3, #0
 80081cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80081d2:	4b29      	ldr	r3, [pc, #164]	; (8008278 <HAL_RCC_GetSysClockFreq+0xc0>)
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	f003 030c 	and.w	r3, r3, #12
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d002      	beq.n	80081e8 <HAL_RCC_GetSysClockFreq+0x30>
 80081e2:	2b08      	cmp	r3, #8
 80081e4:	d003      	beq.n	80081ee <HAL_RCC_GetSysClockFreq+0x36>
 80081e6:	e03c      	b.n	8008262 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80081e8:	4b24      	ldr	r3, [pc, #144]	; (800827c <HAL_RCC_GetSysClockFreq+0xc4>)
 80081ea:	623b      	str	r3, [r7, #32]
      break;
 80081ec:	e03c      	b.n	8008268 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80081f4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80081f8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	fa92 f2a2 	rbit	r2, r2
 8008200:	607a      	str	r2, [r7, #4]
  return result;
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	fab2 f282 	clz	r2, r2
 8008208:	b2d2      	uxtb	r2, r2
 800820a:	40d3      	lsrs	r3, r2
 800820c:	4a1c      	ldr	r2, [pc, #112]	; (8008280 <HAL_RCC_GetSysClockFreq+0xc8>)
 800820e:	5cd3      	ldrb	r3, [r2, r3]
 8008210:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008212:	4b19      	ldr	r3, [pc, #100]	; (8008278 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008216:	f003 030f 	and.w	r3, r3, #15
 800821a:	220f      	movs	r2, #15
 800821c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	fa92 f2a2 	rbit	r2, r2
 8008224:	60fa      	str	r2, [r7, #12]
  return result;
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	fab2 f282 	clz	r2, r2
 800822c:	b2d2      	uxtb	r2, r2
 800822e:	40d3      	lsrs	r3, r2
 8008230:	4a14      	ldr	r2, [pc, #80]	; (8008284 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008232:	5cd3      	ldrb	r3, [r2, r3]
 8008234:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d008      	beq.n	8008252 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008240:	4a0e      	ldr	r2, [pc, #56]	; (800827c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	fbb2 f2f3 	udiv	r2, r2, r3
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	fb02 f303 	mul.w	r3, r2, r3
 800824e:	627b      	str	r3, [r7, #36]	; 0x24
 8008250:	e004      	b.n	800825c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	4a0c      	ldr	r2, [pc, #48]	; (8008288 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008256:	fb02 f303 	mul.w	r3, r2, r3
 800825a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800825c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825e:	623b      	str	r3, [r7, #32]
      break;
 8008260:	e002      	b.n	8008268 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008262:	4b06      	ldr	r3, [pc, #24]	; (800827c <HAL_RCC_GetSysClockFreq+0xc4>)
 8008264:	623b      	str	r3, [r7, #32]
      break;
 8008266:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008268:	6a3b      	ldr	r3, [r7, #32]
}
 800826a:	4618      	mov	r0, r3
 800826c:	372c      	adds	r7, #44	; 0x2c
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	40021000 	.word	0x40021000
 800827c:	007a1200 	.word	0x007a1200
 8008280:	0800e4b0 	.word	0x0800e4b0
 8008284:	0800e4c0 	.word	0x0800e4c0
 8008288:	003d0900 	.word	0x003d0900

0800828c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800828c:	b480      	push	{r7}
 800828e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008290:	4b03      	ldr	r3, [pc, #12]	; (80082a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008292:	681b      	ldr	r3, [r3, #0]
}
 8008294:	4618      	mov	r0, r3
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	2000006c 	.word	0x2000006c

080082a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80082aa:	f7ff ffef 	bl	800828c <HAL_RCC_GetHCLKFreq>
 80082ae:	4601      	mov	r1, r0
 80082b0:	4b0b      	ldr	r3, [pc, #44]	; (80082e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80082bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	fa92 f2a2 	rbit	r2, r2
 80082c4:	603a      	str	r2, [r7, #0]
  return result;
 80082c6:	683a      	ldr	r2, [r7, #0]
 80082c8:	fab2 f282 	clz	r2, r2
 80082cc:	b2d2      	uxtb	r2, r2
 80082ce:	40d3      	lsrs	r3, r2
 80082d0:	4a04      	ldr	r2, [pc, #16]	; (80082e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80082d2:	5cd3      	ldrb	r3, [r2, r3]
 80082d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80082d8:	4618      	mov	r0, r3
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	40021000 	.word	0x40021000
 80082e4:	0800e4a8 	.word	0x0800e4a8

080082e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80082ee:	f7ff ffcd 	bl	800828c <HAL_RCC_GetHCLKFreq>
 80082f2:	4601      	mov	r1, r0
 80082f4:	4b0b      	ldr	r3, [pc, #44]	; (8008324 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80082fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008300:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	fa92 f2a2 	rbit	r2, r2
 8008308:	603a      	str	r2, [r7, #0]
  return result;
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	fab2 f282 	clz	r2, r2
 8008310:	b2d2      	uxtb	r2, r2
 8008312:	40d3      	lsrs	r3, r2
 8008314:	4a04      	ldr	r2, [pc, #16]	; (8008328 <HAL_RCC_GetPCLK2Freq+0x40>)
 8008316:	5cd3      	ldrb	r3, [r2, r3]
 8008318:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	40021000 	.word	0x40021000
 8008328:	0800e4a8 	.word	0x0800e4a8

0800832c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b092      	sub	sp, #72	; 0x48
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008334:	2300      	movs	r3, #0
 8008336:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800833c:	2300      	movs	r3, #0
 800833e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 80cd 	beq.w	80084ea <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008350:	4b8e      	ldr	r3, [pc, #568]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008352:	69db      	ldr	r3, [r3, #28]
 8008354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d10e      	bne.n	800837a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800835c:	4b8b      	ldr	r3, [pc, #556]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800835e:	69db      	ldr	r3, [r3, #28]
 8008360:	4a8a      	ldr	r2, [pc, #552]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008366:	61d3      	str	r3, [r2, #28]
 8008368:	4b88      	ldr	r3, [pc, #544]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800836a:	69db      	ldr	r3, [r3, #28]
 800836c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008370:	60bb      	str	r3, [r7, #8]
 8008372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008374:	2301      	movs	r3, #1
 8008376:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800837a:	4b85      	ldr	r3, [pc, #532]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008382:	2b00      	cmp	r3, #0
 8008384:	d118      	bne.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008386:	4b82      	ldr	r3, [pc, #520]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a81      	ldr	r2, [pc, #516]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800838c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008390:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008392:	f7fb fa23 	bl	80037dc <HAL_GetTick>
 8008396:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008398:	e008      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800839a:	f7fb fa1f 	bl	80037dc <HAL_GetTick>
 800839e:	4602      	mov	r2, r0
 80083a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	2b64      	cmp	r3, #100	; 0x64
 80083a6:	d901      	bls.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80083a8:	2303      	movs	r3, #3
 80083aa:	e0ea      	b.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80083ac:	4b78      	ldr	r3, [pc, #480]	; (8008590 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d0f0      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083b8:	4b74      	ldr	r3, [pc, #464]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083ba:	6a1b      	ldr	r3, [r3, #32]
 80083bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d07d      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d076      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083d6:	4b6d      	ldr	r3, [pc, #436]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80083e4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e8:	fa93 f3a3 	rbit	r3, r3
 80083ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80083ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083f0:	fab3 f383 	clz	r3, r3
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	461a      	mov	r2, r3
 80083f8:	4b66      	ldr	r3, [pc, #408]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80083fa:	4413      	add	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	461a      	mov	r2, r3
 8008400:	2301      	movs	r3, #1
 8008402:	6013      	str	r3, [r2, #0]
 8008404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008408:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800840a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840c:	fa93 f3a3 	rbit	r3, r3
 8008410:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008414:	fab3 f383 	clz	r3, r3
 8008418:	b2db      	uxtb	r3, r3
 800841a:	461a      	mov	r2, r3
 800841c:	4b5d      	ldr	r3, [pc, #372]	; (8008594 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800841e:	4413      	add	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	461a      	mov	r2, r3
 8008424:	2300      	movs	r3, #0
 8008426:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008428:	4a58      	ldr	r2, [pc, #352]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800842a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800842c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800842e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	2b00      	cmp	r3, #0
 8008436:	d045      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008438:	f7fb f9d0 	bl	80037dc <HAL_GetTick>
 800843c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800843e:	e00a      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008440:	f7fb f9cc 	bl	80037dc <HAL_GetTick>
 8008444:	4602      	mov	r2, r0
 8008446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008448:	1ad3      	subs	r3, r2, r3
 800844a:	f241 3288 	movw	r2, #5000	; 0x1388
 800844e:	4293      	cmp	r3, r2
 8008450:	d901      	bls.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e095      	b.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8008456:	2302      	movs	r3, #2
 8008458:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800845a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845c:	fa93 f3a3 	rbit	r3, r3
 8008460:	627b      	str	r3, [r7, #36]	; 0x24
 8008462:	2302      	movs	r3, #2
 8008464:	623b      	str	r3, [r7, #32]
 8008466:	6a3b      	ldr	r3, [r7, #32]
 8008468:	fa93 f3a3 	rbit	r3, r3
 800846c:	61fb      	str	r3, [r7, #28]
  return result;
 800846e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008470:	fab3 f383 	clz	r3, r3
 8008474:	b2db      	uxtb	r3, r3
 8008476:	095b      	lsrs	r3, r3, #5
 8008478:	b2db      	uxtb	r3, r3
 800847a:	f043 0302 	orr.w	r3, r3, #2
 800847e:	b2db      	uxtb	r3, r3
 8008480:	2b02      	cmp	r3, #2
 8008482:	d102      	bne.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8008484:	4b41      	ldr	r3, [pc, #260]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008486:	6a1b      	ldr	r3, [r3, #32]
 8008488:	e007      	b.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800848a:	2302      	movs	r3, #2
 800848c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	fa93 f3a3 	rbit	r3, r3
 8008494:	617b      	str	r3, [r7, #20]
 8008496:	4b3d      	ldr	r3, [pc, #244]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849a:	2202      	movs	r2, #2
 800849c:	613a      	str	r2, [r7, #16]
 800849e:	693a      	ldr	r2, [r7, #16]
 80084a0:	fa92 f2a2 	rbit	r2, r2
 80084a4:	60fa      	str	r2, [r7, #12]
  return result;
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	fab2 f282 	clz	r2, r2
 80084ac:	b2d2      	uxtb	r2, r2
 80084ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084b2:	b2d2      	uxtb	r2, r2
 80084b4:	f002 021f 	and.w	r2, r2, #31
 80084b8:	2101      	movs	r1, #1
 80084ba:	fa01 f202 	lsl.w	r2, r1, r2
 80084be:	4013      	ands	r3, r2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0bd      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80084c4:	4b31      	ldr	r3, [pc, #196]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084c6:	6a1b      	ldr	r3, [r3, #32]
 80084c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	492e      	ldr	r1, [pc, #184]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084d2:	4313      	orrs	r3, r2
 80084d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80084d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d105      	bne.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084de:	4b2b      	ldr	r3, [pc, #172]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	4a2a      	ldr	r2, [pc, #168]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084e8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d008      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80084f6:	4b25      	ldr	r3, [pc, #148]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fa:	f023 0203 	bic.w	r2, r3, #3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	4922      	ldr	r1, [pc, #136]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008504:	4313      	orrs	r3, r2
 8008506:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0320 	and.w	r3, r3, #32
 8008510:	2b00      	cmp	r3, #0
 8008512:	d008      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008514:	4b1d      	ldr	r3, [pc, #116]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008518:	f023 0210 	bic.w	r2, r3, #16
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	491a      	ldr	r1, [pc, #104]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008522:	4313      	orrs	r3, r2
 8008524:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800852e:	2b00      	cmp	r3, #0
 8008530:	d008      	beq.n	8008544 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008532:	4b16      	ldr	r3, [pc, #88]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008536:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	4913      	ldr	r1, [pc, #76]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008540:	4313      	orrs	r3, r2
 8008542:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d008      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008550:	4b0e      	ldr	r3, [pc, #56]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008554:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	490b      	ldr	r1, [pc, #44]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800855e:	4313      	orrs	r3, r2
 8008560:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d008      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800856e:	4b07      	ldr	r3, [pc, #28]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	4904      	ldr	r1, [pc, #16]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800857c:	4313      	orrs	r3, r2
 800857e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3748      	adds	r7, #72	; 0x48
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	40021000 	.word	0x40021000
 8008590:	40007000 	.word	0x40007000
 8008594:	10908100 	.word	0x10908100

08008598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e049      	b.n	800863e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d106      	bne.n	80085c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7fa fef8 	bl	80033b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2202      	movs	r2, #2
 80085c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	3304      	adds	r3, #4
 80085d4:	4619      	mov	r1, r3
 80085d6:	4610      	mov	r0, r2
 80085d8:	f000 f9da 	bl	8008990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2201      	movs	r2, #1
 8008630:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
	...

08008648 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008656:	b2db      	uxtb	r3, r3
 8008658:	2b01      	cmp	r3, #1
 800865a:	d001      	beq.n	8008660 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e040      	b.n	80086e2 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2202      	movs	r2, #2
 8008664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68da      	ldr	r2, [r3, #12]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f042 0201 	orr.w	r2, r2, #1
 8008676:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a1c      	ldr	r2, [pc, #112]	; (80086f0 <HAL_TIM_Base_Start_IT+0xa8>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d00e      	beq.n	80086a0 <HAL_TIM_Base_Start_IT+0x58>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800868a:	d009      	beq.n	80086a0 <HAL_TIM_Base_Start_IT+0x58>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a18      	ldr	r2, [pc, #96]	; (80086f4 <HAL_TIM_Base_Start_IT+0xac>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d004      	beq.n	80086a0 <HAL_TIM_Base_Start_IT+0x58>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a17      	ldr	r2, [pc, #92]	; (80086f8 <HAL_TIM_Base_Start_IT+0xb0>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d115      	bne.n	80086cc <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	689a      	ldr	r2, [r3, #8]
 80086a6:	4b15      	ldr	r3, [pc, #84]	; (80086fc <HAL_TIM_Base_Start_IT+0xb4>)
 80086a8:	4013      	ands	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2b06      	cmp	r3, #6
 80086b0:	d015      	beq.n	80086de <HAL_TIM_Base_Start_IT+0x96>
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086b8:	d011      	beq.n	80086de <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f042 0201 	orr.w	r2, r2, #1
 80086c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ca:	e008      	b.n	80086de <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f042 0201 	orr.w	r2, r2, #1
 80086da:	601a      	str	r2, [r3, #0]
 80086dc:	e000      	b.n	80086e0 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	40012c00 	.word	0x40012c00
 80086f4:	40000400 	.word	0x40000400
 80086f8:	40014000 	.word	0x40014000
 80086fc:	00010007 	.word	0x00010007

08008700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	f003 0302 	and.w	r3, r3, #2
 8008712:	2b02      	cmp	r3, #2
 8008714:	d122      	bne.n	800875c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	f003 0302 	and.w	r3, r3, #2
 8008720:	2b02      	cmp	r3, #2
 8008722:	d11b      	bne.n	800875c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f06f 0202 	mvn.w	r2, #2
 800872c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	f003 0303 	and.w	r3, r3, #3
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f905 	bl	8008952 <HAL_TIM_IC_CaptureCallback>
 8008748:	e005      	b.n	8008756 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f8f7 	bl	800893e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f908 	bl	8008966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	f003 0304 	and.w	r3, r3, #4
 8008766:	2b04      	cmp	r3, #4
 8008768:	d122      	bne.n	80087b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	f003 0304 	and.w	r3, r3, #4
 8008774:	2b04      	cmp	r3, #4
 8008776:	d11b      	bne.n	80087b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f06f 0204 	mvn.w	r2, #4
 8008780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2202      	movs	r2, #2
 8008786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	699b      	ldr	r3, [r3, #24]
 800878e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008792:	2b00      	cmp	r3, #0
 8008794:	d003      	beq.n	800879e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f8db 	bl	8008952 <HAL_TIM_IC_CaptureCallback>
 800879c:	e005      	b.n	80087aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f8cd 	bl	800893e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f8de 	bl	8008966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	f003 0308 	and.w	r3, r3, #8
 80087ba:	2b08      	cmp	r3, #8
 80087bc:	d122      	bne.n	8008804 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	f003 0308 	and.w	r3, r3, #8
 80087c8:	2b08      	cmp	r3, #8
 80087ca:	d11b      	bne.n	8008804 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f06f 0208 	mvn.w	r2, #8
 80087d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2204      	movs	r2, #4
 80087da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	f003 0303 	and.w	r3, r3, #3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f8b1 	bl	8008952 <HAL_TIM_IC_CaptureCallback>
 80087f0:	e005      	b.n	80087fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f8a3 	bl	800893e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f8b4 	bl	8008966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	f003 0310 	and.w	r3, r3, #16
 800880e:	2b10      	cmp	r3, #16
 8008810:	d122      	bne.n	8008858 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	f003 0310 	and.w	r3, r3, #16
 800881c:	2b10      	cmp	r3, #16
 800881e:	d11b      	bne.n	8008858 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f06f 0210 	mvn.w	r2, #16
 8008828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2208      	movs	r2, #8
 800882e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	69db      	ldr	r3, [r3, #28]
 8008836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800883a:	2b00      	cmp	r3, #0
 800883c:	d003      	beq.n	8008846 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 f887 	bl	8008952 <HAL_TIM_IC_CaptureCallback>
 8008844:	e005      	b.n	8008852 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f879 	bl	800893e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 f88a 	bl	8008966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b01      	cmp	r3, #1
 8008864:	d10e      	bne.n	8008884 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	f003 0301 	and.w	r3, r3, #1
 8008870:	2b01      	cmp	r3, #1
 8008872:	d107      	bne.n	8008884 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f06f 0201 	mvn.w	r2, #1
 800887c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f7fa fbe4 	bl	800304c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800888e:	2b80      	cmp	r3, #128	; 0x80
 8008890:	d10e      	bne.n	80088b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68db      	ldr	r3, [r3, #12]
 8008898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800889c:	2b80      	cmp	r3, #128	; 0x80
 800889e:	d107      	bne.n	80088b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f960 	bl	8008b70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088be:	d10e      	bne.n	80088de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ca:	2b80      	cmp	r3, #128	; 0x80
 80088cc:	d107      	bne.n	80088de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80088d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f953 	bl	8008b84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e8:	2b40      	cmp	r3, #64	; 0x40
 80088ea:	d10e      	bne.n	800890a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f6:	2b40      	cmp	r3, #64	; 0x40
 80088f8:	d107      	bne.n	800890a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008902:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f838 	bl	800897a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	f003 0320 	and.w	r3, r3, #32
 8008914:	2b20      	cmp	r3, #32
 8008916:	d10e      	bne.n	8008936 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68db      	ldr	r3, [r3, #12]
 800891e:	f003 0320 	and.w	r3, r3, #32
 8008922:	2b20      	cmp	r3, #32
 8008924:	d107      	bne.n	8008936 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f06f 0220 	mvn.w	r2, #32
 800892e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 f913 	bl	8008b5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008936:	bf00      	nop
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008946:	bf00      	nop
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008952:	b480      	push	{r7}
 8008954:	b083      	sub	sp, #12
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800895a:	bf00      	nop
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr

08008966 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008966:	b480      	push	{r7}
 8008968:	b083      	sub	sp, #12
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800896e:	bf00      	nop
 8008970:	370c      	adds	r7, #12
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800897a:	b480      	push	{r7}
 800897c:	b083      	sub	sp, #12
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008982:	bf00      	nop
 8008984:	370c      	adds	r7, #12
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
	...

08008990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a32      	ldr	r2, [pc, #200]	; (8008a6c <TIM_Base_SetConfig+0xdc>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d007      	beq.n	80089b8 <TIM_Base_SetConfig+0x28>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ae:	d003      	beq.n	80089b8 <TIM_Base_SetConfig+0x28>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a2f      	ldr	r2, [pc, #188]	; (8008a70 <TIM_Base_SetConfig+0xe0>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d108      	bne.n	80089ca <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	4313      	orrs	r3, r2
 80089c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a27      	ldr	r2, [pc, #156]	; (8008a6c <TIM_Base_SetConfig+0xdc>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d013      	beq.n	80089fa <TIM_Base_SetConfig+0x6a>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d8:	d00f      	beq.n	80089fa <TIM_Base_SetConfig+0x6a>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a24      	ldr	r2, [pc, #144]	; (8008a70 <TIM_Base_SetConfig+0xe0>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d00b      	beq.n	80089fa <TIM_Base_SetConfig+0x6a>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a23      	ldr	r2, [pc, #140]	; (8008a74 <TIM_Base_SetConfig+0xe4>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d007      	beq.n	80089fa <TIM_Base_SetConfig+0x6a>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a22      	ldr	r2, [pc, #136]	; (8008a78 <TIM_Base_SetConfig+0xe8>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d003      	beq.n	80089fa <TIM_Base_SetConfig+0x6a>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a21      	ldr	r2, [pc, #132]	; (8008a7c <TIM_Base_SetConfig+0xec>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d108      	bne.n	8008a0c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	689a      	ldr	r2, [r3, #8]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a0e      	ldr	r2, [pc, #56]	; (8008a6c <TIM_Base_SetConfig+0xdc>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d00b      	beq.n	8008a50 <TIM_Base_SetConfig+0xc0>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a0e      	ldr	r2, [pc, #56]	; (8008a74 <TIM_Base_SetConfig+0xe4>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d007      	beq.n	8008a50 <TIM_Base_SetConfig+0xc0>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a0d      	ldr	r2, [pc, #52]	; (8008a78 <TIM_Base_SetConfig+0xe8>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d003      	beq.n	8008a50 <TIM_Base_SetConfig+0xc0>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a0c      	ldr	r2, [pc, #48]	; (8008a7c <TIM_Base_SetConfig+0xec>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d103      	bne.n	8008a58 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	691a      	ldr	r2, [r3, #16]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	615a      	str	r2, [r3, #20]
}
 8008a5e:	bf00      	nop
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	40012c00 	.word	0x40012c00
 8008a70:	40000400 	.word	0x40000400
 8008a74:	40014000 	.word	0x40014000
 8008a78:	40014400 	.word	0x40014400
 8008a7c:	40014800 	.word	0x40014800

08008a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d101      	bne.n	8008a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a94:	2302      	movs	r3, #2
 8008a96:	e054      	b.n	8008b42 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a24      	ldr	r2, [pc, #144]	; (8008b50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d108      	bne.n	8008ad4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ac8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a17      	ldr	r2, [pc, #92]	; (8008b50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d00e      	beq.n	8008b16 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b00:	d009      	beq.n	8008b16 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a13      	ldr	r2, [pc, #76]	; (8008b54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d004      	beq.n	8008b16 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a11      	ldr	r2, [pc, #68]	; (8008b58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d10c      	bne.n	8008b30 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68ba      	ldr	r2, [r7, #8]
 8008b2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr
 8008b4e:	bf00      	nop
 8008b50:	40012c00 	.word	0x40012c00
 8008b54:	40000400 	.word	0x40000400
 8008b58:	40014000 	.word	0x40014000

08008b5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e040      	b.n	8008c2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d106      	bne.n	8008bc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7fa fc20 	bl	8003400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2224      	movs	r2, #36	; 0x24
 8008bc4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f022 0201 	bic.w	r2, r2, #1
 8008bd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fbca 	bl	8009370 <UART_SetConfig>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d101      	bne.n	8008be6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e022      	b.n	8008c2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fcf4 	bl	80095dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	689a      	ldr	r2, [r3, #8]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f042 0201 	orr.w	r2, r2, #1
 8008c22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fd7b 	bl	8009720 <UART_CheckIdleState>
 8008c2a:	4603      	mov	r3, r0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b08b      	sub	sp, #44	; 0x2c
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c46:	2b20      	cmp	r3, #32
 8008c48:	d147      	bne.n	8008cda <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <HAL_UART_Transmit_IT+0x22>
 8008c50:	88fb      	ldrh	r3, [r7, #6]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e040      	b.n	8008cdc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	88fa      	ldrh	r2, [r7, #6]
 8008c64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	88fa      	ldrh	r2, [r7, #6]
 8008c6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2221      	movs	r2, #33	; 0x21
 8008c82:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c8c:	d107      	bne.n	8008c9e <HAL_UART_Transmit_IT+0x6a>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d103      	bne.n	8008c9e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	4a13      	ldr	r2, [pc, #76]	; (8008ce8 <HAL_UART_Transmit_IT+0xb4>)
 8008c9a:	66da      	str	r2, [r3, #108]	; 0x6c
 8008c9c:	e002      	b.n	8008ca4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	4a12      	ldr	r2, [pc, #72]	; (8008cec <HAL_UART_Transmit_IT+0xb8>)
 8008ca2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	e853 3f00 	ldrex	r3, [r3]
 8008cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc2:	623b      	str	r3, [r7, #32]
 8008cc4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc6:	69f9      	ldr	r1, [r7, #28]
 8008cc8:	6a3a      	ldr	r2, [r7, #32]
 8008cca:	e841 2300 	strex	r3, r2, [r1]
 8008cce:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1e6      	bne.n	8008ca4 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	e000      	b.n	8008cdc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008cda:	2302      	movs	r3, #2
  }
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	372c      	adds	r7, #44	; 0x2c
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	08009c79 	.word	0x08009c79
 8008cec:	08009bc1 	.word	0x08009bc1

08008cf0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b08a      	sub	sp, #40	; 0x28
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d04:	2b20      	cmp	r3, #32
 8008d06:	d132      	bne.n	8008d6e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d002      	beq.n	8008d14 <HAL_UART_Receive_IT+0x24>
 8008d0e:	88fb      	ldrh	r3, [r7, #6]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d101      	bne.n	8008d18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e02b      	b.n	8008d70 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d018      	beq.n	8008d5e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	e853 3f00 	ldrex	r3, [r3]
 8008d38:	613b      	str	r3, [r7, #16]
   return(result);
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d40:	627b      	str	r3, [r7, #36]	; 0x24
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	461a      	mov	r2, r3
 8008d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4a:	623b      	str	r3, [r7, #32]
 8008d4c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4e:	69f9      	ldr	r1, [r7, #28]
 8008d50:	6a3a      	ldr	r2, [r7, #32]
 8008d52:	e841 2300 	strex	r3, r2, [r1]
 8008d56:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1e6      	bne.n	8008d2c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d5e:	88fb      	ldrh	r3, [r7, #6]
 8008d60:	461a      	mov	r2, r3
 8008d62:	68b9      	ldr	r1, [r7, #8]
 8008d64:	68f8      	ldr	r0, [r7, #12]
 8008d66:	f000 fdeb 	bl	8009940 <UART_Start_Receive_IT>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	e000      	b.n	8008d70 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008d6e:	2302      	movs	r3, #2
  }
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3728      	adds	r7, #40	; 0x28
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b0ba      	sub	sp, #232	; 0xe8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008d9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008da2:	f640 030f 	movw	r3, #2063	; 0x80f
 8008da6:	4013      	ands	r3, r2
 8008da8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008dac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d115      	bne.n	8008de0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008db8:	f003 0320 	and.w	r3, r3, #32
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00f      	beq.n	8008de0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dc4:	f003 0320 	and.w	r3, r3, #32
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d009      	beq.n	8008de0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 82ab 	beq.w	800932c <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	4798      	blx	r3
      }
      return;
 8008dde:	e2a5      	b.n	800932c <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008de0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 8117 	beq.w	8009018 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d106      	bne.n	8008e04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008df6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008dfa:	4b85      	ldr	r3, [pc, #532]	; (8009010 <HAL_UART_IRQHandler+0x298>)
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f000 810a 	beq.w	8009018 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d011      	beq.n	8008e34 <HAL_UART_IRQHandler+0xbc>
 8008e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d00b      	beq.n	8008e34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2201      	movs	r2, #1
 8008e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e2a:	f043 0201 	orr.w	r2, r3, #1
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e38:	f003 0302 	and.w	r3, r3, #2
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d011      	beq.n	8008e64 <HAL_UART_IRQHandler+0xec>
 8008e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e44:	f003 0301 	and.w	r3, r3, #1
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00b      	beq.n	8008e64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2202      	movs	r2, #2
 8008e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e5a:	f043 0204 	orr.w	r2, r3, #4
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e68:	f003 0304 	and.w	r3, r3, #4
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d011      	beq.n	8008e94 <HAL_UART_IRQHandler+0x11c>
 8008e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e74:	f003 0301 	and.w	r3, r3, #1
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00b      	beq.n	8008e94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2204      	movs	r2, #4
 8008e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e8a:	f043 0202 	orr.w	r2, r3, #2
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e98:	f003 0308 	and.w	r3, r3, #8
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d017      	beq.n	8008ed0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ea4:	f003 0320 	and.w	r3, r3, #32
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d105      	bne.n	8008eb8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008eb0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00b      	beq.n	8008ed0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2208      	movs	r2, #8
 8008ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ec6:	f043 0208 	orr.w	r2, r3, #8
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d012      	beq.n	8008f02 <HAL_UART_IRQHandler+0x18a>
 8008edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ee0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00c      	beq.n	8008f02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ef8:	f043 0220 	orr.w	r2, r3, #32
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f000 8211 	beq.w	8009330 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f12:	f003 0320 	and.w	r3, r3, #32
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00d      	beq.n	8008f36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f1e:	f003 0320 	and.w	r3, r3, #32
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d007      	beq.n	8008f36 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d003      	beq.n	8008f36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f4a:	2b40      	cmp	r3, #64	; 0x40
 8008f4c:	d005      	beq.n	8008f5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d04f      	beq.n	8008ffa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 fdb6 	bl	8009acc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f6a:	2b40      	cmp	r3, #64	; 0x40
 8008f6c:	d141      	bne.n	8008ff2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3308      	adds	r3, #8
 8008f74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f7c:	e853 3f00 	ldrex	r3, [r3]
 8008f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3308      	adds	r3, #8
 8008f96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008f9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008f9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008fa6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008faa:	e841 2300 	strex	r3, r2, [r1]
 8008fae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008fb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1d9      	bne.n	8008f6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d013      	beq.n	8008fea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fc6:	4a13      	ldr	r2, [pc, #76]	; (8009014 <HAL_UART_IRQHandler+0x29c>)
 8008fc8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fb fd0e 	bl	80049f0 <HAL_DMA_Abort_IT>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d017      	beq.n	800900a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fe8:	e00f      	b.n	800900a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f9aa 	bl	8009344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ff0:	e00b      	b.n	800900a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f9a6 	bl	8009344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ff8:	e007      	b.n	800900a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f9a2 	bl	8009344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009008:	e192      	b.n	8009330 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800900a:	bf00      	nop
    return;
 800900c:	e190      	b.n	8009330 <HAL_UART_IRQHandler+0x5b8>
 800900e:	bf00      	nop
 8009010:	04000120 	.word	0x04000120
 8009014:	08009b95 	.word	0x08009b95

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800901c:	2b01      	cmp	r3, #1
 800901e:	f040 814b 	bne.w	80092b8 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009026:	f003 0310 	and.w	r3, r3, #16
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 8144 	beq.w	80092b8 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009034:	f003 0310 	and.w	r3, r3, #16
 8009038:	2b00      	cmp	r3, #0
 800903a:	f000 813d 	beq.w	80092b8 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2210      	movs	r2, #16
 8009044:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009050:	2b40      	cmp	r3, #64	; 0x40
 8009052:	f040 80b5 	bne.w	80091c0 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009062:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009066:	2b00      	cmp	r3, #0
 8009068:	f000 8164 	beq.w	8009334 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009076:	429a      	cmp	r2, r3
 8009078:	f080 815c 	bcs.w	8009334 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009082:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800908a:	699b      	ldr	r3, [r3, #24]
 800908c:	2b20      	cmp	r3, #32
 800908e:	f000 8086 	beq.w	800919e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800909e:	e853 3f00 	ldrex	r3, [r3]
 80090a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80090a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	461a      	mov	r2, r3
 80090b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80090c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80090c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80090cc:	e841 2300 	strex	r3, r2, [r1]
 80090d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80090d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d1da      	bne.n	8009092 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	3308      	adds	r3, #8
 80090e2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090e6:	e853 3f00 	ldrex	r3, [r3]
 80090ea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80090ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090ee:	f023 0301 	bic.w	r3, r3, #1
 80090f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	3308      	adds	r3, #8
 80090fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009100:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009104:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009106:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009108:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800910c:	e841 2300 	strex	r3, r2, [r1]
 8009110:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009112:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1e1      	bne.n	80090dc <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	3308      	adds	r3, #8
 800911e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009120:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009122:	e853 3f00 	ldrex	r3, [r3]
 8009126:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800912a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800912e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	3308      	adds	r3, #8
 8009138:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800913c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800913e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009140:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009142:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009144:	e841 2300 	strex	r3, r2, [r1]
 8009148:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800914a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1e3      	bne.n	8009118 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2220      	movs	r2, #32
 8009154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009166:	e853 3f00 	ldrex	r3, [r3]
 800916a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800916c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800916e:	f023 0310 	bic.w	r3, r3, #16
 8009172:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	461a      	mov	r2, r3
 800917c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009180:	65bb      	str	r3, [r7, #88]	; 0x58
 8009182:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009184:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009186:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009188:	e841 2300 	strex	r3, r2, [r1]
 800918c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800918e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1e4      	bne.n	800915e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009198:	4618      	mov	r0, r3
 800919a:	f7fb fbf0 	bl	800497e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2202      	movs	r2, #2
 80091a2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	4619      	mov	r1, r3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f8cd 	bl	8009358 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091be:	e0b9      	b.n	8009334 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091da:	b29b      	uxth	r3, r3
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f000 80ab 	beq.w	8009338 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80091e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f000 80a6 	beq.w	8009338 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f4:	e853 3f00 	ldrex	r3, [r3]
 80091f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009200:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	461a      	mov	r2, r3
 800920a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800920e:	647b      	str	r3, [r7, #68]	; 0x44
 8009210:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009212:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009214:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009216:	e841 2300 	strex	r3, r2, [r1]
 800921a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800921c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e4      	bne.n	80091ec <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3308      	adds	r3, #8
 8009228:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	e853 3f00 	ldrex	r3, [r3]
 8009230:	623b      	str	r3, [r7, #32]
   return(result);
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	f023 0301 	bic.w	r3, r3, #1
 8009238:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3308      	adds	r3, #8
 8009242:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009246:	633a      	str	r2, [r7, #48]	; 0x30
 8009248:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800924c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800924e:	e841 2300 	strex	r3, r2, [r1]
 8009252:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1e3      	bne.n	8009222 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2220      	movs	r2, #32
 800925e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	e853 3f00 	ldrex	r3, [r3]
 800927a:	60fb      	str	r3, [r7, #12]
   return(result);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f023 0310 	bic.w	r3, r3, #16
 8009282:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009290:	61fb      	str	r3, [r7, #28]
 8009292:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009294:	69b9      	ldr	r1, [r7, #24]
 8009296:	69fa      	ldr	r2, [r7, #28]
 8009298:	e841 2300 	strex	r3, r2, [r1]
 800929c:	617b      	str	r3, [r7, #20]
   return(result);
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1e4      	bne.n	800926e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2202      	movs	r2, #2
 80092a8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80092aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092ae:	4619      	mov	r1, r3
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 f851 	bl	8009358 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80092b6:	e03f      	b.n	8009338 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80092b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00e      	beq.n	80092e2 <HAL_UART_IRQHandler+0x56a>
 80092c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d008      	beq.n	80092e2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80092d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 fefe 	bl	800a0dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092e0:	e02d      	b.n	800933e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80092e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d00e      	beq.n	800930c <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80092ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d008      	beq.n	800930c <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d01c      	beq.n	800933c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	4798      	blx	r3
    }
    return;
 800930a:	e017      	b.n	800933c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800930c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009314:	2b00      	cmp	r3, #0
 8009316:	d012      	beq.n	800933e <HAL_UART_IRQHandler+0x5c6>
 8009318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800931c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00c      	beq.n	800933e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fd07 	bl	8009d38 <UART_EndTransmit_IT>
    return;
 800932a:	e008      	b.n	800933e <HAL_UART_IRQHandler+0x5c6>
      return;
 800932c:	bf00      	nop
 800932e:	e006      	b.n	800933e <HAL_UART_IRQHandler+0x5c6>
    return;
 8009330:	bf00      	nop
 8009332:	e004      	b.n	800933e <HAL_UART_IRQHandler+0x5c6>
      return;
 8009334:	bf00      	nop
 8009336:	e002      	b.n	800933e <HAL_UART_IRQHandler+0x5c6>
      return;
 8009338:	bf00      	nop
 800933a:	e000      	b.n	800933e <HAL_UART_IRQHandler+0x5c6>
    return;
 800933c:	bf00      	nop
  }

}
 800933e:	37e8      	adds	r7, #232	; 0xe8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	460b      	mov	r3, r1
 8009362:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b088      	sub	sp, #32
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009378:	2300      	movs	r3, #0
 800937a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	689a      	ldr	r2, [r3, #8]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	431a      	orrs	r2, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	695b      	ldr	r3, [r3, #20]
 800938a:	431a      	orrs	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	69db      	ldr	r3, [r3, #28]
 8009390:	4313      	orrs	r3, r2
 8009392:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	4b8a      	ldr	r3, [pc, #552]	; (80095c4 <UART_SetConfig+0x254>)
 800939c:	4013      	ands	r3, r2
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	6812      	ldr	r2, [r2, #0]
 80093a2:	6979      	ldr	r1, [r7, #20]
 80093a4:	430b      	orrs	r3, r1
 80093a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	68da      	ldr	r2, [r3, #12]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	430a      	orrs	r2, r1
 80093bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6a1b      	ldr	r3, [r3, #32]
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	430a      	orrs	r2, r1
 80093e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a78      	ldr	r2, [pc, #480]	; (80095c8 <UART_SetConfig+0x258>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d120      	bne.n	800942e <UART_SetConfig+0xbe>
 80093ec:	4b77      	ldr	r3, [pc, #476]	; (80095cc <UART_SetConfig+0x25c>)
 80093ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f0:	f003 0303 	and.w	r3, r3, #3
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d817      	bhi.n	8009428 <UART_SetConfig+0xb8>
 80093f8:	a201      	add	r2, pc, #4	; (adr r2, 8009400 <UART_SetConfig+0x90>)
 80093fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fe:	bf00      	nop
 8009400:	08009411 	.word	0x08009411
 8009404:	0800941d 	.word	0x0800941d
 8009408:	08009423 	.word	0x08009423
 800940c:	08009417 	.word	0x08009417
 8009410:	2300      	movs	r3, #0
 8009412:	77fb      	strb	r3, [r7, #31]
 8009414:	e01d      	b.n	8009452 <UART_SetConfig+0xe2>
 8009416:	2302      	movs	r3, #2
 8009418:	77fb      	strb	r3, [r7, #31]
 800941a:	e01a      	b.n	8009452 <UART_SetConfig+0xe2>
 800941c:	2304      	movs	r3, #4
 800941e:	77fb      	strb	r3, [r7, #31]
 8009420:	e017      	b.n	8009452 <UART_SetConfig+0xe2>
 8009422:	2308      	movs	r3, #8
 8009424:	77fb      	strb	r3, [r7, #31]
 8009426:	e014      	b.n	8009452 <UART_SetConfig+0xe2>
 8009428:	2310      	movs	r3, #16
 800942a:	77fb      	strb	r3, [r7, #31]
 800942c:	e011      	b.n	8009452 <UART_SetConfig+0xe2>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a67      	ldr	r2, [pc, #412]	; (80095d0 <UART_SetConfig+0x260>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d102      	bne.n	800943e <UART_SetConfig+0xce>
 8009438:	2300      	movs	r3, #0
 800943a:	77fb      	strb	r3, [r7, #31]
 800943c:	e009      	b.n	8009452 <UART_SetConfig+0xe2>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a64      	ldr	r2, [pc, #400]	; (80095d4 <UART_SetConfig+0x264>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d102      	bne.n	800944e <UART_SetConfig+0xde>
 8009448:	2300      	movs	r3, #0
 800944a:	77fb      	strb	r3, [r7, #31]
 800944c:	e001      	b.n	8009452 <UART_SetConfig+0xe2>
 800944e:	2310      	movs	r3, #16
 8009450:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800945a:	d15a      	bne.n	8009512 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800945c:	7ffb      	ldrb	r3, [r7, #31]
 800945e:	2b08      	cmp	r3, #8
 8009460:	d827      	bhi.n	80094b2 <UART_SetConfig+0x142>
 8009462:	a201      	add	r2, pc, #4	; (adr r2, 8009468 <UART_SetConfig+0xf8>)
 8009464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009468:	0800948d 	.word	0x0800948d
 800946c:	08009495 	.word	0x08009495
 8009470:	0800949d 	.word	0x0800949d
 8009474:	080094b3 	.word	0x080094b3
 8009478:	080094a3 	.word	0x080094a3
 800947c:	080094b3 	.word	0x080094b3
 8009480:	080094b3 	.word	0x080094b3
 8009484:	080094b3 	.word	0x080094b3
 8009488:	080094ab 	.word	0x080094ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800948c:	f7fe ff0a 	bl	80082a4 <HAL_RCC_GetPCLK1Freq>
 8009490:	61b8      	str	r0, [r7, #24]
        break;
 8009492:	e013      	b.n	80094bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009494:	f7fe ff28 	bl	80082e8 <HAL_RCC_GetPCLK2Freq>
 8009498:	61b8      	str	r0, [r7, #24]
        break;
 800949a:	e00f      	b.n	80094bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800949c:	4b4e      	ldr	r3, [pc, #312]	; (80095d8 <UART_SetConfig+0x268>)
 800949e:	61bb      	str	r3, [r7, #24]
        break;
 80094a0:	e00c      	b.n	80094bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094a2:	f7fe fe89 	bl	80081b8 <HAL_RCC_GetSysClockFreq>
 80094a6:	61b8      	str	r0, [r7, #24]
        break;
 80094a8:	e008      	b.n	80094bc <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094ae:	61bb      	str	r3, [r7, #24]
        break;
 80094b0:	e004      	b.n	80094bc <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80094b2:	2300      	movs	r3, #0
 80094b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	77bb      	strb	r3, [r7, #30]
        break;
 80094ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d074      	beq.n	80095ac <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	005a      	lsls	r2, r3, #1
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	085b      	lsrs	r3, r3, #1
 80094cc:	441a      	add	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	2b0f      	cmp	r3, #15
 80094dc:	d916      	bls.n	800950c <UART_SetConfig+0x19c>
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094e4:	d212      	bcs.n	800950c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	f023 030f 	bic.w	r3, r3, #15
 80094ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	085b      	lsrs	r3, r3, #1
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	f003 0307 	and.w	r3, r3, #7
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	89fb      	ldrh	r3, [r7, #14]
 80094fe:	4313      	orrs	r3, r2
 8009500:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	89fa      	ldrh	r2, [r7, #14]
 8009508:	60da      	str	r2, [r3, #12]
 800950a:	e04f      	b.n	80095ac <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	77bb      	strb	r3, [r7, #30]
 8009510:	e04c      	b.n	80095ac <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009512:	7ffb      	ldrb	r3, [r7, #31]
 8009514:	2b08      	cmp	r3, #8
 8009516:	d828      	bhi.n	800956a <UART_SetConfig+0x1fa>
 8009518:	a201      	add	r2, pc, #4	; (adr r2, 8009520 <UART_SetConfig+0x1b0>)
 800951a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951e:	bf00      	nop
 8009520:	08009545 	.word	0x08009545
 8009524:	0800954d 	.word	0x0800954d
 8009528:	08009555 	.word	0x08009555
 800952c:	0800956b 	.word	0x0800956b
 8009530:	0800955b 	.word	0x0800955b
 8009534:	0800956b 	.word	0x0800956b
 8009538:	0800956b 	.word	0x0800956b
 800953c:	0800956b 	.word	0x0800956b
 8009540:	08009563 	.word	0x08009563
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009544:	f7fe feae 	bl	80082a4 <HAL_RCC_GetPCLK1Freq>
 8009548:	61b8      	str	r0, [r7, #24]
        break;
 800954a:	e013      	b.n	8009574 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800954c:	f7fe fecc 	bl	80082e8 <HAL_RCC_GetPCLK2Freq>
 8009550:	61b8      	str	r0, [r7, #24]
        break;
 8009552:	e00f      	b.n	8009574 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009554:	4b20      	ldr	r3, [pc, #128]	; (80095d8 <UART_SetConfig+0x268>)
 8009556:	61bb      	str	r3, [r7, #24]
        break;
 8009558:	e00c      	b.n	8009574 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800955a:	f7fe fe2d 	bl	80081b8 <HAL_RCC_GetSysClockFreq>
 800955e:	61b8      	str	r0, [r7, #24]
        break;
 8009560:	e008      	b.n	8009574 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009566:	61bb      	str	r3, [r7, #24]
        break;
 8009568:	e004      	b.n	8009574 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800956a:	2300      	movs	r3, #0
 800956c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	77bb      	strb	r3, [r7, #30]
        break;
 8009572:	bf00      	nop
    }

    if (pclk != 0U)
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d018      	beq.n	80095ac <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	085a      	lsrs	r2, r3, #1
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	441a      	add	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	fbb2 f3f3 	udiv	r3, r2, r3
 800958c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	2b0f      	cmp	r3, #15
 8009592:	d909      	bls.n	80095a8 <UART_SetConfig+0x238>
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800959a:	d205      	bcs.n	80095a8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	b29a      	uxth	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	60da      	str	r2, [r3, #12]
 80095a6:	e001      	b.n	80095ac <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80095a8:	2301      	movs	r3, #1
 80095aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80095b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3720      	adds	r7, #32
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	efff69f3 	.word	0xefff69f3
 80095c8:	40013800 	.word	0x40013800
 80095cc:	40021000 	.word	0x40021000
 80095d0:	40004400 	.word	0x40004400
 80095d4:	40004800 	.word	0x40004800
 80095d8:	007a1200 	.word	0x007a1200

080095dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e8:	f003 0301 	and.w	r3, r3, #1
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00a      	beq.n	8009606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	430a      	orrs	r2, r1
 8009604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960a:	f003 0302 	and.w	r3, r3, #2
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00a      	beq.n	8009628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	430a      	orrs	r2, r1
 8009626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962c:	f003 0304 	and.w	r3, r3, #4
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00a      	beq.n	800964a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	430a      	orrs	r2, r1
 8009648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964e:	f003 0308 	and.w	r3, r3, #8
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00a      	beq.n	800966c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	430a      	orrs	r2, r1
 800966a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009670:	f003 0310 	and.w	r3, r3, #16
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00a      	beq.n	800968e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	430a      	orrs	r2, r1
 800968c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009692:	f003 0320 	and.w	r3, r3, #32
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00a      	beq.n	80096b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	430a      	orrs	r2, r1
 80096ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d01a      	beq.n	80096f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	430a      	orrs	r2, r1
 80096d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096da:	d10a      	bne.n	80096f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	430a      	orrs	r2, r1
 80096f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d00a      	beq.n	8009714 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	430a      	orrs	r2, r1
 8009712:	605a      	str	r2, [r3, #4]
  }
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b098      	sub	sp, #96	; 0x60
 8009724:	af02      	add	r7, sp, #8
 8009726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009730:	f7fa f854 	bl	80037dc <HAL_GetTick>
 8009734:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 0308 	and.w	r3, r3, #8
 8009740:	2b08      	cmp	r3, #8
 8009742:	d12e      	bne.n	80097a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009744:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800974c:	2200      	movs	r2, #0
 800974e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f88c 	bl	8009870 <UART_WaitOnFlagUntilTimeout>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	d021      	beq.n	80097a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009766:	e853 3f00 	ldrex	r3, [r3]
 800976a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800976c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800976e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009772:	653b      	str	r3, [r7, #80]	; 0x50
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	461a      	mov	r2, r3
 800977a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800977c:	647b      	str	r3, [r7, #68]	; 0x44
 800977e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009780:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009784:	e841 2300 	strex	r3, r2, [r1]
 8009788:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800978a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e6      	bne.n	800975e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2220      	movs	r2, #32
 8009794:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e062      	b.n	8009868 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 0304 	and.w	r3, r3, #4
 80097ac:	2b04      	cmp	r3, #4
 80097ae:	d149      	bne.n	8009844 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097b8:	2200      	movs	r2, #0
 80097ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f856 	bl	8009870 <UART_WaitOnFlagUntilTimeout>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d03c      	beq.n	8009844 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	e853 3f00 	ldrex	r3, [r3]
 80097d6:	623b      	str	r3, [r7, #32]
   return(result);
 80097d8:	6a3b      	ldr	r3, [r7, #32]
 80097da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	461a      	mov	r2, r3
 80097e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097e8:	633b      	str	r3, [r7, #48]	; 0x30
 80097ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097f0:	e841 2300 	strex	r3, r2, [r1]
 80097f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d1e6      	bne.n	80097ca <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	3308      	adds	r3, #8
 8009802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	e853 3f00 	ldrex	r3, [r3]
 800980a:	60fb      	str	r3, [r7, #12]
   return(result);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f023 0301 	bic.w	r3, r3, #1
 8009812:	64bb      	str	r3, [r7, #72]	; 0x48
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	3308      	adds	r3, #8
 800981a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800981c:	61fa      	str	r2, [r7, #28]
 800981e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009820:	69b9      	ldr	r1, [r7, #24]
 8009822:	69fa      	ldr	r2, [r7, #28]
 8009824:	e841 2300 	strex	r3, r2, [r1]
 8009828:	617b      	str	r3, [r7, #20]
   return(result);
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1e5      	bne.n	80097fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2220      	movs	r2, #32
 8009834:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	e011      	b.n	8009868 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2220      	movs	r2, #32
 8009848:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2220      	movs	r2, #32
 800984e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3758      	adds	r7, #88	; 0x58
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	603b      	str	r3, [r7, #0]
 800987c:	4613      	mov	r3, r2
 800987e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009880:	e049      	b.n	8009916 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009888:	d045      	beq.n	8009916 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800988a:	f7f9 ffa7 	bl	80037dc <HAL_GetTick>
 800988e:	4602      	mov	r2, r0
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	1ad3      	subs	r3, r2, r3
 8009894:	69ba      	ldr	r2, [r7, #24]
 8009896:	429a      	cmp	r2, r3
 8009898:	d302      	bcc.n	80098a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098a0:	2303      	movs	r3, #3
 80098a2:	e048      	b.n	8009936 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f003 0304 	and.w	r3, r3, #4
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d031      	beq.n	8009916 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	69db      	ldr	r3, [r3, #28]
 80098b8:	f003 0308 	and.w	r3, r3, #8
 80098bc:	2b08      	cmp	r3, #8
 80098be:	d110      	bne.n	80098e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2208      	movs	r2, #8
 80098c6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f000 f8ff 	bl	8009acc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2208      	movs	r2, #8
 80098d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e029      	b.n	8009936 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	69db      	ldr	r3, [r3, #28]
 80098e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098f0:	d111      	bne.n	8009916 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098fc:	68f8      	ldr	r0, [r7, #12]
 80098fe:	f000 f8e5 	bl	8009acc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2220      	movs	r2, #32
 8009906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009912:	2303      	movs	r3, #3
 8009914:	e00f      	b.n	8009936 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	69da      	ldr	r2, [r3, #28]
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	4013      	ands	r3, r2
 8009920:	68ba      	ldr	r2, [r7, #8]
 8009922:	429a      	cmp	r2, r3
 8009924:	bf0c      	ite	eq
 8009926:	2301      	moveq	r3, #1
 8009928:	2300      	movne	r3, #0
 800992a:	b2db      	uxtb	r3, r3
 800992c:	461a      	mov	r2, r3
 800992e:	79fb      	ldrb	r3, [r7, #7]
 8009930:	429a      	cmp	r2, r3
 8009932:	d0a6      	beq.n	8009882 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
	...

08009940 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009940:	b480      	push	{r7}
 8009942:	b097      	sub	sp, #92	; 0x5c
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	4613      	mov	r3, r2
 800994c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	88fa      	ldrh	r2, [r7, #6]
 8009958:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	88fa      	ldrh	r2, [r7, #6]
 8009960:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009972:	d10e      	bne.n	8009992 <UART_Start_Receive_IT+0x52>
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d105      	bne.n	8009988 <UART_Start_Receive_IT+0x48>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009982:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009986:	e02d      	b.n	80099e4 <UART_Start_Receive_IT+0xa4>
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	22ff      	movs	r2, #255	; 0xff
 800998c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009990:	e028      	b.n	80099e4 <UART_Start_Receive_IT+0xa4>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10d      	bne.n	80099b6 <UART_Start_Receive_IT+0x76>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d104      	bne.n	80099ac <UART_Start_Receive_IT+0x6c>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	22ff      	movs	r2, #255	; 0xff
 80099a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80099aa:	e01b      	b.n	80099e4 <UART_Start_Receive_IT+0xa4>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	227f      	movs	r2, #127	; 0x7f
 80099b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80099b4:	e016      	b.n	80099e4 <UART_Start_Receive_IT+0xa4>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099be:	d10d      	bne.n	80099dc <UART_Start_Receive_IT+0x9c>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d104      	bne.n	80099d2 <UART_Start_Receive_IT+0x92>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	227f      	movs	r2, #127	; 0x7f
 80099cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80099d0:	e008      	b.n	80099e4 <UART_Start_Receive_IT+0xa4>
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	223f      	movs	r2, #63	; 0x3f
 80099d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80099da:	e003      	b.n	80099e4 <UART_Start_Receive_IT+0xa4>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2200      	movs	r2, #0
 80099e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2222      	movs	r2, #34	; 0x22
 80099f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3308      	adds	r3, #8
 80099fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099fe:	e853 3f00 	ldrex	r3, [r3]
 8009a02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a06:	f043 0301 	orr.w	r3, r3, #1
 8009a0a:	657b      	str	r3, [r7, #84]	; 0x54
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	3308      	adds	r3, #8
 8009a12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a14:	64ba      	str	r2, [r7, #72]	; 0x48
 8009a16:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a1c:	e841 2300 	strex	r3, r2, [r1]
 8009a20:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1e5      	bne.n	80099f4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a30:	d107      	bne.n	8009a42 <UART_Start_Receive_IT+0x102>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	691b      	ldr	r3, [r3, #16]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d103      	bne.n	8009a42 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	4a21      	ldr	r2, [pc, #132]	; (8009ac4 <UART_Start_Receive_IT+0x184>)
 8009a3e:	669a      	str	r2, [r3, #104]	; 0x68
 8009a40:	e002      	b.n	8009a48 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	4a20      	ldr	r2, [pc, #128]	; (8009ac8 <UART_Start_Receive_IT+0x188>)
 8009a46:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d019      	beq.n	8009a84 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a58:	e853 3f00 	ldrex	r3, [r3]
 8009a5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a60:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009a64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a70:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a76:	e841 2300 	strex	r3, r2, [r1]
 8009a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d1e6      	bne.n	8009a50 <UART_Start_Receive_IT+0x110>
 8009a82:	e018      	b.n	8009ab6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	e853 3f00 	ldrex	r3, [r3]
 8009a90:	613b      	str	r3, [r7, #16]
   return(result);
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	f043 0320 	orr.w	r3, r3, #32
 8009a98:	653b      	str	r3, [r7, #80]	; 0x50
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aa2:	623b      	str	r3, [r7, #32]
 8009aa4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa6:	69f9      	ldr	r1, [r7, #28]
 8009aa8:	6a3a      	ldr	r2, [r7, #32]
 8009aaa:	e841 2300 	strex	r3, r2, [r1]
 8009aae:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1e6      	bne.n	8009a84 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	375c      	adds	r7, #92	; 0x5c
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr
 8009ac4:	08009f35 	.word	0x08009f35
 8009ac8:	08009d8d 	.word	0x08009d8d

08009acc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b095      	sub	sp, #84	; 0x54
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009adc:	e853 3f00 	ldrex	r3, [r3]
 8009ae0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	461a      	mov	r2, r3
 8009af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009af2:	643b      	str	r3, [r7, #64]	; 0x40
 8009af4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009af8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009afa:	e841 2300 	strex	r3, r2, [r1]
 8009afe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1e6      	bne.n	8009ad4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	3308      	adds	r3, #8
 8009b0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0e:	6a3b      	ldr	r3, [r7, #32]
 8009b10:	e853 3f00 	ldrex	r3, [r3]
 8009b14:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	f023 0301 	bic.w	r3, r3, #1
 8009b1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	3308      	adds	r3, #8
 8009b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b2e:	e841 2300 	strex	r3, r2, [r1]
 8009b32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1e5      	bne.n	8009b06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d118      	bne.n	8009b74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	e853 3f00 	ldrex	r3, [r3]
 8009b4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	f023 0310 	bic.w	r3, r3, #16
 8009b56:	647b      	str	r3, [r7, #68]	; 0x44
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	461a      	mov	r2, r3
 8009b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b60:	61bb      	str	r3, [r7, #24]
 8009b62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b64:	6979      	ldr	r1, [r7, #20]
 8009b66:	69ba      	ldr	r2, [r7, #24]
 8009b68:	e841 2300 	strex	r3, r2, [r1]
 8009b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1e6      	bne.n	8009b42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2220      	movs	r2, #32
 8009b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009b88:	bf00      	nop
 8009b8a:	3754      	adds	r7, #84	; 0x54
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr

08009b94 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f7ff fbc6 	bl	8009344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bb8:	bf00      	nop
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b08f      	sub	sp, #60	; 0x3c
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bcc:	2b21      	cmp	r3, #33	; 0x21
 8009bce:	d14d      	bne.n	8009c6c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d132      	bne.n	8009c42 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be2:	6a3b      	ldr	r3, [r7, #32]
 8009be4:	e853 3f00 	ldrex	r3, [r3]
 8009be8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bfc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c02:	e841 2300 	strex	r3, r2, [r1]
 8009c06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1e6      	bne.n	8009bdc <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	e853 3f00 	ldrex	r3, [r3]
 8009c1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c22:	633b      	str	r3, [r7, #48]	; 0x30
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	461a      	mov	r2, r3
 8009c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2c:	61bb      	str	r3, [r7, #24]
 8009c2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c30:	6979      	ldr	r1, [r7, #20]
 8009c32:	69ba      	ldr	r2, [r7, #24]
 8009c34:	e841 2300 	strex	r3, r2, [r1]
 8009c38:	613b      	str	r3, [r7, #16]
   return(result);
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1e6      	bne.n	8009c0e <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009c40:	e014      	b.n	8009c6c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c46:	781a      	ldrb	r2, [r3, #0]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	b292      	uxth	r2, r2
 8009c4e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c54:	1c5a      	adds	r2, r3, #1
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	3b01      	subs	r3, #1
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009c6c:	bf00      	nop
 8009c6e:	373c      	adds	r7, #60	; 0x3c
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b091      	sub	sp, #68	; 0x44
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c84:	2b21      	cmp	r3, #33	; 0x21
 8009c86:	d151      	bne.n	8009d2c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d132      	bne.n	8009cfa <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9c:	e853 3f00 	ldrex	r3, [r3]
 8009ca0:	623b      	str	r3, [r7, #32]
   return(result);
 8009ca2:	6a3b      	ldr	r3, [r7, #32]
 8009ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ca8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb2:	633b      	str	r3, [r7, #48]	; 0x30
 8009cb4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cba:	e841 2300 	strex	r3, r2, [r1]
 8009cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1e6      	bne.n	8009c94 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	e853 3f00 	ldrex	r3, [r3]
 8009cd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cda:	637b      	str	r3, [r7, #52]	; 0x34
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ce4:	61fb      	str	r3, [r7, #28]
 8009ce6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce8:	69b9      	ldr	r1, [r7, #24]
 8009cea:	69fa      	ldr	r2, [r7, #28]
 8009cec:	e841 2300 	strex	r3, r2, [r1]
 8009cf0:	617b      	str	r3, [r7, #20]
   return(result);
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1e6      	bne.n	8009cc6 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009cf8:	e018      	b.n	8009d2c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d02:	881a      	ldrh	r2, [r3, #0]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d0c:	b292      	uxth	r2, r2
 8009d0e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d14:	1c9a      	adds	r2, r3, #2
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	3b01      	subs	r3, #1
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009d2c:	bf00      	nop
 8009d2e:	3744      	adds	r7, #68	; 0x44
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b088      	sub	sp, #32
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	e853 3f00 	ldrex	r3, [r3]
 8009d4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d54:	61fb      	str	r3, [r7, #28]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	61bb      	str	r3, [r7, #24]
 8009d60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d62:	6979      	ldr	r1, [r7, #20]
 8009d64:	69ba      	ldr	r2, [r7, #24]
 8009d66:	e841 2300 	strex	r3, r2, [r1]
 8009d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1e6      	bne.n	8009d40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2220      	movs	r2, #32
 8009d76:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7f9 f94c 	bl	800301c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d84:	bf00      	nop
 8009d86:	3720      	adds	r7, #32
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b09c      	sub	sp, #112	; 0x70
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d9a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009da4:	2b22      	cmp	r3, #34	; 0x22
 8009da6:	f040 80b9 	bne.w	8009f1c <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009db0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009db4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009db8:	b2d9      	uxtb	r1, r3
 8009dba:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009dbe:	b2da      	uxtb	r2, r3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dc4:	400a      	ands	r2, r1
 8009dc6:	b2d2      	uxtb	r2, r2
 8009dc8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dce:	1c5a      	adds	r2, r3, #1
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	b29a      	uxth	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f040 809c 	bne.w	8009f2c <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dfc:	e853 3f00 	ldrex	r3, [r3]
 8009e00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009e08:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e12:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e14:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e16:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009e18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009e1a:	e841 2300 	strex	r3, r2, [r1]
 8009e1e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1e6      	bne.n	8009df4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	3308      	adds	r3, #8
 8009e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e30:	e853 3f00 	ldrex	r3, [r3]
 8009e34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e38:	f023 0301 	bic.w	r3, r3, #1
 8009e3c:	667b      	str	r3, [r7, #100]	; 0x64
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	3308      	adds	r3, #8
 8009e44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009e46:	647a      	str	r2, [r7, #68]	; 0x44
 8009e48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e4e:	e841 2300 	strex	r3, r2, [r1]
 8009e52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1e5      	bne.n	8009e26 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2220      	movs	r2, #32
 8009e5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d018      	beq.n	8009eae <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e84:	e853 3f00 	ldrex	r3, [r3]
 8009e88:	623b      	str	r3, [r7, #32]
   return(result);
 8009e8a:	6a3b      	ldr	r3, [r7, #32]
 8009e8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e90:	663b      	str	r3, [r7, #96]	; 0x60
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	461a      	mov	r2, r3
 8009e98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e9a:	633b      	str	r3, [r7, #48]	; 0x30
 8009e9c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ea0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ea2:	e841 2300 	strex	r3, r2, [r1]
 8009ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d1e6      	bne.n	8009e7c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d12e      	bne.n	8009f14 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	e853 3f00 	ldrex	r3, [r3]
 8009ec8:	60fb      	str	r3, [r7, #12]
   return(result);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f023 0310 	bic.w	r3, r3, #16
 8009ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009eda:	61fb      	str	r3, [r7, #28]
 8009edc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ede:	69b9      	ldr	r1, [r7, #24]
 8009ee0:	69fa      	ldr	r2, [r7, #28]
 8009ee2:	e841 2300 	strex	r3, r2, [r1]
 8009ee6:	617b      	str	r3, [r7, #20]
   return(result);
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1e6      	bne.n	8009ebc <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	69db      	ldr	r3, [r3, #28]
 8009ef4:	f003 0310 	and.w	r3, r3, #16
 8009ef8:	2b10      	cmp	r3, #16
 8009efa:	d103      	bne.n	8009f04 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	2210      	movs	r2, #16
 8009f02:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f7ff fa23 	bl	8009358 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009f12:	e00b      	b.n	8009f2c <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f7f9 f8a9 	bl	800306c <HAL_UART_RxCpltCallback>
}
 8009f1a:	e007      	b.n	8009f2c <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	699a      	ldr	r2, [r3, #24]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f042 0208 	orr.w	r2, r2, #8
 8009f2a:	619a      	str	r2, [r3, #24]
}
 8009f2c:	bf00      	nop
 8009f2e:	3770      	adds	r7, #112	; 0x70
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b09c      	sub	sp, #112	; 0x70
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f42:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f4c:	2b22      	cmp	r3, #34	; 0x22
 8009f4e:	f040 80b9 	bne.w	800a0c4 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009f58:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f60:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009f62:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009f66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	b29a      	uxth	r2, r3
 8009f6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f70:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f76:	1c9a      	adds	r2, r3, #2
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	3b01      	subs	r3, #1
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f040 809c 	bne.w	800a0d4 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fa4:	e853 3f00 	ldrex	r3, [r3]
 8009fa8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fb0:	667b      	str	r3, [r7, #100]	; 0x64
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fba:	657b      	str	r3, [r7, #84]	; 0x54
 8009fbc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009fc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009fc2:	e841 2300 	strex	r3, r2, [r1]
 8009fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1e6      	bne.n	8009f9c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	3308      	adds	r3, #8
 8009fd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd8:	e853 3f00 	ldrex	r3, [r3]
 8009fdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	f023 0301 	bic.w	r3, r3, #1
 8009fe4:	663b      	str	r3, [r7, #96]	; 0x60
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	3308      	adds	r3, #8
 8009fec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009fee:	643a      	str	r2, [r7, #64]	; 0x40
 8009ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ff4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ff6:	e841 2300 	strex	r3, r2, [r1]
 8009ffa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1e5      	bne.n	8009fce <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2220      	movs	r2, #32
 800a006:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a020:	2b00      	cmp	r3, #0
 800a022:	d018      	beq.n	800a056 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	6a3b      	ldr	r3, [r7, #32]
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	61fb      	str	r3, [r7, #28]
   return(result);
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a038:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a042:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a044:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a046:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a04a:	e841 2300 	strex	r3, r2, [r1]
 800a04e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1e6      	bne.n	800a024 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d12e      	bne.n	800a0bc <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	e853 3f00 	ldrex	r3, [r3]
 800a070:	60bb      	str	r3, [r7, #8]
   return(result);
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	f023 0310 	bic.w	r3, r3, #16
 800a078:	65bb      	str	r3, [r7, #88]	; 0x58
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	461a      	mov	r2, r3
 800a080:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a082:	61bb      	str	r3, [r7, #24]
 800a084:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a086:	6979      	ldr	r1, [r7, #20]
 800a088:	69ba      	ldr	r2, [r7, #24]
 800a08a:	e841 2300 	strex	r3, r2, [r1]
 800a08e:	613b      	str	r3, [r7, #16]
   return(result);
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1e6      	bne.n	800a064 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	69db      	ldr	r3, [r3, #28]
 800a09c:	f003 0310 	and.w	r3, r3, #16
 800a0a0:	2b10      	cmp	r3, #16
 800a0a2:	d103      	bne.n	800a0ac <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2210      	movs	r2, #16
 800a0aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f7ff f94f 	bl	8009358 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a0ba:	e00b      	b.n	800a0d4 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f7f8 ffd5 	bl	800306c <HAL_UART_RxCpltCallback>
}
 800a0c2:	e007      	b.n	800a0d4 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	699a      	ldr	r2, [r3, #24]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f042 0208 	orr.w	r2, r2, #8
 800a0d2:	619a      	str	r2, [r3, #24]
}
 800a0d4:	bf00      	nop
 800a0d6:	3770      	adds	r7, #112	; 0x70
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a0e4:	bf00      	nop
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <malloc>:
 800a0f0:	4b02      	ldr	r3, [pc, #8]	; (800a0fc <malloc+0xc>)
 800a0f2:	4601      	mov	r1, r0
 800a0f4:	6818      	ldr	r0, [r3, #0]
 800a0f6:	f000 b82b 	b.w	800a150 <_malloc_r>
 800a0fa:	bf00      	nop
 800a0fc:	2000023c 	.word	0x2000023c

0800a100 <free>:
 800a100:	4b02      	ldr	r3, [pc, #8]	; (800a10c <free+0xc>)
 800a102:	4601      	mov	r1, r0
 800a104:	6818      	ldr	r0, [r3, #0]
 800a106:	f002 bba9 	b.w	800c85c <_free_r>
 800a10a:	bf00      	nop
 800a10c:	2000023c 	.word	0x2000023c

0800a110 <sbrk_aligned>:
 800a110:	b570      	push	{r4, r5, r6, lr}
 800a112:	4e0e      	ldr	r6, [pc, #56]	; (800a14c <sbrk_aligned+0x3c>)
 800a114:	460c      	mov	r4, r1
 800a116:	6831      	ldr	r1, [r6, #0]
 800a118:	4605      	mov	r5, r0
 800a11a:	b911      	cbnz	r1, 800a122 <sbrk_aligned+0x12>
 800a11c:	f001 fcc0 	bl	800baa0 <_sbrk_r>
 800a120:	6030      	str	r0, [r6, #0]
 800a122:	4621      	mov	r1, r4
 800a124:	4628      	mov	r0, r5
 800a126:	f001 fcbb 	bl	800baa0 <_sbrk_r>
 800a12a:	1c43      	adds	r3, r0, #1
 800a12c:	d00a      	beq.n	800a144 <sbrk_aligned+0x34>
 800a12e:	1cc4      	adds	r4, r0, #3
 800a130:	f024 0403 	bic.w	r4, r4, #3
 800a134:	42a0      	cmp	r0, r4
 800a136:	d007      	beq.n	800a148 <sbrk_aligned+0x38>
 800a138:	1a21      	subs	r1, r4, r0
 800a13a:	4628      	mov	r0, r5
 800a13c:	f001 fcb0 	bl	800baa0 <_sbrk_r>
 800a140:	3001      	adds	r0, #1
 800a142:	d101      	bne.n	800a148 <sbrk_aligned+0x38>
 800a144:	f04f 34ff 	mov.w	r4, #4294967295
 800a148:	4620      	mov	r0, r4
 800a14a:	bd70      	pop	{r4, r5, r6, pc}
 800a14c:	20000a44 	.word	0x20000a44

0800a150 <_malloc_r>:
 800a150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a154:	1ccd      	adds	r5, r1, #3
 800a156:	f025 0503 	bic.w	r5, r5, #3
 800a15a:	3508      	adds	r5, #8
 800a15c:	2d0c      	cmp	r5, #12
 800a15e:	bf38      	it	cc
 800a160:	250c      	movcc	r5, #12
 800a162:	2d00      	cmp	r5, #0
 800a164:	4607      	mov	r7, r0
 800a166:	db01      	blt.n	800a16c <_malloc_r+0x1c>
 800a168:	42a9      	cmp	r1, r5
 800a16a:	d905      	bls.n	800a178 <_malloc_r+0x28>
 800a16c:	230c      	movs	r3, #12
 800a16e:	603b      	str	r3, [r7, #0]
 800a170:	2600      	movs	r6, #0
 800a172:	4630      	mov	r0, r6
 800a174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a178:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a24c <_malloc_r+0xfc>
 800a17c:	f000 f868 	bl	800a250 <__malloc_lock>
 800a180:	f8d8 3000 	ldr.w	r3, [r8]
 800a184:	461c      	mov	r4, r3
 800a186:	bb5c      	cbnz	r4, 800a1e0 <_malloc_r+0x90>
 800a188:	4629      	mov	r1, r5
 800a18a:	4638      	mov	r0, r7
 800a18c:	f7ff ffc0 	bl	800a110 <sbrk_aligned>
 800a190:	1c43      	adds	r3, r0, #1
 800a192:	4604      	mov	r4, r0
 800a194:	d155      	bne.n	800a242 <_malloc_r+0xf2>
 800a196:	f8d8 4000 	ldr.w	r4, [r8]
 800a19a:	4626      	mov	r6, r4
 800a19c:	2e00      	cmp	r6, #0
 800a19e:	d145      	bne.n	800a22c <_malloc_r+0xdc>
 800a1a0:	2c00      	cmp	r4, #0
 800a1a2:	d048      	beq.n	800a236 <_malloc_r+0xe6>
 800a1a4:	6823      	ldr	r3, [r4, #0]
 800a1a6:	4631      	mov	r1, r6
 800a1a8:	4638      	mov	r0, r7
 800a1aa:	eb04 0903 	add.w	r9, r4, r3
 800a1ae:	f001 fc77 	bl	800baa0 <_sbrk_r>
 800a1b2:	4581      	cmp	r9, r0
 800a1b4:	d13f      	bne.n	800a236 <_malloc_r+0xe6>
 800a1b6:	6821      	ldr	r1, [r4, #0]
 800a1b8:	1a6d      	subs	r5, r5, r1
 800a1ba:	4629      	mov	r1, r5
 800a1bc:	4638      	mov	r0, r7
 800a1be:	f7ff ffa7 	bl	800a110 <sbrk_aligned>
 800a1c2:	3001      	adds	r0, #1
 800a1c4:	d037      	beq.n	800a236 <_malloc_r+0xe6>
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	442b      	add	r3, r5
 800a1ca:	6023      	str	r3, [r4, #0]
 800a1cc:	f8d8 3000 	ldr.w	r3, [r8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d038      	beq.n	800a246 <_malloc_r+0xf6>
 800a1d4:	685a      	ldr	r2, [r3, #4]
 800a1d6:	42a2      	cmp	r2, r4
 800a1d8:	d12b      	bne.n	800a232 <_malloc_r+0xe2>
 800a1da:	2200      	movs	r2, #0
 800a1dc:	605a      	str	r2, [r3, #4]
 800a1de:	e00f      	b.n	800a200 <_malloc_r+0xb0>
 800a1e0:	6822      	ldr	r2, [r4, #0]
 800a1e2:	1b52      	subs	r2, r2, r5
 800a1e4:	d41f      	bmi.n	800a226 <_malloc_r+0xd6>
 800a1e6:	2a0b      	cmp	r2, #11
 800a1e8:	d917      	bls.n	800a21a <_malloc_r+0xca>
 800a1ea:	1961      	adds	r1, r4, r5
 800a1ec:	42a3      	cmp	r3, r4
 800a1ee:	6025      	str	r5, [r4, #0]
 800a1f0:	bf18      	it	ne
 800a1f2:	6059      	strne	r1, [r3, #4]
 800a1f4:	6863      	ldr	r3, [r4, #4]
 800a1f6:	bf08      	it	eq
 800a1f8:	f8c8 1000 	streq.w	r1, [r8]
 800a1fc:	5162      	str	r2, [r4, r5]
 800a1fe:	604b      	str	r3, [r1, #4]
 800a200:	4638      	mov	r0, r7
 800a202:	f104 060b 	add.w	r6, r4, #11
 800a206:	f000 f829 	bl	800a25c <__malloc_unlock>
 800a20a:	f026 0607 	bic.w	r6, r6, #7
 800a20e:	1d23      	adds	r3, r4, #4
 800a210:	1af2      	subs	r2, r6, r3
 800a212:	d0ae      	beq.n	800a172 <_malloc_r+0x22>
 800a214:	1b9b      	subs	r3, r3, r6
 800a216:	50a3      	str	r3, [r4, r2]
 800a218:	e7ab      	b.n	800a172 <_malloc_r+0x22>
 800a21a:	42a3      	cmp	r3, r4
 800a21c:	6862      	ldr	r2, [r4, #4]
 800a21e:	d1dd      	bne.n	800a1dc <_malloc_r+0x8c>
 800a220:	f8c8 2000 	str.w	r2, [r8]
 800a224:	e7ec      	b.n	800a200 <_malloc_r+0xb0>
 800a226:	4623      	mov	r3, r4
 800a228:	6864      	ldr	r4, [r4, #4]
 800a22a:	e7ac      	b.n	800a186 <_malloc_r+0x36>
 800a22c:	4634      	mov	r4, r6
 800a22e:	6876      	ldr	r6, [r6, #4]
 800a230:	e7b4      	b.n	800a19c <_malloc_r+0x4c>
 800a232:	4613      	mov	r3, r2
 800a234:	e7cc      	b.n	800a1d0 <_malloc_r+0x80>
 800a236:	230c      	movs	r3, #12
 800a238:	603b      	str	r3, [r7, #0]
 800a23a:	4638      	mov	r0, r7
 800a23c:	f000 f80e 	bl	800a25c <__malloc_unlock>
 800a240:	e797      	b.n	800a172 <_malloc_r+0x22>
 800a242:	6025      	str	r5, [r4, #0]
 800a244:	e7dc      	b.n	800a200 <_malloc_r+0xb0>
 800a246:	605b      	str	r3, [r3, #4]
 800a248:	deff      	udf	#255	; 0xff
 800a24a:	bf00      	nop
 800a24c:	20000a40 	.word	0x20000a40

0800a250 <__malloc_lock>:
 800a250:	4801      	ldr	r0, [pc, #4]	; (800a258 <__malloc_lock+0x8>)
 800a252:	f001 bc71 	b.w	800bb38 <__retarget_lock_acquire_recursive>
 800a256:	bf00      	nop
 800a258:	20000b88 	.word	0x20000b88

0800a25c <__malloc_unlock>:
 800a25c:	4801      	ldr	r0, [pc, #4]	; (800a264 <__malloc_unlock+0x8>)
 800a25e:	f001 bc6c 	b.w	800bb3a <__retarget_lock_release_recursive>
 800a262:	bf00      	nop
 800a264:	20000b88 	.word	0x20000b88

0800a268 <realloc>:
 800a268:	4b02      	ldr	r3, [pc, #8]	; (800a274 <realloc+0xc>)
 800a26a:	460a      	mov	r2, r1
 800a26c:	4601      	mov	r1, r0
 800a26e:	6818      	ldr	r0, [r3, #0]
 800a270:	f000 b802 	b.w	800a278 <_realloc_r>
 800a274:	2000023c 	.word	0x2000023c

0800a278 <_realloc_r>:
 800a278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a27c:	4680      	mov	r8, r0
 800a27e:	4614      	mov	r4, r2
 800a280:	460e      	mov	r6, r1
 800a282:	b921      	cbnz	r1, 800a28e <_realloc_r+0x16>
 800a284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a288:	4611      	mov	r1, r2
 800a28a:	f7ff bf61 	b.w	800a150 <_malloc_r>
 800a28e:	b92a      	cbnz	r2, 800a29c <_realloc_r+0x24>
 800a290:	f002 fae4 	bl	800c85c <_free_r>
 800a294:	4625      	mov	r5, r4
 800a296:	4628      	mov	r0, r5
 800a298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a29c:	f003 fb41 	bl	800d922 <_malloc_usable_size_r>
 800a2a0:	4284      	cmp	r4, r0
 800a2a2:	4607      	mov	r7, r0
 800a2a4:	d802      	bhi.n	800a2ac <_realloc_r+0x34>
 800a2a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2aa:	d812      	bhi.n	800a2d2 <_realloc_r+0x5a>
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	4640      	mov	r0, r8
 800a2b0:	f7ff ff4e 	bl	800a150 <_malloc_r>
 800a2b4:	4605      	mov	r5, r0
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	d0ed      	beq.n	800a296 <_realloc_r+0x1e>
 800a2ba:	42bc      	cmp	r4, r7
 800a2bc:	4622      	mov	r2, r4
 800a2be:	4631      	mov	r1, r6
 800a2c0:	bf28      	it	cs
 800a2c2:	463a      	movcs	r2, r7
 800a2c4:	f001 fc3a 	bl	800bb3c <memcpy>
 800a2c8:	4631      	mov	r1, r6
 800a2ca:	4640      	mov	r0, r8
 800a2cc:	f002 fac6 	bl	800c85c <_free_r>
 800a2d0:	e7e1      	b.n	800a296 <_realloc_r+0x1e>
 800a2d2:	4635      	mov	r5, r6
 800a2d4:	e7df      	b.n	800a296 <_realloc_r+0x1e>

0800a2d6 <sulp>:
 800a2d6:	b570      	push	{r4, r5, r6, lr}
 800a2d8:	4604      	mov	r4, r0
 800a2da:	460d      	mov	r5, r1
 800a2dc:	ec45 4b10 	vmov	d0, r4, r5
 800a2e0:	4616      	mov	r6, r2
 800a2e2:	f003 f9dd 	bl	800d6a0 <__ulp>
 800a2e6:	ec51 0b10 	vmov	r0, r1, d0
 800a2ea:	b17e      	cbz	r6, 800a30c <sulp+0x36>
 800a2ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a2f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	dd09      	ble.n	800a30c <sulp+0x36>
 800a2f8:	051b      	lsls	r3, r3, #20
 800a2fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a2fe:	2400      	movs	r4, #0
 800a300:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a304:	4622      	mov	r2, r4
 800a306:	462b      	mov	r3, r5
 800a308:	f7f6 f986 	bl	8000618 <__aeabi_dmul>
 800a30c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a310 <_strtod_l>:
 800a310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a314:	ed2d 8b02 	vpush	{d8}
 800a318:	b09b      	sub	sp, #108	; 0x6c
 800a31a:	4604      	mov	r4, r0
 800a31c:	9213      	str	r2, [sp, #76]	; 0x4c
 800a31e:	2200      	movs	r2, #0
 800a320:	9216      	str	r2, [sp, #88]	; 0x58
 800a322:	460d      	mov	r5, r1
 800a324:	f04f 0800 	mov.w	r8, #0
 800a328:	f04f 0900 	mov.w	r9, #0
 800a32c:	460a      	mov	r2, r1
 800a32e:	9215      	str	r2, [sp, #84]	; 0x54
 800a330:	7811      	ldrb	r1, [r2, #0]
 800a332:	292b      	cmp	r1, #43	; 0x2b
 800a334:	d04c      	beq.n	800a3d0 <_strtod_l+0xc0>
 800a336:	d83a      	bhi.n	800a3ae <_strtod_l+0x9e>
 800a338:	290d      	cmp	r1, #13
 800a33a:	d834      	bhi.n	800a3a6 <_strtod_l+0x96>
 800a33c:	2908      	cmp	r1, #8
 800a33e:	d834      	bhi.n	800a3aa <_strtod_l+0x9a>
 800a340:	2900      	cmp	r1, #0
 800a342:	d03d      	beq.n	800a3c0 <_strtod_l+0xb0>
 800a344:	2200      	movs	r2, #0
 800a346:	920a      	str	r2, [sp, #40]	; 0x28
 800a348:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a34a:	7832      	ldrb	r2, [r6, #0]
 800a34c:	2a30      	cmp	r2, #48	; 0x30
 800a34e:	f040 80b4 	bne.w	800a4ba <_strtod_l+0x1aa>
 800a352:	7872      	ldrb	r2, [r6, #1]
 800a354:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a358:	2a58      	cmp	r2, #88	; 0x58
 800a35a:	d170      	bne.n	800a43e <_strtod_l+0x12e>
 800a35c:	9302      	str	r3, [sp, #8]
 800a35e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a360:	9301      	str	r3, [sp, #4]
 800a362:	ab16      	add	r3, sp, #88	; 0x58
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	4a8e      	ldr	r2, [pc, #568]	; (800a5a0 <_strtod_l+0x290>)
 800a368:	ab17      	add	r3, sp, #92	; 0x5c
 800a36a:	a915      	add	r1, sp, #84	; 0x54
 800a36c:	4620      	mov	r0, r4
 800a36e:	f002 fb29 	bl	800c9c4 <__gethex>
 800a372:	f010 070f 	ands.w	r7, r0, #15
 800a376:	4605      	mov	r5, r0
 800a378:	d005      	beq.n	800a386 <_strtod_l+0x76>
 800a37a:	2f06      	cmp	r7, #6
 800a37c:	d12a      	bne.n	800a3d4 <_strtod_l+0xc4>
 800a37e:	3601      	adds	r6, #1
 800a380:	2300      	movs	r3, #0
 800a382:	9615      	str	r6, [sp, #84]	; 0x54
 800a384:	930a      	str	r3, [sp, #40]	; 0x28
 800a386:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f040 857f 	bne.w	800ae8c <_strtod_l+0xb7c>
 800a38e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a390:	b1db      	cbz	r3, 800a3ca <_strtod_l+0xba>
 800a392:	4642      	mov	r2, r8
 800a394:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a398:	ec43 2b10 	vmov	d0, r2, r3
 800a39c:	b01b      	add	sp, #108	; 0x6c
 800a39e:	ecbd 8b02 	vpop	{d8}
 800a3a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a6:	2920      	cmp	r1, #32
 800a3a8:	d1cc      	bne.n	800a344 <_strtod_l+0x34>
 800a3aa:	3201      	adds	r2, #1
 800a3ac:	e7bf      	b.n	800a32e <_strtod_l+0x1e>
 800a3ae:	292d      	cmp	r1, #45	; 0x2d
 800a3b0:	d1c8      	bne.n	800a344 <_strtod_l+0x34>
 800a3b2:	2101      	movs	r1, #1
 800a3b4:	910a      	str	r1, [sp, #40]	; 0x28
 800a3b6:	1c51      	adds	r1, r2, #1
 800a3b8:	9115      	str	r1, [sp, #84]	; 0x54
 800a3ba:	7852      	ldrb	r2, [r2, #1]
 800a3bc:	2a00      	cmp	r2, #0
 800a3be:	d1c3      	bne.n	800a348 <_strtod_l+0x38>
 800a3c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a3c2:	9515      	str	r5, [sp, #84]	; 0x54
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	f040 855f 	bne.w	800ae88 <_strtod_l+0xb78>
 800a3ca:	4642      	mov	r2, r8
 800a3cc:	464b      	mov	r3, r9
 800a3ce:	e7e3      	b.n	800a398 <_strtod_l+0x88>
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	e7ef      	b.n	800a3b4 <_strtod_l+0xa4>
 800a3d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a3d6:	b13a      	cbz	r2, 800a3e8 <_strtod_l+0xd8>
 800a3d8:	2135      	movs	r1, #53	; 0x35
 800a3da:	a818      	add	r0, sp, #96	; 0x60
 800a3dc:	f003 fa5d 	bl	800d89a <__copybits>
 800a3e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f002 fe30 	bl	800d048 <_Bfree>
 800a3e8:	3f01      	subs	r7, #1
 800a3ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a3ec:	2f04      	cmp	r7, #4
 800a3ee:	d806      	bhi.n	800a3fe <_strtod_l+0xee>
 800a3f0:	e8df f007 	tbb	[pc, r7]
 800a3f4:	201d0314 	.word	0x201d0314
 800a3f8:	14          	.byte	0x14
 800a3f9:	00          	.byte	0x00
 800a3fa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a3fe:	05e9      	lsls	r1, r5, #23
 800a400:	bf48      	it	mi
 800a402:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a406:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a40a:	0d1b      	lsrs	r3, r3, #20
 800a40c:	051b      	lsls	r3, r3, #20
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1b9      	bne.n	800a386 <_strtod_l+0x76>
 800a412:	f001 fb67 	bl	800bae4 <__errno>
 800a416:	2322      	movs	r3, #34	; 0x22
 800a418:	6003      	str	r3, [r0, #0]
 800a41a:	e7b4      	b.n	800a386 <_strtod_l+0x76>
 800a41c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a420:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a424:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a428:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a42c:	e7e7      	b.n	800a3fe <_strtod_l+0xee>
 800a42e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a5a8 <_strtod_l+0x298>
 800a432:	e7e4      	b.n	800a3fe <_strtod_l+0xee>
 800a434:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a438:	f04f 38ff 	mov.w	r8, #4294967295
 800a43c:	e7df      	b.n	800a3fe <_strtod_l+0xee>
 800a43e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a440:	1c5a      	adds	r2, r3, #1
 800a442:	9215      	str	r2, [sp, #84]	; 0x54
 800a444:	785b      	ldrb	r3, [r3, #1]
 800a446:	2b30      	cmp	r3, #48	; 0x30
 800a448:	d0f9      	beq.n	800a43e <_strtod_l+0x12e>
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d09b      	beq.n	800a386 <_strtod_l+0x76>
 800a44e:	2301      	movs	r3, #1
 800a450:	f04f 0a00 	mov.w	sl, #0
 800a454:	9304      	str	r3, [sp, #16]
 800a456:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a458:	930b      	str	r3, [sp, #44]	; 0x2c
 800a45a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a45e:	46d3      	mov	fp, sl
 800a460:	220a      	movs	r2, #10
 800a462:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a464:	7806      	ldrb	r6, [r0, #0]
 800a466:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a46a:	b2d9      	uxtb	r1, r3
 800a46c:	2909      	cmp	r1, #9
 800a46e:	d926      	bls.n	800a4be <_strtod_l+0x1ae>
 800a470:	494c      	ldr	r1, [pc, #304]	; (800a5a4 <_strtod_l+0x294>)
 800a472:	2201      	movs	r2, #1
 800a474:	f001 fac9 	bl	800ba0a <strncmp>
 800a478:	2800      	cmp	r0, #0
 800a47a:	d030      	beq.n	800a4de <_strtod_l+0x1ce>
 800a47c:	2000      	movs	r0, #0
 800a47e:	4632      	mov	r2, r6
 800a480:	9005      	str	r0, [sp, #20]
 800a482:	465e      	mov	r6, fp
 800a484:	4603      	mov	r3, r0
 800a486:	2a65      	cmp	r2, #101	; 0x65
 800a488:	d001      	beq.n	800a48e <_strtod_l+0x17e>
 800a48a:	2a45      	cmp	r2, #69	; 0x45
 800a48c:	d113      	bne.n	800a4b6 <_strtod_l+0x1a6>
 800a48e:	b91e      	cbnz	r6, 800a498 <_strtod_l+0x188>
 800a490:	9a04      	ldr	r2, [sp, #16]
 800a492:	4302      	orrs	r2, r0
 800a494:	d094      	beq.n	800a3c0 <_strtod_l+0xb0>
 800a496:	2600      	movs	r6, #0
 800a498:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a49a:	1c6a      	adds	r2, r5, #1
 800a49c:	9215      	str	r2, [sp, #84]	; 0x54
 800a49e:	786a      	ldrb	r2, [r5, #1]
 800a4a0:	2a2b      	cmp	r2, #43	; 0x2b
 800a4a2:	d074      	beq.n	800a58e <_strtod_l+0x27e>
 800a4a4:	2a2d      	cmp	r2, #45	; 0x2d
 800a4a6:	d078      	beq.n	800a59a <_strtod_l+0x28a>
 800a4a8:	f04f 0c00 	mov.w	ip, #0
 800a4ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a4b0:	2909      	cmp	r1, #9
 800a4b2:	d97f      	bls.n	800a5b4 <_strtod_l+0x2a4>
 800a4b4:	9515      	str	r5, [sp, #84]	; 0x54
 800a4b6:	2700      	movs	r7, #0
 800a4b8:	e09e      	b.n	800a5f8 <_strtod_l+0x2e8>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	e7c8      	b.n	800a450 <_strtod_l+0x140>
 800a4be:	f1bb 0f08 	cmp.w	fp, #8
 800a4c2:	bfd8      	it	le
 800a4c4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a4c6:	f100 0001 	add.w	r0, r0, #1
 800a4ca:	bfda      	itte	le
 800a4cc:	fb02 3301 	mlale	r3, r2, r1, r3
 800a4d0:	9309      	strle	r3, [sp, #36]	; 0x24
 800a4d2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a4d6:	f10b 0b01 	add.w	fp, fp, #1
 800a4da:	9015      	str	r0, [sp, #84]	; 0x54
 800a4dc:	e7c1      	b.n	800a462 <_strtod_l+0x152>
 800a4de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4e0:	1c5a      	adds	r2, r3, #1
 800a4e2:	9215      	str	r2, [sp, #84]	; 0x54
 800a4e4:	785a      	ldrb	r2, [r3, #1]
 800a4e6:	f1bb 0f00 	cmp.w	fp, #0
 800a4ea:	d037      	beq.n	800a55c <_strtod_l+0x24c>
 800a4ec:	9005      	str	r0, [sp, #20]
 800a4ee:	465e      	mov	r6, fp
 800a4f0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a4f4:	2b09      	cmp	r3, #9
 800a4f6:	d912      	bls.n	800a51e <_strtod_l+0x20e>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e7c4      	b.n	800a486 <_strtod_l+0x176>
 800a4fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4fe:	1c5a      	adds	r2, r3, #1
 800a500:	9215      	str	r2, [sp, #84]	; 0x54
 800a502:	785a      	ldrb	r2, [r3, #1]
 800a504:	3001      	adds	r0, #1
 800a506:	2a30      	cmp	r2, #48	; 0x30
 800a508:	d0f8      	beq.n	800a4fc <_strtod_l+0x1ec>
 800a50a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a50e:	2b08      	cmp	r3, #8
 800a510:	f200 84c1 	bhi.w	800ae96 <_strtod_l+0xb86>
 800a514:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a516:	9005      	str	r0, [sp, #20]
 800a518:	2000      	movs	r0, #0
 800a51a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a51c:	4606      	mov	r6, r0
 800a51e:	3a30      	subs	r2, #48	; 0x30
 800a520:	f100 0301 	add.w	r3, r0, #1
 800a524:	d014      	beq.n	800a550 <_strtod_l+0x240>
 800a526:	9905      	ldr	r1, [sp, #20]
 800a528:	4419      	add	r1, r3
 800a52a:	9105      	str	r1, [sp, #20]
 800a52c:	4633      	mov	r3, r6
 800a52e:	eb00 0c06 	add.w	ip, r0, r6
 800a532:	210a      	movs	r1, #10
 800a534:	4563      	cmp	r3, ip
 800a536:	d113      	bne.n	800a560 <_strtod_l+0x250>
 800a538:	1833      	adds	r3, r6, r0
 800a53a:	2b08      	cmp	r3, #8
 800a53c:	f106 0601 	add.w	r6, r6, #1
 800a540:	4406      	add	r6, r0
 800a542:	dc1a      	bgt.n	800a57a <_strtod_l+0x26a>
 800a544:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a546:	230a      	movs	r3, #10
 800a548:	fb03 2301 	mla	r3, r3, r1, r2
 800a54c:	9309      	str	r3, [sp, #36]	; 0x24
 800a54e:	2300      	movs	r3, #0
 800a550:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a552:	1c51      	adds	r1, r2, #1
 800a554:	9115      	str	r1, [sp, #84]	; 0x54
 800a556:	7852      	ldrb	r2, [r2, #1]
 800a558:	4618      	mov	r0, r3
 800a55a:	e7c9      	b.n	800a4f0 <_strtod_l+0x1e0>
 800a55c:	4658      	mov	r0, fp
 800a55e:	e7d2      	b.n	800a506 <_strtod_l+0x1f6>
 800a560:	2b08      	cmp	r3, #8
 800a562:	f103 0301 	add.w	r3, r3, #1
 800a566:	dc03      	bgt.n	800a570 <_strtod_l+0x260>
 800a568:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a56a:	434f      	muls	r7, r1
 800a56c:	9709      	str	r7, [sp, #36]	; 0x24
 800a56e:	e7e1      	b.n	800a534 <_strtod_l+0x224>
 800a570:	2b10      	cmp	r3, #16
 800a572:	bfd8      	it	le
 800a574:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a578:	e7dc      	b.n	800a534 <_strtod_l+0x224>
 800a57a:	2e10      	cmp	r6, #16
 800a57c:	bfdc      	itt	le
 800a57e:	230a      	movle	r3, #10
 800a580:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a584:	e7e3      	b.n	800a54e <_strtod_l+0x23e>
 800a586:	2300      	movs	r3, #0
 800a588:	9305      	str	r3, [sp, #20]
 800a58a:	2301      	movs	r3, #1
 800a58c:	e780      	b.n	800a490 <_strtod_l+0x180>
 800a58e:	f04f 0c00 	mov.w	ip, #0
 800a592:	1caa      	adds	r2, r5, #2
 800a594:	9215      	str	r2, [sp, #84]	; 0x54
 800a596:	78aa      	ldrb	r2, [r5, #2]
 800a598:	e788      	b.n	800a4ac <_strtod_l+0x19c>
 800a59a:	f04f 0c01 	mov.w	ip, #1
 800a59e:	e7f8      	b.n	800a592 <_strtod_l+0x282>
 800a5a0:	0800e4d4 	.word	0x0800e4d4
 800a5a4:	0800e4d0 	.word	0x0800e4d0
 800a5a8:	7ff00000 	.word	0x7ff00000
 800a5ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a5ae:	1c51      	adds	r1, r2, #1
 800a5b0:	9115      	str	r1, [sp, #84]	; 0x54
 800a5b2:	7852      	ldrb	r2, [r2, #1]
 800a5b4:	2a30      	cmp	r2, #48	; 0x30
 800a5b6:	d0f9      	beq.n	800a5ac <_strtod_l+0x29c>
 800a5b8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a5bc:	2908      	cmp	r1, #8
 800a5be:	f63f af7a 	bhi.w	800a4b6 <_strtod_l+0x1a6>
 800a5c2:	3a30      	subs	r2, #48	; 0x30
 800a5c4:	9208      	str	r2, [sp, #32]
 800a5c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a5c8:	920c      	str	r2, [sp, #48]	; 0x30
 800a5ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a5cc:	1c57      	adds	r7, r2, #1
 800a5ce:	9715      	str	r7, [sp, #84]	; 0x54
 800a5d0:	7852      	ldrb	r2, [r2, #1]
 800a5d2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a5d6:	f1be 0f09 	cmp.w	lr, #9
 800a5da:	d938      	bls.n	800a64e <_strtod_l+0x33e>
 800a5dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a5de:	1a7f      	subs	r7, r7, r1
 800a5e0:	2f08      	cmp	r7, #8
 800a5e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a5e6:	dc03      	bgt.n	800a5f0 <_strtod_l+0x2e0>
 800a5e8:	9908      	ldr	r1, [sp, #32]
 800a5ea:	428f      	cmp	r7, r1
 800a5ec:	bfa8      	it	ge
 800a5ee:	460f      	movge	r7, r1
 800a5f0:	f1bc 0f00 	cmp.w	ip, #0
 800a5f4:	d000      	beq.n	800a5f8 <_strtod_l+0x2e8>
 800a5f6:	427f      	negs	r7, r7
 800a5f8:	2e00      	cmp	r6, #0
 800a5fa:	d14f      	bne.n	800a69c <_strtod_l+0x38c>
 800a5fc:	9904      	ldr	r1, [sp, #16]
 800a5fe:	4301      	orrs	r1, r0
 800a600:	f47f aec1 	bne.w	800a386 <_strtod_l+0x76>
 800a604:	2b00      	cmp	r3, #0
 800a606:	f47f aedb 	bne.w	800a3c0 <_strtod_l+0xb0>
 800a60a:	2a69      	cmp	r2, #105	; 0x69
 800a60c:	d029      	beq.n	800a662 <_strtod_l+0x352>
 800a60e:	dc26      	bgt.n	800a65e <_strtod_l+0x34e>
 800a610:	2a49      	cmp	r2, #73	; 0x49
 800a612:	d026      	beq.n	800a662 <_strtod_l+0x352>
 800a614:	2a4e      	cmp	r2, #78	; 0x4e
 800a616:	f47f aed3 	bne.w	800a3c0 <_strtod_l+0xb0>
 800a61a:	499b      	ldr	r1, [pc, #620]	; (800a888 <_strtod_l+0x578>)
 800a61c:	a815      	add	r0, sp, #84	; 0x54
 800a61e:	f002 fc11 	bl	800ce44 <__match>
 800a622:	2800      	cmp	r0, #0
 800a624:	f43f aecc 	beq.w	800a3c0 <_strtod_l+0xb0>
 800a628:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	2b28      	cmp	r3, #40	; 0x28
 800a62e:	d12f      	bne.n	800a690 <_strtod_l+0x380>
 800a630:	4996      	ldr	r1, [pc, #600]	; (800a88c <_strtod_l+0x57c>)
 800a632:	aa18      	add	r2, sp, #96	; 0x60
 800a634:	a815      	add	r0, sp, #84	; 0x54
 800a636:	f002 fc19 	bl	800ce6c <__hexnan>
 800a63a:	2805      	cmp	r0, #5
 800a63c:	d128      	bne.n	800a690 <_strtod_l+0x380>
 800a63e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a640:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a644:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a648:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a64c:	e69b      	b.n	800a386 <_strtod_l+0x76>
 800a64e:	9f08      	ldr	r7, [sp, #32]
 800a650:	210a      	movs	r1, #10
 800a652:	fb01 2107 	mla	r1, r1, r7, r2
 800a656:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a65a:	9208      	str	r2, [sp, #32]
 800a65c:	e7b5      	b.n	800a5ca <_strtod_l+0x2ba>
 800a65e:	2a6e      	cmp	r2, #110	; 0x6e
 800a660:	e7d9      	b.n	800a616 <_strtod_l+0x306>
 800a662:	498b      	ldr	r1, [pc, #556]	; (800a890 <_strtod_l+0x580>)
 800a664:	a815      	add	r0, sp, #84	; 0x54
 800a666:	f002 fbed 	bl	800ce44 <__match>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	f43f aea8 	beq.w	800a3c0 <_strtod_l+0xb0>
 800a670:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a672:	4988      	ldr	r1, [pc, #544]	; (800a894 <_strtod_l+0x584>)
 800a674:	3b01      	subs	r3, #1
 800a676:	a815      	add	r0, sp, #84	; 0x54
 800a678:	9315      	str	r3, [sp, #84]	; 0x54
 800a67a:	f002 fbe3 	bl	800ce44 <__match>
 800a67e:	b910      	cbnz	r0, 800a686 <_strtod_l+0x376>
 800a680:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a682:	3301      	adds	r3, #1
 800a684:	9315      	str	r3, [sp, #84]	; 0x54
 800a686:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a8a4 <_strtod_l+0x594>
 800a68a:	f04f 0800 	mov.w	r8, #0
 800a68e:	e67a      	b.n	800a386 <_strtod_l+0x76>
 800a690:	4881      	ldr	r0, [pc, #516]	; (800a898 <_strtod_l+0x588>)
 800a692:	f001 fa61 	bl	800bb58 <nan>
 800a696:	ec59 8b10 	vmov	r8, r9, d0
 800a69a:	e674      	b.n	800a386 <_strtod_l+0x76>
 800a69c:	9b05      	ldr	r3, [sp, #20]
 800a69e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6a0:	1afb      	subs	r3, r7, r3
 800a6a2:	f1bb 0f00 	cmp.w	fp, #0
 800a6a6:	bf08      	it	eq
 800a6a8:	46b3      	moveq	fp, r6
 800a6aa:	2e10      	cmp	r6, #16
 800a6ac:	9308      	str	r3, [sp, #32]
 800a6ae:	4635      	mov	r5, r6
 800a6b0:	bfa8      	it	ge
 800a6b2:	2510      	movge	r5, #16
 800a6b4:	f7f5 ff36 	bl	8000524 <__aeabi_ui2d>
 800a6b8:	2e09      	cmp	r6, #9
 800a6ba:	4680      	mov	r8, r0
 800a6bc:	4689      	mov	r9, r1
 800a6be:	dd13      	ble.n	800a6e8 <_strtod_l+0x3d8>
 800a6c0:	4b76      	ldr	r3, [pc, #472]	; (800a89c <_strtod_l+0x58c>)
 800a6c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a6c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a6ca:	f7f5 ffa5 	bl	8000618 <__aeabi_dmul>
 800a6ce:	4680      	mov	r8, r0
 800a6d0:	4650      	mov	r0, sl
 800a6d2:	4689      	mov	r9, r1
 800a6d4:	f7f5 ff26 	bl	8000524 <__aeabi_ui2d>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	4640      	mov	r0, r8
 800a6de:	4649      	mov	r1, r9
 800a6e0:	f7f5 fde4 	bl	80002ac <__adddf3>
 800a6e4:	4680      	mov	r8, r0
 800a6e6:	4689      	mov	r9, r1
 800a6e8:	2e0f      	cmp	r6, #15
 800a6ea:	dc38      	bgt.n	800a75e <_strtod_l+0x44e>
 800a6ec:	9b08      	ldr	r3, [sp, #32]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f43f ae49 	beq.w	800a386 <_strtod_l+0x76>
 800a6f4:	dd24      	ble.n	800a740 <_strtod_l+0x430>
 800a6f6:	2b16      	cmp	r3, #22
 800a6f8:	dc0b      	bgt.n	800a712 <_strtod_l+0x402>
 800a6fa:	4968      	ldr	r1, [pc, #416]	; (800a89c <_strtod_l+0x58c>)
 800a6fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a700:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a704:	4642      	mov	r2, r8
 800a706:	464b      	mov	r3, r9
 800a708:	f7f5 ff86 	bl	8000618 <__aeabi_dmul>
 800a70c:	4680      	mov	r8, r0
 800a70e:	4689      	mov	r9, r1
 800a710:	e639      	b.n	800a386 <_strtod_l+0x76>
 800a712:	9a08      	ldr	r2, [sp, #32]
 800a714:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a718:	4293      	cmp	r3, r2
 800a71a:	db20      	blt.n	800a75e <_strtod_l+0x44e>
 800a71c:	4c5f      	ldr	r4, [pc, #380]	; (800a89c <_strtod_l+0x58c>)
 800a71e:	f1c6 060f 	rsb	r6, r6, #15
 800a722:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a726:	4642      	mov	r2, r8
 800a728:	464b      	mov	r3, r9
 800a72a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a72e:	f7f5 ff73 	bl	8000618 <__aeabi_dmul>
 800a732:	9b08      	ldr	r3, [sp, #32]
 800a734:	1b9e      	subs	r6, r3, r6
 800a736:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a73a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a73e:	e7e3      	b.n	800a708 <_strtod_l+0x3f8>
 800a740:	9b08      	ldr	r3, [sp, #32]
 800a742:	3316      	adds	r3, #22
 800a744:	db0b      	blt.n	800a75e <_strtod_l+0x44e>
 800a746:	9b05      	ldr	r3, [sp, #20]
 800a748:	1bdf      	subs	r7, r3, r7
 800a74a:	4b54      	ldr	r3, [pc, #336]	; (800a89c <_strtod_l+0x58c>)
 800a74c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a750:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a754:	4640      	mov	r0, r8
 800a756:	4649      	mov	r1, r9
 800a758:	f7f6 f888 	bl	800086c <__aeabi_ddiv>
 800a75c:	e7d6      	b.n	800a70c <_strtod_l+0x3fc>
 800a75e:	9b08      	ldr	r3, [sp, #32]
 800a760:	1b75      	subs	r5, r6, r5
 800a762:	441d      	add	r5, r3
 800a764:	2d00      	cmp	r5, #0
 800a766:	dd70      	ble.n	800a84a <_strtod_l+0x53a>
 800a768:	f015 030f 	ands.w	r3, r5, #15
 800a76c:	d00a      	beq.n	800a784 <_strtod_l+0x474>
 800a76e:	494b      	ldr	r1, [pc, #300]	; (800a89c <_strtod_l+0x58c>)
 800a770:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a774:	4642      	mov	r2, r8
 800a776:	464b      	mov	r3, r9
 800a778:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a77c:	f7f5 ff4c 	bl	8000618 <__aeabi_dmul>
 800a780:	4680      	mov	r8, r0
 800a782:	4689      	mov	r9, r1
 800a784:	f035 050f 	bics.w	r5, r5, #15
 800a788:	d04d      	beq.n	800a826 <_strtod_l+0x516>
 800a78a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a78e:	dd22      	ble.n	800a7d6 <_strtod_l+0x4c6>
 800a790:	2500      	movs	r5, #0
 800a792:	46ab      	mov	fp, r5
 800a794:	9509      	str	r5, [sp, #36]	; 0x24
 800a796:	9505      	str	r5, [sp, #20]
 800a798:	2322      	movs	r3, #34	; 0x22
 800a79a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a8a4 <_strtod_l+0x594>
 800a79e:	6023      	str	r3, [r4, #0]
 800a7a0:	f04f 0800 	mov.w	r8, #0
 800a7a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f43f aded 	beq.w	800a386 <_strtod_l+0x76>
 800a7ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f002 fc4a 	bl	800d048 <_Bfree>
 800a7b4:	9905      	ldr	r1, [sp, #20]
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f002 fc46 	bl	800d048 <_Bfree>
 800a7bc:	4659      	mov	r1, fp
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f002 fc42 	bl	800d048 <_Bfree>
 800a7c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f002 fc3e 	bl	800d048 <_Bfree>
 800a7cc:	4629      	mov	r1, r5
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f002 fc3a 	bl	800d048 <_Bfree>
 800a7d4:	e5d7      	b.n	800a386 <_strtod_l+0x76>
 800a7d6:	4b32      	ldr	r3, [pc, #200]	; (800a8a0 <_strtod_l+0x590>)
 800a7d8:	9304      	str	r3, [sp, #16]
 800a7da:	2300      	movs	r3, #0
 800a7dc:	112d      	asrs	r5, r5, #4
 800a7de:	4640      	mov	r0, r8
 800a7e0:	4649      	mov	r1, r9
 800a7e2:	469a      	mov	sl, r3
 800a7e4:	2d01      	cmp	r5, #1
 800a7e6:	dc21      	bgt.n	800a82c <_strtod_l+0x51c>
 800a7e8:	b10b      	cbz	r3, 800a7ee <_strtod_l+0x4de>
 800a7ea:	4680      	mov	r8, r0
 800a7ec:	4689      	mov	r9, r1
 800a7ee:	492c      	ldr	r1, [pc, #176]	; (800a8a0 <_strtod_l+0x590>)
 800a7f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a7f4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a7f8:	4642      	mov	r2, r8
 800a7fa:	464b      	mov	r3, r9
 800a7fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a800:	f7f5 ff0a 	bl	8000618 <__aeabi_dmul>
 800a804:	4b27      	ldr	r3, [pc, #156]	; (800a8a4 <_strtod_l+0x594>)
 800a806:	460a      	mov	r2, r1
 800a808:	400b      	ands	r3, r1
 800a80a:	4927      	ldr	r1, [pc, #156]	; (800a8a8 <_strtod_l+0x598>)
 800a80c:	428b      	cmp	r3, r1
 800a80e:	4680      	mov	r8, r0
 800a810:	d8be      	bhi.n	800a790 <_strtod_l+0x480>
 800a812:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a816:	428b      	cmp	r3, r1
 800a818:	bf86      	itte	hi
 800a81a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a8ac <_strtod_l+0x59c>
 800a81e:	f04f 38ff 	movhi.w	r8, #4294967295
 800a822:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a826:	2300      	movs	r3, #0
 800a828:	9304      	str	r3, [sp, #16]
 800a82a:	e07b      	b.n	800a924 <_strtod_l+0x614>
 800a82c:	07ea      	lsls	r2, r5, #31
 800a82e:	d505      	bpl.n	800a83c <_strtod_l+0x52c>
 800a830:	9b04      	ldr	r3, [sp, #16]
 800a832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a836:	f7f5 feef 	bl	8000618 <__aeabi_dmul>
 800a83a:	2301      	movs	r3, #1
 800a83c:	9a04      	ldr	r2, [sp, #16]
 800a83e:	3208      	adds	r2, #8
 800a840:	f10a 0a01 	add.w	sl, sl, #1
 800a844:	106d      	asrs	r5, r5, #1
 800a846:	9204      	str	r2, [sp, #16]
 800a848:	e7cc      	b.n	800a7e4 <_strtod_l+0x4d4>
 800a84a:	d0ec      	beq.n	800a826 <_strtod_l+0x516>
 800a84c:	426d      	negs	r5, r5
 800a84e:	f015 020f 	ands.w	r2, r5, #15
 800a852:	d00a      	beq.n	800a86a <_strtod_l+0x55a>
 800a854:	4b11      	ldr	r3, [pc, #68]	; (800a89c <_strtod_l+0x58c>)
 800a856:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a85a:	4640      	mov	r0, r8
 800a85c:	4649      	mov	r1, r9
 800a85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a862:	f7f6 f803 	bl	800086c <__aeabi_ddiv>
 800a866:	4680      	mov	r8, r0
 800a868:	4689      	mov	r9, r1
 800a86a:	112d      	asrs	r5, r5, #4
 800a86c:	d0db      	beq.n	800a826 <_strtod_l+0x516>
 800a86e:	2d1f      	cmp	r5, #31
 800a870:	dd1e      	ble.n	800a8b0 <_strtod_l+0x5a0>
 800a872:	2500      	movs	r5, #0
 800a874:	46ab      	mov	fp, r5
 800a876:	9509      	str	r5, [sp, #36]	; 0x24
 800a878:	9505      	str	r5, [sp, #20]
 800a87a:	2322      	movs	r3, #34	; 0x22
 800a87c:	f04f 0800 	mov.w	r8, #0
 800a880:	f04f 0900 	mov.w	r9, #0
 800a884:	6023      	str	r3, [r4, #0]
 800a886:	e78d      	b.n	800a7a4 <_strtod_l+0x494>
 800a888:	0800e636 	.word	0x0800e636
 800a88c:	0800e4e8 	.word	0x0800e4e8
 800a890:	0800e62e 	.word	0x0800e62e
 800a894:	0800e668 	.word	0x0800e668
 800a898:	0800e8f8 	.word	0x0800e8f8
 800a89c:	0800e7d8 	.word	0x0800e7d8
 800a8a0:	0800e7b0 	.word	0x0800e7b0
 800a8a4:	7ff00000 	.word	0x7ff00000
 800a8a8:	7ca00000 	.word	0x7ca00000
 800a8ac:	7fefffff 	.word	0x7fefffff
 800a8b0:	f015 0310 	ands.w	r3, r5, #16
 800a8b4:	bf18      	it	ne
 800a8b6:	236a      	movne	r3, #106	; 0x6a
 800a8b8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ac5c <_strtod_l+0x94c>
 800a8bc:	9304      	str	r3, [sp, #16]
 800a8be:	4640      	mov	r0, r8
 800a8c0:	4649      	mov	r1, r9
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	07ea      	lsls	r2, r5, #31
 800a8c6:	d504      	bpl.n	800a8d2 <_strtod_l+0x5c2>
 800a8c8:	e9da 2300 	ldrd	r2, r3, [sl]
 800a8cc:	f7f5 fea4 	bl	8000618 <__aeabi_dmul>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	106d      	asrs	r5, r5, #1
 800a8d4:	f10a 0a08 	add.w	sl, sl, #8
 800a8d8:	d1f4      	bne.n	800a8c4 <_strtod_l+0x5b4>
 800a8da:	b10b      	cbz	r3, 800a8e0 <_strtod_l+0x5d0>
 800a8dc:	4680      	mov	r8, r0
 800a8de:	4689      	mov	r9, r1
 800a8e0:	9b04      	ldr	r3, [sp, #16]
 800a8e2:	b1bb      	cbz	r3, 800a914 <_strtod_l+0x604>
 800a8e4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a8e8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	4649      	mov	r1, r9
 800a8f0:	dd10      	ble.n	800a914 <_strtod_l+0x604>
 800a8f2:	2b1f      	cmp	r3, #31
 800a8f4:	f340 811e 	ble.w	800ab34 <_strtod_l+0x824>
 800a8f8:	2b34      	cmp	r3, #52	; 0x34
 800a8fa:	bfde      	ittt	le
 800a8fc:	f04f 33ff 	movle.w	r3, #4294967295
 800a900:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a904:	4093      	lslle	r3, r2
 800a906:	f04f 0800 	mov.w	r8, #0
 800a90a:	bfcc      	ite	gt
 800a90c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a910:	ea03 0901 	andle.w	r9, r3, r1
 800a914:	2200      	movs	r2, #0
 800a916:	2300      	movs	r3, #0
 800a918:	4640      	mov	r0, r8
 800a91a:	4649      	mov	r1, r9
 800a91c:	f7f6 f8e4 	bl	8000ae8 <__aeabi_dcmpeq>
 800a920:	2800      	cmp	r0, #0
 800a922:	d1a6      	bne.n	800a872 <_strtod_l+0x562>
 800a924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a926:	9300      	str	r3, [sp, #0]
 800a928:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a92a:	4633      	mov	r3, r6
 800a92c:	465a      	mov	r2, fp
 800a92e:	4620      	mov	r0, r4
 800a930:	f002 fbf2 	bl	800d118 <__s2b>
 800a934:	9009      	str	r0, [sp, #36]	; 0x24
 800a936:	2800      	cmp	r0, #0
 800a938:	f43f af2a 	beq.w	800a790 <_strtod_l+0x480>
 800a93c:	9a08      	ldr	r2, [sp, #32]
 800a93e:	9b05      	ldr	r3, [sp, #20]
 800a940:	2a00      	cmp	r2, #0
 800a942:	eba3 0307 	sub.w	r3, r3, r7
 800a946:	bfa8      	it	ge
 800a948:	2300      	movge	r3, #0
 800a94a:	930c      	str	r3, [sp, #48]	; 0x30
 800a94c:	2500      	movs	r5, #0
 800a94e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a952:	9312      	str	r3, [sp, #72]	; 0x48
 800a954:	46ab      	mov	fp, r5
 800a956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a958:	4620      	mov	r0, r4
 800a95a:	6859      	ldr	r1, [r3, #4]
 800a95c:	f002 fb34 	bl	800cfc8 <_Balloc>
 800a960:	9005      	str	r0, [sp, #20]
 800a962:	2800      	cmp	r0, #0
 800a964:	f43f af18 	beq.w	800a798 <_strtod_l+0x488>
 800a968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a96a:	691a      	ldr	r2, [r3, #16]
 800a96c:	3202      	adds	r2, #2
 800a96e:	f103 010c 	add.w	r1, r3, #12
 800a972:	0092      	lsls	r2, r2, #2
 800a974:	300c      	adds	r0, #12
 800a976:	f001 f8e1 	bl	800bb3c <memcpy>
 800a97a:	ec49 8b10 	vmov	d0, r8, r9
 800a97e:	aa18      	add	r2, sp, #96	; 0x60
 800a980:	a917      	add	r1, sp, #92	; 0x5c
 800a982:	4620      	mov	r0, r4
 800a984:	f002 fefc 	bl	800d780 <__d2b>
 800a988:	ec49 8b18 	vmov	d8, r8, r9
 800a98c:	9016      	str	r0, [sp, #88]	; 0x58
 800a98e:	2800      	cmp	r0, #0
 800a990:	f43f af02 	beq.w	800a798 <_strtod_l+0x488>
 800a994:	2101      	movs	r1, #1
 800a996:	4620      	mov	r0, r4
 800a998:	f002 fc56 	bl	800d248 <__i2b>
 800a99c:	4683      	mov	fp, r0
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	f43f aefa 	beq.w	800a798 <_strtod_l+0x488>
 800a9a4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a9a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a9a8:	2e00      	cmp	r6, #0
 800a9aa:	bfab      	itete	ge
 800a9ac:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a9ae:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a9b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a9b2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a9b6:	bfac      	ite	ge
 800a9b8:	eb06 0a03 	addge.w	sl, r6, r3
 800a9bc:	1b9f      	sublt	r7, r3, r6
 800a9be:	9b04      	ldr	r3, [sp, #16]
 800a9c0:	1af6      	subs	r6, r6, r3
 800a9c2:	4416      	add	r6, r2
 800a9c4:	4ba0      	ldr	r3, [pc, #640]	; (800ac48 <_strtod_l+0x938>)
 800a9c6:	3e01      	subs	r6, #1
 800a9c8:	429e      	cmp	r6, r3
 800a9ca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a9ce:	f280 80c4 	bge.w	800ab5a <_strtod_l+0x84a>
 800a9d2:	1b9b      	subs	r3, r3, r6
 800a9d4:	2b1f      	cmp	r3, #31
 800a9d6:	eba2 0203 	sub.w	r2, r2, r3
 800a9da:	f04f 0101 	mov.w	r1, #1
 800a9de:	f300 80b0 	bgt.w	800ab42 <_strtod_l+0x832>
 800a9e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a9e6:	930e      	str	r3, [sp, #56]	; 0x38
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	930d      	str	r3, [sp, #52]	; 0x34
 800a9ec:	eb0a 0602 	add.w	r6, sl, r2
 800a9f0:	9b04      	ldr	r3, [sp, #16]
 800a9f2:	45b2      	cmp	sl, r6
 800a9f4:	4417      	add	r7, r2
 800a9f6:	441f      	add	r7, r3
 800a9f8:	4653      	mov	r3, sl
 800a9fa:	bfa8      	it	ge
 800a9fc:	4633      	movge	r3, r6
 800a9fe:	42bb      	cmp	r3, r7
 800aa00:	bfa8      	it	ge
 800aa02:	463b      	movge	r3, r7
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	bfc2      	ittt	gt
 800aa08:	1af6      	subgt	r6, r6, r3
 800aa0a:	1aff      	subgt	r7, r7, r3
 800aa0c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800aa10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	dd17      	ble.n	800aa46 <_strtod_l+0x736>
 800aa16:	4659      	mov	r1, fp
 800aa18:	461a      	mov	r2, r3
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f002 fcd4 	bl	800d3c8 <__pow5mult>
 800aa20:	4683      	mov	fp, r0
 800aa22:	2800      	cmp	r0, #0
 800aa24:	f43f aeb8 	beq.w	800a798 <_strtod_l+0x488>
 800aa28:	4601      	mov	r1, r0
 800aa2a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f002 fc21 	bl	800d274 <__multiply>
 800aa32:	900b      	str	r0, [sp, #44]	; 0x2c
 800aa34:	2800      	cmp	r0, #0
 800aa36:	f43f aeaf 	beq.w	800a798 <_strtod_l+0x488>
 800aa3a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aa3c:	4620      	mov	r0, r4
 800aa3e:	f002 fb03 	bl	800d048 <_Bfree>
 800aa42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa44:	9316      	str	r3, [sp, #88]	; 0x58
 800aa46:	2e00      	cmp	r6, #0
 800aa48:	f300 808c 	bgt.w	800ab64 <_strtod_l+0x854>
 800aa4c:	9b08      	ldr	r3, [sp, #32]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	dd08      	ble.n	800aa64 <_strtod_l+0x754>
 800aa52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa54:	9905      	ldr	r1, [sp, #20]
 800aa56:	4620      	mov	r0, r4
 800aa58:	f002 fcb6 	bl	800d3c8 <__pow5mult>
 800aa5c:	9005      	str	r0, [sp, #20]
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	f43f ae9a 	beq.w	800a798 <_strtod_l+0x488>
 800aa64:	2f00      	cmp	r7, #0
 800aa66:	dd08      	ble.n	800aa7a <_strtod_l+0x76a>
 800aa68:	9905      	ldr	r1, [sp, #20]
 800aa6a:	463a      	mov	r2, r7
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f002 fd05 	bl	800d47c <__lshift>
 800aa72:	9005      	str	r0, [sp, #20]
 800aa74:	2800      	cmp	r0, #0
 800aa76:	f43f ae8f 	beq.w	800a798 <_strtod_l+0x488>
 800aa7a:	f1ba 0f00 	cmp.w	sl, #0
 800aa7e:	dd08      	ble.n	800aa92 <_strtod_l+0x782>
 800aa80:	4659      	mov	r1, fp
 800aa82:	4652      	mov	r2, sl
 800aa84:	4620      	mov	r0, r4
 800aa86:	f002 fcf9 	bl	800d47c <__lshift>
 800aa8a:	4683      	mov	fp, r0
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	f43f ae83 	beq.w	800a798 <_strtod_l+0x488>
 800aa92:	9a05      	ldr	r2, [sp, #20]
 800aa94:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aa96:	4620      	mov	r0, r4
 800aa98:	f002 fd78 	bl	800d58c <__mdiff>
 800aa9c:	4605      	mov	r5, r0
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	f43f ae7a 	beq.w	800a798 <_strtod_l+0x488>
 800aaa4:	68c3      	ldr	r3, [r0, #12]
 800aaa6:	930b      	str	r3, [sp, #44]	; 0x2c
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	60c3      	str	r3, [r0, #12]
 800aaac:	4659      	mov	r1, fp
 800aaae:	f002 fd51 	bl	800d554 <__mcmp>
 800aab2:	2800      	cmp	r0, #0
 800aab4:	da60      	bge.n	800ab78 <_strtod_l+0x868>
 800aab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aab8:	ea53 0308 	orrs.w	r3, r3, r8
 800aabc:	f040 8084 	bne.w	800abc8 <_strtod_l+0x8b8>
 800aac0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d17f      	bne.n	800abc8 <_strtod_l+0x8b8>
 800aac8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aacc:	0d1b      	lsrs	r3, r3, #20
 800aace:	051b      	lsls	r3, r3, #20
 800aad0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aad4:	d978      	bls.n	800abc8 <_strtod_l+0x8b8>
 800aad6:	696b      	ldr	r3, [r5, #20]
 800aad8:	b913      	cbnz	r3, 800aae0 <_strtod_l+0x7d0>
 800aada:	692b      	ldr	r3, [r5, #16]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	dd73      	ble.n	800abc8 <_strtod_l+0x8b8>
 800aae0:	4629      	mov	r1, r5
 800aae2:	2201      	movs	r2, #1
 800aae4:	4620      	mov	r0, r4
 800aae6:	f002 fcc9 	bl	800d47c <__lshift>
 800aaea:	4659      	mov	r1, fp
 800aaec:	4605      	mov	r5, r0
 800aaee:	f002 fd31 	bl	800d554 <__mcmp>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	dd68      	ble.n	800abc8 <_strtod_l+0x8b8>
 800aaf6:	9904      	ldr	r1, [sp, #16]
 800aaf8:	4a54      	ldr	r2, [pc, #336]	; (800ac4c <_strtod_l+0x93c>)
 800aafa:	464b      	mov	r3, r9
 800aafc:	2900      	cmp	r1, #0
 800aafe:	f000 8084 	beq.w	800ac0a <_strtod_l+0x8fa>
 800ab02:	ea02 0109 	and.w	r1, r2, r9
 800ab06:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ab0a:	dc7e      	bgt.n	800ac0a <_strtod_l+0x8fa>
 800ab0c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ab10:	f77f aeb3 	ble.w	800a87a <_strtod_l+0x56a>
 800ab14:	4b4e      	ldr	r3, [pc, #312]	; (800ac50 <_strtod_l+0x940>)
 800ab16:	4640      	mov	r0, r8
 800ab18:	4649      	mov	r1, r9
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f7f5 fd7c 	bl	8000618 <__aeabi_dmul>
 800ab20:	4b4a      	ldr	r3, [pc, #296]	; (800ac4c <_strtod_l+0x93c>)
 800ab22:	400b      	ands	r3, r1
 800ab24:	4680      	mov	r8, r0
 800ab26:	4689      	mov	r9, r1
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f47f ae3f 	bne.w	800a7ac <_strtod_l+0x49c>
 800ab2e:	2322      	movs	r3, #34	; 0x22
 800ab30:	6023      	str	r3, [r4, #0]
 800ab32:	e63b      	b.n	800a7ac <_strtod_l+0x49c>
 800ab34:	f04f 32ff 	mov.w	r2, #4294967295
 800ab38:	fa02 f303 	lsl.w	r3, r2, r3
 800ab3c:	ea03 0808 	and.w	r8, r3, r8
 800ab40:	e6e8      	b.n	800a914 <_strtod_l+0x604>
 800ab42:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ab46:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ab4a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ab4e:	36e2      	adds	r6, #226	; 0xe2
 800ab50:	fa01 f306 	lsl.w	r3, r1, r6
 800ab54:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ab58:	e748      	b.n	800a9ec <_strtod_l+0x6dc>
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800ab62:	e743      	b.n	800a9ec <_strtod_l+0x6dc>
 800ab64:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab66:	4632      	mov	r2, r6
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f002 fc87 	bl	800d47c <__lshift>
 800ab6e:	9016      	str	r0, [sp, #88]	; 0x58
 800ab70:	2800      	cmp	r0, #0
 800ab72:	f47f af6b 	bne.w	800aa4c <_strtod_l+0x73c>
 800ab76:	e60f      	b.n	800a798 <_strtod_l+0x488>
 800ab78:	46ca      	mov	sl, r9
 800ab7a:	d171      	bne.n	800ac60 <_strtod_l+0x950>
 800ab7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab82:	b352      	cbz	r2, 800abda <_strtod_l+0x8ca>
 800ab84:	4a33      	ldr	r2, [pc, #204]	; (800ac54 <_strtod_l+0x944>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d12a      	bne.n	800abe0 <_strtod_l+0x8d0>
 800ab8a:	9b04      	ldr	r3, [sp, #16]
 800ab8c:	4641      	mov	r1, r8
 800ab8e:	b1fb      	cbz	r3, 800abd0 <_strtod_l+0x8c0>
 800ab90:	4b2e      	ldr	r3, [pc, #184]	; (800ac4c <_strtod_l+0x93c>)
 800ab92:	ea09 0303 	and.w	r3, r9, r3
 800ab96:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ab9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab9e:	d81a      	bhi.n	800abd6 <_strtod_l+0x8c6>
 800aba0:	0d1b      	lsrs	r3, r3, #20
 800aba2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aba6:	fa02 f303 	lsl.w	r3, r2, r3
 800abaa:	4299      	cmp	r1, r3
 800abac:	d118      	bne.n	800abe0 <_strtod_l+0x8d0>
 800abae:	4b2a      	ldr	r3, [pc, #168]	; (800ac58 <_strtod_l+0x948>)
 800abb0:	459a      	cmp	sl, r3
 800abb2:	d102      	bne.n	800abba <_strtod_l+0x8aa>
 800abb4:	3101      	adds	r1, #1
 800abb6:	f43f adef 	beq.w	800a798 <_strtod_l+0x488>
 800abba:	4b24      	ldr	r3, [pc, #144]	; (800ac4c <_strtod_l+0x93c>)
 800abbc:	ea0a 0303 	and.w	r3, sl, r3
 800abc0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800abc4:	f04f 0800 	mov.w	r8, #0
 800abc8:	9b04      	ldr	r3, [sp, #16]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1a2      	bne.n	800ab14 <_strtod_l+0x804>
 800abce:	e5ed      	b.n	800a7ac <_strtod_l+0x49c>
 800abd0:	f04f 33ff 	mov.w	r3, #4294967295
 800abd4:	e7e9      	b.n	800abaa <_strtod_l+0x89a>
 800abd6:	4613      	mov	r3, r2
 800abd8:	e7e7      	b.n	800abaa <_strtod_l+0x89a>
 800abda:	ea53 0308 	orrs.w	r3, r3, r8
 800abde:	d08a      	beq.n	800aaf6 <_strtod_l+0x7e6>
 800abe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abe2:	b1e3      	cbz	r3, 800ac1e <_strtod_l+0x90e>
 800abe4:	ea13 0f0a 	tst.w	r3, sl
 800abe8:	d0ee      	beq.n	800abc8 <_strtod_l+0x8b8>
 800abea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abec:	9a04      	ldr	r2, [sp, #16]
 800abee:	4640      	mov	r0, r8
 800abf0:	4649      	mov	r1, r9
 800abf2:	b1c3      	cbz	r3, 800ac26 <_strtod_l+0x916>
 800abf4:	f7ff fb6f 	bl	800a2d6 <sulp>
 800abf8:	4602      	mov	r2, r0
 800abfa:	460b      	mov	r3, r1
 800abfc:	ec51 0b18 	vmov	r0, r1, d8
 800ac00:	f7f5 fb54 	bl	80002ac <__adddf3>
 800ac04:	4680      	mov	r8, r0
 800ac06:	4689      	mov	r9, r1
 800ac08:	e7de      	b.n	800abc8 <_strtod_l+0x8b8>
 800ac0a:	4013      	ands	r3, r2
 800ac0c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ac10:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ac14:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ac18:	f04f 38ff 	mov.w	r8, #4294967295
 800ac1c:	e7d4      	b.n	800abc8 <_strtod_l+0x8b8>
 800ac1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac20:	ea13 0f08 	tst.w	r3, r8
 800ac24:	e7e0      	b.n	800abe8 <_strtod_l+0x8d8>
 800ac26:	f7ff fb56 	bl	800a2d6 <sulp>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	ec51 0b18 	vmov	r0, r1, d8
 800ac32:	f7f5 fb39 	bl	80002a8 <__aeabi_dsub>
 800ac36:	2200      	movs	r2, #0
 800ac38:	2300      	movs	r3, #0
 800ac3a:	4680      	mov	r8, r0
 800ac3c:	4689      	mov	r9, r1
 800ac3e:	f7f5 ff53 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac42:	2800      	cmp	r0, #0
 800ac44:	d0c0      	beq.n	800abc8 <_strtod_l+0x8b8>
 800ac46:	e618      	b.n	800a87a <_strtod_l+0x56a>
 800ac48:	fffffc02 	.word	0xfffffc02
 800ac4c:	7ff00000 	.word	0x7ff00000
 800ac50:	39500000 	.word	0x39500000
 800ac54:	000fffff 	.word	0x000fffff
 800ac58:	7fefffff 	.word	0x7fefffff
 800ac5c:	0800e500 	.word	0x0800e500
 800ac60:	4659      	mov	r1, fp
 800ac62:	4628      	mov	r0, r5
 800ac64:	f002 fde6 	bl	800d834 <__ratio>
 800ac68:	ec57 6b10 	vmov	r6, r7, d0
 800ac6c:	ee10 0a10 	vmov	r0, s0
 800ac70:	2200      	movs	r2, #0
 800ac72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac76:	4639      	mov	r1, r7
 800ac78:	f7f5 ff4a 	bl	8000b10 <__aeabi_dcmple>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d071      	beq.n	800ad64 <_strtod_l+0xa54>
 800ac80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d17c      	bne.n	800ad80 <_strtod_l+0xa70>
 800ac86:	f1b8 0f00 	cmp.w	r8, #0
 800ac8a:	d15a      	bne.n	800ad42 <_strtod_l+0xa32>
 800ac8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d15d      	bne.n	800ad50 <_strtod_l+0xa40>
 800ac94:	4b90      	ldr	r3, [pc, #576]	; (800aed8 <_strtod_l+0xbc8>)
 800ac96:	2200      	movs	r2, #0
 800ac98:	4630      	mov	r0, r6
 800ac9a:	4639      	mov	r1, r7
 800ac9c:	f7f5 ff2e 	bl	8000afc <__aeabi_dcmplt>
 800aca0:	2800      	cmp	r0, #0
 800aca2:	d15c      	bne.n	800ad5e <_strtod_l+0xa4e>
 800aca4:	4630      	mov	r0, r6
 800aca6:	4639      	mov	r1, r7
 800aca8:	4b8c      	ldr	r3, [pc, #560]	; (800aedc <_strtod_l+0xbcc>)
 800acaa:	2200      	movs	r2, #0
 800acac:	f7f5 fcb4 	bl	8000618 <__aeabi_dmul>
 800acb0:	4606      	mov	r6, r0
 800acb2:	460f      	mov	r7, r1
 800acb4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800acb8:	9606      	str	r6, [sp, #24]
 800acba:	9307      	str	r3, [sp, #28]
 800acbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acc0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800acc4:	4b86      	ldr	r3, [pc, #536]	; (800aee0 <_strtod_l+0xbd0>)
 800acc6:	ea0a 0303 	and.w	r3, sl, r3
 800acca:	930d      	str	r3, [sp, #52]	; 0x34
 800accc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acce:	4b85      	ldr	r3, [pc, #532]	; (800aee4 <_strtod_l+0xbd4>)
 800acd0:	429a      	cmp	r2, r3
 800acd2:	f040 8090 	bne.w	800adf6 <_strtod_l+0xae6>
 800acd6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800acda:	ec49 8b10 	vmov	d0, r8, r9
 800acde:	f002 fcdf 	bl	800d6a0 <__ulp>
 800ace2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ace6:	ec51 0b10 	vmov	r0, r1, d0
 800acea:	f7f5 fc95 	bl	8000618 <__aeabi_dmul>
 800acee:	4642      	mov	r2, r8
 800acf0:	464b      	mov	r3, r9
 800acf2:	f7f5 fadb 	bl	80002ac <__adddf3>
 800acf6:	460b      	mov	r3, r1
 800acf8:	4979      	ldr	r1, [pc, #484]	; (800aee0 <_strtod_l+0xbd0>)
 800acfa:	4a7b      	ldr	r2, [pc, #492]	; (800aee8 <_strtod_l+0xbd8>)
 800acfc:	4019      	ands	r1, r3
 800acfe:	4291      	cmp	r1, r2
 800ad00:	4680      	mov	r8, r0
 800ad02:	d944      	bls.n	800ad8e <_strtod_l+0xa7e>
 800ad04:	ee18 2a90 	vmov	r2, s17
 800ad08:	4b78      	ldr	r3, [pc, #480]	; (800aeec <_strtod_l+0xbdc>)
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d104      	bne.n	800ad18 <_strtod_l+0xa08>
 800ad0e:	ee18 3a10 	vmov	r3, s16
 800ad12:	3301      	adds	r3, #1
 800ad14:	f43f ad40 	beq.w	800a798 <_strtod_l+0x488>
 800ad18:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800aeec <_strtod_l+0xbdc>
 800ad1c:	f04f 38ff 	mov.w	r8, #4294967295
 800ad20:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ad22:	4620      	mov	r0, r4
 800ad24:	f002 f990 	bl	800d048 <_Bfree>
 800ad28:	9905      	ldr	r1, [sp, #20]
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f002 f98c 	bl	800d048 <_Bfree>
 800ad30:	4659      	mov	r1, fp
 800ad32:	4620      	mov	r0, r4
 800ad34:	f002 f988 	bl	800d048 <_Bfree>
 800ad38:	4629      	mov	r1, r5
 800ad3a:	4620      	mov	r0, r4
 800ad3c:	f002 f984 	bl	800d048 <_Bfree>
 800ad40:	e609      	b.n	800a956 <_strtod_l+0x646>
 800ad42:	f1b8 0f01 	cmp.w	r8, #1
 800ad46:	d103      	bne.n	800ad50 <_strtod_l+0xa40>
 800ad48:	f1b9 0f00 	cmp.w	r9, #0
 800ad4c:	f43f ad95 	beq.w	800a87a <_strtod_l+0x56a>
 800ad50:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800aea8 <_strtod_l+0xb98>
 800ad54:	4f60      	ldr	r7, [pc, #384]	; (800aed8 <_strtod_l+0xbc8>)
 800ad56:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad5a:	2600      	movs	r6, #0
 800ad5c:	e7ae      	b.n	800acbc <_strtod_l+0x9ac>
 800ad5e:	4f5f      	ldr	r7, [pc, #380]	; (800aedc <_strtod_l+0xbcc>)
 800ad60:	2600      	movs	r6, #0
 800ad62:	e7a7      	b.n	800acb4 <_strtod_l+0x9a4>
 800ad64:	4b5d      	ldr	r3, [pc, #372]	; (800aedc <_strtod_l+0xbcc>)
 800ad66:	4630      	mov	r0, r6
 800ad68:	4639      	mov	r1, r7
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f7f5 fc54 	bl	8000618 <__aeabi_dmul>
 800ad70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad72:	4606      	mov	r6, r0
 800ad74:	460f      	mov	r7, r1
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d09c      	beq.n	800acb4 <_strtod_l+0x9a4>
 800ad7a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ad7e:	e79d      	b.n	800acbc <_strtod_l+0x9ac>
 800ad80:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800aeb0 <_strtod_l+0xba0>
 800ad84:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad88:	ec57 6b17 	vmov	r6, r7, d7
 800ad8c:	e796      	b.n	800acbc <_strtod_l+0x9ac>
 800ad8e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ad92:	9b04      	ldr	r3, [sp, #16]
 800ad94:	46ca      	mov	sl, r9
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1c2      	bne.n	800ad20 <_strtod_l+0xa10>
 800ad9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ada0:	0d1b      	lsrs	r3, r3, #20
 800ada2:	051b      	lsls	r3, r3, #20
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d1bb      	bne.n	800ad20 <_strtod_l+0xa10>
 800ada8:	4630      	mov	r0, r6
 800adaa:	4639      	mov	r1, r7
 800adac:	f7f5 ff2c 	bl	8000c08 <__aeabi_d2lz>
 800adb0:	f7f5 fc04 	bl	80005bc <__aeabi_l2d>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	4630      	mov	r0, r6
 800adba:	4639      	mov	r1, r7
 800adbc:	f7f5 fa74 	bl	80002a8 <__aeabi_dsub>
 800adc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800adc2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800adc6:	ea43 0308 	orr.w	r3, r3, r8
 800adca:	4313      	orrs	r3, r2
 800adcc:	4606      	mov	r6, r0
 800adce:	460f      	mov	r7, r1
 800add0:	d054      	beq.n	800ae7c <_strtod_l+0xb6c>
 800add2:	a339      	add	r3, pc, #228	; (adr r3, 800aeb8 <_strtod_l+0xba8>)
 800add4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add8:	f7f5 fe90 	bl	8000afc <__aeabi_dcmplt>
 800addc:	2800      	cmp	r0, #0
 800adde:	f47f ace5 	bne.w	800a7ac <_strtod_l+0x49c>
 800ade2:	a337      	add	r3, pc, #220	; (adr r3, 800aec0 <_strtod_l+0xbb0>)
 800ade4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade8:	4630      	mov	r0, r6
 800adea:	4639      	mov	r1, r7
 800adec:	f7f5 fea4 	bl	8000b38 <__aeabi_dcmpgt>
 800adf0:	2800      	cmp	r0, #0
 800adf2:	d095      	beq.n	800ad20 <_strtod_l+0xa10>
 800adf4:	e4da      	b.n	800a7ac <_strtod_l+0x49c>
 800adf6:	9b04      	ldr	r3, [sp, #16]
 800adf8:	b333      	cbz	r3, 800ae48 <_strtod_l+0xb38>
 800adfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adfc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ae00:	d822      	bhi.n	800ae48 <_strtod_l+0xb38>
 800ae02:	a331      	add	r3, pc, #196	; (adr r3, 800aec8 <_strtod_l+0xbb8>)
 800ae04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae08:	4630      	mov	r0, r6
 800ae0a:	4639      	mov	r1, r7
 800ae0c:	f7f5 fe80 	bl	8000b10 <__aeabi_dcmple>
 800ae10:	b1a0      	cbz	r0, 800ae3c <_strtod_l+0xb2c>
 800ae12:	4639      	mov	r1, r7
 800ae14:	4630      	mov	r0, r6
 800ae16:	f7f5 fed7 	bl	8000bc8 <__aeabi_d2uiz>
 800ae1a:	2801      	cmp	r0, #1
 800ae1c:	bf38      	it	cc
 800ae1e:	2001      	movcc	r0, #1
 800ae20:	f7f5 fb80 	bl	8000524 <__aeabi_ui2d>
 800ae24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae26:	4606      	mov	r6, r0
 800ae28:	460f      	mov	r7, r1
 800ae2a:	bb23      	cbnz	r3, 800ae76 <_strtod_l+0xb66>
 800ae2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae30:	9010      	str	r0, [sp, #64]	; 0x40
 800ae32:	9311      	str	r3, [sp, #68]	; 0x44
 800ae34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ae38:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ae3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae40:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ae44:	1a9b      	subs	r3, r3, r2
 800ae46:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae48:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ae4c:	eeb0 0a48 	vmov.f32	s0, s16
 800ae50:	eef0 0a68 	vmov.f32	s1, s17
 800ae54:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ae58:	f002 fc22 	bl	800d6a0 <__ulp>
 800ae5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ae60:	ec53 2b10 	vmov	r2, r3, d0
 800ae64:	f7f5 fbd8 	bl	8000618 <__aeabi_dmul>
 800ae68:	ec53 2b18 	vmov	r2, r3, d8
 800ae6c:	f7f5 fa1e 	bl	80002ac <__adddf3>
 800ae70:	4680      	mov	r8, r0
 800ae72:	4689      	mov	r9, r1
 800ae74:	e78d      	b.n	800ad92 <_strtod_l+0xa82>
 800ae76:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ae7a:	e7db      	b.n	800ae34 <_strtod_l+0xb24>
 800ae7c:	a314      	add	r3, pc, #80	; (adr r3, 800aed0 <_strtod_l+0xbc0>)
 800ae7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae82:	f7f5 fe3b 	bl	8000afc <__aeabi_dcmplt>
 800ae86:	e7b3      	b.n	800adf0 <_strtod_l+0xae0>
 800ae88:	2300      	movs	r3, #0
 800ae8a:	930a      	str	r3, [sp, #40]	; 0x28
 800ae8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ae8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae90:	6013      	str	r3, [r2, #0]
 800ae92:	f7ff ba7c 	b.w	800a38e <_strtod_l+0x7e>
 800ae96:	2a65      	cmp	r2, #101	; 0x65
 800ae98:	f43f ab75 	beq.w	800a586 <_strtod_l+0x276>
 800ae9c:	2a45      	cmp	r2, #69	; 0x45
 800ae9e:	f43f ab72 	beq.w	800a586 <_strtod_l+0x276>
 800aea2:	2301      	movs	r3, #1
 800aea4:	f7ff bbaa 	b.w	800a5fc <_strtod_l+0x2ec>
 800aea8:	00000000 	.word	0x00000000
 800aeac:	bff00000 	.word	0xbff00000
 800aeb0:	00000000 	.word	0x00000000
 800aeb4:	3ff00000 	.word	0x3ff00000
 800aeb8:	94a03595 	.word	0x94a03595
 800aebc:	3fdfffff 	.word	0x3fdfffff
 800aec0:	35afe535 	.word	0x35afe535
 800aec4:	3fe00000 	.word	0x3fe00000
 800aec8:	ffc00000 	.word	0xffc00000
 800aecc:	41dfffff 	.word	0x41dfffff
 800aed0:	94a03595 	.word	0x94a03595
 800aed4:	3fcfffff 	.word	0x3fcfffff
 800aed8:	3ff00000 	.word	0x3ff00000
 800aedc:	3fe00000 	.word	0x3fe00000
 800aee0:	7ff00000 	.word	0x7ff00000
 800aee4:	7fe00000 	.word	0x7fe00000
 800aee8:	7c9fffff 	.word	0x7c9fffff
 800aeec:	7fefffff 	.word	0x7fefffff

0800aef0 <strtod>:
 800aef0:	460a      	mov	r2, r1
 800aef2:	4601      	mov	r1, r0
 800aef4:	4802      	ldr	r0, [pc, #8]	; (800af00 <strtod+0x10>)
 800aef6:	4b03      	ldr	r3, [pc, #12]	; (800af04 <strtod+0x14>)
 800aef8:	6800      	ldr	r0, [r0, #0]
 800aefa:	f7ff ba09 	b.w	800a310 <_strtod_l>
 800aefe:	bf00      	nop
 800af00:	2000023c 	.word	0x2000023c
 800af04:	20000084 	.word	0x20000084

0800af08 <__cvt>:
 800af08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af0c:	ec55 4b10 	vmov	r4, r5, d0
 800af10:	2d00      	cmp	r5, #0
 800af12:	460e      	mov	r6, r1
 800af14:	4619      	mov	r1, r3
 800af16:	462b      	mov	r3, r5
 800af18:	bfbb      	ittet	lt
 800af1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800af1e:	461d      	movlt	r5, r3
 800af20:	2300      	movge	r3, #0
 800af22:	232d      	movlt	r3, #45	; 0x2d
 800af24:	700b      	strb	r3, [r1, #0]
 800af26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af28:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800af2c:	4691      	mov	r9, r2
 800af2e:	f023 0820 	bic.w	r8, r3, #32
 800af32:	bfbc      	itt	lt
 800af34:	4622      	movlt	r2, r4
 800af36:	4614      	movlt	r4, r2
 800af38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af3c:	d005      	beq.n	800af4a <__cvt+0x42>
 800af3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800af42:	d100      	bne.n	800af46 <__cvt+0x3e>
 800af44:	3601      	adds	r6, #1
 800af46:	2102      	movs	r1, #2
 800af48:	e000      	b.n	800af4c <__cvt+0x44>
 800af4a:	2103      	movs	r1, #3
 800af4c:	ab03      	add	r3, sp, #12
 800af4e:	9301      	str	r3, [sp, #4]
 800af50:	ab02      	add	r3, sp, #8
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	ec45 4b10 	vmov	d0, r4, r5
 800af58:	4653      	mov	r3, sl
 800af5a:	4632      	mov	r2, r6
 800af5c:	f000 fe8c 	bl	800bc78 <_dtoa_r>
 800af60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800af64:	4607      	mov	r7, r0
 800af66:	d102      	bne.n	800af6e <__cvt+0x66>
 800af68:	f019 0f01 	tst.w	r9, #1
 800af6c:	d022      	beq.n	800afb4 <__cvt+0xac>
 800af6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af72:	eb07 0906 	add.w	r9, r7, r6
 800af76:	d110      	bne.n	800af9a <__cvt+0x92>
 800af78:	783b      	ldrb	r3, [r7, #0]
 800af7a:	2b30      	cmp	r3, #48	; 0x30
 800af7c:	d10a      	bne.n	800af94 <__cvt+0x8c>
 800af7e:	2200      	movs	r2, #0
 800af80:	2300      	movs	r3, #0
 800af82:	4620      	mov	r0, r4
 800af84:	4629      	mov	r1, r5
 800af86:	f7f5 fdaf 	bl	8000ae8 <__aeabi_dcmpeq>
 800af8a:	b918      	cbnz	r0, 800af94 <__cvt+0x8c>
 800af8c:	f1c6 0601 	rsb	r6, r6, #1
 800af90:	f8ca 6000 	str.w	r6, [sl]
 800af94:	f8da 3000 	ldr.w	r3, [sl]
 800af98:	4499      	add	r9, r3
 800af9a:	2200      	movs	r2, #0
 800af9c:	2300      	movs	r3, #0
 800af9e:	4620      	mov	r0, r4
 800afa0:	4629      	mov	r1, r5
 800afa2:	f7f5 fda1 	bl	8000ae8 <__aeabi_dcmpeq>
 800afa6:	b108      	cbz	r0, 800afac <__cvt+0xa4>
 800afa8:	f8cd 900c 	str.w	r9, [sp, #12]
 800afac:	2230      	movs	r2, #48	; 0x30
 800afae:	9b03      	ldr	r3, [sp, #12]
 800afb0:	454b      	cmp	r3, r9
 800afb2:	d307      	bcc.n	800afc4 <__cvt+0xbc>
 800afb4:	9b03      	ldr	r3, [sp, #12]
 800afb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afb8:	1bdb      	subs	r3, r3, r7
 800afba:	4638      	mov	r0, r7
 800afbc:	6013      	str	r3, [r2, #0]
 800afbe:	b004      	add	sp, #16
 800afc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc4:	1c59      	adds	r1, r3, #1
 800afc6:	9103      	str	r1, [sp, #12]
 800afc8:	701a      	strb	r2, [r3, #0]
 800afca:	e7f0      	b.n	800afae <__cvt+0xa6>

0800afcc <__exponent>:
 800afcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afce:	4603      	mov	r3, r0
 800afd0:	2900      	cmp	r1, #0
 800afd2:	bfb8      	it	lt
 800afd4:	4249      	neglt	r1, r1
 800afd6:	f803 2b02 	strb.w	r2, [r3], #2
 800afda:	bfb4      	ite	lt
 800afdc:	222d      	movlt	r2, #45	; 0x2d
 800afde:	222b      	movge	r2, #43	; 0x2b
 800afe0:	2909      	cmp	r1, #9
 800afe2:	7042      	strb	r2, [r0, #1]
 800afe4:	dd2a      	ble.n	800b03c <__exponent+0x70>
 800afe6:	f10d 0207 	add.w	r2, sp, #7
 800afea:	4617      	mov	r7, r2
 800afec:	260a      	movs	r6, #10
 800afee:	4694      	mov	ip, r2
 800aff0:	fb91 f5f6 	sdiv	r5, r1, r6
 800aff4:	fb06 1415 	mls	r4, r6, r5, r1
 800aff8:	3430      	adds	r4, #48	; 0x30
 800affa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800affe:	460c      	mov	r4, r1
 800b000:	2c63      	cmp	r4, #99	; 0x63
 800b002:	f102 32ff 	add.w	r2, r2, #4294967295
 800b006:	4629      	mov	r1, r5
 800b008:	dcf1      	bgt.n	800afee <__exponent+0x22>
 800b00a:	3130      	adds	r1, #48	; 0x30
 800b00c:	f1ac 0402 	sub.w	r4, ip, #2
 800b010:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b014:	1c41      	adds	r1, r0, #1
 800b016:	4622      	mov	r2, r4
 800b018:	42ba      	cmp	r2, r7
 800b01a:	d30a      	bcc.n	800b032 <__exponent+0x66>
 800b01c:	f10d 0209 	add.w	r2, sp, #9
 800b020:	eba2 020c 	sub.w	r2, r2, ip
 800b024:	42bc      	cmp	r4, r7
 800b026:	bf88      	it	hi
 800b028:	2200      	movhi	r2, #0
 800b02a:	4413      	add	r3, r2
 800b02c:	1a18      	subs	r0, r3, r0
 800b02e:	b003      	add	sp, #12
 800b030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b032:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b036:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b03a:	e7ed      	b.n	800b018 <__exponent+0x4c>
 800b03c:	2330      	movs	r3, #48	; 0x30
 800b03e:	3130      	adds	r1, #48	; 0x30
 800b040:	7083      	strb	r3, [r0, #2]
 800b042:	70c1      	strb	r1, [r0, #3]
 800b044:	1d03      	adds	r3, r0, #4
 800b046:	e7f1      	b.n	800b02c <__exponent+0x60>

0800b048 <_printf_float>:
 800b048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04c:	ed2d 8b02 	vpush	{d8}
 800b050:	b08d      	sub	sp, #52	; 0x34
 800b052:	460c      	mov	r4, r1
 800b054:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b058:	4616      	mov	r6, r2
 800b05a:	461f      	mov	r7, r3
 800b05c:	4605      	mov	r5, r0
 800b05e:	f000 fce7 	bl	800ba30 <_localeconv_r>
 800b062:	f8d0 a000 	ldr.w	sl, [r0]
 800b066:	4650      	mov	r0, sl
 800b068:	f7f5 f912 	bl	8000290 <strlen>
 800b06c:	2300      	movs	r3, #0
 800b06e:	930a      	str	r3, [sp, #40]	; 0x28
 800b070:	6823      	ldr	r3, [r4, #0]
 800b072:	9305      	str	r3, [sp, #20]
 800b074:	f8d8 3000 	ldr.w	r3, [r8]
 800b078:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b07c:	3307      	adds	r3, #7
 800b07e:	f023 0307 	bic.w	r3, r3, #7
 800b082:	f103 0208 	add.w	r2, r3, #8
 800b086:	f8c8 2000 	str.w	r2, [r8]
 800b08a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b08e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b092:	9307      	str	r3, [sp, #28]
 800b094:	f8cd 8018 	str.w	r8, [sp, #24]
 800b098:	ee08 0a10 	vmov	s16, r0
 800b09c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b0a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0a4:	4b9e      	ldr	r3, [pc, #632]	; (800b320 <_printf_float+0x2d8>)
 800b0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0aa:	f7f5 fd4f 	bl	8000b4c <__aeabi_dcmpun>
 800b0ae:	bb88      	cbnz	r0, 800b114 <_printf_float+0xcc>
 800b0b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0b4:	4b9a      	ldr	r3, [pc, #616]	; (800b320 <_printf_float+0x2d8>)
 800b0b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ba:	f7f5 fd29 	bl	8000b10 <__aeabi_dcmple>
 800b0be:	bb48      	cbnz	r0, 800b114 <_printf_float+0xcc>
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	4640      	mov	r0, r8
 800b0c6:	4649      	mov	r1, r9
 800b0c8:	f7f5 fd18 	bl	8000afc <__aeabi_dcmplt>
 800b0cc:	b110      	cbz	r0, 800b0d4 <_printf_float+0x8c>
 800b0ce:	232d      	movs	r3, #45	; 0x2d
 800b0d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0d4:	4a93      	ldr	r2, [pc, #588]	; (800b324 <_printf_float+0x2dc>)
 800b0d6:	4b94      	ldr	r3, [pc, #592]	; (800b328 <_printf_float+0x2e0>)
 800b0d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b0dc:	bf94      	ite	ls
 800b0de:	4690      	movls	r8, r2
 800b0e0:	4698      	movhi	r8, r3
 800b0e2:	2303      	movs	r3, #3
 800b0e4:	6123      	str	r3, [r4, #16]
 800b0e6:	9b05      	ldr	r3, [sp, #20]
 800b0e8:	f023 0304 	bic.w	r3, r3, #4
 800b0ec:	6023      	str	r3, [r4, #0]
 800b0ee:	f04f 0900 	mov.w	r9, #0
 800b0f2:	9700      	str	r7, [sp, #0]
 800b0f4:	4633      	mov	r3, r6
 800b0f6:	aa0b      	add	r2, sp, #44	; 0x2c
 800b0f8:	4621      	mov	r1, r4
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	f000 f9da 	bl	800b4b4 <_printf_common>
 800b100:	3001      	adds	r0, #1
 800b102:	f040 8090 	bne.w	800b226 <_printf_float+0x1de>
 800b106:	f04f 30ff 	mov.w	r0, #4294967295
 800b10a:	b00d      	add	sp, #52	; 0x34
 800b10c:	ecbd 8b02 	vpop	{d8}
 800b110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b114:	4642      	mov	r2, r8
 800b116:	464b      	mov	r3, r9
 800b118:	4640      	mov	r0, r8
 800b11a:	4649      	mov	r1, r9
 800b11c:	f7f5 fd16 	bl	8000b4c <__aeabi_dcmpun>
 800b120:	b140      	cbz	r0, 800b134 <_printf_float+0xec>
 800b122:	464b      	mov	r3, r9
 800b124:	2b00      	cmp	r3, #0
 800b126:	bfbc      	itt	lt
 800b128:	232d      	movlt	r3, #45	; 0x2d
 800b12a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b12e:	4a7f      	ldr	r2, [pc, #508]	; (800b32c <_printf_float+0x2e4>)
 800b130:	4b7f      	ldr	r3, [pc, #508]	; (800b330 <_printf_float+0x2e8>)
 800b132:	e7d1      	b.n	800b0d8 <_printf_float+0x90>
 800b134:	6863      	ldr	r3, [r4, #4]
 800b136:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b13a:	9206      	str	r2, [sp, #24]
 800b13c:	1c5a      	adds	r2, r3, #1
 800b13e:	d13f      	bne.n	800b1c0 <_printf_float+0x178>
 800b140:	2306      	movs	r3, #6
 800b142:	6063      	str	r3, [r4, #4]
 800b144:	9b05      	ldr	r3, [sp, #20]
 800b146:	6861      	ldr	r1, [r4, #4]
 800b148:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b14c:	2300      	movs	r3, #0
 800b14e:	9303      	str	r3, [sp, #12]
 800b150:	ab0a      	add	r3, sp, #40	; 0x28
 800b152:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b156:	ab09      	add	r3, sp, #36	; 0x24
 800b158:	ec49 8b10 	vmov	d0, r8, r9
 800b15c:	9300      	str	r3, [sp, #0]
 800b15e:	6022      	str	r2, [r4, #0]
 800b160:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b164:	4628      	mov	r0, r5
 800b166:	f7ff fecf 	bl	800af08 <__cvt>
 800b16a:	9b06      	ldr	r3, [sp, #24]
 800b16c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b16e:	2b47      	cmp	r3, #71	; 0x47
 800b170:	4680      	mov	r8, r0
 800b172:	d108      	bne.n	800b186 <_printf_float+0x13e>
 800b174:	1cc8      	adds	r0, r1, #3
 800b176:	db02      	blt.n	800b17e <_printf_float+0x136>
 800b178:	6863      	ldr	r3, [r4, #4]
 800b17a:	4299      	cmp	r1, r3
 800b17c:	dd41      	ble.n	800b202 <_printf_float+0x1ba>
 800b17e:	f1ab 0302 	sub.w	r3, fp, #2
 800b182:	fa5f fb83 	uxtb.w	fp, r3
 800b186:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b18a:	d820      	bhi.n	800b1ce <_printf_float+0x186>
 800b18c:	3901      	subs	r1, #1
 800b18e:	465a      	mov	r2, fp
 800b190:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b194:	9109      	str	r1, [sp, #36]	; 0x24
 800b196:	f7ff ff19 	bl	800afcc <__exponent>
 800b19a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b19c:	1813      	adds	r3, r2, r0
 800b19e:	2a01      	cmp	r2, #1
 800b1a0:	4681      	mov	r9, r0
 800b1a2:	6123      	str	r3, [r4, #16]
 800b1a4:	dc02      	bgt.n	800b1ac <_printf_float+0x164>
 800b1a6:	6822      	ldr	r2, [r4, #0]
 800b1a8:	07d2      	lsls	r2, r2, #31
 800b1aa:	d501      	bpl.n	800b1b0 <_printf_float+0x168>
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	6123      	str	r3, [r4, #16]
 800b1b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d09c      	beq.n	800b0f2 <_printf_float+0xaa>
 800b1b8:	232d      	movs	r3, #45	; 0x2d
 800b1ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1be:	e798      	b.n	800b0f2 <_printf_float+0xaa>
 800b1c0:	9a06      	ldr	r2, [sp, #24]
 800b1c2:	2a47      	cmp	r2, #71	; 0x47
 800b1c4:	d1be      	bne.n	800b144 <_printf_float+0xfc>
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d1bc      	bne.n	800b144 <_printf_float+0xfc>
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	e7b9      	b.n	800b142 <_printf_float+0xfa>
 800b1ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b1d2:	d118      	bne.n	800b206 <_printf_float+0x1be>
 800b1d4:	2900      	cmp	r1, #0
 800b1d6:	6863      	ldr	r3, [r4, #4]
 800b1d8:	dd0b      	ble.n	800b1f2 <_printf_float+0x1aa>
 800b1da:	6121      	str	r1, [r4, #16]
 800b1dc:	b913      	cbnz	r3, 800b1e4 <_printf_float+0x19c>
 800b1de:	6822      	ldr	r2, [r4, #0]
 800b1e0:	07d0      	lsls	r0, r2, #31
 800b1e2:	d502      	bpl.n	800b1ea <_printf_float+0x1a2>
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	440b      	add	r3, r1
 800b1e8:	6123      	str	r3, [r4, #16]
 800b1ea:	65a1      	str	r1, [r4, #88]	; 0x58
 800b1ec:	f04f 0900 	mov.w	r9, #0
 800b1f0:	e7de      	b.n	800b1b0 <_printf_float+0x168>
 800b1f2:	b913      	cbnz	r3, 800b1fa <_printf_float+0x1b2>
 800b1f4:	6822      	ldr	r2, [r4, #0]
 800b1f6:	07d2      	lsls	r2, r2, #31
 800b1f8:	d501      	bpl.n	800b1fe <_printf_float+0x1b6>
 800b1fa:	3302      	adds	r3, #2
 800b1fc:	e7f4      	b.n	800b1e8 <_printf_float+0x1a0>
 800b1fe:	2301      	movs	r3, #1
 800b200:	e7f2      	b.n	800b1e8 <_printf_float+0x1a0>
 800b202:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b208:	4299      	cmp	r1, r3
 800b20a:	db05      	blt.n	800b218 <_printf_float+0x1d0>
 800b20c:	6823      	ldr	r3, [r4, #0]
 800b20e:	6121      	str	r1, [r4, #16]
 800b210:	07d8      	lsls	r0, r3, #31
 800b212:	d5ea      	bpl.n	800b1ea <_printf_float+0x1a2>
 800b214:	1c4b      	adds	r3, r1, #1
 800b216:	e7e7      	b.n	800b1e8 <_printf_float+0x1a0>
 800b218:	2900      	cmp	r1, #0
 800b21a:	bfd4      	ite	le
 800b21c:	f1c1 0202 	rsble	r2, r1, #2
 800b220:	2201      	movgt	r2, #1
 800b222:	4413      	add	r3, r2
 800b224:	e7e0      	b.n	800b1e8 <_printf_float+0x1a0>
 800b226:	6823      	ldr	r3, [r4, #0]
 800b228:	055a      	lsls	r2, r3, #21
 800b22a:	d407      	bmi.n	800b23c <_printf_float+0x1f4>
 800b22c:	6923      	ldr	r3, [r4, #16]
 800b22e:	4642      	mov	r2, r8
 800b230:	4631      	mov	r1, r6
 800b232:	4628      	mov	r0, r5
 800b234:	47b8      	blx	r7
 800b236:	3001      	adds	r0, #1
 800b238:	d12c      	bne.n	800b294 <_printf_float+0x24c>
 800b23a:	e764      	b.n	800b106 <_printf_float+0xbe>
 800b23c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b240:	f240 80e0 	bls.w	800b404 <_printf_float+0x3bc>
 800b244:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b248:	2200      	movs	r2, #0
 800b24a:	2300      	movs	r3, #0
 800b24c:	f7f5 fc4c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b250:	2800      	cmp	r0, #0
 800b252:	d034      	beq.n	800b2be <_printf_float+0x276>
 800b254:	4a37      	ldr	r2, [pc, #220]	; (800b334 <_printf_float+0x2ec>)
 800b256:	2301      	movs	r3, #1
 800b258:	4631      	mov	r1, r6
 800b25a:	4628      	mov	r0, r5
 800b25c:	47b8      	blx	r7
 800b25e:	3001      	adds	r0, #1
 800b260:	f43f af51 	beq.w	800b106 <_printf_float+0xbe>
 800b264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b268:	429a      	cmp	r2, r3
 800b26a:	db02      	blt.n	800b272 <_printf_float+0x22a>
 800b26c:	6823      	ldr	r3, [r4, #0]
 800b26e:	07d8      	lsls	r0, r3, #31
 800b270:	d510      	bpl.n	800b294 <_printf_float+0x24c>
 800b272:	ee18 3a10 	vmov	r3, s16
 800b276:	4652      	mov	r2, sl
 800b278:	4631      	mov	r1, r6
 800b27a:	4628      	mov	r0, r5
 800b27c:	47b8      	blx	r7
 800b27e:	3001      	adds	r0, #1
 800b280:	f43f af41 	beq.w	800b106 <_printf_float+0xbe>
 800b284:	f04f 0800 	mov.w	r8, #0
 800b288:	f104 091a 	add.w	r9, r4, #26
 800b28c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b28e:	3b01      	subs	r3, #1
 800b290:	4543      	cmp	r3, r8
 800b292:	dc09      	bgt.n	800b2a8 <_printf_float+0x260>
 800b294:	6823      	ldr	r3, [r4, #0]
 800b296:	079b      	lsls	r3, r3, #30
 800b298:	f100 8107 	bmi.w	800b4aa <_printf_float+0x462>
 800b29c:	68e0      	ldr	r0, [r4, #12]
 800b29e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2a0:	4298      	cmp	r0, r3
 800b2a2:	bfb8      	it	lt
 800b2a4:	4618      	movlt	r0, r3
 800b2a6:	e730      	b.n	800b10a <_printf_float+0xc2>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	464a      	mov	r2, r9
 800b2ac:	4631      	mov	r1, r6
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	47b8      	blx	r7
 800b2b2:	3001      	adds	r0, #1
 800b2b4:	f43f af27 	beq.w	800b106 <_printf_float+0xbe>
 800b2b8:	f108 0801 	add.w	r8, r8, #1
 800b2bc:	e7e6      	b.n	800b28c <_printf_float+0x244>
 800b2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	dc39      	bgt.n	800b338 <_printf_float+0x2f0>
 800b2c4:	4a1b      	ldr	r2, [pc, #108]	; (800b334 <_printf_float+0x2ec>)
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	4631      	mov	r1, r6
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	47b8      	blx	r7
 800b2ce:	3001      	adds	r0, #1
 800b2d0:	f43f af19 	beq.w	800b106 <_printf_float+0xbe>
 800b2d4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b2d8:	4313      	orrs	r3, r2
 800b2da:	d102      	bne.n	800b2e2 <_printf_float+0x29a>
 800b2dc:	6823      	ldr	r3, [r4, #0]
 800b2de:	07d9      	lsls	r1, r3, #31
 800b2e0:	d5d8      	bpl.n	800b294 <_printf_float+0x24c>
 800b2e2:	ee18 3a10 	vmov	r3, s16
 800b2e6:	4652      	mov	r2, sl
 800b2e8:	4631      	mov	r1, r6
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	47b8      	blx	r7
 800b2ee:	3001      	adds	r0, #1
 800b2f0:	f43f af09 	beq.w	800b106 <_printf_float+0xbe>
 800b2f4:	f04f 0900 	mov.w	r9, #0
 800b2f8:	f104 0a1a 	add.w	sl, r4, #26
 800b2fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2fe:	425b      	negs	r3, r3
 800b300:	454b      	cmp	r3, r9
 800b302:	dc01      	bgt.n	800b308 <_printf_float+0x2c0>
 800b304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b306:	e792      	b.n	800b22e <_printf_float+0x1e6>
 800b308:	2301      	movs	r3, #1
 800b30a:	4652      	mov	r2, sl
 800b30c:	4631      	mov	r1, r6
 800b30e:	4628      	mov	r0, r5
 800b310:	47b8      	blx	r7
 800b312:	3001      	adds	r0, #1
 800b314:	f43f aef7 	beq.w	800b106 <_printf_float+0xbe>
 800b318:	f109 0901 	add.w	r9, r9, #1
 800b31c:	e7ee      	b.n	800b2fc <_printf_float+0x2b4>
 800b31e:	bf00      	nop
 800b320:	7fefffff 	.word	0x7fefffff
 800b324:	0800e629 	.word	0x0800e629
 800b328:	0800e62d 	.word	0x0800e62d
 800b32c:	0800e631 	.word	0x0800e631
 800b330:	0800e635 	.word	0x0800e635
 800b334:	0800e639 	.word	0x0800e639
 800b338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b33a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b33c:	429a      	cmp	r2, r3
 800b33e:	bfa8      	it	ge
 800b340:	461a      	movge	r2, r3
 800b342:	2a00      	cmp	r2, #0
 800b344:	4691      	mov	r9, r2
 800b346:	dc37      	bgt.n	800b3b8 <_printf_float+0x370>
 800b348:	f04f 0b00 	mov.w	fp, #0
 800b34c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b350:	f104 021a 	add.w	r2, r4, #26
 800b354:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b356:	9305      	str	r3, [sp, #20]
 800b358:	eba3 0309 	sub.w	r3, r3, r9
 800b35c:	455b      	cmp	r3, fp
 800b35e:	dc33      	bgt.n	800b3c8 <_printf_float+0x380>
 800b360:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b364:	429a      	cmp	r2, r3
 800b366:	db3b      	blt.n	800b3e0 <_printf_float+0x398>
 800b368:	6823      	ldr	r3, [r4, #0]
 800b36a:	07da      	lsls	r2, r3, #31
 800b36c:	d438      	bmi.n	800b3e0 <_printf_float+0x398>
 800b36e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b372:	eba2 0903 	sub.w	r9, r2, r3
 800b376:	9b05      	ldr	r3, [sp, #20]
 800b378:	1ad2      	subs	r2, r2, r3
 800b37a:	4591      	cmp	r9, r2
 800b37c:	bfa8      	it	ge
 800b37e:	4691      	movge	r9, r2
 800b380:	f1b9 0f00 	cmp.w	r9, #0
 800b384:	dc35      	bgt.n	800b3f2 <_printf_float+0x3aa>
 800b386:	f04f 0800 	mov.w	r8, #0
 800b38a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b38e:	f104 0a1a 	add.w	sl, r4, #26
 800b392:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b396:	1a9b      	subs	r3, r3, r2
 800b398:	eba3 0309 	sub.w	r3, r3, r9
 800b39c:	4543      	cmp	r3, r8
 800b39e:	f77f af79 	ble.w	800b294 <_printf_float+0x24c>
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	4652      	mov	r2, sl
 800b3a6:	4631      	mov	r1, r6
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	47b8      	blx	r7
 800b3ac:	3001      	adds	r0, #1
 800b3ae:	f43f aeaa 	beq.w	800b106 <_printf_float+0xbe>
 800b3b2:	f108 0801 	add.w	r8, r8, #1
 800b3b6:	e7ec      	b.n	800b392 <_printf_float+0x34a>
 800b3b8:	4613      	mov	r3, r2
 800b3ba:	4631      	mov	r1, r6
 800b3bc:	4642      	mov	r2, r8
 800b3be:	4628      	mov	r0, r5
 800b3c0:	47b8      	blx	r7
 800b3c2:	3001      	adds	r0, #1
 800b3c4:	d1c0      	bne.n	800b348 <_printf_float+0x300>
 800b3c6:	e69e      	b.n	800b106 <_printf_float+0xbe>
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	4631      	mov	r1, r6
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	9205      	str	r2, [sp, #20]
 800b3d0:	47b8      	blx	r7
 800b3d2:	3001      	adds	r0, #1
 800b3d4:	f43f ae97 	beq.w	800b106 <_printf_float+0xbe>
 800b3d8:	9a05      	ldr	r2, [sp, #20]
 800b3da:	f10b 0b01 	add.w	fp, fp, #1
 800b3de:	e7b9      	b.n	800b354 <_printf_float+0x30c>
 800b3e0:	ee18 3a10 	vmov	r3, s16
 800b3e4:	4652      	mov	r2, sl
 800b3e6:	4631      	mov	r1, r6
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	47b8      	blx	r7
 800b3ec:	3001      	adds	r0, #1
 800b3ee:	d1be      	bne.n	800b36e <_printf_float+0x326>
 800b3f0:	e689      	b.n	800b106 <_printf_float+0xbe>
 800b3f2:	9a05      	ldr	r2, [sp, #20]
 800b3f4:	464b      	mov	r3, r9
 800b3f6:	4442      	add	r2, r8
 800b3f8:	4631      	mov	r1, r6
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	47b8      	blx	r7
 800b3fe:	3001      	adds	r0, #1
 800b400:	d1c1      	bne.n	800b386 <_printf_float+0x33e>
 800b402:	e680      	b.n	800b106 <_printf_float+0xbe>
 800b404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b406:	2a01      	cmp	r2, #1
 800b408:	dc01      	bgt.n	800b40e <_printf_float+0x3c6>
 800b40a:	07db      	lsls	r3, r3, #31
 800b40c:	d53a      	bpl.n	800b484 <_printf_float+0x43c>
 800b40e:	2301      	movs	r3, #1
 800b410:	4642      	mov	r2, r8
 800b412:	4631      	mov	r1, r6
 800b414:	4628      	mov	r0, r5
 800b416:	47b8      	blx	r7
 800b418:	3001      	adds	r0, #1
 800b41a:	f43f ae74 	beq.w	800b106 <_printf_float+0xbe>
 800b41e:	ee18 3a10 	vmov	r3, s16
 800b422:	4652      	mov	r2, sl
 800b424:	4631      	mov	r1, r6
 800b426:	4628      	mov	r0, r5
 800b428:	47b8      	blx	r7
 800b42a:	3001      	adds	r0, #1
 800b42c:	f43f ae6b 	beq.w	800b106 <_printf_float+0xbe>
 800b430:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b434:	2200      	movs	r2, #0
 800b436:	2300      	movs	r3, #0
 800b438:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b43c:	f7f5 fb54 	bl	8000ae8 <__aeabi_dcmpeq>
 800b440:	b9d8      	cbnz	r0, 800b47a <_printf_float+0x432>
 800b442:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b446:	f108 0201 	add.w	r2, r8, #1
 800b44a:	4631      	mov	r1, r6
 800b44c:	4628      	mov	r0, r5
 800b44e:	47b8      	blx	r7
 800b450:	3001      	adds	r0, #1
 800b452:	d10e      	bne.n	800b472 <_printf_float+0x42a>
 800b454:	e657      	b.n	800b106 <_printf_float+0xbe>
 800b456:	2301      	movs	r3, #1
 800b458:	4652      	mov	r2, sl
 800b45a:	4631      	mov	r1, r6
 800b45c:	4628      	mov	r0, r5
 800b45e:	47b8      	blx	r7
 800b460:	3001      	adds	r0, #1
 800b462:	f43f ae50 	beq.w	800b106 <_printf_float+0xbe>
 800b466:	f108 0801 	add.w	r8, r8, #1
 800b46a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b46c:	3b01      	subs	r3, #1
 800b46e:	4543      	cmp	r3, r8
 800b470:	dcf1      	bgt.n	800b456 <_printf_float+0x40e>
 800b472:	464b      	mov	r3, r9
 800b474:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b478:	e6da      	b.n	800b230 <_printf_float+0x1e8>
 800b47a:	f04f 0800 	mov.w	r8, #0
 800b47e:	f104 0a1a 	add.w	sl, r4, #26
 800b482:	e7f2      	b.n	800b46a <_printf_float+0x422>
 800b484:	2301      	movs	r3, #1
 800b486:	4642      	mov	r2, r8
 800b488:	e7df      	b.n	800b44a <_printf_float+0x402>
 800b48a:	2301      	movs	r3, #1
 800b48c:	464a      	mov	r2, r9
 800b48e:	4631      	mov	r1, r6
 800b490:	4628      	mov	r0, r5
 800b492:	47b8      	blx	r7
 800b494:	3001      	adds	r0, #1
 800b496:	f43f ae36 	beq.w	800b106 <_printf_float+0xbe>
 800b49a:	f108 0801 	add.w	r8, r8, #1
 800b49e:	68e3      	ldr	r3, [r4, #12]
 800b4a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b4a2:	1a5b      	subs	r3, r3, r1
 800b4a4:	4543      	cmp	r3, r8
 800b4a6:	dcf0      	bgt.n	800b48a <_printf_float+0x442>
 800b4a8:	e6f8      	b.n	800b29c <_printf_float+0x254>
 800b4aa:	f04f 0800 	mov.w	r8, #0
 800b4ae:	f104 0919 	add.w	r9, r4, #25
 800b4b2:	e7f4      	b.n	800b49e <_printf_float+0x456>

0800b4b4 <_printf_common>:
 800b4b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b8:	4616      	mov	r6, r2
 800b4ba:	4699      	mov	r9, r3
 800b4bc:	688a      	ldr	r2, [r1, #8]
 800b4be:	690b      	ldr	r3, [r1, #16]
 800b4c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	bfb8      	it	lt
 800b4c8:	4613      	movlt	r3, r2
 800b4ca:	6033      	str	r3, [r6, #0]
 800b4cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4d0:	4607      	mov	r7, r0
 800b4d2:	460c      	mov	r4, r1
 800b4d4:	b10a      	cbz	r2, 800b4da <_printf_common+0x26>
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	6033      	str	r3, [r6, #0]
 800b4da:	6823      	ldr	r3, [r4, #0]
 800b4dc:	0699      	lsls	r1, r3, #26
 800b4de:	bf42      	ittt	mi
 800b4e0:	6833      	ldrmi	r3, [r6, #0]
 800b4e2:	3302      	addmi	r3, #2
 800b4e4:	6033      	strmi	r3, [r6, #0]
 800b4e6:	6825      	ldr	r5, [r4, #0]
 800b4e8:	f015 0506 	ands.w	r5, r5, #6
 800b4ec:	d106      	bne.n	800b4fc <_printf_common+0x48>
 800b4ee:	f104 0a19 	add.w	sl, r4, #25
 800b4f2:	68e3      	ldr	r3, [r4, #12]
 800b4f4:	6832      	ldr	r2, [r6, #0]
 800b4f6:	1a9b      	subs	r3, r3, r2
 800b4f8:	42ab      	cmp	r3, r5
 800b4fa:	dc26      	bgt.n	800b54a <_printf_common+0x96>
 800b4fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b500:	1e13      	subs	r3, r2, #0
 800b502:	6822      	ldr	r2, [r4, #0]
 800b504:	bf18      	it	ne
 800b506:	2301      	movne	r3, #1
 800b508:	0692      	lsls	r2, r2, #26
 800b50a:	d42b      	bmi.n	800b564 <_printf_common+0xb0>
 800b50c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b510:	4649      	mov	r1, r9
 800b512:	4638      	mov	r0, r7
 800b514:	47c0      	blx	r8
 800b516:	3001      	adds	r0, #1
 800b518:	d01e      	beq.n	800b558 <_printf_common+0xa4>
 800b51a:	6823      	ldr	r3, [r4, #0]
 800b51c:	6922      	ldr	r2, [r4, #16]
 800b51e:	f003 0306 	and.w	r3, r3, #6
 800b522:	2b04      	cmp	r3, #4
 800b524:	bf02      	ittt	eq
 800b526:	68e5      	ldreq	r5, [r4, #12]
 800b528:	6833      	ldreq	r3, [r6, #0]
 800b52a:	1aed      	subeq	r5, r5, r3
 800b52c:	68a3      	ldr	r3, [r4, #8]
 800b52e:	bf0c      	ite	eq
 800b530:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b534:	2500      	movne	r5, #0
 800b536:	4293      	cmp	r3, r2
 800b538:	bfc4      	itt	gt
 800b53a:	1a9b      	subgt	r3, r3, r2
 800b53c:	18ed      	addgt	r5, r5, r3
 800b53e:	2600      	movs	r6, #0
 800b540:	341a      	adds	r4, #26
 800b542:	42b5      	cmp	r5, r6
 800b544:	d11a      	bne.n	800b57c <_printf_common+0xc8>
 800b546:	2000      	movs	r0, #0
 800b548:	e008      	b.n	800b55c <_printf_common+0xa8>
 800b54a:	2301      	movs	r3, #1
 800b54c:	4652      	mov	r2, sl
 800b54e:	4649      	mov	r1, r9
 800b550:	4638      	mov	r0, r7
 800b552:	47c0      	blx	r8
 800b554:	3001      	adds	r0, #1
 800b556:	d103      	bne.n	800b560 <_printf_common+0xac>
 800b558:	f04f 30ff 	mov.w	r0, #4294967295
 800b55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b560:	3501      	adds	r5, #1
 800b562:	e7c6      	b.n	800b4f2 <_printf_common+0x3e>
 800b564:	18e1      	adds	r1, r4, r3
 800b566:	1c5a      	adds	r2, r3, #1
 800b568:	2030      	movs	r0, #48	; 0x30
 800b56a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b56e:	4422      	add	r2, r4
 800b570:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b574:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b578:	3302      	adds	r3, #2
 800b57a:	e7c7      	b.n	800b50c <_printf_common+0x58>
 800b57c:	2301      	movs	r3, #1
 800b57e:	4622      	mov	r2, r4
 800b580:	4649      	mov	r1, r9
 800b582:	4638      	mov	r0, r7
 800b584:	47c0      	blx	r8
 800b586:	3001      	adds	r0, #1
 800b588:	d0e6      	beq.n	800b558 <_printf_common+0xa4>
 800b58a:	3601      	adds	r6, #1
 800b58c:	e7d9      	b.n	800b542 <_printf_common+0x8e>
	...

0800b590 <_printf_i>:
 800b590:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b594:	7e0f      	ldrb	r7, [r1, #24]
 800b596:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b598:	2f78      	cmp	r7, #120	; 0x78
 800b59a:	4691      	mov	r9, r2
 800b59c:	4680      	mov	r8, r0
 800b59e:	460c      	mov	r4, r1
 800b5a0:	469a      	mov	sl, r3
 800b5a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b5a6:	d807      	bhi.n	800b5b8 <_printf_i+0x28>
 800b5a8:	2f62      	cmp	r7, #98	; 0x62
 800b5aa:	d80a      	bhi.n	800b5c2 <_printf_i+0x32>
 800b5ac:	2f00      	cmp	r7, #0
 800b5ae:	f000 80d4 	beq.w	800b75a <_printf_i+0x1ca>
 800b5b2:	2f58      	cmp	r7, #88	; 0x58
 800b5b4:	f000 80c0 	beq.w	800b738 <_printf_i+0x1a8>
 800b5b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b5c0:	e03a      	b.n	800b638 <_printf_i+0xa8>
 800b5c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b5c6:	2b15      	cmp	r3, #21
 800b5c8:	d8f6      	bhi.n	800b5b8 <_printf_i+0x28>
 800b5ca:	a101      	add	r1, pc, #4	; (adr r1, 800b5d0 <_printf_i+0x40>)
 800b5cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5d0:	0800b629 	.word	0x0800b629
 800b5d4:	0800b63d 	.word	0x0800b63d
 800b5d8:	0800b5b9 	.word	0x0800b5b9
 800b5dc:	0800b5b9 	.word	0x0800b5b9
 800b5e0:	0800b5b9 	.word	0x0800b5b9
 800b5e4:	0800b5b9 	.word	0x0800b5b9
 800b5e8:	0800b63d 	.word	0x0800b63d
 800b5ec:	0800b5b9 	.word	0x0800b5b9
 800b5f0:	0800b5b9 	.word	0x0800b5b9
 800b5f4:	0800b5b9 	.word	0x0800b5b9
 800b5f8:	0800b5b9 	.word	0x0800b5b9
 800b5fc:	0800b741 	.word	0x0800b741
 800b600:	0800b669 	.word	0x0800b669
 800b604:	0800b6fb 	.word	0x0800b6fb
 800b608:	0800b5b9 	.word	0x0800b5b9
 800b60c:	0800b5b9 	.word	0x0800b5b9
 800b610:	0800b763 	.word	0x0800b763
 800b614:	0800b5b9 	.word	0x0800b5b9
 800b618:	0800b669 	.word	0x0800b669
 800b61c:	0800b5b9 	.word	0x0800b5b9
 800b620:	0800b5b9 	.word	0x0800b5b9
 800b624:	0800b703 	.word	0x0800b703
 800b628:	682b      	ldr	r3, [r5, #0]
 800b62a:	1d1a      	adds	r2, r3, #4
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	602a      	str	r2, [r5, #0]
 800b630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b634:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b638:	2301      	movs	r3, #1
 800b63a:	e09f      	b.n	800b77c <_printf_i+0x1ec>
 800b63c:	6820      	ldr	r0, [r4, #0]
 800b63e:	682b      	ldr	r3, [r5, #0]
 800b640:	0607      	lsls	r7, r0, #24
 800b642:	f103 0104 	add.w	r1, r3, #4
 800b646:	6029      	str	r1, [r5, #0]
 800b648:	d501      	bpl.n	800b64e <_printf_i+0xbe>
 800b64a:	681e      	ldr	r6, [r3, #0]
 800b64c:	e003      	b.n	800b656 <_printf_i+0xc6>
 800b64e:	0646      	lsls	r6, r0, #25
 800b650:	d5fb      	bpl.n	800b64a <_printf_i+0xba>
 800b652:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b656:	2e00      	cmp	r6, #0
 800b658:	da03      	bge.n	800b662 <_printf_i+0xd2>
 800b65a:	232d      	movs	r3, #45	; 0x2d
 800b65c:	4276      	negs	r6, r6
 800b65e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b662:	485a      	ldr	r0, [pc, #360]	; (800b7cc <_printf_i+0x23c>)
 800b664:	230a      	movs	r3, #10
 800b666:	e012      	b.n	800b68e <_printf_i+0xfe>
 800b668:	682b      	ldr	r3, [r5, #0]
 800b66a:	6820      	ldr	r0, [r4, #0]
 800b66c:	1d19      	adds	r1, r3, #4
 800b66e:	6029      	str	r1, [r5, #0]
 800b670:	0605      	lsls	r5, r0, #24
 800b672:	d501      	bpl.n	800b678 <_printf_i+0xe8>
 800b674:	681e      	ldr	r6, [r3, #0]
 800b676:	e002      	b.n	800b67e <_printf_i+0xee>
 800b678:	0641      	lsls	r1, r0, #25
 800b67a:	d5fb      	bpl.n	800b674 <_printf_i+0xe4>
 800b67c:	881e      	ldrh	r6, [r3, #0]
 800b67e:	4853      	ldr	r0, [pc, #332]	; (800b7cc <_printf_i+0x23c>)
 800b680:	2f6f      	cmp	r7, #111	; 0x6f
 800b682:	bf0c      	ite	eq
 800b684:	2308      	moveq	r3, #8
 800b686:	230a      	movne	r3, #10
 800b688:	2100      	movs	r1, #0
 800b68a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b68e:	6865      	ldr	r5, [r4, #4]
 800b690:	60a5      	str	r5, [r4, #8]
 800b692:	2d00      	cmp	r5, #0
 800b694:	bfa2      	ittt	ge
 800b696:	6821      	ldrge	r1, [r4, #0]
 800b698:	f021 0104 	bicge.w	r1, r1, #4
 800b69c:	6021      	strge	r1, [r4, #0]
 800b69e:	b90e      	cbnz	r6, 800b6a4 <_printf_i+0x114>
 800b6a0:	2d00      	cmp	r5, #0
 800b6a2:	d04b      	beq.n	800b73c <_printf_i+0x1ac>
 800b6a4:	4615      	mov	r5, r2
 800b6a6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b6aa:	fb03 6711 	mls	r7, r3, r1, r6
 800b6ae:	5dc7      	ldrb	r7, [r0, r7]
 800b6b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b6b4:	4637      	mov	r7, r6
 800b6b6:	42bb      	cmp	r3, r7
 800b6b8:	460e      	mov	r6, r1
 800b6ba:	d9f4      	bls.n	800b6a6 <_printf_i+0x116>
 800b6bc:	2b08      	cmp	r3, #8
 800b6be:	d10b      	bne.n	800b6d8 <_printf_i+0x148>
 800b6c0:	6823      	ldr	r3, [r4, #0]
 800b6c2:	07de      	lsls	r6, r3, #31
 800b6c4:	d508      	bpl.n	800b6d8 <_printf_i+0x148>
 800b6c6:	6923      	ldr	r3, [r4, #16]
 800b6c8:	6861      	ldr	r1, [r4, #4]
 800b6ca:	4299      	cmp	r1, r3
 800b6cc:	bfde      	ittt	le
 800b6ce:	2330      	movle	r3, #48	; 0x30
 800b6d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b6d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b6d8:	1b52      	subs	r2, r2, r5
 800b6da:	6122      	str	r2, [r4, #16]
 800b6dc:	f8cd a000 	str.w	sl, [sp]
 800b6e0:	464b      	mov	r3, r9
 800b6e2:	aa03      	add	r2, sp, #12
 800b6e4:	4621      	mov	r1, r4
 800b6e6:	4640      	mov	r0, r8
 800b6e8:	f7ff fee4 	bl	800b4b4 <_printf_common>
 800b6ec:	3001      	adds	r0, #1
 800b6ee:	d14a      	bne.n	800b786 <_printf_i+0x1f6>
 800b6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f4:	b004      	add	sp, #16
 800b6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6fa:	6823      	ldr	r3, [r4, #0]
 800b6fc:	f043 0320 	orr.w	r3, r3, #32
 800b700:	6023      	str	r3, [r4, #0]
 800b702:	4833      	ldr	r0, [pc, #204]	; (800b7d0 <_printf_i+0x240>)
 800b704:	2778      	movs	r7, #120	; 0x78
 800b706:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b70a:	6823      	ldr	r3, [r4, #0]
 800b70c:	6829      	ldr	r1, [r5, #0]
 800b70e:	061f      	lsls	r7, r3, #24
 800b710:	f851 6b04 	ldr.w	r6, [r1], #4
 800b714:	d402      	bmi.n	800b71c <_printf_i+0x18c>
 800b716:	065f      	lsls	r7, r3, #25
 800b718:	bf48      	it	mi
 800b71a:	b2b6      	uxthmi	r6, r6
 800b71c:	07df      	lsls	r7, r3, #31
 800b71e:	bf48      	it	mi
 800b720:	f043 0320 	orrmi.w	r3, r3, #32
 800b724:	6029      	str	r1, [r5, #0]
 800b726:	bf48      	it	mi
 800b728:	6023      	strmi	r3, [r4, #0]
 800b72a:	b91e      	cbnz	r6, 800b734 <_printf_i+0x1a4>
 800b72c:	6823      	ldr	r3, [r4, #0]
 800b72e:	f023 0320 	bic.w	r3, r3, #32
 800b732:	6023      	str	r3, [r4, #0]
 800b734:	2310      	movs	r3, #16
 800b736:	e7a7      	b.n	800b688 <_printf_i+0xf8>
 800b738:	4824      	ldr	r0, [pc, #144]	; (800b7cc <_printf_i+0x23c>)
 800b73a:	e7e4      	b.n	800b706 <_printf_i+0x176>
 800b73c:	4615      	mov	r5, r2
 800b73e:	e7bd      	b.n	800b6bc <_printf_i+0x12c>
 800b740:	682b      	ldr	r3, [r5, #0]
 800b742:	6826      	ldr	r6, [r4, #0]
 800b744:	6961      	ldr	r1, [r4, #20]
 800b746:	1d18      	adds	r0, r3, #4
 800b748:	6028      	str	r0, [r5, #0]
 800b74a:	0635      	lsls	r5, r6, #24
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	d501      	bpl.n	800b754 <_printf_i+0x1c4>
 800b750:	6019      	str	r1, [r3, #0]
 800b752:	e002      	b.n	800b75a <_printf_i+0x1ca>
 800b754:	0670      	lsls	r0, r6, #25
 800b756:	d5fb      	bpl.n	800b750 <_printf_i+0x1c0>
 800b758:	8019      	strh	r1, [r3, #0]
 800b75a:	2300      	movs	r3, #0
 800b75c:	6123      	str	r3, [r4, #16]
 800b75e:	4615      	mov	r5, r2
 800b760:	e7bc      	b.n	800b6dc <_printf_i+0x14c>
 800b762:	682b      	ldr	r3, [r5, #0]
 800b764:	1d1a      	adds	r2, r3, #4
 800b766:	602a      	str	r2, [r5, #0]
 800b768:	681d      	ldr	r5, [r3, #0]
 800b76a:	6862      	ldr	r2, [r4, #4]
 800b76c:	2100      	movs	r1, #0
 800b76e:	4628      	mov	r0, r5
 800b770:	f7f4 fd3e 	bl	80001f0 <memchr>
 800b774:	b108      	cbz	r0, 800b77a <_printf_i+0x1ea>
 800b776:	1b40      	subs	r0, r0, r5
 800b778:	6060      	str	r0, [r4, #4]
 800b77a:	6863      	ldr	r3, [r4, #4]
 800b77c:	6123      	str	r3, [r4, #16]
 800b77e:	2300      	movs	r3, #0
 800b780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b784:	e7aa      	b.n	800b6dc <_printf_i+0x14c>
 800b786:	6923      	ldr	r3, [r4, #16]
 800b788:	462a      	mov	r2, r5
 800b78a:	4649      	mov	r1, r9
 800b78c:	4640      	mov	r0, r8
 800b78e:	47d0      	blx	sl
 800b790:	3001      	adds	r0, #1
 800b792:	d0ad      	beq.n	800b6f0 <_printf_i+0x160>
 800b794:	6823      	ldr	r3, [r4, #0]
 800b796:	079b      	lsls	r3, r3, #30
 800b798:	d413      	bmi.n	800b7c2 <_printf_i+0x232>
 800b79a:	68e0      	ldr	r0, [r4, #12]
 800b79c:	9b03      	ldr	r3, [sp, #12]
 800b79e:	4298      	cmp	r0, r3
 800b7a0:	bfb8      	it	lt
 800b7a2:	4618      	movlt	r0, r3
 800b7a4:	e7a6      	b.n	800b6f4 <_printf_i+0x164>
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	4632      	mov	r2, r6
 800b7aa:	4649      	mov	r1, r9
 800b7ac:	4640      	mov	r0, r8
 800b7ae:	47d0      	blx	sl
 800b7b0:	3001      	adds	r0, #1
 800b7b2:	d09d      	beq.n	800b6f0 <_printf_i+0x160>
 800b7b4:	3501      	adds	r5, #1
 800b7b6:	68e3      	ldr	r3, [r4, #12]
 800b7b8:	9903      	ldr	r1, [sp, #12]
 800b7ba:	1a5b      	subs	r3, r3, r1
 800b7bc:	42ab      	cmp	r3, r5
 800b7be:	dcf2      	bgt.n	800b7a6 <_printf_i+0x216>
 800b7c0:	e7eb      	b.n	800b79a <_printf_i+0x20a>
 800b7c2:	2500      	movs	r5, #0
 800b7c4:	f104 0619 	add.w	r6, r4, #25
 800b7c8:	e7f5      	b.n	800b7b6 <_printf_i+0x226>
 800b7ca:	bf00      	nop
 800b7cc:	0800e63b 	.word	0x0800e63b
 800b7d0:	0800e64c 	.word	0x0800e64c

0800b7d4 <std>:
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	b510      	push	{r4, lr}
 800b7d8:	4604      	mov	r4, r0
 800b7da:	e9c0 3300 	strd	r3, r3, [r0]
 800b7de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7e2:	6083      	str	r3, [r0, #8]
 800b7e4:	8181      	strh	r1, [r0, #12]
 800b7e6:	6643      	str	r3, [r0, #100]	; 0x64
 800b7e8:	81c2      	strh	r2, [r0, #14]
 800b7ea:	6183      	str	r3, [r0, #24]
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	2208      	movs	r2, #8
 800b7f0:	305c      	adds	r0, #92	; 0x5c
 800b7f2:	f000 f902 	bl	800b9fa <memset>
 800b7f6:	4b05      	ldr	r3, [pc, #20]	; (800b80c <std+0x38>)
 800b7f8:	6263      	str	r3, [r4, #36]	; 0x24
 800b7fa:	4b05      	ldr	r3, [pc, #20]	; (800b810 <std+0x3c>)
 800b7fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800b7fe:	4b05      	ldr	r3, [pc, #20]	; (800b814 <std+0x40>)
 800b800:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b802:	4b05      	ldr	r3, [pc, #20]	; (800b818 <std+0x44>)
 800b804:	6224      	str	r4, [r4, #32]
 800b806:	6323      	str	r3, [r4, #48]	; 0x30
 800b808:	bd10      	pop	{r4, pc}
 800b80a:	bf00      	nop
 800b80c:	0800b975 	.word	0x0800b975
 800b810:	0800b997 	.word	0x0800b997
 800b814:	0800b9cf 	.word	0x0800b9cf
 800b818:	0800b9f3 	.word	0x0800b9f3

0800b81c <stdio_exit_handler>:
 800b81c:	4a02      	ldr	r2, [pc, #8]	; (800b828 <stdio_exit_handler+0xc>)
 800b81e:	4903      	ldr	r1, [pc, #12]	; (800b82c <stdio_exit_handler+0x10>)
 800b820:	4803      	ldr	r0, [pc, #12]	; (800b830 <stdio_exit_handler+0x14>)
 800b822:	f000 b869 	b.w	800b8f8 <_fwalk_sglue>
 800b826:	bf00      	nop
 800b828:	20000078 	.word	0x20000078
 800b82c:	0800dd09 	.word	0x0800dd09
 800b830:	200001f0 	.word	0x200001f0

0800b834 <cleanup_stdio>:
 800b834:	6841      	ldr	r1, [r0, #4]
 800b836:	4b0c      	ldr	r3, [pc, #48]	; (800b868 <cleanup_stdio+0x34>)
 800b838:	4299      	cmp	r1, r3
 800b83a:	b510      	push	{r4, lr}
 800b83c:	4604      	mov	r4, r0
 800b83e:	d001      	beq.n	800b844 <cleanup_stdio+0x10>
 800b840:	f002 fa62 	bl	800dd08 <_fflush_r>
 800b844:	68a1      	ldr	r1, [r4, #8]
 800b846:	4b09      	ldr	r3, [pc, #36]	; (800b86c <cleanup_stdio+0x38>)
 800b848:	4299      	cmp	r1, r3
 800b84a:	d002      	beq.n	800b852 <cleanup_stdio+0x1e>
 800b84c:	4620      	mov	r0, r4
 800b84e:	f002 fa5b 	bl	800dd08 <_fflush_r>
 800b852:	68e1      	ldr	r1, [r4, #12]
 800b854:	4b06      	ldr	r3, [pc, #24]	; (800b870 <cleanup_stdio+0x3c>)
 800b856:	4299      	cmp	r1, r3
 800b858:	d004      	beq.n	800b864 <cleanup_stdio+0x30>
 800b85a:	4620      	mov	r0, r4
 800b85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b860:	f002 ba52 	b.w	800dd08 <_fflush_r>
 800b864:	bd10      	pop	{r4, pc}
 800b866:	bf00      	nop
 800b868:	20000a48 	.word	0x20000a48
 800b86c:	20000ab0 	.word	0x20000ab0
 800b870:	20000b18 	.word	0x20000b18

0800b874 <global_stdio_init.part.0>:
 800b874:	b510      	push	{r4, lr}
 800b876:	4b0b      	ldr	r3, [pc, #44]	; (800b8a4 <global_stdio_init.part.0+0x30>)
 800b878:	4c0b      	ldr	r4, [pc, #44]	; (800b8a8 <global_stdio_init.part.0+0x34>)
 800b87a:	4a0c      	ldr	r2, [pc, #48]	; (800b8ac <global_stdio_init.part.0+0x38>)
 800b87c:	601a      	str	r2, [r3, #0]
 800b87e:	4620      	mov	r0, r4
 800b880:	2200      	movs	r2, #0
 800b882:	2104      	movs	r1, #4
 800b884:	f7ff ffa6 	bl	800b7d4 <std>
 800b888:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b88c:	2201      	movs	r2, #1
 800b88e:	2109      	movs	r1, #9
 800b890:	f7ff ffa0 	bl	800b7d4 <std>
 800b894:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b898:	2202      	movs	r2, #2
 800b89a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b89e:	2112      	movs	r1, #18
 800b8a0:	f7ff bf98 	b.w	800b7d4 <std>
 800b8a4:	20000b80 	.word	0x20000b80
 800b8a8:	20000a48 	.word	0x20000a48
 800b8ac:	0800b81d 	.word	0x0800b81d

0800b8b0 <__sfp_lock_acquire>:
 800b8b0:	4801      	ldr	r0, [pc, #4]	; (800b8b8 <__sfp_lock_acquire+0x8>)
 800b8b2:	f000 b941 	b.w	800bb38 <__retarget_lock_acquire_recursive>
 800b8b6:	bf00      	nop
 800b8b8:	20000b89 	.word	0x20000b89

0800b8bc <__sfp_lock_release>:
 800b8bc:	4801      	ldr	r0, [pc, #4]	; (800b8c4 <__sfp_lock_release+0x8>)
 800b8be:	f000 b93c 	b.w	800bb3a <__retarget_lock_release_recursive>
 800b8c2:	bf00      	nop
 800b8c4:	20000b89 	.word	0x20000b89

0800b8c8 <__sinit>:
 800b8c8:	b510      	push	{r4, lr}
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	f7ff fff0 	bl	800b8b0 <__sfp_lock_acquire>
 800b8d0:	6a23      	ldr	r3, [r4, #32]
 800b8d2:	b11b      	cbz	r3, 800b8dc <__sinit+0x14>
 800b8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8d8:	f7ff bff0 	b.w	800b8bc <__sfp_lock_release>
 800b8dc:	4b04      	ldr	r3, [pc, #16]	; (800b8f0 <__sinit+0x28>)
 800b8de:	6223      	str	r3, [r4, #32]
 800b8e0:	4b04      	ldr	r3, [pc, #16]	; (800b8f4 <__sinit+0x2c>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1f5      	bne.n	800b8d4 <__sinit+0xc>
 800b8e8:	f7ff ffc4 	bl	800b874 <global_stdio_init.part.0>
 800b8ec:	e7f2      	b.n	800b8d4 <__sinit+0xc>
 800b8ee:	bf00      	nop
 800b8f0:	0800b835 	.word	0x0800b835
 800b8f4:	20000b80 	.word	0x20000b80

0800b8f8 <_fwalk_sglue>:
 800b8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8fc:	4607      	mov	r7, r0
 800b8fe:	4688      	mov	r8, r1
 800b900:	4614      	mov	r4, r2
 800b902:	2600      	movs	r6, #0
 800b904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b908:	f1b9 0901 	subs.w	r9, r9, #1
 800b90c:	d505      	bpl.n	800b91a <_fwalk_sglue+0x22>
 800b90e:	6824      	ldr	r4, [r4, #0]
 800b910:	2c00      	cmp	r4, #0
 800b912:	d1f7      	bne.n	800b904 <_fwalk_sglue+0xc>
 800b914:	4630      	mov	r0, r6
 800b916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b91a:	89ab      	ldrh	r3, [r5, #12]
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d907      	bls.n	800b930 <_fwalk_sglue+0x38>
 800b920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b924:	3301      	adds	r3, #1
 800b926:	d003      	beq.n	800b930 <_fwalk_sglue+0x38>
 800b928:	4629      	mov	r1, r5
 800b92a:	4638      	mov	r0, r7
 800b92c:	47c0      	blx	r8
 800b92e:	4306      	orrs	r6, r0
 800b930:	3568      	adds	r5, #104	; 0x68
 800b932:	e7e9      	b.n	800b908 <_fwalk_sglue+0x10>

0800b934 <siprintf>:
 800b934:	b40e      	push	{r1, r2, r3}
 800b936:	b500      	push	{lr}
 800b938:	b09c      	sub	sp, #112	; 0x70
 800b93a:	ab1d      	add	r3, sp, #116	; 0x74
 800b93c:	9002      	str	r0, [sp, #8]
 800b93e:	9006      	str	r0, [sp, #24]
 800b940:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b944:	4809      	ldr	r0, [pc, #36]	; (800b96c <siprintf+0x38>)
 800b946:	9107      	str	r1, [sp, #28]
 800b948:	9104      	str	r1, [sp, #16]
 800b94a:	4909      	ldr	r1, [pc, #36]	; (800b970 <siprintf+0x3c>)
 800b94c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b950:	9105      	str	r1, [sp, #20]
 800b952:	6800      	ldr	r0, [r0, #0]
 800b954:	9301      	str	r3, [sp, #4]
 800b956:	a902      	add	r1, sp, #8
 800b958:	f002 f852 	bl	800da00 <_svfiprintf_r>
 800b95c:	9b02      	ldr	r3, [sp, #8]
 800b95e:	2200      	movs	r2, #0
 800b960:	701a      	strb	r2, [r3, #0]
 800b962:	b01c      	add	sp, #112	; 0x70
 800b964:	f85d eb04 	ldr.w	lr, [sp], #4
 800b968:	b003      	add	sp, #12
 800b96a:	4770      	bx	lr
 800b96c:	2000023c 	.word	0x2000023c
 800b970:	ffff0208 	.word	0xffff0208

0800b974 <__sread>:
 800b974:	b510      	push	{r4, lr}
 800b976:	460c      	mov	r4, r1
 800b978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b97c:	f000 f87e 	bl	800ba7c <_read_r>
 800b980:	2800      	cmp	r0, #0
 800b982:	bfab      	itete	ge
 800b984:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b986:	89a3      	ldrhlt	r3, [r4, #12]
 800b988:	181b      	addge	r3, r3, r0
 800b98a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b98e:	bfac      	ite	ge
 800b990:	6563      	strge	r3, [r4, #84]	; 0x54
 800b992:	81a3      	strhlt	r3, [r4, #12]
 800b994:	bd10      	pop	{r4, pc}

0800b996 <__swrite>:
 800b996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b99a:	461f      	mov	r7, r3
 800b99c:	898b      	ldrh	r3, [r1, #12]
 800b99e:	05db      	lsls	r3, r3, #23
 800b9a0:	4605      	mov	r5, r0
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	4616      	mov	r6, r2
 800b9a6:	d505      	bpl.n	800b9b4 <__swrite+0x1e>
 800b9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ac:	2302      	movs	r3, #2
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f000 f852 	bl	800ba58 <_lseek_r>
 800b9b4:	89a3      	ldrh	r3, [r4, #12]
 800b9b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9be:	81a3      	strh	r3, [r4, #12]
 800b9c0:	4632      	mov	r2, r6
 800b9c2:	463b      	mov	r3, r7
 800b9c4:	4628      	mov	r0, r5
 800b9c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ca:	f000 b879 	b.w	800bac0 <_write_r>

0800b9ce <__sseek>:
 800b9ce:	b510      	push	{r4, lr}
 800b9d0:	460c      	mov	r4, r1
 800b9d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d6:	f000 f83f 	bl	800ba58 <_lseek_r>
 800b9da:	1c43      	adds	r3, r0, #1
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	bf15      	itete	ne
 800b9e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9ea:	81a3      	strheq	r3, [r4, #12]
 800b9ec:	bf18      	it	ne
 800b9ee:	81a3      	strhne	r3, [r4, #12]
 800b9f0:	bd10      	pop	{r4, pc}

0800b9f2 <__sclose>:
 800b9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f6:	f000 b81f 	b.w	800ba38 <_close_r>

0800b9fa <memset>:
 800b9fa:	4402      	add	r2, r0
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d100      	bne.n	800ba04 <memset+0xa>
 800ba02:	4770      	bx	lr
 800ba04:	f803 1b01 	strb.w	r1, [r3], #1
 800ba08:	e7f9      	b.n	800b9fe <memset+0x4>

0800ba0a <strncmp>:
 800ba0a:	b510      	push	{r4, lr}
 800ba0c:	b16a      	cbz	r2, 800ba2a <strncmp+0x20>
 800ba0e:	3901      	subs	r1, #1
 800ba10:	1884      	adds	r4, r0, r2
 800ba12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba16:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d103      	bne.n	800ba26 <strncmp+0x1c>
 800ba1e:	42a0      	cmp	r0, r4
 800ba20:	d001      	beq.n	800ba26 <strncmp+0x1c>
 800ba22:	2a00      	cmp	r2, #0
 800ba24:	d1f5      	bne.n	800ba12 <strncmp+0x8>
 800ba26:	1ad0      	subs	r0, r2, r3
 800ba28:	bd10      	pop	{r4, pc}
 800ba2a:	4610      	mov	r0, r2
 800ba2c:	e7fc      	b.n	800ba28 <strncmp+0x1e>
	...

0800ba30 <_localeconv_r>:
 800ba30:	4800      	ldr	r0, [pc, #0]	; (800ba34 <_localeconv_r+0x4>)
 800ba32:	4770      	bx	lr
 800ba34:	20000174 	.word	0x20000174

0800ba38 <_close_r>:
 800ba38:	b538      	push	{r3, r4, r5, lr}
 800ba3a:	4d06      	ldr	r5, [pc, #24]	; (800ba54 <_close_r+0x1c>)
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	4604      	mov	r4, r0
 800ba40:	4608      	mov	r0, r1
 800ba42:	602b      	str	r3, [r5, #0]
 800ba44:	f7f7 fdc9 	bl	80035da <_close>
 800ba48:	1c43      	adds	r3, r0, #1
 800ba4a:	d102      	bne.n	800ba52 <_close_r+0x1a>
 800ba4c:	682b      	ldr	r3, [r5, #0]
 800ba4e:	b103      	cbz	r3, 800ba52 <_close_r+0x1a>
 800ba50:	6023      	str	r3, [r4, #0]
 800ba52:	bd38      	pop	{r3, r4, r5, pc}
 800ba54:	20000b84 	.word	0x20000b84

0800ba58 <_lseek_r>:
 800ba58:	b538      	push	{r3, r4, r5, lr}
 800ba5a:	4d07      	ldr	r5, [pc, #28]	; (800ba78 <_lseek_r+0x20>)
 800ba5c:	4604      	mov	r4, r0
 800ba5e:	4608      	mov	r0, r1
 800ba60:	4611      	mov	r1, r2
 800ba62:	2200      	movs	r2, #0
 800ba64:	602a      	str	r2, [r5, #0]
 800ba66:	461a      	mov	r2, r3
 800ba68:	f7f7 fdde 	bl	8003628 <_lseek>
 800ba6c:	1c43      	adds	r3, r0, #1
 800ba6e:	d102      	bne.n	800ba76 <_lseek_r+0x1e>
 800ba70:	682b      	ldr	r3, [r5, #0]
 800ba72:	b103      	cbz	r3, 800ba76 <_lseek_r+0x1e>
 800ba74:	6023      	str	r3, [r4, #0]
 800ba76:	bd38      	pop	{r3, r4, r5, pc}
 800ba78:	20000b84 	.word	0x20000b84

0800ba7c <_read_r>:
 800ba7c:	b538      	push	{r3, r4, r5, lr}
 800ba7e:	4d07      	ldr	r5, [pc, #28]	; (800ba9c <_read_r+0x20>)
 800ba80:	4604      	mov	r4, r0
 800ba82:	4608      	mov	r0, r1
 800ba84:	4611      	mov	r1, r2
 800ba86:	2200      	movs	r2, #0
 800ba88:	602a      	str	r2, [r5, #0]
 800ba8a:	461a      	mov	r2, r3
 800ba8c:	f7f7 fd6c 	bl	8003568 <_read>
 800ba90:	1c43      	adds	r3, r0, #1
 800ba92:	d102      	bne.n	800ba9a <_read_r+0x1e>
 800ba94:	682b      	ldr	r3, [r5, #0]
 800ba96:	b103      	cbz	r3, 800ba9a <_read_r+0x1e>
 800ba98:	6023      	str	r3, [r4, #0]
 800ba9a:	bd38      	pop	{r3, r4, r5, pc}
 800ba9c:	20000b84 	.word	0x20000b84

0800baa0 <_sbrk_r>:
 800baa0:	b538      	push	{r3, r4, r5, lr}
 800baa2:	4d06      	ldr	r5, [pc, #24]	; (800babc <_sbrk_r+0x1c>)
 800baa4:	2300      	movs	r3, #0
 800baa6:	4604      	mov	r4, r0
 800baa8:	4608      	mov	r0, r1
 800baaa:	602b      	str	r3, [r5, #0]
 800baac:	f7f7 fdca 	bl	8003644 <_sbrk>
 800bab0:	1c43      	adds	r3, r0, #1
 800bab2:	d102      	bne.n	800baba <_sbrk_r+0x1a>
 800bab4:	682b      	ldr	r3, [r5, #0]
 800bab6:	b103      	cbz	r3, 800baba <_sbrk_r+0x1a>
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	bd38      	pop	{r3, r4, r5, pc}
 800babc:	20000b84 	.word	0x20000b84

0800bac0 <_write_r>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	4d07      	ldr	r5, [pc, #28]	; (800bae0 <_write_r+0x20>)
 800bac4:	4604      	mov	r4, r0
 800bac6:	4608      	mov	r0, r1
 800bac8:	4611      	mov	r1, r2
 800baca:	2200      	movs	r2, #0
 800bacc:	602a      	str	r2, [r5, #0]
 800bace:	461a      	mov	r2, r3
 800bad0:	f7f7 fd67 	bl	80035a2 <_write>
 800bad4:	1c43      	adds	r3, r0, #1
 800bad6:	d102      	bne.n	800bade <_write_r+0x1e>
 800bad8:	682b      	ldr	r3, [r5, #0]
 800bada:	b103      	cbz	r3, 800bade <_write_r+0x1e>
 800badc:	6023      	str	r3, [r4, #0]
 800bade:	bd38      	pop	{r3, r4, r5, pc}
 800bae0:	20000b84 	.word	0x20000b84

0800bae4 <__errno>:
 800bae4:	4b01      	ldr	r3, [pc, #4]	; (800baec <__errno+0x8>)
 800bae6:	6818      	ldr	r0, [r3, #0]
 800bae8:	4770      	bx	lr
 800baea:	bf00      	nop
 800baec:	2000023c 	.word	0x2000023c

0800baf0 <__libc_init_array>:
 800baf0:	b570      	push	{r4, r5, r6, lr}
 800baf2:	4d0d      	ldr	r5, [pc, #52]	; (800bb28 <__libc_init_array+0x38>)
 800baf4:	4c0d      	ldr	r4, [pc, #52]	; (800bb2c <__libc_init_array+0x3c>)
 800baf6:	1b64      	subs	r4, r4, r5
 800baf8:	10a4      	asrs	r4, r4, #2
 800bafa:	2600      	movs	r6, #0
 800bafc:	42a6      	cmp	r6, r4
 800bafe:	d109      	bne.n	800bb14 <__libc_init_array+0x24>
 800bb00:	4d0b      	ldr	r5, [pc, #44]	; (800bb30 <__libc_init_array+0x40>)
 800bb02:	4c0c      	ldr	r4, [pc, #48]	; (800bb34 <__libc_init_array+0x44>)
 800bb04:	f002 fc30 	bl	800e368 <_init>
 800bb08:	1b64      	subs	r4, r4, r5
 800bb0a:	10a4      	asrs	r4, r4, #2
 800bb0c:	2600      	movs	r6, #0
 800bb0e:	42a6      	cmp	r6, r4
 800bb10:	d105      	bne.n	800bb1e <__libc_init_array+0x2e>
 800bb12:	bd70      	pop	{r4, r5, r6, pc}
 800bb14:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb18:	4798      	blx	r3
 800bb1a:	3601      	adds	r6, #1
 800bb1c:	e7ee      	b.n	800bafc <__libc_init_array+0xc>
 800bb1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb22:	4798      	blx	r3
 800bb24:	3601      	adds	r6, #1
 800bb26:	e7f2      	b.n	800bb0e <__libc_init_array+0x1e>
 800bb28:	0800e8fc 	.word	0x0800e8fc
 800bb2c:	0800e8fc 	.word	0x0800e8fc
 800bb30:	0800e8fc 	.word	0x0800e8fc
 800bb34:	0800e900 	.word	0x0800e900

0800bb38 <__retarget_lock_acquire_recursive>:
 800bb38:	4770      	bx	lr

0800bb3a <__retarget_lock_release_recursive>:
 800bb3a:	4770      	bx	lr

0800bb3c <memcpy>:
 800bb3c:	440a      	add	r2, r1
 800bb3e:	4291      	cmp	r1, r2
 800bb40:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb44:	d100      	bne.n	800bb48 <memcpy+0xc>
 800bb46:	4770      	bx	lr
 800bb48:	b510      	push	{r4, lr}
 800bb4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb52:	4291      	cmp	r1, r2
 800bb54:	d1f9      	bne.n	800bb4a <memcpy+0xe>
 800bb56:	bd10      	pop	{r4, pc}

0800bb58 <nan>:
 800bb58:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bb60 <nan+0x8>
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop
 800bb60:	00000000 	.word	0x00000000
 800bb64:	7ff80000 	.word	0x7ff80000

0800bb68 <quorem>:
 800bb68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6c:	6903      	ldr	r3, [r0, #16]
 800bb6e:	690c      	ldr	r4, [r1, #16]
 800bb70:	42a3      	cmp	r3, r4
 800bb72:	4607      	mov	r7, r0
 800bb74:	db7e      	blt.n	800bc74 <quorem+0x10c>
 800bb76:	3c01      	subs	r4, #1
 800bb78:	f101 0814 	add.w	r8, r1, #20
 800bb7c:	f100 0514 	add.w	r5, r0, #20
 800bb80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb84:	9301      	str	r3, [sp, #4]
 800bb86:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb8e:	3301      	adds	r3, #1
 800bb90:	429a      	cmp	r2, r3
 800bb92:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bb96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb9a:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb9e:	d331      	bcc.n	800bc04 <quorem+0x9c>
 800bba0:	f04f 0e00 	mov.w	lr, #0
 800bba4:	4640      	mov	r0, r8
 800bba6:	46ac      	mov	ip, r5
 800bba8:	46f2      	mov	sl, lr
 800bbaa:	f850 2b04 	ldr.w	r2, [r0], #4
 800bbae:	b293      	uxth	r3, r2
 800bbb0:	fb06 e303 	mla	r3, r6, r3, lr
 800bbb4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbb8:	0c1a      	lsrs	r2, r3, #16
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	ebaa 0303 	sub.w	r3, sl, r3
 800bbc0:	f8dc a000 	ldr.w	sl, [ip]
 800bbc4:	fa13 f38a 	uxtah	r3, r3, sl
 800bbc8:	fb06 220e 	mla	r2, r6, lr, r2
 800bbcc:	9300      	str	r3, [sp, #0]
 800bbce:	9b00      	ldr	r3, [sp, #0]
 800bbd0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbd4:	b292      	uxth	r2, r2
 800bbd6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bbda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbde:	f8bd 3000 	ldrh.w	r3, [sp]
 800bbe2:	4581      	cmp	r9, r0
 800bbe4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbe8:	f84c 3b04 	str.w	r3, [ip], #4
 800bbec:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bbf0:	d2db      	bcs.n	800bbaa <quorem+0x42>
 800bbf2:	f855 300b 	ldr.w	r3, [r5, fp]
 800bbf6:	b92b      	cbnz	r3, 800bc04 <quorem+0x9c>
 800bbf8:	9b01      	ldr	r3, [sp, #4]
 800bbfa:	3b04      	subs	r3, #4
 800bbfc:	429d      	cmp	r5, r3
 800bbfe:	461a      	mov	r2, r3
 800bc00:	d32c      	bcc.n	800bc5c <quorem+0xf4>
 800bc02:	613c      	str	r4, [r7, #16]
 800bc04:	4638      	mov	r0, r7
 800bc06:	f001 fca5 	bl	800d554 <__mcmp>
 800bc0a:	2800      	cmp	r0, #0
 800bc0c:	db22      	blt.n	800bc54 <quorem+0xec>
 800bc0e:	3601      	adds	r6, #1
 800bc10:	4629      	mov	r1, r5
 800bc12:	2000      	movs	r0, #0
 800bc14:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc18:	f8d1 c000 	ldr.w	ip, [r1]
 800bc1c:	b293      	uxth	r3, r2
 800bc1e:	1ac3      	subs	r3, r0, r3
 800bc20:	0c12      	lsrs	r2, r2, #16
 800bc22:	fa13 f38c 	uxtah	r3, r3, ip
 800bc26:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bc2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc34:	45c1      	cmp	r9, r8
 800bc36:	f841 3b04 	str.w	r3, [r1], #4
 800bc3a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc3e:	d2e9      	bcs.n	800bc14 <quorem+0xac>
 800bc40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc48:	b922      	cbnz	r2, 800bc54 <quorem+0xec>
 800bc4a:	3b04      	subs	r3, #4
 800bc4c:	429d      	cmp	r5, r3
 800bc4e:	461a      	mov	r2, r3
 800bc50:	d30a      	bcc.n	800bc68 <quorem+0x100>
 800bc52:	613c      	str	r4, [r7, #16]
 800bc54:	4630      	mov	r0, r6
 800bc56:	b003      	add	sp, #12
 800bc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc5c:	6812      	ldr	r2, [r2, #0]
 800bc5e:	3b04      	subs	r3, #4
 800bc60:	2a00      	cmp	r2, #0
 800bc62:	d1ce      	bne.n	800bc02 <quorem+0x9a>
 800bc64:	3c01      	subs	r4, #1
 800bc66:	e7c9      	b.n	800bbfc <quorem+0x94>
 800bc68:	6812      	ldr	r2, [r2, #0]
 800bc6a:	3b04      	subs	r3, #4
 800bc6c:	2a00      	cmp	r2, #0
 800bc6e:	d1f0      	bne.n	800bc52 <quorem+0xea>
 800bc70:	3c01      	subs	r4, #1
 800bc72:	e7eb      	b.n	800bc4c <quorem+0xe4>
 800bc74:	2000      	movs	r0, #0
 800bc76:	e7ee      	b.n	800bc56 <quorem+0xee>

0800bc78 <_dtoa_r>:
 800bc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc7c:	ed2d 8b04 	vpush	{d8-d9}
 800bc80:	69c5      	ldr	r5, [r0, #28]
 800bc82:	b093      	sub	sp, #76	; 0x4c
 800bc84:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bc88:	ec57 6b10 	vmov	r6, r7, d0
 800bc8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bc90:	9107      	str	r1, [sp, #28]
 800bc92:	4604      	mov	r4, r0
 800bc94:	920a      	str	r2, [sp, #40]	; 0x28
 800bc96:	930d      	str	r3, [sp, #52]	; 0x34
 800bc98:	b975      	cbnz	r5, 800bcb8 <_dtoa_r+0x40>
 800bc9a:	2010      	movs	r0, #16
 800bc9c:	f7fe fa28 	bl	800a0f0 <malloc>
 800bca0:	4602      	mov	r2, r0
 800bca2:	61e0      	str	r0, [r4, #28]
 800bca4:	b920      	cbnz	r0, 800bcb0 <_dtoa_r+0x38>
 800bca6:	4bae      	ldr	r3, [pc, #696]	; (800bf60 <_dtoa_r+0x2e8>)
 800bca8:	21ef      	movs	r1, #239	; 0xef
 800bcaa:	48ae      	ldr	r0, [pc, #696]	; (800bf64 <_dtoa_r+0x2ec>)
 800bcac:	f002 f86e 	bl	800dd8c <__assert_func>
 800bcb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bcb4:	6005      	str	r5, [r0, #0]
 800bcb6:	60c5      	str	r5, [r0, #12]
 800bcb8:	69e3      	ldr	r3, [r4, #28]
 800bcba:	6819      	ldr	r1, [r3, #0]
 800bcbc:	b151      	cbz	r1, 800bcd4 <_dtoa_r+0x5c>
 800bcbe:	685a      	ldr	r2, [r3, #4]
 800bcc0:	604a      	str	r2, [r1, #4]
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	4093      	lsls	r3, r2
 800bcc6:	608b      	str	r3, [r1, #8]
 800bcc8:	4620      	mov	r0, r4
 800bcca:	f001 f9bd 	bl	800d048 <_Bfree>
 800bcce:	69e3      	ldr	r3, [r4, #28]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	601a      	str	r2, [r3, #0]
 800bcd4:	1e3b      	subs	r3, r7, #0
 800bcd6:	bfbb      	ittet	lt
 800bcd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bcdc:	9303      	strlt	r3, [sp, #12]
 800bcde:	2300      	movge	r3, #0
 800bce0:	2201      	movlt	r2, #1
 800bce2:	bfac      	ite	ge
 800bce4:	f8c8 3000 	strge.w	r3, [r8]
 800bce8:	f8c8 2000 	strlt.w	r2, [r8]
 800bcec:	4b9e      	ldr	r3, [pc, #632]	; (800bf68 <_dtoa_r+0x2f0>)
 800bcee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bcf2:	ea33 0308 	bics.w	r3, r3, r8
 800bcf6:	d11b      	bne.n	800bd30 <_dtoa_r+0xb8>
 800bcf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bcfa:	f242 730f 	movw	r3, #9999	; 0x270f
 800bcfe:	6013      	str	r3, [r2, #0]
 800bd00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bd04:	4333      	orrs	r3, r6
 800bd06:	f000 8593 	beq.w	800c830 <_dtoa_r+0xbb8>
 800bd0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd0c:	b963      	cbnz	r3, 800bd28 <_dtoa_r+0xb0>
 800bd0e:	4b97      	ldr	r3, [pc, #604]	; (800bf6c <_dtoa_r+0x2f4>)
 800bd10:	e027      	b.n	800bd62 <_dtoa_r+0xea>
 800bd12:	4b97      	ldr	r3, [pc, #604]	; (800bf70 <_dtoa_r+0x2f8>)
 800bd14:	9300      	str	r3, [sp, #0]
 800bd16:	3308      	adds	r3, #8
 800bd18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd1a:	6013      	str	r3, [r2, #0]
 800bd1c:	9800      	ldr	r0, [sp, #0]
 800bd1e:	b013      	add	sp, #76	; 0x4c
 800bd20:	ecbd 8b04 	vpop	{d8-d9}
 800bd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd28:	4b90      	ldr	r3, [pc, #576]	; (800bf6c <_dtoa_r+0x2f4>)
 800bd2a:	9300      	str	r3, [sp, #0]
 800bd2c:	3303      	adds	r3, #3
 800bd2e:	e7f3      	b.n	800bd18 <_dtoa_r+0xa0>
 800bd30:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd34:	2200      	movs	r2, #0
 800bd36:	ec51 0b17 	vmov	r0, r1, d7
 800bd3a:	eeb0 8a47 	vmov.f32	s16, s14
 800bd3e:	eef0 8a67 	vmov.f32	s17, s15
 800bd42:	2300      	movs	r3, #0
 800bd44:	f7f4 fed0 	bl	8000ae8 <__aeabi_dcmpeq>
 800bd48:	4681      	mov	r9, r0
 800bd4a:	b160      	cbz	r0, 800bd66 <_dtoa_r+0xee>
 800bd4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd4e:	2301      	movs	r3, #1
 800bd50:	6013      	str	r3, [r2, #0]
 800bd52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	f000 8568 	beq.w	800c82a <_dtoa_r+0xbb2>
 800bd5a:	4b86      	ldr	r3, [pc, #536]	; (800bf74 <_dtoa_r+0x2fc>)
 800bd5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd5e:	6013      	str	r3, [r2, #0]
 800bd60:	3b01      	subs	r3, #1
 800bd62:	9300      	str	r3, [sp, #0]
 800bd64:	e7da      	b.n	800bd1c <_dtoa_r+0xa4>
 800bd66:	aa10      	add	r2, sp, #64	; 0x40
 800bd68:	a911      	add	r1, sp, #68	; 0x44
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	eeb0 0a48 	vmov.f32	s0, s16
 800bd70:	eef0 0a68 	vmov.f32	s1, s17
 800bd74:	f001 fd04 	bl	800d780 <__d2b>
 800bd78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bd7c:	4682      	mov	sl, r0
 800bd7e:	2d00      	cmp	r5, #0
 800bd80:	d07f      	beq.n	800be82 <_dtoa_r+0x20a>
 800bd82:	ee18 3a90 	vmov	r3, s17
 800bd86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd8a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bd8e:	ec51 0b18 	vmov	r0, r1, d8
 800bd92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bd96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bd9a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bd9e:	4619      	mov	r1, r3
 800bda0:	2200      	movs	r2, #0
 800bda2:	4b75      	ldr	r3, [pc, #468]	; (800bf78 <_dtoa_r+0x300>)
 800bda4:	f7f4 fa80 	bl	80002a8 <__aeabi_dsub>
 800bda8:	a367      	add	r3, pc, #412	; (adr r3, 800bf48 <_dtoa_r+0x2d0>)
 800bdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdae:	f7f4 fc33 	bl	8000618 <__aeabi_dmul>
 800bdb2:	a367      	add	r3, pc, #412	; (adr r3, 800bf50 <_dtoa_r+0x2d8>)
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	f7f4 fa78 	bl	80002ac <__adddf3>
 800bdbc:	4606      	mov	r6, r0
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	460f      	mov	r7, r1
 800bdc2:	f7f4 fbbf 	bl	8000544 <__aeabi_i2d>
 800bdc6:	a364      	add	r3, pc, #400	; (adr r3, 800bf58 <_dtoa_r+0x2e0>)
 800bdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdcc:	f7f4 fc24 	bl	8000618 <__aeabi_dmul>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	4630      	mov	r0, r6
 800bdd6:	4639      	mov	r1, r7
 800bdd8:	f7f4 fa68 	bl	80002ac <__adddf3>
 800bddc:	4606      	mov	r6, r0
 800bdde:	460f      	mov	r7, r1
 800bde0:	f7f4 feca 	bl	8000b78 <__aeabi_d2iz>
 800bde4:	2200      	movs	r2, #0
 800bde6:	4683      	mov	fp, r0
 800bde8:	2300      	movs	r3, #0
 800bdea:	4630      	mov	r0, r6
 800bdec:	4639      	mov	r1, r7
 800bdee:	f7f4 fe85 	bl	8000afc <__aeabi_dcmplt>
 800bdf2:	b148      	cbz	r0, 800be08 <_dtoa_r+0x190>
 800bdf4:	4658      	mov	r0, fp
 800bdf6:	f7f4 fba5 	bl	8000544 <__aeabi_i2d>
 800bdfa:	4632      	mov	r2, r6
 800bdfc:	463b      	mov	r3, r7
 800bdfe:	f7f4 fe73 	bl	8000ae8 <__aeabi_dcmpeq>
 800be02:	b908      	cbnz	r0, 800be08 <_dtoa_r+0x190>
 800be04:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be08:	f1bb 0f16 	cmp.w	fp, #22
 800be0c:	d857      	bhi.n	800bebe <_dtoa_r+0x246>
 800be0e:	4b5b      	ldr	r3, [pc, #364]	; (800bf7c <_dtoa_r+0x304>)
 800be10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800be14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be18:	ec51 0b18 	vmov	r0, r1, d8
 800be1c:	f7f4 fe6e 	bl	8000afc <__aeabi_dcmplt>
 800be20:	2800      	cmp	r0, #0
 800be22:	d04e      	beq.n	800bec2 <_dtoa_r+0x24a>
 800be24:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be28:	2300      	movs	r3, #0
 800be2a:	930c      	str	r3, [sp, #48]	; 0x30
 800be2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be2e:	1b5b      	subs	r3, r3, r5
 800be30:	1e5a      	subs	r2, r3, #1
 800be32:	bf45      	ittet	mi
 800be34:	f1c3 0301 	rsbmi	r3, r3, #1
 800be38:	9305      	strmi	r3, [sp, #20]
 800be3a:	2300      	movpl	r3, #0
 800be3c:	2300      	movmi	r3, #0
 800be3e:	9206      	str	r2, [sp, #24]
 800be40:	bf54      	ite	pl
 800be42:	9305      	strpl	r3, [sp, #20]
 800be44:	9306      	strmi	r3, [sp, #24]
 800be46:	f1bb 0f00 	cmp.w	fp, #0
 800be4a:	db3c      	blt.n	800bec6 <_dtoa_r+0x24e>
 800be4c:	9b06      	ldr	r3, [sp, #24]
 800be4e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800be52:	445b      	add	r3, fp
 800be54:	9306      	str	r3, [sp, #24]
 800be56:	2300      	movs	r3, #0
 800be58:	9308      	str	r3, [sp, #32]
 800be5a:	9b07      	ldr	r3, [sp, #28]
 800be5c:	2b09      	cmp	r3, #9
 800be5e:	d868      	bhi.n	800bf32 <_dtoa_r+0x2ba>
 800be60:	2b05      	cmp	r3, #5
 800be62:	bfc4      	itt	gt
 800be64:	3b04      	subgt	r3, #4
 800be66:	9307      	strgt	r3, [sp, #28]
 800be68:	9b07      	ldr	r3, [sp, #28]
 800be6a:	f1a3 0302 	sub.w	r3, r3, #2
 800be6e:	bfcc      	ite	gt
 800be70:	2500      	movgt	r5, #0
 800be72:	2501      	movle	r5, #1
 800be74:	2b03      	cmp	r3, #3
 800be76:	f200 8085 	bhi.w	800bf84 <_dtoa_r+0x30c>
 800be7a:	e8df f003 	tbb	[pc, r3]
 800be7e:	3b2e      	.short	0x3b2e
 800be80:	5839      	.short	0x5839
 800be82:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800be86:	441d      	add	r5, r3
 800be88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800be8c:	2b20      	cmp	r3, #32
 800be8e:	bfc1      	itttt	gt
 800be90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800be94:	fa08 f803 	lslgt.w	r8, r8, r3
 800be98:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800be9c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bea0:	bfd6      	itet	le
 800bea2:	f1c3 0320 	rsble	r3, r3, #32
 800bea6:	ea48 0003 	orrgt.w	r0, r8, r3
 800beaa:	fa06 f003 	lslle.w	r0, r6, r3
 800beae:	f7f4 fb39 	bl	8000524 <__aeabi_ui2d>
 800beb2:	2201      	movs	r2, #1
 800beb4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800beb8:	3d01      	subs	r5, #1
 800beba:	920e      	str	r2, [sp, #56]	; 0x38
 800bebc:	e76f      	b.n	800bd9e <_dtoa_r+0x126>
 800bebe:	2301      	movs	r3, #1
 800bec0:	e7b3      	b.n	800be2a <_dtoa_r+0x1b2>
 800bec2:	900c      	str	r0, [sp, #48]	; 0x30
 800bec4:	e7b2      	b.n	800be2c <_dtoa_r+0x1b4>
 800bec6:	9b05      	ldr	r3, [sp, #20]
 800bec8:	eba3 030b 	sub.w	r3, r3, fp
 800becc:	9305      	str	r3, [sp, #20]
 800bece:	f1cb 0300 	rsb	r3, fp, #0
 800bed2:	9308      	str	r3, [sp, #32]
 800bed4:	2300      	movs	r3, #0
 800bed6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bed8:	e7bf      	b.n	800be5a <_dtoa_r+0x1e2>
 800beda:	2300      	movs	r3, #0
 800bedc:	9309      	str	r3, [sp, #36]	; 0x24
 800bede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	dc52      	bgt.n	800bf8a <_dtoa_r+0x312>
 800bee4:	2301      	movs	r3, #1
 800bee6:	9301      	str	r3, [sp, #4]
 800bee8:	9304      	str	r3, [sp, #16]
 800beea:	461a      	mov	r2, r3
 800beec:	920a      	str	r2, [sp, #40]	; 0x28
 800beee:	e00b      	b.n	800bf08 <_dtoa_r+0x290>
 800bef0:	2301      	movs	r3, #1
 800bef2:	e7f3      	b.n	800bedc <_dtoa_r+0x264>
 800bef4:	2300      	movs	r3, #0
 800bef6:	9309      	str	r3, [sp, #36]	; 0x24
 800bef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800befa:	445b      	add	r3, fp
 800befc:	9301      	str	r3, [sp, #4]
 800befe:	3301      	adds	r3, #1
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	9304      	str	r3, [sp, #16]
 800bf04:	bfb8      	it	lt
 800bf06:	2301      	movlt	r3, #1
 800bf08:	69e0      	ldr	r0, [r4, #28]
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	2204      	movs	r2, #4
 800bf0e:	f102 0614 	add.w	r6, r2, #20
 800bf12:	429e      	cmp	r6, r3
 800bf14:	d93d      	bls.n	800bf92 <_dtoa_r+0x31a>
 800bf16:	6041      	str	r1, [r0, #4]
 800bf18:	4620      	mov	r0, r4
 800bf1a:	f001 f855 	bl	800cfc8 <_Balloc>
 800bf1e:	9000      	str	r0, [sp, #0]
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d139      	bne.n	800bf98 <_dtoa_r+0x320>
 800bf24:	4b16      	ldr	r3, [pc, #88]	; (800bf80 <_dtoa_r+0x308>)
 800bf26:	4602      	mov	r2, r0
 800bf28:	f240 11af 	movw	r1, #431	; 0x1af
 800bf2c:	e6bd      	b.n	800bcaa <_dtoa_r+0x32>
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e7e1      	b.n	800bef6 <_dtoa_r+0x27e>
 800bf32:	2501      	movs	r5, #1
 800bf34:	2300      	movs	r3, #0
 800bf36:	9307      	str	r3, [sp, #28]
 800bf38:	9509      	str	r5, [sp, #36]	; 0x24
 800bf3a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf3e:	9301      	str	r3, [sp, #4]
 800bf40:	9304      	str	r3, [sp, #16]
 800bf42:	2200      	movs	r2, #0
 800bf44:	2312      	movs	r3, #18
 800bf46:	e7d1      	b.n	800beec <_dtoa_r+0x274>
 800bf48:	636f4361 	.word	0x636f4361
 800bf4c:	3fd287a7 	.word	0x3fd287a7
 800bf50:	8b60c8b3 	.word	0x8b60c8b3
 800bf54:	3fc68a28 	.word	0x3fc68a28
 800bf58:	509f79fb 	.word	0x509f79fb
 800bf5c:	3fd34413 	.word	0x3fd34413
 800bf60:	0800e672 	.word	0x0800e672
 800bf64:	0800e689 	.word	0x0800e689
 800bf68:	7ff00000 	.word	0x7ff00000
 800bf6c:	0800e66e 	.word	0x0800e66e
 800bf70:	0800e665 	.word	0x0800e665
 800bf74:	0800e63a 	.word	0x0800e63a
 800bf78:	3ff80000 	.word	0x3ff80000
 800bf7c:	0800e7d8 	.word	0x0800e7d8
 800bf80:	0800e6e1 	.word	0x0800e6e1
 800bf84:	2301      	movs	r3, #1
 800bf86:	9309      	str	r3, [sp, #36]	; 0x24
 800bf88:	e7d7      	b.n	800bf3a <_dtoa_r+0x2c2>
 800bf8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf8c:	9301      	str	r3, [sp, #4]
 800bf8e:	9304      	str	r3, [sp, #16]
 800bf90:	e7ba      	b.n	800bf08 <_dtoa_r+0x290>
 800bf92:	3101      	adds	r1, #1
 800bf94:	0052      	lsls	r2, r2, #1
 800bf96:	e7ba      	b.n	800bf0e <_dtoa_r+0x296>
 800bf98:	69e3      	ldr	r3, [r4, #28]
 800bf9a:	9a00      	ldr	r2, [sp, #0]
 800bf9c:	601a      	str	r2, [r3, #0]
 800bf9e:	9b04      	ldr	r3, [sp, #16]
 800bfa0:	2b0e      	cmp	r3, #14
 800bfa2:	f200 80a8 	bhi.w	800c0f6 <_dtoa_r+0x47e>
 800bfa6:	2d00      	cmp	r5, #0
 800bfa8:	f000 80a5 	beq.w	800c0f6 <_dtoa_r+0x47e>
 800bfac:	f1bb 0f00 	cmp.w	fp, #0
 800bfb0:	dd38      	ble.n	800c024 <_dtoa_r+0x3ac>
 800bfb2:	4bc0      	ldr	r3, [pc, #768]	; (800c2b4 <_dtoa_r+0x63c>)
 800bfb4:	f00b 020f 	and.w	r2, fp, #15
 800bfb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfbc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bfc0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bfc4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bfc8:	d019      	beq.n	800bffe <_dtoa_r+0x386>
 800bfca:	4bbb      	ldr	r3, [pc, #748]	; (800c2b8 <_dtoa_r+0x640>)
 800bfcc:	ec51 0b18 	vmov	r0, r1, d8
 800bfd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bfd4:	f7f4 fc4a 	bl	800086c <__aeabi_ddiv>
 800bfd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfdc:	f008 080f 	and.w	r8, r8, #15
 800bfe0:	2503      	movs	r5, #3
 800bfe2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c2b8 <_dtoa_r+0x640>
 800bfe6:	f1b8 0f00 	cmp.w	r8, #0
 800bfea:	d10a      	bne.n	800c002 <_dtoa_r+0x38a>
 800bfec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bff0:	4632      	mov	r2, r6
 800bff2:	463b      	mov	r3, r7
 800bff4:	f7f4 fc3a 	bl	800086c <__aeabi_ddiv>
 800bff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bffc:	e02b      	b.n	800c056 <_dtoa_r+0x3de>
 800bffe:	2502      	movs	r5, #2
 800c000:	e7ef      	b.n	800bfe2 <_dtoa_r+0x36a>
 800c002:	f018 0f01 	tst.w	r8, #1
 800c006:	d008      	beq.n	800c01a <_dtoa_r+0x3a2>
 800c008:	4630      	mov	r0, r6
 800c00a:	4639      	mov	r1, r7
 800c00c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c010:	f7f4 fb02 	bl	8000618 <__aeabi_dmul>
 800c014:	3501      	adds	r5, #1
 800c016:	4606      	mov	r6, r0
 800c018:	460f      	mov	r7, r1
 800c01a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c01e:	f109 0908 	add.w	r9, r9, #8
 800c022:	e7e0      	b.n	800bfe6 <_dtoa_r+0x36e>
 800c024:	f000 809f 	beq.w	800c166 <_dtoa_r+0x4ee>
 800c028:	f1cb 0600 	rsb	r6, fp, #0
 800c02c:	4ba1      	ldr	r3, [pc, #644]	; (800c2b4 <_dtoa_r+0x63c>)
 800c02e:	4fa2      	ldr	r7, [pc, #648]	; (800c2b8 <_dtoa_r+0x640>)
 800c030:	f006 020f 	and.w	r2, r6, #15
 800c034:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03c:	ec51 0b18 	vmov	r0, r1, d8
 800c040:	f7f4 faea 	bl	8000618 <__aeabi_dmul>
 800c044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c048:	1136      	asrs	r6, r6, #4
 800c04a:	2300      	movs	r3, #0
 800c04c:	2502      	movs	r5, #2
 800c04e:	2e00      	cmp	r6, #0
 800c050:	d17e      	bne.n	800c150 <_dtoa_r+0x4d8>
 800c052:	2b00      	cmp	r3, #0
 800c054:	d1d0      	bne.n	800bff8 <_dtoa_r+0x380>
 800c056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c058:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	f000 8084 	beq.w	800c16a <_dtoa_r+0x4f2>
 800c062:	4b96      	ldr	r3, [pc, #600]	; (800c2bc <_dtoa_r+0x644>)
 800c064:	2200      	movs	r2, #0
 800c066:	4640      	mov	r0, r8
 800c068:	4649      	mov	r1, r9
 800c06a:	f7f4 fd47 	bl	8000afc <__aeabi_dcmplt>
 800c06e:	2800      	cmp	r0, #0
 800c070:	d07b      	beq.n	800c16a <_dtoa_r+0x4f2>
 800c072:	9b04      	ldr	r3, [sp, #16]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d078      	beq.n	800c16a <_dtoa_r+0x4f2>
 800c078:	9b01      	ldr	r3, [sp, #4]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	dd39      	ble.n	800c0f2 <_dtoa_r+0x47a>
 800c07e:	4b90      	ldr	r3, [pc, #576]	; (800c2c0 <_dtoa_r+0x648>)
 800c080:	2200      	movs	r2, #0
 800c082:	4640      	mov	r0, r8
 800c084:	4649      	mov	r1, r9
 800c086:	f7f4 fac7 	bl	8000618 <__aeabi_dmul>
 800c08a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c08e:	9e01      	ldr	r6, [sp, #4]
 800c090:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c094:	3501      	adds	r5, #1
 800c096:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c09a:	4628      	mov	r0, r5
 800c09c:	f7f4 fa52 	bl	8000544 <__aeabi_i2d>
 800c0a0:	4642      	mov	r2, r8
 800c0a2:	464b      	mov	r3, r9
 800c0a4:	f7f4 fab8 	bl	8000618 <__aeabi_dmul>
 800c0a8:	4b86      	ldr	r3, [pc, #536]	; (800c2c4 <_dtoa_r+0x64c>)
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f7f4 f8fe 	bl	80002ac <__adddf3>
 800c0b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c0b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0b8:	9303      	str	r3, [sp, #12]
 800c0ba:	2e00      	cmp	r6, #0
 800c0bc:	d158      	bne.n	800c170 <_dtoa_r+0x4f8>
 800c0be:	4b82      	ldr	r3, [pc, #520]	; (800c2c8 <_dtoa_r+0x650>)
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	4640      	mov	r0, r8
 800c0c4:	4649      	mov	r1, r9
 800c0c6:	f7f4 f8ef 	bl	80002a8 <__aeabi_dsub>
 800c0ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0ce:	4680      	mov	r8, r0
 800c0d0:	4689      	mov	r9, r1
 800c0d2:	f7f4 fd31 	bl	8000b38 <__aeabi_dcmpgt>
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	f040 8296 	bne.w	800c608 <_dtoa_r+0x990>
 800c0dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c0e0:	4640      	mov	r0, r8
 800c0e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0e6:	4649      	mov	r1, r9
 800c0e8:	f7f4 fd08 	bl	8000afc <__aeabi_dcmplt>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	f040 8289 	bne.w	800c604 <_dtoa_r+0x98c>
 800c0f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c0f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f2c0 814e 	blt.w	800c39a <_dtoa_r+0x722>
 800c0fe:	f1bb 0f0e 	cmp.w	fp, #14
 800c102:	f300 814a 	bgt.w	800c39a <_dtoa_r+0x722>
 800c106:	4b6b      	ldr	r3, [pc, #428]	; (800c2b4 <_dtoa_r+0x63c>)
 800c108:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c10c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c112:	2b00      	cmp	r3, #0
 800c114:	f280 80dc 	bge.w	800c2d0 <_dtoa_r+0x658>
 800c118:	9b04      	ldr	r3, [sp, #16]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f300 80d8 	bgt.w	800c2d0 <_dtoa_r+0x658>
 800c120:	f040 826f 	bne.w	800c602 <_dtoa_r+0x98a>
 800c124:	4b68      	ldr	r3, [pc, #416]	; (800c2c8 <_dtoa_r+0x650>)
 800c126:	2200      	movs	r2, #0
 800c128:	4640      	mov	r0, r8
 800c12a:	4649      	mov	r1, r9
 800c12c:	f7f4 fa74 	bl	8000618 <__aeabi_dmul>
 800c130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c134:	f7f4 fcf6 	bl	8000b24 <__aeabi_dcmpge>
 800c138:	9e04      	ldr	r6, [sp, #16]
 800c13a:	4637      	mov	r7, r6
 800c13c:	2800      	cmp	r0, #0
 800c13e:	f040 8245 	bne.w	800c5cc <_dtoa_r+0x954>
 800c142:	9d00      	ldr	r5, [sp, #0]
 800c144:	2331      	movs	r3, #49	; 0x31
 800c146:	f805 3b01 	strb.w	r3, [r5], #1
 800c14a:	f10b 0b01 	add.w	fp, fp, #1
 800c14e:	e241      	b.n	800c5d4 <_dtoa_r+0x95c>
 800c150:	07f2      	lsls	r2, r6, #31
 800c152:	d505      	bpl.n	800c160 <_dtoa_r+0x4e8>
 800c154:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c158:	f7f4 fa5e 	bl	8000618 <__aeabi_dmul>
 800c15c:	3501      	adds	r5, #1
 800c15e:	2301      	movs	r3, #1
 800c160:	1076      	asrs	r6, r6, #1
 800c162:	3708      	adds	r7, #8
 800c164:	e773      	b.n	800c04e <_dtoa_r+0x3d6>
 800c166:	2502      	movs	r5, #2
 800c168:	e775      	b.n	800c056 <_dtoa_r+0x3de>
 800c16a:	9e04      	ldr	r6, [sp, #16]
 800c16c:	465f      	mov	r7, fp
 800c16e:	e792      	b.n	800c096 <_dtoa_r+0x41e>
 800c170:	9900      	ldr	r1, [sp, #0]
 800c172:	4b50      	ldr	r3, [pc, #320]	; (800c2b4 <_dtoa_r+0x63c>)
 800c174:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c178:	4431      	add	r1, r6
 800c17a:	9102      	str	r1, [sp, #8]
 800c17c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c17e:	eeb0 9a47 	vmov.f32	s18, s14
 800c182:	eef0 9a67 	vmov.f32	s19, s15
 800c186:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c18a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c18e:	2900      	cmp	r1, #0
 800c190:	d044      	beq.n	800c21c <_dtoa_r+0x5a4>
 800c192:	494e      	ldr	r1, [pc, #312]	; (800c2cc <_dtoa_r+0x654>)
 800c194:	2000      	movs	r0, #0
 800c196:	f7f4 fb69 	bl	800086c <__aeabi_ddiv>
 800c19a:	ec53 2b19 	vmov	r2, r3, d9
 800c19e:	f7f4 f883 	bl	80002a8 <__aeabi_dsub>
 800c1a2:	9d00      	ldr	r5, [sp, #0]
 800c1a4:	ec41 0b19 	vmov	d9, r0, r1
 800c1a8:	4649      	mov	r1, r9
 800c1aa:	4640      	mov	r0, r8
 800c1ac:	f7f4 fce4 	bl	8000b78 <__aeabi_d2iz>
 800c1b0:	4606      	mov	r6, r0
 800c1b2:	f7f4 f9c7 	bl	8000544 <__aeabi_i2d>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	4640      	mov	r0, r8
 800c1bc:	4649      	mov	r1, r9
 800c1be:	f7f4 f873 	bl	80002a8 <__aeabi_dsub>
 800c1c2:	3630      	adds	r6, #48	; 0x30
 800c1c4:	f805 6b01 	strb.w	r6, [r5], #1
 800c1c8:	ec53 2b19 	vmov	r2, r3, d9
 800c1cc:	4680      	mov	r8, r0
 800c1ce:	4689      	mov	r9, r1
 800c1d0:	f7f4 fc94 	bl	8000afc <__aeabi_dcmplt>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	d164      	bne.n	800c2a2 <_dtoa_r+0x62a>
 800c1d8:	4642      	mov	r2, r8
 800c1da:	464b      	mov	r3, r9
 800c1dc:	4937      	ldr	r1, [pc, #220]	; (800c2bc <_dtoa_r+0x644>)
 800c1de:	2000      	movs	r0, #0
 800c1e0:	f7f4 f862 	bl	80002a8 <__aeabi_dsub>
 800c1e4:	ec53 2b19 	vmov	r2, r3, d9
 800c1e8:	f7f4 fc88 	bl	8000afc <__aeabi_dcmplt>
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	f040 80b6 	bne.w	800c35e <_dtoa_r+0x6e6>
 800c1f2:	9b02      	ldr	r3, [sp, #8]
 800c1f4:	429d      	cmp	r5, r3
 800c1f6:	f43f af7c 	beq.w	800c0f2 <_dtoa_r+0x47a>
 800c1fa:	4b31      	ldr	r3, [pc, #196]	; (800c2c0 <_dtoa_r+0x648>)
 800c1fc:	ec51 0b19 	vmov	r0, r1, d9
 800c200:	2200      	movs	r2, #0
 800c202:	f7f4 fa09 	bl	8000618 <__aeabi_dmul>
 800c206:	4b2e      	ldr	r3, [pc, #184]	; (800c2c0 <_dtoa_r+0x648>)
 800c208:	ec41 0b19 	vmov	d9, r0, r1
 800c20c:	2200      	movs	r2, #0
 800c20e:	4640      	mov	r0, r8
 800c210:	4649      	mov	r1, r9
 800c212:	f7f4 fa01 	bl	8000618 <__aeabi_dmul>
 800c216:	4680      	mov	r8, r0
 800c218:	4689      	mov	r9, r1
 800c21a:	e7c5      	b.n	800c1a8 <_dtoa_r+0x530>
 800c21c:	ec51 0b17 	vmov	r0, r1, d7
 800c220:	f7f4 f9fa 	bl	8000618 <__aeabi_dmul>
 800c224:	9b02      	ldr	r3, [sp, #8]
 800c226:	9d00      	ldr	r5, [sp, #0]
 800c228:	930f      	str	r3, [sp, #60]	; 0x3c
 800c22a:	ec41 0b19 	vmov	d9, r0, r1
 800c22e:	4649      	mov	r1, r9
 800c230:	4640      	mov	r0, r8
 800c232:	f7f4 fca1 	bl	8000b78 <__aeabi_d2iz>
 800c236:	4606      	mov	r6, r0
 800c238:	f7f4 f984 	bl	8000544 <__aeabi_i2d>
 800c23c:	3630      	adds	r6, #48	; 0x30
 800c23e:	4602      	mov	r2, r0
 800c240:	460b      	mov	r3, r1
 800c242:	4640      	mov	r0, r8
 800c244:	4649      	mov	r1, r9
 800c246:	f7f4 f82f 	bl	80002a8 <__aeabi_dsub>
 800c24a:	f805 6b01 	strb.w	r6, [r5], #1
 800c24e:	9b02      	ldr	r3, [sp, #8]
 800c250:	429d      	cmp	r5, r3
 800c252:	4680      	mov	r8, r0
 800c254:	4689      	mov	r9, r1
 800c256:	f04f 0200 	mov.w	r2, #0
 800c25a:	d124      	bne.n	800c2a6 <_dtoa_r+0x62e>
 800c25c:	4b1b      	ldr	r3, [pc, #108]	; (800c2cc <_dtoa_r+0x654>)
 800c25e:	ec51 0b19 	vmov	r0, r1, d9
 800c262:	f7f4 f823 	bl	80002ac <__adddf3>
 800c266:	4602      	mov	r2, r0
 800c268:	460b      	mov	r3, r1
 800c26a:	4640      	mov	r0, r8
 800c26c:	4649      	mov	r1, r9
 800c26e:	f7f4 fc63 	bl	8000b38 <__aeabi_dcmpgt>
 800c272:	2800      	cmp	r0, #0
 800c274:	d173      	bne.n	800c35e <_dtoa_r+0x6e6>
 800c276:	ec53 2b19 	vmov	r2, r3, d9
 800c27a:	4914      	ldr	r1, [pc, #80]	; (800c2cc <_dtoa_r+0x654>)
 800c27c:	2000      	movs	r0, #0
 800c27e:	f7f4 f813 	bl	80002a8 <__aeabi_dsub>
 800c282:	4602      	mov	r2, r0
 800c284:	460b      	mov	r3, r1
 800c286:	4640      	mov	r0, r8
 800c288:	4649      	mov	r1, r9
 800c28a:	f7f4 fc37 	bl	8000afc <__aeabi_dcmplt>
 800c28e:	2800      	cmp	r0, #0
 800c290:	f43f af2f 	beq.w	800c0f2 <_dtoa_r+0x47a>
 800c294:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c296:	1e6b      	subs	r3, r5, #1
 800c298:	930f      	str	r3, [sp, #60]	; 0x3c
 800c29a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c29e:	2b30      	cmp	r3, #48	; 0x30
 800c2a0:	d0f8      	beq.n	800c294 <_dtoa_r+0x61c>
 800c2a2:	46bb      	mov	fp, r7
 800c2a4:	e04a      	b.n	800c33c <_dtoa_r+0x6c4>
 800c2a6:	4b06      	ldr	r3, [pc, #24]	; (800c2c0 <_dtoa_r+0x648>)
 800c2a8:	f7f4 f9b6 	bl	8000618 <__aeabi_dmul>
 800c2ac:	4680      	mov	r8, r0
 800c2ae:	4689      	mov	r9, r1
 800c2b0:	e7bd      	b.n	800c22e <_dtoa_r+0x5b6>
 800c2b2:	bf00      	nop
 800c2b4:	0800e7d8 	.word	0x0800e7d8
 800c2b8:	0800e7b0 	.word	0x0800e7b0
 800c2bc:	3ff00000 	.word	0x3ff00000
 800c2c0:	40240000 	.word	0x40240000
 800c2c4:	401c0000 	.word	0x401c0000
 800c2c8:	40140000 	.word	0x40140000
 800c2cc:	3fe00000 	.word	0x3fe00000
 800c2d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c2d4:	9d00      	ldr	r5, [sp, #0]
 800c2d6:	4642      	mov	r2, r8
 800c2d8:	464b      	mov	r3, r9
 800c2da:	4630      	mov	r0, r6
 800c2dc:	4639      	mov	r1, r7
 800c2de:	f7f4 fac5 	bl	800086c <__aeabi_ddiv>
 800c2e2:	f7f4 fc49 	bl	8000b78 <__aeabi_d2iz>
 800c2e6:	9001      	str	r0, [sp, #4]
 800c2e8:	f7f4 f92c 	bl	8000544 <__aeabi_i2d>
 800c2ec:	4642      	mov	r2, r8
 800c2ee:	464b      	mov	r3, r9
 800c2f0:	f7f4 f992 	bl	8000618 <__aeabi_dmul>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	4630      	mov	r0, r6
 800c2fa:	4639      	mov	r1, r7
 800c2fc:	f7f3 ffd4 	bl	80002a8 <__aeabi_dsub>
 800c300:	9e01      	ldr	r6, [sp, #4]
 800c302:	9f04      	ldr	r7, [sp, #16]
 800c304:	3630      	adds	r6, #48	; 0x30
 800c306:	f805 6b01 	strb.w	r6, [r5], #1
 800c30a:	9e00      	ldr	r6, [sp, #0]
 800c30c:	1bae      	subs	r6, r5, r6
 800c30e:	42b7      	cmp	r7, r6
 800c310:	4602      	mov	r2, r0
 800c312:	460b      	mov	r3, r1
 800c314:	d134      	bne.n	800c380 <_dtoa_r+0x708>
 800c316:	f7f3 ffc9 	bl	80002ac <__adddf3>
 800c31a:	4642      	mov	r2, r8
 800c31c:	464b      	mov	r3, r9
 800c31e:	4606      	mov	r6, r0
 800c320:	460f      	mov	r7, r1
 800c322:	f7f4 fc09 	bl	8000b38 <__aeabi_dcmpgt>
 800c326:	b9c8      	cbnz	r0, 800c35c <_dtoa_r+0x6e4>
 800c328:	4642      	mov	r2, r8
 800c32a:	464b      	mov	r3, r9
 800c32c:	4630      	mov	r0, r6
 800c32e:	4639      	mov	r1, r7
 800c330:	f7f4 fbda 	bl	8000ae8 <__aeabi_dcmpeq>
 800c334:	b110      	cbz	r0, 800c33c <_dtoa_r+0x6c4>
 800c336:	9b01      	ldr	r3, [sp, #4]
 800c338:	07db      	lsls	r3, r3, #31
 800c33a:	d40f      	bmi.n	800c35c <_dtoa_r+0x6e4>
 800c33c:	4651      	mov	r1, sl
 800c33e:	4620      	mov	r0, r4
 800c340:	f000 fe82 	bl	800d048 <_Bfree>
 800c344:	2300      	movs	r3, #0
 800c346:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c348:	702b      	strb	r3, [r5, #0]
 800c34a:	f10b 0301 	add.w	r3, fp, #1
 800c34e:	6013      	str	r3, [r2, #0]
 800c350:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c352:	2b00      	cmp	r3, #0
 800c354:	f43f ace2 	beq.w	800bd1c <_dtoa_r+0xa4>
 800c358:	601d      	str	r5, [r3, #0]
 800c35a:	e4df      	b.n	800bd1c <_dtoa_r+0xa4>
 800c35c:	465f      	mov	r7, fp
 800c35e:	462b      	mov	r3, r5
 800c360:	461d      	mov	r5, r3
 800c362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c366:	2a39      	cmp	r2, #57	; 0x39
 800c368:	d106      	bne.n	800c378 <_dtoa_r+0x700>
 800c36a:	9a00      	ldr	r2, [sp, #0]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d1f7      	bne.n	800c360 <_dtoa_r+0x6e8>
 800c370:	9900      	ldr	r1, [sp, #0]
 800c372:	2230      	movs	r2, #48	; 0x30
 800c374:	3701      	adds	r7, #1
 800c376:	700a      	strb	r2, [r1, #0]
 800c378:	781a      	ldrb	r2, [r3, #0]
 800c37a:	3201      	adds	r2, #1
 800c37c:	701a      	strb	r2, [r3, #0]
 800c37e:	e790      	b.n	800c2a2 <_dtoa_r+0x62a>
 800c380:	4ba3      	ldr	r3, [pc, #652]	; (800c610 <_dtoa_r+0x998>)
 800c382:	2200      	movs	r2, #0
 800c384:	f7f4 f948 	bl	8000618 <__aeabi_dmul>
 800c388:	2200      	movs	r2, #0
 800c38a:	2300      	movs	r3, #0
 800c38c:	4606      	mov	r6, r0
 800c38e:	460f      	mov	r7, r1
 800c390:	f7f4 fbaa 	bl	8000ae8 <__aeabi_dcmpeq>
 800c394:	2800      	cmp	r0, #0
 800c396:	d09e      	beq.n	800c2d6 <_dtoa_r+0x65e>
 800c398:	e7d0      	b.n	800c33c <_dtoa_r+0x6c4>
 800c39a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c39c:	2a00      	cmp	r2, #0
 800c39e:	f000 80ca 	beq.w	800c536 <_dtoa_r+0x8be>
 800c3a2:	9a07      	ldr	r2, [sp, #28]
 800c3a4:	2a01      	cmp	r2, #1
 800c3a6:	f300 80ad 	bgt.w	800c504 <_dtoa_r+0x88c>
 800c3aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c3ac:	2a00      	cmp	r2, #0
 800c3ae:	f000 80a5 	beq.w	800c4fc <_dtoa_r+0x884>
 800c3b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c3b6:	9e08      	ldr	r6, [sp, #32]
 800c3b8:	9d05      	ldr	r5, [sp, #20]
 800c3ba:	9a05      	ldr	r2, [sp, #20]
 800c3bc:	441a      	add	r2, r3
 800c3be:	9205      	str	r2, [sp, #20]
 800c3c0:	9a06      	ldr	r2, [sp, #24]
 800c3c2:	2101      	movs	r1, #1
 800c3c4:	441a      	add	r2, r3
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	9206      	str	r2, [sp, #24]
 800c3ca:	f000 ff3d 	bl	800d248 <__i2b>
 800c3ce:	4607      	mov	r7, r0
 800c3d0:	b165      	cbz	r5, 800c3ec <_dtoa_r+0x774>
 800c3d2:	9b06      	ldr	r3, [sp, #24]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	dd09      	ble.n	800c3ec <_dtoa_r+0x774>
 800c3d8:	42ab      	cmp	r3, r5
 800c3da:	9a05      	ldr	r2, [sp, #20]
 800c3dc:	bfa8      	it	ge
 800c3de:	462b      	movge	r3, r5
 800c3e0:	1ad2      	subs	r2, r2, r3
 800c3e2:	9205      	str	r2, [sp, #20]
 800c3e4:	9a06      	ldr	r2, [sp, #24]
 800c3e6:	1aed      	subs	r5, r5, r3
 800c3e8:	1ad3      	subs	r3, r2, r3
 800c3ea:	9306      	str	r3, [sp, #24]
 800c3ec:	9b08      	ldr	r3, [sp, #32]
 800c3ee:	b1f3      	cbz	r3, 800c42e <_dtoa_r+0x7b6>
 800c3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	f000 80a3 	beq.w	800c53e <_dtoa_r+0x8c6>
 800c3f8:	2e00      	cmp	r6, #0
 800c3fa:	dd10      	ble.n	800c41e <_dtoa_r+0x7a6>
 800c3fc:	4639      	mov	r1, r7
 800c3fe:	4632      	mov	r2, r6
 800c400:	4620      	mov	r0, r4
 800c402:	f000 ffe1 	bl	800d3c8 <__pow5mult>
 800c406:	4652      	mov	r2, sl
 800c408:	4601      	mov	r1, r0
 800c40a:	4607      	mov	r7, r0
 800c40c:	4620      	mov	r0, r4
 800c40e:	f000 ff31 	bl	800d274 <__multiply>
 800c412:	4651      	mov	r1, sl
 800c414:	4680      	mov	r8, r0
 800c416:	4620      	mov	r0, r4
 800c418:	f000 fe16 	bl	800d048 <_Bfree>
 800c41c:	46c2      	mov	sl, r8
 800c41e:	9b08      	ldr	r3, [sp, #32]
 800c420:	1b9a      	subs	r2, r3, r6
 800c422:	d004      	beq.n	800c42e <_dtoa_r+0x7b6>
 800c424:	4651      	mov	r1, sl
 800c426:	4620      	mov	r0, r4
 800c428:	f000 ffce 	bl	800d3c8 <__pow5mult>
 800c42c:	4682      	mov	sl, r0
 800c42e:	2101      	movs	r1, #1
 800c430:	4620      	mov	r0, r4
 800c432:	f000 ff09 	bl	800d248 <__i2b>
 800c436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c438:	2b00      	cmp	r3, #0
 800c43a:	4606      	mov	r6, r0
 800c43c:	f340 8081 	ble.w	800c542 <_dtoa_r+0x8ca>
 800c440:	461a      	mov	r2, r3
 800c442:	4601      	mov	r1, r0
 800c444:	4620      	mov	r0, r4
 800c446:	f000 ffbf 	bl	800d3c8 <__pow5mult>
 800c44a:	9b07      	ldr	r3, [sp, #28]
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	4606      	mov	r6, r0
 800c450:	dd7a      	ble.n	800c548 <_dtoa_r+0x8d0>
 800c452:	f04f 0800 	mov.w	r8, #0
 800c456:	6933      	ldr	r3, [r6, #16]
 800c458:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c45c:	6918      	ldr	r0, [r3, #16]
 800c45e:	f000 fea5 	bl	800d1ac <__hi0bits>
 800c462:	f1c0 0020 	rsb	r0, r0, #32
 800c466:	9b06      	ldr	r3, [sp, #24]
 800c468:	4418      	add	r0, r3
 800c46a:	f010 001f 	ands.w	r0, r0, #31
 800c46e:	f000 8094 	beq.w	800c59a <_dtoa_r+0x922>
 800c472:	f1c0 0320 	rsb	r3, r0, #32
 800c476:	2b04      	cmp	r3, #4
 800c478:	f340 8085 	ble.w	800c586 <_dtoa_r+0x90e>
 800c47c:	9b05      	ldr	r3, [sp, #20]
 800c47e:	f1c0 001c 	rsb	r0, r0, #28
 800c482:	4403      	add	r3, r0
 800c484:	9305      	str	r3, [sp, #20]
 800c486:	9b06      	ldr	r3, [sp, #24]
 800c488:	4403      	add	r3, r0
 800c48a:	4405      	add	r5, r0
 800c48c:	9306      	str	r3, [sp, #24]
 800c48e:	9b05      	ldr	r3, [sp, #20]
 800c490:	2b00      	cmp	r3, #0
 800c492:	dd05      	ble.n	800c4a0 <_dtoa_r+0x828>
 800c494:	4651      	mov	r1, sl
 800c496:	461a      	mov	r2, r3
 800c498:	4620      	mov	r0, r4
 800c49a:	f000 ffef 	bl	800d47c <__lshift>
 800c49e:	4682      	mov	sl, r0
 800c4a0:	9b06      	ldr	r3, [sp, #24]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	dd05      	ble.n	800c4b2 <_dtoa_r+0x83a>
 800c4a6:	4631      	mov	r1, r6
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f000 ffe6 	bl	800d47c <__lshift>
 800c4b0:	4606      	mov	r6, r0
 800c4b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d072      	beq.n	800c59e <_dtoa_r+0x926>
 800c4b8:	4631      	mov	r1, r6
 800c4ba:	4650      	mov	r0, sl
 800c4bc:	f001 f84a 	bl	800d554 <__mcmp>
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	da6c      	bge.n	800c59e <_dtoa_r+0x926>
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	4651      	mov	r1, sl
 800c4c8:	220a      	movs	r2, #10
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f000 fdde 	bl	800d08c <__multadd>
 800c4d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c4d6:	4682      	mov	sl, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	f000 81b0 	beq.w	800c83e <_dtoa_r+0xbc6>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	4639      	mov	r1, r7
 800c4e2:	220a      	movs	r2, #10
 800c4e4:	4620      	mov	r0, r4
 800c4e6:	f000 fdd1 	bl	800d08c <__multadd>
 800c4ea:	9b01      	ldr	r3, [sp, #4]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	4607      	mov	r7, r0
 800c4f0:	f300 8096 	bgt.w	800c620 <_dtoa_r+0x9a8>
 800c4f4:	9b07      	ldr	r3, [sp, #28]
 800c4f6:	2b02      	cmp	r3, #2
 800c4f8:	dc59      	bgt.n	800c5ae <_dtoa_r+0x936>
 800c4fa:	e091      	b.n	800c620 <_dtoa_r+0x9a8>
 800c4fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c502:	e758      	b.n	800c3b6 <_dtoa_r+0x73e>
 800c504:	9b04      	ldr	r3, [sp, #16]
 800c506:	1e5e      	subs	r6, r3, #1
 800c508:	9b08      	ldr	r3, [sp, #32]
 800c50a:	42b3      	cmp	r3, r6
 800c50c:	bfbf      	itttt	lt
 800c50e:	9b08      	ldrlt	r3, [sp, #32]
 800c510:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c512:	9608      	strlt	r6, [sp, #32]
 800c514:	1af3      	sublt	r3, r6, r3
 800c516:	bfb4      	ite	lt
 800c518:	18d2      	addlt	r2, r2, r3
 800c51a:	1b9e      	subge	r6, r3, r6
 800c51c:	9b04      	ldr	r3, [sp, #16]
 800c51e:	bfbc      	itt	lt
 800c520:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c522:	2600      	movlt	r6, #0
 800c524:	2b00      	cmp	r3, #0
 800c526:	bfb7      	itett	lt
 800c528:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c52c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c530:	1a9d      	sublt	r5, r3, r2
 800c532:	2300      	movlt	r3, #0
 800c534:	e741      	b.n	800c3ba <_dtoa_r+0x742>
 800c536:	9e08      	ldr	r6, [sp, #32]
 800c538:	9d05      	ldr	r5, [sp, #20]
 800c53a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c53c:	e748      	b.n	800c3d0 <_dtoa_r+0x758>
 800c53e:	9a08      	ldr	r2, [sp, #32]
 800c540:	e770      	b.n	800c424 <_dtoa_r+0x7ac>
 800c542:	9b07      	ldr	r3, [sp, #28]
 800c544:	2b01      	cmp	r3, #1
 800c546:	dc19      	bgt.n	800c57c <_dtoa_r+0x904>
 800c548:	9b02      	ldr	r3, [sp, #8]
 800c54a:	b9bb      	cbnz	r3, 800c57c <_dtoa_r+0x904>
 800c54c:	9b03      	ldr	r3, [sp, #12]
 800c54e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c552:	b99b      	cbnz	r3, 800c57c <_dtoa_r+0x904>
 800c554:	9b03      	ldr	r3, [sp, #12]
 800c556:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c55a:	0d1b      	lsrs	r3, r3, #20
 800c55c:	051b      	lsls	r3, r3, #20
 800c55e:	b183      	cbz	r3, 800c582 <_dtoa_r+0x90a>
 800c560:	9b05      	ldr	r3, [sp, #20]
 800c562:	3301      	adds	r3, #1
 800c564:	9305      	str	r3, [sp, #20]
 800c566:	9b06      	ldr	r3, [sp, #24]
 800c568:	3301      	adds	r3, #1
 800c56a:	9306      	str	r3, [sp, #24]
 800c56c:	f04f 0801 	mov.w	r8, #1
 800c570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c572:	2b00      	cmp	r3, #0
 800c574:	f47f af6f 	bne.w	800c456 <_dtoa_r+0x7de>
 800c578:	2001      	movs	r0, #1
 800c57a:	e774      	b.n	800c466 <_dtoa_r+0x7ee>
 800c57c:	f04f 0800 	mov.w	r8, #0
 800c580:	e7f6      	b.n	800c570 <_dtoa_r+0x8f8>
 800c582:	4698      	mov	r8, r3
 800c584:	e7f4      	b.n	800c570 <_dtoa_r+0x8f8>
 800c586:	d082      	beq.n	800c48e <_dtoa_r+0x816>
 800c588:	9a05      	ldr	r2, [sp, #20]
 800c58a:	331c      	adds	r3, #28
 800c58c:	441a      	add	r2, r3
 800c58e:	9205      	str	r2, [sp, #20]
 800c590:	9a06      	ldr	r2, [sp, #24]
 800c592:	441a      	add	r2, r3
 800c594:	441d      	add	r5, r3
 800c596:	9206      	str	r2, [sp, #24]
 800c598:	e779      	b.n	800c48e <_dtoa_r+0x816>
 800c59a:	4603      	mov	r3, r0
 800c59c:	e7f4      	b.n	800c588 <_dtoa_r+0x910>
 800c59e:	9b04      	ldr	r3, [sp, #16]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	dc37      	bgt.n	800c614 <_dtoa_r+0x99c>
 800c5a4:	9b07      	ldr	r3, [sp, #28]
 800c5a6:	2b02      	cmp	r3, #2
 800c5a8:	dd34      	ble.n	800c614 <_dtoa_r+0x99c>
 800c5aa:	9b04      	ldr	r3, [sp, #16]
 800c5ac:	9301      	str	r3, [sp, #4]
 800c5ae:	9b01      	ldr	r3, [sp, #4]
 800c5b0:	b963      	cbnz	r3, 800c5cc <_dtoa_r+0x954>
 800c5b2:	4631      	mov	r1, r6
 800c5b4:	2205      	movs	r2, #5
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	f000 fd68 	bl	800d08c <__multadd>
 800c5bc:	4601      	mov	r1, r0
 800c5be:	4606      	mov	r6, r0
 800c5c0:	4650      	mov	r0, sl
 800c5c2:	f000 ffc7 	bl	800d554 <__mcmp>
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	f73f adbb 	bgt.w	800c142 <_dtoa_r+0x4ca>
 800c5cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ce:	9d00      	ldr	r5, [sp, #0]
 800c5d0:	ea6f 0b03 	mvn.w	fp, r3
 800c5d4:	f04f 0800 	mov.w	r8, #0
 800c5d8:	4631      	mov	r1, r6
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f000 fd34 	bl	800d048 <_Bfree>
 800c5e0:	2f00      	cmp	r7, #0
 800c5e2:	f43f aeab 	beq.w	800c33c <_dtoa_r+0x6c4>
 800c5e6:	f1b8 0f00 	cmp.w	r8, #0
 800c5ea:	d005      	beq.n	800c5f8 <_dtoa_r+0x980>
 800c5ec:	45b8      	cmp	r8, r7
 800c5ee:	d003      	beq.n	800c5f8 <_dtoa_r+0x980>
 800c5f0:	4641      	mov	r1, r8
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	f000 fd28 	bl	800d048 <_Bfree>
 800c5f8:	4639      	mov	r1, r7
 800c5fa:	4620      	mov	r0, r4
 800c5fc:	f000 fd24 	bl	800d048 <_Bfree>
 800c600:	e69c      	b.n	800c33c <_dtoa_r+0x6c4>
 800c602:	2600      	movs	r6, #0
 800c604:	4637      	mov	r7, r6
 800c606:	e7e1      	b.n	800c5cc <_dtoa_r+0x954>
 800c608:	46bb      	mov	fp, r7
 800c60a:	4637      	mov	r7, r6
 800c60c:	e599      	b.n	800c142 <_dtoa_r+0x4ca>
 800c60e:	bf00      	nop
 800c610:	40240000 	.word	0x40240000
 800c614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c616:	2b00      	cmp	r3, #0
 800c618:	f000 80c8 	beq.w	800c7ac <_dtoa_r+0xb34>
 800c61c:	9b04      	ldr	r3, [sp, #16]
 800c61e:	9301      	str	r3, [sp, #4]
 800c620:	2d00      	cmp	r5, #0
 800c622:	dd05      	ble.n	800c630 <_dtoa_r+0x9b8>
 800c624:	4639      	mov	r1, r7
 800c626:	462a      	mov	r2, r5
 800c628:	4620      	mov	r0, r4
 800c62a:	f000 ff27 	bl	800d47c <__lshift>
 800c62e:	4607      	mov	r7, r0
 800c630:	f1b8 0f00 	cmp.w	r8, #0
 800c634:	d05b      	beq.n	800c6ee <_dtoa_r+0xa76>
 800c636:	6879      	ldr	r1, [r7, #4]
 800c638:	4620      	mov	r0, r4
 800c63a:	f000 fcc5 	bl	800cfc8 <_Balloc>
 800c63e:	4605      	mov	r5, r0
 800c640:	b928      	cbnz	r0, 800c64e <_dtoa_r+0x9d6>
 800c642:	4b83      	ldr	r3, [pc, #524]	; (800c850 <_dtoa_r+0xbd8>)
 800c644:	4602      	mov	r2, r0
 800c646:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c64a:	f7ff bb2e 	b.w	800bcaa <_dtoa_r+0x32>
 800c64e:	693a      	ldr	r2, [r7, #16]
 800c650:	3202      	adds	r2, #2
 800c652:	0092      	lsls	r2, r2, #2
 800c654:	f107 010c 	add.w	r1, r7, #12
 800c658:	300c      	adds	r0, #12
 800c65a:	f7ff fa6f 	bl	800bb3c <memcpy>
 800c65e:	2201      	movs	r2, #1
 800c660:	4629      	mov	r1, r5
 800c662:	4620      	mov	r0, r4
 800c664:	f000 ff0a 	bl	800d47c <__lshift>
 800c668:	9b00      	ldr	r3, [sp, #0]
 800c66a:	3301      	adds	r3, #1
 800c66c:	9304      	str	r3, [sp, #16]
 800c66e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c672:	4413      	add	r3, r2
 800c674:	9308      	str	r3, [sp, #32]
 800c676:	9b02      	ldr	r3, [sp, #8]
 800c678:	f003 0301 	and.w	r3, r3, #1
 800c67c:	46b8      	mov	r8, r7
 800c67e:	9306      	str	r3, [sp, #24]
 800c680:	4607      	mov	r7, r0
 800c682:	9b04      	ldr	r3, [sp, #16]
 800c684:	4631      	mov	r1, r6
 800c686:	3b01      	subs	r3, #1
 800c688:	4650      	mov	r0, sl
 800c68a:	9301      	str	r3, [sp, #4]
 800c68c:	f7ff fa6c 	bl	800bb68 <quorem>
 800c690:	4641      	mov	r1, r8
 800c692:	9002      	str	r0, [sp, #8]
 800c694:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c698:	4650      	mov	r0, sl
 800c69a:	f000 ff5b 	bl	800d554 <__mcmp>
 800c69e:	463a      	mov	r2, r7
 800c6a0:	9005      	str	r0, [sp, #20]
 800c6a2:	4631      	mov	r1, r6
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	f000 ff71 	bl	800d58c <__mdiff>
 800c6aa:	68c2      	ldr	r2, [r0, #12]
 800c6ac:	4605      	mov	r5, r0
 800c6ae:	bb02      	cbnz	r2, 800c6f2 <_dtoa_r+0xa7a>
 800c6b0:	4601      	mov	r1, r0
 800c6b2:	4650      	mov	r0, sl
 800c6b4:	f000 ff4e 	bl	800d554 <__mcmp>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	4629      	mov	r1, r5
 800c6bc:	4620      	mov	r0, r4
 800c6be:	9209      	str	r2, [sp, #36]	; 0x24
 800c6c0:	f000 fcc2 	bl	800d048 <_Bfree>
 800c6c4:	9b07      	ldr	r3, [sp, #28]
 800c6c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6c8:	9d04      	ldr	r5, [sp, #16]
 800c6ca:	ea43 0102 	orr.w	r1, r3, r2
 800c6ce:	9b06      	ldr	r3, [sp, #24]
 800c6d0:	4319      	orrs	r1, r3
 800c6d2:	d110      	bne.n	800c6f6 <_dtoa_r+0xa7e>
 800c6d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c6d8:	d029      	beq.n	800c72e <_dtoa_r+0xab6>
 800c6da:	9b05      	ldr	r3, [sp, #20]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	dd02      	ble.n	800c6e6 <_dtoa_r+0xa6e>
 800c6e0:	9b02      	ldr	r3, [sp, #8]
 800c6e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c6e6:	9b01      	ldr	r3, [sp, #4]
 800c6e8:	f883 9000 	strb.w	r9, [r3]
 800c6ec:	e774      	b.n	800c5d8 <_dtoa_r+0x960>
 800c6ee:	4638      	mov	r0, r7
 800c6f0:	e7ba      	b.n	800c668 <_dtoa_r+0x9f0>
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	e7e1      	b.n	800c6ba <_dtoa_r+0xa42>
 800c6f6:	9b05      	ldr	r3, [sp, #20]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	db04      	blt.n	800c706 <_dtoa_r+0xa8e>
 800c6fc:	9907      	ldr	r1, [sp, #28]
 800c6fe:	430b      	orrs	r3, r1
 800c700:	9906      	ldr	r1, [sp, #24]
 800c702:	430b      	orrs	r3, r1
 800c704:	d120      	bne.n	800c748 <_dtoa_r+0xad0>
 800c706:	2a00      	cmp	r2, #0
 800c708:	dded      	ble.n	800c6e6 <_dtoa_r+0xa6e>
 800c70a:	4651      	mov	r1, sl
 800c70c:	2201      	movs	r2, #1
 800c70e:	4620      	mov	r0, r4
 800c710:	f000 feb4 	bl	800d47c <__lshift>
 800c714:	4631      	mov	r1, r6
 800c716:	4682      	mov	sl, r0
 800c718:	f000 ff1c 	bl	800d554 <__mcmp>
 800c71c:	2800      	cmp	r0, #0
 800c71e:	dc03      	bgt.n	800c728 <_dtoa_r+0xab0>
 800c720:	d1e1      	bne.n	800c6e6 <_dtoa_r+0xa6e>
 800c722:	f019 0f01 	tst.w	r9, #1
 800c726:	d0de      	beq.n	800c6e6 <_dtoa_r+0xa6e>
 800c728:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c72c:	d1d8      	bne.n	800c6e0 <_dtoa_r+0xa68>
 800c72e:	9a01      	ldr	r2, [sp, #4]
 800c730:	2339      	movs	r3, #57	; 0x39
 800c732:	7013      	strb	r3, [r2, #0]
 800c734:	462b      	mov	r3, r5
 800c736:	461d      	mov	r5, r3
 800c738:	3b01      	subs	r3, #1
 800c73a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c73e:	2a39      	cmp	r2, #57	; 0x39
 800c740:	d06c      	beq.n	800c81c <_dtoa_r+0xba4>
 800c742:	3201      	adds	r2, #1
 800c744:	701a      	strb	r2, [r3, #0]
 800c746:	e747      	b.n	800c5d8 <_dtoa_r+0x960>
 800c748:	2a00      	cmp	r2, #0
 800c74a:	dd07      	ble.n	800c75c <_dtoa_r+0xae4>
 800c74c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c750:	d0ed      	beq.n	800c72e <_dtoa_r+0xab6>
 800c752:	9a01      	ldr	r2, [sp, #4]
 800c754:	f109 0301 	add.w	r3, r9, #1
 800c758:	7013      	strb	r3, [r2, #0]
 800c75a:	e73d      	b.n	800c5d8 <_dtoa_r+0x960>
 800c75c:	9b04      	ldr	r3, [sp, #16]
 800c75e:	9a08      	ldr	r2, [sp, #32]
 800c760:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c764:	4293      	cmp	r3, r2
 800c766:	d043      	beq.n	800c7f0 <_dtoa_r+0xb78>
 800c768:	4651      	mov	r1, sl
 800c76a:	2300      	movs	r3, #0
 800c76c:	220a      	movs	r2, #10
 800c76e:	4620      	mov	r0, r4
 800c770:	f000 fc8c 	bl	800d08c <__multadd>
 800c774:	45b8      	cmp	r8, r7
 800c776:	4682      	mov	sl, r0
 800c778:	f04f 0300 	mov.w	r3, #0
 800c77c:	f04f 020a 	mov.w	r2, #10
 800c780:	4641      	mov	r1, r8
 800c782:	4620      	mov	r0, r4
 800c784:	d107      	bne.n	800c796 <_dtoa_r+0xb1e>
 800c786:	f000 fc81 	bl	800d08c <__multadd>
 800c78a:	4680      	mov	r8, r0
 800c78c:	4607      	mov	r7, r0
 800c78e:	9b04      	ldr	r3, [sp, #16]
 800c790:	3301      	adds	r3, #1
 800c792:	9304      	str	r3, [sp, #16]
 800c794:	e775      	b.n	800c682 <_dtoa_r+0xa0a>
 800c796:	f000 fc79 	bl	800d08c <__multadd>
 800c79a:	4639      	mov	r1, r7
 800c79c:	4680      	mov	r8, r0
 800c79e:	2300      	movs	r3, #0
 800c7a0:	220a      	movs	r2, #10
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	f000 fc72 	bl	800d08c <__multadd>
 800c7a8:	4607      	mov	r7, r0
 800c7aa:	e7f0      	b.n	800c78e <_dtoa_r+0xb16>
 800c7ac:	9b04      	ldr	r3, [sp, #16]
 800c7ae:	9301      	str	r3, [sp, #4]
 800c7b0:	9d00      	ldr	r5, [sp, #0]
 800c7b2:	4631      	mov	r1, r6
 800c7b4:	4650      	mov	r0, sl
 800c7b6:	f7ff f9d7 	bl	800bb68 <quorem>
 800c7ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c7be:	9b00      	ldr	r3, [sp, #0]
 800c7c0:	f805 9b01 	strb.w	r9, [r5], #1
 800c7c4:	1aea      	subs	r2, r5, r3
 800c7c6:	9b01      	ldr	r3, [sp, #4]
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	dd07      	ble.n	800c7dc <_dtoa_r+0xb64>
 800c7cc:	4651      	mov	r1, sl
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	220a      	movs	r2, #10
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f000 fc5a 	bl	800d08c <__multadd>
 800c7d8:	4682      	mov	sl, r0
 800c7da:	e7ea      	b.n	800c7b2 <_dtoa_r+0xb3a>
 800c7dc:	9b01      	ldr	r3, [sp, #4]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	bfc8      	it	gt
 800c7e2:	461d      	movgt	r5, r3
 800c7e4:	9b00      	ldr	r3, [sp, #0]
 800c7e6:	bfd8      	it	le
 800c7e8:	2501      	movle	r5, #1
 800c7ea:	441d      	add	r5, r3
 800c7ec:	f04f 0800 	mov.w	r8, #0
 800c7f0:	4651      	mov	r1, sl
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	f000 fe41 	bl	800d47c <__lshift>
 800c7fa:	4631      	mov	r1, r6
 800c7fc:	4682      	mov	sl, r0
 800c7fe:	f000 fea9 	bl	800d554 <__mcmp>
 800c802:	2800      	cmp	r0, #0
 800c804:	dc96      	bgt.n	800c734 <_dtoa_r+0xabc>
 800c806:	d102      	bne.n	800c80e <_dtoa_r+0xb96>
 800c808:	f019 0f01 	tst.w	r9, #1
 800c80c:	d192      	bne.n	800c734 <_dtoa_r+0xabc>
 800c80e:	462b      	mov	r3, r5
 800c810:	461d      	mov	r5, r3
 800c812:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c816:	2a30      	cmp	r2, #48	; 0x30
 800c818:	d0fa      	beq.n	800c810 <_dtoa_r+0xb98>
 800c81a:	e6dd      	b.n	800c5d8 <_dtoa_r+0x960>
 800c81c:	9a00      	ldr	r2, [sp, #0]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d189      	bne.n	800c736 <_dtoa_r+0xabe>
 800c822:	f10b 0b01 	add.w	fp, fp, #1
 800c826:	2331      	movs	r3, #49	; 0x31
 800c828:	e796      	b.n	800c758 <_dtoa_r+0xae0>
 800c82a:	4b0a      	ldr	r3, [pc, #40]	; (800c854 <_dtoa_r+0xbdc>)
 800c82c:	f7ff ba99 	b.w	800bd62 <_dtoa_r+0xea>
 800c830:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c832:	2b00      	cmp	r3, #0
 800c834:	f47f aa6d 	bne.w	800bd12 <_dtoa_r+0x9a>
 800c838:	4b07      	ldr	r3, [pc, #28]	; (800c858 <_dtoa_r+0xbe0>)
 800c83a:	f7ff ba92 	b.w	800bd62 <_dtoa_r+0xea>
 800c83e:	9b01      	ldr	r3, [sp, #4]
 800c840:	2b00      	cmp	r3, #0
 800c842:	dcb5      	bgt.n	800c7b0 <_dtoa_r+0xb38>
 800c844:	9b07      	ldr	r3, [sp, #28]
 800c846:	2b02      	cmp	r3, #2
 800c848:	f73f aeb1 	bgt.w	800c5ae <_dtoa_r+0x936>
 800c84c:	e7b0      	b.n	800c7b0 <_dtoa_r+0xb38>
 800c84e:	bf00      	nop
 800c850:	0800e6e1 	.word	0x0800e6e1
 800c854:	0800e639 	.word	0x0800e639
 800c858:	0800e665 	.word	0x0800e665

0800c85c <_free_r>:
 800c85c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c85e:	2900      	cmp	r1, #0
 800c860:	d044      	beq.n	800c8ec <_free_r+0x90>
 800c862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c866:	9001      	str	r0, [sp, #4]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	f1a1 0404 	sub.w	r4, r1, #4
 800c86e:	bfb8      	it	lt
 800c870:	18e4      	addlt	r4, r4, r3
 800c872:	f7fd fced 	bl	800a250 <__malloc_lock>
 800c876:	4a1e      	ldr	r2, [pc, #120]	; (800c8f0 <_free_r+0x94>)
 800c878:	9801      	ldr	r0, [sp, #4]
 800c87a:	6813      	ldr	r3, [r2, #0]
 800c87c:	b933      	cbnz	r3, 800c88c <_free_r+0x30>
 800c87e:	6063      	str	r3, [r4, #4]
 800c880:	6014      	str	r4, [r2, #0]
 800c882:	b003      	add	sp, #12
 800c884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c888:	f7fd bce8 	b.w	800a25c <__malloc_unlock>
 800c88c:	42a3      	cmp	r3, r4
 800c88e:	d908      	bls.n	800c8a2 <_free_r+0x46>
 800c890:	6825      	ldr	r5, [r4, #0]
 800c892:	1961      	adds	r1, r4, r5
 800c894:	428b      	cmp	r3, r1
 800c896:	bf01      	itttt	eq
 800c898:	6819      	ldreq	r1, [r3, #0]
 800c89a:	685b      	ldreq	r3, [r3, #4]
 800c89c:	1949      	addeq	r1, r1, r5
 800c89e:	6021      	streq	r1, [r4, #0]
 800c8a0:	e7ed      	b.n	800c87e <_free_r+0x22>
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	b10b      	cbz	r3, 800c8ac <_free_r+0x50>
 800c8a8:	42a3      	cmp	r3, r4
 800c8aa:	d9fa      	bls.n	800c8a2 <_free_r+0x46>
 800c8ac:	6811      	ldr	r1, [r2, #0]
 800c8ae:	1855      	adds	r5, r2, r1
 800c8b0:	42a5      	cmp	r5, r4
 800c8b2:	d10b      	bne.n	800c8cc <_free_r+0x70>
 800c8b4:	6824      	ldr	r4, [r4, #0]
 800c8b6:	4421      	add	r1, r4
 800c8b8:	1854      	adds	r4, r2, r1
 800c8ba:	42a3      	cmp	r3, r4
 800c8bc:	6011      	str	r1, [r2, #0]
 800c8be:	d1e0      	bne.n	800c882 <_free_r+0x26>
 800c8c0:	681c      	ldr	r4, [r3, #0]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	6053      	str	r3, [r2, #4]
 800c8c6:	440c      	add	r4, r1
 800c8c8:	6014      	str	r4, [r2, #0]
 800c8ca:	e7da      	b.n	800c882 <_free_r+0x26>
 800c8cc:	d902      	bls.n	800c8d4 <_free_r+0x78>
 800c8ce:	230c      	movs	r3, #12
 800c8d0:	6003      	str	r3, [r0, #0]
 800c8d2:	e7d6      	b.n	800c882 <_free_r+0x26>
 800c8d4:	6825      	ldr	r5, [r4, #0]
 800c8d6:	1961      	adds	r1, r4, r5
 800c8d8:	428b      	cmp	r3, r1
 800c8da:	bf04      	itt	eq
 800c8dc:	6819      	ldreq	r1, [r3, #0]
 800c8de:	685b      	ldreq	r3, [r3, #4]
 800c8e0:	6063      	str	r3, [r4, #4]
 800c8e2:	bf04      	itt	eq
 800c8e4:	1949      	addeq	r1, r1, r5
 800c8e6:	6021      	streq	r1, [r4, #0]
 800c8e8:	6054      	str	r4, [r2, #4]
 800c8ea:	e7ca      	b.n	800c882 <_free_r+0x26>
 800c8ec:	b003      	add	sp, #12
 800c8ee:	bd30      	pop	{r4, r5, pc}
 800c8f0:	20000a40 	.word	0x20000a40

0800c8f4 <rshift>:
 800c8f4:	6903      	ldr	r3, [r0, #16]
 800c8f6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c8fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8fe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c902:	f100 0414 	add.w	r4, r0, #20
 800c906:	dd45      	ble.n	800c994 <rshift+0xa0>
 800c908:	f011 011f 	ands.w	r1, r1, #31
 800c90c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c910:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c914:	d10c      	bne.n	800c930 <rshift+0x3c>
 800c916:	f100 0710 	add.w	r7, r0, #16
 800c91a:	4629      	mov	r1, r5
 800c91c:	42b1      	cmp	r1, r6
 800c91e:	d334      	bcc.n	800c98a <rshift+0x96>
 800c920:	1a9b      	subs	r3, r3, r2
 800c922:	009b      	lsls	r3, r3, #2
 800c924:	1eea      	subs	r2, r5, #3
 800c926:	4296      	cmp	r6, r2
 800c928:	bf38      	it	cc
 800c92a:	2300      	movcc	r3, #0
 800c92c:	4423      	add	r3, r4
 800c92e:	e015      	b.n	800c95c <rshift+0x68>
 800c930:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c934:	f1c1 0820 	rsb	r8, r1, #32
 800c938:	40cf      	lsrs	r7, r1
 800c93a:	f105 0e04 	add.w	lr, r5, #4
 800c93e:	46a1      	mov	r9, r4
 800c940:	4576      	cmp	r6, lr
 800c942:	46f4      	mov	ip, lr
 800c944:	d815      	bhi.n	800c972 <rshift+0x7e>
 800c946:	1a9a      	subs	r2, r3, r2
 800c948:	0092      	lsls	r2, r2, #2
 800c94a:	3a04      	subs	r2, #4
 800c94c:	3501      	adds	r5, #1
 800c94e:	42ae      	cmp	r6, r5
 800c950:	bf38      	it	cc
 800c952:	2200      	movcc	r2, #0
 800c954:	18a3      	adds	r3, r4, r2
 800c956:	50a7      	str	r7, [r4, r2]
 800c958:	b107      	cbz	r7, 800c95c <rshift+0x68>
 800c95a:	3304      	adds	r3, #4
 800c95c:	1b1a      	subs	r2, r3, r4
 800c95e:	42a3      	cmp	r3, r4
 800c960:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c964:	bf08      	it	eq
 800c966:	2300      	moveq	r3, #0
 800c968:	6102      	str	r2, [r0, #16]
 800c96a:	bf08      	it	eq
 800c96c:	6143      	streq	r3, [r0, #20]
 800c96e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c972:	f8dc c000 	ldr.w	ip, [ip]
 800c976:	fa0c fc08 	lsl.w	ip, ip, r8
 800c97a:	ea4c 0707 	orr.w	r7, ip, r7
 800c97e:	f849 7b04 	str.w	r7, [r9], #4
 800c982:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c986:	40cf      	lsrs	r7, r1
 800c988:	e7da      	b.n	800c940 <rshift+0x4c>
 800c98a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c98e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c992:	e7c3      	b.n	800c91c <rshift+0x28>
 800c994:	4623      	mov	r3, r4
 800c996:	e7e1      	b.n	800c95c <rshift+0x68>

0800c998 <__hexdig_fun>:
 800c998:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c99c:	2b09      	cmp	r3, #9
 800c99e:	d802      	bhi.n	800c9a6 <__hexdig_fun+0xe>
 800c9a0:	3820      	subs	r0, #32
 800c9a2:	b2c0      	uxtb	r0, r0
 800c9a4:	4770      	bx	lr
 800c9a6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c9aa:	2b05      	cmp	r3, #5
 800c9ac:	d801      	bhi.n	800c9b2 <__hexdig_fun+0x1a>
 800c9ae:	3847      	subs	r0, #71	; 0x47
 800c9b0:	e7f7      	b.n	800c9a2 <__hexdig_fun+0xa>
 800c9b2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c9b6:	2b05      	cmp	r3, #5
 800c9b8:	d801      	bhi.n	800c9be <__hexdig_fun+0x26>
 800c9ba:	3827      	subs	r0, #39	; 0x27
 800c9bc:	e7f1      	b.n	800c9a2 <__hexdig_fun+0xa>
 800c9be:	2000      	movs	r0, #0
 800c9c0:	4770      	bx	lr
	...

0800c9c4 <__gethex>:
 800c9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c8:	4617      	mov	r7, r2
 800c9ca:	680a      	ldr	r2, [r1, #0]
 800c9cc:	b085      	sub	sp, #20
 800c9ce:	f102 0b02 	add.w	fp, r2, #2
 800c9d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c9d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c9da:	4681      	mov	r9, r0
 800c9dc:	468a      	mov	sl, r1
 800c9de:	9302      	str	r3, [sp, #8]
 800c9e0:	32fe      	adds	r2, #254	; 0xfe
 800c9e2:	eb02 030b 	add.w	r3, r2, fp
 800c9e6:	46d8      	mov	r8, fp
 800c9e8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c9ec:	9301      	str	r3, [sp, #4]
 800c9ee:	2830      	cmp	r0, #48	; 0x30
 800c9f0:	d0f7      	beq.n	800c9e2 <__gethex+0x1e>
 800c9f2:	f7ff ffd1 	bl	800c998 <__hexdig_fun>
 800c9f6:	4604      	mov	r4, r0
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	d138      	bne.n	800ca6e <__gethex+0xaa>
 800c9fc:	49a7      	ldr	r1, [pc, #668]	; (800cc9c <__gethex+0x2d8>)
 800c9fe:	2201      	movs	r2, #1
 800ca00:	4640      	mov	r0, r8
 800ca02:	f7ff f802 	bl	800ba0a <strncmp>
 800ca06:	4606      	mov	r6, r0
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	d169      	bne.n	800cae0 <__gethex+0x11c>
 800ca0c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800ca10:	465d      	mov	r5, fp
 800ca12:	f7ff ffc1 	bl	800c998 <__hexdig_fun>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	d064      	beq.n	800cae4 <__gethex+0x120>
 800ca1a:	465a      	mov	r2, fp
 800ca1c:	7810      	ldrb	r0, [r2, #0]
 800ca1e:	2830      	cmp	r0, #48	; 0x30
 800ca20:	4690      	mov	r8, r2
 800ca22:	f102 0201 	add.w	r2, r2, #1
 800ca26:	d0f9      	beq.n	800ca1c <__gethex+0x58>
 800ca28:	f7ff ffb6 	bl	800c998 <__hexdig_fun>
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	fab0 f480 	clz	r4, r0
 800ca32:	0964      	lsrs	r4, r4, #5
 800ca34:	465e      	mov	r6, fp
 800ca36:	9301      	str	r3, [sp, #4]
 800ca38:	4642      	mov	r2, r8
 800ca3a:	4615      	mov	r5, r2
 800ca3c:	3201      	adds	r2, #1
 800ca3e:	7828      	ldrb	r0, [r5, #0]
 800ca40:	f7ff ffaa 	bl	800c998 <__hexdig_fun>
 800ca44:	2800      	cmp	r0, #0
 800ca46:	d1f8      	bne.n	800ca3a <__gethex+0x76>
 800ca48:	4994      	ldr	r1, [pc, #592]	; (800cc9c <__gethex+0x2d8>)
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	4628      	mov	r0, r5
 800ca4e:	f7fe ffdc 	bl	800ba0a <strncmp>
 800ca52:	b978      	cbnz	r0, 800ca74 <__gethex+0xb0>
 800ca54:	b946      	cbnz	r6, 800ca68 <__gethex+0xa4>
 800ca56:	1c6e      	adds	r6, r5, #1
 800ca58:	4632      	mov	r2, r6
 800ca5a:	4615      	mov	r5, r2
 800ca5c:	3201      	adds	r2, #1
 800ca5e:	7828      	ldrb	r0, [r5, #0]
 800ca60:	f7ff ff9a 	bl	800c998 <__hexdig_fun>
 800ca64:	2800      	cmp	r0, #0
 800ca66:	d1f8      	bne.n	800ca5a <__gethex+0x96>
 800ca68:	1b73      	subs	r3, r6, r5
 800ca6a:	009e      	lsls	r6, r3, #2
 800ca6c:	e004      	b.n	800ca78 <__gethex+0xb4>
 800ca6e:	2400      	movs	r4, #0
 800ca70:	4626      	mov	r6, r4
 800ca72:	e7e1      	b.n	800ca38 <__gethex+0x74>
 800ca74:	2e00      	cmp	r6, #0
 800ca76:	d1f7      	bne.n	800ca68 <__gethex+0xa4>
 800ca78:	782b      	ldrb	r3, [r5, #0]
 800ca7a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ca7e:	2b50      	cmp	r3, #80	; 0x50
 800ca80:	d13d      	bne.n	800cafe <__gethex+0x13a>
 800ca82:	786b      	ldrb	r3, [r5, #1]
 800ca84:	2b2b      	cmp	r3, #43	; 0x2b
 800ca86:	d02f      	beq.n	800cae8 <__gethex+0x124>
 800ca88:	2b2d      	cmp	r3, #45	; 0x2d
 800ca8a:	d031      	beq.n	800caf0 <__gethex+0x12c>
 800ca8c:	1c69      	adds	r1, r5, #1
 800ca8e:	f04f 0b00 	mov.w	fp, #0
 800ca92:	7808      	ldrb	r0, [r1, #0]
 800ca94:	f7ff ff80 	bl	800c998 <__hexdig_fun>
 800ca98:	1e42      	subs	r2, r0, #1
 800ca9a:	b2d2      	uxtb	r2, r2
 800ca9c:	2a18      	cmp	r2, #24
 800ca9e:	d82e      	bhi.n	800cafe <__gethex+0x13a>
 800caa0:	f1a0 0210 	sub.w	r2, r0, #16
 800caa4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800caa8:	f7ff ff76 	bl	800c998 <__hexdig_fun>
 800caac:	f100 3cff 	add.w	ip, r0, #4294967295
 800cab0:	fa5f fc8c 	uxtb.w	ip, ip
 800cab4:	f1bc 0f18 	cmp.w	ip, #24
 800cab8:	d91d      	bls.n	800caf6 <__gethex+0x132>
 800caba:	f1bb 0f00 	cmp.w	fp, #0
 800cabe:	d000      	beq.n	800cac2 <__gethex+0xfe>
 800cac0:	4252      	negs	r2, r2
 800cac2:	4416      	add	r6, r2
 800cac4:	f8ca 1000 	str.w	r1, [sl]
 800cac8:	b1dc      	cbz	r4, 800cb02 <__gethex+0x13e>
 800caca:	9b01      	ldr	r3, [sp, #4]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	bf14      	ite	ne
 800cad0:	f04f 0800 	movne.w	r8, #0
 800cad4:	f04f 0806 	moveq.w	r8, #6
 800cad8:	4640      	mov	r0, r8
 800cada:	b005      	add	sp, #20
 800cadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae0:	4645      	mov	r5, r8
 800cae2:	4626      	mov	r6, r4
 800cae4:	2401      	movs	r4, #1
 800cae6:	e7c7      	b.n	800ca78 <__gethex+0xb4>
 800cae8:	f04f 0b00 	mov.w	fp, #0
 800caec:	1ca9      	adds	r1, r5, #2
 800caee:	e7d0      	b.n	800ca92 <__gethex+0xce>
 800caf0:	f04f 0b01 	mov.w	fp, #1
 800caf4:	e7fa      	b.n	800caec <__gethex+0x128>
 800caf6:	230a      	movs	r3, #10
 800caf8:	fb03 0002 	mla	r0, r3, r2, r0
 800cafc:	e7d0      	b.n	800caa0 <__gethex+0xdc>
 800cafe:	4629      	mov	r1, r5
 800cb00:	e7e0      	b.n	800cac4 <__gethex+0x100>
 800cb02:	eba5 0308 	sub.w	r3, r5, r8
 800cb06:	3b01      	subs	r3, #1
 800cb08:	4621      	mov	r1, r4
 800cb0a:	2b07      	cmp	r3, #7
 800cb0c:	dc0a      	bgt.n	800cb24 <__gethex+0x160>
 800cb0e:	4648      	mov	r0, r9
 800cb10:	f000 fa5a 	bl	800cfc8 <_Balloc>
 800cb14:	4604      	mov	r4, r0
 800cb16:	b940      	cbnz	r0, 800cb2a <__gethex+0x166>
 800cb18:	4b61      	ldr	r3, [pc, #388]	; (800cca0 <__gethex+0x2dc>)
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	21e4      	movs	r1, #228	; 0xe4
 800cb1e:	4861      	ldr	r0, [pc, #388]	; (800cca4 <__gethex+0x2e0>)
 800cb20:	f001 f934 	bl	800dd8c <__assert_func>
 800cb24:	3101      	adds	r1, #1
 800cb26:	105b      	asrs	r3, r3, #1
 800cb28:	e7ef      	b.n	800cb0a <__gethex+0x146>
 800cb2a:	f100 0a14 	add.w	sl, r0, #20
 800cb2e:	2300      	movs	r3, #0
 800cb30:	495a      	ldr	r1, [pc, #360]	; (800cc9c <__gethex+0x2d8>)
 800cb32:	f8cd a004 	str.w	sl, [sp, #4]
 800cb36:	469b      	mov	fp, r3
 800cb38:	45a8      	cmp	r8, r5
 800cb3a:	d342      	bcc.n	800cbc2 <__gethex+0x1fe>
 800cb3c:	9801      	ldr	r0, [sp, #4]
 800cb3e:	f840 bb04 	str.w	fp, [r0], #4
 800cb42:	eba0 000a 	sub.w	r0, r0, sl
 800cb46:	1080      	asrs	r0, r0, #2
 800cb48:	6120      	str	r0, [r4, #16]
 800cb4a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800cb4e:	4658      	mov	r0, fp
 800cb50:	f000 fb2c 	bl	800d1ac <__hi0bits>
 800cb54:	683d      	ldr	r5, [r7, #0]
 800cb56:	eba8 0000 	sub.w	r0, r8, r0
 800cb5a:	42a8      	cmp	r0, r5
 800cb5c:	dd59      	ble.n	800cc12 <__gethex+0x24e>
 800cb5e:	eba0 0805 	sub.w	r8, r0, r5
 800cb62:	4641      	mov	r1, r8
 800cb64:	4620      	mov	r0, r4
 800cb66:	f000 febb 	bl	800d8e0 <__any_on>
 800cb6a:	4683      	mov	fp, r0
 800cb6c:	b1b8      	cbz	r0, 800cb9e <__gethex+0x1da>
 800cb6e:	f108 33ff 	add.w	r3, r8, #4294967295
 800cb72:	1159      	asrs	r1, r3, #5
 800cb74:	f003 021f 	and.w	r2, r3, #31
 800cb78:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cb7c:	f04f 0b01 	mov.w	fp, #1
 800cb80:	fa0b f202 	lsl.w	r2, fp, r2
 800cb84:	420a      	tst	r2, r1
 800cb86:	d00a      	beq.n	800cb9e <__gethex+0x1da>
 800cb88:	455b      	cmp	r3, fp
 800cb8a:	dd06      	ble.n	800cb9a <__gethex+0x1d6>
 800cb8c:	f1a8 0102 	sub.w	r1, r8, #2
 800cb90:	4620      	mov	r0, r4
 800cb92:	f000 fea5 	bl	800d8e0 <__any_on>
 800cb96:	2800      	cmp	r0, #0
 800cb98:	d138      	bne.n	800cc0c <__gethex+0x248>
 800cb9a:	f04f 0b02 	mov.w	fp, #2
 800cb9e:	4641      	mov	r1, r8
 800cba0:	4620      	mov	r0, r4
 800cba2:	f7ff fea7 	bl	800c8f4 <rshift>
 800cba6:	4446      	add	r6, r8
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	42b3      	cmp	r3, r6
 800cbac:	da41      	bge.n	800cc32 <__gethex+0x26e>
 800cbae:	4621      	mov	r1, r4
 800cbb0:	4648      	mov	r0, r9
 800cbb2:	f000 fa49 	bl	800d048 <_Bfree>
 800cbb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbb8:	2300      	movs	r3, #0
 800cbba:	6013      	str	r3, [r2, #0]
 800cbbc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800cbc0:	e78a      	b.n	800cad8 <__gethex+0x114>
 800cbc2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800cbc6:	2a2e      	cmp	r2, #46	; 0x2e
 800cbc8:	d014      	beq.n	800cbf4 <__gethex+0x230>
 800cbca:	2b20      	cmp	r3, #32
 800cbcc:	d106      	bne.n	800cbdc <__gethex+0x218>
 800cbce:	9b01      	ldr	r3, [sp, #4]
 800cbd0:	f843 bb04 	str.w	fp, [r3], #4
 800cbd4:	f04f 0b00 	mov.w	fp, #0
 800cbd8:	9301      	str	r3, [sp, #4]
 800cbda:	465b      	mov	r3, fp
 800cbdc:	7828      	ldrb	r0, [r5, #0]
 800cbde:	9303      	str	r3, [sp, #12]
 800cbe0:	f7ff feda 	bl	800c998 <__hexdig_fun>
 800cbe4:	9b03      	ldr	r3, [sp, #12]
 800cbe6:	f000 000f 	and.w	r0, r0, #15
 800cbea:	4098      	lsls	r0, r3
 800cbec:	ea4b 0b00 	orr.w	fp, fp, r0
 800cbf0:	3304      	adds	r3, #4
 800cbf2:	e7a1      	b.n	800cb38 <__gethex+0x174>
 800cbf4:	45a8      	cmp	r8, r5
 800cbf6:	d8e8      	bhi.n	800cbca <__gethex+0x206>
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	4628      	mov	r0, r5
 800cbfc:	9303      	str	r3, [sp, #12]
 800cbfe:	f7fe ff04 	bl	800ba0a <strncmp>
 800cc02:	4926      	ldr	r1, [pc, #152]	; (800cc9c <__gethex+0x2d8>)
 800cc04:	9b03      	ldr	r3, [sp, #12]
 800cc06:	2800      	cmp	r0, #0
 800cc08:	d1df      	bne.n	800cbca <__gethex+0x206>
 800cc0a:	e795      	b.n	800cb38 <__gethex+0x174>
 800cc0c:	f04f 0b03 	mov.w	fp, #3
 800cc10:	e7c5      	b.n	800cb9e <__gethex+0x1da>
 800cc12:	da0b      	bge.n	800cc2c <__gethex+0x268>
 800cc14:	eba5 0800 	sub.w	r8, r5, r0
 800cc18:	4621      	mov	r1, r4
 800cc1a:	4642      	mov	r2, r8
 800cc1c:	4648      	mov	r0, r9
 800cc1e:	f000 fc2d 	bl	800d47c <__lshift>
 800cc22:	eba6 0608 	sub.w	r6, r6, r8
 800cc26:	4604      	mov	r4, r0
 800cc28:	f100 0a14 	add.w	sl, r0, #20
 800cc2c:	f04f 0b00 	mov.w	fp, #0
 800cc30:	e7ba      	b.n	800cba8 <__gethex+0x1e4>
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	42b3      	cmp	r3, r6
 800cc36:	dd73      	ble.n	800cd20 <__gethex+0x35c>
 800cc38:	1b9e      	subs	r6, r3, r6
 800cc3a:	42b5      	cmp	r5, r6
 800cc3c:	dc34      	bgt.n	800cca8 <__gethex+0x2e4>
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	2b02      	cmp	r3, #2
 800cc42:	d023      	beq.n	800cc8c <__gethex+0x2c8>
 800cc44:	2b03      	cmp	r3, #3
 800cc46:	d025      	beq.n	800cc94 <__gethex+0x2d0>
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d115      	bne.n	800cc78 <__gethex+0x2b4>
 800cc4c:	42b5      	cmp	r5, r6
 800cc4e:	d113      	bne.n	800cc78 <__gethex+0x2b4>
 800cc50:	2d01      	cmp	r5, #1
 800cc52:	d10b      	bne.n	800cc6c <__gethex+0x2a8>
 800cc54:	9a02      	ldr	r2, [sp, #8]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6013      	str	r3, [r2, #0]
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	6123      	str	r3, [r4, #16]
 800cc5e:	f8ca 3000 	str.w	r3, [sl]
 800cc62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc64:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cc68:	601c      	str	r4, [r3, #0]
 800cc6a:	e735      	b.n	800cad8 <__gethex+0x114>
 800cc6c:	1e69      	subs	r1, r5, #1
 800cc6e:	4620      	mov	r0, r4
 800cc70:	f000 fe36 	bl	800d8e0 <__any_on>
 800cc74:	2800      	cmp	r0, #0
 800cc76:	d1ed      	bne.n	800cc54 <__gethex+0x290>
 800cc78:	4621      	mov	r1, r4
 800cc7a:	4648      	mov	r0, r9
 800cc7c:	f000 f9e4 	bl	800d048 <_Bfree>
 800cc80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc82:	2300      	movs	r3, #0
 800cc84:	6013      	str	r3, [r2, #0]
 800cc86:	f04f 0850 	mov.w	r8, #80	; 0x50
 800cc8a:	e725      	b.n	800cad8 <__gethex+0x114>
 800cc8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d1f2      	bne.n	800cc78 <__gethex+0x2b4>
 800cc92:	e7df      	b.n	800cc54 <__gethex+0x290>
 800cc94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d1dc      	bne.n	800cc54 <__gethex+0x290>
 800cc9a:	e7ed      	b.n	800cc78 <__gethex+0x2b4>
 800cc9c:	0800e4d0 	.word	0x0800e4d0
 800cca0:	0800e6e1 	.word	0x0800e6e1
 800cca4:	0800e6f2 	.word	0x0800e6f2
 800cca8:	f106 38ff 	add.w	r8, r6, #4294967295
 800ccac:	f1bb 0f00 	cmp.w	fp, #0
 800ccb0:	d133      	bne.n	800cd1a <__gethex+0x356>
 800ccb2:	f1b8 0f00 	cmp.w	r8, #0
 800ccb6:	d004      	beq.n	800ccc2 <__gethex+0x2fe>
 800ccb8:	4641      	mov	r1, r8
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f000 fe10 	bl	800d8e0 <__any_on>
 800ccc0:	4683      	mov	fp, r0
 800ccc2:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cccc:	f008 081f 	and.w	r8, r8, #31
 800ccd0:	fa03 f308 	lsl.w	r3, r3, r8
 800ccd4:	4213      	tst	r3, r2
 800ccd6:	4631      	mov	r1, r6
 800ccd8:	4620      	mov	r0, r4
 800ccda:	bf18      	it	ne
 800ccdc:	f04b 0b02 	orrne.w	fp, fp, #2
 800cce0:	1bad      	subs	r5, r5, r6
 800cce2:	f7ff fe07 	bl	800c8f4 <rshift>
 800cce6:	687e      	ldr	r6, [r7, #4]
 800cce8:	f04f 0802 	mov.w	r8, #2
 800ccec:	f1bb 0f00 	cmp.w	fp, #0
 800ccf0:	d04a      	beq.n	800cd88 <__gethex+0x3c4>
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2b02      	cmp	r3, #2
 800ccf6:	d016      	beq.n	800cd26 <__gethex+0x362>
 800ccf8:	2b03      	cmp	r3, #3
 800ccfa:	d018      	beq.n	800cd2e <__gethex+0x36a>
 800ccfc:	2b01      	cmp	r3, #1
 800ccfe:	d109      	bne.n	800cd14 <__gethex+0x350>
 800cd00:	f01b 0f02 	tst.w	fp, #2
 800cd04:	d006      	beq.n	800cd14 <__gethex+0x350>
 800cd06:	f8da 3000 	ldr.w	r3, [sl]
 800cd0a:	ea4b 0b03 	orr.w	fp, fp, r3
 800cd0e:	f01b 0f01 	tst.w	fp, #1
 800cd12:	d10f      	bne.n	800cd34 <__gethex+0x370>
 800cd14:	f048 0810 	orr.w	r8, r8, #16
 800cd18:	e036      	b.n	800cd88 <__gethex+0x3c4>
 800cd1a:	f04f 0b01 	mov.w	fp, #1
 800cd1e:	e7d0      	b.n	800ccc2 <__gethex+0x2fe>
 800cd20:	f04f 0801 	mov.w	r8, #1
 800cd24:	e7e2      	b.n	800ccec <__gethex+0x328>
 800cd26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd28:	f1c3 0301 	rsb	r3, r3, #1
 800cd2c:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d0ef      	beq.n	800cd14 <__gethex+0x350>
 800cd34:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cd38:	f104 0214 	add.w	r2, r4, #20
 800cd3c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800cd40:	9301      	str	r3, [sp, #4]
 800cd42:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800cd46:	2300      	movs	r3, #0
 800cd48:	4694      	mov	ip, r2
 800cd4a:	f852 1b04 	ldr.w	r1, [r2], #4
 800cd4e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800cd52:	d01e      	beq.n	800cd92 <__gethex+0x3ce>
 800cd54:	3101      	adds	r1, #1
 800cd56:	f8cc 1000 	str.w	r1, [ip]
 800cd5a:	f1b8 0f02 	cmp.w	r8, #2
 800cd5e:	f104 0214 	add.w	r2, r4, #20
 800cd62:	d13d      	bne.n	800cde0 <__gethex+0x41c>
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	3b01      	subs	r3, #1
 800cd68:	42ab      	cmp	r3, r5
 800cd6a:	d10b      	bne.n	800cd84 <__gethex+0x3c0>
 800cd6c:	1169      	asrs	r1, r5, #5
 800cd6e:	2301      	movs	r3, #1
 800cd70:	f005 051f 	and.w	r5, r5, #31
 800cd74:	fa03 f505 	lsl.w	r5, r3, r5
 800cd78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd7c:	421d      	tst	r5, r3
 800cd7e:	bf18      	it	ne
 800cd80:	f04f 0801 	movne.w	r8, #1
 800cd84:	f048 0820 	orr.w	r8, r8, #32
 800cd88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd8a:	601c      	str	r4, [r3, #0]
 800cd8c:	9b02      	ldr	r3, [sp, #8]
 800cd8e:	601e      	str	r6, [r3, #0]
 800cd90:	e6a2      	b.n	800cad8 <__gethex+0x114>
 800cd92:	4290      	cmp	r0, r2
 800cd94:	f842 3c04 	str.w	r3, [r2, #-4]
 800cd98:	d8d6      	bhi.n	800cd48 <__gethex+0x384>
 800cd9a:	68a2      	ldr	r2, [r4, #8]
 800cd9c:	4593      	cmp	fp, r2
 800cd9e:	db17      	blt.n	800cdd0 <__gethex+0x40c>
 800cda0:	6861      	ldr	r1, [r4, #4]
 800cda2:	4648      	mov	r0, r9
 800cda4:	3101      	adds	r1, #1
 800cda6:	f000 f90f 	bl	800cfc8 <_Balloc>
 800cdaa:	4682      	mov	sl, r0
 800cdac:	b918      	cbnz	r0, 800cdb6 <__gethex+0x3f2>
 800cdae:	4b1b      	ldr	r3, [pc, #108]	; (800ce1c <__gethex+0x458>)
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	2184      	movs	r1, #132	; 0x84
 800cdb4:	e6b3      	b.n	800cb1e <__gethex+0x15a>
 800cdb6:	6922      	ldr	r2, [r4, #16]
 800cdb8:	3202      	adds	r2, #2
 800cdba:	f104 010c 	add.w	r1, r4, #12
 800cdbe:	0092      	lsls	r2, r2, #2
 800cdc0:	300c      	adds	r0, #12
 800cdc2:	f7fe febb 	bl	800bb3c <memcpy>
 800cdc6:	4621      	mov	r1, r4
 800cdc8:	4648      	mov	r0, r9
 800cdca:	f000 f93d 	bl	800d048 <_Bfree>
 800cdce:	4654      	mov	r4, sl
 800cdd0:	6922      	ldr	r2, [r4, #16]
 800cdd2:	1c51      	adds	r1, r2, #1
 800cdd4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cdd8:	6121      	str	r1, [r4, #16]
 800cdda:	2101      	movs	r1, #1
 800cddc:	6151      	str	r1, [r2, #20]
 800cdde:	e7bc      	b.n	800cd5a <__gethex+0x396>
 800cde0:	6921      	ldr	r1, [r4, #16]
 800cde2:	4559      	cmp	r1, fp
 800cde4:	dd0b      	ble.n	800cdfe <__gethex+0x43a>
 800cde6:	2101      	movs	r1, #1
 800cde8:	4620      	mov	r0, r4
 800cdea:	f7ff fd83 	bl	800c8f4 <rshift>
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	3601      	adds	r6, #1
 800cdf2:	42b3      	cmp	r3, r6
 800cdf4:	f6ff aedb 	blt.w	800cbae <__gethex+0x1ea>
 800cdf8:	f04f 0801 	mov.w	r8, #1
 800cdfc:	e7c2      	b.n	800cd84 <__gethex+0x3c0>
 800cdfe:	f015 051f 	ands.w	r5, r5, #31
 800ce02:	d0f9      	beq.n	800cdf8 <__gethex+0x434>
 800ce04:	9b01      	ldr	r3, [sp, #4]
 800ce06:	441a      	add	r2, r3
 800ce08:	f1c5 0520 	rsb	r5, r5, #32
 800ce0c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ce10:	f000 f9cc 	bl	800d1ac <__hi0bits>
 800ce14:	42a8      	cmp	r0, r5
 800ce16:	dbe6      	blt.n	800cde6 <__gethex+0x422>
 800ce18:	e7ee      	b.n	800cdf8 <__gethex+0x434>
 800ce1a:	bf00      	nop
 800ce1c:	0800e6e1 	.word	0x0800e6e1

0800ce20 <L_shift>:
 800ce20:	f1c2 0208 	rsb	r2, r2, #8
 800ce24:	0092      	lsls	r2, r2, #2
 800ce26:	b570      	push	{r4, r5, r6, lr}
 800ce28:	f1c2 0620 	rsb	r6, r2, #32
 800ce2c:	6843      	ldr	r3, [r0, #4]
 800ce2e:	6804      	ldr	r4, [r0, #0]
 800ce30:	fa03 f506 	lsl.w	r5, r3, r6
 800ce34:	432c      	orrs	r4, r5
 800ce36:	40d3      	lsrs	r3, r2
 800ce38:	6004      	str	r4, [r0, #0]
 800ce3a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ce3e:	4288      	cmp	r0, r1
 800ce40:	d3f4      	bcc.n	800ce2c <L_shift+0xc>
 800ce42:	bd70      	pop	{r4, r5, r6, pc}

0800ce44 <__match>:
 800ce44:	b530      	push	{r4, r5, lr}
 800ce46:	6803      	ldr	r3, [r0, #0]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce4e:	b914      	cbnz	r4, 800ce56 <__match+0x12>
 800ce50:	6003      	str	r3, [r0, #0]
 800ce52:	2001      	movs	r0, #1
 800ce54:	bd30      	pop	{r4, r5, pc}
 800ce56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ce5e:	2d19      	cmp	r5, #25
 800ce60:	bf98      	it	ls
 800ce62:	3220      	addls	r2, #32
 800ce64:	42a2      	cmp	r2, r4
 800ce66:	d0f0      	beq.n	800ce4a <__match+0x6>
 800ce68:	2000      	movs	r0, #0
 800ce6a:	e7f3      	b.n	800ce54 <__match+0x10>

0800ce6c <__hexnan>:
 800ce6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce70:	680b      	ldr	r3, [r1, #0]
 800ce72:	6801      	ldr	r1, [r0, #0]
 800ce74:	115e      	asrs	r6, r3, #5
 800ce76:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ce7a:	f013 031f 	ands.w	r3, r3, #31
 800ce7e:	b087      	sub	sp, #28
 800ce80:	bf18      	it	ne
 800ce82:	3604      	addne	r6, #4
 800ce84:	2500      	movs	r5, #0
 800ce86:	1f37      	subs	r7, r6, #4
 800ce88:	4682      	mov	sl, r0
 800ce8a:	4690      	mov	r8, r2
 800ce8c:	9301      	str	r3, [sp, #4]
 800ce8e:	f846 5c04 	str.w	r5, [r6, #-4]
 800ce92:	46b9      	mov	r9, r7
 800ce94:	463c      	mov	r4, r7
 800ce96:	9502      	str	r5, [sp, #8]
 800ce98:	46ab      	mov	fp, r5
 800ce9a:	784a      	ldrb	r2, [r1, #1]
 800ce9c:	1c4b      	adds	r3, r1, #1
 800ce9e:	9303      	str	r3, [sp, #12]
 800cea0:	b342      	cbz	r2, 800cef4 <__hexnan+0x88>
 800cea2:	4610      	mov	r0, r2
 800cea4:	9105      	str	r1, [sp, #20]
 800cea6:	9204      	str	r2, [sp, #16]
 800cea8:	f7ff fd76 	bl	800c998 <__hexdig_fun>
 800ceac:	2800      	cmp	r0, #0
 800ceae:	d14f      	bne.n	800cf50 <__hexnan+0xe4>
 800ceb0:	9a04      	ldr	r2, [sp, #16]
 800ceb2:	9905      	ldr	r1, [sp, #20]
 800ceb4:	2a20      	cmp	r2, #32
 800ceb6:	d818      	bhi.n	800ceea <__hexnan+0x7e>
 800ceb8:	9b02      	ldr	r3, [sp, #8]
 800ceba:	459b      	cmp	fp, r3
 800cebc:	dd13      	ble.n	800cee6 <__hexnan+0x7a>
 800cebe:	454c      	cmp	r4, r9
 800cec0:	d206      	bcs.n	800ced0 <__hexnan+0x64>
 800cec2:	2d07      	cmp	r5, #7
 800cec4:	dc04      	bgt.n	800ced0 <__hexnan+0x64>
 800cec6:	462a      	mov	r2, r5
 800cec8:	4649      	mov	r1, r9
 800ceca:	4620      	mov	r0, r4
 800cecc:	f7ff ffa8 	bl	800ce20 <L_shift>
 800ced0:	4544      	cmp	r4, r8
 800ced2:	d950      	bls.n	800cf76 <__hexnan+0x10a>
 800ced4:	2300      	movs	r3, #0
 800ced6:	f1a4 0904 	sub.w	r9, r4, #4
 800ceda:	f844 3c04 	str.w	r3, [r4, #-4]
 800cede:	f8cd b008 	str.w	fp, [sp, #8]
 800cee2:	464c      	mov	r4, r9
 800cee4:	461d      	mov	r5, r3
 800cee6:	9903      	ldr	r1, [sp, #12]
 800cee8:	e7d7      	b.n	800ce9a <__hexnan+0x2e>
 800ceea:	2a29      	cmp	r2, #41	; 0x29
 800ceec:	d155      	bne.n	800cf9a <__hexnan+0x12e>
 800ceee:	3102      	adds	r1, #2
 800cef0:	f8ca 1000 	str.w	r1, [sl]
 800cef4:	f1bb 0f00 	cmp.w	fp, #0
 800cef8:	d04f      	beq.n	800cf9a <__hexnan+0x12e>
 800cefa:	454c      	cmp	r4, r9
 800cefc:	d206      	bcs.n	800cf0c <__hexnan+0xa0>
 800cefe:	2d07      	cmp	r5, #7
 800cf00:	dc04      	bgt.n	800cf0c <__hexnan+0xa0>
 800cf02:	462a      	mov	r2, r5
 800cf04:	4649      	mov	r1, r9
 800cf06:	4620      	mov	r0, r4
 800cf08:	f7ff ff8a 	bl	800ce20 <L_shift>
 800cf0c:	4544      	cmp	r4, r8
 800cf0e:	d934      	bls.n	800cf7a <__hexnan+0x10e>
 800cf10:	f1a8 0204 	sub.w	r2, r8, #4
 800cf14:	4623      	mov	r3, r4
 800cf16:	f853 1b04 	ldr.w	r1, [r3], #4
 800cf1a:	f842 1f04 	str.w	r1, [r2, #4]!
 800cf1e:	429f      	cmp	r7, r3
 800cf20:	d2f9      	bcs.n	800cf16 <__hexnan+0xaa>
 800cf22:	1b3b      	subs	r3, r7, r4
 800cf24:	f023 0303 	bic.w	r3, r3, #3
 800cf28:	3304      	adds	r3, #4
 800cf2a:	3e03      	subs	r6, #3
 800cf2c:	3401      	adds	r4, #1
 800cf2e:	42a6      	cmp	r6, r4
 800cf30:	bf38      	it	cc
 800cf32:	2304      	movcc	r3, #4
 800cf34:	4443      	add	r3, r8
 800cf36:	2200      	movs	r2, #0
 800cf38:	f843 2b04 	str.w	r2, [r3], #4
 800cf3c:	429f      	cmp	r7, r3
 800cf3e:	d2fb      	bcs.n	800cf38 <__hexnan+0xcc>
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	b91b      	cbnz	r3, 800cf4c <__hexnan+0xe0>
 800cf44:	4547      	cmp	r7, r8
 800cf46:	d126      	bne.n	800cf96 <__hexnan+0x12a>
 800cf48:	2301      	movs	r3, #1
 800cf4a:	603b      	str	r3, [r7, #0]
 800cf4c:	2005      	movs	r0, #5
 800cf4e:	e025      	b.n	800cf9c <__hexnan+0x130>
 800cf50:	3501      	adds	r5, #1
 800cf52:	2d08      	cmp	r5, #8
 800cf54:	f10b 0b01 	add.w	fp, fp, #1
 800cf58:	dd06      	ble.n	800cf68 <__hexnan+0xfc>
 800cf5a:	4544      	cmp	r4, r8
 800cf5c:	d9c3      	bls.n	800cee6 <__hexnan+0x7a>
 800cf5e:	2300      	movs	r3, #0
 800cf60:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf64:	2501      	movs	r5, #1
 800cf66:	3c04      	subs	r4, #4
 800cf68:	6822      	ldr	r2, [r4, #0]
 800cf6a:	f000 000f 	and.w	r0, r0, #15
 800cf6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cf72:	6020      	str	r0, [r4, #0]
 800cf74:	e7b7      	b.n	800cee6 <__hexnan+0x7a>
 800cf76:	2508      	movs	r5, #8
 800cf78:	e7b5      	b.n	800cee6 <__hexnan+0x7a>
 800cf7a:	9b01      	ldr	r3, [sp, #4]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d0df      	beq.n	800cf40 <__hexnan+0xd4>
 800cf80:	f1c3 0320 	rsb	r3, r3, #32
 800cf84:	f04f 32ff 	mov.w	r2, #4294967295
 800cf88:	40da      	lsrs	r2, r3
 800cf8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cf8e:	4013      	ands	r3, r2
 800cf90:	f846 3c04 	str.w	r3, [r6, #-4]
 800cf94:	e7d4      	b.n	800cf40 <__hexnan+0xd4>
 800cf96:	3f04      	subs	r7, #4
 800cf98:	e7d2      	b.n	800cf40 <__hexnan+0xd4>
 800cf9a:	2004      	movs	r0, #4
 800cf9c:	b007      	add	sp, #28
 800cf9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cfa2 <__ascii_mbtowc>:
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	b901      	cbnz	r1, 800cfa8 <__ascii_mbtowc+0x6>
 800cfa6:	a901      	add	r1, sp, #4
 800cfa8:	b142      	cbz	r2, 800cfbc <__ascii_mbtowc+0x1a>
 800cfaa:	b14b      	cbz	r3, 800cfc0 <__ascii_mbtowc+0x1e>
 800cfac:	7813      	ldrb	r3, [r2, #0]
 800cfae:	600b      	str	r3, [r1, #0]
 800cfb0:	7812      	ldrb	r2, [r2, #0]
 800cfb2:	1e10      	subs	r0, r2, #0
 800cfb4:	bf18      	it	ne
 800cfb6:	2001      	movne	r0, #1
 800cfb8:	b002      	add	sp, #8
 800cfba:	4770      	bx	lr
 800cfbc:	4610      	mov	r0, r2
 800cfbe:	e7fb      	b.n	800cfb8 <__ascii_mbtowc+0x16>
 800cfc0:	f06f 0001 	mvn.w	r0, #1
 800cfc4:	e7f8      	b.n	800cfb8 <__ascii_mbtowc+0x16>
	...

0800cfc8 <_Balloc>:
 800cfc8:	b570      	push	{r4, r5, r6, lr}
 800cfca:	69c6      	ldr	r6, [r0, #28]
 800cfcc:	4604      	mov	r4, r0
 800cfce:	460d      	mov	r5, r1
 800cfd0:	b976      	cbnz	r6, 800cff0 <_Balloc+0x28>
 800cfd2:	2010      	movs	r0, #16
 800cfd4:	f7fd f88c 	bl	800a0f0 <malloc>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	61e0      	str	r0, [r4, #28]
 800cfdc:	b920      	cbnz	r0, 800cfe8 <_Balloc+0x20>
 800cfde:	4b18      	ldr	r3, [pc, #96]	; (800d040 <_Balloc+0x78>)
 800cfe0:	4818      	ldr	r0, [pc, #96]	; (800d044 <_Balloc+0x7c>)
 800cfe2:	216b      	movs	r1, #107	; 0x6b
 800cfe4:	f000 fed2 	bl	800dd8c <__assert_func>
 800cfe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfec:	6006      	str	r6, [r0, #0]
 800cfee:	60c6      	str	r6, [r0, #12]
 800cff0:	69e6      	ldr	r6, [r4, #28]
 800cff2:	68f3      	ldr	r3, [r6, #12]
 800cff4:	b183      	cbz	r3, 800d018 <_Balloc+0x50>
 800cff6:	69e3      	ldr	r3, [r4, #28]
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cffe:	b9b8      	cbnz	r0, 800d030 <_Balloc+0x68>
 800d000:	2101      	movs	r1, #1
 800d002:	fa01 f605 	lsl.w	r6, r1, r5
 800d006:	1d72      	adds	r2, r6, #5
 800d008:	0092      	lsls	r2, r2, #2
 800d00a:	4620      	mov	r0, r4
 800d00c:	f000 fedc 	bl	800ddc8 <_calloc_r>
 800d010:	b160      	cbz	r0, 800d02c <_Balloc+0x64>
 800d012:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d016:	e00e      	b.n	800d036 <_Balloc+0x6e>
 800d018:	2221      	movs	r2, #33	; 0x21
 800d01a:	2104      	movs	r1, #4
 800d01c:	4620      	mov	r0, r4
 800d01e:	f000 fed3 	bl	800ddc8 <_calloc_r>
 800d022:	69e3      	ldr	r3, [r4, #28]
 800d024:	60f0      	str	r0, [r6, #12]
 800d026:	68db      	ldr	r3, [r3, #12]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d1e4      	bne.n	800cff6 <_Balloc+0x2e>
 800d02c:	2000      	movs	r0, #0
 800d02e:	bd70      	pop	{r4, r5, r6, pc}
 800d030:	6802      	ldr	r2, [r0, #0]
 800d032:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d036:	2300      	movs	r3, #0
 800d038:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d03c:	e7f7      	b.n	800d02e <_Balloc+0x66>
 800d03e:	bf00      	nop
 800d040:	0800e672 	.word	0x0800e672
 800d044:	0800e752 	.word	0x0800e752

0800d048 <_Bfree>:
 800d048:	b570      	push	{r4, r5, r6, lr}
 800d04a:	69c6      	ldr	r6, [r0, #28]
 800d04c:	4605      	mov	r5, r0
 800d04e:	460c      	mov	r4, r1
 800d050:	b976      	cbnz	r6, 800d070 <_Bfree+0x28>
 800d052:	2010      	movs	r0, #16
 800d054:	f7fd f84c 	bl	800a0f0 <malloc>
 800d058:	4602      	mov	r2, r0
 800d05a:	61e8      	str	r0, [r5, #28]
 800d05c:	b920      	cbnz	r0, 800d068 <_Bfree+0x20>
 800d05e:	4b09      	ldr	r3, [pc, #36]	; (800d084 <_Bfree+0x3c>)
 800d060:	4809      	ldr	r0, [pc, #36]	; (800d088 <_Bfree+0x40>)
 800d062:	218f      	movs	r1, #143	; 0x8f
 800d064:	f000 fe92 	bl	800dd8c <__assert_func>
 800d068:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d06c:	6006      	str	r6, [r0, #0]
 800d06e:	60c6      	str	r6, [r0, #12]
 800d070:	b13c      	cbz	r4, 800d082 <_Bfree+0x3a>
 800d072:	69eb      	ldr	r3, [r5, #28]
 800d074:	6862      	ldr	r2, [r4, #4]
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d07c:	6021      	str	r1, [r4, #0]
 800d07e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d082:	bd70      	pop	{r4, r5, r6, pc}
 800d084:	0800e672 	.word	0x0800e672
 800d088:	0800e752 	.word	0x0800e752

0800d08c <__multadd>:
 800d08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d090:	690d      	ldr	r5, [r1, #16]
 800d092:	4607      	mov	r7, r0
 800d094:	460c      	mov	r4, r1
 800d096:	461e      	mov	r6, r3
 800d098:	f101 0c14 	add.w	ip, r1, #20
 800d09c:	2000      	movs	r0, #0
 800d09e:	f8dc 3000 	ldr.w	r3, [ip]
 800d0a2:	b299      	uxth	r1, r3
 800d0a4:	fb02 6101 	mla	r1, r2, r1, r6
 800d0a8:	0c1e      	lsrs	r6, r3, #16
 800d0aa:	0c0b      	lsrs	r3, r1, #16
 800d0ac:	fb02 3306 	mla	r3, r2, r6, r3
 800d0b0:	b289      	uxth	r1, r1
 800d0b2:	3001      	adds	r0, #1
 800d0b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d0b8:	4285      	cmp	r5, r0
 800d0ba:	f84c 1b04 	str.w	r1, [ip], #4
 800d0be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d0c2:	dcec      	bgt.n	800d09e <__multadd+0x12>
 800d0c4:	b30e      	cbz	r6, 800d10a <__multadd+0x7e>
 800d0c6:	68a3      	ldr	r3, [r4, #8]
 800d0c8:	42ab      	cmp	r3, r5
 800d0ca:	dc19      	bgt.n	800d100 <__multadd+0x74>
 800d0cc:	6861      	ldr	r1, [r4, #4]
 800d0ce:	4638      	mov	r0, r7
 800d0d0:	3101      	adds	r1, #1
 800d0d2:	f7ff ff79 	bl	800cfc8 <_Balloc>
 800d0d6:	4680      	mov	r8, r0
 800d0d8:	b928      	cbnz	r0, 800d0e6 <__multadd+0x5a>
 800d0da:	4602      	mov	r2, r0
 800d0dc:	4b0c      	ldr	r3, [pc, #48]	; (800d110 <__multadd+0x84>)
 800d0de:	480d      	ldr	r0, [pc, #52]	; (800d114 <__multadd+0x88>)
 800d0e0:	21ba      	movs	r1, #186	; 0xba
 800d0e2:	f000 fe53 	bl	800dd8c <__assert_func>
 800d0e6:	6922      	ldr	r2, [r4, #16]
 800d0e8:	3202      	adds	r2, #2
 800d0ea:	f104 010c 	add.w	r1, r4, #12
 800d0ee:	0092      	lsls	r2, r2, #2
 800d0f0:	300c      	adds	r0, #12
 800d0f2:	f7fe fd23 	bl	800bb3c <memcpy>
 800d0f6:	4621      	mov	r1, r4
 800d0f8:	4638      	mov	r0, r7
 800d0fa:	f7ff ffa5 	bl	800d048 <_Bfree>
 800d0fe:	4644      	mov	r4, r8
 800d100:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d104:	3501      	adds	r5, #1
 800d106:	615e      	str	r6, [r3, #20]
 800d108:	6125      	str	r5, [r4, #16]
 800d10a:	4620      	mov	r0, r4
 800d10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d110:	0800e6e1 	.word	0x0800e6e1
 800d114:	0800e752 	.word	0x0800e752

0800d118 <__s2b>:
 800d118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d11c:	460c      	mov	r4, r1
 800d11e:	4615      	mov	r5, r2
 800d120:	461f      	mov	r7, r3
 800d122:	2209      	movs	r2, #9
 800d124:	3308      	adds	r3, #8
 800d126:	4606      	mov	r6, r0
 800d128:	fb93 f3f2 	sdiv	r3, r3, r2
 800d12c:	2100      	movs	r1, #0
 800d12e:	2201      	movs	r2, #1
 800d130:	429a      	cmp	r2, r3
 800d132:	db09      	blt.n	800d148 <__s2b+0x30>
 800d134:	4630      	mov	r0, r6
 800d136:	f7ff ff47 	bl	800cfc8 <_Balloc>
 800d13a:	b940      	cbnz	r0, 800d14e <__s2b+0x36>
 800d13c:	4602      	mov	r2, r0
 800d13e:	4b19      	ldr	r3, [pc, #100]	; (800d1a4 <__s2b+0x8c>)
 800d140:	4819      	ldr	r0, [pc, #100]	; (800d1a8 <__s2b+0x90>)
 800d142:	21d3      	movs	r1, #211	; 0xd3
 800d144:	f000 fe22 	bl	800dd8c <__assert_func>
 800d148:	0052      	lsls	r2, r2, #1
 800d14a:	3101      	adds	r1, #1
 800d14c:	e7f0      	b.n	800d130 <__s2b+0x18>
 800d14e:	9b08      	ldr	r3, [sp, #32]
 800d150:	6143      	str	r3, [r0, #20]
 800d152:	2d09      	cmp	r5, #9
 800d154:	f04f 0301 	mov.w	r3, #1
 800d158:	6103      	str	r3, [r0, #16]
 800d15a:	dd16      	ble.n	800d18a <__s2b+0x72>
 800d15c:	f104 0909 	add.w	r9, r4, #9
 800d160:	46c8      	mov	r8, r9
 800d162:	442c      	add	r4, r5
 800d164:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d168:	4601      	mov	r1, r0
 800d16a:	3b30      	subs	r3, #48	; 0x30
 800d16c:	220a      	movs	r2, #10
 800d16e:	4630      	mov	r0, r6
 800d170:	f7ff ff8c 	bl	800d08c <__multadd>
 800d174:	45a0      	cmp	r8, r4
 800d176:	d1f5      	bne.n	800d164 <__s2b+0x4c>
 800d178:	f1a5 0408 	sub.w	r4, r5, #8
 800d17c:	444c      	add	r4, r9
 800d17e:	1b2d      	subs	r5, r5, r4
 800d180:	1963      	adds	r3, r4, r5
 800d182:	42bb      	cmp	r3, r7
 800d184:	db04      	blt.n	800d190 <__s2b+0x78>
 800d186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d18a:	340a      	adds	r4, #10
 800d18c:	2509      	movs	r5, #9
 800d18e:	e7f6      	b.n	800d17e <__s2b+0x66>
 800d190:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d194:	4601      	mov	r1, r0
 800d196:	3b30      	subs	r3, #48	; 0x30
 800d198:	220a      	movs	r2, #10
 800d19a:	4630      	mov	r0, r6
 800d19c:	f7ff ff76 	bl	800d08c <__multadd>
 800d1a0:	e7ee      	b.n	800d180 <__s2b+0x68>
 800d1a2:	bf00      	nop
 800d1a4:	0800e6e1 	.word	0x0800e6e1
 800d1a8:	0800e752 	.word	0x0800e752

0800d1ac <__hi0bits>:
 800d1ac:	0c03      	lsrs	r3, r0, #16
 800d1ae:	041b      	lsls	r3, r3, #16
 800d1b0:	b9d3      	cbnz	r3, 800d1e8 <__hi0bits+0x3c>
 800d1b2:	0400      	lsls	r0, r0, #16
 800d1b4:	2310      	movs	r3, #16
 800d1b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d1ba:	bf04      	itt	eq
 800d1bc:	0200      	lsleq	r0, r0, #8
 800d1be:	3308      	addeq	r3, #8
 800d1c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d1c4:	bf04      	itt	eq
 800d1c6:	0100      	lsleq	r0, r0, #4
 800d1c8:	3304      	addeq	r3, #4
 800d1ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d1ce:	bf04      	itt	eq
 800d1d0:	0080      	lsleq	r0, r0, #2
 800d1d2:	3302      	addeq	r3, #2
 800d1d4:	2800      	cmp	r0, #0
 800d1d6:	db05      	blt.n	800d1e4 <__hi0bits+0x38>
 800d1d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d1dc:	f103 0301 	add.w	r3, r3, #1
 800d1e0:	bf08      	it	eq
 800d1e2:	2320      	moveq	r3, #32
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	4770      	bx	lr
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	e7e4      	b.n	800d1b6 <__hi0bits+0xa>

0800d1ec <__lo0bits>:
 800d1ec:	6803      	ldr	r3, [r0, #0]
 800d1ee:	f013 0207 	ands.w	r2, r3, #7
 800d1f2:	d00c      	beq.n	800d20e <__lo0bits+0x22>
 800d1f4:	07d9      	lsls	r1, r3, #31
 800d1f6:	d422      	bmi.n	800d23e <__lo0bits+0x52>
 800d1f8:	079a      	lsls	r2, r3, #30
 800d1fa:	bf49      	itett	mi
 800d1fc:	085b      	lsrmi	r3, r3, #1
 800d1fe:	089b      	lsrpl	r3, r3, #2
 800d200:	6003      	strmi	r3, [r0, #0]
 800d202:	2201      	movmi	r2, #1
 800d204:	bf5c      	itt	pl
 800d206:	6003      	strpl	r3, [r0, #0]
 800d208:	2202      	movpl	r2, #2
 800d20a:	4610      	mov	r0, r2
 800d20c:	4770      	bx	lr
 800d20e:	b299      	uxth	r1, r3
 800d210:	b909      	cbnz	r1, 800d216 <__lo0bits+0x2a>
 800d212:	0c1b      	lsrs	r3, r3, #16
 800d214:	2210      	movs	r2, #16
 800d216:	b2d9      	uxtb	r1, r3
 800d218:	b909      	cbnz	r1, 800d21e <__lo0bits+0x32>
 800d21a:	3208      	adds	r2, #8
 800d21c:	0a1b      	lsrs	r3, r3, #8
 800d21e:	0719      	lsls	r1, r3, #28
 800d220:	bf04      	itt	eq
 800d222:	091b      	lsreq	r3, r3, #4
 800d224:	3204      	addeq	r2, #4
 800d226:	0799      	lsls	r1, r3, #30
 800d228:	bf04      	itt	eq
 800d22a:	089b      	lsreq	r3, r3, #2
 800d22c:	3202      	addeq	r2, #2
 800d22e:	07d9      	lsls	r1, r3, #31
 800d230:	d403      	bmi.n	800d23a <__lo0bits+0x4e>
 800d232:	085b      	lsrs	r3, r3, #1
 800d234:	f102 0201 	add.w	r2, r2, #1
 800d238:	d003      	beq.n	800d242 <__lo0bits+0x56>
 800d23a:	6003      	str	r3, [r0, #0]
 800d23c:	e7e5      	b.n	800d20a <__lo0bits+0x1e>
 800d23e:	2200      	movs	r2, #0
 800d240:	e7e3      	b.n	800d20a <__lo0bits+0x1e>
 800d242:	2220      	movs	r2, #32
 800d244:	e7e1      	b.n	800d20a <__lo0bits+0x1e>
	...

0800d248 <__i2b>:
 800d248:	b510      	push	{r4, lr}
 800d24a:	460c      	mov	r4, r1
 800d24c:	2101      	movs	r1, #1
 800d24e:	f7ff febb 	bl	800cfc8 <_Balloc>
 800d252:	4602      	mov	r2, r0
 800d254:	b928      	cbnz	r0, 800d262 <__i2b+0x1a>
 800d256:	4b05      	ldr	r3, [pc, #20]	; (800d26c <__i2b+0x24>)
 800d258:	4805      	ldr	r0, [pc, #20]	; (800d270 <__i2b+0x28>)
 800d25a:	f240 1145 	movw	r1, #325	; 0x145
 800d25e:	f000 fd95 	bl	800dd8c <__assert_func>
 800d262:	2301      	movs	r3, #1
 800d264:	6144      	str	r4, [r0, #20]
 800d266:	6103      	str	r3, [r0, #16]
 800d268:	bd10      	pop	{r4, pc}
 800d26a:	bf00      	nop
 800d26c:	0800e6e1 	.word	0x0800e6e1
 800d270:	0800e752 	.word	0x0800e752

0800d274 <__multiply>:
 800d274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d278:	4691      	mov	r9, r2
 800d27a:	690a      	ldr	r2, [r1, #16]
 800d27c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d280:	429a      	cmp	r2, r3
 800d282:	bfb8      	it	lt
 800d284:	460b      	movlt	r3, r1
 800d286:	460c      	mov	r4, r1
 800d288:	bfbc      	itt	lt
 800d28a:	464c      	movlt	r4, r9
 800d28c:	4699      	movlt	r9, r3
 800d28e:	6927      	ldr	r7, [r4, #16]
 800d290:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d294:	68a3      	ldr	r3, [r4, #8]
 800d296:	6861      	ldr	r1, [r4, #4]
 800d298:	eb07 060a 	add.w	r6, r7, sl
 800d29c:	42b3      	cmp	r3, r6
 800d29e:	b085      	sub	sp, #20
 800d2a0:	bfb8      	it	lt
 800d2a2:	3101      	addlt	r1, #1
 800d2a4:	f7ff fe90 	bl	800cfc8 <_Balloc>
 800d2a8:	b930      	cbnz	r0, 800d2b8 <__multiply+0x44>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	4b44      	ldr	r3, [pc, #272]	; (800d3c0 <__multiply+0x14c>)
 800d2ae:	4845      	ldr	r0, [pc, #276]	; (800d3c4 <__multiply+0x150>)
 800d2b0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d2b4:	f000 fd6a 	bl	800dd8c <__assert_func>
 800d2b8:	f100 0514 	add.w	r5, r0, #20
 800d2bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d2c0:	462b      	mov	r3, r5
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	4543      	cmp	r3, r8
 800d2c6:	d321      	bcc.n	800d30c <__multiply+0x98>
 800d2c8:	f104 0314 	add.w	r3, r4, #20
 800d2cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d2d0:	f109 0314 	add.w	r3, r9, #20
 800d2d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d2d8:	9202      	str	r2, [sp, #8]
 800d2da:	1b3a      	subs	r2, r7, r4
 800d2dc:	3a15      	subs	r2, #21
 800d2de:	f022 0203 	bic.w	r2, r2, #3
 800d2e2:	3204      	adds	r2, #4
 800d2e4:	f104 0115 	add.w	r1, r4, #21
 800d2e8:	428f      	cmp	r7, r1
 800d2ea:	bf38      	it	cc
 800d2ec:	2204      	movcc	r2, #4
 800d2ee:	9201      	str	r2, [sp, #4]
 800d2f0:	9a02      	ldr	r2, [sp, #8]
 800d2f2:	9303      	str	r3, [sp, #12]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d80c      	bhi.n	800d312 <__multiply+0x9e>
 800d2f8:	2e00      	cmp	r6, #0
 800d2fa:	dd03      	ble.n	800d304 <__multiply+0x90>
 800d2fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d300:	2b00      	cmp	r3, #0
 800d302:	d05b      	beq.n	800d3bc <__multiply+0x148>
 800d304:	6106      	str	r6, [r0, #16]
 800d306:	b005      	add	sp, #20
 800d308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d30c:	f843 2b04 	str.w	r2, [r3], #4
 800d310:	e7d8      	b.n	800d2c4 <__multiply+0x50>
 800d312:	f8b3 a000 	ldrh.w	sl, [r3]
 800d316:	f1ba 0f00 	cmp.w	sl, #0
 800d31a:	d024      	beq.n	800d366 <__multiply+0xf2>
 800d31c:	f104 0e14 	add.w	lr, r4, #20
 800d320:	46a9      	mov	r9, r5
 800d322:	f04f 0c00 	mov.w	ip, #0
 800d326:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d32a:	f8d9 1000 	ldr.w	r1, [r9]
 800d32e:	fa1f fb82 	uxth.w	fp, r2
 800d332:	b289      	uxth	r1, r1
 800d334:	fb0a 110b 	mla	r1, sl, fp, r1
 800d338:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d33c:	f8d9 2000 	ldr.w	r2, [r9]
 800d340:	4461      	add	r1, ip
 800d342:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d346:	fb0a c20b 	mla	r2, sl, fp, ip
 800d34a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d34e:	b289      	uxth	r1, r1
 800d350:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d354:	4577      	cmp	r7, lr
 800d356:	f849 1b04 	str.w	r1, [r9], #4
 800d35a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d35e:	d8e2      	bhi.n	800d326 <__multiply+0xb2>
 800d360:	9a01      	ldr	r2, [sp, #4]
 800d362:	f845 c002 	str.w	ip, [r5, r2]
 800d366:	9a03      	ldr	r2, [sp, #12]
 800d368:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d36c:	3304      	adds	r3, #4
 800d36e:	f1b9 0f00 	cmp.w	r9, #0
 800d372:	d021      	beq.n	800d3b8 <__multiply+0x144>
 800d374:	6829      	ldr	r1, [r5, #0]
 800d376:	f104 0c14 	add.w	ip, r4, #20
 800d37a:	46ae      	mov	lr, r5
 800d37c:	f04f 0a00 	mov.w	sl, #0
 800d380:	f8bc b000 	ldrh.w	fp, [ip]
 800d384:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d388:	fb09 220b 	mla	r2, r9, fp, r2
 800d38c:	4452      	add	r2, sl
 800d38e:	b289      	uxth	r1, r1
 800d390:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d394:	f84e 1b04 	str.w	r1, [lr], #4
 800d398:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d39c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d3a0:	f8be 1000 	ldrh.w	r1, [lr]
 800d3a4:	fb09 110a 	mla	r1, r9, sl, r1
 800d3a8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d3ac:	4567      	cmp	r7, ip
 800d3ae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d3b2:	d8e5      	bhi.n	800d380 <__multiply+0x10c>
 800d3b4:	9a01      	ldr	r2, [sp, #4]
 800d3b6:	50a9      	str	r1, [r5, r2]
 800d3b8:	3504      	adds	r5, #4
 800d3ba:	e799      	b.n	800d2f0 <__multiply+0x7c>
 800d3bc:	3e01      	subs	r6, #1
 800d3be:	e79b      	b.n	800d2f8 <__multiply+0x84>
 800d3c0:	0800e6e1 	.word	0x0800e6e1
 800d3c4:	0800e752 	.word	0x0800e752

0800d3c8 <__pow5mult>:
 800d3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3cc:	4615      	mov	r5, r2
 800d3ce:	f012 0203 	ands.w	r2, r2, #3
 800d3d2:	4606      	mov	r6, r0
 800d3d4:	460f      	mov	r7, r1
 800d3d6:	d007      	beq.n	800d3e8 <__pow5mult+0x20>
 800d3d8:	4c25      	ldr	r4, [pc, #148]	; (800d470 <__pow5mult+0xa8>)
 800d3da:	3a01      	subs	r2, #1
 800d3dc:	2300      	movs	r3, #0
 800d3de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3e2:	f7ff fe53 	bl	800d08c <__multadd>
 800d3e6:	4607      	mov	r7, r0
 800d3e8:	10ad      	asrs	r5, r5, #2
 800d3ea:	d03d      	beq.n	800d468 <__pow5mult+0xa0>
 800d3ec:	69f4      	ldr	r4, [r6, #28]
 800d3ee:	b97c      	cbnz	r4, 800d410 <__pow5mult+0x48>
 800d3f0:	2010      	movs	r0, #16
 800d3f2:	f7fc fe7d 	bl	800a0f0 <malloc>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	61f0      	str	r0, [r6, #28]
 800d3fa:	b928      	cbnz	r0, 800d408 <__pow5mult+0x40>
 800d3fc:	4b1d      	ldr	r3, [pc, #116]	; (800d474 <__pow5mult+0xac>)
 800d3fe:	481e      	ldr	r0, [pc, #120]	; (800d478 <__pow5mult+0xb0>)
 800d400:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d404:	f000 fcc2 	bl	800dd8c <__assert_func>
 800d408:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d40c:	6004      	str	r4, [r0, #0]
 800d40e:	60c4      	str	r4, [r0, #12]
 800d410:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d414:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d418:	b94c      	cbnz	r4, 800d42e <__pow5mult+0x66>
 800d41a:	f240 2171 	movw	r1, #625	; 0x271
 800d41e:	4630      	mov	r0, r6
 800d420:	f7ff ff12 	bl	800d248 <__i2b>
 800d424:	2300      	movs	r3, #0
 800d426:	f8c8 0008 	str.w	r0, [r8, #8]
 800d42a:	4604      	mov	r4, r0
 800d42c:	6003      	str	r3, [r0, #0]
 800d42e:	f04f 0900 	mov.w	r9, #0
 800d432:	07eb      	lsls	r3, r5, #31
 800d434:	d50a      	bpl.n	800d44c <__pow5mult+0x84>
 800d436:	4639      	mov	r1, r7
 800d438:	4622      	mov	r2, r4
 800d43a:	4630      	mov	r0, r6
 800d43c:	f7ff ff1a 	bl	800d274 <__multiply>
 800d440:	4639      	mov	r1, r7
 800d442:	4680      	mov	r8, r0
 800d444:	4630      	mov	r0, r6
 800d446:	f7ff fdff 	bl	800d048 <_Bfree>
 800d44a:	4647      	mov	r7, r8
 800d44c:	106d      	asrs	r5, r5, #1
 800d44e:	d00b      	beq.n	800d468 <__pow5mult+0xa0>
 800d450:	6820      	ldr	r0, [r4, #0]
 800d452:	b938      	cbnz	r0, 800d464 <__pow5mult+0x9c>
 800d454:	4622      	mov	r2, r4
 800d456:	4621      	mov	r1, r4
 800d458:	4630      	mov	r0, r6
 800d45a:	f7ff ff0b 	bl	800d274 <__multiply>
 800d45e:	6020      	str	r0, [r4, #0]
 800d460:	f8c0 9000 	str.w	r9, [r0]
 800d464:	4604      	mov	r4, r0
 800d466:	e7e4      	b.n	800d432 <__pow5mult+0x6a>
 800d468:	4638      	mov	r0, r7
 800d46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d46e:	bf00      	nop
 800d470:	0800e8a0 	.word	0x0800e8a0
 800d474:	0800e672 	.word	0x0800e672
 800d478:	0800e752 	.word	0x0800e752

0800d47c <__lshift>:
 800d47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d480:	460c      	mov	r4, r1
 800d482:	6849      	ldr	r1, [r1, #4]
 800d484:	6923      	ldr	r3, [r4, #16]
 800d486:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d48a:	68a3      	ldr	r3, [r4, #8]
 800d48c:	4607      	mov	r7, r0
 800d48e:	4691      	mov	r9, r2
 800d490:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d494:	f108 0601 	add.w	r6, r8, #1
 800d498:	42b3      	cmp	r3, r6
 800d49a:	db0b      	blt.n	800d4b4 <__lshift+0x38>
 800d49c:	4638      	mov	r0, r7
 800d49e:	f7ff fd93 	bl	800cfc8 <_Balloc>
 800d4a2:	4605      	mov	r5, r0
 800d4a4:	b948      	cbnz	r0, 800d4ba <__lshift+0x3e>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	4b28      	ldr	r3, [pc, #160]	; (800d54c <__lshift+0xd0>)
 800d4aa:	4829      	ldr	r0, [pc, #164]	; (800d550 <__lshift+0xd4>)
 800d4ac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d4b0:	f000 fc6c 	bl	800dd8c <__assert_func>
 800d4b4:	3101      	adds	r1, #1
 800d4b6:	005b      	lsls	r3, r3, #1
 800d4b8:	e7ee      	b.n	800d498 <__lshift+0x1c>
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	f100 0114 	add.w	r1, r0, #20
 800d4c0:	f100 0210 	add.w	r2, r0, #16
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	4553      	cmp	r3, sl
 800d4c8:	db33      	blt.n	800d532 <__lshift+0xb6>
 800d4ca:	6920      	ldr	r0, [r4, #16]
 800d4cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d4d0:	f104 0314 	add.w	r3, r4, #20
 800d4d4:	f019 091f 	ands.w	r9, r9, #31
 800d4d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d4e0:	d02b      	beq.n	800d53a <__lshift+0xbe>
 800d4e2:	f1c9 0e20 	rsb	lr, r9, #32
 800d4e6:	468a      	mov	sl, r1
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	6818      	ldr	r0, [r3, #0]
 800d4ec:	fa00 f009 	lsl.w	r0, r0, r9
 800d4f0:	4310      	orrs	r0, r2
 800d4f2:	f84a 0b04 	str.w	r0, [sl], #4
 800d4f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4fa:	459c      	cmp	ip, r3
 800d4fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d500:	d8f3      	bhi.n	800d4ea <__lshift+0x6e>
 800d502:	ebac 0304 	sub.w	r3, ip, r4
 800d506:	3b15      	subs	r3, #21
 800d508:	f023 0303 	bic.w	r3, r3, #3
 800d50c:	3304      	adds	r3, #4
 800d50e:	f104 0015 	add.w	r0, r4, #21
 800d512:	4584      	cmp	ip, r0
 800d514:	bf38      	it	cc
 800d516:	2304      	movcc	r3, #4
 800d518:	50ca      	str	r2, [r1, r3]
 800d51a:	b10a      	cbz	r2, 800d520 <__lshift+0xa4>
 800d51c:	f108 0602 	add.w	r6, r8, #2
 800d520:	3e01      	subs	r6, #1
 800d522:	4638      	mov	r0, r7
 800d524:	612e      	str	r6, [r5, #16]
 800d526:	4621      	mov	r1, r4
 800d528:	f7ff fd8e 	bl	800d048 <_Bfree>
 800d52c:	4628      	mov	r0, r5
 800d52e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d532:	f842 0f04 	str.w	r0, [r2, #4]!
 800d536:	3301      	adds	r3, #1
 800d538:	e7c5      	b.n	800d4c6 <__lshift+0x4a>
 800d53a:	3904      	subs	r1, #4
 800d53c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d540:	f841 2f04 	str.w	r2, [r1, #4]!
 800d544:	459c      	cmp	ip, r3
 800d546:	d8f9      	bhi.n	800d53c <__lshift+0xc0>
 800d548:	e7ea      	b.n	800d520 <__lshift+0xa4>
 800d54a:	bf00      	nop
 800d54c:	0800e6e1 	.word	0x0800e6e1
 800d550:	0800e752 	.word	0x0800e752

0800d554 <__mcmp>:
 800d554:	b530      	push	{r4, r5, lr}
 800d556:	6902      	ldr	r2, [r0, #16]
 800d558:	690c      	ldr	r4, [r1, #16]
 800d55a:	1b12      	subs	r2, r2, r4
 800d55c:	d10e      	bne.n	800d57c <__mcmp+0x28>
 800d55e:	f100 0314 	add.w	r3, r0, #20
 800d562:	3114      	adds	r1, #20
 800d564:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d568:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d56c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d570:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d574:	42a5      	cmp	r5, r4
 800d576:	d003      	beq.n	800d580 <__mcmp+0x2c>
 800d578:	d305      	bcc.n	800d586 <__mcmp+0x32>
 800d57a:	2201      	movs	r2, #1
 800d57c:	4610      	mov	r0, r2
 800d57e:	bd30      	pop	{r4, r5, pc}
 800d580:	4283      	cmp	r3, r0
 800d582:	d3f3      	bcc.n	800d56c <__mcmp+0x18>
 800d584:	e7fa      	b.n	800d57c <__mcmp+0x28>
 800d586:	f04f 32ff 	mov.w	r2, #4294967295
 800d58a:	e7f7      	b.n	800d57c <__mcmp+0x28>

0800d58c <__mdiff>:
 800d58c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d590:	460c      	mov	r4, r1
 800d592:	4606      	mov	r6, r0
 800d594:	4611      	mov	r1, r2
 800d596:	4620      	mov	r0, r4
 800d598:	4690      	mov	r8, r2
 800d59a:	f7ff ffdb 	bl	800d554 <__mcmp>
 800d59e:	1e05      	subs	r5, r0, #0
 800d5a0:	d110      	bne.n	800d5c4 <__mdiff+0x38>
 800d5a2:	4629      	mov	r1, r5
 800d5a4:	4630      	mov	r0, r6
 800d5a6:	f7ff fd0f 	bl	800cfc8 <_Balloc>
 800d5aa:	b930      	cbnz	r0, 800d5ba <__mdiff+0x2e>
 800d5ac:	4b3a      	ldr	r3, [pc, #232]	; (800d698 <__mdiff+0x10c>)
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	f240 2137 	movw	r1, #567	; 0x237
 800d5b4:	4839      	ldr	r0, [pc, #228]	; (800d69c <__mdiff+0x110>)
 800d5b6:	f000 fbe9 	bl	800dd8c <__assert_func>
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d5c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c4:	bfa4      	itt	ge
 800d5c6:	4643      	movge	r3, r8
 800d5c8:	46a0      	movge	r8, r4
 800d5ca:	4630      	mov	r0, r6
 800d5cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d5d0:	bfa6      	itte	ge
 800d5d2:	461c      	movge	r4, r3
 800d5d4:	2500      	movge	r5, #0
 800d5d6:	2501      	movlt	r5, #1
 800d5d8:	f7ff fcf6 	bl	800cfc8 <_Balloc>
 800d5dc:	b920      	cbnz	r0, 800d5e8 <__mdiff+0x5c>
 800d5de:	4b2e      	ldr	r3, [pc, #184]	; (800d698 <__mdiff+0x10c>)
 800d5e0:	4602      	mov	r2, r0
 800d5e2:	f240 2145 	movw	r1, #581	; 0x245
 800d5e6:	e7e5      	b.n	800d5b4 <__mdiff+0x28>
 800d5e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d5ec:	6926      	ldr	r6, [r4, #16]
 800d5ee:	60c5      	str	r5, [r0, #12]
 800d5f0:	f104 0914 	add.w	r9, r4, #20
 800d5f4:	f108 0514 	add.w	r5, r8, #20
 800d5f8:	f100 0e14 	add.w	lr, r0, #20
 800d5fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d600:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d604:	f108 0210 	add.w	r2, r8, #16
 800d608:	46f2      	mov	sl, lr
 800d60a:	2100      	movs	r1, #0
 800d60c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d610:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d614:	fa11 f88b 	uxtah	r8, r1, fp
 800d618:	b299      	uxth	r1, r3
 800d61a:	0c1b      	lsrs	r3, r3, #16
 800d61c:	eba8 0801 	sub.w	r8, r8, r1
 800d620:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d624:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d628:	fa1f f888 	uxth.w	r8, r8
 800d62c:	1419      	asrs	r1, r3, #16
 800d62e:	454e      	cmp	r6, r9
 800d630:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d634:	f84a 3b04 	str.w	r3, [sl], #4
 800d638:	d8e8      	bhi.n	800d60c <__mdiff+0x80>
 800d63a:	1b33      	subs	r3, r6, r4
 800d63c:	3b15      	subs	r3, #21
 800d63e:	f023 0303 	bic.w	r3, r3, #3
 800d642:	3304      	adds	r3, #4
 800d644:	3415      	adds	r4, #21
 800d646:	42a6      	cmp	r6, r4
 800d648:	bf38      	it	cc
 800d64a:	2304      	movcc	r3, #4
 800d64c:	441d      	add	r5, r3
 800d64e:	4473      	add	r3, lr
 800d650:	469e      	mov	lr, r3
 800d652:	462e      	mov	r6, r5
 800d654:	4566      	cmp	r6, ip
 800d656:	d30e      	bcc.n	800d676 <__mdiff+0xea>
 800d658:	f10c 0203 	add.w	r2, ip, #3
 800d65c:	1b52      	subs	r2, r2, r5
 800d65e:	f022 0203 	bic.w	r2, r2, #3
 800d662:	3d03      	subs	r5, #3
 800d664:	45ac      	cmp	ip, r5
 800d666:	bf38      	it	cc
 800d668:	2200      	movcc	r2, #0
 800d66a:	4413      	add	r3, r2
 800d66c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d670:	b17a      	cbz	r2, 800d692 <__mdiff+0x106>
 800d672:	6107      	str	r7, [r0, #16]
 800d674:	e7a4      	b.n	800d5c0 <__mdiff+0x34>
 800d676:	f856 8b04 	ldr.w	r8, [r6], #4
 800d67a:	fa11 f288 	uxtah	r2, r1, r8
 800d67e:	1414      	asrs	r4, r2, #16
 800d680:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d684:	b292      	uxth	r2, r2
 800d686:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d68a:	f84e 2b04 	str.w	r2, [lr], #4
 800d68e:	1421      	asrs	r1, r4, #16
 800d690:	e7e0      	b.n	800d654 <__mdiff+0xc8>
 800d692:	3f01      	subs	r7, #1
 800d694:	e7ea      	b.n	800d66c <__mdiff+0xe0>
 800d696:	bf00      	nop
 800d698:	0800e6e1 	.word	0x0800e6e1
 800d69c:	0800e752 	.word	0x0800e752

0800d6a0 <__ulp>:
 800d6a0:	b082      	sub	sp, #8
 800d6a2:	ed8d 0b00 	vstr	d0, [sp]
 800d6a6:	9a01      	ldr	r2, [sp, #4]
 800d6a8:	4b0f      	ldr	r3, [pc, #60]	; (800d6e8 <__ulp+0x48>)
 800d6aa:	4013      	ands	r3, r2
 800d6ac:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	dc08      	bgt.n	800d6c6 <__ulp+0x26>
 800d6b4:	425b      	negs	r3, r3
 800d6b6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d6ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d6be:	da04      	bge.n	800d6ca <__ulp+0x2a>
 800d6c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d6c4:	4113      	asrs	r3, r2
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	e008      	b.n	800d6dc <__ulp+0x3c>
 800d6ca:	f1a2 0314 	sub.w	r3, r2, #20
 800d6ce:	2b1e      	cmp	r3, #30
 800d6d0:	bfda      	itte	le
 800d6d2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d6d6:	40da      	lsrle	r2, r3
 800d6d8:	2201      	movgt	r2, #1
 800d6da:	2300      	movs	r3, #0
 800d6dc:	4619      	mov	r1, r3
 800d6de:	4610      	mov	r0, r2
 800d6e0:	ec41 0b10 	vmov	d0, r0, r1
 800d6e4:	b002      	add	sp, #8
 800d6e6:	4770      	bx	lr
 800d6e8:	7ff00000 	.word	0x7ff00000

0800d6ec <__b2d>:
 800d6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6f0:	6906      	ldr	r6, [r0, #16]
 800d6f2:	f100 0814 	add.w	r8, r0, #20
 800d6f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d6fa:	1f37      	subs	r7, r6, #4
 800d6fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d700:	4610      	mov	r0, r2
 800d702:	f7ff fd53 	bl	800d1ac <__hi0bits>
 800d706:	f1c0 0320 	rsb	r3, r0, #32
 800d70a:	280a      	cmp	r0, #10
 800d70c:	600b      	str	r3, [r1, #0]
 800d70e:	491b      	ldr	r1, [pc, #108]	; (800d77c <__b2d+0x90>)
 800d710:	dc15      	bgt.n	800d73e <__b2d+0x52>
 800d712:	f1c0 0c0b 	rsb	ip, r0, #11
 800d716:	fa22 f30c 	lsr.w	r3, r2, ip
 800d71a:	45b8      	cmp	r8, r7
 800d71c:	ea43 0501 	orr.w	r5, r3, r1
 800d720:	bf34      	ite	cc
 800d722:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d726:	2300      	movcs	r3, #0
 800d728:	3015      	adds	r0, #21
 800d72a:	fa02 f000 	lsl.w	r0, r2, r0
 800d72e:	fa23 f30c 	lsr.w	r3, r3, ip
 800d732:	4303      	orrs	r3, r0
 800d734:	461c      	mov	r4, r3
 800d736:	ec45 4b10 	vmov	d0, r4, r5
 800d73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d73e:	45b8      	cmp	r8, r7
 800d740:	bf3a      	itte	cc
 800d742:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d746:	f1a6 0708 	subcc.w	r7, r6, #8
 800d74a:	2300      	movcs	r3, #0
 800d74c:	380b      	subs	r0, #11
 800d74e:	d012      	beq.n	800d776 <__b2d+0x8a>
 800d750:	f1c0 0120 	rsb	r1, r0, #32
 800d754:	fa23 f401 	lsr.w	r4, r3, r1
 800d758:	4082      	lsls	r2, r0
 800d75a:	4322      	orrs	r2, r4
 800d75c:	4547      	cmp	r7, r8
 800d75e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800d762:	bf8c      	ite	hi
 800d764:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d768:	2200      	movls	r2, #0
 800d76a:	4083      	lsls	r3, r0
 800d76c:	40ca      	lsrs	r2, r1
 800d76e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d772:	4313      	orrs	r3, r2
 800d774:	e7de      	b.n	800d734 <__b2d+0x48>
 800d776:	ea42 0501 	orr.w	r5, r2, r1
 800d77a:	e7db      	b.n	800d734 <__b2d+0x48>
 800d77c:	3ff00000 	.word	0x3ff00000

0800d780 <__d2b>:
 800d780:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d784:	460f      	mov	r7, r1
 800d786:	2101      	movs	r1, #1
 800d788:	ec59 8b10 	vmov	r8, r9, d0
 800d78c:	4616      	mov	r6, r2
 800d78e:	f7ff fc1b 	bl	800cfc8 <_Balloc>
 800d792:	4604      	mov	r4, r0
 800d794:	b930      	cbnz	r0, 800d7a4 <__d2b+0x24>
 800d796:	4602      	mov	r2, r0
 800d798:	4b24      	ldr	r3, [pc, #144]	; (800d82c <__d2b+0xac>)
 800d79a:	4825      	ldr	r0, [pc, #148]	; (800d830 <__d2b+0xb0>)
 800d79c:	f240 310f 	movw	r1, #783	; 0x30f
 800d7a0:	f000 faf4 	bl	800dd8c <__assert_func>
 800d7a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d7a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d7ac:	bb2d      	cbnz	r5, 800d7fa <__d2b+0x7a>
 800d7ae:	9301      	str	r3, [sp, #4]
 800d7b0:	f1b8 0300 	subs.w	r3, r8, #0
 800d7b4:	d026      	beq.n	800d804 <__d2b+0x84>
 800d7b6:	4668      	mov	r0, sp
 800d7b8:	9300      	str	r3, [sp, #0]
 800d7ba:	f7ff fd17 	bl	800d1ec <__lo0bits>
 800d7be:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d7c2:	b1e8      	cbz	r0, 800d800 <__d2b+0x80>
 800d7c4:	f1c0 0320 	rsb	r3, r0, #32
 800d7c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d7cc:	430b      	orrs	r3, r1
 800d7ce:	40c2      	lsrs	r2, r0
 800d7d0:	6163      	str	r3, [r4, #20]
 800d7d2:	9201      	str	r2, [sp, #4]
 800d7d4:	9b01      	ldr	r3, [sp, #4]
 800d7d6:	61a3      	str	r3, [r4, #24]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	bf14      	ite	ne
 800d7dc:	2202      	movne	r2, #2
 800d7de:	2201      	moveq	r2, #1
 800d7e0:	6122      	str	r2, [r4, #16]
 800d7e2:	b1bd      	cbz	r5, 800d814 <__d2b+0x94>
 800d7e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d7e8:	4405      	add	r5, r0
 800d7ea:	603d      	str	r5, [r7, #0]
 800d7ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d7f0:	6030      	str	r0, [r6, #0]
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	b003      	add	sp, #12
 800d7f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7fe:	e7d6      	b.n	800d7ae <__d2b+0x2e>
 800d800:	6161      	str	r1, [r4, #20]
 800d802:	e7e7      	b.n	800d7d4 <__d2b+0x54>
 800d804:	a801      	add	r0, sp, #4
 800d806:	f7ff fcf1 	bl	800d1ec <__lo0bits>
 800d80a:	9b01      	ldr	r3, [sp, #4]
 800d80c:	6163      	str	r3, [r4, #20]
 800d80e:	3020      	adds	r0, #32
 800d810:	2201      	movs	r2, #1
 800d812:	e7e5      	b.n	800d7e0 <__d2b+0x60>
 800d814:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d818:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d81c:	6038      	str	r0, [r7, #0]
 800d81e:	6918      	ldr	r0, [r3, #16]
 800d820:	f7ff fcc4 	bl	800d1ac <__hi0bits>
 800d824:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d828:	e7e2      	b.n	800d7f0 <__d2b+0x70>
 800d82a:	bf00      	nop
 800d82c:	0800e6e1 	.word	0x0800e6e1
 800d830:	0800e752 	.word	0x0800e752

0800d834 <__ratio>:
 800d834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d838:	4688      	mov	r8, r1
 800d83a:	4669      	mov	r1, sp
 800d83c:	4681      	mov	r9, r0
 800d83e:	f7ff ff55 	bl	800d6ec <__b2d>
 800d842:	a901      	add	r1, sp, #4
 800d844:	4640      	mov	r0, r8
 800d846:	ec55 4b10 	vmov	r4, r5, d0
 800d84a:	f7ff ff4f 	bl	800d6ec <__b2d>
 800d84e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d852:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d856:	eba3 0c02 	sub.w	ip, r3, r2
 800d85a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d85e:	1a9b      	subs	r3, r3, r2
 800d860:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d864:	ec51 0b10 	vmov	r0, r1, d0
 800d868:	2b00      	cmp	r3, #0
 800d86a:	bfd6      	itet	le
 800d86c:	460a      	movle	r2, r1
 800d86e:	462a      	movgt	r2, r5
 800d870:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d874:	468b      	mov	fp, r1
 800d876:	462f      	mov	r7, r5
 800d878:	bfd4      	ite	le
 800d87a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d87e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d882:	4620      	mov	r0, r4
 800d884:	ee10 2a10 	vmov	r2, s0
 800d888:	465b      	mov	r3, fp
 800d88a:	4639      	mov	r1, r7
 800d88c:	f7f2 ffee 	bl	800086c <__aeabi_ddiv>
 800d890:	ec41 0b10 	vmov	d0, r0, r1
 800d894:	b003      	add	sp, #12
 800d896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d89a <__copybits>:
 800d89a:	3901      	subs	r1, #1
 800d89c:	b570      	push	{r4, r5, r6, lr}
 800d89e:	1149      	asrs	r1, r1, #5
 800d8a0:	6914      	ldr	r4, [r2, #16]
 800d8a2:	3101      	adds	r1, #1
 800d8a4:	f102 0314 	add.w	r3, r2, #20
 800d8a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d8ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d8b0:	1f05      	subs	r5, r0, #4
 800d8b2:	42a3      	cmp	r3, r4
 800d8b4:	d30c      	bcc.n	800d8d0 <__copybits+0x36>
 800d8b6:	1aa3      	subs	r3, r4, r2
 800d8b8:	3b11      	subs	r3, #17
 800d8ba:	f023 0303 	bic.w	r3, r3, #3
 800d8be:	3211      	adds	r2, #17
 800d8c0:	42a2      	cmp	r2, r4
 800d8c2:	bf88      	it	hi
 800d8c4:	2300      	movhi	r3, #0
 800d8c6:	4418      	add	r0, r3
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	4288      	cmp	r0, r1
 800d8cc:	d305      	bcc.n	800d8da <__copybits+0x40>
 800d8ce:	bd70      	pop	{r4, r5, r6, pc}
 800d8d0:	f853 6b04 	ldr.w	r6, [r3], #4
 800d8d4:	f845 6f04 	str.w	r6, [r5, #4]!
 800d8d8:	e7eb      	b.n	800d8b2 <__copybits+0x18>
 800d8da:	f840 3b04 	str.w	r3, [r0], #4
 800d8de:	e7f4      	b.n	800d8ca <__copybits+0x30>

0800d8e0 <__any_on>:
 800d8e0:	f100 0214 	add.w	r2, r0, #20
 800d8e4:	6900      	ldr	r0, [r0, #16]
 800d8e6:	114b      	asrs	r3, r1, #5
 800d8e8:	4298      	cmp	r0, r3
 800d8ea:	b510      	push	{r4, lr}
 800d8ec:	db11      	blt.n	800d912 <__any_on+0x32>
 800d8ee:	dd0a      	ble.n	800d906 <__any_on+0x26>
 800d8f0:	f011 011f 	ands.w	r1, r1, #31
 800d8f4:	d007      	beq.n	800d906 <__any_on+0x26>
 800d8f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d8fa:	fa24 f001 	lsr.w	r0, r4, r1
 800d8fe:	fa00 f101 	lsl.w	r1, r0, r1
 800d902:	428c      	cmp	r4, r1
 800d904:	d10b      	bne.n	800d91e <__any_on+0x3e>
 800d906:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d803      	bhi.n	800d916 <__any_on+0x36>
 800d90e:	2000      	movs	r0, #0
 800d910:	bd10      	pop	{r4, pc}
 800d912:	4603      	mov	r3, r0
 800d914:	e7f7      	b.n	800d906 <__any_on+0x26>
 800d916:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d91a:	2900      	cmp	r1, #0
 800d91c:	d0f5      	beq.n	800d90a <__any_on+0x2a>
 800d91e:	2001      	movs	r0, #1
 800d920:	e7f6      	b.n	800d910 <__any_on+0x30>

0800d922 <_malloc_usable_size_r>:
 800d922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d926:	1f18      	subs	r0, r3, #4
 800d928:	2b00      	cmp	r3, #0
 800d92a:	bfbc      	itt	lt
 800d92c:	580b      	ldrlt	r3, [r1, r0]
 800d92e:	18c0      	addlt	r0, r0, r3
 800d930:	4770      	bx	lr

0800d932 <__ascii_wctomb>:
 800d932:	b149      	cbz	r1, 800d948 <__ascii_wctomb+0x16>
 800d934:	2aff      	cmp	r2, #255	; 0xff
 800d936:	bf85      	ittet	hi
 800d938:	238a      	movhi	r3, #138	; 0x8a
 800d93a:	6003      	strhi	r3, [r0, #0]
 800d93c:	700a      	strbls	r2, [r1, #0]
 800d93e:	f04f 30ff 	movhi.w	r0, #4294967295
 800d942:	bf98      	it	ls
 800d944:	2001      	movls	r0, #1
 800d946:	4770      	bx	lr
 800d948:	4608      	mov	r0, r1
 800d94a:	4770      	bx	lr

0800d94c <__ssputs_r>:
 800d94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d950:	688e      	ldr	r6, [r1, #8]
 800d952:	461f      	mov	r7, r3
 800d954:	42be      	cmp	r6, r7
 800d956:	680b      	ldr	r3, [r1, #0]
 800d958:	4682      	mov	sl, r0
 800d95a:	460c      	mov	r4, r1
 800d95c:	4690      	mov	r8, r2
 800d95e:	d82c      	bhi.n	800d9ba <__ssputs_r+0x6e>
 800d960:	898a      	ldrh	r2, [r1, #12]
 800d962:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d966:	d026      	beq.n	800d9b6 <__ssputs_r+0x6a>
 800d968:	6965      	ldr	r5, [r4, #20]
 800d96a:	6909      	ldr	r1, [r1, #16]
 800d96c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d970:	eba3 0901 	sub.w	r9, r3, r1
 800d974:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d978:	1c7b      	adds	r3, r7, #1
 800d97a:	444b      	add	r3, r9
 800d97c:	106d      	asrs	r5, r5, #1
 800d97e:	429d      	cmp	r5, r3
 800d980:	bf38      	it	cc
 800d982:	461d      	movcc	r5, r3
 800d984:	0553      	lsls	r3, r2, #21
 800d986:	d527      	bpl.n	800d9d8 <__ssputs_r+0x8c>
 800d988:	4629      	mov	r1, r5
 800d98a:	f7fc fbe1 	bl	800a150 <_malloc_r>
 800d98e:	4606      	mov	r6, r0
 800d990:	b360      	cbz	r0, 800d9ec <__ssputs_r+0xa0>
 800d992:	6921      	ldr	r1, [r4, #16]
 800d994:	464a      	mov	r2, r9
 800d996:	f7fe f8d1 	bl	800bb3c <memcpy>
 800d99a:	89a3      	ldrh	r3, [r4, #12]
 800d99c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d9a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9a4:	81a3      	strh	r3, [r4, #12]
 800d9a6:	6126      	str	r6, [r4, #16]
 800d9a8:	6165      	str	r5, [r4, #20]
 800d9aa:	444e      	add	r6, r9
 800d9ac:	eba5 0509 	sub.w	r5, r5, r9
 800d9b0:	6026      	str	r6, [r4, #0]
 800d9b2:	60a5      	str	r5, [r4, #8]
 800d9b4:	463e      	mov	r6, r7
 800d9b6:	42be      	cmp	r6, r7
 800d9b8:	d900      	bls.n	800d9bc <__ssputs_r+0x70>
 800d9ba:	463e      	mov	r6, r7
 800d9bc:	6820      	ldr	r0, [r4, #0]
 800d9be:	4632      	mov	r2, r6
 800d9c0:	4641      	mov	r1, r8
 800d9c2:	f000 f9c9 	bl	800dd58 <memmove>
 800d9c6:	68a3      	ldr	r3, [r4, #8]
 800d9c8:	1b9b      	subs	r3, r3, r6
 800d9ca:	60a3      	str	r3, [r4, #8]
 800d9cc:	6823      	ldr	r3, [r4, #0]
 800d9ce:	4433      	add	r3, r6
 800d9d0:	6023      	str	r3, [r4, #0]
 800d9d2:	2000      	movs	r0, #0
 800d9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9d8:	462a      	mov	r2, r5
 800d9da:	f7fc fc4d 	bl	800a278 <_realloc_r>
 800d9de:	4606      	mov	r6, r0
 800d9e0:	2800      	cmp	r0, #0
 800d9e2:	d1e0      	bne.n	800d9a6 <__ssputs_r+0x5a>
 800d9e4:	6921      	ldr	r1, [r4, #16]
 800d9e6:	4650      	mov	r0, sl
 800d9e8:	f7fe ff38 	bl	800c85c <_free_r>
 800d9ec:	230c      	movs	r3, #12
 800d9ee:	f8ca 3000 	str.w	r3, [sl]
 800d9f2:	89a3      	ldrh	r3, [r4, #12]
 800d9f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9f8:	81a3      	strh	r3, [r4, #12]
 800d9fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d9fe:	e7e9      	b.n	800d9d4 <__ssputs_r+0x88>

0800da00 <_svfiprintf_r>:
 800da00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da04:	4698      	mov	r8, r3
 800da06:	898b      	ldrh	r3, [r1, #12]
 800da08:	061b      	lsls	r3, r3, #24
 800da0a:	b09d      	sub	sp, #116	; 0x74
 800da0c:	4607      	mov	r7, r0
 800da0e:	460d      	mov	r5, r1
 800da10:	4614      	mov	r4, r2
 800da12:	d50e      	bpl.n	800da32 <_svfiprintf_r+0x32>
 800da14:	690b      	ldr	r3, [r1, #16]
 800da16:	b963      	cbnz	r3, 800da32 <_svfiprintf_r+0x32>
 800da18:	2140      	movs	r1, #64	; 0x40
 800da1a:	f7fc fb99 	bl	800a150 <_malloc_r>
 800da1e:	6028      	str	r0, [r5, #0]
 800da20:	6128      	str	r0, [r5, #16]
 800da22:	b920      	cbnz	r0, 800da2e <_svfiprintf_r+0x2e>
 800da24:	230c      	movs	r3, #12
 800da26:	603b      	str	r3, [r7, #0]
 800da28:	f04f 30ff 	mov.w	r0, #4294967295
 800da2c:	e0d0      	b.n	800dbd0 <_svfiprintf_r+0x1d0>
 800da2e:	2340      	movs	r3, #64	; 0x40
 800da30:	616b      	str	r3, [r5, #20]
 800da32:	2300      	movs	r3, #0
 800da34:	9309      	str	r3, [sp, #36]	; 0x24
 800da36:	2320      	movs	r3, #32
 800da38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800da40:	2330      	movs	r3, #48	; 0x30
 800da42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dbe8 <_svfiprintf_r+0x1e8>
 800da46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da4a:	f04f 0901 	mov.w	r9, #1
 800da4e:	4623      	mov	r3, r4
 800da50:	469a      	mov	sl, r3
 800da52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da56:	b10a      	cbz	r2, 800da5c <_svfiprintf_r+0x5c>
 800da58:	2a25      	cmp	r2, #37	; 0x25
 800da5a:	d1f9      	bne.n	800da50 <_svfiprintf_r+0x50>
 800da5c:	ebba 0b04 	subs.w	fp, sl, r4
 800da60:	d00b      	beq.n	800da7a <_svfiprintf_r+0x7a>
 800da62:	465b      	mov	r3, fp
 800da64:	4622      	mov	r2, r4
 800da66:	4629      	mov	r1, r5
 800da68:	4638      	mov	r0, r7
 800da6a:	f7ff ff6f 	bl	800d94c <__ssputs_r>
 800da6e:	3001      	adds	r0, #1
 800da70:	f000 80a9 	beq.w	800dbc6 <_svfiprintf_r+0x1c6>
 800da74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da76:	445a      	add	r2, fp
 800da78:	9209      	str	r2, [sp, #36]	; 0x24
 800da7a:	f89a 3000 	ldrb.w	r3, [sl]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	f000 80a1 	beq.w	800dbc6 <_svfiprintf_r+0x1c6>
 800da84:	2300      	movs	r3, #0
 800da86:	f04f 32ff 	mov.w	r2, #4294967295
 800da8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da8e:	f10a 0a01 	add.w	sl, sl, #1
 800da92:	9304      	str	r3, [sp, #16]
 800da94:	9307      	str	r3, [sp, #28]
 800da96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da9a:	931a      	str	r3, [sp, #104]	; 0x68
 800da9c:	4654      	mov	r4, sl
 800da9e:	2205      	movs	r2, #5
 800daa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daa4:	4850      	ldr	r0, [pc, #320]	; (800dbe8 <_svfiprintf_r+0x1e8>)
 800daa6:	f7f2 fba3 	bl	80001f0 <memchr>
 800daaa:	9a04      	ldr	r2, [sp, #16]
 800daac:	b9d8      	cbnz	r0, 800dae6 <_svfiprintf_r+0xe6>
 800daae:	06d0      	lsls	r0, r2, #27
 800dab0:	bf44      	itt	mi
 800dab2:	2320      	movmi	r3, #32
 800dab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dab8:	0711      	lsls	r1, r2, #28
 800daba:	bf44      	itt	mi
 800dabc:	232b      	movmi	r3, #43	; 0x2b
 800dabe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dac2:	f89a 3000 	ldrb.w	r3, [sl]
 800dac6:	2b2a      	cmp	r3, #42	; 0x2a
 800dac8:	d015      	beq.n	800daf6 <_svfiprintf_r+0xf6>
 800daca:	9a07      	ldr	r2, [sp, #28]
 800dacc:	4654      	mov	r4, sl
 800dace:	2000      	movs	r0, #0
 800dad0:	f04f 0c0a 	mov.w	ip, #10
 800dad4:	4621      	mov	r1, r4
 800dad6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dada:	3b30      	subs	r3, #48	; 0x30
 800dadc:	2b09      	cmp	r3, #9
 800dade:	d94d      	bls.n	800db7c <_svfiprintf_r+0x17c>
 800dae0:	b1b0      	cbz	r0, 800db10 <_svfiprintf_r+0x110>
 800dae2:	9207      	str	r2, [sp, #28]
 800dae4:	e014      	b.n	800db10 <_svfiprintf_r+0x110>
 800dae6:	eba0 0308 	sub.w	r3, r0, r8
 800daea:	fa09 f303 	lsl.w	r3, r9, r3
 800daee:	4313      	orrs	r3, r2
 800daf0:	9304      	str	r3, [sp, #16]
 800daf2:	46a2      	mov	sl, r4
 800daf4:	e7d2      	b.n	800da9c <_svfiprintf_r+0x9c>
 800daf6:	9b03      	ldr	r3, [sp, #12]
 800daf8:	1d19      	adds	r1, r3, #4
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	9103      	str	r1, [sp, #12]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	bfbb      	ittet	lt
 800db02:	425b      	neglt	r3, r3
 800db04:	f042 0202 	orrlt.w	r2, r2, #2
 800db08:	9307      	strge	r3, [sp, #28]
 800db0a:	9307      	strlt	r3, [sp, #28]
 800db0c:	bfb8      	it	lt
 800db0e:	9204      	strlt	r2, [sp, #16]
 800db10:	7823      	ldrb	r3, [r4, #0]
 800db12:	2b2e      	cmp	r3, #46	; 0x2e
 800db14:	d10c      	bne.n	800db30 <_svfiprintf_r+0x130>
 800db16:	7863      	ldrb	r3, [r4, #1]
 800db18:	2b2a      	cmp	r3, #42	; 0x2a
 800db1a:	d134      	bne.n	800db86 <_svfiprintf_r+0x186>
 800db1c:	9b03      	ldr	r3, [sp, #12]
 800db1e:	1d1a      	adds	r2, r3, #4
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	9203      	str	r2, [sp, #12]
 800db24:	2b00      	cmp	r3, #0
 800db26:	bfb8      	it	lt
 800db28:	f04f 33ff 	movlt.w	r3, #4294967295
 800db2c:	3402      	adds	r4, #2
 800db2e:	9305      	str	r3, [sp, #20]
 800db30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dbf8 <_svfiprintf_r+0x1f8>
 800db34:	7821      	ldrb	r1, [r4, #0]
 800db36:	2203      	movs	r2, #3
 800db38:	4650      	mov	r0, sl
 800db3a:	f7f2 fb59 	bl	80001f0 <memchr>
 800db3e:	b138      	cbz	r0, 800db50 <_svfiprintf_r+0x150>
 800db40:	9b04      	ldr	r3, [sp, #16]
 800db42:	eba0 000a 	sub.w	r0, r0, sl
 800db46:	2240      	movs	r2, #64	; 0x40
 800db48:	4082      	lsls	r2, r0
 800db4a:	4313      	orrs	r3, r2
 800db4c:	3401      	adds	r4, #1
 800db4e:	9304      	str	r3, [sp, #16]
 800db50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db54:	4825      	ldr	r0, [pc, #148]	; (800dbec <_svfiprintf_r+0x1ec>)
 800db56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db5a:	2206      	movs	r2, #6
 800db5c:	f7f2 fb48 	bl	80001f0 <memchr>
 800db60:	2800      	cmp	r0, #0
 800db62:	d038      	beq.n	800dbd6 <_svfiprintf_r+0x1d6>
 800db64:	4b22      	ldr	r3, [pc, #136]	; (800dbf0 <_svfiprintf_r+0x1f0>)
 800db66:	bb1b      	cbnz	r3, 800dbb0 <_svfiprintf_r+0x1b0>
 800db68:	9b03      	ldr	r3, [sp, #12]
 800db6a:	3307      	adds	r3, #7
 800db6c:	f023 0307 	bic.w	r3, r3, #7
 800db70:	3308      	adds	r3, #8
 800db72:	9303      	str	r3, [sp, #12]
 800db74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db76:	4433      	add	r3, r6
 800db78:	9309      	str	r3, [sp, #36]	; 0x24
 800db7a:	e768      	b.n	800da4e <_svfiprintf_r+0x4e>
 800db7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800db80:	460c      	mov	r4, r1
 800db82:	2001      	movs	r0, #1
 800db84:	e7a6      	b.n	800dad4 <_svfiprintf_r+0xd4>
 800db86:	2300      	movs	r3, #0
 800db88:	3401      	adds	r4, #1
 800db8a:	9305      	str	r3, [sp, #20]
 800db8c:	4619      	mov	r1, r3
 800db8e:	f04f 0c0a 	mov.w	ip, #10
 800db92:	4620      	mov	r0, r4
 800db94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db98:	3a30      	subs	r2, #48	; 0x30
 800db9a:	2a09      	cmp	r2, #9
 800db9c:	d903      	bls.n	800dba6 <_svfiprintf_r+0x1a6>
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d0c6      	beq.n	800db30 <_svfiprintf_r+0x130>
 800dba2:	9105      	str	r1, [sp, #20]
 800dba4:	e7c4      	b.n	800db30 <_svfiprintf_r+0x130>
 800dba6:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbaa:	4604      	mov	r4, r0
 800dbac:	2301      	movs	r3, #1
 800dbae:	e7f0      	b.n	800db92 <_svfiprintf_r+0x192>
 800dbb0:	ab03      	add	r3, sp, #12
 800dbb2:	9300      	str	r3, [sp, #0]
 800dbb4:	462a      	mov	r2, r5
 800dbb6:	4b0f      	ldr	r3, [pc, #60]	; (800dbf4 <_svfiprintf_r+0x1f4>)
 800dbb8:	a904      	add	r1, sp, #16
 800dbba:	4638      	mov	r0, r7
 800dbbc:	f7fd fa44 	bl	800b048 <_printf_float>
 800dbc0:	1c42      	adds	r2, r0, #1
 800dbc2:	4606      	mov	r6, r0
 800dbc4:	d1d6      	bne.n	800db74 <_svfiprintf_r+0x174>
 800dbc6:	89ab      	ldrh	r3, [r5, #12]
 800dbc8:	065b      	lsls	r3, r3, #25
 800dbca:	f53f af2d 	bmi.w	800da28 <_svfiprintf_r+0x28>
 800dbce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbd0:	b01d      	add	sp, #116	; 0x74
 800dbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbd6:	ab03      	add	r3, sp, #12
 800dbd8:	9300      	str	r3, [sp, #0]
 800dbda:	462a      	mov	r2, r5
 800dbdc:	4b05      	ldr	r3, [pc, #20]	; (800dbf4 <_svfiprintf_r+0x1f4>)
 800dbde:	a904      	add	r1, sp, #16
 800dbe0:	4638      	mov	r0, r7
 800dbe2:	f7fd fcd5 	bl	800b590 <_printf_i>
 800dbe6:	e7eb      	b.n	800dbc0 <_svfiprintf_r+0x1c0>
 800dbe8:	0800e8ac 	.word	0x0800e8ac
 800dbec:	0800e8b6 	.word	0x0800e8b6
 800dbf0:	0800b049 	.word	0x0800b049
 800dbf4:	0800d94d 	.word	0x0800d94d
 800dbf8:	0800e8b2 	.word	0x0800e8b2

0800dbfc <__sflush_r>:
 800dbfc:	898a      	ldrh	r2, [r1, #12]
 800dbfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc02:	4605      	mov	r5, r0
 800dc04:	0710      	lsls	r0, r2, #28
 800dc06:	460c      	mov	r4, r1
 800dc08:	d458      	bmi.n	800dcbc <__sflush_r+0xc0>
 800dc0a:	684b      	ldr	r3, [r1, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	dc05      	bgt.n	800dc1c <__sflush_r+0x20>
 800dc10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	dc02      	bgt.n	800dc1c <__sflush_r+0x20>
 800dc16:	2000      	movs	r0, #0
 800dc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc1e:	2e00      	cmp	r6, #0
 800dc20:	d0f9      	beq.n	800dc16 <__sflush_r+0x1a>
 800dc22:	2300      	movs	r3, #0
 800dc24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc28:	682f      	ldr	r7, [r5, #0]
 800dc2a:	6a21      	ldr	r1, [r4, #32]
 800dc2c:	602b      	str	r3, [r5, #0]
 800dc2e:	d032      	beq.n	800dc96 <__sflush_r+0x9a>
 800dc30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc32:	89a3      	ldrh	r3, [r4, #12]
 800dc34:	075a      	lsls	r2, r3, #29
 800dc36:	d505      	bpl.n	800dc44 <__sflush_r+0x48>
 800dc38:	6863      	ldr	r3, [r4, #4]
 800dc3a:	1ac0      	subs	r0, r0, r3
 800dc3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc3e:	b10b      	cbz	r3, 800dc44 <__sflush_r+0x48>
 800dc40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc42:	1ac0      	subs	r0, r0, r3
 800dc44:	2300      	movs	r3, #0
 800dc46:	4602      	mov	r2, r0
 800dc48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc4a:	6a21      	ldr	r1, [r4, #32]
 800dc4c:	4628      	mov	r0, r5
 800dc4e:	47b0      	blx	r6
 800dc50:	1c43      	adds	r3, r0, #1
 800dc52:	89a3      	ldrh	r3, [r4, #12]
 800dc54:	d106      	bne.n	800dc64 <__sflush_r+0x68>
 800dc56:	6829      	ldr	r1, [r5, #0]
 800dc58:	291d      	cmp	r1, #29
 800dc5a:	d82b      	bhi.n	800dcb4 <__sflush_r+0xb8>
 800dc5c:	4a29      	ldr	r2, [pc, #164]	; (800dd04 <__sflush_r+0x108>)
 800dc5e:	410a      	asrs	r2, r1
 800dc60:	07d6      	lsls	r6, r2, #31
 800dc62:	d427      	bmi.n	800dcb4 <__sflush_r+0xb8>
 800dc64:	2200      	movs	r2, #0
 800dc66:	6062      	str	r2, [r4, #4]
 800dc68:	04d9      	lsls	r1, r3, #19
 800dc6a:	6922      	ldr	r2, [r4, #16]
 800dc6c:	6022      	str	r2, [r4, #0]
 800dc6e:	d504      	bpl.n	800dc7a <__sflush_r+0x7e>
 800dc70:	1c42      	adds	r2, r0, #1
 800dc72:	d101      	bne.n	800dc78 <__sflush_r+0x7c>
 800dc74:	682b      	ldr	r3, [r5, #0]
 800dc76:	b903      	cbnz	r3, 800dc7a <__sflush_r+0x7e>
 800dc78:	6560      	str	r0, [r4, #84]	; 0x54
 800dc7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc7c:	602f      	str	r7, [r5, #0]
 800dc7e:	2900      	cmp	r1, #0
 800dc80:	d0c9      	beq.n	800dc16 <__sflush_r+0x1a>
 800dc82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc86:	4299      	cmp	r1, r3
 800dc88:	d002      	beq.n	800dc90 <__sflush_r+0x94>
 800dc8a:	4628      	mov	r0, r5
 800dc8c:	f7fe fde6 	bl	800c85c <_free_r>
 800dc90:	2000      	movs	r0, #0
 800dc92:	6360      	str	r0, [r4, #52]	; 0x34
 800dc94:	e7c0      	b.n	800dc18 <__sflush_r+0x1c>
 800dc96:	2301      	movs	r3, #1
 800dc98:	4628      	mov	r0, r5
 800dc9a:	47b0      	blx	r6
 800dc9c:	1c41      	adds	r1, r0, #1
 800dc9e:	d1c8      	bne.n	800dc32 <__sflush_r+0x36>
 800dca0:	682b      	ldr	r3, [r5, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d0c5      	beq.n	800dc32 <__sflush_r+0x36>
 800dca6:	2b1d      	cmp	r3, #29
 800dca8:	d001      	beq.n	800dcae <__sflush_r+0xb2>
 800dcaa:	2b16      	cmp	r3, #22
 800dcac:	d101      	bne.n	800dcb2 <__sflush_r+0xb6>
 800dcae:	602f      	str	r7, [r5, #0]
 800dcb0:	e7b1      	b.n	800dc16 <__sflush_r+0x1a>
 800dcb2:	89a3      	ldrh	r3, [r4, #12]
 800dcb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcb8:	81a3      	strh	r3, [r4, #12]
 800dcba:	e7ad      	b.n	800dc18 <__sflush_r+0x1c>
 800dcbc:	690f      	ldr	r7, [r1, #16]
 800dcbe:	2f00      	cmp	r7, #0
 800dcc0:	d0a9      	beq.n	800dc16 <__sflush_r+0x1a>
 800dcc2:	0793      	lsls	r3, r2, #30
 800dcc4:	680e      	ldr	r6, [r1, #0]
 800dcc6:	bf08      	it	eq
 800dcc8:	694b      	ldreq	r3, [r1, #20]
 800dcca:	600f      	str	r7, [r1, #0]
 800dccc:	bf18      	it	ne
 800dcce:	2300      	movne	r3, #0
 800dcd0:	eba6 0807 	sub.w	r8, r6, r7
 800dcd4:	608b      	str	r3, [r1, #8]
 800dcd6:	f1b8 0f00 	cmp.w	r8, #0
 800dcda:	dd9c      	ble.n	800dc16 <__sflush_r+0x1a>
 800dcdc:	6a21      	ldr	r1, [r4, #32]
 800dcde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dce0:	4643      	mov	r3, r8
 800dce2:	463a      	mov	r2, r7
 800dce4:	4628      	mov	r0, r5
 800dce6:	47b0      	blx	r6
 800dce8:	2800      	cmp	r0, #0
 800dcea:	dc06      	bgt.n	800dcfa <__sflush_r+0xfe>
 800dcec:	89a3      	ldrh	r3, [r4, #12]
 800dcee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcf2:	81a3      	strh	r3, [r4, #12]
 800dcf4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcf8:	e78e      	b.n	800dc18 <__sflush_r+0x1c>
 800dcfa:	4407      	add	r7, r0
 800dcfc:	eba8 0800 	sub.w	r8, r8, r0
 800dd00:	e7e9      	b.n	800dcd6 <__sflush_r+0xda>
 800dd02:	bf00      	nop
 800dd04:	dfbffffe 	.word	0xdfbffffe

0800dd08 <_fflush_r>:
 800dd08:	b538      	push	{r3, r4, r5, lr}
 800dd0a:	690b      	ldr	r3, [r1, #16]
 800dd0c:	4605      	mov	r5, r0
 800dd0e:	460c      	mov	r4, r1
 800dd10:	b913      	cbnz	r3, 800dd18 <_fflush_r+0x10>
 800dd12:	2500      	movs	r5, #0
 800dd14:	4628      	mov	r0, r5
 800dd16:	bd38      	pop	{r3, r4, r5, pc}
 800dd18:	b118      	cbz	r0, 800dd22 <_fflush_r+0x1a>
 800dd1a:	6a03      	ldr	r3, [r0, #32]
 800dd1c:	b90b      	cbnz	r3, 800dd22 <_fflush_r+0x1a>
 800dd1e:	f7fd fdd3 	bl	800b8c8 <__sinit>
 800dd22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d0f3      	beq.n	800dd12 <_fflush_r+0xa>
 800dd2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd2c:	07d0      	lsls	r0, r2, #31
 800dd2e:	d404      	bmi.n	800dd3a <_fflush_r+0x32>
 800dd30:	0599      	lsls	r1, r3, #22
 800dd32:	d402      	bmi.n	800dd3a <_fflush_r+0x32>
 800dd34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd36:	f7fd feff 	bl	800bb38 <__retarget_lock_acquire_recursive>
 800dd3a:	4628      	mov	r0, r5
 800dd3c:	4621      	mov	r1, r4
 800dd3e:	f7ff ff5d 	bl	800dbfc <__sflush_r>
 800dd42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd44:	07da      	lsls	r2, r3, #31
 800dd46:	4605      	mov	r5, r0
 800dd48:	d4e4      	bmi.n	800dd14 <_fflush_r+0xc>
 800dd4a:	89a3      	ldrh	r3, [r4, #12]
 800dd4c:	059b      	lsls	r3, r3, #22
 800dd4e:	d4e1      	bmi.n	800dd14 <_fflush_r+0xc>
 800dd50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd52:	f7fd fef2 	bl	800bb3a <__retarget_lock_release_recursive>
 800dd56:	e7dd      	b.n	800dd14 <_fflush_r+0xc>

0800dd58 <memmove>:
 800dd58:	4288      	cmp	r0, r1
 800dd5a:	b510      	push	{r4, lr}
 800dd5c:	eb01 0402 	add.w	r4, r1, r2
 800dd60:	d902      	bls.n	800dd68 <memmove+0x10>
 800dd62:	4284      	cmp	r4, r0
 800dd64:	4623      	mov	r3, r4
 800dd66:	d807      	bhi.n	800dd78 <memmove+0x20>
 800dd68:	1e43      	subs	r3, r0, #1
 800dd6a:	42a1      	cmp	r1, r4
 800dd6c:	d008      	beq.n	800dd80 <memmove+0x28>
 800dd6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd76:	e7f8      	b.n	800dd6a <memmove+0x12>
 800dd78:	4402      	add	r2, r0
 800dd7a:	4601      	mov	r1, r0
 800dd7c:	428a      	cmp	r2, r1
 800dd7e:	d100      	bne.n	800dd82 <memmove+0x2a>
 800dd80:	bd10      	pop	{r4, pc}
 800dd82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd8a:	e7f7      	b.n	800dd7c <memmove+0x24>

0800dd8c <__assert_func>:
 800dd8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd8e:	4614      	mov	r4, r2
 800dd90:	461a      	mov	r2, r3
 800dd92:	4b09      	ldr	r3, [pc, #36]	; (800ddb8 <__assert_func+0x2c>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	4605      	mov	r5, r0
 800dd98:	68d8      	ldr	r0, [r3, #12]
 800dd9a:	b14c      	cbz	r4, 800ddb0 <__assert_func+0x24>
 800dd9c:	4b07      	ldr	r3, [pc, #28]	; (800ddbc <__assert_func+0x30>)
 800dd9e:	9100      	str	r1, [sp, #0]
 800dda0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dda4:	4906      	ldr	r1, [pc, #24]	; (800ddc0 <__assert_func+0x34>)
 800dda6:	462b      	mov	r3, r5
 800dda8:	f000 f824 	bl	800ddf4 <fiprintf>
 800ddac:	f000 f834 	bl	800de18 <abort>
 800ddb0:	4b04      	ldr	r3, [pc, #16]	; (800ddc4 <__assert_func+0x38>)
 800ddb2:	461c      	mov	r4, r3
 800ddb4:	e7f3      	b.n	800dd9e <__assert_func+0x12>
 800ddb6:	bf00      	nop
 800ddb8:	2000023c 	.word	0x2000023c
 800ddbc:	0800e8bd 	.word	0x0800e8bd
 800ddc0:	0800e8ca 	.word	0x0800e8ca
 800ddc4:	0800e8f8 	.word	0x0800e8f8

0800ddc8 <_calloc_r>:
 800ddc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddca:	fba1 2402 	umull	r2, r4, r1, r2
 800ddce:	b94c      	cbnz	r4, 800dde4 <_calloc_r+0x1c>
 800ddd0:	4611      	mov	r1, r2
 800ddd2:	9201      	str	r2, [sp, #4]
 800ddd4:	f7fc f9bc 	bl	800a150 <_malloc_r>
 800ddd8:	9a01      	ldr	r2, [sp, #4]
 800ddda:	4605      	mov	r5, r0
 800dddc:	b930      	cbnz	r0, 800ddec <_calloc_r+0x24>
 800ddde:	4628      	mov	r0, r5
 800dde0:	b003      	add	sp, #12
 800dde2:	bd30      	pop	{r4, r5, pc}
 800dde4:	220c      	movs	r2, #12
 800dde6:	6002      	str	r2, [r0, #0]
 800dde8:	2500      	movs	r5, #0
 800ddea:	e7f8      	b.n	800ddde <_calloc_r+0x16>
 800ddec:	4621      	mov	r1, r4
 800ddee:	f7fd fe04 	bl	800b9fa <memset>
 800ddf2:	e7f4      	b.n	800ddde <_calloc_r+0x16>

0800ddf4 <fiprintf>:
 800ddf4:	b40e      	push	{r1, r2, r3}
 800ddf6:	b503      	push	{r0, r1, lr}
 800ddf8:	4601      	mov	r1, r0
 800ddfa:	ab03      	add	r3, sp, #12
 800ddfc:	4805      	ldr	r0, [pc, #20]	; (800de14 <fiprintf+0x20>)
 800ddfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800de02:	6800      	ldr	r0, [r0, #0]
 800de04:	9301      	str	r3, [sp, #4]
 800de06:	f000 f837 	bl	800de78 <_vfiprintf_r>
 800de0a:	b002      	add	sp, #8
 800de0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800de10:	b003      	add	sp, #12
 800de12:	4770      	bx	lr
 800de14:	2000023c 	.word	0x2000023c

0800de18 <abort>:
 800de18:	b508      	push	{r3, lr}
 800de1a:	2006      	movs	r0, #6
 800de1c:	f000 fa04 	bl	800e228 <raise>
 800de20:	2001      	movs	r0, #1
 800de22:	f7f5 fb97 	bl	8003554 <_exit>

0800de26 <__sfputc_r>:
 800de26:	6893      	ldr	r3, [r2, #8]
 800de28:	3b01      	subs	r3, #1
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	b410      	push	{r4}
 800de2e:	6093      	str	r3, [r2, #8]
 800de30:	da08      	bge.n	800de44 <__sfputc_r+0x1e>
 800de32:	6994      	ldr	r4, [r2, #24]
 800de34:	42a3      	cmp	r3, r4
 800de36:	db01      	blt.n	800de3c <__sfputc_r+0x16>
 800de38:	290a      	cmp	r1, #10
 800de3a:	d103      	bne.n	800de44 <__sfputc_r+0x1e>
 800de3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de40:	f000 b934 	b.w	800e0ac <__swbuf_r>
 800de44:	6813      	ldr	r3, [r2, #0]
 800de46:	1c58      	adds	r0, r3, #1
 800de48:	6010      	str	r0, [r2, #0]
 800de4a:	7019      	strb	r1, [r3, #0]
 800de4c:	4608      	mov	r0, r1
 800de4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de52:	4770      	bx	lr

0800de54 <__sfputs_r>:
 800de54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de56:	4606      	mov	r6, r0
 800de58:	460f      	mov	r7, r1
 800de5a:	4614      	mov	r4, r2
 800de5c:	18d5      	adds	r5, r2, r3
 800de5e:	42ac      	cmp	r4, r5
 800de60:	d101      	bne.n	800de66 <__sfputs_r+0x12>
 800de62:	2000      	movs	r0, #0
 800de64:	e007      	b.n	800de76 <__sfputs_r+0x22>
 800de66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de6a:	463a      	mov	r2, r7
 800de6c:	4630      	mov	r0, r6
 800de6e:	f7ff ffda 	bl	800de26 <__sfputc_r>
 800de72:	1c43      	adds	r3, r0, #1
 800de74:	d1f3      	bne.n	800de5e <__sfputs_r+0xa>
 800de76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800de78 <_vfiprintf_r>:
 800de78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de7c:	460d      	mov	r5, r1
 800de7e:	b09d      	sub	sp, #116	; 0x74
 800de80:	4614      	mov	r4, r2
 800de82:	4698      	mov	r8, r3
 800de84:	4606      	mov	r6, r0
 800de86:	b118      	cbz	r0, 800de90 <_vfiprintf_r+0x18>
 800de88:	6a03      	ldr	r3, [r0, #32]
 800de8a:	b90b      	cbnz	r3, 800de90 <_vfiprintf_r+0x18>
 800de8c:	f7fd fd1c 	bl	800b8c8 <__sinit>
 800de90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de92:	07d9      	lsls	r1, r3, #31
 800de94:	d405      	bmi.n	800dea2 <_vfiprintf_r+0x2a>
 800de96:	89ab      	ldrh	r3, [r5, #12]
 800de98:	059a      	lsls	r2, r3, #22
 800de9a:	d402      	bmi.n	800dea2 <_vfiprintf_r+0x2a>
 800de9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de9e:	f7fd fe4b 	bl	800bb38 <__retarget_lock_acquire_recursive>
 800dea2:	89ab      	ldrh	r3, [r5, #12]
 800dea4:	071b      	lsls	r3, r3, #28
 800dea6:	d501      	bpl.n	800deac <_vfiprintf_r+0x34>
 800dea8:	692b      	ldr	r3, [r5, #16]
 800deaa:	b99b      	cbnz	r3, 800ded4 <_vfiprintf_r+0x5c>
 800deac:	4629      	mov	r1, r5
 800deae:	4630      	mov	r0, r6
 800deb0:	f000 f93a 	bl	800e128 <__swsetup_r>
 800deb4:	b170      	cbz	r0, 800ded4 <_vfiprintf_r+0x5c>
 800deb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800deb8:	07dc      	lsls	r4, r3, #31
 800deba:	d504      	bpl.n	800dec6 <_vfiprintf_r+0x4e>
 800debc:	f04f 30ff 	mov.w	r0, #4294967295
 800dec0:	b01d      	add	sp, #116	; 0x74
 800dec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dec6:	89ab      	ldrh	r3, [r5, #12]
 800dec8:	0598      	lsls	r0, r3, #22
 800deca:	d4f7      	bmi.n	800debc <_vfiprintf_r+0x44>
 800decc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dece:	f7fd fe34 	bl	800bb3a <__retarget_lock_release_recursive>
 800ded2:	e7f3      	b.n	800debc <_vfiprintf_r+0x44>
 800ded4:	2300      	movs	r3, #0
 800ded6:	9309      	str	r3, [sp, #36]	; 0x24
 800ded8:	2320      	movs	r3, #32
 800deda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dede:	f8cd 800c 	str.w	r8, [sp, #12]
 800dee2:	2330      	movs	r3, #48	; 0x30
 800dee4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e098 <_vfiprintf_r+0x220>
 800dee8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800deec:	f04f 0901 	mov.w	r9, #1
 800def0:	4623      	mov	r3, r4
 800def2:	469a      	mov	sl, r3
 800def4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800def8:	b10a      	cbz	r2, 800defe <_vfiprintf_r+0x86>
 800defa:	2a25      	cmp	r2, #37	; 0x25
 800defc:	d1f9      	bne.n	800def2 <_vfiprintf_r+0x7a>
 800defe:	ebba 0b04 	subs.w	fp, sl, r4
 800df02:	d00b      	beq.n	800df1c <_vfiprintf_r+0xa4>
 800df04:	465b      	mov	r3, fp
 800df06:	4622      	mov	r2, r4
 800df08:	4629      	mov	r1, r5
 800df0a:	4630      	mov	r0, r6
 800df0c:	f7ff ffa2 	bl	800de54 <__sfputs_r>
 800df10:	3001      	adds	r0, #1
 800df12:	f000 80a9 	beq.w	800e068 <_vfiprintf_r+0x1f0>
 800df16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df18:	445a      	add	r2, fp
 800df1a:	9209      	str	r2, [sp, #36]	; 0x24
 800df1c:	f89a 3000 	ldrb.w	r3, [sl]
 800df20:	2b00      	cmp	r3, #0
 800df22:	f000 80a1 	beq.w	800e068 <_vfiprintf_r+0x1f0>
 800df26:	2300      	movs	r3, #0
 800df28:	f04f 32ff 	mov.w	r2, #4294967295
 800df2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df30:	f10a 0a01 	add.w	sl, sl, #1
 800df34:	9304      	str	r3, [sp, #16]
 800df36:	9307      	str	r3, [sp, #28]
 800df38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df3c:	931a      	str	r3, [sp, #104]	; 0x68
 800df3e:	4654      	mov	r4, sl
 800df40:	2205      	movs	r2, #5
 800df42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df46:	4854      	ldr	r0, [pc, #336]	; (800e098 <_vfiprintf_r+0x220>)
 800df48:	f7f2 f952 	bl	80001f0 <memchr>
 800df4c:	9a04      	ldr	r2, [sp, #16]
 800df4e:	b9d8      	cbnz	r0, 800df88 <_vfiprintf_r+0x110>
 800df50:	06d1      	lsls	r1, r2, #27
 800df52:	bf44      	itt	mi
 800df54:	2320      	movmi	r3, #32
 800df56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df5a:	0713      	lsls	r3, r2, #28
 800df5c:	bf44      	itt	mi
 800df5e:	232b      	movmi	r3, #43	; 0x2b
 800df60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df64:	f89a 3000 	ldrb.w	r3, [sl]
 800df68:	2b2a      	cmp	r3, #42	; 0x2a
 800df6a:	d015      	beq.n	800df98 <_vfiprintf_r+0x120>
 800df6c:	9a07      	ldr	r2, [sp, #28]
 800df6e:	4654      	mov	r4, sl
 800df70:	2000      	movs	r0, #0
 800df72:	f04f 0c0a 	mov.w	ip, #10
 800df76:	4621      	mov	r1, r4
 800df78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df7c:	3b30      	subs	r3, #48	; 0x30
 800df7e:	2b09      	cmp	r3, #9
 800df80:	d94d      	bls.n	800e01e <_vfiprintf_r+0x1a6>
 800df82:	b1b0      	cbz	r0, 800dfb2 <_vfiprintf_r+0x13a>
 800df84:	9207      	str	r2, [sp, #28]
 800df86:	e014      	b.n	800dfb2 <_vfiprintf_r+0x13a>
 800df88:	eba0 0308 	sub.w	r3, r0, r8
 800df8c:	fa09 f303 	lsl.w	r3, r9, r3
 800df90:	4313      	orrs	r3, r2
 800df92:	9304      	str	r3, [sp, #16]
 800df94:	46a2      	mov	sl, r4
 800df96:	e7d2      	b.n	800df3e <_vfiprintf_r+0xc6>
 800df98:	9b03      	ldr	r3, [sp, #12]
 800df9a:	1d19      	adds	r1, r3, #4
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	9103      	str	r1, [sp, #12]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	bfbb      	ittet	lt
 800dfa4:	425b      	neglt	r3, r3
 800dfa6:	f042 0202 	orrlt.w	r2, r2, #2
 800dfaa:	9307      	strge	r3, [sp, #28]
 800dfac:	9307      	strlt	r3, [sp, #28]
 800dfae:	bfb8      	it	lt
 800dfb0:	9204      	strlt	r2, [sp, #16]
 800dfb2:	7823      	ldrb	r3, [r4, #0]
 800dfb4:	2b2e      	cmp	r3, #46	; 0x2e
 800dfb6:	d10c      	bne.n	800dfd2 <_vfiprintf_r+0x15a>
 800dfb8:	7863      	ldrb	r3, [r4, #1]
 800dfba:	2b2a      	cmp	r3, #42	; 0x2a
 800dfbc:	d134      	bne.n	800e028 <_vfiprintf_r+0x1b0>
 800dfbe:	9b03      	ldr	r3, [sp, #12]
 800dfc0:	1d1a      	adds	r2, r3, #4
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	9203      	str	r2, [sp, #12]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	bfb8      	it	lt
 800dfca:	f04f 33ff 	movlt.w	r3, #4294967295
 800dfce:	3402      	adds	r4, #2
 800dfd0:	9305      	str	r3, [sp, #20]
 800dfd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e0a8 <_vfiprintf_r+0x230>
 800dfd6:	7821      	ldrb	r1, [r4, #0]
 800dfd8:	2203      	movs	r2, #3
 800dfda:	4650      	mov	r0, sl
 800dfdc:	f7f2 f908 	bl	80001f0 <memchr>
 800dfe0:	b138      	cbz	r0, 800dff2 <_vfiprintf_r+0x17a>
 800dfe2:	9b04      	ldr	r3, [sp, #16]
 800dfe4:	eba0 000a 	sub.w	r0, r0, sl
 800dfe8:	2240      	movs	r2, #64	; 0x40
 800dfea:	4082      	lsls	r2, r0
 800dfec:	4313      	orrs	r3, r2
 800dfee:	3401      	adds	r4, #1
 800dff0:	9304      	str	r3, [sp, #16]
 800dff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dff6:	4829      	ldr	r0, [pc, #164]	; (800e09c <_vfiprintf_r+0x224>)
 800dff8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dffc:	2206      	movs	r2, #6
 800dffe:	f7f2 f8f7 	bl	80001f0 <memchr>
 800e002:	2800      	cmp	r0, #0
 800e004:	d03f      	beq.n	800e086 <_vfiprintf_r+0x20e>
 800e006:	4b26      	ldr	r3, [pc, #152]	; (800e0a0 <_vfiprintf_r+0x228>)
 800e008:	bb1b      	cbnz	r3, 800e052 <_vfiprintf_r+0x1da>
 800e00a:	9b03      	ldr	r3, [sp, #12]
 800e00c:	3307      	adds	r3, #7
 800e00e:	f023 0307 	bic.w	r3, r3, #7
 800e012:	3308      	adds	r3, #8
 800e014:	9303      	str	r3, [sp, #12]
 800e016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e018:	443b      	add	r3, r7
 800e01a:	9309      	str	r3, [sp, #36]	; 0x24
 800e01c:	e768      	b.n	800def0 <_vfiprintf_r+0x78>
 800e01e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e022:	460c      	mov	r4, r1
 800e024:	2001      	movs	r0, #1
 800e026:	e7a6      	b.n	800df76 <_vfiprintf_r+0xfe>
 800e028:	2300      	movs	r3, #0
 800e02a:	3401      	adds	r4, #1
 800e02c:	9305      	str	r3, [sp, #20]
 800e02e:	4619      	mov	r1, r3
 800e030:	f04f 0c0a 	mov.w	ip, #10
 800e034:	4620      	mov	r0, r4
 800e036:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e03a:	3a30      	subs	r2, #48	; 0x30
 800e03c:	2a09      	cmp	r2, #9
 800e03e:	d903      	bls.n	800e048 <_vfiprintf_r+0x1d0>
 800e040:	2b00      	cmp	r3, #0
 800e042:	d0c6      	beq.n	800dfd2 <_vfiprintf_r+0x15a>
 800e044:	9105      	str	r1, [sp, #20]
 800e046:	e7c4      	b.n	800dfd2 <_vfiprintf_r+0x15a>
 800e048:	fb0c 2101 	mla	r1, ip, r1, r2
 800e04c:	4604      	mov	r4, r0
 800e04e:	2301      	movs	r3, #1
 800e050:	e7f0      	b.n	800e034 <_vfiprintf_r+0x1bc>
 800e052:	ab03      	add	r3, sp, #12
 800e054:	9300      	str	r3, [sp, #0]
 800e056:	462a      	mov	r2, r5
 800e058:	4b12      	ldr	r3, [pc, #72]	; (800e0a4 <_vfiprintf_r+0x22c>)
 800e05a:	a904      	add	r1, sp, #16
 800e05c:	4630      	mov	r0, r6
 800e05e:	f7fc fff3 	bl	800b048 <_printf_float>
 800e062:	4607      	mov	r7, r0
 800e064:	1c78      	adds	r0, r7, #1
 800e066:	d1d6      	bne.n	800e016 <_vfiprintf_r+0x19e>
 800e068:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e06a:	07d9      	lsls	r1, r3, #31
 800e06c:	d405      	bmi.n	800e07a <_vfiprintf_r+0x202>
 800e06e:	89ab      	ldrh	r3, [r5, #12]
 800e070:	059a      	lsls	r2, r3, #22
 800e072:	d402      	bmi.n	800e07a <_vfiprintf_r+0x202>
 800e074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e076:	f7fd fd60 	bl	800bb3a <__retarget_lock_release_recursive>
 800e07a:	89ab      	ldrh	r3, [r5, #12]
 800e07c:	065b      	lsls	r3, r3, #25
 800e07e:	f53f af1d 	bmi.w	800debc <_vfiprintf_r+0x44>
 800e082:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e084:	e71c      	b.n	800dec0 <_vfiprintf_r+0x48>
 800e086:	ab03      	add	r3, sp, #12
 800e088:	9300      	str	r3, [sp, #0]
 800e08a:	462a      	mov	r2, r5
 800e08c:	4b05      	ldr	r3, [pc, #20]	; (800e0a4 <_vfiprintf_r+0x22c>)
 800e08e:	a904      	add	r1, sp, #16
 800e090:	4630      	mov	r0, r6
 800e092:	f7fd fa7d 	bl	800b590 <_printf_i>
 800e096:	e7e4      	b.n	800e062 <_vfiprintf_r+0x1ea>
 800e098:	0800e8ac 	.word	0x0800e8ac
 800e09c:	0800e8b6 	.word	0x0800e8b6
 800e0a0:	0800b049 	.word	0x0800b049
 800e0a4:	0800de55 	.word	0x0800de55
 800e0a8:	0800e8b2 	.word	0x0800e8b2

0800e0ac <__swbuf_r>:
 800e0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ae:	460e      	mov	r6, r1
 800e0b0:	4614      	mov	r4, r2
 800e0b2:	4605      	mov	r5, r0
 800e0b4:	b118      	cbz	r0, 800e0be <__swbuf_r+0x12>
 800e0b6:	6a03      	ldr	r3, [r0, #32]
 800e0b8:	b90b      	cbnz	r3, 800e0be <__swbuf_r+0x12>
 800e0ba:	f7fd fc05 	bl	800b8c8 <__sinit>
 800e0be:	69a3      	ldr	r3, [r4, #24]
 800e0c0:	60a3      	str	r3, [r4, #8]
 800e0c2:	89a3      	ldrh	r3, [r4, #12]
 800e0c4:	071a      	lsls	r2, r3, #28
 800e0c6:	d525      	bpl.n	800e114 <__swbuf_r+0x68>
 800e0c8:	6923      	ldr	r3, [r4, #16]
 800e0ca:	b31b      	cbz	r3, 800e114 <__swbuf_r+0x68>
 800e0cc:	6823      	ldr	r3, [r4, #0]
 800e0ce:	6922      	ldr	r2, [r4, #16]
 800e0d0:	1a98      	subs	r0, r3, r2
 800e0d2:	6963      	ldr	r3, [r4, #20]
 800e0d4:	b2f6      	uxtb	r6, r6
 800e0d6:	4283      	cmp	r3, r0
 800e0d8:	4637      	mov	r7, r6
 800e0da:	dc04      	bgt.n	800e0e6 <__swbuf_r+0x3a>
 800e0dc:	4621      	mov	r1, r4
 800e0de:	4628      	mov	r0, r5
 800e0e0:	f7ff fe12 	bl	800dd08 <_fflush_r>
 800e0e4:	b9e0      	cbnz	r0, 800e120 <__swbuf_r+0x74>
 800e0e6:	68a3      	ldr	r3, [r4, #8]
 800e0e8:	3b01      	subs	r3, #1
 800e0ea:	60a3      	str	r3, [r4, #8]
 800e0ec:	6823      	ldr	r3, [r4, #0]
 800e0ee:	1c5a      	adds	r2, r3, #1
 800e0f0:	6022      	str	r2, [r4, #0]
 800e0f2:	701e      	strb	r6, [r3, #0]
 800e0f4:	6962      	ldr	r2, [r4, #20]
 800e0f6:	1c43      	adds	r3, r0, #1
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d004      	beq.n	800e106 <__swbuf_r+0x5a>
 800e0fc:	89a3      	ldrh	r3, [r4, #12]
 800e0fe:	07db      	lsls	r3, r3, #31
 800e100:	d506      	bpl.n	800e110 <__swbuf_r+0x64>
 800e102:	2e0a      	cmp	r6, #10
 800e104:	d104      	bne.n	800e110 <__swbuf_r+0x64>
 800e106:	4621      	mov	r1, r4
 800e108:	4628      	mov	r0, r5
 800e10a:	f7ff fdfd 	bl	800dd08 <_fflush_r>
 800e10e:	b938      	cbnz	r0, 800e120 <__swbuf_r+0x74>
 800e110:	4638      	mov	r0, r7
 800e112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e114:	4621      	mov	r1, r4
 800e116:	4628      	mov	r0, r5
 800e118:	f000 f806 	bl	800e128 <__swsetup_r>
 800e11c:	2800      	cmp	r0, #0
 800e11e:	d0d5      	beq.n	800e0cc <__swbuf_r+0x20>
 800e120:	f04f 37ff 	mov.w	r7, #4294967295
 800e124:	e7f4      	b.n	800e110 <__swbuf_r+0x64>
	...

0800e128 <__swsetup_r>:
 800e128:	b538      	push	{r3, r4, r5, lr}
 800e12a:	4b2a      	ldr	r3, [pc, #168]	; (800e1d4 <__swsetup_r+0xac>)
 800e12c:	4605      	mov	r5, r0
 800e12e:	6818      	ldr	r0, [r3, #0]
 800e130:	460c      	mov	r4, r1
 800e132:	b118      	cbz	r0, 800e13c <__swsetup_r+0x14>
 800e134:	6a03      	ldr	r3, [r0, #32]
 800e136:	b90b      	cbnz	r3, 800e13c <__swsetup_r+0x14>
 800e138:	f7fd fbc6 	bl	800b8c8 <__sinit>
 800e13c:	89a3      	ldrh	r3, [r4, #12]
 800e13e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e142:	0718      	lsls	r0, r3, #28
 800e144:	d422      	bmi.n	800e18c <__swsetup_r+0x64>
 800e146:	06d9      	lsls	r1, r3, #27
 800e148:	d407      	bmi.n	800e15a <__swsetup_r+0x32>
 800e14a:	2309      	movs	r3, #9
 800e14c:	602b      	str	r3, [r5, #0]
 800e14e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e152:	81a3      	strh	r3, [r4, #12]
 800e154:	f04f 30ff 	mov.w	r0, #4294967295
 800e158:	e034      	b.n	800e1c4 <__swsetup_r+0x9c>
 800e15a:	0758      	lsls	r0, r3, #29
 800e15c:	d512      	bpl.n	800e184 <__swsetup_r+0x5c>
 800e15e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e160:	b141      	cbz	r1, 800e174 <__swsetup_r+0x4c>
 800e162:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e166:	4299      	cmp	r1, r3
 800e168:	d002      	beq.n	800e170 <__swsetup_r+0x48>
 800e16a:	4628      	mov	r0, r5
 800e16c:	f7fe fb76 	bl	800c85c <_free_r>
 800e170:	2300      	movs	r3, #0
 800e172:	6363      	str	r3, [r4, #52]	; 0x34
 800e174:	89a3      	ldrh	r3, [r4, #12]
 800e176:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e17a:	81a3      	strh	r3, [r4, #12]
 800e17c:	2300      	movs	r3, #0
 800e17e:	6063      	str	r3, [r4, #4]
 800e180:	6923      	ldr	r3, [r4, #16]
 800e182:	6023      	str	r3, [r4, #0]
 800e184:	89a3      	ldrh	r3, [r4, #12]
 800e186:	f043 0308 	orr.w	r3, r3, #8
 800e18a:	81a3      	strh	r3, [r4, #12]
 800e18c:	6923      	ldr	r3, [r4, #16]
 800e18e:	b94b      	cbnz	r3, 800e1a4 <__swsetup_r+0x7c>
 800e190:	89a3      	ldrh	r3, [r4, #12]
 800e192:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e19a:	d003      	beq.n	800e1a4 <__swsetup_r+0x7c>
 800e19c:	4621      	mov	r1, r4
 800e19e:	4628      	mov	r0, r5
 800e1a0:	f000 f884 	bl	800e2ac <__smakebuf_r>
 800e1a4:	89a0      	ldrh	r0, [r4, #12]
 800e1a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e1aa:	f010 0301 	ands.w	r3, r0, #1
 800e1ae:	d00a      	beq.n	800e1c6 <__swsetup_r+0x9e>
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	60a3      	str	r3, [r4, #8]
 800e1b4:	6963      	ldr	r3, [r4, #20]
 800e1b6:	425b      	negs	r3, r3
 800e1b8:	61a3      	str	r3, [r4, #24]
 800e1ba:	6923      	ldr	r3, [r4, #16]
 800e1bc:	b943      	cbnz	r3, 800e1d0 <__swsetup_r+0xa8>
 800e1be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e1c2:	d1c4      	bne.n	800e14e <__swsetup_r+0x26>
 800e1c4:	bd38      	pop	{r3, r4, r5, pc}
 800e1c6:	0781      	lsls	r1, r0, #30
 800e1c8:	bf58      	it	pl
 800e1ca:	6963      	ldrpl	r3, [r4, #20]
 800e1cc:	60a3      	str	r3, [r4, #8]
 800e1ce:	e7f4      	b.n	800e1ba <__swsetup_r+0x92>
 800e1d0:	2000      	movs	r0, #0
 800e1d2:	e7f7      	b.n	800e1c4 <__swsetup_r+0x9c>
 800e1d4:	2000023c 	.word	0x2000023c

0800e1d8 <_raise_r>:
 800e1d8:	291f      	cmp	r1, #31
 800e1da:	b538      	push	{r3, r4, r5, lr}
 800e1dc:	4604      	mov	r4, r0
 800e1de:	460d      	mov	r5, r1
 800e1e0:	d904      	bls.n	800e1ec <_raise_r+0x14>
 800e1e2:	2316      	movs	r3, #22
 800e1e4:	6003      	str	r3, [r0, #0]
 800e1e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ea:	bd38      	pop	{r3, r4, r5, pc}
 800e1ec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e1ee:	b112      	cbz	r2, 800e1f6 <_raise_r+0x1e>
 800e1f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1f4:	b94b      	cbnz	r3, 800e20a <_raise_r+0x32>
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	f000 f830 	bl	800e25c <_getpid_r>
 800e1fc:	462a      	mov	r2, r5
 800e1fe:	4601      	mov	r1, r0
 800e200:	4620      	mov	r0, r4
 800e202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e206:	f000 b817 	b.w	800e238 <_kill_r>
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d00a      	beq.n	800e224 <_raise_r+0x4c>
 800e20e:	1c59      	adds	r1, r3, #1
 800e210:	d103      	bne.n	800e21a <_raise_r+0x42>
 800e212:	2316      	movs	r3, #22
 800e214:	6003      	str	r3, [r0, #0]
 800e216:	2001      	movs	r0, #1
 800e218:	e7e7      	b.n	800e1ea <_raise_r+0x12>
 800e21a:	2400      	movs	r4, #0
 800e21c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e220:	4628      	mov	r0, r5
 800e222:	4798      	blx	r3
 800e224:	2000      	movs	r0, #0
 800e226:	e7e0      	b.n	800e1ea <_raise_r+0x12>

0800e228 <raise>:
 800e228:	4b02      	ldr	r3, [pc, #8]	; (800e234 <raise+0xc>)
 800e22a:	4601      	mov	r1, r0
 800e22c:	6818      	ldr	r0, [r3, #0]
 800e22e:	f7ff bfd3 	b.w	800e1d8 <_raise_r>
 800e232:	bf00      	nop
 800e234:	2000023c 	.word	0x2000023c

0800e238 <_kill_r>:
 800e238:	b538      	push	{r3, r4, r5, lr}
 800e23a:	4d07      	ldr	r5, [pc, #28]	; (800e258 <_kill_r+0x20>)
 800e23c:	2300      	movs	r3, #0
 800e23e:	4604      	mov	r4, r0
 800e240:	4608      	mov	r0, r1
 800e242:	4611      	mov	r1, r2
 800e244:	602b      	str	r3, [r5, #0]
 800e246:	f7f5 f975 	bl	8003534 <_kill>
 800e24a:	1c43      	adds	r3, r0, #1
 800e24c:	d102      	bne.n	800e254 <_kill_r+0x1c>
 800e24e:	682b      	ldr	r3, [r5, #0]
 800e250:	b103      	cbz	r3, 800e254 <_kill_r+0x1c>
 800e252:	6023      	str	r3, [r4, #0]
 800e254:	bd38      	pop	{r3, r4, r5, pc}
 800e256:	bf00      	nop
 800e258:	20000b84 	.word	0x20000b84

0800e25c <_getpid_r>:
 800e25c:	f7f5 b962 	b.w	8003524 <_getpid>

0800e260 <__swhatbuf_r>:
 800e260:	b570      	push	{r4, r5, r6, lr}
 800e262:	460c      	mov	r4, r1
 800e264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e268:	2900      	cmp	r1, #0
 800e26a:	b096      	sub	sp, #88	; 0x58
 800e26c:	4615      	mov	r5, r2
 800e26e:	461e      	mov	r6, r3
 800e270:	da0d      	bge.n	800e28e <__swhatbuf_r+0x2e>
 800e272:	89a3      	ldrh	r3, [r4, #12]
 800e274:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e278:	f04f 0100 	mov.w	r1, #0
 800e27c:	bf0c      	ite	eq
 800e27e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e282:	2340      	movne	r3, #64	; 0x40
 800e284:	2000      	movs	r0, #0
 800e286:	6031      	str	r1, [r6, #0]
 800e288:	602b      	str	r3, [r5, #0]
 800e28a:	b016      	add	sp, #88	; 0x58
 800e28c:	bd70      	pop	{r4, r5, r6, pc}
 800e28e:	466a      	mov	r2, sp
 800e290:	f000 f848 	bl	800e324 <_fstat_r>
 800e294:	2800      	cmp	r0, #0
 800e296:	dbec      	blt.n	800e272 <__swhatbuf_r+0x12>
 800e298:	9901      	ldr	r1, [sp, #4]
 800e29a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e29e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e2a2:	4259      	negs	r1, r3
 800e2a4:	4159      	adcs	r1, r3
 800e2a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2aa:	e7eb      	b.n	800e284 <__swhatbuf_r+0x24>

0800e2ac <__smakebuf_r>:
 800e2ac:	898b      	ldrh	r3, [r1, #12]
 800e2ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e2b0:	079d      	lsls	r5, r3, #30
 800e2b2:	4606      	mov	r6, r0
 800e2b4:	460c      	mov	r4, r1
 800e2b6:	d507      	bpl.n	800e2c8 <__smakebuf_r+0x1c>
 800e2b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e2bc:	6023      	str	r3, [r4, #0]
 800e2be:	6123      	str	r3, [r4, #16]
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	6163      	str	r3, [r4, #20]
 800e2c4:	b002      	add	sp, #8
 800e2c6:	bd70      	pop	{r4, r5, r6, pc}
 800e2c8:	ab01      	add	r3, sp, #4
 800e2ca:	466a      	mov	r2, sp
 800e2cc:	f7ff ffc8 	bl	800e260 <__swhatbuf_r>
 800e2d0:	9900      	ldr	r1, [sp, #0]
 800e2d2:	4605      	mov	r5, r0
 800e2d4:	4630      	mov	r0, r6
 800e2d6:	f7fb ff3b 	bl	800a150 <_malloc_r>
 800e2da:	b948      	cbnz	r0, 800e2f0 <__smakebuf_r+0x44>
 800e2dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2e0:	059a      	lsls	r2, r3, #22
 800e2e2:	d4ef      	bmi.n	800e2c4 <__smakebuf_r+0x18>
 800e2e4:	f023 0303 	bic.w	r3, r3, #3
 800e2e8:	f043 0302 	orr.w	r3, r3, #2
 800e2ec:	81a3      	strh	r3, [r4, #12]
 800e2ee:	e7e3      	b.n	800e2b8 <__smakebuf_r+0xc>
 800e2f0:	89a3      	ldrh	r3, [r4, #12]
 800e2f2:	6020      	str	r0, [r4, #0]
 800e2f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2f8:	81a3      	strh	r3, [r4, #12]
 800e2fa:	9b00      	ldr	r3, [sp, #0]
 800e2fc:	6163      	str	r3, [r4, #20]
 800e2fe:	9b01      	ldr	r3, [sp, #4]
 800e300:	6120      	str	r0, [r4, #16]
 800e302:	b15b      	cbz	r3, 800e31c <__smakebuf_r+0x70>
 800e304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e308:	4630      	mov	r0, r6
 800e30a:	f000 f81d 	bl	800e348 <_isatty_r>
 800e30e:	b128      	cbz	r0, 800e31c <__smakebuf_r+0x70>
 800e310:	89a3      	ldrh	r3, [r4, #12]
 800e312:	f023 0303 	bic.w	r3, r3, #3
 800e316:	f043 0301 	orr.w	r3, r3, #1
 800e31a:	81a3      	strh	r3, [r4, #12]
 800e31c:	89a3      	ldrh	r3, [r4, #12]
 800e31e:	431d      	orrs	r5, r3
 800e320:	81a5      	strh	r5, [r4, #12]
 800e322:	e7cf      	b.n	800e2c4 <__smakebuf_r+0x18>

0800e324 <_fstat_r>:
 800e324:	b538      	push	{r3, r4, r5, lr}
 800e326:	4d07      	ldr	r5, [pc, #28]	; (800e344 <_fstat_r+0x20>)
 800e328:	2300      	movs	r3, #0
 800e32a:	4604      	mov	r4, r0
 800e32c:	4608      	mov	r0, r1
 800e32e:	4611      	mov	r1, r2
 800e330:	602b      	str	r3, [r5, #0]
 800e332:	f7f5 f95e 	bl	80035f2 <_fstat>
 800e336:	1c43      	adds	r3, r0, #1
 800e338:	d102      	bne.n	800e340 <_fstat_r+0x1c>
 800e33a:	682b      	ldr	r3, [r5, #0]
 800e33c:	b103      	cbz	r3, 800e340 <_fstat_r+0x1c>
 800e33e:	6023      	str	r3, [r4, #0]
 800e340:	bd38      	pop	{r3, r4, r5, pc}
 800e342:	bf00      	nop
 800e344:	20000b84 	.word	0x20000b84

0800e348 <_isatty_r>:
 800e348:	b538      	push	{r3, r4, r5, lr}
 800e34a:	4d06      	ldr	r5, [pc, #24]	; (800e364 <_isatty_r+0x1c>)
 800e34c:	2300      	movs	r3, #0
 800e34e:	4604      	mov	r4, r0
 800e350:	4608      	mov	r0, r1
 800e352:	602b      	str	r3, [r5, #0]
 800e354:	f7f5 f95d 	bl	8003612 <_isatty>
 800e358:	1c43      	adds	r3, r0, #1
 800e35a:	d102      	bne.n	800e362 <_isatty_r+0x1a>
 800e35c:	682b      	ldr	r3, [r5, #0]
 800e35e:	b103      	cbz	r3, 800e362 <_isatty_r+0x1a>
 800e360:	6023      	str	r3, [r4, #0]
 800e362:	bd38      	pop	{r3, r4, r5, pc}
 800e364:	20000b84 	.word	0x20000b84

0800e368 <_init>:
 800e368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e36a:	bf00      	nop
 800e36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e36e:	bc08      	pop	{r3}
 800e370:	469e      	mov	lr, r3
 800e372:	4770      	bx	lr

0800e374 <_fini>:
 800e374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e376:	bf00      	nop
 800e378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e37a:	bc08      	pop	{r3}
 800e37c:	469e      	mov	lr, r3
 800e37e:	4770      	bx	lr
