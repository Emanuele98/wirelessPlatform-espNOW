
inverter-control-fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800e368  0800e368  0001e368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8e4  0800e8e4  00020230  2**0
                  CONTENTS
  4 .ARM          00000000  0800e8e4  0800e8e4  00020230  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e8e4  0800e8e4  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8e4  0800e8e4  0001e8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8e8  0800e8e8  0001e8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800e8ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020230  2**0
                  CONTENTS
 10 .bss          0000094c  20000230  20000230  00020230  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b7c  20000b7c  00020230  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c59d  00000000  00000000  000202a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000031dc  00000000  00000000  0003c840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ad8  00000000  00000000  0003fa20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000157e  00000000  00000000  000414f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000247a5  00000000  00000000  00042a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f5b1  00000000  00000000  0006721b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e4e3c  00000000  00000000  000867cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008a18  00000000  00000000  0016b608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b6  00000000  00000000  00174020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e350 	.word	0x0800e350

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	0800e350 	.word	0x0800e350

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2lz>:
 8000c08:	b538      	push	{r3, r4, r5, lr}
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	4604      	mov	r4, r0
 8000c10:	460d      	mov	r5, r1
 8000c12:	f7ff ff73 	bl	8000afc <__aeabi_dcmplt>
 8000c16:	b928      	cbnz	r0, 8000c24 <__aeabi_d2lz+0x1c>
 8000c18:	4620      	mov	r0, r4
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c20:	f000 b80a 	b.w	8000c38 <__aeabi_d2ulz>
 8000c24:	4620      	mov	r0, r4
 8000c26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c2a:	f000 f805 	bl	8000c38 <__aeabi_d2ulz>
 8000c2e:	4240      	negs	r0, r0
 8000c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c34:	bd38      	pop	{r3, r4, r5, pc}
 8000c36:	bf00      	nop

08000c38 <__aeabi_d2ulz>:
 8000c38:	b5d0      	push	{r4, r6, r7, lr}
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__aeabi_d2ulz+0x34>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4606      	mov	r6, r0
 8000c40:	460f      	mov	r7, r1
 8000c42:	f7ff fce9 	bl	8000618 <__aeabi_dmul>
 8000c46:	f7ff ffbf 	bl	8000bc8 <__aeabi_d2uiz>
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	f7ff fc6a 	bl	8000524 <__aeabi_ui2d>
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <__aeabi_d2ulz+0x38>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	f7ff fce0 	bl	8000618 <__aeabi_dmul>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	4639      	mov	r1, r7
 8000c60:	f7ff fb22 	bl	80002a8 <__aeabi_dsub>
 8000c64:	f7ff ffb0 	bl	8000bc8 <__aeabi_d2uiz>
 8000c68:	4621      	mov	r1, r4
 8000c6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c6c:	3df00000 	.word	0x3df00000
 8000c70:	41f00000 	.word	0x41f00000

08000c74 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d002      	beq.n	8000c8a <case_insensitive_strcmp+0x16>
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e056      	b.n	8000d3c <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d10d      	bne.n	8000cb2 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e050      	b.n	8000d3c <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e04a      	b.n	8000d3c <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	73fb      	strb	r3, [r7, #15]
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	4a22      	ldr	r2, [pc, #136]	; (8000d48 <case_insensitive_strcmp+0xd4>)
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d103      	bne.n	8000cd2 <case_insensitive_strcmp+0x5e>
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	f103 0220 	add.w	r2, r3, #32
 8000cd0:	e000      	b.n	8000cd4 <case_insensitive_strcmp+0x60>
 8000cd2:	7bfa      	ldrb	r2, [r7, #15]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	73bb      	strb	r3, [r7, #14]
 8000cda:	7bbb      	ldrb	r3, [r7, #14]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	491a      	ldr	r1, [pc, #104]	; (8000d48 <case_insensitive_strcmp+0xd4>)
 8000ce0:	440b      	add	r3, r1
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d102      	bne.n	8000cf2 <case_insensitive_strcmp+0x7e>
 8000cec:	7bbb      	ldrb	r3, [r7, #14]
 8000cee:	3320      	adds	r3, #32
 8000cf0:	e000      	b.n	8000cf4 <case_insensitive_strcmp+0x80>
 8000cf2:	7bbb      	ldrb	r3, [r7, #14]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d0d0      	beq.n	8000c9a <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	737b      	strb	r3, [r7, #13]
 8000cfe:	7b7b      	ldrb	r3, [r7, #13]
 8000d00:	3301      	adds	r3, #1
 8000d02:	4a11      	ldr	r2, [pc, #68]	; (8000d48 <case_insensitive_strcmp+0xd4>)
 8000d04:	4413      	add	r3, r2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d103      	bne.n	8000d18 <case_insensitive_strcmp+0xa4>
 8000d10:	7b7b      	ldrb	r3, [r7, #13]
 8000d12:	f103 0220 	add.w	r2, r3, #32
 8000d16:	e000      	b.n	8000d1a <case_insensitive_strcmp+0xa6>
 8000d18:	7b7a      	ldrb	r2, [r7, #13]
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	733b      	strb	r3, [r7, #12]
 8000d20:	7b3b      	ldrb	r3, [r7, #12]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4908      	ldr	r1, [pc, #32]	; (8000d48 <case_insensitive_strcmp+0xd4>)
 8000d26:	440b      	add	r3, r1
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d102      	bne.n	8000d38 <case_insensitive_strcmp+0xc4>
 8000d32:	7b3b      	ldrb	r3, [r7, #12]
 8000d34:	3320      	adds	r3, #32
 8000d36:	e000      	b.n	8000d3a <case_insensitive_strcmp+0xc6>
 8000d38:	7b3b      	ldrb	r3, [r7, #12]
 8000d3a:	1ad3      	subs	r3, r2, r3
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	0800e510 	.word	0x0800e510

08000d4c <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2028      	movs	r0, #40	; 0x28
 8000d5a:	4798      	blx	r3
 8000d5c:	60f8      	str	r0, [r7, #12]
    if (node)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d004      	beq.n	8000d6e <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000d64:	2228      	movs	r2, #40	; 0x28
 8000d66:	2100      	movs	r1, #0
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f00a fe3a 	bl	800b9e2 <memset>
    }

    return node;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000d84:	e037      	b.n	8000df6 <cJSON_Delete+0x7e>
    {
        next = item->next;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d108      	bne.n	8000daa <cJSON_Delete+0x32>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d004      	beq.n	8000daa <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ffe7 	bl	8000d78 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d109      	bne.n	8000dca <cJSON_Delete+0x52>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d005      	beq.n	8000dca <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <cJSON_Delete+0x90>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	6912      	ldr	r2, [r2, #16]
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d109      	bne.n	8000dea <cJSON_Delete+0x72>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a1b      	ldr	r3, [r3, #32]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d005      	beq.n	8000dea <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <cJSON_Delete+0x90>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	6a12      	ldr	r2, [r2, #32]
 8000de6:	4610      	mov	r0, r2
 8000de8:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <cJSON_Delete+0x90>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	4798      	blx	r3
        item = next;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1c4      	bne.n	8000d86 <cJSON_Delete+0xe>
    }
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000000 	.word	0x20000000

08000e0c <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8000e10:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	0000      	movs	r0, r0
	...

08000e20 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b098      	sub	sp, #96	; 0x60
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
    double number = 0;
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	f04f 0300 	mov.w	r3, #0
 8000e32:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8000e3a:	f7ff ffe7 	bl	8000e0c <get_decimal_point>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <parse_number+0x36>
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <parse_number+0x3a>
    {
        return false;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e0a0      	b.n	8000f9c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e5e:	e03d      	b.n	8000edc <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	6899      	ldr	r1, [r3, #8]
 8000e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e6a:	440b      	add	r3, r1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b45      	cmp	r3, #69	; 0x45
 8000e72:	dc17      	bgt.n	8000ea4 <parse_number+0x84>
 8000e74:	2b2b      	cmp	r3, #43	; 0x2b
 8000e76:	db40      	blt.n	8000efa <parse_number+0xda>
 8000e78:	3b2b      	subs	r3, #43	; 0x2b
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	409a      	lsls	r2, r3
 8000e7e:	4b4c      	ldr	r3, [pc, #304]	; (8000fb0 <parse_number+0x190>)
 8000e80:	4013      	ands	r3, r2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	bf14      	ite	ne
 8000e86:	2301      	movne	r3, #1
 8000e88:	2300      	moveq	r3, #0
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d10b      	bne.n	8000ea8 <parse_number+0x88>
 8000e90:	f002 0308 	and.w	r3, r2, #8
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	bf14      	ite	ne
 8000e98:	2301      	movne	r3, #1
 8000e9a:	2300      	moveq	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d111      	bne.n	8000ec6 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8000ea2:	e02a      	b.n	8000efa <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8000ea4:	2b65      	cmp	r3, #101	; 0x65
 8000ea6:	d128      	bne.n	8000efa <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	6899      	ldr	r1, [r3, #8]
 8000eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000eb2:	440b      	add	r3, r1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	7819      	ldrb	r1, [r3, #0]
 8000eb8:	f107 0208 	add.w	r2, r7, #8
 8000ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ebe:	4413      	add	r3, r2
 8000ec0:	460a      	mov	r2, r1
 8000ec2:	701a      	strb	r2, [r3, #0]
                break;
 8000ec4:	e007      	b.n	8000ed6 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 8000ec6:	f107 0208 	add.w	r2, r7, #8
 8000eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ecc:	4413      	add	r3, r2
 8000ece:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000ed2:	701a      	strb	r2, [r3, #0]
                break;
 8000ed4:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8000ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ed8:	3301      	adds	r3, #1
 8000eda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ede:	2b3e      	cmp	r3, #62	; 0x3e
 8000ee0:	d80d      	bhi.n	8000efe <parse_number+0xde>
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00a      	beq.n	8000efe <parse_number+0xde>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000eee:	441a      	add	r2, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d3b3      	bcc.n	8000e60 <parse_number+0x40>
        }
    }
loop_end:
 8000ef8:	e001      	b.n	8000efe <parse_number+0xde>
                goto loop_end;
 8000efa:	bf00      	nop
 8000efc:	e000      	b.n	8000f00 <parse_number+0xe0>
loop_end:
 8000efe:	bf00      	nop
    number_c_string[i] = '\0';
 8000f00:	f107 0208 	add.w	r2, r7, #8
 8000f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f06:	4413      	add	r3, r2
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8000f0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f009 ffde 	bl	800aed8 <strtod>
 8000f1c:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8000f20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d101      	bne.n	8000f2e <parse_number+0x10e>
    {
        return false; /* parse_error */
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e036      	b.n	8000f9c <parse_number+0x17c>
    }

    item->valuedouble = number;
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000f34:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8000f38:	a31b      	add	r3, pc, #108	; (adr r3, 8000fa8 <parse_number+0x188>)
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000f42:	f7ff fdef 	bl	8000b24 <__aeabi_dcmpge>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d004      	beq.n	8000f56 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000f52:	615a      	str	r2, [r3, #20]
 8000f54:	e015      	b.n	8000f82 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <parse_number+0x194>)
 8000f5c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000f60:	f7ff fdd6 	bl	8000b10 <__aeabi_dcmple>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d004      	beq.n	8000f74 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f70:	615a      	str	r2, [r3, #20]
 8000f72:	e006      	b.n	8000f82 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8000f74:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000f78:	f7ff fdfe 	bl	8000b78 <__aeabi_d2iz>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2208      	movs	r2, #8
 8000f86:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000f8e:	f107 0208 	add.w	r2, r7, #8
 8000f92:	1a8a      	subs	r2, r1, r2
 8000f94:	441a      	add	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	609a      	str	r2, [r3, #8]
    return true;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3760      	adds	r7, #96	; 0x60
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	ffc00000 	.word	0xffc00000
 8000fac:	41dfffff 	.word	0x41dfffff
 8000fb0:	04007fe5 	.word	0x04007fe5
 8000fb4:	c1e00000 	.word	0xc1e00000

08000fb8 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	e04c      	b.n	8001068 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b2f      	cmp	r3, #47	; 0x2f
 8000fd8:	d90f      	bls.n	8000ffa <parse_hex4+0x42>
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4413      	add	r3, r2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b39      	cmp	r3, #57	; 0x39
 8000fe4:	d809      	bhi.n	8000ffa <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4413      	add	r3, r2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	3b30      	subs	r3, #48	; 0x30
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	e02d      	b.n	8001056 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4413      	add	r3, r2
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b40      	cmp	r3, #64	; 0x40
 8001004:	d90f      	bls.n	8001026 <parse_hex4+0x6e>
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4413      	add	r3, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b46      	cmp	r3, #70	; 0x46
 8001010:	d809      	bhi.n	8001026 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4413      	add	r3, r2
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	3b37      	subs	r3, #55	; 0x37
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	e017      	b.n	8001056 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4413      	add	r3, r2
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b60      	cmp	r3, #96	; 0x60
 8001030:	d90f      	bls.n	8001052 <parse_hex4+0x9a>
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4413      	add	r3, r2
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b66      	cmp	r3, #102	; 0x66
 800103c:	d809      	bhi.n	8001052 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4413      	add	r3, r2
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	3b57      	subs	r3, #87	; 0x57
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	e001      	b.n	8001056 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001052:	2300      	movs	r3, #0
 8001054:	e00c      	b.n	8001070 <parse_hex4+0xb8>
        }

        if (i < 3)
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d802      	bhi.n	8001062 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	3301      	adds	r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	2b03      	cmp	r3, #3
 800106c:	d9af      	bls.n	8000fce <parse_hex4+0x16>
        }
    }

    return h;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b05      	cmp	r3, #5
 80010b4:	f340 80b7 	ble.w	8001226 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	3302      	adds	r3, #2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff7b 	bl	8000fb8 <parse_hex4>
 80010c2:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80010ca:	d304      	bcc.n	80010d6 <utf16_literal_to_utf8+0x5a>
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80010d2:	f0c0 80aa 	bcc.w	800122a <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80010dc:	d337      	bcc.n	800114e <utf16_literal_to_utf8+0xd2>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80010e4:	d233      	bcs.n	800114e <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	3306      	adds	r3, #6
 80010ea:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80010f0:	230c      	movs	r3, #12
 80010f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b05      	cmp	r3, #5
 80010fe:	f340 8096 	ble.w	800122e <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b5c      	cmp	r3, #92	; 0x5c
 8001108:	f040 8093 	bne.w	8001232 <utf16_literal_to_utf8+0x1b6>
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3301      	adds	r3, #1
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b75      	cmp	r3, #117	; 0x75
 8001114:	f040 808d 	bne.w	8001232 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3302      	adds	r3, #2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff4b 	bl	8000fb8 <parse_hex4>
 8001122:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800112a:	f0c0 8084 	bcc.w	8001236 <utf16_literal_to_utf8+0x1ba>
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001134:	d27f      	bcs.n	8001236 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	029a      	lsls	r2, r3, #10
 800113a:	4b43      	ldr	r3, [pc, #268]	; (8001248 <utf16_literal_to_utf8+0x1cc>)
 800113c:	4013      	ands	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001144:	4313      	orrs	r3, r2
 8001146:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800114c:	e004      	b.n	8001158 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800114e:	2306      	movs	r3, #6
 8001150:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	2b7f      	cmp	r3, #127	; 0x7f
 800115c:	d803      	bhi.n	8001166 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800115e:	2301      	movs	r3, #1
 8001160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001164:	e01f      	b.n	80011a6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800116c:	d206      	bcs.n	800117c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800116e:	2302      	movs	r3, #2
 8001170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001174:	23c0      	movs	r3, #192	; 0xc0
 8001176:	f887 3020 	strb.w	r3, [r7, #32]
 800117a:	e014      	b.n	80011a6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001182:	d206      	bcs.n	8001192 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001184:	2303      	movs	r3, #3
 8001186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800118a:	23e0      	movs	r3, #224	; 0xe0
 800118c:	f887 3020 	strb.w	r3, [r7, #32]
 8001190:	e009      	b.n	80011a6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001198:	d24f      	bcs.n	800123a <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800119a:	2304      	movs	r3, #4
 800119c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80011a0:	23f0      	movs	r3, #240	; 0xf0
 80011a2:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80011a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80011b0:	e015      	b.n	80011de <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6819      	ldr	r1, [r3, #0]
 80011c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011c4:	440b      	add	r3, r1
 80011c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	099b      	lsrs	r3, r3, #6
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80011d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011d8:	3b01      	subs	r3, #1
 80011da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80011de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1e5      	bne.n	80011b2 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80011e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d909      	bls.n	8001202 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	b2d9      	uxtb	r1, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e007      	b.n	8001212 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	b2da      	uxtb	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800121a:	441a      	add	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001220:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001224:	e00b      	b.n	800123e <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001226:	bf00      	nop
 8001228:	e008      	b.n	800123c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800122a:	bf00      	nop
 800122c:	e006      	b.n	800123c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800122e:	bf00      	nop
 8001230:	e004      	b.n	800123c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001232:	bf00      	nop
 8001234:	e002      	b.n	800123c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001236:	bf00      	nop
 8001238:	e000      	b.n	800123c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800123a:	bf00      	nop

fail:
    return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3728      	adds	r7, #40	; 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	000ffc00 	.word	0x000ffc00

0800124c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	3301      	adds	r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	3301      	adds	r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	4413      	add	r3, r2
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b22      	cmp	r3, #34	; 0x22
 8001288:	f040 8103 	bne.w	8001492 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001294:	e017      	b.n	80012c6 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b5c      	cmp	r3, #92	; 0x5c
 800129c:	d110      	bne.n	80012c0 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	f080 80f1 	bcs.w	8001496 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	3301      	adds	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
                input_end++;
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	3301      	adds	r3, #1
 80012be:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	3301      	adds	r3, #1
 80012c4:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6a3a      	ldr	r2, [r7, #32]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d203      	bcs.n	80012e0 <parse_string+0x94>
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b22      	cmp	r3, #34	; 0x22
 80012de:	d1da      	bne.n	8001296 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6a3a      	ldr	r2, [r7, #32]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	f080 80d3 	bcs.w	800149a <parse_string+0x24e>
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b22      	cmp	r3, #34	; 0x22
 80012fa:	f040 80ce 	bne.w	800149a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	4413      	add	r3, r2
 8001308:	6a3a      	ldr	r2, [r7, #32]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	461a      	mov	r2, r3
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	3201      	adds	r2, #1
 800131c:	4610      	mov	r0, r2
 800131e:	4798      	blx	r3
 8001320:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80ba 	beq.w	800149e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800132e:	e094      	b.n	800145a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b5c      	cmp	r3, #92	; 0x5c
 8001336:	d008      	beq.n	800134a <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800133a:	1c53      	adds	r3, r2, #1
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1c59      	adds	r1, r3, #1
 8001342:	60f9      	str	r1, [r7, #12]
 8001344:	7812      	ldrb	r2, [r2, #0]
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	e087      	b.n	800145a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800134a:	2302      	movs	r3, #2
 800134c:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800134e:	6a3a      	ldr	r2, [r7, #32]
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	f340 80a4 	ble.w	80014a2 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	3301      	adds	r3, #1
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b75      	cmp	r3, #117	; 0x75
 8001362:	f300 80a0 	bgt.w	80014a6 <parse_string+0x25a>
 8001366:	2b5c      	cmp	r3, #92	; 0x5c
 8001368:	da04      	bge.n	8001374 <parse_string+0x128>
 800136a:	2b22      	cmp	r3, #34	; 0x22
 800136c:	d05c      	beq.n	8001428 <parse_string+0x1dc>
 800136e:	2b2f      	cmp	r3, #47	; 0x2f
 8001370:	d05a      	beq.n	8001428 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001372:	e098      	b.n	80014a6 <parse_string+0x25a>
            switch (input_pointer[1])
 8001374:	3b5c      	subs	r3, #92	; 0x5c
 8001376:	2b19      	cmp	r3, #25
 8001378:	f200 8095 	bhi.w	80014a6 <parse_string+0x25a>
 800137c:	a201      	add	r2, pc, #4	; (adr r2, 8001384 <parse_string+0x138>)
 800137e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001382:	bf00      	nop
 8001384:	08001429 	.word	0x08001429
 8001388:	080014a7 	.word	0x080014a7
 800138c:	080014a7 	.word	0x080014a7
 8001390:	080014a7 	.word	0x080014a7
 8001394:	080014a7 	.word	0x080014a7
 8001398:	080014a7 	.word	0x080014a7
 800139c:	080013ed 	.word	0x080013ed
 80013a0:	080014a7 	.word	0x080014a7
 80013a4:	080014a7 	.word	0x080014a7
 80013a8:	080014a7 	.word	0x080014a7
 80013ac:	080013f9 	.word	0x080013f9
 80013b0:	080014a7 	.word	0x080014a7
 80013b4:	080014a7 	.word	0x080014a7
 80013b8:	080014a7 	.word	0x080014a7
 80013bc:	080014a7 	.word	0x080014a7
 80013c0:	080014a7 	.word	0x080014a7
 80013c4:	080014a7 	.word	0x080014a7
 80013c8:	080014a7 	.word	0x080014a7
 80013cc:	08001405 	.word	0x08001405
 80013d0:	080014a7 	.word	0x080014a7
 80013d4:	080014a7 	.word	0x080014a7
 80013d8:	080014a7 	.word	0x080014a7
 80013dc:	08001411 	.word	0x08001411
 80013e0:	080014a7 	.word	0x080014a7
 80013e4:	0800141d 	.word	0x0800141d
 80013e8:	08001439 	.word	0x08001439
                    *output_pointer++ = '\b';
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	60fa      	str	r2, [r7, #12]
 80013f2:	2208      	movs	r2, #8
 80013f4:	701a      	strb	r2, [r3, #0]
                    break;
 80013f6:	e02c      	b.n	8001452 <parse_string+0x206>
                    *output_pointer++ = '\f';
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	60fa      	str	r2, [r7, #12]
 80013fe:	220c      	movs	r2, #12
 8001400:	701a      	strb	r2, [r3, #0]
                    break;
 8001402:	e026      	b.n	8001452 <parse_string+0x206>
                    *output_pointer++ = '\n';
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	60fa      	str	r2, [r7, #12]
 800140a:	220a      	movs	r2, #10
 800140c:	701a      	strb	r2, [r3, #0]
                    break;
 800140e:	e020      	b.n	8001452 <parse_string+0x206>
                    *output_pointer++ = '\r';
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	60fa      	str	r2, [r7, #12]
 8001416:	220d      	movs	r2, #13
 8001418:	701a      	strb	r2, [r3, #0]
                    break;
 800141a:	e01a      	b.n	8001452 <parse_string+0x206>
                    *output_pointer++ = '\t';
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	60fa      	str	r2, [r7, #12]
 8001422:	2209      	movs	r2, #9
 8001424:	701a      	strb	r2, [r3, #0]
                    break;
 8001426:	e014      	b.n	8001452 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1c59      	adds	r1, r3, #1
 8001430:	60f9      	str	r1, [r7, #12]
 8001432:	7812      	ldrb	r2, [r2, #0]
 8001434:	701a      	strb	r2, [r3, #0]
                    break;
 8001436:	e00c      	b.n	8001452 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	461a      	mov	r2, r3
 800143e:	6a39      	ldr	r1, [r7, #32]
 8001440:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001442:	f7ff fe1b 	bl	800107c <utf16_literal_to_utf8>
 8001446:	4603      	mov	r3, r0
 8001448:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800144a:	7dfb      	ldrb	r3, [r7, #23]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d02c      	beq.n	80014aa <parse_string+0x25e>
                    break;
 8001450:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001452:	7dfb      	ldrb	r3, [r7, #23]
 8001454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001456:	4413      	add	r3, r2
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800145a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	429a      	cmp	r2, r3
 8001460:	f4ff af66 	bcc.w	8001330 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2210      	movs	r2, #16
 800146e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6a3a      	ldr	r2, [r7, #32]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	461a      	mov	r2, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	609a      	str	r2, [r3, #8]

    return true;
 800148e:	2301      	movs	r3, #1
 8001490:	e01e      	b.n	80014d0 <parse_string+0x284>
        goto fail;
 8001492:	bf00      	nop
 8001494:	e00a      	b.n	80014ac <parse_string+0x260>
                    goto fail;
 8001496:	bf00      	nop
 8001498:	e008      	b.n	80014ac <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800149a:	bf00      	nop
 800149c:	e006      	b.n	80014ac <parse_string+0x260>
            goto fail; /* allocation failure */
 800149e:	bf00      	nop
 80014a0:	e004      	b.n	80014ac <parse_string+0x260>
                goto fail;
 80014a2:	bf00      	nop
 80014a4:	e002      	b.n	80014ac <parse_string+0x260>
                    goto fail;
 80014a6:	bf00      	nop
 80014a8:	e000      	b.n	80014ac <parse_string+0x260>
                        goto fail;
 80014aa:	bf00      	nop

fail:
    if (output != NULL)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	69f8      	ldr	r0, [r7, #28]
 80014b8:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	609a      	str	r2, [r3, #8]
    }

    return false;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <buffer_skip_whitespace+0x16>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e02c      	b.n	800154c <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <buffer_skip_whitespace+0x2c>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	429a      	cmp	r2, r3
 8001502:	d306      	bcc.n	8001512 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	e021      	b.n	800154c <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00d      	beq.n	8001534 <buffer_skip_whitespace+0x5c>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	d207      	bcs.n	8001534 <buffer_skip_whitespace+0x5c>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	4413      	add	r3, r2
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b20      	cmp	r3, #32
 8001532:	d9e9      	bls.n	8001508 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	d104      	bne.n	800154a <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	1e5a      	subs	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800154a:	687b      	ldr	r3, [r7, #4]
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <skip_utf8_bom+0x1e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <skip_utf8_bom+0x1e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <skip_utf8_bom+0x22>
    {
        return NULL;
 8001576:	2300      	movs	r3, #0
 8001578:	e01c      	b.n	80015b4 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d018      	beq.n	80015b2 <skip_utf8_bom+0x5a>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	1d1a      	adds	r2, r3, #4
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	d211      	bcs.n	80015b2 <skip_utf8_bom+0x5a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	4413      	add	r3, r2
 8001598:	2203      	movs	r2, #3
 800159a:	4908      	ldr	r1, [pc, #32]	; (80015bc <skip_utf8_bom+0x64>)
 800159c:	4618      	mov	r0, r3
 800159e:	f00a fa28 	bl	800b9f2 <strncmp>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d104      	bne.n	80015b2 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	1cda      	adds	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80015b2:	687b      	ldr	r3, [r7, #4]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	0800e3a0 	.word	0x0800e3a0

080015c0 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e00c      	b.n	80015f0 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f7fe fe5a 	bl	8000290 <strlen>
 80015dc:	4603      	mov	r3, r0
 80015de:	3301      	adds	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	6979      	ldr	r1, [r7, #20]
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 f805 	bl	80015f8 <cJSON_ParseWithLengthOpts>
 80015ee:	4603      	mov	r3, r0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08e      	sub	sp, #56	; 0x38
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001606:	f107 0318 	add.w	r3, r7, #24
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800161a:	2300      	movs	r3, #0
 800161c:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800161e:	4b41      	ldr	r3, [pc, #260]	; (8001724 <cJSON_ParseWithLengthOpts+0x12c>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001624:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <cJSON_ParseWithLengthOpts+0x12c>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d042      	beq.n	80016b6 <cJSON_ParseWithLengthOpts+0xbe>
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d03f      	beq.n	80016b6 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001642:	4a39      	ldr	r2, [pc, #228]	; (8001728 <cJSON_ParseWithLengthOpts+0x130>)
 8001644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001648:	ca07      	ldmia	r2, {r0, r1, r2}
 800164a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800164e:	4836      	ldr	r0, [pc, #216]	; (8001728 <cJSON_ParseWithLengthOpts+0x130>)
 8001650:	f7ff fb7c 	bl	8000d4c <cJSON_New_Item>
 8001654:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8001656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001658:	2b00      	cmp	r3, #0
 800165a:	d02e      	beq.n	80016ba <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff79 	bl	8001558 <skip_utf8_bom>
 8001666:	4603      	mov	r3, r0
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff35 	bl	80014d8 <buffer_skip_whitespace>
 800166e:	4603      	mov	r3, r0
 8001670:	4619      	mov	r1, r3
 8001672:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001674:	f000 f868 	bl	8001748 <parse_value>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d01f      	beq.n	80016be <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00e      	beq.n	80016a2 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001684:	f107 0318 	add.w	r3, r7, #24
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff25 	bl	80014d8 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800168e:	6a3a      	ldr	r2, [r7, #32]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	429a      	cmp	r2, r3
 8001694:	d215      	bcs.n	80016c2 <cJSON_ParseWithLengthOpts+0xca>
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	4413      	add	r3, r2
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10f      	bne.n	80016c2 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	441a      	add	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	601a      	str	r2, [r3, #0]
    }

    return item;
 80016b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b4:	e031      	b.n	800171a <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 80016b6:	bf00      	nop
 80016b8:	e004      	b.n	80016c4 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80016ba:	bf00      	nop
 80016bc:	e002      	b.n	80016c4 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80016be:	bf00      	nop
 80016c0:	e000      	b.n	80016c4 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 80016c2:	bf00      	nop

fail:
    if (item != NULL)
 80016c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 80016ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016cc:	f7ff fb54 	bl	8000d78 <cJSON_Delete>
    }

    if (value != NULL)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d020      	beq.n	8001718 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 80016de:	6a3a      	ldr	r2, [r7, #32]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d202      	bcs.n	80016ec <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	e005      	b.n	80016f8 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d004      	beq.n	8001708 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	441a      	add	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <cJSON_ParseWithLengthOpts+0x12c>)
 800170a:	461a      	mov	r2, r3
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001714:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3738      	adds	r7, #56	; 0x38
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000024c 	.word	0x2000024c
 8001728:	20000000 	.word	0x20000000

0800172c <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff41 	bl	80015c0 <cJSON_ParseWithOpts>
 800173e:	4603      	mov	r3, r0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <parse_value+0x18>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <parse_value+0x1c>
    {
        return false; /* no input */
 8001760:	2300      	movs	r3, #0
 8001762:	e0d2      	b.n	800190a <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d01d      	beq.n	80017a6 <parse_value+0x5e>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	1d1a      	adds	r2, r3, #4
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	d816      	bhi.n	80017a6 <parse_value+0x5e>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4413      	add	r3, r2
 8001782:	2204      	movs	r2, #4
 8001784:	4963      	ldr	r1, [pc, #396]	; (8001914 <parse_value+0x1cc>)
 8001786:	4618      	mov	r0, r3
 8001788:	f00a f933 	bl	800b9f2 <strncmp>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2204      	movs	r2, #4
 8001796:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	1d1a      	adds	r2, r3, #4
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	609a      	str	r2, [r3, #8]
        return true;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0b1      	b.n	800190a <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d01d      	beq.n	80017e8 <parse_value+0xa0>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	1d5a      	adds	r2, r3, #5
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d816      	bhi.n	80017e8 <parse_value+0xa0>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	4413      	add	r3, r2
 80017c4:	2205      	movs	r2, #5
 80017c6:	4954      	ldr	r1, [pc, #336]	; (8001918 <parse_value+0x1d0>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f00a f912 	bl	800b9f2 <strncmp>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d109      	bne.n	80017e8 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	1d5a      	adds	r2, r3, #5
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	609a      	str	r2, [r3, #8]
        return true;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e090      	b.n	800190a <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d020      	beq.n	8001830 <parse_value+0xe8>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	1d1a      	adds	r2, r3, #4
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d819      	bhi.n	8001830 <parse_value+0xe8>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4413      	add	r3, r2
 8001806:	2204      	movs	r2, #4
 8001808:	4944      	ldr	r1, [pc, #272]	; (800191c <parse_value+0x1d4>)
 800180a:	4618      	mov	r0, r3
 800180c:	f00a f8f1 	bl	800b9f2 <strncmp>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10c      	bne.n	8001830 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2202      	movs	r2, #2
 800181a:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	1d1a      	adds	r2, r3, #4
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	609a      	str	r2, [r3, #8]
        return true;
 800182c:	2301      	movs	r3, #1
 800182e:	e06c      	b.n	800190a <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d013      	beq.n	800185e <parse_value+0x116>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	429a      	cmp	r2, r3
 8001840:	d20d      	bcs.n	800185e <parse_value+0x116>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b22      	cmp	r3, #34	; 0x22
 8001850:	d105      	bne.n	800185e <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001852:	6839      	ldr	r1, [r7, #0]
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff fcf9 	bl	800124c <parse_string>
 800185a:	4603      	mov	r3, r0
 800185c:	e055      	b.n	800190a <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d023      	beq.n	80018ac <parse_value+0x164>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	d21d      	bcs.n	80018ac <parse_value+0x164>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4413      	add	r3, r2
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b2d      	cmp	r3, #45	; 0x2d
 800187e:	d00f      	beq.n	80018a0 <parse_value+0x158>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b2f      	cmp	r3, #47	; 0x2f
 800188e:	d90d      	bls.n	80018ac <parse_value+0x164>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4413      	add	r3, r2
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b39      	cmp	r3, #57	; 0x39
 800189e:	d805      	bhi.n	80018ac <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 80018a0:	6839      	ldr	r1, [r7, #0]
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff fabc 	bl	8000e20 <parse_number>
 80018a8:	4603      	mov	r3, r0
 80018aa:	e02e      	b.n	800190a <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d013      	beq.n	80018da <parse_value+0x192>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d20d      	bcs.n	80018da <parse_value+0x192>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	4413      	add	r3, r2
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b5b      	cmp	r3, #91	; 0x5b
 80018cc:	d105      	bne.n	80018da <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80018ce:	6839      	ldr	r1, [r7, #0]
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f825 	bl	8001920 <parse_array>
 80018d6:	4603      	mov	r3, r0
 80018d8:	e017      	b.n	800190a <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <parse_value+0x1c0>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d20d      	bcs.n	8001908 <parse_value+0x1c0>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	4413      	add	r3, r2
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b7b      	cmp	r3, #123	; 0x7b
 80018fa:	d105      	bne.n	8001908 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 80018fc:	6839      	ldr	r1, [r7, #0]
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f8d2 	bl	8001aa8 <parse_object>
 8001904:	4603      	mov	r3, r0
 8001906:	e000      	b.n	800190a <parse_value+0x1c2>
    }

    return false;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	0800e374 	.word	0x0800e374
 8001918:	0800e3a4 	.word	0x0800e3a4
 800191c:	0800e3ac 	.word	0x0800e3ac

08001920 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800193a:	d301      	bcc.n	8001940 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800193c:	2300      	movs	r3, #0
 800193e:	e0af      	b.n	8001aa0 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	4413      	add	r3, r2
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b5b      	cmp	r3, #91	; 0x5b
 8001958:	f040 8094 	bne.w	8001a84 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001966:	6838      	ldr	r0, [r7, #0]
 8001968:	f7ff fdb6 	bl	80014d8 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00d      	beq.n	800198e <parse_array+0x6e>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	d207      	bcs.n	800198e <parse_array+0x6e>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	4413      	add	r3, r2
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b5d      	cmp	r3, #93	; 0x5d
 800198c:	d061      	beq.n	8001a52 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <parse_array+0x80>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	d305      	bcc.n	80019ac <parse_array+0x8c>
    {
        input_buffer->offset--;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	1e5a      	subs	r2, r3, #1
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	609a      	str	r2, [r3, #8]
        goto fail;
 80019aa:	e072      	b.n	8001a92 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	1e5a      	subs	r2, r3, #1
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	3310      	adds	r3, #16
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f9c6 	bl	8000d4c <cJSON_New_Item>
 80019c0:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d05f      	beq.n	8001a88 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d104      	bne.n	80019d8 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	e007      	b.n	80019e8 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80019f2:	6838      	ldr	r0, [r7, #0]
 80019f4:	f7ff fd70 	bl	80014d8 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80019f8:	6839      	ldr	r1, [r7, #0]
 80019fa:	6938      	ldr	r0, [r7, #16]
 80019fc:	f7ff fea4 	bl	8001748 <parse_value>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d042      	beq.n	8001a8c <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001a06:	6838      	ldr	r0, [r7, #0]
 8001a08:	f7ff fd66 	bl	80014d8 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00d      	beq.n	8001a2e <parse_array+0x10e>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d207      	bcs.n	8001a2e <parse_array+0x10e>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	4413      	add	r3, r2
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b2c      	cmp	r3, #44	; 0x2c
 8001a2c:	d0c3      	beq.n	80019b6 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d02d      	beq.n	8001a90 <parse_array+0x170>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d227      	bcs.n	8001a90 <parse_array+0x170>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	4413      	add	r3, r2
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b5d      	cmp	r3, #93	; 0x5d
 8001a4e:	d11f      	bne.n	8001a90 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001a50:	e000      	b.n	8001a54 <parse_array+0x134>
        goto success;
 8001a52:	bf00      	nop
    input_buffer->depth--;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	1e5a      	subs	r2, r3, #1
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <parse_array+0x14a>
        head->prev = current_item;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	609a      	str	r2, [r3, #8]

    return true;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e00d      	b.n	8001aa0 <parse_array+0x180>
        goto fail;
 8001a84:	bf00      	nop
 8001a86:	e004      	b.n	8001a92 <parse_array+0x172>
            goto fail; /* allocation failure */
 8001a88:	bf00      	nop
 8001a8a:	e002      	b.n	8001a92 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001a8c:	bf00      	nop
 8001a8e:	e000      	b.n	8001a92 <parse_array+0x172>
        goto fail; /* expected end of array */
 8001a90:	bf00      	nop

fail:
    if (head != NULL)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001a98:	6978      	ldr	r0, [r7, #20]
 8001a9a:	f7ff f96d 	bl	8000d78 <cJSON_Delete>
    }

    return false;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ac2:	d301      	bcc.n	8001ac8 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e0ea      	b.n	8001c9e <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80d0 	beq.w	8001c7a <parse_object+0x1d2>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	f080 80c9 	bcs.w	8001c7a <parse_object+0x1d2>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4413      	add	r3, r2
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b7b      	cmp	r3, #123	; 0x7b
 8001af6:	f040 80c0 	bne.w	8001c7a <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001b04:	6838      	ldr	r0, [r7, #0]
 8001b06:	f7ff fce7 	bl	80014d8 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00e      	beq.n	8001b2e <parse_object+0x86>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d208      	bcs.n	8001b2e <parse_object+0x86>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b7d      	cmp	r3, #125	; 0x7d
 8001b2a:	f000 808d 	beq.w	8001c48 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <parse_object+0x98>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d305      	bcc.n	8001b4c <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	1e5a      	subs	r2, r3, #1
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	609a      	str	r2, [r3, #8]
        goto fail;
 8001b4a:	e0a1      	b.n	8001c90 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	1e5a      	subs	r2, r3, #1
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	3310      	adds	r3, #16
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff f8f6 	bl	8000d4c <cJSON_New_Item>
 8001b60:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 808a 	beq.w	8001c7e <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d104      	bne.n	8001b7a <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	e007      	b.n	8001b8a <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001b94:	6838      	ldr	r0, [r7, #0]
 8001b96:	f7ff fc9f 	bl	80014d8 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001b9a:	6839      	ldr	r1, [r7, #0]
 8001b9c:	6938      	ldr	r0, [r7, #16]
 8001b9e:	f7ff fb55 	bl	800124c <parse_string>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d06c      	beq.n	8001c82 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001ba8:	6838      	ldr	r0, [r7, #0]
 8001baa:	f7ff fc95 	bl	80014d8 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d061      	beq.n	8001c86 <parse_object+0x1de>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d25b      	bcs.n	8001c86 <parse_object+0x1de>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b3a      	cmp	r3, #58	; 0x3a
 8001bdc:	d153      	bne.n	8001c86 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001be8:	6838      	ldr	r0, [r7, #0]
 8001bea:	f7ff fc75 	bl	80014d8 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001bee:	6839      	ldr	r1, [r7, #0]
 8001bf0:	6938      	ldr	r0, [r7, #16]
 8001bf2:	f7ff fda9 	bl	8001748 <parse_value>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d046      	beq.n	8001c8a <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001bfc:	6838      	ldr	r0, [r7, #0]
 8001bfe:	f7ff fc6b 	bl	80014d8 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00d      	beq.n	8001c24 <parse_object+0x17c>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d207      	bcs.n	8001c24 <parse_object+0x17c>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b2c      	cmp	r3, #44	; 0x2c
 8001c22:	d098      	beq.n	8001b56 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d031      	beq.n	8001c8e <parse_object+0x1e6>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d22b      	bcs.n	8001c8e <parse_object+0x1e6>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	4413      	add	r3, r2
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b7d      	cmp	r3, #125	; 0x7d
 8001c44:	d123      	bne.n	8001c8e <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8001c46:	e000      	b.n	8001c4a <parse_object+0x1a2>
        goto success; /* empty object */
 8001c48:	bf00      	nop
    input_buffer->depth--;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	1e5a      	subs	r2, r3, #1
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <parse_object+0x1b8>
        head->prev = current_item;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2240      	movs	r2, #64	; 0x40
 8001c64:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	609a      	str	r2, [r3, #8]
    return true;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e011      	b.n	8001c9e <parse_object+0x1f6>
        goto fail; /* not an object */
 8001c7a:	bf00      	nop
 8001c7c:	e008      	b.n	8001c90 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8001c7e:	bf00      	nop
 8001c80:	e006      	b.n	8001c90 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8001c82:	bf00      	nop
 8001c84:	e004      	b.n	8001c90 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8001c86:	bf00      	nop
 8001c88:	e002      	b.n	8001c90 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8001c8a:	bf00      	nop
 8001c8c:	e000      	b.n	8001c90 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8001c8e:	bf00      	nop

fail:
    if (head != NULL)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff f86e 	bl	8000d78 <cJSON_Delete>
    }

    return false;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <get_object_item+0x1c>
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <get_object_item+0x20>
    {
        return NULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e033      	b.n	8001d2e <get_object_item+0x88>
    }

    current_element = object->child;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d017      	beq.n	8001d02 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001cd2:	e002      	b.n	8001cda <get_object_item+0x34>
        {
            current_element = current_element->next;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d01c      	beq.n	8001d1a <get_object_item+0x74>
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d018      	beq.n	8001d1a <get_object_item+0x74>
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4619      	mov	r1, r3
 8001cee:	68b8      	ldr	r0, [r7, #8]
 8001cf0:	f7fe fa6e 	bl	80001d0 <strcmp>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1ec      	bne.n	8001cd4 <get_object_item+0x2e>
 8001cfa:	e00e      	b.n	8001d1a <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <get_object_item+0x74>
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	68b8      	ldr	r0, [r7, #8]
 8001d10:	f7fe ffb0 	bl	8000c74 <case_insensitive_strcmp>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <get_object_item+0x82>
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <get_object_item+0x86>
        return NULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e000      	b.n	8001d2e <get_object_item+0x88>
    }

    return current_element;
 8001d2c:	697b      	ldr	r3, [r7, #20]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8001d40:	2201      	movs	r2, #1
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ffae 	bl	8001ca6 <get_object_item>
 8001d4a:	4603      	mov	r3, r0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <cJSON_IsNumber+0x12>
    {
        return false;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e007      	b.n	8001d76 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	bf0c      	ite	eq
 8001d70:	2301      	moveq	r3, #1
 8001d72:	2300      	movne	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <cJSON_IsString+0x12>
    {
        return false;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e007      	b.n	8001da4 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b10      	cmp	r3, #16
 8001d9c:	bf0c      	ite	eq
 8001d9e:	2301      	moveq	r3, #1
 8001da0:	2300      	movne	r3, #0
 8001da2:	b2db      	uxtb	r3, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	f2ad 5ddc 	subw	sp, sp, #1500	; 0x5dc
 8001db6:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001db8:	f001 fcd4 	bl	8003764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dbc:	f000 fd12 	bl	80027e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc0:	f000 ffea 	bl	8002d98 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dc4:	f000 ffca 	bl	8002d5c <MX_DMA_Init>
  MX_I2C1_Init();
 8001dc8:	f000 ff20 	bl	8002c0c <MX_I2C1_Init>
  MX_ADC2_Init();
 8001dcc:	f000 fd6c 	bl	80028a8 <MX_ADC2_Init>
  MX_HRTIM1_Init();
 8001dd0:	f000 fdca 	bl	8002968 <MX_HRTIM1_Init>
  MX_USART2_UART_Init();
 8001dd4:	f000 ff92 	bl	8002cfc <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001dd8:	f000 ff58 	bl	8002c8c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001ddc:	2100      	movs	r1, #0
 8001dde:	48ac      	ldr	r0, [pc, #688]	; (8002090 <main+0x2e0>)
 8001de0:	f001 ffd4 	bl	8003d8c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8001de4:	2297      	movs	r2, #151	; 0x97
 8001de6:	49ab      	ldr	r1, [pc, #684]	; (8002094 <main+0x2e4>)
 8001de8:	48a9      	ldr	r0, [pc, #676]	; (8002090 <main+0x2e0>)
 8001dea:	f001 fef5 	bl	8003bd8 <HAL_ADC_Start_DMA>
	// Buffers for I2C
	uint8_t aTxRegPtr[1];
	uint8_t aTxData[2];

	// Set current sensor averaging
	aTxRegPtr[0] = 0x00;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f887 353c 	strb.w	r3, [r7, #1340]	; 0x53c
	aTxData[0] = 0b01000111;
 8001df4:	2347      	movs	r3, #71	; 0x47
 8001df6:	f887 3538 	strb.w	r3, [r7, #1336]	; 0x538
	aTxData[1] = 0b00100111;
 8001dfa:	2327      	movs	r3, #39	; 0x27
 8001dfc:	f887 3539 	strb.w	r3, [r7, #1337]	; 0x539
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
			(uint16_t) aTxRegPtr[0], 1, (uint8_t*) aTxData, 2, HAL_MAX_DELAY);
 8001e00:	f897 353c 	ldrb.w	r3, [r7, #1340]	; 0x53c
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0a:	9302      	str	r3, [sp, #8]
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	2301      	movs	r3, #1
 8001e18:	2180      	movs	r1, #128	; 0x80
 8001e1a:	489f      	ldr	r0, [pc, #636]	; (8002098 <main+0x2e8>)
 8001e1c:	f004 fb52 	bl	80064c4 <HAL_I2C_Mem_Write>

	double initial_duty = 0.30;
 8001e20:	a391      	add	r3, pc, #580	; (adr r3, 8002068 <main+0x2b8>)
 8001e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e26:	f507 61ae 	add.w	r1, r7, #1392	; 0x570
 8001e2a:	e9c1 2300 	strd	r2, r3, [r1]
	double current_duty = initial_duty;
 8001e2e:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8001e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e36:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8001e3a:	e9c1 2300 	strd	r2, r3, [r1]
	double cal_duty = current_duty;
 8001e3e:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8001e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e46:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 8001e4a:	e9c1 2300 	strd	r2, r3, [r1]
	double max_duty = 0.40;
 8001e4e:	a388      	add	r3, pc, #544	; (adr r3, 8002070 <main+0x2c0>)
 8001e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e54:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8001e58:	e9c1 2300 	strd	r2, r3, [r1]
	double min_duty = 0.20;
 8001e5c:	a386      	add	r3, pc, #536	; (adr r3, 8002078 <main+0x2c8>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 8001e66:	e9c1 2300 	strd	r2, r3, [r1]
	uint16_t signal_period = 604;
 8001e6a:	f44f 7317 	mov.w	r3, #604	; 0x25c
 8001e6e:	f8a7 356e 	strh.w	r3, [r7, #1390]	; 0x56e
	uint16_t compare1_val = initial_duty * signal_period;
 8001e72:	f8b7 356e 	ldrh.w	r3, [r7, #1390]	; 0x56e
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fb64 	bl	8000544 <__aeabi_i2d>
 8001e7c:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	f7fe fbc8 	bl	8000618 <__aeabi_dmul>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7fe fe9a 	bl	8000bc8 <__aeabi_d2uiz>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f8a7 356c 	strh.w	r3, [r7, #1388]	; 0x56c
	uint16_t compare3_val = compare1_val + signal_period / 2;
 8001e9a:	f8b7 356e 	ldrh.w	r3, [r7, #1390]	; 0x56e
 8001e9e:	085b      	lsrs	r3, r3, #1
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	f8b7 356c 	ldrh.w	r3, [r7, #1388]	; 0x56c
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f8a7 356a 	strh.w	r3, [r7, #1386]	; 0x56a

	HAL_HRTIM_WaveformCountStart(&hhrtim1,
 8001eac:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8001eb0:	487a      	ldr	r0, [pc, #488]	; (800209c <main+0x2ec>)
 8001eb2:	f003 fcdd 	bl	8005870 <HAL_HRTIM_WaveformCountStart>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_MASTER | HRTIM_TIMERID_TIMER_B);
	HAL_HRTIM_WaveformOutputStart(&hhrtim1,
 8001eb6:	2103      	movs	r1, #3
 8001eb8:	4878      	ldr	r0, [pc, #480]	; (800209c <main+0x2ec>)
 8001eba:	f003 fcac 	bl	8005816 <HAL_HRTIM_WaveformOutputStart>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2);
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 8001ebe:	4b77      	ldr	r3, [pc, #476]	; (800209c <main+0x2ec>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8b7 256c 	ldrh.w	r2, [r7, #1388]	; 0x56c
 8001ec6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			HRTIM_COMPAREUNIT_1, compare1_val);
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 8001eca:	4b74      	ldr	r3, [pc, #464]	; (800209c <main+0x2ec>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f8b7 256a 	ldrh.w	r2, [r7, #1386]	; 0x56a
 8001ed2:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			HRTIM_COMPAREUNIT_3, compare3_val);
	HAL_HRTIM_SoftwareUpdate(&hhrtim1,
 8001ed6:	2107      	movs	r1, #7
 8001ed8:	4870      	ldr	r0, [pc, #448]	; (800209c <main+0x2ec>)
 8001eda:	f003 fcf4 	bl	80058c6 <HAL_HRTIM_SoftwareUpdate>
	HRTIM_TIMERUPDATE_A | HRTIM_TIMERUPDATE_B | HRTIM_TIMERUPDATE_MASTER);

	int16_t tuning;
	uint16_t adc_max;
	uint8_t low_vds_count;
	bool limit_reached = false;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f887 3584 	strb.w	r3, [r7, #1412]	; 0x584

	uint8_t zero_cross = 103;
 8001ee4:	2367      	movs	r3, #103	; 0x67
 8001ee6:	f887 3569 	strb.w	r3, [r7, #1385]	; 0x569
	uint8_t low_vds_count_threshold = current_duty * ADC_BUF_LEN - 1;
 8001eea:	a365      	add	r3, pc, #404	; (adr r3, 8002080 <main+0x2d0>)
 8001eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef0:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8001ef4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ef8:	f7fe fb8e 	bl	8000618 <__aeabi_dmul>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	4b65      	ldr	r3, [pc, #404]	; (80020a0 <main+0x2f0>)
 8001f0a:	f7fe f9cd 	bl	80002a8 <__aeabi_dsub>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f7fe fe57 	bl	8000bc8 <__aeabi_d2uiz>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f887 3583 	strb.w	r3, [r7, #1411]	; 0x583
	uint16_t low_vds_threshold = 200;
 8001f20:	23c8      	movs	r3, #200	; 0xc8
 8001f22:	f8a7 3566 	strh.w	r3, [r7, #1382]	; 0x566
	uint16_t vds_checking_threshold = 1800;
 8001f26:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001f2a:	f8a7 3564 	strh.w	r3, [r7, #1380]	; 0x564
	int16_t tuning_threshold = 400;
 8001f2e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001f32:	f8a7 3562 	strh.w	r3, [r7, #1378]	; 0x562

	char json[1024];

	HAL_UART_Receive_IT(&huart2, &rxBuffer[rxIndex], 1); // Enable UART receive interrupt
 8001f36:	4b5b      	ldr	r3, [pc, #364]	; (80020a4 <main+0x2f4>)
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b5a      	ldr	r3, [pc, #360]	; (80020a8 <main+0x2f8>)
 8001f40:	4413      	add	r3, r2
 8001f42:	2201      	movs	r2, #1
 8001f44:	4619      	mov	r1, r3
 8001f46:	4859      	ldr	r0, [pc, #356]	; (80020ac <main+0x2fc>)
 8001f48:	f006 fec4 	bl	8008cd4 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8001f4c:	4858      	ldr	r0, [pc, #352]	; (80020b0 <main+0x300>)
 8001f4e:	f006 fb6d 	bl	800862c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		adc_max = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f8a7 3586 	strh.w	r3, [r7, #1414]	; 0x586
		low_vds_count = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f887 3585 	strb.w	r3, [r7, #1413]	; 0x585
		uint16_t adc_buf2[ADC_BUF_LEN];

		/* Transfer buffer and find maximum value */
		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8001f64:	e028      	b.n	8001fb8 <main+0x208>
			adc_buf2[i] = adc_buf[i]; // convert to real value
 8001f66:	4a4b      	ldr	r2, [pc, #300]	; (8002094 <main+0x2e4>)
 8001f68:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8001f6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f70:	b299      	uxth	r1, r3
 8001f72:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8001f76:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 8001f7a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8001f7e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			if (adc_buf2[i] > adc_max) {
 8001f82:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8001f86:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 8001f8a:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8001f8e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f92:	f8b7 2586 	ldrh.w	r2, [r7, #1414]	; 0x586
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d209      	bcs.n	8001fae <main+0x1fe>
				adc_max = adc_buf2[i];	// find maximum value in buffer
 8001f9a:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8001f9e:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 8001fa2:	f8d7 257c 	ldr.w	r2, [r7, #1404]	; 0x57c
 8001fa6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001faa:	f8a7 3586 	strh.w	r3, [r7, #1414]	; 0x586
		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001fae:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 8001fb8:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8001fbc:	2b96      	cmp	r3, #150	; 0x96
 8001fbe:	ddd2      	ble.n	8001f66 <main+0x1b6>
			}
		}

		/* Count how much values are 'zero' */
		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8001fc6:	e01b      	b.n	8002000 <main+0x250>
			if (adc_buf2[i] < low_vds_threshold
 8001fc8:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8001fcc:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 8001fd0:	f8d7 2578 	ldr.w	r2, [r7, #1400]	; 0x578
 8001fd4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001fd8:	f8b7 2566 	ldrh.w	r2, [r7, #1382]	; 0x566
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d90a      	bls.n	8001ff6 <main+0x246>
					&& adc_max > vds_checking_threshold) {
 8001fe0:	f8b7 2586 	ldrh.w	r2, [r7, #1414]	; 0x586
 8001fe4:	f8b7 3564 	ldrh.w	r3, [r7, #1380]	; 0x564
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d904      	bls.n	8001ff6 <main+0x246>
				low_vds_count++;
 8001fec:	f897 3585 	ldrb.w	r3, [r7, #1413]	; 0x585
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f887 3585 	strb.w	r3, [r7, #1413]	; 0x585
		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001ff6:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	f8c7 3578 	str.w	r3, [r7, #1400]	; 0x578
 8002000:	f8d7 3578 	ldr.w	r3, [r7, #1400]	; 0x578
 8002004:	2b96      	cmp	r3, #150	; 0x96
 8002006:	dddf      	ble.n	8001fc8 <main+0x218>
			}
		}

		/* Find hard-switching value */
		tuning = adc_buf2[zero_cross];
 8002008:	f897 2569 	ldrb.w	r2, [r7, #1385]	; 0x569
 800200c:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8002010:	f2a3 53a4 	subw	r3, r3, #1444	; 0x5a4
 8002014:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002018:	f8a7 3560 	strh.w	r3, [r7, #1376]	; 0x560

		/* Set duty cycle limits based on current limits */
		if (currentState != STATE_CALIBRATING)
 800201c:	4b25      	ldr	r3, [pc, #148]	; (80020b4 <main+0x304>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d049      	beq.n	80020b8 <main+0x308>
		{
			min_duty = cal_duty - 0.015;
 8002024:	a318      	add	r3, pc, #96	; (adr r3, 8002088 <main+0x2d8>)
 8002026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202a:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 800202e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002032:	f7fe f939 	bl	80002a8 <__aeabi_dsub>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 800203e:	e9c1 2300 	strd	r2, r3, [r1]
			max_duty = cal_duty + 0.015;
 8002042:	a311      	add	r3, pc, #68	; (adr r3, 8002088 <main+0x2d8>)
 8002044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002048:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 800204c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002050:	f7fe f92c 	bl	80002ac <__adddf3>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 800205c:	e9c1 2300 	strd	r2, r3, [r1]
 8002060:	e038      	b.n	80020d4 <main+0x324>
 8002062:	bf00      	nop
 8002064:	f3af 8000 	nop.w
 8002068:	33333333 	.word	0x33333333
 800206c:	3fd33333 	.word	0x3fd33333
 8002070:	9999999a 	.word	0x9999999a
 8002074:	3fd99999 	.word	0x3fd99999
 8002078:	9999999a 	.word	0x9999999a
 800207c:	3fc99999 	.word	0x3fc99999
 8002080:	00000000 	.word	0x00000000
 8002084:	4062e000 	.word	0x4062e000
 8002088:	eb851eb8 	.word	0xeb851eb8
 800208c:	3f8eb851 	.word	0x3f8eb851
 8002090:	20000254 	.word	0x20000254
 8002094:	200004f0 	.word	0x200004f0
 8002098:	200003c4 	.word	0x200003c4
 800209c:	200002e8 	.word	0x200002e8
 80020a0:	3ff00000 	.word	0x3ff00000
 80020a4:	20000a20 	.word	0x20000a20
 80020a8:	20000620 	.word	0x20000620
 80020ac:	20000464 	.word	0x20000464
 80020b0:	20000418 	.word	0x20000418
 80020b4:	200004ec 	.word	0x200004ec
		} else {
			min_duty = 0.2;
 80020b8:	a3cb      	add	r3, pc, #812	; (adr r3, 80023e8 <main+0x638>)
 80020ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020be:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 80020c2:	e9c1 2300 	strd	r2, r3, [r1]
			max_duty = 0.4;
 80020c6:	a3ca      	add	r3, pc, #808	; (adr r3, 80023f0 <main+0x640>)
 80020c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020cc:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 80020d0:	e9c1 2300 	strd	r2, r3, [r1]
		}

		uint8_t aRxBuffer[2];
		aTxRegPtr[0] = 0x02;
 80020d4:	2302      	movs	r3, #2
 80020d6:	f887 353c 	strb.w	r3, [r7, #1340]	; 0x53c
		aRxBuffer[0] = 0x00;
 80020da:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 80020de:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
		aRxBuffer[1] = 0x00;
 80020e6:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 80020ea:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80020ee:	2200      	movs	r2, #0
 80020f0:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
 80020f2:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2301      	movs	r3, #1
 80020fe:	2180      	movs	r1, #128	; 0x80
 8002100:	48b3      	ldr	r0, [pc, #716]	; (80023d0 <main+0x620>)
 8002102:	f003 fff5 	bl	80060f0 <HAL_I2C_Master_Transmit>
				(uint8_t*) aTxRegPtr, 1, HAL_MAX_DELAY);
		HAL_I2C_Master_Receive(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
 8002106:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800210a:	f04f 33ff 	mov.w	r3, #4294967295
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	2302      	movs	r3, #2
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	48ae      	ldr	r0, [pc, #696]	; (80023d0 <main+0x620>)
 8002116:	f004 f8df 	bl	80062d8 <HAL_I2C_Master_Receive>
				(uint8_t*) aRxBuffer, 2, HAL_MAX_DELAY);
		double voltage = (aRxBuffer[0] << 8 | aRxBuffer[1]) * 0.00125 * 20.1 / 5.1;
 800211a:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800211e:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	021b      	lsls	r3, r3, #8
 8002126:	f507 62b5 	add.w	r2, r7, #1448	; 0x5a8
 800212a:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 800212e:	7852      	ldrb	r2, [r2, #1]
 8002130:	4313      	orrs	r3, r2
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fa06 	bl	8000544 <__aeabi_i2d>
 8002138:	a399      	add	r3, pc, #612	; (adr r3, 80023a0 <main+0x5f0>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	f7fe fa6b 	bl	8000618 <__aeabi_dmul>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	a397      	add	r3, pc, #604	; (adr r3, 80023a8 <main+0x5f8>)
 800214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002150:	f7fe fa62 	bl	8000618 <__aeabi_dmul>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	a394      	add	r3, pc, #592	; (adr r3, 80023b0 <main+0x600>)
 800215e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002162:	f7fe fb83 	bl	800086c <__aeabi_ddiv>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 800216e:	e9c1 2300 	strd	r2, r3, [r1]

		if (tuning > tuning_threshold && adc_max > vds_checking_threshold) {
 8002172:	f9b7 2560 	ldrsh.w	r2, [r7, #1376]	; 0x560
 8002176:	f9b7 3562 	ldrsh.w	r3, [r7, #1378]	; 0x562
 800217a:	429a      	cmp	r2, r3
 800217c:	dd71      	ble.n	8002262 <main+0x4b2>
 800217e:	f8b7 2586 	ldrh.w	r2, [r7, #1414]	; 0x586
 8002182:	f8b7 3564 	ldrh.w	r3, [r7, #1380]	; 0x564
 8002186:	429a      	cmp	r2, r3
 8002188:	d96b      	bls.n	8002262 <main+0x4b2>
			current_duty = current_duty - 0.002;
 800218a:	a38b      	add	r3, pc, #556	; (adr r3, 80023b8 <main+0x608>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8002194:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002198:	f7fe f886 	bl	80002a8 <__aeabi_dsub>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 80021a4:	e9c1 2300 	strd	r2, r3, [r1]
			low_vds_count_threshold = current_duty * ADC_BUF_LEN - 1;
 80021a8:	a385      	add	r3, pc, #532	; (adr r3, 80023c0 <main+0x610>)
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 80021b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021b6:	f7fe fa2f 	bl	8000618 <__aeabi_dmul>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	4b83      	ldr	r3, [pc, #524]	; (80023d4 <main+0x624>)
 80021c8:	f7fe f86e 	bl	80002a8 <__aeabi_dsub>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4610      	mov	r0, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	f7fe fcf8 	bl	8000bc8 <__aeabi_d2uiz>
 80021d8:	4603      	mov	r3, r0
 80021da:	f887 3583 	strb.w	r3, [r7, #1411]	; 0x583
			if (current_duty > min_duty) {
 80021de:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 80021e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e6:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 80021ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021ee:	f7fe fca3 	bl	8000b38 <__aeabi_dcmpgt>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d02d      	beq.n	8002254 <main+0x4a4>
				compare1_val = current_duty * signal_period;
 80021f8:	f8b7 356e 	ldrh.w	r3, [r7, #1390]	; 0x56e
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe f9a1 	bl	8000544 <__aeabi_i2d>
 8002202:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8002206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220a:	f7fe fa05 	bl	8000618 <__aeabi_dmul>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4610      	mov	r0, r2
 8002214:	4619      	mov	r1, r3
 8002216:	f7fe fcd7 	bl	8000bc8 <__aeabi_d2uiz>
 800221a:	4603      	mov	r3, r0
 800221c:	f8a7 356c 	strh.w	r3, [r7, #1388]	; 0x56c
				compare3_val = compare1_val + signal_period / 2;
 8002220:	f8b7 356e 	ldrh.w	r3, [r7, #1390]	; 0x56e
 8002224:	085b      	lsrs	r3, r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	f8b7 356c 	ldrh.w	r3, [r7, #1388]	; 0x56c
 800222c:	4413      	add	r3, r2
 800222e:	f8a7 356a 	strh.w	r3, [r7, #1386]	; 0x56a
				__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 8002232:	4b69      	ldr	r3, [pc, #420]	; (80023d8 <main+0x628>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f8b7 256c 	ldrh.w	r2, [r7, #1388]	; 0x56c
 800223a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
						HRTIM_COMPAREUNIT_1, compare1_val);
				__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 800223e:	4b66      	ldr	r3, [pc, #408]	; (80023d8 <main+0x628>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8b7 256a 	ldrh.w	r2, [r7, #1386]	; 0x56a
 8002246:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
						HRTIM_COMPAREUNIT_3, compare3_val);
				HAL_HRTIM_SoftwareUpdate(&hhrtim1, HRTIM_TIMERUPDATE_A);
 800224a:	2102      	movs	r1, #2
 800224c:	4862      	ldr	r0, [pc, #392]	; (80023d8 <main+0x628>)
 800224e:	f003 fb3a 	bl	80058c6 <HAL_HRTIM_SoftwareUpdate>
			if (current_duty > min_duty) {
 8002252:	e0d8      	b.n	8002406 <main+0x656>
			} else {
				limit_reached = true;
 8002254:	2301      	movs	r3, #1
 8002256:	f887 3584 	strb.w	r3, [r7, #1412]	; 0x584
				gAlertType = HS;
 800225a:	4b60      	ldr	r3, [pc, #384]	; (80023dc <main+0x62c>)
 800225c:	2204      	movs	r2, #4
 800225e:	701a      	strb	r2, [r3, #0]
			if (current_duty > min_duty) {
 8002260:	e0d1      	b.n	8002406 <main+0x656>
			}
		} else if (low_vds_count > low_vds_count_threshold
 8002262:	f897 2585 	ldrb.w	r2, [r7, #1413]	; 0x585
 8002266:	f897 3583 	ldrb.w	r3, [r7, #1411]	; 0x583
 800226a:	429a      	cmp	r2, r3
 800226c:	d971      	bls.n	8002352 <main+0x5a2>
				&& adc_max > vds_checking_threshold) {
 800226e:	f8b7 2586 	ldrh.w	r2, [r7, #1414]	; 0x586
 8002272:	f8b7 3564 	ldrh.w	r3, [r7, #1380]	; 0x564
 8002276:	429a      	cmp	r2, r3
 8002278:	d96b      	bls.n	8002352 <main+0x5a2>
			current_duty = current_duty + 0.002;
 800227a:	a34f      	add	r3, pc, #316	; (adr r3, 80023b8 <main+0x608>)
 800227c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002280:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8002284:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002288:	f7fe f810 	bl	80002ac <__adddf3>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8002294:	e9c1 2300 	strd	r2, r3, [r1]
			low_vds_count_threshold = current_duty * ADC_BUF_LEN - 1;
 8002298:	a349      	add	r3, pc, #292	; (adr r3, 80023c0 <main+0x610>)
 800229a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229e:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 80022a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022a6:	f7fe f9b7 	bl	8000618 <__aeabi_dmul>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4610      	mov	r0, r2
 80022b0:	4619      	mov	r1, r3
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	4b47      	ldr	r3, [pc, #284]	; (80023d4 <main+0x624>)
 80022b8:	f7fd fff6 	bl	80002a8 <__aeabi_dsub>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f7fe fc80 	bl	8000bc8 <__aeabi_d2uiz>
 80022c8:	4603      	mov	r3, r0
 80022ca:	f887 3583 	strb.w	r3, [r7, #1411]	; 0x583
			if (current_duty < max_duty) {
 80022ce:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80022d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d6:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 80022da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022de:	f7fe fc0d 	bl	8000afc <__aeabi_dcmplt>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d02d      	beq.n	8002344 <main+0x594>
				compare1_val = current_duty * signal_period;
 80022e8:	f8b7 356e 	ldrh.w	r3, [r7, #1390]	; 0x56e
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fe f929 	bl	8000544 <__aeabi_i2d>
 80022f2:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 80022f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fa:	f7fe f98d 	bl	8000618 <__aeabi_dmul>
 80022fe:	4602      	mov	r2, r0
 8002300:	460b      	mov	r3, r1
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	f7fe fc5f 	bl	8000bc8 <__aeabi_d2uiz>
 800230a:	4603      	mov	r3, r0
 800230c:	f8a7 356c 	strh.w	r3, [r7, #1388]	; 0x56c
				compare3_val = compare1_val + signal_period / 2;
 8002310:	f8b7 356e 	ldrh.w	r3, [r7, #1390]	; 0x56e
 8002314:	085b      	lsrs	r3, r3, #1
 8002316:	b29a      	uxth	r2, r3
 8002318:	f8b7 356c 	ldrh.w	r3, [r7, #1388]	; 0x56c
 800231c:	4413      	add	r3, r2
 800231e:	f8a7 356a 	strh.w	r3, [r7, #1386]	; 0x56a
				__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 8002322:	4b2d      	ldr	r3, [pc, #180]	; (80023d8 <main+0x628>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8b7 256c 	ldrh.w	r2, [r7, #1388]	; 0x56c
 800232a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
						HRTIM_COMPAREUNIT_1, compare1_val);
				__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 800232e:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <main+0x628>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f8b7 256a 	ldrh.w	r2, [r7, #1386]	; 0x56a
 8002336:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
						HRTIM_COMPAREUNIT_3, compare3_val);
				HAL_HRTIM_SoftwareUpdate(&hhrtim1, HRTIM_TIMERUPDATE_A);
 800233a:	2102      	movs	r1, #2
 800233c:	4826      	ldr	r0, [pc, #152]	; (80023d8 <main+0x628>)
 800233e:	f003 fac2 	bl	80058c6 <HAL_HRTIM_SoftwareUpdate>
			if (current_duty < max_duty) {
 8002342:	e060      	b.n	8002406 <main+0x656>
			} else {
				limit_reached = true;
 8002344:	2301      	movs	r3, #1
 8002346:	f887 3584 	strb.w	r3, [r7, #1412]	; 0x584
				gAlertType = DI;
 800234a:	4b24      	ldr	r3, [pc, #144]	; (80023dc <main+0x62c>)
 800234c:	2205      	movs	r2, #5
 800234e:	701a      	strb	r2, [r3, #0]
			if (current_duty < max_duty) {
 8002350:	e059      	b.n	8002406 <main+0x656>
			}
		} else if (currentState == STATE_CALIBRATING
 8002352:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <main+0x630>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d155      	bne.n	8002406 <main+0x656>
				&& adc_max > vds_checking_threshold) {
 800235a:	f8b7 2586 	ldrh.w	r2, [r7, #1414]	; 0x586
 800235e:	f8b7 3564 	ldrh.w	r3, [r7, #1380]	; 0x564
 8002362:	429a      	cmp	r2, r3
 8002364:	d94f      	bls.n	8002406 <main+0x656>
			cal_duty = current_duty;
 8002366:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800236a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236e:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 8002372:	e9c1 2300 	strd	r2, r3, [r1]
			if (voltage > 66.5) {
 8002376:	a314      	add	r3, pc, #80	; (adr r3, 80023c8 <main+0x618>)
 8002378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237c:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 8002380:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002384:	f7fe fbd8 	bl	8000b38 <__aeabi_dcmpgt>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d03b      	beq.n	8002406 <main+0x656>
				if (keepCalState == 0) {
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <main+0x634>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d12f      	bne.n	80023f8 <main+0x648>
					handleEvent(EVENT_CALIBRATE_DONE);
 8002398:	2001      	movs	r0, #1
 800239a:	f000 fd55 	bl	8002e48 <handleEvent>
 800239e:	e032      	b.n	8002406 <main+0x656>
 80023a0:	47ae147b 	.word	0x47ae147b
 80023a4:	3f547ae1 	.word	0x3f547ae1
 80023a8:	9999999a 	.word	0x9999999a
 80023ac:	40341999 	.word	0x40341999
 80023b0:	66666666 	.word	0x66666666
 80023b4:	40146666 	.word	0x40146666
 80023b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80023bc:	3f60624d 	.word	0x3f60624d
 80023c0:	00000000 	.word	0x00000000
 80023c4:	4062e000 	.word	0x4062e000
 80023c8:	00000000 	.word	0x00000000
 80023cc:	4050a000 	.word	0x4050a000
 80023d0:	200003c4 	.word	0x200003c4
 80023d4:	3ff00000 	.word	0x3ff00000
 80023d8:	200002e8 	.word	0x200002e8
 80023dc:	20000a24 	.word	0x20000a24
 80023e0:	200004ec 	.word	0x200004ec
 80023e4:	200004ed 	.word	0x200004ed
 80023e8:	9999999a 	.word	0x9999999a
 80023ec:	3fc99999 	.word	0x3fc99999
 80023f0:	9999999a 	.word	0x9999999a
 80023f4:	3fd99999 	.word	0x3fd99999
				} else {
					keepCalState--;
 80023f8:	4bb7      	ldr	r3, [pc, #732]	; (80026d8 <main+0x928>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4bb5      	ldr	r3, [pc, #724]	; (80026d8 <main+0x928>)
 8002404:	701a      	strb	r2, [r3, #0]
				}
			}

		}

		aTxRegPtr[0] = 0x00;
 8002406:	2300      	movs	r3, #0
 8002408:	f887 353c 	strb.w	r3, [r7, #1340]	; 0x53c
		aRxBuffer[0] = 0x00;
 800240c:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8002410:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8002414:	2200      	movs	r2, #0
 8002416:	701a      	strb	r2, [r3, #0]
		aRxBuffer[1] = 0x00;
 8002418:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800241c:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8002420:	2200      	movs	r2, #0
 8002422:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) I2C_ADD_TEMP1 << 1,
 8002424:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 8002428:	f04f 33ff 	mov.w	r3, #4294967295
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	2301      	movs	r3, #1
 8002430:	2190      	movs	r1, #144	; 0x90
 8002432:	48aa      	ldr	r0, [pc, #680]	; (80026dc <main+0x92c>)
 8002434:	f003 fe5c 	bl	80060f0 <HAL_I2C_Master_Transmit>
				(uint8_t*) aTxRegPtr, 1, HAL_MAX_DELAY);
		HAL_I2C_Master_Receive(&hi2c1, (uint16_t) I2C_ADD_TEMP1 << 1,
 8002438:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800243c:	f04f 33ff 	mov.w	r3, #4294967295
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	2302      	movs	r3, #2
 8002444:	2190      	movs	r1, #144	; 0x90
 8002446:	48a5      	ldr	r0, [pc, #660]	; (80026dc <main+0x92c>)
 8002448:	f003 ff46 	bl	80062d8 <HAL_I2C_Master_Receive>
				(uint8_t*) aRxBuffer, 2, HAL_MAX_DELAY);
		double temp1 = (aRxBuffer[0] << 4 | aRxBuffer[1] >> 4) * 0.0625;
 800244c:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8002450:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	f507 62b5 	add.w	r2, r7, #1448	; 0x5a8
 800245c:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 8002460:	7852      	ldrb	r2, [r2, #1]
 8002462:	0912      	lsrs	r2, r2, #4
 8002464:	b2d2      	uxtb	r2, r2
 8002466:	4313      	orrs	r3, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe f86b 	bl	8000544 <__aeabi_i2d>
 800246e:	f04f 0200 	mov.w	r2, #0
 8002472:	4b9b      	ldr	r3, [pc, #620]	; (80026e0 <main+0x930>)
 8002474:	f7fe f8d0 	bl	8000618 <__aeabi_dmul>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 8002480:	e9c1 2300 	strd	r2, r3, [r1]

		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) I2C_ADD_TEMP2 << 1U,
 8002484:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 8002488:	f04f 33ff 	mov.w	r3, #4294967295
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2301      	movs	r3, #1
 8002490:	2192      	movs	r1, #146	; 0x92
 8002492:	4892      	ldr	r0, [pc, #584]	; (80026dc <main+0x92c>)
 8002494:	f003 fe2c 	bl	80060f0 <HAL_I2C_Master_Transmit>
				(uint8_t*) aTxRegPtr, 1, HAL_MAX_DELAY);
		HAL_I2C_Master_Receive(&hi2c1, (uint16_t) I2C_ADD_TEMP2 << 1U,
 8002498:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800249c:	f04f 33ff 	mov.w	r3, #4294967295
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	2302      	movs	r3, #2
 80024a4:	2192      	movs	r1, #146	; 0x92
 80024a6:	488d      	ldr	r0, [pc, #564]	; (80026dc <main+0x92c>)
 80024a8:	f003 ff16 	bl	80062d8 <HAL_I2C_Master_Receive>
				(uint8_t*) aRxBuffer, 2, HAL_MAX_DELAY);
		double temp2 = (aRxBuffer[0] << 4 | aRxBuffer[1] >> 4) * 0.0625;
 80024ac:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 80024b0:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	f507 62b5 	add.w	r2, r7, #1448	; 0x5a8
 80024bc:	f2a2 4274 	subw	r2, r2, #1140	; 0x474
 80024c0:	7852      	ldrb	r2, [r2, #1]
 80024c2:	0912      	lsrs	r2, r2, #4
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	4313      	orrs	r3, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe f83b 	bl	8000544 <__aeabi_i2d>
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	4b83      	ldr	r3, [pc, #524]	; (80026e0 <main+0x930>)
 80024d4:	f7fe f8a0 	bl	8000618 <__aeabi_dmul>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 80024e0:	e9c1 2300 	strd	r2, r3, [r1]

		aTxRegPtr[0] = 0x01;
 80024e4:	2301      	movs	r3, #1
 80024e6:	f887 353c 	strb.w	r3, [r7, #1340]	; 0x53c
		aRxBuffer[0] = 0x00;
 80024ea:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 80024ee:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
		aRxBuffer[1] = 0x00;
 80024f6:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 80024fa:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 80024fe:	2200      	movs	r2, #0
 8002500:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
 8002502:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 8002506:	f04f 33ff 	mov.w	r3, #4294967295
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	2301      	movs	r3, #1
 800250e:	2180      	movs	r1, #128	; 0x80
 8002510:	4872      	ldr	r0, [pc, #456]	; (80026dc <main+0x92c>)
 8002512:	f003 fded 	bl	80060f0 <HAL_I2C_Master_Transmit>
				(uint8_t*) aTxRegPtr, 1, HAL_MAX_DELAY);
		HAL_I2C_Master_Receive(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
 8002516:	f507 729a 	add.w	r2, r7, #308	; 0x134
 800251a:	f04f 33ff 	mov.w	r3, #4294967295
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2302      	movs	r3, #2
 8002522:	2180      	movs	r1, #128	; 0x80
 8002524:	486d      	ldr	r0, [pc, #436]	; (80026dc <main+0x92c>)
 8002526:	f003 fed7 	bl	80062d8 <HAL_I2C_Master_Receive>
				(uint8_t*) aRxBuffer, 2, HAL_MAX_DELAY);
		double current = (int16_t) (aRxBuffer[0] << 8 | aRxBuffer[1])
 800252a:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800252e:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	b21a      	sxth	r2, r3
 8002538:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 800253c:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8002540:	785b      	ldrb	r3, [r3, #1]
 8002542:	b21b      	sxth	r3, r3
 8002544:	4313      	orrs	r3, r2
 8002546:	b21b      	sxth	r3, r3
				* 0.0000025 / 0.012;
 8002548:	4618      	mov	r0, r3
 800254a:	f7fd fffb 	bl	8000544 <__aeabi_i2d>
 800254e:	a35c      	add	r3, pc, #368	; (adr r3, 80026c0 <main+0x910>)
 8002550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002554:	f7fe f860 	bl	8000618 <__aeabi_dmul>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
		double current = (int16_t) (aRxBuffer[0] << 8 | aRxBuffer[1])
 8002560:	a359      	add	r3, pc, #356	; (adr r3, 80026c8 <main+0x918>)
 8002562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002566:	f7fe f981 	bl	800086c <__aeabi_ddiv>
 800256a:	4602      	mov	r2, r0
 800256c:	460b      	mov	r3, r1
 800256e:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 8002572:	e9c1 2300 	strd	r2, r3, [r1]


		// handle ALERTS
		if (temp1 > TEMP_LIMIT) {
 8002576:	4b5b      	ldr	r3, [pc, #364]	; (80026e4 <main+0x934>)
 8002578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257c:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 8002580:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002584:	f7fe fad8 	bl	8000b38 <__aeabi_dcmpgt>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <main+0x7ea>
			limit_reached = true;
 800258e:	2301      	movs	r3, #1
 8002590:	f887 3584 	strb.w	r3, [r7, #1412]	; 0x584
			gAlertType = OT;
 8002594:	4b54      	ldr	r3, [pc, #336]	; (80026e8 <main+0x938>)
 8002596:	2203      	movs	r2, #3
 8002598:	701a      	strb	r2, [r3, #0]
		}

		if (temp2 > TEMP_LIMIT) {
 800259a:	4b52      	ldr	r3, [pc, #328]	; (80026e4 <main+0x934>)
 800259c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a0:	f507 61a9 	add.w	r1, r7, #1352	; 0x548
 80025a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025a8:	f7fe fac6 	bl	8000b38 <__aeabi_dcmpgt>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <main+0x80e>
			limit_reached = true;
 80025b2:	2301      	movs	r3, #1
 80025b4:	f887 3584 	strb.w	r3, [r7, #1412]	; 0x584
			gAlertType = OT;
 80025b8:	4b4b      	ldr	r3, [pc, #300]	; (80026e8 <main+0x938>)
 80025ba:	2203      	movs	r2, #3
 80025bc:	701a      	strb	r2, [r3, #0]
		}

		if (voltage > VOLT_LIMIT){
 80025be:	4b4b      	ldr	r3, [pc, #300]	; (80026ec <main+0x93c>)
 80025c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c4:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 80025c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025cc:	f7fe fab4 	bl	8000b38 <__aeabi_dcmpgt>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <main+0x832>
			limit_reached = true;
 80025d6:	2301      	movs	r3, #1
 80025d8:	f887 3584 	strb.w	r3, [r7, #1412]	; 0x584
			gAlertType = OV;
 80025dc:	4b42      	ldr	r3, [pc, #264]	; (80026e8 <main+0x938>)
 80025de:	2201      	movs	r2, #1
 80025e0:	701a      	strb	r2, [r3, #0]
		}

		if (current > CURRENT_LIMIT) {
 80025e2:	4b43      	ldr	r3, [pc, #268]	; (80026f0 <main+0x940>)
 80025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e8:	f507 61a8 	add.w	r1, r7, #1344	; 0x540
 80025ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025f0:	f7fe faa2 	bl	8000b38 <__aeabi_dcmpgt>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <main+0x856>
			limit_reached = true;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f887 3584 	strb.w	r3, [r7, #1412]	; 0x584
			gAlertType = OC;
 8002600:	4b39      	ldr	r3, [pc, #228]	; (80026e8 <main+0x938>)
 8002602:	2202      	movs	r2, #2
 8002604:	701a      	strb	r2, [r3, #0]
		}

		if (limit_reached) {
 8002606:	f897 3584 	ldrb.w	r3, [r7, #1412]	; 0x584
 800260a:	2b00      	cmp	r3, #0
 800260c:	d076      	beq.n	80026fc <main+0x94c>
			handleEvent(EVENT_ALERT);
 800260e:	2003      	movs	r0, #3
 8002610:	f000 fc1a 	bl	8002e48 <handleEvent>
			limit_reached = false;
 8002614:	2300      	movs	r3, #0
 8002616:	f887 3584 	strb.w	r3, [r7, #1412]	; 0x584
			// reset waveform
			current_duty = initial_duty;
 800261a:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002622:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8002626:	e9c1 2300 	strd	r2, r3, [r1]
			compare1_val = current_duty * signal_period;
 800262a:	f8b7 356e 	ldrh.w	r3, [r7, #1390]	; 0x56e
 800262e:	4618      	mov	r0, r3
 8002630:	f7fd ff88 	bl	8000544 <__aeabi_i2d>
 8002634:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8002638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263c:	f7fd ffec 	bl	8000618 <__aeabi_dmul>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	f7fe fabe 	bl	8000bc8 <__aeabi_d2uiz>
 800264c:	4603      	mov	r3, r0
 800264e:	f8a7 356c 	strh.w	r3, [r7, #1388]	; 0x56c
			compare3_val = compare1_val + signal_period / 2;
 8002652:	f8b7 356e 	ldrh.w	r3, [r7, #1390]	; 0x56e
 8002656:	085b      	lsrs	r3, r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	f8b7 356c 	ldrh.w	r3, [r7, #1388]	; 0x56c
 800265e:	4413      	add	r3, r2
 8002660:	f8a7 356a 	strh.w	r3, [r7, #1386]	; 0x56a
			low_vds_count_threshold = current_duty * ADC_BUF_LEN - 1;
 8002664:	a31a      	add	r3, pc, #104	; (adr r3, 80026d0 <main+0x920>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 800266e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002672:	f7fd ffd1 	bl	8000618 <__aeabi_dmul>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <main+0x944>)
 8002684:	f7fd fe10 	bl	80002a8 <__aeabi_dsub>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	f7fe fa9a 	bl	8000bc8 <__aeabi_d2uiz>
 8002694:	4603      	mov	r3, r0
 8002696:	f887 3583 	strb.w	r3, [r7, #1411]	; 0x583
			__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 800269a:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <main+0x948>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f8b7 256c 	ldrh.w	r2, [r7, #1388]	; 0x56c
 80026a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					HRTIM_COMPAREUNIT_1, compare1_val);
			__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 80026a6:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <main+0x948>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f8b7 256a 	ldrh.w	r2, [r7, #1386]	; 0x56a
 80026ae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					HRTIM_COMPAREUNIT_3, compare3_val);
			HAL_HRTIM_SoftwareUpdate(&hhrtim1, HRTIM_TIMERUPDATE_A);
 80026b2:	2102      	movs	r1, #2
 80026b4:	4810      	ldr	r0, [pc, #64]	; (80026f8 <main+0x948>)
 80026b6:	f003 f906 	bl	80058c6 <HAL_HRTIM_SoftwareUpdate>
 80026ba:	e022      	b.n	8002702 <main+0x952>
 80026bc:	f3af 8000 	nop.w
 80026c0:	88e368f1 	.word	0x88e368f1
 80026c4:	3ec4f8b5 	.word	0x3ec4f8b5
 80026c8:	bc6a7efa 	.word	0xbc6a7efa
 80026cc:	3f889374 	.word	0x3f889374
 80026d0:	00000000 	.word	0x00000000
 80026d4:	4062e000 	.word	0x4062e000
 80026d8:	200004ed 	.word	0x200004ed
 80026dc:	200003c4 	.word	0x200003c4
 80026e0:	3fb00000 	.word	0x3fb00000
 80026e4:	20000010 	.word	0x20000010
 80026e8:	20000a24 	.word	0x20000a24
 80026ec:	20000020 	.word	0x20000020
 80026f0:	20000018 	.word	0x20000018
 80026f4:	3ff00000 	.word	0x3ff00000
 80026f8:	200002e8 	.word	0x200002e8
		} else {
			gAlertType = NONE;
 80026fc:	4b32      	ldr	r3, [pc, #200]	; (80027c8 <main+0xa18>)
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
		}

		if (SEND_TIMER_FLAG && UART_READY && (currentState != STATE_CALIBRATING))
 8002702:	4b32      	ldr	r3, [pc, #200]	; (80027cc <main+0xa1c>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d058      	beq.n	80027be <main+0xa0e>
 800270c:	4b30      	ldr	r3, [pc, #192]	; (80027d0 <main+0xa20>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d053      	beq.n	80027be <main+0xa0e>
 8002716:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <main+0xa24>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d04f      	beq.n	80027be <main+0xa0e>
		{
			sprintf(json,
 800271e:	f9b7 3560 	ldrsh.w	r3, [r7, #1376]	; 0x560
 8002722:	f897 2585 	ldrb.w	r2, [r7, #1413]	; 0x585
 8002726:	f897 1583 	ldrb.w	r1, [r7, #1411]	; 0x583
 800272a:	4827      	ldr	r0, [pc, #156]	; (80027c8 <main+0xa18>)
 800272c:	7800      	ldrb	r0, [r0, #0]
 800272e:	4604      	mov	r4, r0
 8002730:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8002734:	940b      	str	r4, [sp, #44]	; 0x2c
 8002736:	910a      	str	r1, [sp, #40]	; 0x28
 8002738:	9209      	str	r2, [sp, #36]	; 0x24
 800273a:	9308      	str	r3, [sp, #32]
 800273c:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8002740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002744:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002748:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002750:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002754:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002760:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 8002764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002768:	e9cd 2300 	strd	r2, r3, [sp]
 800276c:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8002770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002774:	4918      	ldr	r1, [pc, #96]	; (80027d8 <main+0xa28>)
 8002776:	f009 f8d1 	bl	800b91c <siprintf>
					"{\"temperature1\":%.2f,\"temperature2\":%.2f,\"duty\":%.3f,\"voltage\":%.2f,\"current\":%.2f,\"tuning\":%i,\"low_vds\":%i,\"low_vds_threshold\":%i,\"alert\":%i",
					temp1, temp2, current_duty, voltage, current, tuning,
					low_vds_count, low_vds_count_threshold, gAlertType);
			strcat(json, "}");
 800277a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800277e:	4618      	mov	r0, r3
 8002780:	f7fd fd86 	bl	8000290 <strlen>
 8002784:	4603      	mov	r3, r0
 8002786:	461a      	mov	r2, r3
 8002788:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800278c:	4413      	add	r3, r2
 800278e:	4913      	ldr	r1, [pc, #76]	; (80027dc <main+0xa2c>)
 8002790:	461a      	mov	r2, r3
 8002792:	460b      	mov	r3, r1
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	8013      	strh	r3, [r2, #0]

			HAL_UART_Transmit_IT(&huart2, (uint8_t*) json, strlen(json));
 8002798:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800279c:	4618      	mov	r0, r3
 800279e:	f7fd fd77 	bl	8000290 <strlen>
 80027a2:	4603      	mov	r3, r0
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80027aa:	4619      	mov	r1, r3
 80027ac:	480c      	ldr	r0, [pc, #48]	; (80027e0 <main+0xa30>)
 80027ae:	f006 fa33 	bl	8008c18 <HAL_UART_Transmit_IT>
			UART_READY = false;
 80027b2:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <main+0xa20>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
			SEND_TIMER_FLAG = false;
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <main+0xa1c>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]
		}

		HAL_Delay(10);
 80027be:	200a      	movs	r0, #10
 80027c0:	f001 f836 	bl	8003830 <HAL_Delay>
	while (1) {
 80027c4:	f7ff bbc5 	b.w	8001f52 <main+0x1a2>
 80027c8:	20000a24 	.word	0x20000a24
 80027cc:	20000a23 	.word	0x20000a23
 80027d0:	20000028 	.word	0x20000028
 80027d4:	200004ec 	.word	0x200004ec
 80027d8:	0800e3b4 	.word	0x0800e3b4
 80027dc:	0800e444 	.word	0x0800e444
 80027e0:	20000464 	.word	0x20000464

080027e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b096      	sub	sp, #88	; 0x58
 80027e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027ee:	2228      	movs	r2, #40	; 0x28
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f009 f8f5 	bl	800b9e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027f8:	f107 031c 	add.w	r3, r7, #28
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002808:	463b      	mov	r3, r7
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	611a      	str	r2, [r3, #16]
 8002816:	615a      	str	r2, [r3, #20]
 8002818:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800281a:	2301      	movs	r3, #1
 800281c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800281e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002822:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002824:	2300      	movs	r3, #0
 8002826:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002828:	2301      	movs	r3, #1
 800282a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800282c:	2302      	movs	r3, #2
 800282e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002834:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8002836:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 800283a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800283c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002840:	4618      	mov	r0, r3
 8002842:	f004 faf1 	bl	8006e28 <HAL_RCC_OscConfig>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800284c:	f000 fc96 	bl	800317c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002850:	230f      	movs	r3, #15
 8002852:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002854:	2302      	movs	r3, #2
 8002856:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002858:	2300      	movs	r3, #0
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800285c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002860:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002862:	2300      	movs	r3, #0
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002866:	f107 031c 	add.w	r3, r7, #28
 800286a:	2102      	movs	r1, #2
 800286c:	4618      	mov	r0, r3
 800286e:	f005 fb19 	bl	8007ea4 <HAL_RCC_ClockConfig>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002878:	f000 fc80 	bl	800317c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_I2C1;
 800287c:	f244 0320 	movw	r3, #16416	; 0x4020
 8002880:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8002882:	2310      	movs	r3, #16
 8002884:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_PLLCLK;
 8002886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800288a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800288c:	463b      	mov	r3, r7
 800288e:	4618      	mov	r0, r3
 8002890:	f005 fd3e 	bl	8008310 <HAL_RCCEx_PeriphCLKConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800289a:	f000 fc6f 	bl	800317c <Error_Handler>
  }
}
 800289e:	bf00      	nop
 80028a0:	3758      	adds	r7, #88	; 0x58
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028ae:	463b      	mov	r3, r7
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	611a      	str	r2, [r3, #16]
 80028bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80028be:	4b28      	ldr	r3, [pc, #160]	; (8002960 <MX_ADC2_Init+0xb8>)
 80028c0:	4a28      	ldr	r2, [pc, #160]	; (8002964 <MX_ADC2_Init+0xbc>)
 80028c2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80028c4:	4b26      	ldr	r3, [pc, #152]	; (8002960 <MX_ADC2_Init+0xb8>)
 80028c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028ca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80028cc:	4b24      	ldr	r3, [pc, #144]	; (8002960 <MX_ADC2_Init+0xb8>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80028d2:	4b23      	ldr	r3, [pc, #140]	; (8002960 <MX_ADC2_Init+0xb8>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80028d8:	4b21      	ldr	r3, [pc, #132]	; (8002960 <MX_ADC2_Init+0xb8>)
 80028da:	2200      	movs	r2, #0
 80028dc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80028de:	4b20      	ldr	r3, [pc, #128]	; (8002960 <MX_ADC2_Init+0xb8>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80028e6:	4b1e      	ldr	r3, [pc, #120]	; (8002960 <MX_ADC2_Init+0xb8>)
 80028e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONVHRTIM_TRG1;
 80028ee:	4b1c      	ldr	r3, [pc, #112]	; (8002960 <MX_ADC2_Init+0xb8>)
 80028f0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80028f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028f6:	4b1a      	ldr	r3, [pc, #104]	; (8002960 <MX_ADC2_Init+0xb8>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80028fc:	4b18      	ldr	r3, [pc, #96]	; (8002960 <MX_ADC2_Init+0xb8>)
 80028fe:	2201      	movs	r2, #1
 8002900:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002902:	4b17      	ldr	r3, [pc, #92]	; (8002960 <MX_ADC2_Init+0xb8>)
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800290a:	4b15      	ldr	r3, [pc, #84]	; (8002960 <MX_ADC2_Init+0xb8>)
 800290c:	2204      	movs	r2, #4
 800290e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002910:	4b13      	ldr	r3, [pc, #76]	; (8002960 <MX_ADC2_Init+0xb8>)
 8002912:	2200      	movs	r2, #0
 8002914:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <MX_ADC2_Init+0xb8>)
 8002918:	2200      	movs	r2, #0
 800291a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800291c:	4810      	ldr	r0, [pc, #64]	; (8002960 <MX_ADC2_Init+0xb8>)
 800291e:	f000 ffc9 	bl	80038b4 <HAL_ADC_Init>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8002928:	f000 fc28 	bl	800317c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800292c:	2305      	movs	r3, #5
 800292e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002930:	2301      	movs	r3, #1
 8002932:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002934:	2300      	movs	r3, #0
 8002936:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002938:	2300      	movs	r3, #0
 800293a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800293c:	2300      	movs	r3, #0
 800293e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002944:	463b      	mov	r3, r7
 8002946:	4619      	mov	r1, r3
 8002948:	4805      	ldr	r0, [pc, #20]	; (8002960 <MX_ADC2_Init+0xb8>)
 800294a:	f001 fa91 	bl	8003e70 <HAL_ADC_ConfigChannel>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8002954:	f000 fc12 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002958:	bf00      	nop
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20000254 	.word	0x20000254
 8002964:	50000100 	.word	0x50000100

08002968 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b0a6      	sub	sp, #152	; 0x98
 800296c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 800296e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	605a      	str	r2, [r3, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8002978:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8002986:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800298a:	2254      	movs	r2, #84	; 0x54
 800298c:	2100      	movs	r1, #0
 800298e:	4618      	mov	r0, r3
 8002990:	f009 f827 	bl	800b9e2 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8002994:	f107 0320 	add.w	r3, r7, #32
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80029a0:	463b      	mov	r3, r7
 80029a2:	2220      	movs	r2, #32
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f009 f81b 	bl	800b9e2 <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 80029ac:	4b95      	ldr	r3, [pc, #596]	; (8002c04 <MX_HRTIM1_Init+0x29c>)
 80029ae:	4a96      	ldr	r2, [pc, #600]	; (8002c08 <MX_HRTIM1_Init+0x2a0>)
 80029b0:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 80029b2:	4b94      	ldr	r3, [pc, #592]	; (8002c04 <MX_HRTIM1_Init+0x29c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 80029b8:	4b92      	ldr	r3, [pc, #584]	; (8002c04 <MX_HRTIM1_Init+0x29c>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 80029be:	4891      	ldr	r0, [pc, #580]	; (8002c04 <MX_HRTIM1_Init+0x29c>)
 80029c0:	f002 faee 	bl	8004fa0 <HAL_HRTIM_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_HRTIM1_Init+0x66>
  {
    Error_Handler();
 80029ca:	f000 fbd7 	bl	800317c <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_14) != HAL_OK)
 80029ce:	210c      	movs	r1, #12
 80029d0:	488c      	ldr	r0, [pc, #560]	; (8002c04 <MX_HRTIM1_Init+0x29c>)
 80029d2:	f002 fbb1 	bl	8005138 <HAL_HRTIM_DLLCalibrationStart>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_HRTIM1_Init+0x78>
  {
    Error_Handler();
 80029dc:	f000 fbce 	bl	800317c <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 80029e0:	210a      	movs	r1, #10
 80029e2:	4888      	ldr	r0, [pc, #544]	; (8002c04 <MX_HRTIM1_Init+0x29c>)
 80029e4:	f002 fc00 	bl	80051e8 <HAL_HRTIM_PollForDLLCalibration>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <MX_HRTIM1_Init+0x8a>
  {
    Error_Handler();
 80029ee:	f000 fbc5 	bl	800317c <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_B;
 80029f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERB_PERIOD;
 80029fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 8002a02:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002a06:	461a      	mov	r2, r3
 8002a08:	2101      	movs	r1, #1
 8002a0a:	487e      	ldr	r0, [pc, #504]	; (8002c04 <MX_HRTIM1_Init+0x29c>)
 8002a0c:	f002 fc48 	bl	80052a0 <HAL_HRTIM_ADCTriggerConfig>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <MX_HRTIM1_Init+0xb2>
  {
    Error_Handler();
 8002a16:	f000 fbb1 	bl	800317c <Error_Handler>
  }
  pTimeBaseCfg.Period = 604;
 8002a1a:	f44f 7317 	mov.w	r3, #604	; 0x25c
 8002a1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8002a2e:	2308      	movs	r3, #8
 8002a30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 8002a34:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2105      	movs	r1, #5
 8002a3c:	4871      	ldr	r0, [pc, #452]	; (8002c04 <MX_HRTIM1_Init+0x29c>)
 8002a3e:	f002 fc07 	bl	8005250 <HAL_HRTIM_TimeBaseConfig>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <MX_HRTIM1_Init+0xe4>
  {
    Error_Handler();
 8002a48:	f000 fb98 	bl	800317c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 8002a50:	2300      	movs	r3, #0
 8002a52:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8002a54:	2300      	movs	r3, #0
 8002a56:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8002a60:	2300      	movs	r3, #0
 8002a62:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8002a64:	2300      	movs	r3, #0
 8002a66:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8002a70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a74:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8002a76:	2300      	movs	r3, #0
 8002a78:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8002a82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a86:	461a      	mov	r2, r3
 8002a88:	2105      	movs	r1, #5
 8002a8a:	485e      	ldr	r0, [pc, #376]	; (8002c04 <MX_HRTIM1_Init+0x29c>)
 8002a8c:	f002 fcb2 	bl	80053f4 <HAL_HRTIM_WaveformTimerConfig>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_HRTIM1_Init+0x132>
  {
    Error_Handler();
 8002a96:	f000 fb71 	bl	800317c <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xA0FF;
 8002a9a:	f24a 03ff 	movw	r3, #41215	; 0xa0ff
 8002a9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.Mode = HRTIM_MODE_SINGLESHOT_RETRIGGERABLE;
 8002aa2:	2310      	movs	r3, #16
 8002aa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8002aa8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002aac:	461a      	mov	r2, r3
 8002aae:	2100      	movs	r1, #0
 8002ab0:	4854      	ldr	r0, [pc, #336]	; (8002c04 <MX_HRTIM1_Init+0x29c>)
 8002ab2:	f002 fbcd 	bl	8005250 <HAL_HRTIM_TimeBaseConfig>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <MX_HRTIM1_Init+0x158>
  {
    Error_Handler();
 8002abc:	f000 fb5e 	bl	800317c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8002adc:	2300      	movs	r3, #0
 8002ade:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_PER;
 8002ae0:	2310      	movs	r3, #16
 8002ae2:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8002ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aec:	461a      	mov	r2, r3
 8002aee:	2100      	movs	r1, #0
 8002af0:	4844      	ldr	r0, [pc, #272]	; (8002c04 <MX_HRTIM1_Init+0x29c>)
 8002af2:	f002 fc7f 	bl	80053f4 <HAL_HRTIM_WaveformTimerConfig>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_HRTIM1_Init+0x198>
  {
    Error_Handler();
 8002afc:	f000 fb3e 	bl	800317c <Error_Handler>
  }
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8002b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	483d      	ldr	r0, [pc, #244]	; (8002c04 <MX_HRTIM1_Init+0x29c>)
 8002b0e:	f002 fc71 	bl	80053f4 <HAL_HRTIM_WaveformTimerConfig>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_HRTIM1_Init+0x1b4>
  {
    Error_Handler();
 8002b18:	f000 fb30 	bl	800317c <Error_Handler>
  }
  pCompareCfg.CompareValue = 207;
 8002b1c:	23cf      	movs	r3, #207	; 0xcf
 8002b1e:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002b20:	f107 0320 	add.w	r3, r7, #32
 8002b24:	2201      	movs	r2, #1
 8002b26:	2100      	movs	r1, #0
 8002b28:	4836      	ldr	r0, [pc, #216]	; (8002c04 <MX_HRTIM1_Init+0x29c>)
 8002b2a:	f002 fcd5 	bl	80054d8 <HAL_HRTIM_WaveformCompareConfig>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <MX_HRTIM1_Init+0x1d0>
  {
    Error_Handler();
 8002b34:	f000 fb22 	bl	800317c <Error_Handler>
  }
  pCompareCfg.CompareValue = 302;
 8002b38:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8002b3c:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8002b42:	2300      	movs	r3, #0
 8002b44:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002b46:	f107 0320 	add.w	r3, r7, #32
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	482d      	ldr	r0, [pc, #180]	; (8002c04 <MX_HRTIM1_Init+0x29c>)
 8002b50:	f002 fcc2 	bl	80054d8 <HAL_HRTIM_WaveformCompareConfig>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_HRTIM1_Init+0x1f6>
  {
    Error_Handler();
 8002b5a:	f000 fb0f 	bl	800317c <Error_Handler>
  }
  pCompareCfg.CompareValue = 509;
 8002b5e:	f240 13fd 	movw	r3, #509	; 0x1fd
 8002b62:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002b64:	f107 0320 	add.w	r3, r7, #32
 8002b68:	2204      	movs	r2, #4
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	4825      	ldr	r0, [pc, #148]	; (8002c04 <MX_HRTIM1_Init+0x29c>)
 8002b6e:	f002 fcb3 	bl	80054d8 <HAL_HRTIM_WaveformCompareConfig>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <MX_HRTIM1_Init+0x214>
  {
    Error_Handler();
 8002b78:	f000 fb00 	bl	800317c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_MASTERPER;
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8002b84:	2308      	movs	r3, #8
 8002b86:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002b8c:	2308      	movs	r3, #8
 8002b8e:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8002b9c:	463b      	mov	r3, r7
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4818      	ldr	r0, [pc, #96]	; (8002c04 <MX_HRTIM1_Init+0x29c>)
 8002ba4:	f002 fe06 	bl	80057b4 <HAL_HRTIM_WaveformOutputConfig>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_HRTIM1_Init+0x24a>
  {
    Error_Handler();
 8002bae:	f000 fae5 	bl	800317c <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 8002bb2:	2310      	movs	r3, #16
 8002bb4:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP3;
 8002bb6:	2320      	movs	r3, #32
 8002bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8002bba:	463b      	mov	r3, r7
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4810      	ldr	r0, [pc, #64]	; (8002c04 <MX_HRTIM1_Init+0x29c>)
 8002bc2:	f002 fdf7 	bl	80057b4 <HAL_HRTIM_WaveformOutputConfig>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_HRTIM1_Init+0x268>
  {
    Error_Handler();
 8002bcc:	f000 fad6 	bl	800317c <Error_Handler>
  }
  pTimeBaseCfg.Period = 1216;
 8002bd0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002bd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8002bd8:	2308      	movs	r3, #8
 8002bda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8002bde:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002be2:	461a      	mov	r2, r3
 8002be4:	2101      	movs	r1, #1
 8002be6:	4807      	ldr	r0, [pc, #28]	; (8002c04 <MX_HRTIM1_Init+0x29c>)
 8002be8:	f002 fb32 	bl	8005250 <HAL_HRTIM_TimeBaseConfig>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_HRTIM1_Init+0x28e>
  {
    Error_Handler();
 8002bf2:	f000 fac3 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8002bf6:	4803      	ldr	r0, [pc, #12]	; (8002c04 <MX_HRTIM1_Init+0x29c>)
 8002bf8:	f000 fb76 	bl	80032e8 <HAL_HRTIM_MspPostInit>

}
 8002bfc:	bf00      	nop
 8002bfe:	3798      	adds	r7, #152	; 0x98
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	200002e8 	.word	0x200002e8
 8002c08:	40017400 	.word	0x40017400

08002c0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <MX_I2C1_Init+0x74>)
 8002c12:	4a1c      	ldr	r2, [pc, #112]	; (8002c84 <MX_I2C1_Init+0x78>)
 8002c14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8002c16:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <MX_I2C1_Init+0x74>)
 8002c18:	4a1b      	ldr	r2, [pc, #108]	; (8002c88 <MX_I2C1_Init+0x7c>)
 8002c1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002c1c:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <MX_I2C1_Init+0x74>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c22:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <MX_I2C1_Init+0x74>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c28:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <MX_I2C1_Init+0x74>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002c2e:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <MX_I2C1_Init+0x74>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c34:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <MX_I2C1_Init+0x74>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c3a:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <MX_I2C1_Init+0x74>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c40:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <MX_I2C1_Init+0x74>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c46:	480e      	ldr	r0, [pc, #56]	; (8002c80 <MX_I2C1_Init+0x74>)
 8002c48:	f003 f9c2 	bl	8005fd0 <HAL_I2C_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002c52:	f000 fa93 	bl	800317c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c56:	2100      	movs	r1, #0
 8002c58:	4809      	ldr	r0, [pc, #36]	; (8002c80 <MX_I2C1_Init+0x74>)
 8002c5a:	f004 f82d 	bl	8006cb8 <HAL_I2CEx_ConfigAnalogFilter>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002c64:	f000 fa8a 	bl	800317c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4805      	ldr	r0, [pc, #20]	; (8002c80 <MX_I2C1_Init+0x74>)
 8002c6c:	f004 f86f 	bl	8006d4e <HAL_I2CEx_ConfigDigitalFilter>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002c76:	f000 fa81 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	200003c4 	.word	0x200003c4
 8002c84:	40005400 	.word	0x40005400
 8002c88:	10707dbc 	.word	0x10707dbc

08002c8c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c9c:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <MX_TIM6_Init+0x68>)
 8002c9e:	4a16      	ldr	r2, [pc, #88]	; (8002cf8 <MX_TIM6_Init+0x6c>)
 8002ca0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1024;
 8002ca2:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <MX_TIM6_Init+0x68>)
 8002ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ca8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002caa:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <MX_TIM6_Init+0x68>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 18750;
 8002cb0:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <MX_TIM6_Init+0x68>)
 8002cb2:	f644 123e 	movw	r2, #18750	; 0x493e
 8002cb6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb8:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <MX_TIM6_Init+0x68>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002cbe:	480d      	ldr	r0, [pc, #52]	; (8002cf4 <MX_TIM6_Init+0x68>)
 8002cc0:	f005 fc5c 	bl	800857c <HAL_TIM_Base_Init>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002cca:	f000 fa57 	bl	800317c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002cd6:	1d3b      	adds	r3, r7, #4
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4806      	ldr	r0, [pc, #24]	; (8002cf4 <MX_TIM6_Init+0x68>)
 8002cdc:	f005 fec2 	bl	8008a64 <HAL_TIMEx_MasterConfigSynchronization>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002ce6:	f000 fa49 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000418 	.word	0x20000418
 8002cf8:	40001000 	.word	0x40001000

08002cfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d00:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <MX_USART2_UART_Init+0x58>)
 8002d02:	4a15      	ldr	r2, [pc, #84]	; (8002d58 <MX_USART2_UART_Init+0x5c>)
 8002d04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d06:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <MX_USART2_UART_Init+0x58>)
 8002d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d0e:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <MX_USART2_UART_Init+0x58>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <MX_USART2_UART_Init+0x58>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d1a:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <MX_USART2_UART_Init+0x58>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d20:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <MX_USART2_UART_Init+0x58>)
 8002d22:	220c      	movs	r2, #12
 8002d24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <MX_USART2_UART_Init+0x58>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d2c:	4b09      	ldr	r3, [pc, #36]	; (8002d54 <MX_USART2_UART_Init+0x58>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d32:	4b08      	ldr	r3, [pc, #32]	; (8002d54 <MX_USART2_UART_Init+0x58>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d38:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <MX_USART2_UART_Init+0x58>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d3e:	4805      	ldr	r0, [pc, #20]	; (8002d54 <MX_USART2_UART_Init+0x58>)
 8002d40:	f005 ff1c 	bl	8008b7c <HAL_UART_Init>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002d4a:	f000 fa17 	bl	800317c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000464 	.word	0x20000464
 8002d58:	40004400 	.word	0x40004400

08002d5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d62:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <MX_DMA_Init+0x38>)
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	4a0b      	ldr	r2, [pc, #44]	; (8002d94 <MX_DMA_Init+0x38>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	6153      	str	r3, [r2, #20]
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <MX_DMA_Init+0x38>)
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	200c      	movs	r0, #12
 8002d80:	f001 fd3f 	bl	8004802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002d84:	200c      	movs	r0, #12
 8002d86:	f001 fd58 	bl	800483a <HAL_NVIC_EnableIRQ>

}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000

08002d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	; 0x28
 8002d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9e:	f107 0314 	add.w	r3, r7, #20
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	609a      	str	r2, [r3, #8]
 8002daa:	60da      	str	r2, [r3, #12]
 8002dac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dae:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <MX_GPIO_Init+0xa8>)
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	4a23      	ldr	r2, [pc, #140]	; (8002e40 <MX_GPIO_Init+0xa8>)
 8002db4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002db8:	6153      	str	r3, [r2, #20]
 8002dba:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <MX_GPIO_Init+0xa8>)
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc6:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <MX_GPIO_Init+0xa8>)
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <MX_GPIO_Init+0xa8>)
 8002dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd0:	6153      	str	r3, [r2, #20]
 8002dd2:	4b1b      	ldr	r3, [pc, #108]	; (8002e40 <MX_GPIO_Init+0xa8>)
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dde:	4b18      	ldr	r3, [pc, #96]	; (8002e40 <MX_GPIO_Init+0xa8>)
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	4a17      	ldr	r2, [pc, #92]	; (8002e40 <MX_GPIO_Init+0xa8>)
 8002de4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002de8:	6153      	str	r3, [r2, #20]
 8002dea:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <MX_GPIO_Init+0xa8>)
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df6:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <MX_GPIO_Init+0xa8>)
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	4a11      	ldr	r2, [pc, #68]	; (8002e40 <MX_GPIO_Init+0xa8>)
 8002dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e00:	6153      	str	r3, [r2, #20]
 8002e02:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <MX_GPIO_Init+0xa8>)
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e0a:	607b      	str	r3, [r7, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_DATA_Pin|EN_FULL_Pin, GPIO_PIN_RESET);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002e14:	480b      	ldr	r0, [pc, #44]	; (8002e44 <MX_GPIO_Init+0xac>)
 8002e16:	f002 f8ab 	bl	8004f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_DATA_Pin EN_FULL_Pin */
  GPIO_InitStruct.Pin = LED_DATA_Pin|EN_FULL_Pin;
 8002e1a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e20:	2301      	movs	r3, #1
 8002e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2c:	f107 0314 	add.w	r3, r7, #20
 8002e30:	4619      	mov	r1, r3
 8002e32:	4804      	ldr	r0, [pc, #16]	; (8002e44 <MX_GPIO_Init+0xac>)
 8002e34:	f001 ff2a 	bl	8004c8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e38:	bf00      	nop
 8002e3a:	3728      	adds	r7, #40	; 0x28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40021000 	.word	0x40021000
 8002e44:	48000400 	.word	0x48000400

08002e48 <handleEvent>:

/* USER CODE BEGIN 4 */

void handleEvent(event_t event) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	71fb      	strb	r3, [r7, #7]
	bool transitionFound = false;
 8002e52:	2300      	movs	r3, #0
 8002e54:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < sizeof(transitionTable) / sizeof(transition_t); i++) {
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	e029      	b.n	8002eb0 <handleEvent+0x68>
		if (transitionTable[i].currentState == currentState
 8002e5c:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <handleEvent+0x78>)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8002e64:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <handleEvent+0x7c>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d11e      	bne.n	8002eaa <handleEvent+0x62>
				&& transitionTable[i].event == event) {
 8002e6c:	4a14      	ldr	r2, [pc, #80]	; (8002ec0 <handleEvent+0x78>)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4413      	add	r3, r2
 8002e74:	785b      	ldrb	r3, [r3, #1]
 8002e76:	79fa      	ldrb	r2, [r7, #7]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d116      	bne.n	8002eaa <handleEvent+0x62>
			currentState = transitionTable[i].nextState;
 8002e7c:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <handleEvent+0x78>)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4413      	add	r3, r2
 8002e84:	789a      	ldrb	r2, [r3, #2]
 8002e86:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <handleEvent+0x7c>)
 8002e88:	701a      	strb	r2, [r3, #0]
			if (transitionTable[i].action != NULL) {
 8002e8a:	4a0d      	ldr	r2, [pc, #52]	; (8002ec0 <handleEvent+0x78>)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4413      	add	r3, r2
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <handleEvent+0x5c>
				transitionTable[i].action(); // Call the action function if it is not NULL
 8002e98:	4a09      	ldr	r2, [pc, #36]	; (8002ec0 <handleEvent+0x78>)
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4798      	blx	r3
			}

			transitionFound = true;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	73fb      	strb	r3, [r7, #15]
			break;
 8002ea8:	e005      	b.n	8002eb6 <handleEvent+0x6e>
	for (int i = 0; i < sizeof(transitionTable) / sizeof(transition_t); i++) {
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	3301      	adds	r3, #1
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d9d2      	bls.n	8002e5c <handleEvent+0x14>
	}

	if (!transitionFound) {
//        printf("Invalid event in the current state\n");
	}
}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	2000002c 	.word	0x2000002c
 8002ec4:	200004ec 	.word	0x200004ec

08002ec8 <actionTurnOn>:

void actionTurnOn() {
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_FULL_GPIO_Port, EN_FULL_Pin, GPIO_PIN_SET);
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ed2:	4802      	ldr	r0, [pc, #8]	; (8002edc <actionTurnOn+0x14>)
 8002ed4:	f002 f84c 	bl	8004f70 <HAL_GPIO_WritePin>

}
 8002ed8:	bf00      	nop
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	48000400 	.word	0x48000400

08002ee0 <actionTurnOff>:

void actionTurnOff() {
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_FULL_GPIO_Port, EN_FULL_Pin, GPIO_PIN_RESET);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002eea:	4802      	ldr	r0, [pc, #8]	; (8002ef4 <actionTurnOff+0x14>)
 8002eec:	f002 f840 	bl	8004f70 <HAL_GPIO_WritePin>
}
 8002ef0:	bf00      	nop
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	48000400 	.word	0x48000400

08002ef8 <actionCalibrate>:

void actionCalibrate() {
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
	keepCalState = 8;
 8002efc:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <actionCalibrate+0x1c>)
 8002efe:	2208      	movs	r2, #8
 8002f00:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(EN_FULL_GPIO_Port, EN_FULL_Pin, GPIO_PIN_SET);
 8002f02:	2201      	movs	r2, #1
 8002f04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f08:	4803      	ldr	r0, [pc, #12]	; (8002f18 <actionCalibrate+0x20>)
 8002f0a:	f002 f831 	bl	8004f70 <HAL_GPIO_WritePin>
}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	200004ed 	.word	0x200004ed
 8002f18:	48000400 	.word	0x48000400

08002f1c <parse_json>:

void parse_json(const char *json) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
	cJSON *root = cJSON_Parse(json);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7fe fc01 	bl	800172c <cJSON_Parse>
 8002f2a:	61f8      	str	r0, [r7, #28]
	if (root == NULL) {
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 8083 	beq.w	800303a <parse_json+0x11e>
		return;
	}

	cJSON *overtemp = cJSON_GetObjectItemCaseSensitive(root, "overtemperature");
 8002f34:	4943      	ldr	r1, [pc, #268]	; (8003044 <parse_json+0x128>)
 8002f36:	69f8      	ldr	r0, [r7, #28]
 8002f38:	f7fe fefd 	bl	8001d36 <cJSON_GetObjectItemCaseSensitive>
 8002f3c:	61b8      	str	r0, [r7, #24]
	if (cJSON_IsNumber(overtemp) && (overtemp->valuedouble != 0))
 8002f3e:	69b8      	ldr	r0, [r7, #24]
 8002f40:	f7fe ff08 	bl	8001d54 <cJSON_IsNumber>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d011      	beq.n	8002f6e <parse_json+0x52>
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	f7fd fdc6 	bl	8000ae8 <__aeabi_dcmpeq>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d105      	bne.n	8002f6e <parse_json+0x52>
		TEMP_LIMIT = overtemp->valuedouble;
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f68:	4937      	ldr	r1, [pc, #220]	; (8003048 <parse_json+0x12c>)
 8002f6a:	e9c1 2300 	strd	r2, r3, [r1]

	cJSON *overcurr = cJSON_GetObjectItemCaseSensitive(root, "overcurrent");
 8002f6e:	4937      	ldr	r1, [pc, #220]	; (800304c <parse_json+0x130>)
 8002f70:	69f8      	ldr	r0, [r7, #28]
 8002f72:	f7fe fee0 	bl	8001d36 <cJSON_GetObjectItemCaseSensitive>
 8002f76:	6178      	str	r0, [r7, #20]
	if (cJSON_IsNumber(overcurr) && (overcurr->valuedouble != 0))
 8002f78:	6978      	ldr	r0, [r7, #20]
 8002f7a:	f7fe feeb 	bl	8001d54 <cJSON_IsNumber>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d011      	beq.n	8002fa8 <parse_json+0x8c>
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	f7fd fda9 	bl	8000ae8 <__aeabi_dcmpeq>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d105      	bne.n	8002fa8 <parse_json+0x8c>
		CURRENT_LIMIT = overcurr->valuedouble;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002fa2:	492b      	ldr	r1, [pc, #172]	; (8003050 <parse_json+0x134>)
 8002fa4:	e9c1 2300 	strd	r2, r3, [r1]

	cJSON *overvolt = cJSON_GetObjectItemCaseSensitive(root, "overvoltage");
 8002fa8:	492a      	ldr	r1, [pc, #168]	; (8003054 <parse_json+0x138>)
 8002faa:	69f8      	ldr	r0, [r7, #28]
 8002fac:	f7fe fec3 	bl	8001d36 <cJSON_GetObjectItemCaseSensitive>
 8002fb0:	6138      	str	r0, [r7, #16]
	if (cJSON_IsNumber(overvolt) && (overvolt->valuedouble != 0))
 8002fb2:	6938      	ldr	r0, [r7, #16]
 8002fb4:	f7fe fece 	bl	8001d54 <cJSON_IsNumber>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d011      	beq.n	8002fe2 <parse_json+0xc6>
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	f7fd fd8c 	bl	8000ae8 <__aeabi_dcmpeq>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d105      	bne.n	8002fe2 <parse_json+0xc6>
		VOLT_LIMIT = overvolt->valuedouble;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002fdc:	491e      	ldr	r1, [pc, #120]	; (8003058 <parse_json+0x13c>)
 8002fde:	e9c1 2300 	strd	r2, r3, [r1]

	cJSON *mode = cJSON_GetObjectItemCaseSensitive(root, "mode");
 8002fe2:	491e      	ldr	r1, [pc, #120]	; (800305c <parse_json+0x140>)
 8002fe4:	69f8      	ldr	r0, [r7, #28]
 8002fe6:	f7fe fea6 	bl	8001d36 <cJSON_GetObjectItemCaseSensitive>
 8002fea:	60f8      	str	r0, [r7, #12]
	if (cJSON_IsString(mode) && (mode->valuestring != NULL)) {
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f7fe fec8 	bl	8001d82 <cJSON_IsString>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d021      	beq.n	800303c <parse_json+0x120>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01d      	beq.n	800303c <parse_json+0x120>
		if (strcmp(mode->valuestring, "off") == 0) {
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	4916      	ldr	r1, [pc, #88]	; (8003060 <parse_json+0x144>)
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd f8e2 	bl	80001d0 <strcmp>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d103      	bne.n	800301a <parse_json+0xfe>
			handleEvent(EVENT_OFF_BUTTON);
 8003012:	2000      	movs	r0, #0
 8003014:	f7ff ff18 	bl	8002e48 <handleEvent>
 8003018:	e00b      	b.n	8003032 <parse_json+0x116>
		}else if (strcmp(mode->valuestring, "deploy") == 0) {
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	4911      	ldr	r1, [pc, #68]	; (8003064 <parse_json+0x148>)
 8003020:	4618      	mov	r0, r3
 8003022:	f7fd f8d5 	bl	80001d0 <strcmp>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d102      	bne.n	8003032 <parse_json+0x116>
			handleEvent(EVENT_DEPLOY_BUTTON);
 800302c:	2002      	movs	r0, #2
 800302e:	f7ff ff0b 	bl	8002e48 <handleEvent>
		}

	cJSON_Delete(root);
 8003032:	69f8      	ldr	r0, [r7, #28]
 8003034:	f7fd fea0 	bl	8000d78 <cJSON_Delete>
 8003038:	e000      	b.n	800303c <parse_json+0x120>
		return;
 800303a:	bf00      	nop
	}
}
 800303c:	3720      	adds	r7, #32
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	0800e448 	.word	0x0800e448
 8003048:	20000010 	.word	0x20000010
 800304c:	0800e458 	.word	0x0800e458
 8003050:	20000018 	.word	0x20000018
 8003054:	0800e464 	.word	0x0800e464
 8003058:	20000020 	.word	0x20000020
 800305c:	0800e470 	.word	0x0800e470
 8003060:	0800e478 	.word	0x0800e478
 8003064:	0800e47c 	.word	0x0800e47c

08003068 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	UART_READY = true;
 8003070:	4b04      	ldr	r3, [pc, #16]	; (8003084 <HAL_UART_TxCpltCallback+0x1c>)
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000028 	.word	0x20000028

08003088 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
	SEND_TIMER_FLAG = true;
 8003090:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8003092:	2201      	movs	r2, #1
 8003094:	701a      	strb	r2, [r3, #0]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	20000a23 	.word	0x20000a23

080030a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a2e      	ldr	r2, [pc, #184]	; (800316c <HAL_UART_RxCpltCallback+0xc4>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d155      	bne.n	8003164 <HAL_UART_RxCpltCallback+0xbc>
		if (rxIndex < BUFFER_SIZE) {
 80030b8:	4b2d      	ldr	r3, [pc, #180]	; (8003170 <HAL_UART_RxCpltCallback+0xc8>)
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c2:	d244      	bcs.n	800314e <HAL_UART_RxCpltCallback+0xa6>
			if (rxBuffer[rxIndex] == '{') {
 80030c4:	4b2a      	ldr	r3, [pc, #168]	; (8003170 <HAL_UART_RxCpltCallback+0xc8>)
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	4b29      	ldr	r3, [pc, #164]	; (8003174 <HAL_UART_RxCpltCallback+0xcc>)
 80030ce:	5c9b      	ldrb	r3, [r3, r2]
 80030d0:	2b7b      	cmp	r3, #123	; 0x7b
 80030d2:	d105      	bne.n	80030e0 <HAL_UART_RxCpltCallback+0x38>
				// Start of JSON data
				rxIndex = 0;
 80030d4:	4b26      	ldr	r3, [pc, #152]	; (8003170 <HAL_UART_RxCpltCallback+0xc8>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	801a      	strh	r2, [r3, #0]
				jsonFlag = 1;
 80030da:	4b27      	ldr	r3, [pc, #156]	; (8003178 <HAL_UART_RxCpltCallback+0xd0>)
 80030dc:	2201      	movs	r2, #1
 80030de:	701a      	strb	r2, [r3, #0]
			}

			if (jsonFlag) {
 80030e0:	4b25      	ldr	r3, [pc, #148]	; (8003178 <HAL_UART_RxCpltCallback+0xd0>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d031      	beq.n	800314e <HAL_UART_RxCpltCallback+0xa6>
				// Store received data in the buffer
				rxBuffer[rxIndex] =
						rxBuffer[rxIndex] == '\r' ? '\n' : rxBuffer[rxIndex]; // Replace '\r' with '\n'
 80030ea:	4b21      	ldr	r3, [pc, #132]	; (8003170 <HAL_UART_RxCpltCallback+0xc8>)
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b20      	ldr	r3, [pc, #128]	; (8003174 <HAL_UART_RxCpltCallback+0xcc>)
 80030f4:	5c9b      	ldrb	r3, [r3, r2]
				rxBuffer[rxIndex] =
 80030f6:	2b0d      	cmp	r3, #13
 80030f8:	d006      	beq.n	8003108 <HAL_UART_RxCpltCallback+0x60>
						rxBuffer[rxIndex] == '\r' ? '\n' : rxBuffer[rxIndex]; // Replace '\r' with '\n'
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <HAL_UART_RxCpltCallback+0xc8>)
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	461a      	mov	r2, r3
				rxBuffer[rxIndex] =
 8003102:	4b1c      	ldr	r3, [pc, #112]	; (8003174 <HAL_UART_RxCpltCallback+0xcc>)
 8003104:	5c9b      	ldrb	r3, [r3, r2]
 8003106:	e000      	b.n	800310a <HAL_UART_RxCpltCallback+0x62>
 8003108:	230a      	movs	r3, #10
 800310a:	4a19      	ldr	r2, [pc, #100]	; (8003170 <HAL_UART_RxCpltCallback+0xc8>)
 800310c:	8812      	ldrh	r2, [r2, #0]
 800310e:	b292      	uxth	r2, r2
 8003110:	4611      	mov	r1, r2
 8003112:	4a18      	ldr	r2, [pc, #96]	; (8003174 <HAL_UART_RxCpltCallback+0xcc>)
 8003114:	5453      	strb	r3, [r2, r1]
				rxIndex++;
 8003116:	4b16      	ldr	r3, [pc, #88]	; (8003170 <HAL_UART_RxCpltCallback+0xc8>)
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	b29b      	uxth	r3, r3
 800311c:	3301      	adds	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <HAL_UART_RxCpltCallback+0xc8>)
 8003122:	801a      	strh	r2, [r3, #0]

				if (rxBuffer[rxIndex - 1] == '}') {
 8003124:	4b12      	ldr	r3, [pc, #72]	; (8003170 <HAL_UART_RxCpltCallback+0xc8>)
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	4a11      	ldr	r2, [pc, #68]	; (8003174 <HAL_UART_RxCpltCallback+0xcc>)
 800312e:	5cd3      	ldrb	r3, [r2, r3]
 8003130:	2b7d      	cmp	r3, #125	; 0x7d
 8003132:	d10c      	bne.n	800314e <HAL_UART_RxCpltCallback+0xa6>
					// End of JSON data
					rxBuffer[rxIndex] = '\0'; // Null-terminate the JSON string
 8003134:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <HAL_UART_RxCpltCallback+0xc8>)
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	b29b      	uxth	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <HAL_UART_RxCpltCallback+0xcc>)
 800313e:	2100      	movs	r1, #0
 8003140:	5499      	strb	r1, [r3, r2]
					jsonFlag = 0;
 8003142:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <HAL_UART_RxCpltCallback+0xd0>)
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
					parse_json((const char*) rxBuffer);
 8003148:	480a      	ldr	r0, [pc, #40]	; (8003174 <HAL_UART_RxCpltCallback+0xcc>)
 800314a:	f7ff fee7 	bl	8002f1c <parse_json>
				}
			}
		}

		HAL_UART_Receive_IT(&huart2, &rxBuffer[rxIndex], 1); // Enable UART receive interrupt again
 800314e:	4b08      	ldr	r3, [pc, #32]	; (8003170 <HAL_UART_RxCpltCallback+0xc8>)
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	4b07      	ldr	r3, [pc, #28]	; (8003174 <HAL_UART_RxCpltCallback+0xcc>)
 8003158:	4413      	add	r3, r2
 800315a:	2201      	movs	r2, #1
 800315c:	4619      	mov	r1, r3
 800315e:	4803      	ldr	r0, [pc, #12]	; (800316c <HAL_UART_RxCpltCallback+0xc4>)
 8003160:	f005 fdb8 	bl	8008cd4 <HAL_UART_Receive_IT>
	}
}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	20000464 	.word	0x20000464
 8003170:	20000a20 	.word	0x20000a20
 8003174:	20000620 	.word	0x20000620
 8003178:	20000a22 	.word	0x20000a22

0800317c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003180:	b672      	cpsid	i
}
 8003182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003184:	e7fe      	b.n	8003184 <Error_Handler+0x8>
	...

08003188 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800318e:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <HAL_MspInit+0x44>)
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	4a0e      	ldr	r2, [pc, #56]	; (80031cc <HAL_MspInit+0x44>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	6193      	str	r3, [r2, #24]
 800319a:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <HAL_MspInit+0x44>)
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	607b      	str	r3, [r7, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_MspInit+0x44>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	4a08      	ldr	r2, [pc, #32]	; (80031cc <HAL_MspInit+0x44>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b0:	61d3      	str	r3, [r2, #28]
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_MspInit+0x44>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000

080031d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08a      	sub	sp, #40	; 0x28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	f107 0314 	add.w	r3, r7, #20
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a29      	ldr	r2, [pc, #164]	; (8003294 <HAL_ADC_MspInit+0xc4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d14b      	bne.n	800328a <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80031f2:	4b29      	ldr	r3, [pc, #164]	; (8003298 <HAL_ADC_MspInit+0xc8>)
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	4a28      	ldr	r2, [pc, #160]	; (8003298 <HAL_ADC_MspInit+0xc8>)
 80031f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fc:	6153      	str	r3, [r2, #20]
 80031fe:	4b26      	ldr	r3, [pc, #152]	; (8003298 <HAL_ADC_MspInit+0xc8>)
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	613b      	str	r3, [r7, #16]
 8003208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800320a:	4b23      	ldr	r3, [pc, #140]	; (8003298 <HAL_ADC_MspInit+0xc8>)
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	4a22      	ldr	r2, [pc, #136]	; (8003298 <HAL_ADC_MspInit+0xc8>)
 8003210:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003214:	6153      	str	r3, [r2, #20]
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <HAL_ADC_MspInit+0xc8>)
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC4     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003222:	2310      	movs	r3, #16
 8003224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003226:	2303      	movs	r3, #3
 8003228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	2300      	movs	r3, #0
 800322c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800322e:	f107 0314 	add.w	r3, r7, #20
 8003232:	4619      	mov	r1, r3
 8003234:	4819      	ldr	r0, [pc, #100]	; (800329c <HAL_ADC_MspInit+0xcc>)
 8003236:	f001 fd29 	bl	8004c8c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 800323a:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <HAL_ADC_MspInit+0xd0>)
 800323c:	4a19      	ldr	r2, [pc, #100]	; (80032a4 <HAL_ADC_MspInit+0xd4>)
 800323e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003240:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <HAL_ADC_MspInit+0xd0>)
 8003242:	2200      	movs	r2, #0
 8003244:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003246:	4b16      	ldr	r3, [pc, #88]	; (80032a0 <HAL_ADC_MspInit+0xd0>)
 8003248:	2200      	movs	r2, #0
 800324a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800324c:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <HAL_ADC_MspInit+0xd0>)
 800324e:	2280      	movs	r2, #128	; 0x80
 8003250:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003252:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <HAL_ADC_MspInit+0xd0>)
 8003254:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003258:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800325a:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <HAL_ADC_MspInit+0xd0>)
 800325c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003260:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003262:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <HAL_ADC_MspInit+0xd0>)
 8003264:	2220      	movs	r2, #32
 8003266:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003268:	4b0d      	ldr	r3, [pc, #52]	; (80032a0 <HAL_ADC_MspInit+0xd0>)
 800326a:	2200      	movs	r2, #0
 800326c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800326e:	480c      	ldr	r0, [pc, #48]	; (80032a0 <HAL_ADC_MspInit+0xd0>)
 8003270:	f001 fafd 	bl	800486e <HAL_DMA_Init>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 800327a:	f7ff ff7f 	bl	800317c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a07      	ldr	r2, [pc, #28]	; (80032a0 <HAL_ADC_MspInit+0xd0>)
 8003282:	639a      	str	r2, [r3, #56]	; 0x38
 8003284:	4a06      	ldr	r2, [pc, #24]	; (80032a0 <HAL_ADC_MspInit+0xd0>)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800328a:	bf00      	nop
 800328c:	3728      	adds	r7, #40	; 0x28
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	50000100 	.word	0x50000100
 8003298:	40021000 	.word	0x40021000
 800329c:	48000800 	.word	0x48000800
 80032a0:	200002a4 	.word	0x200002a4
 80032a4:	4002001c 	.word	0x4002001c

080032a8 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <HAL_HRTIM_MspInit+0x38>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d10b      	bne.n	80032d2 <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80032ba:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <HAL_HRTIM_MspInit+0x3c>)
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	4a09      	ldr	r2, [pc, #36]	; (80032e4 <HAL_HRTIM_MspInit+0x3c>)
 80032c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032c4:	6193      	str	r3, [r2, #24]
 80032c6:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <HAL_HRTIM_MspInit+0x3c>)
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 80032d2:	bf00      	nop
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40017400 	.word	0x40017400
 80032e4:	40021000 	.word	0x40021000

080032e8 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f0:	f107 030c 	add.w	r3, r7, #12
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a12      	ldr	r2, [pc, #72]	; (8003350 <HAL_HRTIM_MspPostInit+0x68>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d11d      	bne.n	8003346 <HAL_HRTIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800330a:	4b12      	ldr	r3, [pc, #72]	; (8003354 <HAL_HRTIM_MspPostInit+0x6c>)
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	4a11      	ldr	r2, [pc, #68]	; (8003354 <HAL_HRTIM_MspPostInit+0x6c>)
 8003310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003314:	6153      	str	r3, [r2, #20]
 8003316:	4b0f      	ldr	r3, [pc, #60]	; (8003354 <HAL_HRTIM_MspPostInit+0x6c>)
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331e:	60bb      	str	r3, [r7, #8]
 8003320:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003322:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003326:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003328:	2302      	movs	r3, #2
 800332a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003330:	2303      	movs	r3, #3
 8003332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8003334:	230d      	movs	r3, #13
 8003336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003338:	f107 030c 	add.w	r3, r7, #12
 800333c:	4619      	mov	r1, r3
 800333e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003342:	f001 fca3 	bl	8004c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8003346:	bf00      	nop
 8003348:	3720      	adds	r7, #32
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40017400 	.word	0x40017400
 8003354:	40021000 	.word	0x40021000

08003358 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08a      	sub	sp, #40	; 0x28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003360:	f107 0314 	add.w	r3, r7, #20
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	60da      	str	r2, [r3, #12]
 800336e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1b      	ldr	r2, [pc, #108]	; (80033e4 <HAL_I2C_MspInit+0x8c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d12f      	bne.n	80033da <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800337a:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <HAL_I2C_MspInit+0x90>)
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	4a1a      	ldr	r2, [pc, #104]	; (80033e8 <HAL_I2C_MspInit+0x90>)
 8003380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003384:	6153      	str	r3, [r2, #20]
 8003386:	4b18      	ldr	r3, [pc, #96]	; (80033e8 <HAL_I2C_MspInit+0x90>)
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800338e:	613b      	str	r3, [r7, #16]
 8003390:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003392:	23c0      	movs	r3, #192	; 0xc0
 8003394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003396:	2312      	movs	r3, #18
 8003398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800339e:	2303      	movs	r3, #3
 80033a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033a2:	2304      	movs	r3, #4
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a6:	f107 0314 	add.w	r3, r7, #20
 80033aa:	4619      	mov	r1, r3
 80033ac:	480f      	ldr	r0, [pc, #60]	; (80033ec <HAL_I2C_MspInit+0x94>)
 80033ae:	f001 fc6d 	bl	8004c8c <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 80033b2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80033b6:	f003 fd17 	bl	8006de8 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 80033ba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80033be:	f003 fd13 	bl	8006de8 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <HAL_I2C_MspInit+0x90>)
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	4a08      	ldr	r2, [pc, #32]	; (80033e8 <HAL_I2C_MspInit+0x90>)
 80033c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033cc:	61d3      	str	r3, [r2, #28]
 80033ce:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <HAL_I2C_MspInit+0x90>)
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033da:	bf00      	nop
 80033dc:	3728      	adds	r7, #40	; 0x28
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40005400 	.word	0x40005400
 80033e8:	40021000 	.word	0x40021000
 80033ec:	48000400 	.word	0x48000400

080033f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a0d      	ldr	r2, [pc, #52]	; (8003434 <HAL_TIM_Base_MspInit+0x44>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d113      	bne.n	800342a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003402:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <HAL_TIM_Base_MspInit+0x48>)
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	4a0c      	ldr	r2, [pc, #48]	; (8003438 <HAL_TIM_Base_MspInit+0x48>)
 8003408:	f043 0310 	orr.w	r3, r3, #16
 800340c:	61d3      	str	r3, [r2, #28]
 800340e:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <HAL_TIM_Base_MspInit+0x48>)
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 800341a:	2200      	movs	r2, #0
 800341c:	2100      	movs	r1, #0
 800341e:	2036      	movs	r0, #54	; 0x36
 8003420:	f001 f9ef 	bl	8004802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8003424:	2036      	movs	r0, #54	; 0x36
 8003426:	f001 fa08 	bl	800483a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800342a:	bf00      	nop
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40001000 	.word	0x40001000
 8003438:	40021000 	.word	0x40021000

0800343c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	; 0x28
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003444:	f107 0314 	add.w	r3, r7, #20
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	60da      	str	r2, [r3, #12]
 8003452:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1b      	ldr	r2, [pc, #108]	; (80034c8 <HAL_UART_MspInit+0x8c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d130      	bne.n	80034c0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800345e:	4b1b      	ldr	r3, [pc, #108]	; (80034cc <HAL_UART_MspInit+0x90>)
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	4a1a      	ldr	r2, [pc, #104]	; (80034cc <HAL_UART_MspInit+0x90>)
 8003464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003468:	61d3      	str	r3, [r2, #28]
 800346a:	4b18      	ldr	r3, [pc, #96]	; (80034cc <HAL_UART_MspInit+0x90>)
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003472:	613b      	str	r3, [r7, #16]
 8003474:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003476:	4b15      	ldr	r3, [pc, #84]	; (80034cc <HAL_UART_MspInit+0x90>)
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	4a14      	ldr	r2, [pc, #80]	; (80034cc <HAL_UART_MspInit+0x90>)
 800347c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003480:	6153      	str	r3, [r2, #20]
 8003482:	4b12      	ldr	r3, [pc, #72]	; (80034cc <HAL_UART_MspInit+0x90>)
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800348e:	230c      	movs	r3, #12
 8003490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003492:	2302      	movs	r3, #2
 8003494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003496:	2300      	movs	r3, #0
 8003498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800349a:	2303      	movs	r3, #3
 800349c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800349e:	2307      	movs	r3, #7
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a2:	f107 0314 	add.w	r3, r7, #20
 80034a6:	4619      	mov	r1, r3
 80034a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ac:	f001 fbee 	bl	8004c8c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80034b0:	2200      	movs	r2, #0
 80034b2:	2100      	movs	r1, #0
 80034b4:	2026      	movs	r0, #38	; 0x26
 80034b6:	f001 f9a4 	bl	8004802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034ba:	2026      	movs	r0, #38	; 0x26
 80034bc:	f001 f9bd 	bl	800483a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034c0:	bf00      	nop
 80034c2:	3728      	adds	r7, #40	; 0x28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40004400 	.word	0x40004400
 80034cc:	40021000 	.word	0x40021000

080034d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034d4:	e7fe      	b.n	80034d4 <NMI_Handler+0x4>

080034d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034d6:	b480      	push	{r7}
 80034d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034da:	e7fe      	b.n	80034da <HardFault_Handler+0x4>

080034dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034e0:	e7fe      	b.n	80034e0 <MemManage_Handler+0x4>

080034e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034e2:	b480      	push	{r7}
 80034e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034e6:	e7fe      	b.n	80034e6 <BusFault_Handler+0x4>

080034e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034ec:	e7fe      	b.n	80034ec <UsageFault_Handler+0x4>

080034ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034ee:	b480      	push	{r7}
 80034f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800350a:	b480      	push	{r7}
 800350c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800351c:	f000 f968 	bl	80037f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003520:	bf00      	nop
 8003522:	bd80      	pop	{r7, pc}

08003524 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003528:	4802      	ldr	r0, [pc, #8]	; (8003534 <DMA1_Channel2_IRQHandler+0x10>)
 800352a:	f001 fabd 	bl	8004aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	200002a4 	.word	0x200002a4

08003538 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800353c:	4802      	ldr	r0, [pc, #8]	; (8003548 <USART2_IRQHandler+0x10>)
 800353e:	f005 fc0d 	bl	8008d5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003542:	bf00      	nop
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	20000464 	.word	0x20000464

0800354c <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003550:	4802      	ldr	r0, [pc, #8]	; (800355c <TIM6_DAC1_IRQHandler+0x10>)
 8003552:	f005 f8c7 	bl	80086e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000418 	.word	0x20000418

08003560 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  return 1;
 8003564:	2301      	movs	r3, #1
}
 8003566:	4618      	mov	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <_kill>:

int _kill(int pid, int sig)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800357a:	f008 faa7 	bl	800bacc <__errno>
 800357e:	4603      	mov	r3, r0
 8003580:	2216      	movs	r2, #22
 8003582:	601a      	str	r2, [r3, #0]
  return -1;
 8003584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003588:	4618      	mov	r0, r3
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <_exit>:

void _exit (int status)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003598:	f04f 31ff 	mov.w	r1, #4294967295
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ffe7 	bl	8003570 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035a2:	e7fe      	b.n	80035a2 <_exit+0x12>

080035a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	e00a      	b.n	80035cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035b6:	f3af 8000 	nop.w
 80035ba:	4601      	mov	r1, r0
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	60ba      	str	r2, [r7, #8]
 80035c2:	b2ca      	uxtb	r2, r1
 80035c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	3301      	adds	r3, #1
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	dbf0      	blt.n	80035b6 <_read+0x12>
  }

  return len;
 80035d4:	687b      	ldr	r3, [r7, #4]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b086      	sub	sp, #24
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ea:	2300      	movs	r3, #0
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	e009      	b.n	8003604 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	60ba      	str	r2, [r7, #8]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	3301      	adds	r3, #1
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	429a      	cmp	r2, r3
 800360a:	dbf1      	blt.n	80035f0 <_write+0x12>
  }
  return len;
 800360c:	687b      	ldr	r3, [r7, #4]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <_close>:

int _close(int file)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800361e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800363e:	605a      	str	r2, [r3, #4]
  return 0;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <_isatty>:

int _isatty(int file)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003656:	2301      	movs	r3, #1
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003688:	4a14      	ldr	r2, [pc, #80]	; (80036dc <_sbrk+0x5c>)
 800368a:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <_sbrk+0x60>)
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003694:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <_sbrk+0x64>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <_sbrk+0x64>)
 800369e:	4a12      	ldr	r2, [pc, #72]	; (80036e8 <_sbrk+0x68>)
 80036a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036a2:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <_sbrk+0x64>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4413      	add	r3, r2
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d207      	bcs.n	80036c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036b0:	f008 fa0c 	bl	800bacc <__errno>
 80036b4:	4603      	mov	r3, r0
 80036b6:	220c      	movs	r2, #12
 80036b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036ba:	f04f 33ff 	mov.w	r3, #4294967295
 80036be:	e009      	b.n	80036d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036c0:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <_sbrk+0x64>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036c6:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <_sbrk+0x64>)
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	4a05      	ldr	r2, [pc, #20]	; (80036e4 <_sbrk+0x64>)
 80036d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036d2:	68fb      	ldr	r3, [r7, #12]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	20003000 	.word	0x20003000
 80036e0:	00000400 	.word	0x00000400
 80036e4:	20000a28 	.word	0x20000a28
 80036e8:	20000b80 	.word	0x20000b80

080036ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036f0:	4b06      	ldr	r3, [pc, #24]	; (800370c <SystemInit+0x20>)
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f6:	4a05      	ldr	r2, [pc, #20]	; (800370c <SystemInit+0x20>)
 80036f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003700:	bf00      	nop
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	e000ed00 	.word	0xe000ed00

08003710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003748 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003714:	f7ff ffea 	bl	80036ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003718:	480c      	ldr	r0, [pc, #48]	; (800374c <LoopForever+0x6>)
  ldr r1, =_edata
 800371a:	490d      	ldr	r1, [pc, #52]	; (8003750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800371c:	4a0d      	ldr	r2, [pc, #52]	; (8003754 <LoopForever+0xe>)
  movs r3, #0
 800371e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003720:	e002      	b.n	8003728 <LoopCopyDataInit>

08003722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003726:	3304      	adds	r3, #4

08003728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800372a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800372c:	d3f9      	bcc.n	8003722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003730:	4c0a      	ldr	r4, [pc, #40]	; (800375c <LoopForever+0x16>)
  movs r3, #0
 8003732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003734:	e001      	b.n	800373a <LoopFillZerobss>

08003736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003738:	3204      	adds	r2, #4

0800373a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800373a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800373c:	d3fb      	bcc.n	8003736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800373e:	f008 f9cb 	bl	800bad8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003742:	f7fe fb35 	bl	8001db0 <main>

08003746 <LoopForever>:

LoopForever:
    b LoopForever
 8003746:	e7fe      	b.n	8003746 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003748:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800374c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003750:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8003754:	0800e8ec 	.word	0x0800e8ec
  ldr r2, =_sbss
 8003758:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 800375c:	20000b7c 	.word	0x20000b7c

08003760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003760:	e7fe      	b.n	8003760 <ADC1_2_IRQHandler>
	...

08003764 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003768:	4b08      	ldr	r3, [pc, #32]	; (800378c <HAL_Init+0x28>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a07      	ldr	r2, [pc, #28]	; (800378c <HAL_Init+0x28>)
 800376e:	f043 0310 	orr.w	r3, r3, #16
 8003772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003774:	2003      	movs	r0, #3
 8003776:	f001 f839 	bl	80047ec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800377a:	200f      	movs	r0, #15
 800377c:	f000 f808 	bl	8003790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003780:	f7ff fd02 	bl	8003188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40022000 	.word	0x40022000

08003790 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003798:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <HAL_InitTick+0x54>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <HAL_InitTick+0x58>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	4619      	mov	r1, r3
 80037a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 f851 	bl	8004856 <HAL_SYSTICK_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e00e      	b.n	80037dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b0f      	cmp	r3, #15
 80037c2:	d80a      	bhi.n	80037da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037c4:	2200      	movs	r2, #0
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	f04f 30ff 	mov.w	r0, #4294967295
 80037cc:	f001 f819 	bl	8004802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037d0:	4a06      	ldr	r2, [pc, #24]	; (80037ec <HAL_InitTick+0x5c>)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
 80037d8:	e000      	b.n	80037dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	2000005c 	.word	0x2000005c
 80037e8:	20000064 	.word	0x20000064
 80037ec:	20000060 	.word	0x20000060

080037f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_IncTick+0x20>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_IncTick+0x24>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4413      	add	r3, r2
 8003800:	4a04      	ldr	r2, [pc, #16]	; (8003814 <HAL_IncTick+0x24>)
 8003802:	6013      	str	r3, [r2, #0]
}
 8003804:	bf00      	nop
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000064 	.word	0x20000064
 8003814:	20000a2c 	.word	0x20000a2c

08003818 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return uwTick;  
 800381c:	4b03      	ldr	r3, [pc, #12]	; (800382c <HAL_GetTick+0x14>)
 800381e:	681b      	ldr	r3, [r3, #0]
}
 8003820:	4618      	mov	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	20000a2c 	.word	0x20000a2c

08003830 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003838:	f7ff ffee 	bl	8003818 <HAL_GetTick>
 800383c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d005      	beq.n	8003856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800384a:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <HAL_Delay+0x44>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4413      	add	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003856:	bf00      	nop
 8003858:	f7ff ffde 	bl	8003818 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	429a      	cmp	r2, r3
 8003866:	d8f7      	bhi.n	8003858 <HAL_Delay+0x28>
  {
  }
}
 8003868:	bf00      	nop
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000064 	.word	0x20000064

08003878 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b09a      	sub	sp, #104	; 0x68
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e172      	b.n	8003bba <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d176      	bne.n	80039d4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d152      	bne.n	8003994 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff fc61 	bl	80031d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d13b      	bne.n	8003994 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fe2f 	bl	8004580 <ADC_Disable>
 8003922:	4603      	mov	r3, r0
 8003924:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	d12f      	bne.n	8003994 <HAL_ADC_Init+0xe0>
 8003934:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003938:	2b00      	cmp	r3, #0
 800393a:	d12b      	bne.n	8003994 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003944:	f023 0302 	bic.w	r3, r3, #2
 8003948:	f043 0202 	orr.w	r2, r3, #2
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800395e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800396e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003970:	4b94      	ldr	r3, [pc, #592]	; (8003bc4 <HAL_ADC_Init+0x310>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a94      	ldr	r2, [pc, #592]	; (8003bc8 <HAL_ADC_Init+0x314>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	0c9a      	lsrs	r2, r3, #18
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003986:	e002      	b.n	800398e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	3b01      	subs	r3, #1
 800398c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1f9      	bne.n	8003988 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d007      	beq.n	80039b2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80039ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039b0:	d110      	bne.n	80039d4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f023 0312 	bic.w	r3, r3, #18
 80039ba:	f043 0210 	orr.w	r2, r3, #16
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f043 0201 	orr.w	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f040 80df 	bne.w	8003ba0 <HAL_ADC_Init+0x2ec>
 80039e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f040 80da 	bne.w	8003ba0 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f040 80d2 	bne.w	8003ba0 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003a04:	f043 0202 	orr.w	r2, r3, #2
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a0c:	4b6f      	ldr	r3, [pc, #444]	; (8003bcc <HAL_ADC_Init+0x318>)
 8003a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a18:	d102      	bne.n	8003a20 <HAL_ADC_Init+0x16c>
 8003a1a:	4b6d      	ldr	r3, [pc, #436]	; (8003bd0 <HAL_ADC_Init+0x31c>)
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	e002      	b.n	8003a26 <HAL_ADC_Init+0x172>
 8003a20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a24:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d108      	bne.n	8003a46 <HAL_ADC_Init+0x192>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_ADC_Init+0x192>
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <HAL_ADC_Init+0x194>
 8003a46:	2300      	movs	r3, #0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d11c      	bne.n	8003a86 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a4c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d010      	beq.n	8003a74 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d107      	bne.n	8003a6e <HAL_ADC_Init+0x1ba>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_ADC_Init+0x1ba>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <HAL_ADC_Init+0x1bc>
 8003a6e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d108      	bne.n	8003a86 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	431a      	orrs	r2, r3
 8003a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a84:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	7e5b      	ldrb	r3, [r3, #25]
 8003a8a:	035b      	lsls	r3, r3, #13
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a90:	2a01      	cmp	r2, #1
 8003a92:	d002      	beq.n	8003a9a <HAL_ADC_Init+0x1e6>
 8003a94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a98:	e000      	b.n	8003a9c <HAL_ADC_Init+0x1e8>
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003aac:	4313      	orrs	r3, r2
 8003aae:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d11b      	bne.n	8003af2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	7e5b      	ldrb	r3, [r3, #25]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	045a      	lsls	r2, r3, #17
 8003aca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ad4:	e00d      	b.n	8003af2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003ade:	f043 0220 	orr.w	r2, r3, #32
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aea:	f043 0201 	orr.w	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d007      	beq.n	8003b0a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	4313      	orrs	r3, r2
 8003b04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b06:	4313      	orrs	r3, r2
 8003b08:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 030c 	and.w	r3, r3, #12
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d114      	bne.n	8003b42 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6812      	ldr	r2, [r2, #0]
 8003b22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b26:	f023 0302 	bic.w	r3, r3, #2
 8003b2a:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	7e1b      	ldrb	r3, [r3, #24]
 8003b30:	039a      	lsls	r2, r3, #14
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	4b22      	ldr	r3, [pc, #136]	; (8003bd4 <HAL_ADC_Init+0x320>)
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003b52:	430b      	orrs	r3, r1
 8003b54:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d10c      	bne.n	8003b78 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	f023 010f 	bic.w	r1, r3, #15
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	1e5a      	subs	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	631a      	str	r2, [r3, #48]	; 0x30
 8003b76:	e007      	b.n	8003b88 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 020f 	bic.w	r2, r2, #15
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f023 0303 	bic.w	r3, r3, #3
 8003b96:	f043 0201 	orr.w	r2, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	641a      	str	r2, [r3, #64]	; 0x40
 8003b9e:	e00a      	b.n	8003bb6 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f023 0312 	bic.w	r3, r3, #18
 8003ba8:	f043 0210 	orr.w	r2, r3, #16
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003bb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3768      	adds	r7, #104	; 0x68
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	2000005c 	.word	0x2000005c
 8003bc8:	431bde83 	.word	0x431bde83
 8003bcc:	50000300 	.word	0x50000300
 8003bd0:	50000100 	.word	0x50000100
 8003bd4:	fff0c007 	.word	0xfff0c007

08003bd8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f040 80b9 	bne.w	8003d6a <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_ADC_Start_DMA+0x2e>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e0b4      	b.n	8003d70 <HAL_ADC_Start_DMA+0x198>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8003c0e:	4b5a      	ldr	r3, [pc, #360]	; (8003d78 <HAL_ADC_Start_DMA+0x1a0>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 031f 	and.w	r3, r3, #31
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f040 80a0 	bne.w	8003d5c <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 fc4b 	bl	80044b8 <ADC_Enable>
 8003c22:	4603      	mov	r3, r0
 8003c24:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003c26:	7dfb      	ldrb	r3, [r7, #23]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f040 8092 	bne.w	8003d52 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c36:	f023 0301 	bic.w	r3, r3, #1
 8003c3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003c42:	4b4d      	ldr	r3, [pc, #308]	; (8003d78 <HAL_ADC_Start_DMA+0x1a0>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 031f 	and.w	r3, r3, #31
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d004      	beq.n	8003c58 <HAL_ADC_Start_DMA+0x80>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c56:	d115      	bne.n	8003c84 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d027      	beq.n	8003cc2 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c7a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003c82:	e01e      	b.n	8003cc2 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c98:	d004      	beq.n	8003ca4 <HAL_ADC_Start_DMA+0xcc>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a37      	ldr	r2, [pc, #220]	; (8003d7c <HAL_ADC_Start_DMA+0x1a4>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d10e      	bne.n	8003cc2 <HAL_ADC_Start_DMA+0xea>
 8003ca4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d007      	beq.n	8003cc2 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cce:	d106      	bne.n	8003cde <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd4:	f023 0206 	bic.w	r2, r3, #6
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	645a      	str	r2, [r3, #68]	; 0x44
 8003cdc:	e002      	b.n	8003ce4 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf0:	4a23      	ldr	r2, [pc, #140]	; (8003d80 <HAL_ADC_Start_DMA+0x1a8>)
 8003cf2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf8:	4a22      	ldr	r2, [pc, #136]	; (8003d84 <HAL_ADC_Start_DMA+0x1ac>)
 8003cfa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d00:	4a21      	ldr	r2, [pc, #132]	; (8003d88 <HAL_ADC_Start_DMA+0x1b0>)
 8003d02:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	221c      	movs	r2, #28
 8003d0a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0210 	orr.w	r2, r2, #16
 8003d1a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0201 	orr.w	r2, r2, #1
 8003d2a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3340      	adds	r3, #64	; 0x40
 8003d36:	4619      	mov	r1, r3
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f000 fdde 	bl	80048fc <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0204 	orr.w	r2, r2, #4
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	e00d      	b.n	8003d6e <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d5a:	e008      	b.n	8003d6e <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d68:	e001      	b.n	8003d6e <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	50000300 	.word	0x50000300
 8003d7c:	50000100 	.word	0x50000100
 8003d80:	080043ed 	.word	0x080043ed
 8003d84:	08004467 	.word	0x08004467
 8003d88:	08004483 	.word	0x08004483

08003d8c <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_ADCEx_Calibration_Start+0x1c>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e05f      	b.n	8003e68 <HAL_ADCEx_Calibration_Start+0xdc>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 fbe5 	bl	8004580 <ADC_Disable>
 8003db6:	4603      	mov	r3, r0
 8003db8:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d14e      	bne.n	8003e5e <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003dd4:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d107      	bne.n	8003dec <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003dea:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003dfa:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003dfc:	f7ff fd0c 	bl	8003818 <HAL_GetTick>
 8003e00:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003e02:	e01c      	b.n	8003e3e <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003e04:	f7ff fd08 	bl	8003818 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b0a      	cmp	r3, #10
 8003e10:	d915      	bls.n	8003e3e <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e20:	d10d      	bne.n	8003e3e <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f023 0312 	bic.w	r3, r3, #18
 8003e2a:	f043 0210 	orr.w	r2, r3, #16
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e014      	b.n	8003e68 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e4c:	d0da      	beq.n	8003e04 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f023 0303 	bic.w	r3, r3, #3
 8003e56:	f043 0201 	orr.w	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b09b      	sub	sp, #108	; 0x6c
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x22>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e2a1      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x566>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f040 8285 	bne.w	80043b4 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d81c      	bhi.n	8003eec <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	4413      	add	r3, r2
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	231f      	movs	r3, #31
 8003ec8:	4093      	lsls	r3, r2
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	4019      	ands	r1, r3
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	4413      	add	r3, r2
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	fa00 f203 	lsl.w	r2, r0, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	631a      	str	r2, [r3, #48]	; 0x30
 8003eea:	e063      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2b09      	cmp	r3, #9
 8003ef2:	d81e      	bhi.n	8003f32 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	4413      	add	r3, r2
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	3b1e      	subs	r3, #30
 8003f08:	221f      	movs	r2, #31
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	4019      	ands	r1, r3
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6818      	ldr	r0, [r3, #0]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	4413      	add	r3, r2
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	3b1e      	subs	r3, #30
 8003f24:	fa00 f203 	lsl.w	r2, r0, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	635a      	str	r2, [r3, #52]	; 0x34
 8003f30:	e040      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b0e      	cmp	r3, #14
 8003f38:	d81e      	bhi.n	8003f78 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	4613      	mov	r3, r2
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	4413      	add	r3, r2
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	3b3c      	subs	r3, #60	; 0x3c
 8003f4e:	221f      	movs	r2, #31
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	4019      	ands	r1, r3
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	6818      	ldr	r0, [r3, #0]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4413      	add	r3, r2
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	3b3c      	subs	r3, #60	; 0x3c
 8003f6a:	fa00 f203 	lsl.w	r2, r0, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38
 8003f76:	e01d      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	4413      	add	r3, r2
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	3b5a      	subs	r3, #90	; 0x5a
 8003f8c:	221f      	movs	r2, #31
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43db      	mvns	r3, r3
 8003f94:	4019      	ands	r1, r3
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	4413      	add	r3, r2
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	3b5a      	subs	r3, #90	; 0x5a
 8003fa8:	fa00 f203 	lsl.w	r2, r0, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 030c 	and.w	r3, r3, #12
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f040 80e5 	bne.w	800418e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b09      	cmp	r3, #9
 8003fca:	d91c      	bls.n	8004006 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6999      	ldr	r1, [r3, #24]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	4413      	add	r3, r2
 8003fdc:	3b1e      	subs	r3, #30
 8003fde:	2207      	movs	r2, #7
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	4019      	ands	r1, r3
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	6898      	ldr	r0, [r3, #8]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	4413      	add	r3, r2
 8003ff6:	3b1e      	subs	r3, #30
 8003ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	619a      	str	r2, [r3, #24]
 8004004:	e019      	b.n	800403a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6959      	ldr	r1, [r3, #20]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	4413      	add	r3, r2
 8004016:	2207      	movs	r2, #7
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	43db      	mvns	r3, r3
 800401e:	4019      	ands	r1, r3
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	6898      	ldr	r0, [r3, #8]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	4413      	add	r3, r2
 800402e:	fa00 f203 	lsl.w	r2, r0, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	695a      	ldr	r2, [r3, #20]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	08db      	lsrs	r3, r3, #3
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	3b01      	subs	r3, #1
 8004058:	2b03      	cmp	r3, #3
 800405a:	d84f      	bhi.n	80040fc <HAL_ADC_ConfigChannel+0x28c>
 800405c:	a201      	add	r2, pc, #4	; (adr r2, 8004064 <HAL_ADC_ConfigChannel+0x1f4>)
 800405e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004062:	bf00      	nop
 8004064:	08004075 	.word	0x08004075
 8004068:	08004097 	.word	0x08004097
 800406c:	080040b9 	.word	0x080040b9
 8004070:	080040db 	.word	0x080040db
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800407a:	4b9c      	ldr	r3, [pc, #624]	; (80042ec <HAL_ADC_ConfigChannel+0x47c>)
 800407c:	4013      	ands	r3, r2
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	6812      	ldr	r2, [r2, #0]
 8004082:	0691      	lsls	r1, r2, #26
 8004084:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004086:	430a      	orrs	r2, r1
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004092:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004094:	e07b      	b.n	800418e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800409c:	4b93      	ldr	r3, [pc, #588]	; (80042ec <HAL_ADC_ConfigChannel+0x47c>)
 800409e:	4013      	ands	r3, r2
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	0691      	lsls	r1, r2, #26
 80040a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040a8:	430a      	orrs	r2, r1
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80040b4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80040b6:	e06a      	b.n	800418e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80040be:	4b8b      	ldr	r3, [pc, #556]	; (80042ec <HAL_ADC_ConfigChannel+0x47c>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	6812      	ldr	r2, [r2, #0]
 80040c6:	0691      	lsls	r1, r2, #26
 80040c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040ca:	430a      	orrs	r2, r1
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80040d6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80040d8:	e059      	b.n	800418e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80040e0:	4b82      	ldr	r3, [pc, #520]	; (80042ec <HAL_ADC_ConfigChannel+0x47c>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	0691      	lsls	r1, r2, #26
 80040ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040ec:	430a      	orrs	r2, r1
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80040f8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80040fa:	e048      	b.n	800418e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004102:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	069b      	lsls	r3, r3, #26
 800410c:	429a      	cmp	r2, r3
 800410e:	d107      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800411e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004126:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	069b      	lsls	r3, r3, #26
 8004130:	429a      	cmp	r2, r3
 8004132:	d107      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004142:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800414a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	069b      	lsls	r3, r3, #26
 8004154:	429a      	cmp	r2, r3
 8004156:	d107      	bne.n	8004168 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004166:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	069b      	lsls	r3, r3, #26
 8004178:	429a      	cmp	r2, r3
 800417a:	d107      	bne.n	800418c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800418a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800418c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 0303 	and.w	r3, r3, #3
 8004198:	2b01      	cmp	r3, #1
 800419a:	d108      	bne.n	80041ae <HAL_ADC_ConfigChannel+0x33e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_ADC_ConfigChannel+0x33e>
 80041aa:	2301      	movs	r3, #1
 80041ac:	e000      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x340>
 80041ae:	2300      	movs	r3, #0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f040 810a 	bne.w	80043ca <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d00f      	beq.n	80041de <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2201      	movs	r2, #1
 80041cc:	fa02 f303 	lsl.w	r3, r2, r3
 80041d0:	43da      	mvns	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	400a      	ands	r2, r1
 80041d8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80041dc:	e049      	b.n	8004272 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2201      	movs	r2, #1
 80041ec:	409a      	lsls	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b09      	cmp	r3, #9
 80041fe:	d91c      	bls.n	800423a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6999      	ldr	r1, [r3, #24]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	4613      	mov	r3, r2
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	4413      	add	r3, r2
 8004210:	3b1b      	subs	r3, #27
 8004212:	2207      	movs	r2, #7
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	43db      	mvns	r3, r3
 800421a:	4019      	ands	r1, r3
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	6898      	ldr	r0, [r3, #8]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	4613      	mov	r3, r2
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	4413      	add	r3, r2
 800422a:	3b1b      	subs	r3, #27
 800422c:	fa00 f203 	lsl.w	r2, r0, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	619a      	str	r2, [r3, #24]
 8004238:	e01b      	b.n	8004272 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6959      	ldr	r1, [r3, #20]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	4613      	mov	r3, r2
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	4413      	add	r3, r2
 800424c:	2207      	movs	r2, #7
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	43db      	mvns	r3, r3
 8004254:	4019      	ands	r1, r3
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6898      	ldr	r0, [r3, #8]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	4613      	mov	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4413      	add	r3, r2
 8004266:	fa00 f203 	lsl.w	r2, r0, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004272:	4b1f      	ldr	r3, [pc, #124]	; (80042f0 <HAL_ADC_ConfigChannel+0x480>)
 8004274:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b10      	cmp	r3, #16
 800427c:	d105      	bne.n	800428a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800427e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004286:	2b00      	cmp	r3, #0
 8004288:	d015      	beq.n	80042b6 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800428e:	2b11      	cmp	r3, #17
 8004290:	d105      	bne.n	800429e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004292:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00b      	beq.n	80042b6 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80042a2:	2b12      	cmp	r3, #18
 80042a4:	f040 8091 	bne.w	80043ca <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80042a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f040 808a 	bne.w	80043ca <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042be:	d102      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x456>
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <HAL_ADC_ConfigChannel+0x484>)
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	e002      	b.n	80042cc <HAL_ADC_ConfigChannel+0x45c>
 80042c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80042ca:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d10e      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x488>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d107      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x488>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e006      	b.n	80042fa <HAL_ADC_ConfigChannel+0x48a>
 80042ec:	83fff000 	.word	0x83fff000
 80042f0:	50000300 	.word	0x50000300
 80042f4:	50000100 	.word	0x50000100
 80042f8:	2300      	movs	r3, #0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d150      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80042fe:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004300:	2b00      	cmp	r3, #0
 8004302:	d010      	beq.n	8004326 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	2b01      	cmp	r3, #1
 800430e:	d107      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x4b0>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x4b0>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <HAL_ADC_ConfigChannel+0x4b2>
 8004320:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004322:	2b00      	cmp	r3, #0
 8004324:	d13c      	bne.n	80043a0 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b10      	cmp	r3, #16
 800432c:	d11d      	bne.n	800436a <HAL_ADC_ConfigChannel+0x4fa>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004336:	d118      	bne.n	800436a <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004342:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004344:	4b27      	ldr	r3, [pc, #156]	; (80043e4 <HAL_ADC_ConfigChannel+0x574>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a27      	ldr	r2, [pc, #156]	; (80043e8 <HAL_ADC_ConfigChannel+0x578>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	0c9a      	lsrs	r2, r3, #18
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800435a:	e002      	b.n	8004362 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	3b01      	subs	r3, #1
 8004360:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1f9      	bne.n	800435c <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004368:	e02e      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2b11      	cmp	r3, #17
 8004370:	d10b      	bne.n	800438a <HAL_ADC_ConfigChannel+0x51a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800437a:	d106      	bne.n	800438a <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800437c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004386:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004388:	e01e      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b12      	cmp	r3, #18
 8004390:	d11a      	bne.n	80043c8 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800439a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800439c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800439e:	e013      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a4:	f043 0220 	orr.w	r2, r3, #32
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80043b2:	e00a      	b.n	80043ca <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b8:	f043 0220 	orr.w	r2, r3, #32
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80043c6:	e000      	b.n	80043ca <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80043c8:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80043d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	376c      	adds	r7, #108	; 0x6c
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	2000005c 	.word	0x2000005c
 80043e8:	431bde83 	.word	0x431bde83

080043ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004402:	2b00      	cmp	r3, #0
 8004404:	d126      	bne.n	8004454 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800441c:	2b00      	cmp	r3, #0
 800441e:	d115      	bne.n	800444c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004424:	2b00      	cmp	r3, #0
 8004426:	d111      	bne.n	800444c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d105      	bne.n	800444c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	f043 0201 	orr.w	r2, r3, #1
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f7ff fa13 	bl	8003878 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004452:	e004      	b.n	800445e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	4798      	blx	r3
}
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f7ff fa09 	bl	800388c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800447a:	bf00      	nop
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a0:	f043 0204 	orr.w	r2, r3, #4
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f7ff f9f9 	bl	80038a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d108      	bne.n	80044e4 <ADC_Enable+0x2c>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d101      	bne.n	80044e4 <ADC_Enable+0x2c>
 80044e0:	2301      	movs	r3, #1
 80044e2:	e000      	b.n	80044e6 <ADC_Enable+0x2e>
 80044e4:	2300      	movs	r3, #0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d143      	bne.n	8004572 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	4b22      	ldr	r3, [pc, #136]	; (800457c <ADC_Enable+0xc4>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00d      	beq.n	8004514 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fc:	f043 0210 	orr.w	r2, r3, #16
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004508:	f043 0201 	orr.w	r2, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e02f      	b.n	8004574 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004524:	f7ff f978 	bl	8003818 <HAL_GetTick>
 8004528:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800452a:	e01b      	b.n	8004564 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800452c:	f7ff f974 	bl	8003818 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b02      	cmp	r3, #2
 8004538:	d914      	bls.n	8004564 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b01      	cmp	r3, #1
 8004546:	d00d      	beq.n	8004564 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	f043 0210 	orr.w	r2, r3, #16
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004558:	f043 0201 	orr.w	r2, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e007      	b.n	8004574 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b01      	cmp	r3, #1
 8004570:	d1dc      	bne.n	800452c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	8000003f 	.word	0x8000003f

08004580 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	2b01      	cmp	r3, #1
 8004598:	d108      	bne.n	80045ac <ADC_Disable+0x2c>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d101      	bne.n	80045ac <ADC_Disable+0x2c>
 80045a8:	2301      	movs	r3, #1
 80045aa:	e000      	b.n	80045ae <ADC_Disable+0x2e>
 80045ac:	2300      	movs	r3, #0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d047      	beq.n	8004642 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 030d 	and.w	r3, r3, #13
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d10f      	bne.n	80045e0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0202 	orr.w	r2, r2, #2
 80045ce:	609a      	str	r2, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2203      	movs	r2, #3
 80045d6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80045d8:	f7ff f91e 	bl	8003818 <HAL_GetTick>
 80045dc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80045de:	e029      	b.n	8004634 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	f043 0210 	orr.w	r2, r3, #16
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f0:	f043 0201 	orr.w	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e023      	b.n	8004644 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045fc:	f7ff f90c 	bl	8003818 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d914      	bls.n	8004634 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b01      	cmp	r3, #1
 8004616:	d10d      	bne.n	8004634 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	f043 0210 	orr.w	r2, r3, #16
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004628:	f043 0201 	orr.w	r2, r3, #1
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e007      	b.n	8004644 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b01      	cmp	r3, #1
 8004640:	d0dc      	beq.n	80045fc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800465c:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <__NVIC_SetPriorityGrouping+0x44>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004668:	4013      	ands	r3, r2
 800466a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800467c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800467e:	4a04      	ldr	r2, [pc, #16]	; (8004690 <__NVIC_SetPriorityGrouping+0x44>)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	60d3      	str	r3, [r2, #12]
}
 8004684:	bf00      	nop
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	e000ed00 	.word	0xe000ed00

08004694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004698:	4b04      	ldr	r3, [pc, #16]	; (80046ac <__NVIC_GetPriorityGrouping+0x18>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	0a1b      	lsrs	r3, r3, #8
 800469e:	f003 0307 	and.w	r3, r3, #7
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	e000ed00 	.word	0xe000ed00

080046b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4603      	mov	r3, r0
 80046b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	db0b      	blt.n	80046da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	f003 021f 	and.w	r2, r3, #31
 80046c8:	4907      	ldr	r1, [pc, #28]	; (80046e8 <__NVIC_EnableIRQ+0x38>)
 80046ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	2001      	movs	r0, #1
 80046d2:	fa00 f202 	lsl.w	r2, r0, r2
 80046d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	e000e100 	.word	0xe000e100

080046ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	4603      	mov	r3, r0
 80046f4:	6039      	str	r1, [r7, #0]
 80046f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	db0a      	blt.n	8004716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	b2da      	uxtb	r2, r3
 8004704:	490c      	ldr	r1, [pc, #48]	; (8004738 <__NVIC_SetPriority+0x4c>)
 8004706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470a:	0112      	lsls	r2, r2, #4
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	440b      	add	r3, r1
 8004710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004714:	e00a      	b.n	800472c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	b2da      	uxtb	r2, r3
 800471a:	4908      	ldr	r1, [pc, #32]	; (800473c <__NVIC_SetPriority+0x50>)
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	3b04      	subs	r3, #4
 8004724:	0112      	lsls	r2, r2, #4
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	440b      	add	r3, r1
 800472a:	761a      	strb	r2, [r3, #24]
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	e000e100 	.word	0xe000e100
 800473c:	e000ed00 	.word	0xe000ed00

08004740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004740:	b480      	push	{r7}
 8004742:	b089      	sub	sp, #36	; 0x24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f1c3 0307 	rsb	r3, r3, #7
 800475a:	2b04      	cmp	r3, #4
 800475c:	bf28      	it	cs
 800475e:	2304      	movcs	r3, #4
 8004760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	3304      	adds	r3, #4
 8004766:	2b06      	cmp	r3, #6
 8004768:	d902      	bls.n	8004770 <NVIC_EncodePriority+0x30>
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	3b03      	subs	r3, #3
 800476e:	e000      	b.n	8004772 <NVIC_EncodePriority+0x32>
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004774:	f04f 32ff 	mov.w	r2, #4294967295
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	43da      	mvns	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	401a      	ands	r2, r3
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004788:	f04f 31ff 	mov.w	r1, #4294967295
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	fa01 f303 	lsl.w	r3, r1, r3
 8004792:	43d9      	mvns	r1, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004798:	4313      	orrs	r3, r2
         );
}
 800479a:	4618      	mov	r0, r3
 800479c:	3724      	adds	r7, #36	; 0x24
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047b8:	d301      	bcc.n	80047be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047ba:	2301      	movs	r3, #1
 80047bc:	e00f      	b.n	80047de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047be:	4a0a      	ldr	r2, [pc, #40]	; (80047e8 <SysTick_Config+0x40>)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047c6:	210f      	movs	r1, #15
 80047c8:	f04f 30ff 	mov.w	r0, #4294967295
 80047cc:	f7ff ff8e 	bl	80046ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <SysTick_Config+0x40>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047d6:	4b04      	ldr	r3, [pc, #16]	; (80047e8 <SysTick_Config+0x40>)
 80047d8:	2207      	movs	r2, #7
 80047da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	e000e010 	.word	0xe000e010

080047ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7ff ff29 	bl	800464c <__NVIC_SetPriorityGrouping>
}
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b086      	sub	sp, #24
 8004806:	af00      	add	r7, sp, #0
 8004808:	4603      	mov	r3, r0
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	607a      	str	r2, [r7, #4]
 800480e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004814:	f7ff ff3e 	bl	8004694 <__NVIC_GetPriorityGrouping>
 8004818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	6978      	ldr	r0, [r7, #20]
 8004820:	f7ff ff8e 	bl	8004740 <NVIC_EncodePriority>
 8004824:	4602      	mov	r2, r0
 8004826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800482a:	4611      	mov	r1, r2
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff ff5d 	bl	80046ec <__NVIC_SetPriority>
}
 8004832:	bf00      	nop
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	4603      	mov	r3, r0
 8004842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff ff31 	bl	80046b0 <__NVIC_EnableIRQ>
}
 800484e:	bf00      	nop
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b082      	sub	sp, #8
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7ff ffa2 	bl	80047a8 <SysTick_Config>
 8004864:	4603      	mov	r3, r0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e037      	b.n	80048f4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800489a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800489e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80048a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f9b8 	bl	8004c4c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}  
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_DMA_Start_IT+0x20>
 8004918:	2302      	movs	r3, #2
 800491a:	e04a      	b.n	80049b2 <HAL_DMA_Start_IT+0xb6>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800492a:	2b01      	cmp	r3, #1
 800492c:	d13a      	bne.n	80049a4 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2202      	movs	r2, #2
 8004932:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f022 0201 	bic.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68b9      	ldr	r1, [r7, #8]
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 f94b 	bl	8004bee <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 020e 	orr.w	r2, r2, #14
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	e00f      	b.n	8004992 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f042 020a 	orr.w	r2, r2, #10
 8004980:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0204 	bic.w	r2, r2, #4
 8004990:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0201 	orr.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]
 80049a2:	e005      	b.n	80049b0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80049ac:	2302      	movs	r3, #2
 80049ae:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80049b0:	7dfb      	ldrb	r3, [r7, #23]
} 
 80049b2:	4618      	mov	r0, r3
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d008      	beq.n	80049de <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2204      	movs	r2, #4
 80049d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e020      	b.n	8004a20 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 020e 	bic.w	r2, r2, #14
 80049ec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0201 	bic.w	r2, r2, #1
 80049fc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a06:	2101      	movs	r1, #1
 8004a08:	fa01 f202 	lsl.w	r2, r1, r2
 8004a0c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d005      	beq.n	8004a4e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2204      	movs	r2, #4
 8004a46:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	73fb      	strb	r3, [r7, #15]
 8004a4c:	e027      	b.n	8004a9e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 020e 	bic.w	r2, r2, #14
 8004a5c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0201 	bic.w	r2, r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a76:	2101      	movs	r1, #1
 8004a78:	fa01 f202 	lsl.w	r2, r1, r2
 8004a7c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	4798      	blx	r3
    } 
  }
  return status;
 8004a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	2204      	movs	r2, #4
 8004ac6:	409a      	lsls	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d024      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x72>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f003 0304 	and.w	r3, r3, #4
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d01f      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0320 	and.w	r3, r3, #32
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d107      	bne.n	8004af8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f022 0204 	bic.w	r2, r2, #4
 8004af6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b00:	2104      	movs	r1, #4
 8004b02:	fa01 f202 	lsl.w	r2, r1, r2
 8004b06:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d06a      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004b18:	e065      	b.n	8004be6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	2202      	movs	r2, #2
 8004b20:	409a      	lsls	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	4013      	ands	r3, r2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d02c      	beq.n	8004b84 <HAL_DMA_IRQHandler+0xdc>
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d027      	beq.n	8004b84 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10b      	bne.n	8004b5a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 020a 	bic.w	r2, r2, #10
 8004b50:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b62:	2102      	movs	r1, #2
 8004b64:	fa01 f202 	lsl.w	r2, r1, r2
 8004b68:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d035      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004b82:	e030      	b.n	8004be6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	2208      	movs	r2, #8
 8004b8a:	409a      	lsls	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d028      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x13e>
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d023      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 020e 	bic.w	r2, r2, #14
 8004bac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bbc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d004      	beq.n	8004be6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	4798      	blx	r3
    }
  }
}  
 8004be4:	e7ff      	b.n	8004be6 <HAL_DMA_IRQHandler+0x13e>
 8004be6:	bf00      	nop
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b085      	sub	sp, #20
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
 8004bfa:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c04:	2101      	movs	r1, #1
 8004c06:	fa01 f202 	lsl.w	r2, r1, r2
 8004c0a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b10      	cmp	r3, #16
 8004c1a:	d108      	bne.n	8004c2e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c2c:	e007      	b.n	8004c3e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	60da      	str	r2, [r3, #12]
}
 8004c3e:	bf00      	nop
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
	...

08004c4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <DMA_CalcBaseAndBitshift+0x34>)
 8004c5c:	4413      	add	r3, r2
 8004c5e:	4a09      	ldr	r2, [pc, #36]	; (8004c84 <DMA_CalcBaseAndBitshift+0x38>)
 8004c60:	fba2 2303 	umull	r2, r3, r2, r3
 8004c64:	091b      	lsrs	r3, r3, #4
 8004c66:	009a      	lsls	r2, r3, #2
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a06      	ldr	r2, [pc, #24]	; (8004c88 <DMA_CalcBaseAndBitshift+0x3c>)
 8004c70:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004c72:	bf00      	nop
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	bffdfff8 	.word	0xbffdfff8
 8004c84:	cccccccd 	.word	0xcccccccd
 8004c88:	40020000 	.word	0x40020000

08004c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b087      	sub	sp, #28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c96:	2300      	movs	r3, #0
 8004c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c9a:	e14e      	b.n	8004f3a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca8:	4013      	ands	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 8140 	beq.w	8004f34 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f003 0303 	and.w	r3, r3, #3
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d005      	beq.n	8004ccc <HAL_GPIO_Init+0x40>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d130      	bne.n	8004d2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	005b      	lsls	r3, r3, #1
 8004cd6:	2203      	movs	r2, #3
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d02:	2201      	movs	r2, #1
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	fa02 f303 	lsl.w	r3, r2, r3
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	091b      	lsrs	r3, r3, #4
 8004d18:	f003 0201 	and.w	r2, r3, #1
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d017      	beq.n	8004d6a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	2203      	movs	r2, #3
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d123      	bne.n	8004dbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	08da      	lsrs	r2, r3, #3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3208      	adds	r2, #8
 8004d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	220f      	movs	r2, #15
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	43db      	mvns	r3, r3
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	4013      	ands	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	691a      	ldr	r2, [r3, #16]
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	08da      	lsrs	r2, r3, #3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3208      	adds	r2, #8
 8004db8:	6939      	ldr	r1, [r7, #16]
 8004dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	2203      	movs	r2, #3
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	43db      	mvns	r3, r3
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f003 0203 	and.w	r2, r3, #3
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 809a 	beq.w	8004f34 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e00:	4b55      	ldr	r3, [pc, #340]	; (8004f58 <HAL_GPIO_Init+0x2cc>)
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	4a54      	ldr	r2, [pc, #336]	; (8004f58 <HAL_GPIO_Init+0x2cc>)
 8004e06:	f043 0301 	orr.w	r3, r3, #1
 8004e0a:	6193      	str	r3, [r2, #24]
 8004e0c:	4b52      	ldr	r3, [pc, #328]	; (8004f58 <HAL_GPIO_Init+0x2cc>)
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e18:	4a50      	ldr	r2, [pc, #320]	; (8004f5c <HAL_GPIO_Init+0x2d0>)
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	089b      	lsrs	r3, r3, #2
 8004e1e:	3302      	adds	r3, #2
 8004e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e24:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f003 0303 	and.w	r3, r3, #3
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	220f      	movs	r2, #15
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	43db      	mvns	r3, r3
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004e42:	d013      	beq.n	8004e6c <HAL_GPIO_Init+0x1e0>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a46      	ldr	r2, [pc, #280]	; (8004f60 <HAL_GPIO_Init+0x2d4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00d      	beq.n	8004e68 <HAL_GPIO_Init+0x1dc>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a45      	ldr	r2, [pc, #276]	; (8004f64 <HAL_GPIO_Init+0x2d8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d007      	beq.n	8004e64 <HAL_GPIO_Init+0x1d8>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a44      	ldr	r2, [pc, #272]	; (8004f68 <HAL_GPIO_Init+0x2dc>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d101      	bne.n	8004e60 <HAL_GPIO_Init+0x1d4>
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e006      	b.n	8004e6e <HAL_GPIO_Init+0x1e2>
 8004e60:	2305      	movs	r3, #5
 8004e62:	e004      	b.n	8004e6e <HAL_GPIO_Init+0x1e2>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e002      	b.n	8004e6e <HAL_GPIO_Init+0x1e2>
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e000      	b.n	8004e6e <HAL_GPIO_Init+0x1e2>
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	f002 0203 	and.w	r2, r2, #3
 8004e74:	0092      	lsls	r2, r2, #2
 8004e76:	4093      	lsls	r3, r2
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e7e:	4937      	ldr	r1, [pc, #220]	; (8004f5c <HAL_GPIO_Init+0x2d0>)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	089b      	lsrs	r3, r3, #2
 8004e84:	3302      	adds	r3, #2
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e8c:	4b37      	ldr	r3, [pc, #220]	; (8004f6c <HAL_GPIO_Init+0x2e0>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	43db      	mvns	r3, r3
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4013      	ands	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004eb0:	4a2e      	ldr	r2, [pc, #184]	; (8004f6c <HAL_GPIO_Init+0x2e0>)
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004eb6:	4b2d      	ldr	r3, [pc, #180]	; (8004f6c <HAL_GPIO_Init+0x2e0>)
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004eda:	4a24      	ldr	r2, [pc, #144]	; (8004f6c <HAL_GPIO_Init+0x2e0>)
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ee0:	4b22      	ldr	r3, [pc, #136]	; (8004f6c <HAL_GPIO_Init+0x2e0>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	4013      	ands	r3, r2
 8004eee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004f04:	4a19      	ldr	r2, [pc, #100]	; (8004f6c <HAL_GPIO_Init+0x2e0>)
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f0a:	4b18      	ldr	r3, [pc, #96]	; (8004f6c <HAL_GPIO_Init+0x2e0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	43db      	mvns	r3, r3
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	4013      	ands	r3, r2
 8004f18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004f2e:	4a0f      	ldr	r2, [pc, #60]	; (8004f6c <HAL_GPIO_Init+0x2e0>)
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	3301      	adds	r3, #1
 8004f38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f47f aea9 	bne.w	8004c9c <HAL_GPIO_Init+0x10>
  }
}
 8004f4a:	bf00      	nop
 8004f4c:	bf00      	nop
 8004f4e:	371c      	adds	r7, #28
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	40021000 	.word	0x40021000
 8004f5c:	40010000 	.word	0x40010000
 8004f60:	48000400 	.word	0x48000400
 8004f64:	48000800 	.word	0x48000800
 8004f68:	48000c00 	.word	0x48000c00
 8004f6c:	40010400 	.word	0x40010400

08004f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	807b      	strh	r3, [r7, #2]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f80:	787b      	ldrb	r3, [r7, #1]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f86:	887a      	ldrh	r2, [r7, #2]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f8c:	e002      	b.n	8004f94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f8e:	887a      	ldrh	r2, [r7, #2]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e0ba      	b.n	8005128 <HAL_HRTIM_Init+0x188>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d02e      	beq.n	8005054 <HAL_HRTIM_Init+0xb4>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a4d      	ldr	r2, [pc, #308]	; (8005130 <HAL_HRTIM_Init+0x190>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d10b      	bne.n	8005018 <HAL_HRTIM_Init+0x78>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8005000:	4b4c      	ldr	r3, [pc, #304]	; (8005134 <HAL_HRTIM_Init+0x194>)
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	4a4b      	ldr	r2, [pc, #300]	; (8005134 <HAL_HRTIM_Init+0x194>)
 8005006:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800500a:	6193      	str	r3, [r2, #24]
 800500c:	4b49      	ldr	r3, [pc, #292]	; (8005134 <HAL_HRTIM_Init+0x194>)
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005026:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800503c:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f7fe f927 	bl	80032a8 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d012      	beq.n	800508c <HAL_HRTIM_Init+0xec>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005074:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800509c:	2300      	movs	r3, #0
 800509e:	75fb      	strb	r3, [r7, #23]
 80050a0:	e03e      	b.n	8005120 <HAL_HRTIM_Init+0x180>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80050a2:	7dfa      	ldrb	r2, [r7, #23]
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	4613      	mov	r3, r2
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	1a9b      	subs	r3, r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	440b      	add	r3, r1
 80050b0:	3318      	adds	r3, #24
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80050b6:	7dfa      	ldrb	r2, [r7, #23]
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	4613      	mov	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	1a9b      	subs	r3, r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	440b      	add	r3, r1
 80050c4:	331c      	adds	r3, #28
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 80050ca:	7dfa      	ldrb	r2, [r7, #23]
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	4613      	mov	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	3320      	adds	r3, #32
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 80050de:	7dfa      	ldrb	r2, [r7, #23]
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	4613      	mov	r3, r2
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	1a9b      	subs	r3, r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	440b      	add	r3, r1
 80050ec:	3324      	adds	r3, #36	; 0x24
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80050f2:	7dfa      	ldrb	r2, [r7, #23]
 80050f4:	6879      	ldr	r1, [r7, #4]
 80050f6:	4613      	mov	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	440b      	add	r3, r1
 8005100:	3328      	adds	r3, #40	; 0x28
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8005106:	7dfa      	ldrb	r2, [r7, #23]
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	440b      	add	r3, r1
 8005114:	3330      	adds	r3, #48	; 0x30
 8005116:	2200      	movs	r2, #0
 8005118:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800511a:	7dfb      	ldrb	r3, [r7, #23]
 800511c:	3301      	adds	r3, #1
 800511e:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8005120:	7dfb      	ldrb	r3, [r7, #23]
 8005122:	2b05      	cmp	r3, #5
 8005124:	d9bd      	bls.n	80050a2 <HAL_HRTIM_Init+0x102>
  }

  return HAL_OK;
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	40017400 	.word	0x40017400
 8005134:	40021000 	.word	0x40021000

08005138 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_HRTIM_DLLCalibrationStart+0x18>
 800514c:	2302      	movs	r3, #2
 800514e:	e045      	b.n	80051dc <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005166:	d114      	bne.n	8005192 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0202 	bic.w	r2, r2, #2
 8005178:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f042 0201 	orr.w	r2, r2, #1
 800518c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8005190:	e01f      	b.n	80051d2 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0202 	orr.w	r2, r2, #2
 80051a2:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 80051ae:	f023 010c 	bic.w	r1, r3, #12
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0201 	orr.w	r2, r2, #1
 80051ce:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 80051f2:	f7fe fb11 	bl	8003818 <HAL_GetTick>
 80051f6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80051f8:	e014      	b.n	8005224 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005200:	d010      	beq.n	8005224 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 8005202:	f7fe fb09 	bl	8003818 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d302      	bcc.n	8005218 <HAL_HRTIM_PollForDLLCalibration+0x30>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d105      	bne.n	8005224 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2207      	movs	r2, #7
 800521c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e011      	b.n	8005248 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 800522c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005234:	d1e1      	bne.n	80051fa <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d101      	bne.n	800526c <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8005268:	2302      	movs	r3, #2
 800526a:	e015      	b.n	8005298 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b05      	cmp	r3, #5
 8005278:	d104      	bne.n	8005284 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 fb57 	bl	8005930 <HRTIM_MasterBase_Config>
 8005282:	e004      	b.n	800528e <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	68b9      	ldr	r1, [r7, #8]
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 fb80 	bl	800598e <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             const HRTIM_ADCTriggerCfgTypeDef* pADCTriggerCfg)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d101      	bne.n	80052bc <HAL_HRTIM_ADCTriggerConfig+0x1c>
  {
     return HAL_BUSY;
 80052b8:	2302      	movs	r3, #2
 80052ba:	e095      	b.n	80053e8 <HAL_HRTIM_ADCTriggerConfig+0x148>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d101      	bne.n	80052ca <HAL_HRTIM_ADCTriggerConfig+0x2a>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e08e      	b.n	80053e8 <HAL_HRTIM_ADCTriggerConfig+0x148>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2202      	movs	r2, #2
 80052d6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80052e2:	617b      	str	r3, [r7, #20]

  switch (ADCTrigger)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	3b01      	subs	r3, #1
 80052e8:	2b07      	cmp	r3, #7
 80052ea:	d85e      	bhi.n	80053aa <HAL_HRTIM_ADCTriggerConfig+0x10a>
 80052ec:	a201      	add	r2, pc, #4	; (adr r2, 80052f4 <HAL_HRTIM_ADCTriggerConfig+0x54>)
 80052ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f2:	bf00      	nop
 80052f4:	08005315 	.word	0x08005315
 80052f8:	08005339 	.word	0x08005339
 80052fc:	080053ab 	.word	0x080053ab
 8005300:	0800535f 	.word	0x0800535f
 8005304:	080053ab 	.word	0x080053ab
 8005308:	080053ab 	.word	0x080053ab
 800530c:	080053ab 	.word	0x080053ab
 8005310:	08005385 	.word	0x08005385
  {
  case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800531a:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6852      	ldr	r2, [r2, #4]
 8005332:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
      break;
 8005336:	e041      	b.n	80053bc <HAL_HRTIM_ADCTriggerConfig+0x11c>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 800533e:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6852      	ldr	r2, [r2, #4]
 8005358:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
      break;
 800535c:	e02e      	b.n	80053bc <HAL_HRTIM_ADCTriggerConfig+0x11c>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005364:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	019b      	lsls	r3, r3, #6
 800536c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6852      	ldr	r2, [r2, #4]
 800537e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
      break;
 8005382:	e01b      	b.n	80053bc <HAL_HRTIM_ADCTriggerConfig+0x11c>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800538a:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	025b      	lsls	r3, r3, #9
 8005392:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4313      	orrs	r3, r2
 800539a:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	6852      	ldr	r2, [r2, #4]
 80053a4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
      break;
 80053a8:	e008      	b.n	80053bc <HAL_HRTIM_ADCTriggerConfig+0x11c>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2207      	movs	r2, #7
 80053ae:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80053ba:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b07      	cmp	r3, #7
 80053c6:	d101      	bne.n	80053cc <HAL_HRTIM_ADCTriggerConfig+0x12c>
  {
     return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e00d      	b.n	80053e8 <HAL_HRTIM_ADCTriggerConfig+0x148>
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d101      	bne.n	8005410 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 800540c:	2302      	movs	r3, #2
 800540e:	e05f      	b.n	80054d0 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005416:	2b01      	cmp	r3, #1
 8005418:	d101      	bne.n	800541e <HAL_HRTIM_WaveformTimerConfig+0x2a>
 800541a:	2302      	movs	r3, #2
 800541c:	e058      	b.n	80054d0 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2202      	movs	r2, #2
 800542a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	2b05      	cmp	r3, #5
 8005432:	d104      	bne.n	800543e <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 fae9 	bl	8005a0e <HRTIM_MasterWaveform_Config>
 800543c:	e004      	b.n	8005448 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 fb4a 	bl	8005adc <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6819      	ldr	r1, [r3, #0]
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	4613      	mov	r3, r2
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	1a9b      	subs	r3, r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4403      	add	r3, r0
 800545a:	3320      	adds	r3, #32
 800545c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6859      	ldr	r1, [r3, #4]
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	4613      	mov	r3, r2
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	1a9b      	subs	r3, r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4403      	add	r3, r0
 8005470:	3324      	adds	r3, #36	; 0x24
 8005472:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6899      	ldr	r1, [r3, #8]
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	4613      	mov	r3, r2
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4403      	add	r3, r0
 8005486:	3328      	adds	r3, #40	; 0x28
 8005488:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68d9      	ldr	r1, [r3, #12]
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	4613      	mov	r3, r2
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	1a9b      	subs	r3, r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4403      	add	r3, r0
 800549c:	332c      	adds	r3, #44	; 0x2c
 800549e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6919      	ldr	r1, [r3, #16]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	4613      	mov	r3, r2
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	1a9b      	subs	r3, r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4403      	add	r3, r0
 80054b2:	3330      	adds	r3, #48	; 0x30
 80054b4:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 fd27 	bl	8005f0c <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d101      	bne.n	80054f6 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80054f2:	2302      	movs	r3, #2
 80054f4:	e157      	b.n	80057a6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d101      	bne.n	8005504 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8005500:	2302      	movs	r3, #2
 8005502:	e150      	b.n	80057a6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2202      	movs	r2, #2
 8005510:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b05      	cmp	r3, #5
 8005518:	d140      	bne.n	800559c <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3b01      	subs	r3, #1
 800551e:	2b07      	cmp	r3, #7
 8005520:	d82a      	bhi.n	8005578 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8005522:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	08005549 	.word	0x08005549
 800552c:	08005555 	.word	0x08005555
 8005530:	08005579 	.word	0x08005579
 8005534:	08005561 	.word	0x08005561
 8005538:	08005579 	.word	0x08005579
 800553c:	08005579 	.word	0x08005579
 8005540:	08005579 	.word	0x08005579
 8005544:	0800556d 	.word	0x0800556d
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	6812      	ldr	r2, [r2, #0]
 8005550:	61da      	str	r2, [r3, #28]
        break;
 8005552:	e01a      	b.n	800558a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 800555e:	e014      	b.n	800558a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 800556a:	e00e      	b.n	800558a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	6812      	ldr	r2, [r2, #0]
 8005574:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8005576:	e008      	b.n	800558a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2207      	movs	r2, #7
 800557c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8005588:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b07      	cmp	r3, #7
 8005594:	f040 80fe 	bne.w	8005794 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e104      	b.n	80057a6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3b01      	subs	r3, #1
 80055a0:	2b07      	cmp	r3, #7
 80055a2:	f200 80e3 	bhi.w	800576c <HAL_HRTIM_WaveformCompareConfig+0x294>
 80055a6:	a201      	add	r2, pc, #4	; (adr r2, 80055ac <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80055a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ac:	080055cd 	.word	0x080055cd
 80055b0:	080055e1 	.word	0x080055e1
 80055b4:	0800576d 	.word	0x0800576d
 80055b8:	0800569d 	.word	0x0800569d
 80055bc:	0800576d 	.word	0x0800576d
 80055c0:	0800576d 	.word	0x0800576d
 80055c4:	0800576d 	.word	0x0800576d
 80055c8:	080056b1 	.word	0x080056b1
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6819      	ldr	r1, [r3, #0]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	01db      	lsls	r3, r3, #7
 80055d8:	440b      	add	r3, r1
 80055da:	339c      	adds	r3, #156	; 0x9c
 80055dc:	601a      	str	r2, [r3, #0]
        break;
 80055de:	e0d1      	b.n	8005784 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6819      	ldr	r1, [r3, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	01db      	lsls	r3, r3, #7
 80055ec:	440b      	add	r3, r1
 80055ee:	33a4      	adds	r3, #164	; 0xa4
 80055f0:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d03f      	beq.n	800567a <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	3301      	adds	r3, #1
 8005602:	01db      	lsls	r3, r3, #7
 8005604:	4413      	add	r3, r2
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	6811      	ldr	r1, [r2, #0]
 800560c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	3301      	adds	r3, #1
 8005614:	01db      	lsls	r3, r3, #7
 8005616:	440b      	add	r3, r1
 8005618:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	3301      	adds	r3, #1
 8005622:	01db      	lsls	r3, r3, #7
 8005624:	4413      	add	r3, r2
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	68f9      	ldr	r1, [r7, #12]
 800562e:	6809      	ldr	r1, [r1, #0]
 8005630:	431a      	orrs	r2, r3
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	3301      	adds	r3, #1
 8005636:	01db      	lsls	r3, r3, #7
 8005638:	440b      	add	r3, r1
 800563a:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005644:	d109      	bne.n	800565a <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6819      	ldr	r1, [r3, #0]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	01db      	lsls	r3, r3, #7
 8005652:	440b      	add	r3, r1
 8005654:	339c      	adds	r3, #156	; 0x9c
 8005656:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8005658:	e091      	b.n	800577e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005662:	f040 808c 	bne.w	800577e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6819      	ldr	r1, [r3, #0]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	01db      	lsls	r3, r3, #7
 8005672:	440b      	add	r3, r1
 8005674:	33a8      	adds	r3, #168	; 0xa8
 8005676:	601a      	str	r2, [r3, #0]
         break;
 8005678:	e081      	b.n	800577e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	3301      	adds	r3, #1
 8005682:	01db      	lsls	r3, r3, #7
 8005684:	4413      	add	r3, r2
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	6811      	ldr	r1, [r2, #0]
 800568c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	3301      	adds	r3, #1
 8005694:	01db      	lsls	r3, r3, #7
 8005696:	440b      	add	r3, r1
 8005698:	601a      	str	r2, [r3, #0]
         break;
 800569a:	e070      	b.n	800577e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6819      	ldr	r1, [r3, #0]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	01db      	lsls	r3, r3, #7
 80056a8:	440b      	add	r3, r1
 80056aa:	33a8      	adds	r3, #168	; 0xa8
 80056ac:	601a      	str	r2, [r3, #0]
        break;
 80056ae:	e069      	b.n	8005784 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6819      	ldr	r1, [r3, #0]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	01db      	lsls	r3, r3, #7
 80056bc:	440b      	add	r3, r1
 80056be:	33ac      	adds	r3, #172	; 0xac
 80056c0:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d03f      	beq.n	800574a <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	3301      	adds	r3, #1
 80056d2:	01db      	lsls	r3, r3, #7
 80056d4:	4413      	add	r3, r2
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	6811      	ldr	r1, [r2, #0]
 80056dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	3301      	adds	r3, #1
 80056e4:	01db      	lsls	r3, r3, #7
 80056e6:	440b      	add	r3, r1
 80056e8:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	3301      	adds	r3, #1
 80056f2:	01db      	lsls	r3, r3, #7
 80056f4:	4413      	add	r3, r2
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	68f9      	ldr	r1, [r7, #12]
 8005700:	6809      	ldr	r1, [r1, #0]
 8005702:	431a      	orrs	r2, r3
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	3301      	adds	r3, #1
 8005708:	01db      	lsls	r3, r3, #7
 800570a:	440b      	add	r3, r1
 800570c:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005716:	d109      	bne.n	800572c <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6819      	ldr	r1, [r3, #0]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	01db      	lsls	r3, r3, #7
 8005724:	440b      	add	r3, r1
 8005726:	339c      	adds	r3, #156	; 0x9c
 8005728:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 800572a:	e02a      	b.n	8005782 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005734:	d125      	bne.n	8005782 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6819      	ldr	r1, [r3, #0]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	01db      	lsls	r3, r3, #7
 8005742:	440b      	add	r3, r1
 8005744:	33a8      	adds	r3, #168	; 0xa8
 8005746:	601a      	str	r2, [r3, #0]
         break;
 8005748:	e01b      	b.n	8005782 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	3301      	adds	r3, #1
 8005752:	01db      	lsls	r3, r3, #7
 8005754:	4413      	add	r3, r2
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	6811      	ldr	r1, [r2, #0]
 800575c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	3301      	adds	r3, #1
 8005764:	01db      	lsls	r3, r3, #7
 8005766:	440b      	add	r3, r1
 8005768:	601a      	str	r2, [r3, #0]
         break;
 800576a:	e00a      	b.n	8005782 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2207      	movs	r2, #7
 8005770:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 800577c:	e002      	b.n	8005784 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800577e:	bf00      	nop
 8005780:	e000      	b.n	8005784 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005782:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b07      	cmp	r3, #7
 800578e:	d101      	bne.n	8005794 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e008      	b.n	80057a6 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
 80057b2:	bf00      	nop

080057b4 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d101      	bne.n	80057d2 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80057ce:	2302      	movs	r3, #2
 80057d0:	e01d      	b.n	800580e <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d101      	bne.n	80057e0 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80057dc:	2302      	movs	r3, #2
 80057de:	e016      	b.n	800580e <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 fab0 	bl	8005d5c <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
 800581e:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <HAL_HRTIM_WaveformOutputStart+0x18>
 800582a:	2302      	movs	r3, #2
 800582c:	e01a      	b.n	8005864 <HAL_HRTIM_WaveformOutputStart+0x4e>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2202      	movs	r2, #2
 800583a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_E
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005880:	2b01      	cmp	r3, #1
 8005882:	d101      	bne.n	8005888 <HAL_HRTIM_WaveformCountStart+0x18>
 8005884:	2302      	movs	r3, #2
 8005886:	e018      	b.n	80058ba <HAL_HRTIM_WaveformCountStart+0x4a>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6819      	ldr	r1, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <HAL_HRTIM_SoftwareUpdate>:
  * @note The 'software update' bits in the HRTIM control register 2 register are
  *       automatically reset by hardware
  */
HAL_StatusTypeDef HAL_HRTIM_SoftwareUpdate(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t Timers)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERUPDATE(Timers));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d101      	bne.n	80058e0 <HAL_HRTIM_SoftwareUpdate+0x1a>
  {
     return HAL_BUSY;
 80058dc:	2302      	movs	r3, #2
 80058de:	e021      	b.n	8005924 <HAL_HRTIM_SoftwareUpdate+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d101      	bne.n	80058ee <HAL_HRTIM_SoftwareUpdate+0x28>
 80058ea:	2302      	movs	r3, #2
 80058ec:	e01a      	b.n	8005924 <HAL_HRTIM_SoftwareUpdate+0x5e>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2202      	movs	r2, #2
 80058fa:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Force timer(s) registers update */
  hhrtim->Instance->sCommonRegs.CR2 |= Timers;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f8d3 1384 	ldr.w	r1, [r3, #900]	; 0x384
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	430a      	orrs	r2, r1
 800590e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f023 0307 	bic.w	r3, r3, #7
 8005948:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0318 	bic.w	r3, r3, #24
 800595a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	6852      	ldr	r2, [r2, #4]
 8005980:	619a      	str	r2, [r3, #24]
}
 8005982:	bf00      	nop
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 800598e:	b480      	push	{r7}
 8005990:	b087      	sub	sp, #28
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	3301      	adds	r3, #1
 80059a2:	01db      	lsls	r3, r3, #7
 80059a4:	4413      	add	r3, r2
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f023 0307 	bic.w	r3, r3, #7
 80059b0:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	f023 0318 	bic.w	r3, r3, #24
 80059c2:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	3301      	adds	r3, #1
 80059d6:	01db      	lsls	r3, r3, #7
 80059d8:	4413      	add	r3, r2
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6819      	ldr	r1, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	01db      	lsls	r3, r3, #7
 80059ea:	440b      	add	r3, r1
 80059ec:	3394      	adds	r3, #148	; 0x94
 80059ee:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6819      	ldr	r1, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	01db      	lsls	r3, r3, #7
 80059fc:	440b      	add	r3, r1
 80059fe:	3398      	adds	r3, #152	; 0x98
 8005a00:	601a      	str	r2, [r3, #0]
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b085      	sub	sp, #20
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8005a28:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f023 0320 	bic.w	r3, r3, #32
 8005a30:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a42:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a54:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a66:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005a78:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005a8a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a9e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ab0:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8005ace:	bf00      	nop
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
	...

08005adc <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b08b      	sub	sp, #44	; 0x2c
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	3301      	adds	r3, #1
 8005af0:	01db      	lsls	r3, r3, #7
 8005af2:	4413      	add	r3, r2
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	6811      	ldr	r1, [r2, #0]
 8005afa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	3301      	adds	r3, #1
 8005b02:	01db      	lsls	r3, r3, #7
 8005b04:	440b      	add	r3, r1
 8005b06:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	01db      	lsls	r3, r3, #7
 8005b12:	4413      	add	r3, r2
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	01db      	lsls	r3, r3, #7
 8005b20:	4413      	add	r3, r2
 8005b22:	33e8      	adds	r3, #232	; 0xe8
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	01db      	lsls	r3, r3, #7
 8005b30:	4413      	add	r3, r2
 8005b32:	33e4      	adds	r3, #228	; 0xe4
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8005b40:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	f023 0320 	bic.w	r3, r3, #32
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b50:	4313      	orrs	r3, r2
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b5a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b62:	4313      	orrs	r3, r2
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b6c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b74:	4313      	orrs	r3, r2
 8005b76:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005b7e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b86:	4313      	orrs	r3, r2
 8005b88:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005baa:	4313      	orrs	r3, r2
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005bb4:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bbe:	d103      	bne.n	8005bc8 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bce:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005be0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be8:	4313      	orrs	r3, r2
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8005bf2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	f023 031f 	bic.w	r3, r3, #31
 8005c04:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	f003 031f 	and.w	r3, r3, #31
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c1a:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d108      	bne.n	8005c40 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c34:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	6a3a      	ldr	r2, [r7, #32]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c44:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8005c48:	d004      	beq.n	8005c54 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4e:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8005c52:	d103      	bne.n	8005c5c <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c58:	2b40      	cmp	r3, #64	; 0x40
 8005c5a:	d108      	bne.n	8005c6e <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8005c62:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c68:	6a3a      	ldr	r2, [r7, #32]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c72:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d843      	bhi.n	8005d02 <HRTIM_TimingUnitWaveform_Config+0x226>
 8005c7a:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005c95 	.word	0x08005c95
 8005c84:	08005cab 	.word	0x08005cab
 8005c88:	08005cc1 	.word	0x08005cc1
 8005c8c:	08005cd7 	.word	0x08005cd7
 8005c90:	08005ced 	.word	0x08005ced
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c9a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	69fa      	ldr	r2, [r7, #28]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	61fb      	str	r3, [r7, #28]
      break;
 8005ca8:	e02c      	b.n	8005d04 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cb0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	61fb      	str	r3, [r7, #28]
      break;
 8005cbe:	e021      	b.n	8005d04 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005cc6:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	61fb      	str	r3, [r7, #28]
      break;
 8005cd4:	e016      	b.n	8005d04 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005cdc:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	69fa      	ldr	r2, [r7, #28]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	61fb      	str	r3, [r7, #28]
      break;
 8005cea:	e00b      	b.n	8005d04 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cf2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	015b      	lsls	r3, r3, #5
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	61fb      	str	r3, [r7, #28]
      break;
 8005d00:	e000      	b.n	8005d04 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8005d02:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	01db      	lsls	r3, r3, #7
 8005d0e:	4413      	add	r3, r2
 8005d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d12:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	01db      	lsls	r3, r3, #7
 8005d1c:	4413      	add	r3, r2
 8005d1e:	33e8      	adds	r3, #232	; 0xe8
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	01db      	lsls	r3, r3, #7
 8005d2c:	4413      	add	r3, r2
 8005d2e:	33e4      	adds	r3, #228	; 0xe4
 8005d30:	6a3a      	ldr	r2, [r7, #32]
 8005d32:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	01db      	lsls	r3, r3, #7
 8005d3c:	4413      	add	r3, r2
 8005d3e:	33d4      	adds	r3, #212	; 0xd4
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8005d4e:	bf00      	nop
 8005d50:	372c      	adds	r7, #44	; 0x2c
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop

08005d5c <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b089      	sub	sp, #36	; 0x24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	01db      	lsls	r3, r3, #7
 8005d76:	4413      	add	r3, r2
 8005d78:	33e4      	adds	r3, #228	; 0xe4
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	01db      	lsls	r3, r3, #7
 8005d86:	4413      	add	r3, r2
 8005d88:	33b8      	adds	r3, #184	; 0xb8
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	617b      	str	r3, [r7, #20]

  switch (Output)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d94:	d04d      	beq.n	8005e32 <HRTIM_OutputConfig+0xd6>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d9c:	d85e      	bhi.n	8005e5c <HRTIM_OutputConfig+0x100>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da4:	d032      	beq.n	8005e0c <HRTIM_OutputConfig+0xb0>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dac:	d856      	bhi.n	8005e5c <HRTIM_OutputConfig+0x100>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b80      	cmp	r3, #128	; 0x80
 8005db2:	d03e      	beq.n	8005e32 <HRTIM_OutputConfig+0xd6>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2b80      	cmp	r3, #128	; 0x80
 8005db8:	d850      	bhi.n	8005e5c <HRTIM_OutputConfig+0x100>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b40      	cmp	r3, #64	; 0x40
 8005dbe:	d025      	beq.n	8005e0c <HRTIM_OutputConfig+0xb0>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b40      	cmp	r3, #64	; 0x40
 8005dc4:	d84a      	bhi.n	8005e5c <HRTIM_OutputConfig+0x100>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d01f      	beq.n	8005e0c <HRTIM_OutputConfig+0xb0>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d044      	beq.n	8005e5c <HRTIM_OutputConfig+0x100>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d841      	bhi.n	8005e5c <HRTIM_OutputConfig+0x100>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d33e      	bcc.n	8005e5c <HRTIM_OutputConfig+0x100>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3b02      	subs	r3, #2
 8005de2:	2201      	movs	r2, #1
 8005de4:	409a      	lsls	r2, r3
 8005de6:	4b48      	ldr	r3, [pc, #288]	; (8005f08 <HRTIM_OutputConfig+0x1ac>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	bf14      	ite	ne
 8005dee:	2301      	movne	r3, #1
 8005df0:	2300      	moveq	r3, #0
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d11c      	bne.n	8005e32 <HRTIM_OutputConfig+0xd6>
 8005df8:	f244 0304 	movw	r3, #16388	; 0x4004
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	bf14      	ite	ne
 8005e02:	2301      	movne	r3, #1
 8005e04:	2300      	moveq	r3, #0
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d027      	beq.n	8005e5c <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6819      	ldr	r1, [r3, #0]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	01db      	lsls	r3, r3, #7
 8005e18:	440b      	add	r3, r1
 8005e1a:	33bc      	adds	r3, #188	; 0xbc
 8005e1c:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6819      	ldr	r1, [r3, #0]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	689a      	ldr	r2, [r3, #8]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	01db      	lsls	r3, r3, #7
 8005e2a:	440b      	add	r3, r1
 8005e2c:	33c0      	adds	r3, #192	; 0xc0
 8005e2e:	601a      	str	r2, [r3, #0]
      break;
 8005e30:	e015      	b.n	8005e5e <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6819      	ldr	r1, [r3, #0]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	01db      	lsls	r3, r3, #7
 8005e3e:	440b      	add	r3, r1
 8005e40:	33c4      	adds	r3, #196	; 0xc4
 8005e42:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6819      	ldr	r1, [r3, #0]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	01db      	lsls	r3, r3, #7
 8005e50:	440b      	add	r3, r1
 8005e52:	33c8      	adds	r3, #200	; 0xc8
 8005e54:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8005e56:	2310      	movs	r3, #16
 8005e58:	61bb      	str	r3, [r7, #24]
      break;
 8005e5a:	e000      	b.n	8005e5e <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8005e5c:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8005e5e:	22fe      	movs	r2, #254	; 0xfe
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8005e66:	43db      	mvns	r3, r3
 8005e68:	69fa      	ldr	r2, [r7, #28]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	69fa      	ldr	r2, [r7, #28]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68da      	ldr	r2, [r3, #12]
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	fa02 f303 	lsl.w	r3, r2, r3
 8005e88:	69fa      	ldr	r2, [r7, #28]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	691a      	ldr	r2, [r3, #16]
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	fa02 f303 	lsl.w	r3, r2, r3
 8005e98:	69fa      	ldr	r2, [r7, #28]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	695a      	ldr	r2, [r3, #20]
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea8:	69fa      	ldr	r2, [r7, #28]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d111      	bne.n	8005eea <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10c      	bne.n	8005eea <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d107      	bne.n	8005eea <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	69da      	ldr	r2, [r3, #28]
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee4:	69fa      	ldr	r2, [r7, #28]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	01db      	lsls	r3, r3, #7
 8005ef2:	4413      	add	r3, r2
 8005ef4:	33e4      	adds	r3, #228	; 0xe4
 8005ef6:	69fa      	ldr	r2, [r7, #28]
 8005ef8:	601a      	str	r2, [r3, #0]
}
 8005efa:	bf00      	nop
 8005efc:	3724      	adds	r7, #36	; 0x24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	40000041 	.word	0x40000041

08005f0c <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b05      	cmp	r3, #5
 8005f1a:	d851      	bhi.n	8005fc0 <HRTIM_ForceRegistersUpdate+0xb4>
 8005f1c:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <HRTIM_ForceRegistersUpdate+0x18>)
 8005f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f22:	bf00      	nop
 8005f24:	08005f53 	.word	0x08005f53
 8005f28:	08005f69 	.word	0x08005f69
 8005f2c:	08005f7f 	.word	0x08005f7f
 8005f30:	08005f95 	.word	0x08005f95
 8005f34:	08005fab 	.word	0x08005fab
 8005f38:	08005f3d 	.word	0x08005f3d
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 0201 	orr.w	r2, r2, #1
 8005f4c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8005f50:	e037      	b.n	8005fc2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0202 	orr.w	r2, r2, #2
 8005f62:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8005f66:	e02c      	b.n	8005fc2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f042 0204 	orr.w	r2, r2, #4
 8005f78:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8005f7c:	e021      	b.n	8005fc2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0208 	orr.w	r2, r2, #8
 8005f8e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8005f92:	e016      	b.n	8005fc2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f042 0210 	orr.w	r2, r2, #16
 8005fa4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8005fa8:	e00b      	b.n	8005fc2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 0220 	orr.w	r2, r2, #32
 8005fba:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8005fbe:	e000      	b.n	8005fc2 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8005fc0:	bf00      	nop
  }
}
 8005fc2:	bf00      	nop
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop

08005fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e081      	b.n	80060e6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d106      	bne.n	8005ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7fd f9ae 	bl	8003358 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2224      	movs	r2, #36	; 0x24
 8006000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f022 0201 	bic.w	r2, r2, #1
 8006012:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006020:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006030:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d107      	bne.n	800604a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689a      	ldr	r2, [r3, #8]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006046:	609a      	str	r2, [r3, #8]
 8006048:	e006      	b.n	8006058 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006056:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d104      	bne.n	800606a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006068:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	6812      	ldr	r2, [r2, #0]
 8006074:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800607c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68da      	ldr	r2, [r3, #12]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800608c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691a      	ldr	r2, [r3, #16]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	69d9      	ldr	r1, [r3, #28]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a1a      	ldr	r2, [r3, #32]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0201 	orr.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	607a      	str	r2, [r7, #4]
 80060fa:	461a      	mov	r2, r3
 80060fc:	460b      	mov	r3, r1
 80060fe:	817b      	strh	r3, [r7, #10]
 8006100:	4613      	mov	r3, r2
 8006102:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b20      	cmp	r3, #32
 800610e:	f040 80da 	bne.w	80062c6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006118:	2b01      	cmp	r3, #1
 800611a:	d101      	bne.n	8006120 <HAL_I2C_Master_Transmit+0x30>
 800611c:	2302      	movs	r3, #2
 800611e:	e0d3      	b.n	80062c8 <HAL_I2C_Master_Transmit+0x1d8>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006128:	f7fd fb76 	bl	8003818 <HAL_GetTick>
 800612c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	2319      	movs	r3, #25
 8006134:	2201      	movs	r2, #1
 8006136:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 fb4e 	bl	80067dc <I2C_WaitOnFlagUntilTimeout>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e0be      	b.n	80062c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2221      	movs	r2, #33	; 0x21
 800614e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2210      	movs	r2, #16
 8006156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	893a      	ldrh	r2, [r7, #8]
 800616a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006176:	b29b      	uxth	r3, r3
 8006178:	2bff      	cmp	r3, #255	; 0xff
 800617a:	d90e      	bls.n	800619a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	22ff      	movs	r2, #255	; 0xff
 8006180:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006186:	b2da      	uxtb	r2, r3
 8006188:	8979      	ldrh	r1, [r7, #10]
 800618a:	4b51      	ldr	r3, [pc, #324]	; (80062d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 fd5e 	bl	8006c54 <I2C_TransferConfig>
 8006198:	e06c      	b.n	8006274 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	8979      	ldrh	r1, [r7, #10]
 80061ac:	4b48      	ldr	r3, [pc, #288]	; (80062d0 <HAL_I2C_Master_Transmit+0x1e0>)
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 fd4d 	bl	8006c54 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80061ba:	e05b      	b.n	8006274 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	6a39      	ldr	r1, [r7, #32]
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 fb5a 	bl	800687a <I2C_WaitOnTXISFlagUntilTimeout>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e07b      	b.n	80062c8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d4:	781a      	ldrb	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	3b01      	subs	r3, #1
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d034      	beq.n	8006274 <HAL_I2C_Master_Transmit+0x184>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800620e:	2b00      	cmp	r3, #0
 8006210:	d130      	bne.n	8006274 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	2200      	movs	r2, #0
 800621a:	2180      	movs	r1, #128	; 0x80
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 fadd 	bl	80067dc <I2C_WaitOnFlagUntilTimeout>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e04d      	b.n	80062c8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006230:	b29b      	uxth	r3, r3
 8006232:	2bff      	cmp	r3, #255	; 0xff
 8006234:	d90e      	bls.n	8006254 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	22ff      	movs	r2, #255	; 0xff
 800623a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006240:	b2da      	uxtb	r2, r3
 8006242:	8979      	ldrh	r1, [r7, #10]
 8006244:	2300      	movs	r3, #0
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 fd01 	bl	8006c54 <I2C_TransferConfig>
 8006252:	e00f      	b.n	8006274 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006258:	b29a      	uxth	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006262:	b2da      	uxtb	r2, r3
 8006264:	8979      	ldrh	r1, [r7, #10]
 8006266:	2300      	movs	r3, #0
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 fcf0 	bl	8006c54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006278:	b29b      	uxth	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d19e      	bne.n	80061bc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	6a39      	ldr	r1, [r7, #32]
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 fb40 	bl	8006908 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e01a      	b.n	80062c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2220      	movs	r2, #32
 8006298:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6859      	ldr	r1, [r3, #4]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	4b0b      	ldr	r3, [pc, #44]	; (80062d4 <HAL_I2C_Master_Transmit+0x1e4>)
 80062a6:	400b      	ands	r3, r1
 80062a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2220      	movs	r2, #32
 80062ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	e000      	b.n	80062c8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80062c6:	2302      	movs	r3, #2
  }
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3718      	adds	r7, #24
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	80002000 	.word	0x80002000
 80062d4:	fe00e800 	.word	0xfe00e800

080062d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b088      	sub	sp, #32
 80062dc:	af02      	add	r7, sp, #8
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	607a      	str	r2, [r7, #4]
 80062e2:	461a      	mov	r2, r3
 80062e4:	460b      	mov	r3, r1
 80062e6:	817b      	strh	r3, [r7, #10]
 80062e8:	4613      	mov	r3, r2
 80062ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b20      	cmp	r3, #32
 80062f6:	f040 80db 	bne.w	80064b0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_I2C_Master_Receive+0x30>
 8006304:	2302      	movs	r3, #2
 8006306:	e0d4      	b.n	80064b2 <HAL_I2C_Master_Receive+0x1da>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006310:	f7fd fa82 	bl	8003818 <HAL_GetTick>
 8006314:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	2319      	movs	r3, #25
 800631c:	2201      	movs	r2, #1
 800631e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 fa5a 	bl	80067dc <I2C_WaitOnFlagUntilTimeout>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e0bf      	b.n	80064b2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2222      	movs	r2, #34	; 0x22
 8006336:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2210      	movs	r2, #16
 800633e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	893a      	ldrh	r2, [r7, #8]
 8006352:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635e:	b29b      	uxth	r3, r3
 8006360:	2bff      	cmp	r3, #255	; 0xff
 8006362:	d90e      	bls.n	8006382 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	22ff      	movs	r2, #255	; 0xff
 8006368:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800636e:	b2da      	uxtb	r2, r3
 8006370:	8979      	ldrh	r1, [r7, #10]
 8006372:	4b52      	ldr	r3, [pc, #328]	; (80064bc <HAL_I2C_Master_Receive+0x1e4>)
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 fc6a 	bl	8006c54 <I2C_TransferConfig>
 8006380:	e06d      	b.n	800645e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006386:	b29a      	uxth	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006390:	b2da      	uxtb	r2, r3
 8006392:	8979      	ldrh	r1, [r7, #10]
 8006394:	4b49      	ldr	r3, [pc, #292]	; (80064bc <HAL_I2C_Master_Receive+0x1e4>)
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 fc59 	bl	8006c54 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80063a2:	e05c      	b.n	800645e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	6a39      	ldr	r1, [r7, #32]
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 faf1 	bl	8006990 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d001      	beq.n	80063b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e07c      	b.n	80064b2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063d4:	3b01      	subs	r3, #1
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d034      	beq.n	800645e <HAL_I2C_Master_Receive+0x186>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d130      	bne.n	800645e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	2200      	movs	r2, #0
 8006404:	2180      	movs	r1, #128	; 0x80
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 f9e8 	bl	80067dc <I2C_WaitOnFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e04d      	b.n	80064b2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800641a:	b29b      	uxth	r3, r3
 800641c:	2bff      	cmp	r3, #255	; 0xff
 800641e:	d90e      	bls.n	800643e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	22ff      	movs	r2, #255	; 0xff
 8006424:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800642a:	b2da      	uxtb	r2, r3
 800642c:	8979      	ldrh	r1, [r7, #10]
 800642e:	2300      	movs	r3, #0
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f000 fc0c 	bl	8006c54 <I2C_TransferConfig>
 800643c:	e00f      	b.n	800645e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006442:	b29a      	uxth	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800644c:	b2da      	uxtb	r2, r3
 800644e:	8979      	ldrh	r1, [r7, #10]
 8006450:	2300      	movs	r3, #0
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006458:	68f8      	ldr	r0, [r7, #12]
 800645a:	f000 fbfb 	bl	8006c54 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006462:	b29b      	uxth	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d19d      	bne.n	80063a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006468:	697a      	ldr	r2, [r7, #20]
 800646a:	6a39      	ldr	r1, [r7, #32]
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 fa4b 	bl	8006908 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e01a      	b.n	80064b2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2220      	movs	r2, #32
 8006482:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6859      	ldr	r1, [r3, #4]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	4b0c      	ldr	r3, [pc, #48]	; (80064c0 <HAL_I2C_Master_Receive+0x1e8>)
 8006490:	400b      	ands	r3, r1
 8006492:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2220      	movs	r2, #32
 8006498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064ac:	2300      	movs	r3, #0
 80064ae:	e000      	b.n	80064b2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80064b0:	2302      	movs	r3, #2
  }
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	80002400 	.word	0x80002400
 80064c0:	fe00e800 	.word	0xfe00e800

080064c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af02      	add	r7, sp, #8
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	4608      	mov	r0, r1
 80064ce:	4611      	mov	r1, r2
 80064d0:	461a      	mov	r2, r3
 80064d2:	4603      	mov	r3, r0
 80064d4:	817b      	strh	r3, [r7, #10]
 80064d6:	460b      	mov	r3, r1
 80064d8:	813b      	strh	r3, [r7, #8]
 80064da:	4613      	mov	r3, r2
 80064dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b20      	cmp	r3, #32
 80064e8:	f040 80f9 	bne.w	80066de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d002      	beq.n	80064f8 <HAL_I2C_Mem_Write+0x34>
 80064f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d105      	bne.n	8006504 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e0ed      	b.n	80066e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <HAL_I2C_Mem_Write+0x4e>
 800650e:	2302      	movs	r3, #2
 8006510:	e0e6      	b.n	80066e0 <HAL_I2C_Mem_Write+0x21c>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800651a:	f7fd f97d 	bl	8003818 <HAL_GetTick>
 800651e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	2319      	movs	r3, #25
 8006526:	2201      	movs	r2, #1
 8006528:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800652c:	68f8      	ldr	r0, [r7, #12]
 800652e:	f000 f955 	bl	80067dc <I2C_WaitOnFlagUntilTimeout>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e0d1      	b.n	80066e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2221      	movs	r2, #33	; 0x21
 8006540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2240      	movs	r2, #64	; 0x40
 8006548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a3a      	ldr	r2, [r7, #32]
 8006556:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800655c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006564:	88f8      	ldrh	r0, [r7, #6]
 8006566:	893a      	ldrh	r2, [r7, #8]
 8006568:	8979      	ldrh	r1, [r7, #10]
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	9301      	str	r3, [sp, #4]
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	4603      	mov	r3, r0
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 f8b9 	bl	80066ec <I2C_RequestMemoryWrite>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d005      	beq.n	800658c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e0a9      	b.n	80066e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006590:	b29b      	uxth	r3, r3
 8006592:	2bff      	cmp	r3, #255	; 0xff
 8006594:	d90e      	bls.n	80065b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	22ff      	movs	r2, #255	; 0xff
 800659a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	8979      	ldrh	r1, [r7, #10]
 80065a4:	2300      	movs	r3, #0
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 fb51 	bl	8006c54 <I2C_TransferConfig>
 80065b2:	e00f      	b.n	80065d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	8979      	ldrh	r1, [r7, #10]
 80065c6:	2300      	movs	r3, #0
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 fb40 	bl	8006c54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 f94e 	bl	800687a <I2C_WaitOnTXISFlagUntilTimeout>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	e07b      	b.n	80066e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	781a      	ldrb	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b01      	subs	r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006610:	3b01      	subs	r3, #1
 8006612:	b29a      	uxth	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661c:	b29b      	uxth	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d034      	beq.n	800668c <HAL_I2C_Mem_Write+0x1c8>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006626:	2b00      	cmp	r3, #0
 8006628:	d130      	bne.n	800668c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006630:	2200      	movs	r2, #0
 8006632:	2180      	movs	r1, #128	; 0x80
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 f8d1 	bl	80067dc <I2C_WaitOnFlagUntilTimeout>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e04d      	b.n	80066e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006648:	b29b      	uxth	r3, r3
 800664a:	2bff      	cmp	r3, #255	; 0xff
 800664c:	d90e      	bls.n	800666c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	22ff      	movs	r2, #255	; 0xff
 8006652:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006658:	b2da      	uxtb	r2, r3
 800665a:	8979      	ldrh	r1, [r7, #10]
 800665c:	2300      	movs	r3, #0
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 faf5 	bl	8006c54 <I2C_TransferConfig>
 800666a:	e00f      	b.n	800668c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006670:	b29a      	uxth	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800667a:	b2da      	uxtb	r2, r3
 800667c:	8979      	ldrh	r1, [r7, #10]
 800667e:	2300      	movs	r3, #0
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f000 fae4 	bl	8006c54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006690:	b29b      	uxth	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d19e      	bne.n	80065d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 f934 	bl	8006908 <I2C_WaitOnSTOPFlagUntilTimeout>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e01a      	b.n	80066e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2220      	movs	r2, #32
 80066b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6859      	ldr	r1, [r3, #4]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	4b0a      	ldr	r3, [pc, #40]	; (80066e8 <HAL_I2C_Mem_Write+0x224>)
 80066be:	400b      	ands	r3, r1
 80066c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	e000      	b.n	80066e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80066de:	2302      	movs	r3, #2
  }
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	fe00e800 	.word	0xfe00e800

080066ec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af02      	add	r7, sp, #8
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	4608      	mov	r0, r1
 80066f6:	4611      	mov	r1, r2
 80066f8:	461a      	mov	r2, r3
 80066fa:	4603      	mov	r3, r0
 80066fc:	817b      	strh	r3, [r7, #10]
 80066fe:	460b      	mov	r3, r1
 8006700:	813b      	strh	r3, [r7, #8]
 8006702:	4613      	mov	r3, r2
 8006704:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006706:	88fb      	ldrh	r3, [r7, #6]
 8006708:	b2da      	uxtb	r2, r3
 800670a:	8979      	ldrh	r1, [r7, #10]
 800670c:	4b20      	ldr	r3, [pc, #128]	; (8006790 <I2C_RequestMemoryWrite+0xa4>)
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 fa9d 	bl	8006c54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800671a:	69fa      	ldr	r2, [r7, #28]
 800671c:	69b9      	ldr	r1, [r7, #24]
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 f8ab 	bl	800687a <I2C_WaitOnTXISFlagUntilTimeout>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e02c      	b.n	8006788 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d105      	bne.n	8006740 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006734:	893b      	ldrh	r3, [r7, #8]
 8006736:	b2da      	uxtb	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	629a      	str	r2, [r3, #40]	; 0x28
 800673e:	e015      	b.n	800676c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006740:	893b      	ldrh	r3, [r7, #8]
 8006742:	0a1b      	lsrs	r3, r3, #8
 8006744:	b29b      	uxth	r3, r3
 8006746:	b2da      	uxtb	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800674e:	69fa      	ldr	r2, [r7, #28]
 8006750:	69b9      	ldr	r1, [r7, #24]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 f891 	bl	800687a <I2C_WaitOnTXISFlagUntilTimeout>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e012      	b.n	8006788 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006762:	893b      	ldrh	r3, [r7, #8]
 8006764:	b2da      	uxtb	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	2200      	movs	r2, #0
 8006774:	2180      	movs	r1, #128	; 0x80
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f000 f830 	bl	80067dc <I2C_WaitOnFlagUntilTimeout>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e000      	b.n	8006788 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3710      	adds	r7, #16
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	80002000 	.word	0x80002000

08006794 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d103      	bne.n	80067b2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2200      	movs	r2, #0
 80067b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	f003 0301 	and.w	r3, r3, #1
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d007      	beq.n	80067d0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699a      	ldr	r2, [r3, #24]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f042 0201 	orr.w	r2, r2, #1
 80067ce:	619a      	str	r2, [r3, #24]
  }
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	603b      	str	r3, [r7, #0]
 80067e8:	4613      	mov	r3, r2
 80067ea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067ec:	e031      	b.n	8006852 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f4:	d02d      	beq.n	8006852 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f6:	f7fd f80f 	bl	8003818 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	429a      	cmp	r2, r3
 8006804:	d302      	bcc.n	800680c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d122      	bne.n	8006852 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	699a      	ldr	r2, [r3, #24]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	4013      	ands	r3, r2
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	429a      	cmp	r2, r3
 800681a:	bf0c      	ite	eq
 800681c:	2301      	moveq	r3, #1
 800681e:	2300      	movne	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	461a      	mov	r2, r3
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	429a      	cmp	r2, r3
 8006828:	d113      	bne.n	8006852 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682e:	f043 0220 	orr.w	r2, r3, #32
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2220      	movs	r2, #32
 800683a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e00f      	b.n	8006872 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	699a      	ldr	r2, [r3, #24]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	4013      	ands	r3, r2
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	429a      	cmp	r2, r3
 8006860:	bf0c      	ite	eq
 8006862:	2301      	moveq	r3, #1
 8006864:	2300      	movne	r3, #0
 8006866:	b2db      	uxtb	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	79fb      	ldrb	r3, [r7, #7]
 800686c:	429a      	cmp	r2, r3
 800686e:	d0be      	beq.n	80067ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	60b9      	str	r1, [r7, #8]
 8006884:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006886:	e033      	b.n	80068f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	68b9      	ldr	r1, [r7, #8]
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 f901 	bl	8006a94 <I2C_IsErrorOccurred>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e031      	b.n	8006900 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068a2:	d025      	beq.n	80068f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068a4:	f7fc ffb8 	bl	8003818 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d302      	bcc.n	80068ba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d11a      	bne.n	80068f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	699b      	ldr	r3, [r3, #24]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d013      	beq.n	80068f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068cc:	f043 0220 	orr.w	r2, r3, #32
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e007      	b.n	8006900 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d1c4      	bne.n	8006888 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006914:	e02f      	b.n	8006976 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	68b9      	ldr	r1, [r7, #8]
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 f8ba 	bl	8006a94 <I2C_IsErrorOccurred>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e02d      	b.n	8006986 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800692a:	f7fc ff75 	bl	8003818 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	429a      	cmp	r2, r3
 8006938:	d302      	bcc.n	8006940 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d11a      	bne.n	8006976 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	f003 0320 	and.w	r3, r3, #32
 800694a:	2b20      	cmp	r3, #32
 800694c:	d013      	beq.n	8006976 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006952:	f043 0220 	orr.w	r2, r3, #32
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2220      	movs	r2, #32
 800695e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e007      	b.n	8006986 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	f003 0320 	and.w	r3, r3, #32
 8006980:	2b20      	cmp	r3, #32
 8006982:	d1c8      	bne.n	8006916 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
	...

08006990 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800699c:	e06b      	b.n	8006a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	68b9      	ldr	r1, [r7, #8]
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 f876 	bl	8006a94 <I2C_IsErrorOccurred>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d001      	beq.n	80069b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e069      	b.n	8006a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	f003 0320 	and.w	r3, r3, #32
 80069bc:	2b20      	cmp	r3, #32
 80069be:	d138      	bne.n	8006a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d105      	bne.n	80069da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	e055      	b.n	8006a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	f003 0310 	and.w	r3, r3, #16
 80069e4:	2b10      	cmp	r3, #16
 80069e6:	d107      	bne.n	80069f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2210      	movs	r2, #16
 80069ee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2204      	movs	r2, #4
 80069f4:	645a      	str	r2, [r3, #68]	; 0x44
 80069f6:	e002      	b.n	80069fe <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2220      	movs	r2, #32
 8006a04:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6859      	ldr	r1, [r3, #4]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	4b1f      	ldr	r3, [pc, #124]	; (8006a90 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8006a12:	400b      	ands	r3, r1
 8006a14:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e029      	b.n	8006a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a32:	f7fc fef1 	bl	8003818 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d302      	bcc.n	8006a48 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d116      	bne.n	8006a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	f003 0304 	and.w	r3, r3, #4
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	d00f      	beq.n	8006a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5a:	f043 0220 	orr.w	r2, r3, #32
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2220      	movs	r2, #32
 8006a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e007      	b.n	8006a86 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	f003 0304 	and.w	r3, r3, #4
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	d18c      	bne.n	800699e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	fe00e800 	.word	0xfe00e800

08006a94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08a      	sub	sp, #40	; 0x28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	f003 0310 	and.w	r3, r3, #16
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d068      	beq.n	8006b92 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2210      	movs	r2, #16
 8006ac6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ac8:	e049      	b.n	8006b5e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad0:	d045      	beq.n	8006b5e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006ad2:	f7fc fea1 	bl	8003818 <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d302      	bcc.n	8006ae8 <I2C_IsErrorOccurred+0x54>
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d13a      	bne.n	8006b5e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006af2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006afa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b0a:	d121      	bne.n	8006b50 <I2C_IsErrorOccurred+0xbc>
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b12:	d01d      	beq.n	8006b50 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006b14:	7cfb      	ldrb	r3, [r7, #19]
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	d01a      	beq.n	8006b50 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b28:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006b2a:	f7fc fe75 	bl	8003818 <HAL_GetTick>
 8006b2e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b30:	e00e      	b.n	8006b50 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006b32:	f7fc fe71 	bl	8003818 <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	2b19      	cmp	r3, #25
 8006b3e:	d907      	bls.n	8006b50 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	f043 0320 	orr.w	r3, r3, #32
 8006b46:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006b4e:	e006      	b.n	8006b5e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	699b      	ldr	r3, [r3, #24]
 8006b56:	f003 0320 	and.w	r3, r3, #32
 8006b5a:	2b20      	cmp	r3, #32
 8006b5c:	d1e9      	bne.n	8006b32 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	f003 0320 	and.w	r3, r3, #32
 8006b68:	2b20      	cmp	r3, #32
 8006b6a:	d003      	beq.n	8006b74 <I2C_IsErrorOccurred+0xe0>
 8006b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d0aa      	beq.n	8006aca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d103      	bne.n	8006b84 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2220      	movs	r2, #32
 8006b82:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	f043 0304 	orr.w	r3, r3, #4
 8006b8a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	699b      	ldr	r3, [r3, #24]
 8006b98:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00b      	beq.n	8006bbc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	f043 0301 	orr.w	r3, r3, #1
 8006baa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00b      	beq.n	8006bde <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	f043 0308 	orr.w	r3, r3, #8
 8006bcc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bd6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00b      	beq.n	8006c00 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	f043 0302 	orr.w	r3, r3, #2
 8006bee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d01c      	beq.n	8006c42 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f7ff fdc3 	bl	8006794 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6859      	ldr	r1, [r3, #4]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	4b0d      	ldr	r3, [pc, #52]	; (8006c50 <I2C_IsErrorOccurred+0x1bc>)
 8006c1a:	400b      	ands	r3, r1
 8006c1c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c22:	6a3b      	ldr	r3, [r7, #32]
 8006c24:	431a      	orrs	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006c42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3728      	adds	r7, #40	; 0x28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	fe00e800 	.word	0xfe00e800

08006c54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	607b      	str	r3, [r7, #4]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	817b      	strh	r3, [r7, #10]
 8006c62:	4613      	mov	r3, r2
 8006c64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c66:	897b      	ldrh	r3, [r7, #10]
 8006c68:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c6c:	7a7b      	ldrb	r3, [r7, #9]
 8006c6e:	041b      	lsls	r3, r3, #16
 8006c70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c74:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c82:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	0d5b      	lsrs	r3, r3, #21
 8006c8e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006c92:	4b08      	ldr	r3, [pc, #32]	; (8006cb4 <I2C_TransferConfig+0x60>)
 8006c94:	430b      	orrs	r3, r1
 8006c96:	43db      	mvns	r3, r3
 8006c98:	ea02 0103 	and.w	r1, r2, r3
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	697a      	ldr	r2, [r7, #20]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006ca6:	bf00      	nop
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	03ff63ff 	.word	0x03ff63ff

08006cb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	d138      	bne.n	8006d40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e032      	b.n	8006d42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2224      	movs	r2, #36	; 0x24
 8006ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 0201 	bic.w	r2, r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6819      	ldr	r1, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0201 	orr.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e000      	b.n	8006d42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d40:	2302      	movs	r3, #2
  }
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b085      	sub	sp, #20
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b20      	cmp	r3, #32
 8006d62:	d139      	bne.n	8006dd8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d101      	bne.n	8006d72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d6e:	2302      	movs	r3, #2
 8006d70:	e033      	b.n	8006dda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2224      	movs	r2, #36	; 0x24
 8006d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0201 	bic.w	r2, r2, #1
 8006d90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006da0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	021b      	lsls	r3, r3, #8
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f042 0201 	orr.w	r2, r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	e000      	b.n	8006dda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006dd8:	2302      	movs	r3, #2
  }
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
	...

08006de8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006df2:	699b      	ldr	r3, [r3, #24]
 8006df4:	4a0a      	ldr	r2, [pc, #40]	; (8006e20 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006df6:	f043 0301 	orr.w	r3, r3, #1
 8006dfa:	6193      	str	r3, [r2, #24]
 8006dfc:	4b08      	ldr	r3, [pc, #32]	; (8006e20 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006dfe:	699b      	ldr	r3, [r3, #24]
 8006e00:	f003 0301 	and.w	r3, r3, #1
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8006e08:	4b06      	ldr	r3, [pc, #24]	; (8006e24 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	4905      	ldr	r1, [pc, #20]	; (8006e24 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	600b      	str	r3, [r1, #0]
}
 8006e14:	bf00      	nop
 8006e16:	3714      	adds	r7, #20
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	40021000 	.word	0x40021000
 8006e24:	40010000 	.word	0x40010000

08006e28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e38:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d102      	bne.n	8006e4e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	f001 b823 	b.w	8007e94 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006e52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 817d 	beq.w	800715e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006e64:	4bbc      	ldr	r3, [pc, #752]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f003 030c 	and.w	r3, r3, #12
 8006e6c:	2b04      	cmp	r3, #4
 8006e6e:	d00c      	beq.n	8006e8a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006e70:	4bb9      	ldr	r3, [pc, #740]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f003 030c 	and.w	r3, r3, #12
 8006e78:	2b08      	cmp	r3, #8
 8006e7a:	d15c      	bne.n	8006f36 <HAL_RCC_OscConfig+0x10e>
 8006e7c:	4bb6      	ldr	r3, [pc, #728]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e88:	d155      	bne.n	8006f36 <HAL_RCC_OscConfig+0x10e>
 8006e8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e8e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e92:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8006e96:	fa93 f3a3 	rbit	r3, r3
 8006e9a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006e9e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ea2:	fab3 f383 	clz	r3, r3
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	095b      	lsrs	r3, r3, #5
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	f043 0301 	orr.w	r3, r3, #1
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d102      	bne.n	8006ebc <HAL_RCC_OscConfig+0x94>
 8006eb6:	4ba8      	ldr	r3, [pc, #672]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	e015      	b.n	8006ee8 <HAL_RCC_OscConfig+0xc0>
 8006ebc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ec0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8006ec8:	fa93 f3a3 	rbit	r3, r3
 8006ecc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ed4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006ed8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006edc:	fa93 f3a3 	rbit	r3, r3
 8006ee0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8006ee4:	4b9c      	ldr	r3, [pc, #624]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006eec:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8006ef0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8006ef4:	fa92 f2a2 	rbit	r2, r2
 8006ef8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8006efc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8006f00:	fab2 f282 	clz	r2, r2
 8006f04:	b2d2      	uxtb	r2, r2
 8006f06:	f042 0220 	orr.w	r2, r2, #32
 8006f0a:	b2d2      	uxtb	r2, r2
 8006f0c:	f002 021f 	and.w	r2, r2, #31
 8006f10:	2101      	movs	r1, #1
 8006f12:	fa01 f202 	lsl.w	r2, r1, r2
 8006f16:	4013      	ands	r3, r2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 811f 	beq.w	800715c <HAL_RCC_OscConfig+0x334>
 8006f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f040 8116 	bne.w	800715c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	f000 bfaf 	b.w	8007e94 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f46:	d106      	bne.n	8006f56 <HAL_RCC_OscConfig+0x12e>
 8006f48:	4b83      	ldr	r3, [pc, #524]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a82      	ldr	r2, [pc, #520]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	e036      	b.n	8006fc4 <HAL_RCC_OscConfig+0x19c>
 8006f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10c      	bne.n	8006f80 <HAL_RCC_OscConfig+0x158>
 8006f66:	4b7c      	ldr	r3, [pc, #496]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a7b      	ldr	r2, [pc, #492]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	4b79      	ldr	r3, [pc, #484]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a78      	ldr	r2, [pc, #480]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006f78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	e021      	b.n	8006fc4 <HAL_RCC_OscConfig+0x19c>
 8006f80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006f84:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f90:	d10c      	bne.n	8006fac <HAL_RCC_OscConfig+0x184>
 8006f92:	4b71      	ldr	r3, [pc, #452]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a70      	ldr	r2, [pc, #448]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	4b6e      	ldr	r3, [pc, #440]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a6d      	ldr	r2, [pc, #436]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa8:	6013      	str	r3, [r2, #0]
 8006faa:	e00b      	b.n	8006fc4 <HAL_RCC_OscConfig+0x19c>
 8006fac:	4b6a      	ldr	r3, [pc, #424]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a69      	ldr	r2, [pc, #420]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	4b67      	ldr	r3, [pc, #412]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a66      	ldr	r2, [pc, #408]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fc2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006fc4:	4b64      	ldr	r3, [pc, #400]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc8:	f023 020f 	bic.w	r2, r3, #15
 8006fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fd0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	495f      	ldr	r1, [pc, #380]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006fe2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d059      	beq.n	80070a2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fee:	f7fc fc13 	bl	8003818 <HAL_GetTick>
 8006ff2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ff6:	e00a      	b.n	800700e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ff8:	f7fc fc0e 	bl	8003818 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b64      	cmp	r3, #100	; 0x64
 8007006:	d902      	bls.n	800700e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8007008:	2303      	movs	r3, #3
 800700a:	f000 bf43 	b.w	8007e94 <HAL_RCC_OscConfig+0x106c>
 800700e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007012:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007016:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800701a:	fa93 f3a3 	rbit	r3, r3
 800701e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8007022:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007026:	fab3 f383 	clz	r3, r3
 800702a:	b2db      	uxtb	r3, r3
 800702c:	095b      	lsrs	r3, r3, #5
 800702e:	b2db      	uxtb	r3, r3
 8007030:	f043 0301 	orr.w	r3, r3, #1
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b01      	cmp	r3, #1
 8007038:	d102      	bne.n	8007040 <HAL_RCC_OscConfig+0x218>
 800703a:	4b47      	ldr	r3, [pc, #284]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	e015      	b.n	800706c <HAL_RCC_OscConfig+0x244>
 8007040:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007044:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007048:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800704c:	fa93 f3a3 	rbit	r3, r3
 8007050:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007054:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007058:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800705c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007060:	fa93 f3a3 	rbit	r3, r3
 8007064:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007068:	4b3b      	ldr	r3, [pc, #236]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007070:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007074:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007078:	fa92 f2a2 	rbit	r2, r2
 800707c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007080:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8007084:	fab2 f282 	clz	r2, r2
 8007088:	b2d2      	uxtb	r2, r2
 800708a:	f042 0220 	orr.w	r2, r2, #32
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	f002 021f 	and.w	r2, r2, #31
 8007094:	2101      	movs	r1, #1
 8007096:	fa01 f202 	lsl.w	r2, r1, r2
 800709a:	4013      	ands	r3, r2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0ab      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x1d0>
 80070a0:	e05d      	b.n	800715e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a2:	f7fc fbb9 	bl	8003818 <HAL_GetTick>
 80070a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070aa:	e00a      	b.n	80070c2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070ac:	f7fc fbb4 	bl	8003818 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	2b64      	cmp	r3, #100	; 0x64
 80070ba:	d902      	bls.n	80070c2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	f000 bee9 	b.w	8007e94 <HAL_RCC_OscConfig+0x106c>
 80070c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070c6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80070ce:	fa93 f3a3 	rbit	r3, r3
 80070d2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80070d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070da:	fab3 f383 	clz	r3, r3
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	095b      	lsrs	r3, r3, #5
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	f043 0301 	orr.w	r3, r3, #1
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d102      	bne.n	80070f4 <HAL_RCC_OscConfig+0x2cc>
 80070ee:	4b1a      	ldr	r3, [pc, #104]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	e015      	b.n	8007120 <HAL_RCC_OscConfig+0x2f8>
 80070f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070f8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070fc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007100:	fa93 f3a3 	rbit	r3, r3
 8007104:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800710c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007110:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007114:	fa93 f3a3 	rbit	r3, r3
 8007118:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800711c:	4b0e      	ldr	r3, [pc, #56]	; (8007158 <HAL_RCC_OscConfig+0x330>)
 800711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007120:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007124:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007128:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800712c:	fa92 f2a2 	rbit	r2, r2
 8007130:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007134:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007138:	fab2 f282 	clz	r2, r2
 800713c:	b2d2      	uxtb	r2, r2
 800713e:	f042 0220 	orr.w	r2, r2, #32
 8007142:	b2d2      	uxtb	r2, r2
 8007144:	f002 021f 	and.w	r2, r2, #31
 8007148:	2101      	movs	r1, #1
 800714a:	fa01 f202 	lsl.w	r2, r1, r2
 800714e:	4013      	ands	r3, r2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1ab      	bne.n	80070ac <HAL_RCC_OscConfig+0x284>
 8007154:	e003      	b.n	800715e <HAL_RCC_OscConfig+0x336>
 8007156:	bf00      	nop
 8007158:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800715c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800715e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007162:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	f000 817d 	beq.w	800746e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007174:	4ba6      	ldr	r3, [pc, #664]	; (8007410 <HAL_RCC_OscConfig+0x5e8>)
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f003 030c 	and.w	r3, r3, #12
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00b      	beq.n	8007198 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007180:	4ba3      	ldr	r3, [pc, #652]	; (8007410 <HAL_RCC_OscConfig+0x5e8>)
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	f003 030c 	and.w	r3, r3, #12
 8007188:	2b08      	cmp	r3, #8
 800718a:	d172      	bne.n	8007272 <HAL_RCC_OscConfig+0x44a>
 800718c:	4ba0      	ldr	r3, [pc, #640]	; (8007410 <HAL_RCC_OscConfig+0x5e8>)
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d16c      	bne.n	8007272 <HAL_RCC_OscConfig+0x44a>
 8007198:	2302      	movs	r3, #2
 800719a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800719e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80071a2:	fa93 f3a3 	rbit	r3, r3
 80071a6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80071aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071ae:	fab3 f383 	clz	r3, r3
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	095b      	lsrs	r3, r3, #5
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	f043 0301 	orr.w	r3, r3, #1
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d102      	bne.n	80071c8 <HAL_RCC_OscConfig+0x3a0>
 80071c2:	4b93      	ldr	r3, [pc, #588]	; (8007410 <HAL_RCC_OscConfig+0x5e8>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	e013      	b.n	80071f0 <HAL_RCC_OscConfig+0x3c8>
 80071c8:	2302      	movs	r3, #2
 80071ca:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ce:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80071d2:	fa93 f3a3 	rbit	r3, r3
 80071d6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80071da:	2302      	movs	r3, #2
 80071dc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80071e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80071e4:	fa93 f3a3 	rbit	r3, r3
 80071e8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80071ec:	4b88      	ldr	r3, [pc, #544]	; (8007410 <HAL_RCC_OscConfig+0x5e8>)
 80071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f0:	2202      	movs	r2, #2
 80071f2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80071f6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80071fa:	fa92 f2a2 	rbit	r2, r2
 80071fe:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8007202:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007206:	fab2 f282 	clz	r2, r2
 800720a:	b2d2      	uxtb	r2, r2
 800720c:	f042 0220 	orr.w	r2, r2, #32
 8007210:	b2d2      	uxtb	r2, r2
 8007212:	f002 021f 	and.w	r2, r2, #31
 8007216:	2101      	movs	r1, #1
 8007218:	fa01 f202 	lsl.w	r2, r1, r2
 800721c:	4013      	ands	r3, r2
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <HAL_RCC_OscConfig+0x410>
 8007222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007226:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d002      	beq.n	8007238 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	f000 be2e 	b.w	8007e94 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007238:	4b75      	ldr	r3, [pc, #468]	; (8007410 <HAL_RCC_OscConfig+0x5e8>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007240:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007244:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	21f8      	movs	r1, #248	; 0xf8
 800724e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007252:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007256:	fa91 f1a1 	rbit	r1, r1
 800725a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800725e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007262:	fab1 f181 	clz	r1, r1
 8007266:	b2c9      	uxtb	r1, r1
 8007268:	408b      	lsls	r3, r1
 800726a:	4969      	ldr	r1, [pc, #420]	; (8007410 <HAL_RCC_OscConfig+0x5e8>)
 800726c:	4313      	orrs	r3, r2
 800726e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007270:	e0fd      	b.n	800746e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007276:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 8088 	beq.w	8007394 <HAL_RCC_OscConfig+0x56c>
 8007284:	2301      	movs	r3, #1
 8007286:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800728a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800728e:	fa93 f3a3 	rbit	r3, r3
 8007292:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8007296:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800729a:	fab3 f383 	clz	r3, r3
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80072a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	461a      	mov	r2, r3
 80072ac:	2301      	movs	r3, #1
 80072ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072b0:	f7fc fab2 	bl	8003818 <HAL_GetTick>
 80072b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072b8:	e00a      	b.n	80072d0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072ba:	f7fc faad 	bl	8003818 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d902      	bls.n	80072d0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	f000 bde2 	b.w	8007e94 <HAL_RCC_OscConfig+0x106c>
 80072d0:	2302      	movs	r3, #2
 80072d2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072d6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80072da:	fa93 f3a3 	rbit	r3, r3
 80072de:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80072e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072e6:	fab3 f383 	clz	r3, r3
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	095b      	lsrs	r3, r3, #5
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	f043 0301 	orr.w	r3, r3, #1
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d102      	bne.n	8007300 <HAL_RCC_OscConfig+0x4d8>
 80072fa:	4b45      	ldr	r3, [pc, #276]	; (8007410 <HAL_RCC_OscConfig+0x5e8>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	e013      	b.n	8007328 <HAL_RCC_OscConfig+0x500>
 8007300:	2302      	movs	r3, #2
 8007302:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007306:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800730a:	fa93 f3a3 	rbit	r3, r3
 800730e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007312:	2302      	movs	r3, #2
 8007314:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007318:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800731c:	fa93 f3a3 	rbit	r3, r3
 8007320:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007324:	4b3a      	ldr	r3, [pc, #232]	; (8007410 <HAL_RCC_OscConfig+0x5e8>)
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	2202      	movs	r2, #2
 800732a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800732e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007332:	fa92 f2a2 	rbit	r2, r2
 8007336:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800733a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800733e:	fab2 f282 	clz	r2, r2
 8007342:	b2d2      	uxtb	r2, r2
 8007344:	f042 0220 	orr.w	r2, r2, #32
 8007348:	b2d2      	uxtb	r2, r2
 800734a:	f002 021f 	and.w	r2, r2, #31
 800734e:	2101      	movs	r1, #1
 8007350:	fa01 f202 	lsl.w	r2, r1, r2
 8007354:	4013      	ands	r3, r2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0af      	beq.n	80072ba <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800735a:	4b2d      	ldr	r3, [pc, #180]	; (8007410 <HAL_RCC_OscConfig+0x5e8>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007362:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007366:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	21f8      	movs	r1, #248	; 0xf8
 8007370:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007374:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007378:	fa91 f1a1 	rbit	r1, r1
 800737c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007380:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007384:	fab1 f181 	clz	r1, r1
 8007388:	b2c9      	uxtb	r1, r1
 800738a:	408b      	lsls	r3, r1
 800738c:	4920      	ldr	r1, [pc, #128]	; (8007410 <HAL_RCC_OscConfig+0x5e8>)
 800738e:	4313      	orrs	r3, r2
 8007390:	600b      	str	r3, [r1, #0]
 8007392:	e06c      	b.n	800746e <HAL_RCC_OscConfig+0x646>
 8007394:	2301      	movs	r3, #1
 8007396:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800739a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800739e:	fa93 f3a3 	rbit	r3, r3
 80073a2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80073a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073aa:	fab3 f383 	clz	r3, r3
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80073b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	461a      	mov	r2, r3
 80073bc:	2300      	movs	r3, #0
 80073be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073c0:	f7fc fa2a 	bl	8003818 <HAL_GetTick>
 80073c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073c8:	e00a      	b.n	80073e0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80073ca:	f7fc fa25 	bl	8003818 <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d902      	bls.n	80073e0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	f000 bd5a 	b.w	8007e94 <HAL_RCC_OscConfig+0x106c>
 80073e0:	2302      	movs	r3, #2
 80073e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80073ea:	fa93 f3a3 	rbit	r3, r3
 80073ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80073f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80073f6:	fab3 f383 	clz	r3, r3
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	095b      	lsrs	r3, r3, #5
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	f043 0301 	orr.w	r3, r3, #1
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b01      	cmp	r3, #1
 8007408:	d104      	bne.n	8007414 <HAL_RCC_OscConfig+0x5ec>
 800740a:	4b01      	ldr	r3, [pc, #4]	; (8007410 <HAL_RCC_OscConfig+0x5e8>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	e015      	b.n	800743c <HAL_RCC_OscConfig+0x614>
 8007410:	40021000 	.word	0x40021000
 8007414:	2302      	movs	r3, #2
 8007416:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800741a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800741e:	fa93 f3a3 	rbit	r3, r3
 8007422:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007426:	2302      	movs	r3, #2
 8007428:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800742c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007430:	fa93 f3a3 	rbit	r3, r3
 8007434:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007438:	4bc8      	ldr	r3, [pc, #800]	; (800775c <HAL_RCC_OscConfig+0x934>)
 800743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743c:	2202      	movs	r2, #2
 800743e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007442:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007446:	fa92 f2a2 	rbit	r2, r2
 800744a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800744e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007452:	fab2 f282 	clz	r2, r2
 8007456:	b2d2      	uxtb	r2, r2
 8007458:	f042 0220 	orr.w	r2, r2, #32
 800745c:	b2d2      	uxtb	r2, r2
 800745e:	f002 021f 	and.w	r2, r2, #31
 8007462:	2101      	movs	r1, #1
 8007464:	fa01 f202 	lsl.w	r2, r1, r2
 8007468:	4013      	ands	r3, r2
 800746a:	2b00      	cmp	r3, #0
 800746c:	d1ad      	bne.n	80073ca <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800746e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007472:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 0308 	and.w	r3, r3, #8
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 8110 	beq.w	80076a4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007488:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d079      	beq.n	8007588 <HAL_RCC_OscConfig+0x760>
 8007494:	2301      	movs	r3, #1
 8007496:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800749a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800749e:	fa93 f3a3 	rbit	r3, r3
 80074a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80074a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074aa:	fab3 f383 	clz	r3, r3
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	461a      	mov	r2, r3
 80074b2:	4bab      	ldr	r3, [pc, #684]	; (8007760 <HAL_RCC_OscConfig+0x938>)
 80074b4:	4413      	add	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	461a      	mov	r2, r3
 80074ba:	2301      	movs	r3, #1
 80074bc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074be:	f7fc f9ab 	bl	8003818 <HAL_GetTick>
 80074c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074c6:	e00a      	b.n	80074de <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80074c8:	f7fc f9a6 	bl	8003818 <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d902      	bls.n	80074de <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	f000 bcdb 	b.w	8007e94 <HAL_RCC_OscConfig+0x106c>
 80074de:	2302      	movs	r3, #2
 80074e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074e8:	fa93 f3a3 	rbit	r3, r3
 80074ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80074f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80074f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80074f8:	2202      	movs	r2, #2
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007500:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	fa93 f2a3 	rbit	r2, r3
 800750a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800750e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800751c:	2202      	movs	r2, #2
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	fa93 f2a3 	rbit	r2, r3
 800752e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007532:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007536:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007538:	4b88      	ldr	r3, [pc, #544]	; (800775c <HAL_RCC_OscConfig+0x934>)
 800753a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800753c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007540:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007544:	2102      	movs	r1, #2
 8007546:	6019      	str	r1, [r3, #0]
 8007548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800754c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	fa93 f1a3 	rbit	r1, r3
 8007556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800755a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800755e:	6019      	str	r1, [r3, #0]
  return result;
 8007560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007564:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	fab3 f383 	clz	r3, r3
 800756e:	b2db      	uxtb	r3, r3
 8007570:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007574:	b2db      	uxtb	r3, r3
 8007576:	f003 031f 	and.w	r3, r3, #31
 800757a:	2101      	movs	r1, #1
 800757c:	fa01 f303 	lsl.w	r3, r1, r3
 8007580:	4013      	ands	r3, r2
 8007582:	2b00      	cmp	r3, #0
 8007584:	d0a0      	beq.n	80074c8 <HAL_RCC_OscConfig+0x6a0>
 8007586:	e08d      	b.n	80076a4 <HAL_RCC_OscConfig+0x87c>
 8007588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800758c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007590:	2201      	movs	r2, #1
 8007592:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007598:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	fa93 f2a3 	rbit	r2, r3
 80075a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80075aa:	601a      	str	r2, [r3, #0]
  return result;
 80075ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80075b4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075b6:	fab3 f383 	clz	r3, r3
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	461a      	mov	r2, r3
 80075be:	4b68      	ldr	r3, [pc, #416]	; (8007760 <HAL_RCC_OscConfig+0x938>)
 80075c0:	4413      	add	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	461a      	mov	r2, r3
 80075c6:	2300      	movs	r3, #0
 80075c8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075ca:	f7fc f925 	bl	8003818 <HAL_GetTick>
 80075ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075d2:	e00a      	b.n	80075ea <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075d4:	f7fc f920 	bl	8003818 <HAL_GetTick>
 80075d8:	4602      	mov	r2, r0
 80075da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d902      	bls.n	80075ea <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	f000 bc55 	b.w	8007e94 <HAL_RCC_OscConfig+0x106c>
 80075ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075ee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80075f2:	2202      	movs	r2, #2
 80075f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80075fa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	fa93 f2a3 	rbit	r2, r3
 8007604:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007608:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007612:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007616:	2202      	movs	r2, #2
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800761e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	fa93 f2a3 	rbit	r2, r3
 8007628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800762c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007630:	601a      	str	r2, [r3, #0]
 8007632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800763a:	2202      	movs	r2, #2
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	fa93 f2a3 	rbit	r2, r3
 800764c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007650:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007654:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007656:	4b41      	ldr	r3, [pc, #260]	; (800775c <HAL_RCC_OscConfig+0x934>)
 8007658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800765a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800765e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007662:	2102      	movs	r1, #2
 8007664:	6019      	str	r1, [r3, #0]
 8007666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800766a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	fa93 f1a3 	rbit	r1, r3
 8007674:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007678:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800767c:	6019      	str	r1, [r3, #0]
  return result;
 800767e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007682:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	fab3 f383 	clz	r3, r3
 800768c:	b2db      	uxtb	r3, r3
 800768e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007692:	b2db      	uxtb	r3, r3
 8007694:	f003 031f 	and.w	r3, r3, #31
 8007698:	2101      	movs	r1, #1
 800769a:	fa01 f303 	lsl.w	r3, r1, r3
 800769e:	4013      	ands	r3, r2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d197      	bne.n	80075d4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0304 	and.w	r3, r3, #4
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 81a1 	beq.w	80079fc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076ba:	2300      	movs	r3, #0
 80076bc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076c0:	4b26      	ldr	r3, [pc, #152]	; (800775c <HAL_RCC_OscConfig+0x934>)
 80076c2:	69db      	ldr	r3, [r3, #28]
 80076c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d116      	bne.n	80076fa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076cc:	4b23      	ldr	r3, [pc, #140]	; (800775c <HAL_RCC_OscConfig+0x934>)
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	4a22      	ldr	r2, [pc, #136]	; (800775c <HAL_RCC_OscConfig+0x934>)
 80076d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076d6:	61d3      	str	r3, [r2, #28]
 80076d8:	4b20      	ldr	r3, [pc, #128]	; (800775c <HAL_RCC_OscConfig+0x934>)
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80076e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076e4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076ee:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80076f2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076fa:	4b1a      	ldr	r3, [pc, #104]	; (8007764 <HAL_RCC_OscConfig+0x93c>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007702:	2b00      	cmp	r3, #0
 8007704:	d11a      	bne.n	800773c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007706:	4b17      	ldr	r3, [pc, #92]	; (8007764 <HAL_RCC_OscConfig+0x93c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a16      	ldr	r2, [pc, #88]	; (8007764 <HAL_RCC_OscConfig+0x93c>)
 800770c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007710:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007712:	f7fc f881 	bl	8003818 <HAL_GetTick>
 8007716:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800771a:	e009      	b.n	8007730 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800771c:	f7fc f87c 	bl	8003818 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	2b64      	cmp	r3, #100	; 0x64
 800772a:	d901      	bls.n	8007730 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e3b1      	b.n	8007e94 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007730:	4b0c      	ldr	r3, [pc, #48]	; (8007764 <HAL_RCC_OscConfig+0x93c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0ef      	beq.n	800771c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800773c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007740:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d10d      	bne.n	8007768 <HAL_RCC_OscConfig+0x940>
 800774c:	4b03      	ldr	r3, [pc, #12]	; (800775c <HAL_RCC_OscConfig+0x934>)
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	4a02      	ldr	r2, [pc, #8]	; (800775c <HAL_RCC_OscConfig+0x934>)
 8007752:	f043 0301 	orr.w	r3, r3, #1
 8007756:	6213      	str	r3, [r2, #32]
 8007758:	e03c      	b.n	80077d4 <HAL_RCC_OscConfig+0x9ac>
 800775a:	bf00      	nop
 800775c:	40021000 	.word	0x40021000
 8007760:	10908120 	.word	0x10908120
 8007764:	40007000 	.word	0x40007000
 8007768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800776c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10c      	bne.n	8007792 <HAL_RCC_OscConfig+0x96a>
 8007778:	4bc1      	ldr	r3, [pc, #772]	; (8007a80 <HAL_RCC_OscConfig+0xc58>)
 800777a:	6a1b      	ldr	r3, [r3, #32]
 800777c:	4ac0      	ldr	r2, [pc, #768]	; (8007a80 <HAL_RCC_OscConfig+0xc58>)
 800777e:	f023 0301 	bic.w	r3, r3, #1
 8007782:	6213      	str	r3, [r2, #32]
 8007784:	4bbe      	ldr	r3, [pc, #760]	; (8007a80 <HAL_RCC_OscConfig+0xc58>)
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	4abd      	ldr	r2, [pc, #756]	; (8007a80 <HAL_RCC_OscConfig+0xc58>)
 800778a:	f023 0304 	bic.w	r3, r3, #4
 800778e:	6213      	str	r3, [r2, #32]
 8007790:	e020      	b.n	80077d4 <HAL_RCC_OscConfig+0x9ac>
 8007792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007796:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	2b05      	cmp	r3, #5
 80077a0:	d10c      	bne.n	80077bc <HAL_RCC_OscConfig+0x994>
 80077a2:	4bb7      	ldr	r3, [pc, #732]	; (8007a80 <HAL_RCC_OscConfig+0xc58>)
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	4ab6      	ldr	r2, [pc, #728]	; (8007a80 <HAL_RCC_OscConfig+0xc58>)
 80077a8:	f043 0304 	orr.w	r3, r3, #4
 80077ac:	6213      	str	r3, [r2, #32]
 80077ae:	4bb4      	ldr	r3, [pc, #720]	; (8007a80 <HAL_RCC_OscConfig+0xc58>)
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	4ab3      	ldr	r2, [pc, #716]	; (8007a80 <HAL_RCC_OscConfig+0xc58>)
 80077b4:	f043 0301 	orr.w	r3, r3, #1
 80077b8:	6213      	str	r3, [r2, #32]
 80077ba:	e00b      	b.n	80077d4 <HAL_RCC_OscConfig+0x9ac>
 80077bc:	4bb0      	ldr	r3, [pc, #704]	; (8007a80 <HAL_RCC_OscConfig+0xc58>)
 80077be:	6a1b      	ldr	r3, [r3, #32]
 80077c0:	4aaf      	ldr	r2, [pc, #700]	; (8007a80 <HAL_RCC_OscConfig+0xc58>)
 80077c2:	f023 0301 	bic.w	r3, r3, #1
 80077c6:	6213      	str	r3, [r2, #32]
 80077c8:	4bad      	ldr	r3, [pc, #692]	; (8007a80 <HAL_RCC_OscConfig+0xc58>)
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	4aac      	ldr	r2, [pc, #688]	; (8007a80 <HAL_RCC_OscConfig+0xc58>)
 80077ce:	f023 0304 	bic.w	r3, r3, #4
 80077d2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80077d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 8081 	beq.w	80078e8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077e6:	f7fc f817 	bl	8003818 <HAL_GetTick>
 80077ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077ee:	e00b      	b.n	8007808 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077f0:	f7fc f812 	bl	8003818 <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007800:	4293      	cmp	r3, r2
 8007802:	d901      	bls.n	8007808 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	e345      	b.n	8007e94 <HAL_RCC_OscConfig+0x106c>
 8007808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800780c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007810:	2202      	movs	r2, #2
 8007812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007818:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	fa93 f2a3 	rbit	r2, r3
 8007822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007826:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800782a:	601a      	str	r2, [r3, #0]
 800782c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007830:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007834:	2202      	movs	r2, #2
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800783c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	fa93 f2a3 	rbit	r2, r3
 8007846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800784a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800784e:	601a      	str	r2, [r3, #0]
  return result;
 8007850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007854:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007858:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800785a:	fab3 f383 	clz	r3, r3
 800785e:	b2db      	uxtb	r3, r3
 8007860:	095b      	lsrs	r3, r3, #5
 8007862:	b2db      	uxtb	r3, r3
 8007864:	f043 0302 	orr.w	r3, r3, #2
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b02      	cmp	r3, #2
 800786c:	d102      	bne.n	8007874 <HAL_RCC_OscConfig+0xa4c>
 800786e:	4b84      	ldr	r3, [pc, #528]	; (8007a80 <HAL_RCC_OscConfig+0xc58>)
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	e013      	b.n	800789c <HAL_RCC_OscConfig+0xa74>
 8007874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007878:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800787c:	2202      	movs	r2, #2
 800787e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007884:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	fa93 f2a3 	rbit	r2, r3
 800788e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007892:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	4b79      	ldr	r3, [pc, #484]	; (8007a80 <HAL_RCC_OscConfig+0xc58>)
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078a0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80078a4:	2102      	movs	r1, #2
 80078a6:	6011      	str	r1, [r2, #0]
 80078a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078ac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80078b0:	6812      	ldr	r2, [r2, #0]
 80078b2:	fa92 f1a2 	rbit	r1, r2
 80078b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078ba:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80078be:	6011      	str	r1, [r2, #0]
  return result;
 80078c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80078c4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80078c8:	6812      	ldr	r2, [r2, #0]
 80078ca:	fab2 f282 	clz	r2, r2
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078d4:	b2d2      	uxtb	r2, r2
 80078d6:	f002 021f 	and.w	r2, r2, #31
 80078da:	2101      	movs	r1, #1
 80078dc:	fa01 f202 	lsl.w	r2, r1, r2
 80078e0:	4013      	ands	r3, r2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d084      	beq.n	80077f0 <HAL_RCC_OscConfig+0x9c8>
 80078e6:	e07f      	b.n	80079e8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078e8:	f7fb ff96 	bl	8003818 <HAL_GetTick>
 80078ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078f0:	e00b      	b.n	800790a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078f2:	f7fb ff91 	bl	8003818 <HAL_GetTick>
 80078f6:	4602      	mov	r2, r0
 80078f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007902:	4293      	cmp	r3, r2
 8007904:	d901      	bls.n	800790a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e2c4      	b.n	8007e94 <HAL_RCC_OscConfig+0x106c>
 800790a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800790e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007912:	2202      	movs	r2, #2
 8007914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007916:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800791a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	fa93 f2a3 	rbit	r2, r3
 8007924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007928:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800792c:	601a      	str	r2, [r3, #0]
 800792e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007932:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007936:	2202      	movs	r2, #2
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800793e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	fa93 f2a3 	rbit	r2, r3
 8007948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800794c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007950:	601a      	str	r2, [r3, #0]
  return result;
 8007952:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007956:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800795a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800795c:	fab3 f383 	clz	r3, r3
 8007960:	b2db      	uxtb	r3, r3
 8007962:	095b      	lsrs	r3, r3, #5
 8007964:	b2db      	uxtb	r3, r3
 8007966:	f043 0302 	orr.w	r3, r3, #2
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b02      	cmp	r3, #2
 800796e:	d102      	bne.n	8007976 <HAL_RCC_OscConfig+0xb4e>
 8007970:	4b43      	ldr	r3, [pc, #268]	; (8007a80 <HAL_RCC_OscConfig+0xc58>)
 8007972:	6a1b      	ldr	r3, [r3, #32]
 8007974:	e013      	b.n	800799e <HAL_RCC_OscConfig+0xb76>
 8007976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800797a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800797e:	2202      	movs	r2, #2
 8007980:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007982:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007986:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	fa93 f2a3 	rbit	r2, r3
 8007990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007994:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	4b39      	ldr	r3, [pc, #228]	; (8007a80 <HAL_RCC_OscConfig+0xc58>)
 800799c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80079a2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80079a6:	2102      	movs	r1, #2
 80079a8:	6011      	str	r1, [r2, #0]
 80079aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80079ae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80079b2:	6812      	ldr	r2, [r2, #0]
 80079b4:	fa92 f1a2 	rbit	r1, r2
 80079b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80079bc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80079c0:	6011      	str	r1, [r2, #0]
  return result;
 80079c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80079c6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80079ca:	6812      	ldr	r2, [r2, #0]
 80079cc:	fab2 f282 	clz	r2, r2
 80079d0:	b2d2      	uxtb	r2, r2
 80079d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079d6:	b2d2      	uxtb	r2, r2
 80079d8:	f002 021f 	and.w	r2, r2, #31
 80079dc:	2101      	movs	r1, #1
 80079de:	fa01 f202 	lsl.w	r2, r1, r2
 80079e2:	4013      	ands	r3, r2
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d184      	bne.n	80078f2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80079e8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d105      	bne.n	80079fc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079f0:	4b23      	ldr	r3, [pc, #140]	; (8007a80 <HAL_RCC_OscConfig+0xc58>)
 80079f2:	69db      	ldr	r3, [r3, #28]
 80079f4:	4a22      	ldr	r2, [pc, #136]	; (8007a80 <HAL_RCC_OscConfig+0xc58>)
 80079f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a00:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	69db      	ldr	r3, [r3, #28]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 8242 	beq.w	8007e92 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a0e:	4b1c      	ldr	r3, [pc, #112]	; (8007a80 <HAL_RCC_OscConfig+0xc58>)
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f003 030c 	and.w	r3, r3, #12
 8007a16:	2b08      	cmp	r3, #8
 8007a18:	f000 8213 	beq.w	8007e42 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	69db      	ldr	r3, [r3, #28]
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	f040 8162 	bne.w	8007cf2 <HAL_RCC_OscConfig+0xeca>
 8007a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a32:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007a36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a40:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	fa93 f2a3 	rbit	r2, r3
 8007a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a4e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007a52:	601a      	str	r2, [r3, #0]
  return result;
 8007a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a58:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007a5c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a5e:	fab3 f383 	clz	r3, r3
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007a68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	461a      	mov	r2, r3
 8007a70:	2300      	movs	r3, #0
 8007a72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a74:	f7fb fed0 	bl	8003818 <HAL_GetTick>
 8007a78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a7c:	e00c      	b.n	8007a98 <HAL_RCC_OscConfig+0xc70>
 8007a7e:	bf00      	nop
 8007a80:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a84:	f7fb fec8 	bl	8003818 <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d901      	bls.n	8007a98 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e1fd      	b.n	8007e94 <HAL_RCC_OscConfig+0x106c>
 8007a98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a9c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007aa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007aa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007aaa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	fa93 f2a3 	rbit	r2, r3
 8007ab4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ab8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007abc:	601a      	str	r2, [r3, #0]
  return result;
 8007abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ac2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007ac6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ac8:	fab3 f383 	clz	r3, r3
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	095b      	lsrs	r3, r3, #5
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	f043 0301 	orr.w	r3, r3, #1
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d102      	bne.n	8007ae2 <HAL_RCC_OscConfig+0xcba>
 8007adc:	4bb0      	ldr	r3, [pc, #704]	; (8007da0 <HAL_RCC_OscConfig+0xf78>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	e027      	b.n	8007b32 <HAL_RCC_OscConfig+0xd0a>
 8007ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ae6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007aea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007af4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	fa93 f2a3 	rbit	r2, r3
 8007afe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b02:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007b06:	601a      	str	r2, [r3, #0]
 8007b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b0c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007b10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b1a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	fa93 f2a3 	rbit	r2, r3
 8007b24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b28:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	4b9c      	ldr	r3, [pc, #624]	; (8007da0 <HAL_RCC_OscConfig+0xf78>)
 8007b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007b36:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007b3a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007b3e:	6011      	str	r1, [r2, #0]
 8007b40:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007b44:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007b48:	6812      	ldr	r2, [r2, #0]
 8007b4a:	fa92 f1a2 	rbit	r1, r2
 8007b4e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007b52:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007b56:	6011      	str	r1, [r2, #0]
  return result;
 8007b58:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007b5c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007b60:	6812      	ldr	r2, [r2, #0]
 8007b62:	fab2 f282 	clz	r2, r2
 8007b66:	b2d2      	uxtb	r2, r2
 8007b68:	f042 0220 	orr.w	r2, r2, #32
 8007b6c:	b2d2      	uxtb	r2, r2
 8007b6e:	f002 021f 	and.w	r2, r2, #31
 8007b72:	2101      	movs	r1, #1
 8007b74:	fa01 f202 	lsl.w	r2, r1, r2
 8007b78:	4013      	ands	r3, r2
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d182      	bne.n	8007a84 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b7e:	4b88      	ldr	r3, [pc, #544]	; (8007da0 <HAL_RCC_OscConfig+0xf78>)
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	430b      	orrs	r3, r1
 8007ba0:	497f      	ldr	r1, [pc, #508]	; (8007da0 <HAL_RCC_OscConfig+0xf78>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	604b      	str	r3, [r1, #4]
 8007ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007baa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007bae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007bb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bb8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	fa93 f2a3 	rbit	r2, r3
 8007bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bc6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007bca:	601a      	str	r2, [r3, #0]
  return result;
 8007bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007bd0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007bd4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bd6:	fab3 f383 	clz	r3, r3
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007be0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	461a      	mov	r2, r3
 8007be8:	2301      	movs	r3, #1
 8007bea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bec:	f7fb fe14 	bl	8003818 <HAL_GetTick>
 8007bf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007bf4:	e009      	b.n	8007c0a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bf6:	f7fb fe0f 	bl	8003818 <HAL_GetTick>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d901      	bls.n	8007c0a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e144      	b.n	8007e94 <HAL_RCC_OscConfig+0x106c>
 8007c0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c0e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007c12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007c16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c1c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	fa93 f2a3 	rbit	r2, r3
 8007c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c2a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007c2e:	601a      	str	r2, [r3, #0]
  return result;
 8007c30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c34:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007c38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007c3a:	fab3 f383 	clz	r3, r3
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	095b      	lsrs	r3, r3, #5
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	f043 0301 	orr.w	r3, r3, #1
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d102      	bne.n	8007c54 <HAL_RCC_OscConfig+0xe2c>
 8007c4e:	4b54      	ldr	r3, [pc, #336]	; (8007da0 <HAL_RCC_OscConfig+0xf78>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	e027      	b.n	8007ca4 <HAL_RCC_OscConfig+0xe7c>
 8007c54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c58:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007c5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007c60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c66:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	fa93 f2a3 	rbit	r2, r3
 8007c70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c74:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c7e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007c82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007c86:	601a      	str	r2, [r3, #0]
 8007c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c8c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	fa93 f2a3 	rbit	r2, r3
 8007c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c9a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007c9e:	601a      	str	r2, [r3, #0]
 8007ca0:	4b3f      	ldr	r3, [pc, #252]	; (8007da0 <HAL_RCC_OscConfig+0xf78>)
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ca8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007cac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007cb0:	6011      	str	r1, [r2, #0]
 8007cb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007cb6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007cba:	6812      	ldr	r2, [r2, #0]
 8007cbc:	fa92 f1a2 	rbit	r1, r2
 8007cc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007cc4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007cc8:	6011      	str	r1, [r2, #0]
  return result;
 8007cca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007cce:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007cd2:	6812      	ldr	r2, [r2, #0]
 8007cd4:	fab2 f282 	clz	r2, r2
 8007cd8:	b2d2      	uxtb	r2, r2
 8007cda:	f042 0220 	orr.w	r2, r2, #32
 8007cde:	b2d2      	uxtb	r2, r2
 8007ce0:	f002 021f 	and.w	r2, r2, #31
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8007cea:	4013      	ands	r3, r2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d082      	beq.n	8007bf6 <HAL_RCC_OscConfig+0xdce>
 8007cf0:	e0cf      	b.n	8007e92 <HAL_RCC_OscConfig+0x106a>
 8007cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cf6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007cfa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007cfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d04:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	fa93 f2a3 	rbit	r2, r3
 8007d0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d12:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007d16:	601a      	str	r2, [r3, #0]
  return result;
 8007d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d1c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007d20:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d22:	fab3 f383 	clz	r3, r3
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007d2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	461a      	mov	r2, r3
 8007d34:	2300      	movs	r3, #0
 8007d36:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d38:	f7fb fd6e 	bl	8003818 <HAL_GetTick>
 8007d3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d40:	e009      	b.n	8007d56 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d42:	f7fb fd69 	bl	8003818 <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d901      	bls.n	8007d56 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e09e      	b.n	8007e94 <HAL_RCC_OscConfig+0x106c>
 8007d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d5a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007d5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007d62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d68:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	fa93 f2a3 	rbit	r2, r3
 8007d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d76:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007d7a:	601a      	str	r2, [r3, #0]
  return result;
 8007d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d80:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007d84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d86:	fab3 f383 	clz	r3, r3
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	095b      	lsrs	r3, r3, #5
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	f043 0301 	orr.w	r3, r3, #1
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d104      	bne.n	8007da4 <HAL_RCC_OscConfig+0xf7c>
 8007d9a:	4b01      	ldr	r3, [pc, #4]	; (8007da0 <HAL_RCC_OscConfig+0xf78>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	e029      	b.n	8007df4 <HAL_RCC_OscConfig+0xfcc>
 8007da0:	40021000 	.word	0x40021000
 8007da4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007da8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007dac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007db0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007db2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007db6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	fa93 f2a3 	rbit	r2, r3
 8007dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dc4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dce:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007dd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007dd6:	601a      	str	r2, [r3, #0]
 8007dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ddc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	fa93 f2a3 	rbit	r2, r3
 8007de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007dee:	601a      	str	r2, [r3, #0]
 8007df0:	4b2b      	ldr	r3, [pc, #172]	; (8007ea0 <HAL_RCC_OscConfig+0x1078>)
 8007df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007df8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007dfc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007e00:	6011      	str	r1, [r2, #0]
 8007e02:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e06:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8007e0a:	6812      	ldr	r2, [r2, #0]
 8007e0c:	fa92 f1a2 	rbit	r1, r2
 8007e10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e14:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007e18:	6011      	str	r1, [r2, #0]
  return result;
 8007e1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007e1e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8007e22:	6812      	ldr	r2, [r2, #0]
 8007e24:	fab2 f282 	clz	r2, r2
 8007e28:	b2d2      	uxtb	r2, r2
 8007e2a:	f042 0220 	orr.w	r2, r2, #32
 8007e2e:	b2d2      	uxtb	r2, r2
 8007e30:	f002 021f 	and.w	r2, r2, #31
 8007e34:	2101      	movs	r1, #1
 8007e36:	fa01 f202 	lsl.w	r2, r1, r2
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d180      	bne.n	8007d42 <HAL_RCC_OscConfig+0xf1a>
 8007e40:	e027      	b.n	8007e92 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d101      	bne.n	8007e56 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e01e      	b.n	8007e94 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007e56:	4b12      	ldr	r3, [pc, #72]	; (8007ea0 <HAL_RCC_OscConfig+0x1078>)
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007e5e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007e62:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6a1b      	ldr	r3, [r3, #32]
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d10b      	bne.n	8007e8e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8007e76:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8007e7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d001      	beq.n	8007e92 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e000      	b.n	8007e94 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	40021000 	.word	0x40021000

08007ea4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b09e      	sub	sp, #120	; 0x78
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e162      	b.n	8008182 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ebc:	4b90      	ldr	r3, [pc, #576]	; (8008100 <HAL_RCC_ClockConfig+0x25c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 0307 	and.w	r3, r3, #7
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d910      	bls.n	8007eec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eca:	4b8d      	ldr	r3, [pc, #564]	; (8008100 <HAL_RCC_ClockConfig+0x25c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f023 0207 	bic.w	r2, r3, #7
 8007ed2:	498b      	ldr	r1, [pc, #556]	; (8008100 <HAL_RCC_ClockConfig+0x25c>)
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eda:	4b89      	ldr	r3, [pc, #548]	; (8008100 <HAL_RCC_ClockConfig+0x25c>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 0307 	and.w	r3, r3, #7
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d001      	beq.n	8007eec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e14a      	b.n	8008182 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 0302 	and.w	r3, r3, #2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d008      	beq.n	8007f0a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ef8:	4b82      	ldr	r3, [pc, #520]	; (8008104 <HAL_RCC_ClockConfig+0x260>)
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	497f      	ldr	r1, [pc, #508]	; (8008104 <HAL_RCC_ClockConfig+0x260>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 80dc 	beq.w	80080d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d13c      	bne.n	8007f9a <HAL_RCC_ClockConfig+0xf6>
 8007f20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f24:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f28:	fa93 f3a3 	rbit	r3, r3
 8007f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f30:	fab3 f383 	clz	r3, r3
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	095b      	lsrs	r3, r3, #5
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	f043 0301 	orr.w	r3, r3, #1
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d102      	bne.n	8007f4a <HAL_RCC_ClockConfig+0xa6>
 8007f44:	4b6f      	ldr	r3, [pc, #444]	; (8008104 <HAL_RCC_ClockConfig+0x260>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	e00f      	b.n	8007f6a <HAL_RCC_ClockConfig+0xc6>
 8007f4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f4e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f52:	fa93 f3a3 	rbit	r3, r3
 8007f56:	667b      	str	r3, [r7, #100]	; 0x64
 8007f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007f5c:	663b      	str	r3, [r7, #96]	; 0x60
 8007f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f60:	fa93 f3a3 	rbit	r3, r3
 8007f64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f66:	4b67      	ldr	r3, [pc, #412]	; (8008104 <HAL_RCC_ClockConfig+0x260>)
 8007f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007f6e:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f72:	fa92 f2a2 	rbit	r2, r2
 8007f76:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007f78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f7a:	fab2 f282 	clz	r2, r2
 8007f7e:	b2d2      	uxtb	r2, r2
 8007f80:	f042 0220 	orr.w	r2, r2, #32
 8007f84:	b2d2      	uxtb	r2, r2
 8007f86:	f002 021f 	and.w	r2, r2, #31
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8007f90:	4013      	ands	r3, r2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d17b      	bne.n	800808e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e0f3      	b.n	8008182 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d13c      	bne.n	800801c <HAL_RCC_ClockConfig+0x178>
 8007fa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fa6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007faa:	fa93 f3a3 	rbit	r3, r3
 8007fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8007fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fb2:	fab3 f383 	clz	r3, r3
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	095b      	lsrs	r3, r3, #5
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	f043 0301 	orr.w	r3, r3, #1
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d102      	bne.n	8007fcc <HAL_RCC_ClockConfig+0x128>
 8007fc6:	4b4f      	ldr	r3, [pc, #316]	; (8008104 <HAL_RCC_ClockConfig+0x260>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	e00f      	b.n	8007fec <HAL_RCC_ClockConfig+0x148>
 8007fcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fd0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fd4:	fa93 f3a3 	rbit	r3, r3
 8007fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8007fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fde:	643b      	str	r3, [r7, #64]	; 0x40
 8007fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fe2:	fa93 f3a3 	rbit	r3, r3
 8007fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fe8:	4b46      	ldr	r3, [pc, #280]	; (8008104 <HAL_RCC_ClockConfig+0x260>)
 8007fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ff0:	63ba      	str	r2, [r7, #56]	; 0x38
 8007ff2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ff4:	fa92 f2a2 	rbit	r2, r2
 8007ff8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8007ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ffc:	fab2 f282 	clz	r2, r2
 8008000:	b2d2      	uxtb	r2, r2
 8008002:	f042 0220 	orr.w	r2, r2, #32
 8008006:	b2d2      	uxtb	r2, r2
 8008008:	f002 021f 	and.w	r2, r2, #31
 800800c:	2101      	movs	r1, #1
 800800e:	fa01 f202 	lsl.w	r2, r1, r2
 8008012:	4013      	ands	r3, r2
 8008014:	2b00      	cmp	r3, #0
 8008016:	d13a      	bne.n	800808e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e0b2      	b.n	8008182 <HAL_RCC_ClockConfig+0x2de>
 800801c:	2302      	movs	r3, #2
 800801e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008022:	fa93 f3a3 	rbit	r3, r3
 8008026:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800802a:	fab3 f383 	clz	r3, r3
 800802e:	b2db      	uxtb	r3, r3
 8008030:	095b      	lsrs	r3, r3, #5
 8008032:	b2db      	uxtb	r3, r3
 8008034:	f043 0301 	orr.w	r3, r3, #1
 8008038:	b2db      	uxtb	r3, r3
 800803a:	2b01      	cmp	r3, #1
 800803c:	d102      	bne.n	8008044 <HAL_RCC_ClockConfig+0x1a0>
 800803e:	4b31      	ldr	r3, [pc, #196]	; (8008104 <HAL_RCC_ClockConfig+0x260>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	e00d      	b.n	8008060 <HAL_RCC_ClockConfig+0x1bc>
 8008044:	2302      	movs	r3, #2
 8008046:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804a:	fa93 f3a3 	rbit	r3, r3
 800804e:	627b      	str	r3, [r7, #36]	; 0x24
 8008050:	2302      	movs	r3, #2
 8008052:	623b      	str	r3, [r7, #32]
 8008054:	6a3b      	ldr	r3, [r7, #32]
 8008056:	fa93 f3a3 	rbit	r3, r3
 800805a:	61fb      	str	r3, [r7, #28]
 800805c:	4b29      	ldr	r3, [pc, #164]	; (8008104 <HAL_RCC_ClockConfig+0x260>)
 800805e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008060:	2202      	movs	r2, #2
 8008062:	61ba      	str	r2, [r7, #24]
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	fa92 f2a2 	rbit	r2, r2
 800806a:	617a      	str	r2, [r7, #20]
  return result;
 800806c:	697a      	ldr	r2, [r7, #20]
 800806e:	fab2 f282 	clz	r2, r2
 8008072:	b2d2      	uxtb	r2, r2
 8008074:	f042 0220 	orr.w	r2, r2, #32
 8008078:	b2d2      	uxtb	r2, r2
 800807a:	f002 021f 	and.w	r2, r2, #31
 800807e:	2101      	movs	r1, #1
 8008080:	fa01 f202 	lsl.w	r2, r1, r2
 8008084:	4013      	ands	r3, r2
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e079      	b.n	8008182 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800808e:	4b1d      	ldr	r3, [pc, #116]	; (8008104 <HAL_RCC_ClockConfig+0x260>)
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f023 0203 	bic.w	r2, r3, #3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	491a      	ldr	r1, [pc, #104]	; (8008104 <HAL_RCC_ClockConfig+0x260>)
 800809c:	4313      	orrs	r3, r2
 800809e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080a0:	f7fb fbba 	bl	8003818 <HAL_GetTick>
 80080a4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080a6:	e00a      	b.n	80080be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080a8:	f7fb fbb6 	bl	8003818 <HAL_GetTick>
 80080ac:	4602      	mov	r2, r0
 80080ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d901      	bls.n	80080be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e061      	b.n	8008182 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080be:	4b11      	ldr	r3, [pc, #68]	; (8008104 <HAL_RCC_ClockConfig+0x260>)
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f003 020c 	and.w	r2, r3, #12
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d1eb      	bne.n	80080a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080d0:	4b0b      	ldr	r3, [pc, #44]	; (8008100 <HAL_RCC_ClockConfig+0x25c>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0307 	and.w	r3, r3, #7
 80080d8:	683a      	ldr	r2, [r7, #0]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d214      	bcs.n	8008108 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080de:	4b08      	ldr	r3, [pc, #32]	; (8008100 <HAL_RCC_ClockConfig+0x25c>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f023 0207 	bic.w	r2, r3, #7
 80080e6:	4906      	ldr	r1, [pc, #24]	; (8008100 <HAL_RCC_ClockConfig+0x25c>)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080ee:	4b04      	ldr	r3, [pc, #16]	; (8008100 <HAL_RCC_ClockConfig+0x25c>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0307 	and.w	r3, r3, #7
 80080f6:	683a      	ldr	r2, [r7, #0]
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d005      	beq.n	8008108 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e040      	b.n	8008182 <HAL_RCC_ClockConfig+0x2de>
 8008100:	40022000 	.word	0x40022000
 8008104:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0304 	and.w	r3, r3, #4
 8008110:	2b00      	cmp	r3, #0
 8008112:	d008      	beq.n	8008126 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008114:	4b1d      	ldr	r3, [pc, #116]	; (800818c <HAL_RCC_ClockConfig+0x2e8>)
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	491a      	ldr	r1, [pc, #104]	; (800818c <HAL_RCC_ClockConfig+0x2e8>)
 8008122:	4313      	orrs	r3, r2
 8008124:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0308 	and.w	r3, r3, #8
 800812e:	2b00      	cmp	r3, #0
 8008130:	d009      	beq.n	8008146 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008132:	4b16      	ldr	r3, [pc, #88]	; (800818c <HAL_RCC_ClockConfig+0x2e8>)
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	00db      	lsls	r3, r3, #3
 8008140:	4912      	ldr	r1, [pc, #72]	; (800818c <HAL_RCC_ClockConfig+0x2e8>)
 8008142:	4313      	orrs	r3, r2
 8008144:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008146:	f000 f829 	bl	800819c <HAL_RCC_GetSysClockFreq>
 800814a:	4601      	mov	r1, r0
 800814c:	4b0f      	ldr	r3, [pc, #60]	; (800818c <HAL_RCC_ClockConfig+0x2e8>)
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008154:	22f0      	movs	r2, #240	; 0xf0
 8008156:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	fa92 f2a2 	rbit	r2, r2
 800815e:	60fa      	str	r2, [r7, #12]
  return result;
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	fab2 f282 	clz	r2, r2
 8008166:	b2d2      	uxtb	r2, r2
 8008168:	40d3      	lsrs	r3, r2
 800816a:	4a09      	ldr	r2, [pc, #36]	; (8008190 <HAL_RCC_ClockConfig+0x2ec>)
 800816c:	5cd3      	ldrb	r3, [r2, r3]
 800816e:	fa21 f303 	lsr.w	r3, r1, r3
 8008172:	4a08      	ldr	r2, [pc, #32]	; (8008194 <HAL_RCC_ClockConfig+0x2f0>)
 8008174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008176:	4b08      	ldr	r3, [pc, #32]	; (8008198 <HAL_RCC_ClockConfig+0x2f4>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4618      	mov	r0, r3
 800817c:	f7fb fb08 	bl	8003790 <HAL_InitTick>
  
  return HAL_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3778      	adds	r7, #120	; 0x78
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	40021000 	.word	0x40021000
 8008190:	0800e484 	.word	0x0800e484
 8008194:	2000005c 	.word	0x2000005c
 8008198:	20000060 	.word	0x20000060

0800819c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800819c:	b480      	push	{r7}
 800819e:	b08b      	sub	sp, #44	; 0x2c
 80081a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80081a2:	2300      	movs	r3, #0
 80081a4:	61fb      	str	r3, [r7, #28]
 80081a6:	2300      	movs	r3, #0
 80081a8:	61bb      	str	r3, [r7, #24]
 80081aa:	2300      	movs	r3, #0
 80081ac:	627b      	str	r3, [r7, #36]	; 0x24
 80081ae:	2300      	movs	r3, #0
 80081b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80081b6:	4b29      	ldr	r3, [pc, #164]	; (800825c <HAL_RCC_GetSysClockFreq+0xc0>)
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	f003 030c 	and.w	r3, r3, #12
 80081c2:	2b04      	cmp	r3, #4
 80081c4:	d002      	beq.n	80081cc <HAL_RCC_GetSysClockFreq+0x30>
 80081c6:	2b08      	cmp	r3, #8
 80081c8:	d003      	beq.n	80081d2 <HAL_RCC_GetSysClockFreq+0x36>
 80081ca:	e03c      	b.n	8008246 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80081cc:	4b24      	ldr	r3, [pc, #144]	; (8008260 <HAL_RCC_GetSysClockFreq+0xc4>)
 80081ce:	623b      	str	r3, [r7, #32]
      break;
 80081d0:	e03c      	b.n	800824c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80081d8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80081dc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081de:	68ba      	ldr	r2, [r7, #8]
 80081e0:	fa92 f2a2 	rbit	r2, r2
 80081e4:	607a      	str	r2, [r7, #4]
  return result;
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	fab2 f282 	clz	r2, r2
 80081ec:	b2d2      	uxtb	r2, r2
 80081ee:	40d3      	lsrs	r3, r2
 80081f0:	4a1c      	ldr	r2, [pc, #112]	; (8008264 <HAL_RCC_GetSysClockFreq+0xc8>)
 80081f2:	5cd3      	ldrb	r3, [r2, r3]
 80081f4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80081f6:	4b19      	ldr	r3, [pc, #100]	; (800825c <HAL_RCC_GetSysClockFreq+0xc0>)
 80081f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fa:	f003 030f 	and.w	r3, r3, #15
 80081fe:	220f      	movs	r2, #15
 8008200:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	fa92 f2a2 	rbit	r2, r2
 8008208:	60fa      	str	r2, [r7, #12]
  return result;
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	fab2 f282 	clz	r2, r2
 8008210:	b2d2      	uxtb	r2, r2
 8008212:	40d3      	lsrs	r3, r2
 8008214:	4a14      	ldr	r2, [pc, #80]	; (8008268 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008216:	5cd3      	ldrb	r3, [r2, r3]
 8008218:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d008      	beq.n	8008236 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008224:	4a0e      	ldr	r2, [pc, #56]	; (8008260 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	fbb2 f2f3 	udiv	r2, r2, r3
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	fb02 f303 	mul.w	r3, r2, r3
 8008232:	627b      	str	r3, [r7, #36]	; 0x24
 8008234:	e004      	b.n	8008240 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	4a0c      	ldr	r2, [pc, #48]	; (800826c <HAL_RCC_GetSysClockFreq+0xd0>)
 800823a:	fb02 f303 	mul.w	r3, r2, r3
 800823e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008242:	623b      	str	r3, [r7, #32]
      break;
 8008244:	e002      	b.n	800824c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008246:	4b06      	ldr	r3, [pc, #24]	; (8008260 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008248:	623b      	str	r3, [r7, #32]
      break;
 800824a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800824c:	6a3b      	ldr	r3, [r7, #32]
}
 800824e:	4618      	mov	r0, r3
 8008250:	372c      	adds	r7, #44	; 0x2c
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	40021000 	.word	0x40021000
 8008260:	007a1200 	.word	0x007a1200
 8008264:	0800e49c 	.word	0x0800e49c
 8008268:	0800e4ac 	.word	0x0800e4ac
 800826c:	003d0900 	.word	0x003d0900

08008270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008270:	b480      	push	{r7}
 8008272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008274:	4b03      	ldr	r3, [pc, #12]	; (8008284 <HAL_RCC_GetHCLKFreq+0x14>)
 8008276:	681b      	ldr	r3, [r3, #0]
}
 8008278:	4618      	mov	r0, r3
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	2000005c 	.word	0x2000005c

08008288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800828e:	f7ff ffef 	bl	8008270 <HAL_RCC_GetHCLKFreq>
 8008292:	4601      	mov	r1, r0
 8008294:	4b0b      	ldr	r3, [pc, #44]	; (80082c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800829c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80082a0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	fa92 f2a2 	rbit	r2, r2
 80082a8:	603a      	str	r2, [r7, #0]
  return result;
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	fab2 f282 	clz	r2, r2
 80082b0:	b2d2      	uxtb	r2, r2
 80082b2:	40d3      	lsrs	r3, r2
 80082b4:	4a04      	ldr	r2, [pc, #16]	; (80082c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80082b6:	5cd3      	ldrb	r3, [r2, r3]
 80082b8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80082bc:	4618      	mov	r0, r3
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	40021000 	.word	0x40021000
 80082c8:	0800e494 	.word	0x0800e494

080082cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80082d2:	f7ff ffcd 	bl	8008270 <HAL_RCC_GetHCLKFreq>
 80082d6:	4601      	mov	r1, r0
 80082d8:	4b0b      	ldr	r3, [pc, #44]	; (8008308 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80082e0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80082e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	fa92 f2a2 	rbit	r2, r2
 80082ec:	603a      	str	r2, [r7, #0]
  return result;
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	fab2 f282 	clz	r2, r2
 80082f4:	b2d2      	uxtb	r2, r2
 80082f6:	40d3      	lsrs	r3, r2
 80082f8:	4a04      	ldr	r2, [pc, #16]	; (800830c <HAL_RCC_GetPCLK2Freq+0x40>)
 80082fa:	5cd3      	ldrb	r3, [r2, r3]
 80082fc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008300:	4618      	mov	r0, r3
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	40021000 	.word	0x40021000
 800830c:	0800e494 	.word	0x0800e494

08008310 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b092      	sub	sp, #72	; 0x48
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008318:	2300      	movs	r3, #0
 800831a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800831c:	2300      	movs	r3, #0
 800831e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008320:	2300      	movs	r3, #0
 8008322:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800832e:	2b00      	cmp	r3, #0
 8008330:	f000 80cd 	beq.w	80084ce <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008334:	4b8e      	ldr	r3, [pc, #568]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008336:	69db      	ldr	r3, [r3, #28]
 8008338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10e      	bne.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008340:	4b8b      	ldr	r3, [pc, #556]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	4a8a      	ldr	r2, [pc, #552]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800834a:	61d3      	str	r3, [r2, #28]
 800834c:	4b88      	ldr	r3, [pc, #544]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800834e:	69db      	ldr	r3, [r3, #28]
 8008350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008354:	60bb      	str	r3, [r7, #8]
 8008356:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008358:	2301      	movs	r3, #1
 800835a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800835e:	4b85      	ldr	r3, [pc, #532]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008366:	2b00      	cmp	r3, #0
 8008368:	d118      	bne.n	800839c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800836a:	4b82      	ldr	r3, [pc, #520]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a81      	ldr	r2, [pc, #516]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008374:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008376:	f7fb fa4f 	bl	8003818 <HAL_GetTick>
 800837a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800837c:	e008      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800837e:	f7fb fa4b 	bl	8003818 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	2b64      	cmp	r3, #100	; 0x64
 800838a:	d901      	bls.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800838c:	2303      	movs	r3, #3
 800838e:	e0ea      	b.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008390:	4b78      	ldr	r3, [pc, #480]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008398:	2b00      	cmp	r3, #0
 800839a:	d0f0      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800839c:	4b74      	ldr	r3, [pc, #464]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800839e:	6a1b      	ldr	r3, [r3, #32]
 80083a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d07d      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d076      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083ba:	4b6d      	ldr	r3, [pc, #436]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80083c8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083cc:	fa93 f3a3 	rbit	r3, r3
 80083d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80083d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083d4:	fab3 f383 	clz	r3, r3
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	461a      	mov	r2, r3
 80083dc:	4b66      	ldr	r3, [pc, #408]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80083de:	4413      	add	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	461a      	mov	r2, r3
 80083e4:	2301      	movs	r3, #1
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80083ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f0:	fa93 f3a3 	rbit	r3, r3
 80083f4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80083f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80083f8:	fab3 f383 	clz	r3, r3
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	461a      	mov	r2, r3
 8008400:	4b5d      	ldr	r3, [pc, #372]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	461a      	mov	r2, r3
 8008408:	2300      	movs	r3, #0
 800840a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800840c:	4a58      	ldr	r2, [pc, #352]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800840e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008410:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008414:	f003 0301 	and.w	r3, r3, #1
 8008418:	2b00      	cmp	r3, #0
 800841a:	d045      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800841c:	f7fb f9fc 	bl	8003818 <HAL_GetTick>
 8008420:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008422:	e00a      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008424:	f7fb f9f8 	bl	8003818 <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008432:	4293      	cmp	r3, r2
 8008434:	d901      	bls.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e095      	b.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800843a:	2302      	movs	r3, #2
 800843c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	fa93 f3a3 	rbit	r3, r3
 8008444:	627b      	str	r3, [r7, #36]	; 0x24
 8008446:	2302      	movs	r3, #2
 8008448:	623b      	str	r3, [r7, #32]
 800844a:	6a3b      	ldr	r3, [r7, #32]
 800844c:	fa93 f3a3 	rbit	r3, r3
 8008450:	61fb      	str	r3, [r7, #28]
  return result;
 8008452:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008454:	fab3 f383 	clz	r3, r3
 8008458:	b2db      	uxtb	r3, r3
 800845a:	095b      	lsrs	r3, r3, #5
 800845c:	b2db      	uxtb	r3, r3
 800845e:	f043 0302 	orr.w	r3, r3, #2
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b02      	cmp	r3, #2
 8008466:	d102      	bne.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8008468:	4b41      	ldr	r3, [pc, #260]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	e007      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800846e:	2302      	movs	r3, #2
 8008470:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	fa93 f3a3 	rbit	r3, r3
 8008478:	617b      	str	r3, [r7, #20]
 800847a:	4b3d      	ldr	r3, [pc, #244]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800847c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847e:	2202      	movs	r2, #2
 8008480:	613a      	str	r2, [r7, #16]
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	fa92 f2a2 	rbit	r2, r2
 8008488:	60fa      	str	r2, [r7, #12]
  return result;
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	fab2 f282 	clz	r2, r2
 8008490:	b2d2      	uxtb	r2, r2
 8008492:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008496:	b2d2      	uxtb	r2, r2
 8008498:	f002 021f 	and.w	r2, r2, #31
 800849c:	2101      	movs	r1, #1
 800849e:	fa01 f202 	lsl.w	r2, r1, r2
 80084a2:	4013      	ands	r3, r2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d0bd      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80084a8:	4b31      	ldr	r3, [pc, #196]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084aa:	6a1b      	ldr	r3, [r3, #32]
 80084ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	492e      	ldr	r1, [pc, #184]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084b6:	4313      	orrs	r3, r2
 80084b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80084ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d105      	bne.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084c2:	4b2b      	ldr	r3, [pc, #172]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	4a2a      	ldr	r2, [pc, #168]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084cc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d008      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80084da:	4b25      	ldr	r3, [pc, #148]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084de:	f023 0203 	bic.w	r2, r3, #3
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	4922      	ldr	r1, [pc, #136]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0320 	and.w	r3, r3, #32
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d008      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80084f8:	4b1d      	ldr	r3, [pc, #116]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80084fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fc:	f023 0210 	bic.w	r2, r3, #16
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	491a      	ldr	r1, [pc, #104]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008506:	4313      	orrs	r3, r2
 8008508:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008512:	2b00      	cmp	r3, #0
 8008514:	d008      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008516:	4b16      	ldr	r3, [pc, #88]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	4913      	ldr	r1, [pc, #76]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008524:	4313      	orrs	r3, r2
 8008526:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d008      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008534:	4b0e      	ldr	r3, [pc, #56]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008538:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	695b      	ldr	r3, [r3, #20]
 8008540:	490b      	ldr	r1, [pc, #44]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008542:	4313      	orrs	r3, r2
 8008544:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d008      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008552:	4b07      	ldr	r3, [pc, #28]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008556:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	699b      	ldr	r3, [r3, #24]
 800855e:	4904      	ldr	r1, [pc, #16]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008560:	4313      	orrs	r3, r2
 8008562:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3748      	adds	r7, #72	; 0x48
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	40021000 	.word	0x40021000
 8008574:	40007000 	.word	0x40007000
 8008578:	10908100 	.word	0x10908100

0800857c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e049      	b.n	8008622 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7fa ff24 	bl	80033f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2202      	movs	r2, #2
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	3304      	adds	r3, #4
 80085b8:	4619      	mov	r1, r3
 80085ba:	4610      	mov	r0, r2
 80085bc:	f000 f9da 	bl	8008974 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
	...

0800862c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b01      	cmp	r3, #1
 800863e:	d001      	beq.n	8008644 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e040      	b.n	80086c6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2202      	movs	r2, #2
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68da      	ldr	r2, [r3, #12]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f042 0201 	orr.w	r2, r2, #1
 800865a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a1c      	ldr	r2, [pc, #112]	; (80086d4 <HAL_TIM_Base_Start_IT+0xa8>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d00e      	beq.n	8008684 <HAL_TIM_Base_Start_IT+0x58>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800866e:	d009      	beq.n	8008684 <HAL_TIM_Base_Start_IT+0x58>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a18      	ldr	r2, [pc, #96]	; (80086d8 <HAL_TIM_Base_Start_IT+0xac>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d004      	beq.n	8008684 <HAL_TIM_Base_Start_IT+0x58>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a17      	ldr	r2, [pc, #92]	; (80086dc <HAL_TIM_Base_Start_IT+0xb0>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d115      	bne.n	80086b0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689a      	ldr	r2, [r3, #8]
 800868a:	4b15      	ldr	r3, [pc, #84]	; (80086e0 <HAL_TIM_Base_Start_IT+0xb4>)
 800868c:	4013      	ands	r3, r2
 800868e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2b06      	cmp	r3, #6
 8008694:	d015      	beq.n	80086c2 <HAL_TIM_Base_Start_IT+0x96>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800869c:	d011      	beq.n	80086c2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f042 0201 	orr.w	r2, r2, #1
 80086ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ae:	e008      	b.n	80086c2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f042 0201 	orr.w	r2, r2, #1
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	e000      	b.n	80086c4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3714      	adds	r7, #20
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	40012c00 	.word	0x40012c00
 80086d8:	40000400 	.word	0x40000400
 80086dc:	40014000 	.word	0x40014000
 80086e0:	00010007 	.word	0x00010007

080086e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	f003 0302 	and.w	r3, r3, #2
 80086f6:	2b02      	cmp	r3, #2
 80086f8:	d122      	bne.n	8008740 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f003 0302 	and.w	r3, r3, #2
 8008704:	2b02      	cmp	r3, #2
 8008706:	d11b      	bne.n	8008740 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f06f 0202 	mvn.w	r2, #2
 8008710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	f003 0303 	and.w	r3, r3, #3
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f905 	bl	8008936 <HAL_TIM_IC_CaptureCallback>
 800872c:	e005      	b.n	800873a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f8f7 	bl	8008922 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f908 	bl	800894a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	f003 0304 	and.w	r3, r3, #4
 800874a:	2b04      	cmp	r3, #4
 800874c:	d122      	bne.n	8008794 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b04      	cmp	r3, #4
 800875a:	d11b      	bne.n	8008794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f06f 0204 	mvn.w	r2, #4
 8008764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2202      	movs	r2, #2
 800876a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	699b      	ldr	r3, [r3, #24]
 8008772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f8db 	bl	8008936 <HAL_TIM_IC_CaptureCallback>
 8008780:	e005      	b.n	800878e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f8cd 	bl	8008922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f8de 	bl	800894a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	f003 0308 	and.w	r3, r3, #8
 800879e:	2b08      	cmp	r3, #8
 80087a0:	d122      	bne.n	80087e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	f003 0308 	and.w	r3, r3, #8
 80087ac:	2b08      	cmp	r3, #8
 80087ae:	d11b      	bne.n	80087e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f06f 0208 	mvn.w	r2, #8
 80087b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2204      	movs	r2, #4
 80087be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	f003 0303 	and.w	r3, r3, #3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d003      	beq.n	80087d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 f8b1 	bl	8008936 <HAL_TIM_IC_CaptureCallback>
 80087d4:	e005      	b.n	80087e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 f8a3 	bl	8008922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f8b4 	bl	800894a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	f003 0310 	and.w	r3, r3, #16
 80087f2:	2b10      	cmp	r3, #16
 80087f4:	d122      	bne.n	800883c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f003 0310 	and.w	r3, r3, #16
 8008800:	2b10      	cmp	r3, #16
 8008802:	d11b      	bne.n	800883c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f06f 0210 	mvn.w	r2, #16
 800880c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2208      	movs	r2, #8
 8008812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	69db      	ldr	r3, [r3, #28]
 800881a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800881e:	2b00      	cmp	r3, #0
 8008820:	d003      	beq.n	800882a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 f887 	bl	8008936 <HAL_TIM_IC_CaptureCallback>
 8008828:	e005      	b.n	8008836 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f879 	bl	8008922 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 f88a 	bl	800894a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	2b01      	cmp	r3, #1
 8008848:	d10e      	bne.n	8008868 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	2b01      	cmp	r3, #1
 8008856:	d107      	bne.n	8008868 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f06f 0201 	mvn.w	r2, #1
 8008860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7fa fc10 	bl	8003088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008872:	2b80      	cmp	r3, #128	; 0x80
 8008874:	d10e      	bne.n	8008894 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008880:	2b80      	cmp	r3, #128	; 0x80
 8008882:	d107      	bne.n	8008894 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800888c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f960 	bl	8008b54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800889e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088a2:	d10e      	bne.n	80088c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ae:	2b80      	cmp	r3, #128	; 0x80
 80088b0:	d107      	bne.n	80088c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80088ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f953 	bl	8008b68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088cc:	2b40      	cmp	r3, #64	; 0x40
 80088ce:	d10e      	bne.n	80088ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088da:	2b40      	cmp	r3, #64	; 0x40
 80088dc:	d107      	bne.n	80088ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f838 	bl	800895e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	f003 0320 	and.w	r3, r3, #32
 80088f8:	2b20      	cmp	r3, #32
 80088fa:	d10e      	bne.n	800891a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	f003 0320 	and.w	r3, r3, #32
 8008906:	2b20      	cmp	r3, #32
 8008908:	d107      	bne.n	800891a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f06f 0220 	mvn.w	r2, #32
 8008912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f913 	bl	8008b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800891a:	bf00      	nop
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008922:	b480      	push	{r7}
 8008924:	b083      	sub	sp, #12
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800892a:	bf00      	nop
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008936:	b480      	push	{r7}
 8008938:	b083      	sub	sp, #12
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800893e:	bf00      	nop
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800894a:	b480      	push	{r7}
 800894c:	b083      	sub	sp, #12
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008952:	bf00      	nop
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008966:	bf00      	nop
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
	...

08008974 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a32      	ldr	r2, [pc, #200]	; (8008a50 <TIM_Base_SetConfig+0xdc>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d007      	beq.n	800899c <TIM_Base_SetConfig+0x28>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008992:	d003      	beq.n	800899c <TIM_Base_SetConfig+0x28>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a2f      	ldr	r2, [pc, #188]	; (8008a54 <TIM_Base_SetConfig+0xe0>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d108      	bne.n	80089ae <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a27      	ldr	r2, [pc, #156]	; (8008a50 <TIM_Base_SetConfig+0xdc>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d013      	beq.n	80089de <TIM_Base_SetConfig+0x6a>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089bc:	d00f      	beq.n	80089de <TIM_Base_SetConfig+0x6a>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a24      	ldr	r2, [pc, #144]	; (8008a54 <TIM_Base_SetConfig+0xe0>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d00b      	beq.n	80089de <TIM_Base_SetConfig+0x6a>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a23      	ldr	r2, [pc, #140]	; (8008a58 <TIM_Base_SetConfig+0xe4>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d007      	beq.n	80089de <TIM_Base_SetConfig+0x6a>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	4a22      	ldr	r2, [pc, #136]	; (8008a5c <TIM_Base_SetConfig+0xe8>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d003      	beq.n	80089de <TIM_Base_SetConfig+0x6a>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a21      	ldr	r2, [pc, #132]	; (8008a60 <TIM_Base_SetConfig+0xec>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d108      	bne.n	80089f0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	689a      	ldr	r2, [r3, #8]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a0e      	ldr	r2, [pc, #56]	; (8008a50 <TIM_Base_SetConfig+0xdc>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d00b      	beq.n	8008a34 <TIM_Base_SetConfig+0xc0>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a0e      	ldr	r2, [pc, #56]	; (8008a58 <TIM_Base_SetConfig+0xe4>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d007      	beq.n	8008a34 <TIM_Base_SetConfig+0xc0>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a0d      	ldr	r2, [pc, #52]	; (8008a5c <TIM_Base_SetConfig+0xe8>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d003      	beq.n	8008a34 <TIM_Base_SetConfig+0xc0>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a0c      	ldr	r2, [pc, #48]	; (8008a60 <TIM_Base_SetConfig+0xec>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d103      	bne.n	8008a3c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	691a      	ldr	r2, [r3, #16]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	615a      	str	r2, [r3, #20]
}
 8008a42:	bf00      	nop
 8008a44:	3714      	adds	r7, #20
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	40012c00 	.word	0x40012c00
 8008a54:	40000400 	.word	0x40000400
 8008a58:	40014000 	.word	0x40014000
 8008a5c:	40014400 	.word	0x40014400
 8008a60:	40014800 	.word	0x40014800

08008a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d101      	bne.n	8008a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a78:	2302      	movs	r3, #2
 8008a7a:	e054      	b.n	8008b26 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2202      	movs	r2, #2
 8008a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a24      	ldr	r2, [pc, #144]	; (8008b34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d108      	bne.n	8008ab8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008aac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a17      	ldr	r2, [pc, #92]	; (8008b34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d00e      	beq.n	8008afa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ae4:	d009      	beq.n	8008afa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a13      	ldr	r2, [pc, #76]	; (8008b38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d004      	beq.n	8008afa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a11      	ldr	r2, [pc, #68]	; (8008b3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d10c      	bne.n	8008b14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3714      	adds	r7, #20
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	40012c00 	.word	0x40012c00
 8008b38:	40000400 	.word	0x40000400
 8008b3c:	40014000 	.word	0x40014000

08008b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d101      	bne.n	8008b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e040      	b.n	8008c10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d106      	bne.n	8008ba4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7fa fc4c 	bl	800343c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2224      	movs	r2, #36	; 0x24
 8008ba8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f022 0201 	bic.w	r2, r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 fbca 	bl	8009354 <UART_SetConfig>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d101      	bne.n	8008bca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e022      	b.n	8008c10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d002      	beq.n	8008bd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fcf4 	bl	80095c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685a      	ldr	r2, [r3, #4]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008be6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689a      	ldr	r2, [r3, #8]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008bf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f042 0201 	orr.w	r2, r2, #1
 8008c06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fd7b 	bl	8009704 <UART_CheckIdleState>
 8008c0e:	4603      	mov	r3, r0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b08b      	sub	sp, #44	; 0x2c
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	60f8      	str	r0, [r7, #12]
 8008c20:	60b9      	str	r1, [r7, #8]
 8008c22:	4613      	mov	r3, r2
 8008c24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c2a:	2b20      	cmp	r3, #32
 8008c2c:	d147      	bne.n	8008cbe <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <HAL_UART_Transmit_IT+0x22>
 8008c34:	88fb      	ldrh	r3, [r7, #6]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e040      	b.n	8008cc0 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	88fa      	ldrh	r2, [r7, #6]
 8008c48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	88fa      	ldrh	r2, [r7, #6]
 8008c50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2221      	movs	r2, #33	; 0x21
 8008c66:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c70:	d107      	bne.n	8008c82 <HAL_UART_Transmit_IT+0x6a>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d103      	bne.n	8008c82 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	4a13      	ldr	r2, [pc, #76]	; (8008ccc <HAL_UART_Transmit_IT+0xb4>)
 8008c7e:	66da      	str	r2, [r3, #108]	; 0x6c
 8008c80:	e002      	b.n	8008c88 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	4a12      	ldr	r2, [pc, #72]	; (8008cd0 <HAL_UART_Transmit_IT+0xb8>)
 8008c86:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	e853 3f00 	ldrex	r3, [r3]
 8008c94:	613b      	str	r3, [r7, #16]
   return(result);
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca6:	623b      	str	r3, [r7, #32]
 8008ca8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008caa:	69f9      	ldr	r1, [r7, #28]
 8008cac:	6a3a      	ldr	r2, [r7, #32]
 8008cae:	e841 2300 	strex	r3, r2, [r1]
 8008cb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cb4:	69bb      	ldr	r3, [r7, #24]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1e6      	bne.n	8008c88 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	e000      	b.n	8008cc0 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008cbe:	2302      	movs	r3, #2
  }
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	372c      	adds	r7, #44	; 0x2c
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	08009c5d 	.word	0x08009c5d
 8008cd0:	08009ba5 	.word	0x08009ba5

08008cd4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b08a      	sub	sp, #40	; 0x28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ce8:	2b20      	cmp	r3, #32
 8008cea:	d132      	bne.n	8008d52 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d002      	beq.n	8008cf8 <HAL_UART_Receive_IT+0x24>
 8008cf2:	88fb      	ldrh	r3, [r7, #6]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d101      	bne.n	8008cfc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e02b      	b.n	8008d54 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d018      	beq.n	8008d42 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d24:	627b      	str	r3, [r7, #36]	; 0x24
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d2e:	623b      	str	r3, [r7, #32]
 8008d30:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d32:	69f9      	ldr	r1, [r7, #28]
 8008d34:	6a3a      	ldr	r2, [r7, #32]
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e6      	bne.n	8008d10 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008d42:	88fb      	ldrh	r3, [r7, #6]
 8008d44:	461a      	mov	r2, r3
 8008d46:	68b9      	ldr	r1, [r7, #8]
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f000 fdeb 	bl	8009924 <UART_Start_Receive_IT>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	e000      	b.n	8008d54 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008d52:	2302      	movs	r3, #2
  }
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3728      	adds	r7, #40	; 0x28
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b0ba      	sub	sp, #232	; 0xe8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	69db      	ldr	r3, [r3, #28]
 8008d6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008d82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008d86:	f640 030f 	movw	r3, #2063	; 0x80f
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008d90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d115      	bne.n	8008dc4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d9c:	f003 0320 	and.w	r3, r3, #32
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d00f      	beq.n	8008dc4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008da8:	f003 0320 	and.w	r3, r3, #32
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d009      	beq.n	8008dc4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 82ab 	beq.w	8009310 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	4798      	blx	r3
      }
      return;
 8008dc2:	e2a5      	b.n	8009310 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008dc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f000 8117 	beq.w	8008ffc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d106      	bne.n	8008de8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008dda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008dde:	4b85      	ldr	r3, [pc, #532]	; (8008ff4 <HAL_UART_IRQHandler+0x298>)
 8008de0:	4013      	ands	r3, r2
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	f000 810a 	beq.w	8008ffc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008de8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d011      	beq.n	8008e18 <HAL_UART_IRQHandler+0xbc>
 8008df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00b      	beq.n	8008e18 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2201      	movs	r2, #1
 8008e06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e0e:	f043 0201 	orr.w	r2, r3, #1
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e1c:	f003 0302 	and.w	r3, r3, #2
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d011      	beq.n	8008e48 <HAL_UART_IRQHandler+0xec>
 8008e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00b      	beq.n	8008e48 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2202      	movs	r2, #2
 8008e36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e3e:	f043 0204 	orr.w	r2, r3, #4
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e4c:	f003 0304 	and.w	r3, r3, #4
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d011      	beq.n	8008e78 <HAL_UART_IRQHandler+0x11c>
 8008e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e58:	f003 0301 	and.w	r3, r3, #1
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00b      	beq.n	8008e78 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2204      	movs	r2, #4
 8008e66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e6e:	f043 0202 	orr.w	r2, r3, #2
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e7c:	f003 0308 	and.w	r3, r3, #8
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d017      	beq.n	8008eb4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e88:	f003 0320 	and.w	r3, r3, #32
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d105      	bne.n	8008e9c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e94:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00b      	beq.n	8008eb4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2208      	movs	r2, #8
 8008ea2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eaa:	f043 0208 	orr.w	r2, r3, #8
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d012      	beq.n	8008ee6 <HAL_UART_IRQHandler+0x18a>
 8008ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ec4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00c      	beq.n	8008ee6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ed4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008edc:	f043 0220 	orr.w	r2, r3, #32
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 8211 	beq.w	8009314 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ef6:	f003 0320 	and.w	r3, r3, #32
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00d      	beq.n	8008f1a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f02:	f003 0320 	and.w	r3, r3, #32
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d007      	beq.n	8008f1a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d003      	beq.n	8008f1a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f2e:	2b40      	cmp	r3, #64	; 0x40
 8008f30:	d005      	beq.n	8008f3e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008f36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d04f      	beq.n	8008fde <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fdb6 	bl	8009ab0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f4e:	2b40      	cmp	r3, #64	; 0x40
 8008f50:	d141      	bne.n	8008fd6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	3308      	adds	r3, #8
 8008f58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f60:	e853 3f00 	ldrex	r3, [r3]
 8008f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	3308      	adds	r3, #8
 8008f7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008f7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008f8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f8e:	e841 2300 	strex	r3, r2, [r1]
 8008f92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008f96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1d9      	bne.n	8008f52 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d013      	beq.n	8008fce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008faa:	4a13      	ldr	r2, [pc, #76]	; (8008ff8 <HAL_UART_IRQHandler+0x29c>)
 8008fac:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fb fd3a 	bl	8004a2c <HAL_DMA_Abort_IT>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d017      	beq.n	8008fee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008fc8:	4610      	mov	r0, r2
 8008fca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fcc:	e00f      	b.n	8008fee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f9aa 	bl	8009328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd4:	e00b      	b.n	8008fee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f9a6 	bl	8009328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fdc:	e007      	b.n	8008fee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f9a2 	bl	8009328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008fec:	e192      	b.n	8009314 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fee:	bf00      	nop
    return;
 8008ff0:	e190      	b.n	8009314 <HAL_UART_IRQHandler+0x5b8>
 8008ff2:	bf00      	nop
 8008ff4:	04000120 	.word	0x04000120
 8008ff8:	08009b79 	.word	0x08009b79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009000:	2b01      	cmp	r3, #1
 8009002:	f040 814b 	bne.w	800929c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800900a:	f003 0310 	and.w	r3, r3, #16
 800900e:	2b00      	cmp	r3, #0
 8009010:	f000 8144 	beq.w	800929c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009018:	f003 0310 	and.w	r3, r3, #16
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 813d 	beq.w	800929c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2210      	movs	r2, #16
 8009028:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009034:	2b40      	cmp	r3, #64	; 0x40
 8009036:	f040 80b5 	bne.w	80091a4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009046:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 8164 	beq.w	8009318 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009056:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800905a:	429a      	cmp	r2, r3
 800905c:	f080 815c 	bcs.w	8009318 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009066:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	2b20      	cmp	r3, #32
 8009072:	f000 8086 	beq.w	8009182 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009082:	e853 3f00 	ldrex	r3, [r3]
 8009086:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800908a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800908e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009092:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	461a      	mov	r2, r3
 800909c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80090a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80090a4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80090ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80090b0:	e841 2300 	strex	r3, r2, [r1]
 80090b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80090b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1da      	bne.n	8009076 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	3308      	adds	r3, #8
 80090c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090ca:	e853 3f00 	ldrex	r3, [r3]
 80090ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80090d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80090d2:	f023 0301 	bic.w	r3, r3, #1
 80090d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	3308      	adds	r3, #8
 80090e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80090e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80090e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80090ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80090f0:	e841 2300 	strex	r3, r2, [r1]
 80090f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80090f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d1e1      	bne.n	80090c0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	3308      	adds	r3, #8
 8009102:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009104:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009106:	e853 3f00 	ldrex	r3, [r3]
 800910a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800910c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800910e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009112:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3308      	adds	r3, #8
 800911c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009120:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009122:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009124:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009126:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009128:	e841 2300 	strex	r3, r2, [r1]
 800912c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800912e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1e3      	bne.n	80090fc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2220      	movs	r2, #32
 8009138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800914a:	e853 3f00 	ldrex	r3, [r3]
 800914e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009152:	f023 0310 	bic.w	r3, r3, #16
 8009156:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009164:	65bb      	str	r3, [r7, #88]	; 0x58
 8009166:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009168:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800916a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800916c:	e841 2300 	strex	r3, r2, [r1]
 8009170:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1e4      	bne.n	8009142 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800917c:	4618      	mov	r0, r3
 800917e:	f7fb fc1c 	bl	80049ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2202      	movs	r2, #2
 8009186:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009194:	b29b      	uxth	r3, r3
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	b29b      	uxth	r3, r3
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 f8cd 	bl	800933c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091a2:	e0b9      	b.n	8009318 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80091be:	b29b      	uxth	r3, r3
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 80ab 	beq.w	800931c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80091c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f000 80a6 	beq.w	800931c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d8:	e853 3f00 	ldrex	r3, [r3]
 80091dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80091de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	461a      	mov	r2, r3
 80091ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80091f2:	647b      	str	r3, [r7, #68]	; 0x44
 80091f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80091f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091fa:	e841 2300 	strex	r3, r2, [r1]
 80091fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1e4      	bne.n	80091d0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3308      	adds	r3, #8
 800920c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009210:	e853 3f00 	ldrex	r3, [r3]
 8009214:	623b      	str	r3, [r7, #32]
   return(result);
 8009216:	6a3b      	ldr	r3, [r7, #32]
 8009218:	f023 0301 	bic.w	r3, r3, #1
 800921c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3308      	adds	r3, #8
 8009226:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800922a:	633a      	str	r2, [r7, #48]	; 0x30
 800922c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009232:	e841 2300 	strex	r3, r2, [r1]
 8009236:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1e3      	bne.n	8009206 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2220      	movs	r2, #32
 8009242:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	e853 3f00 	ldrex	r3, [r3]
 800925e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f023 0310 	bic.w	r3, r3, #16
 8009266:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	461a      	mov	r2, r3
 8009270:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009274:	61fb      	str	r3, [r7, #28]
 8009276:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009278:	69b9      	ldr	r1, [r7, #24]
 800927a:	69fa      	ldr	r2, [r7, #28]
 800927c:	e841 2300 	strex	r3, r2, [r1]
 8009280:	617b      	str	r3, [r7, #20]
   return(result);
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d1e4      	bne.n	8009252 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2202      	movs	r2, #2
 800928c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800928e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009292:	4619      	mov	r1, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f851 	bl	800933c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800929a:	e03f      	b.n	800931c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800929c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00e      	beq.n	80092c6 <HAL_UART_IRQHandler+0x56a>
 80092a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d008      	beq.n	80092c6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80092bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 fefe 	bl	800a0c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092c4:	e02d      	b.n	8009322 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80092c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00e      	beq.n	80092f0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80092d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d008      	beq.n	80092f0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d01c      	beq.n	8009320 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	4798      	blx	r3
    }
    return;
 80092ee:	e017      	b.n	8009320 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80092f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d012      	beq.n	8009322 <HAL_UART_IRQHandler+0x5c6>
 80092fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00c      	beq.n	8009322 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 fd07 	bl	8009d1c <UART_EndTransmit_IT>
    return;
 800930e:	e008      	b.n	8009322 <HAL_UART_IRQHandler+0x5c6>
      return;
 8009310:	bf00      	nop
 8009312:	e006      	b.n	8009322 <HAL_UART_IRQHandler+0x5c6>
    return;
 8009314:	bf00      	nop
 8009316:	e004      	b.n	8009322 <HAL_UART_IRQHandler+0x5c6>
      return;
 8009318:	bf00      	nop
 800931a:	e002      	b.n	8009322 <HAL_UART_IRQHandler+0x5c6>
      return;
 800931c:	bf00      	nop
 800931e:	e000      	b.n	8009322 <HAL_UART_IRQHandler+0x5c6>
    return;
 8009320:	bf00      	nop
  }

}
 8009322:	37e8      	adds	r7, #232	; 0xe8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	460b      	mov	r3, r1
 8009346:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b088      	sub	sp, #32
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800935c:	2300      	movs	r3, #0
 800935e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	689a      	ldr	r2, [r3, #8]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	431a      	orrs	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	695b      	ldr	r3, [r3, #20]
 800936e:	431a      	orrs	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	69db      	ldr	r3, [r3, #28]
 8009374:	4313      	orrs	r3, r2
 8009376:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	4b8a      	ldr	r3, [pc, #552]	; (80095a8 <UART_SetConfig+0x254>)
 8009380:	4013      	ands	r3, r2
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	6812      	ldr	r2, [r2, #0]
 8009386:	6979      	ldr	r1, [r7, #20]
 8009388:	430b      	orrs	r3, r1
 800938a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	68da      	ldr	r2, [r3, #12]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	430a      	orrs	r2, r1
 80093a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	699b      	ldr	r3, [r3, #24]
 80093a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6a1b      	ldr	r3, [r3, #32]
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	430a      	orrs	r2, r1
 80093c4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a78      	ldr	r2, [pc, #480]	; (80095ac <UART_SetConfig+0x258>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d120      	bne.n	8009412 <UART_SetConfig+0xbe>
 80093d0:	4b77      	ldr	r3, [pc, #476]	; (80095b0 <UART_SetConfig+0x25c>)
 80093d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093d4:	f003 0303 	and.w	r3, r3, #3
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d817      	bhi.n	800940c <UART_SetConfig+0xb8>
 80093dc:	a201      	add	r2, pc, #4	; (adr r2, 80093e4 <UART_SetConfig+0x90>)
 80093de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e2:	bf00      	nop
 80093e4:	080093f5 	.word	0x080093f5
 80093e8:	08009401 	.word	0x08009401
 80093ec:	08009407 	.word	0x08009407
 80093f0:	080093fb 	.word	0x080093fb
 80093f4:	2300      	movs	r3, #0
 80093f6:	77fb      	strb	r3, [r7, #31]
 80093f8:	e01d      	b.n	8009436 <UART_SetConfig+0xe2>
 80093fa:	2302      	movs	r3, #2
 80093fc:	77fb      	strb	r3, [r7, #31]
 80093fe:	e01a      	b.n	8009436 <UART_SetConfig+0xe2>
 8009400:	2304      	movs	r3, #4
 8009402:	77fb      	strb	r3, [r7, #31]
 8009404:	e017      	b.n	8009436 <UART_SetConfig+0xe2>
 8009406:	2308      	movs	r3, #8
 8009408:	77fb      	strb	r3, [r7, #31]
 800940a:	e014      	b.n	8009436 <UART_SetConfig+0xe2>
 800940c:	2310      	movs	r3, #16
 800940e:	77fb      	strb	r3, [r7, #31]
 8009410:	e011      	b.n	8009436 <UART_SetConfig+0xe2>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a67      	ldr	r2, [pc, #412]	; (80095b4 <UART_SetConfig+0x260>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d102      	bne.n	8009422 <UART_SetConfig+0xce>
 800941c:	2300      	movs	r3, #0
 800941e:	77fb      	strb	r3, [r7, #31]
 8009420:	e009      	b.n	8009436 <UART_SetConfig+0xe2>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a64      	ldr	r2, [pc, #400]	; (80095b8 <UART_SetConfig+0x264>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d102      	bne.n	8009432 <UART_SetConfig+0xde>
 800942c:	2300      	movs	r3, #0
 800942e:	77fb      	strb	r3, [r7, #31]
 8009430:	e001      	b.n	8009436 <UART_SetConfig+0xe2>
 8009432:	2310      	movs	r3, #16
 8009434:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	69db      	ldr	r3, [r3, #28]
 800943a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800943e:	d15a      	bne.n	80094f6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8009440:	7ffb      	ldrb	r3, [r7, #31]
 8009442:	2b08      	cmp	r3, #8
 8009444:	d827      	bhi.n	8009496 <UART_SetConfig+0x142>
 8009446:	a201      	add	r2, pc, #4	; (adr r2, 800944c <UART_SetConfig+0xf8>)
 8009448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944c:	08009471 	.word	0x08009471
 8009450:	08009479 	.word	0x08009479
 8009454:	08009481 	.word	0x08009481
 8009458:	08009497 	.word	0x08009497
 800945c:	08009487 	.word	0x08009487
 8009460:	08009497 	.word	0x08009497
 8009464:	08009497 	.word	0x08009497
 8009468:	08009497 	.word	0x08009497
 800946c:	0800948f 	.word	0x0800948f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009470:	f7fe ff0a 	bl	8008288 <HAL_RCC_GetPCLK1Freq>
 8009474:	61b8      	str	r0, [r7, #24]
        break;
 8009476:	e013      	b.n	80094a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009478:	f7fe ff28 	bl	80082cc <HAL_RCC_GetPCLK2Freq>
 800947c:	61b8      	str	r0, [r7, #24]
        break;
 800947e:	e00f      	b.n	80094a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009480:	4b4e      	ldr	r3, [pc, #312]	; (80095bc <UART_SetConfig+0x268>)
 8009482:	61bb      	str	r3, [r7, #24]
        break;
 8009484:	e00c      	b.n	80094a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009486:	f7fe fe89 	bl	800819c <HAL_RCC_GetSysClockFreq>
 800948a:	61b8      	str	r0, [r7, #24]
        break;
 800948c:	e008      	b.n	80094a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800948e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009492:	61bb      	str	r3, [r7, #24]
        break;
 8009494:	e004      	b.n	80094a0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8009496:	2300      	movs	r3, #0
 8009498:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	77bb      	strb	r3, [r7, #30]
        break;
 800949e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d074      	beq.n	8009590 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	005a      	lsls	r2, r3, #1
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	085b      	lsrs	r3, r3, #1
 80094b0:	441a      	add	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	2b0f      	cmp	r3, #15
 80094c0:	d916      	bls.n	80094f0 <UART_SetConfig+0x19c>
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094c8:	d212      	bcs.n	80094f0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	f023 030f 	bic.w	r3, r3, #15
 80094d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	085b      	lsrs	r3, r3, #1
 80094d8:	b29b      	uxth	r3, r3
 80094da:	f003 0307 	and.w	r3, r3, #7
 80094de:	b29a      	uxth	r2, r3
 80094e0:	89fb      	ldrh	r3, [r7, #14]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	89fa      	ldrh	r2, [r7, #14]
 80094ec:	60da      	str	r2, [r3, #12]
 80094ee:	e04f      	b.n	8009590 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	77bb      	strb	r3, [r7, #30]
 80094f4:	e04c      	b.n	8009590 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80094f6:	7ffb      	ldrb	r3, [r7, #31]
 80094f8:	2b08      	cmp	r3, #8
 80094fa:	d828      	bhi.n	800954e <UART_SetConfig+0x1fa>
 80094fc:	a201      	add	r2, pc, #4	; (adr r2, 8009504 <UART_SetConfig+0x1b0>)
 80094fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009502:	bf00      	nop
 8009504:	08009529 	.word	0x08009529
 8009508:	08009531 	.word	0x08009531
 800950c:	08009539 	.word	0x08009539
 8009510:	0800954f 	.word	0x0800954f
 8009514:	0800953f 	.word	0x0800953f
 8009518:	0800954f 	.word	0x0800954f
 800951c:	0800954f 	.word	0x0800954f
 8009520:	0800954f 	.word	0x0800954f
 8009524:	08009547 	.word	0x08009547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009528:	f7fe feae 	bl	8008288 <HAL_RCC_GetPCLK1Freq>
 800952c:	61b8      	str	r0, [r7, #24]
        break;
 800952e:	e013      	b.n	8009558 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009530:	f7fe fecc 	bl	80082cc <HAL_RCC_GetPCLK2Freq>
 8009534:	61b8      	str	r0, [r7, #24]
        break;
 8009536:	e00f      	b.n	8009558 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009538:	4b20      	ldr	r3, [pc, #128]	; (80095bc <UART_SetConfig+0x268>)
 800953a:	61bb      	str	r3, [r7, #24]
        break;
 800953c:	e00c      	b.n	8009558 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800953e:	f7fe fe2d 	bl	800819c <HAL_RCC_GetSysClockFreq>
 8009542:	61b8      	str	r0, [r7, #24]
        break;
 8009544:	e008      	b.n	8009558 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800954a:	61bb      	str	r3, [r7, #24]
        break;
 800954c:	e004      	b.n	8009558 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800954e:	2300      	movs	r3, #0
 8009550:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	77bb      	strb	r3, [r7, #30]
        break;
 8009556:	bf00      	nop
    }

    if (pclk != 0U)
 8009558:	69bb      	ldr	r3, [r7, #24]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d018      	beq.n	8009590 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	085a      	lsrs	r2, r3, #1
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	441a      	add	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009570:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	2b0f      	cmp	r3, #15
 8009576:	d909      	bls.n	800958c <UART_SetConfig+0x238>
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800957e:	d205      	bcs.n	800958c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	b29a      	uxth	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	60da      	str	r2, [r3, #12]
 800958a:	e001      	b.n	8009590 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800959c:	7fbb      	ldrb	r3, [r7, #30]
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3720      	adds	r7, #32
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	efff69f3 	.word	0xefff69f3
 80095ac:	40013800 	.word	0x40013800
 80095b0:	40021000 	.word	0x40021000
 80095b4:	40004400 	.word	0x40004400
 80095b8:	40004800 	.word	0x40004800
 80095bc:	007a1200 	.word	0x007a1200

080095c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	f003 0301 	and.w	r3, r3, #1
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00a      	beq.n	80095ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	430a      	orrs	r2, r1
 80095e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ee:	f003 0302 	and.w	r3, r3, #2
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00a      	beq.n	800960c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	430a      	orrs	r2, r1
 800960a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009610:	f003 0304 	and.w	r3, r3, #4
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00a      	beq.n	800962e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	430a      	orrs	r2, r1
 800962c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009632:	f003 0308 	and.w	r3, r3, #8
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00a      	beq.n	8009650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	430a      	orrs	r2, r1
 800964e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009654:	f003 0310 	and.w	r3, r3, #16
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00a      	beq.n	8009672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	430a      	orrs	r2, r1
 8009670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009676:	f003 0320 	and.w	r3, r3, #32
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00a      	beq.n	8009694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	430a      	orrs	r2, r1
 8009692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800969c:	2b00      	cmp	r3, #0
 800969e:	d01a      	beq.n	80096d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	430a      	orrs	r2, r1
 80096b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096be:	d10a      	bne.n	80096d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	430a      	orrs	r2, r1
 80096d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00a      	beq.n	80096f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	430a      	orrs	r2, r1
 80096f6:	605a      	str	r2, [r3, #4]
  }
}
 80096f8:	bf00      	nop
 80096fa:	370c      	adds	r7, #12
 80096fc:	46bd      	mov	sp, r7
 80096fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009702:	4770      	bx	lr

08009704 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b098      	sub	sp, #96	; 0x60
 8009708:	af02      	add	r7, sp, #8
 800970a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009714:	f7fa f880 	bl	8003818 <HAL_GetTick>
 8009718:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 0308 	and.w	r3, r3, #8
 8009724:	2b08      	cmp	r3, #8
 8009726:	d12e      	bne.n	8009786 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009728:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800972c:	9300      	str	r3, [sp, #0]
 800972e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009730:	2200      	movs	r2, #0
 8009732:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f88c 	bl	8009854 <UART_WaitOnFlagUntilTimeout>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d021      	beq.n	8009786 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974a:	e853 3f00 	ldrex	r3, [r3]
 800974e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009756:	653b      	str	r3, [r7, #80]	; 0x50
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	461a      	mov	r2, r3
 800975e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009760:	647b      	str	r3, [r7, #68]	; 0x44
 8009762:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009764:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009766:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009768:	e841 2300 	strex	r3, r2, [r1]
 800976c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800976e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1e6      	bne.n	8009742 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2220      	movs	r2, #32
 8009778:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009782:	2303      	movs	r3, #3
 8009784:	e062      	b.n	800984c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 0304 	and.w	r3, r3, #4
 8009790:	2b04      	cmp	r3, #4
 8009792:	d149      	bne.n	8009828 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009794:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009798:	9300      	str	r3, [sp, #0]
 800979a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800979c:	2200      	movs	r2, #0
 800979e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f856 	bl	8009854 <UART_WaitOnFlagUntilTimeout>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d03c      	beq.n	8009828 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	e853 3f00 	ldrex	r3, [r3]
 80097ba:	623b      	str	r3, [r7, #32]
   return(result);
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	461a      	mov	r2, r3
 80097ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097cc:	633b      	str	r3, [r7, #48]	; 0x30
 80097ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097d4:	e841 2300 	strex	r3, r2, [r1]
 80097d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d1e6      	bne.n	80097ae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	3308      	adds	r3, #8
 80097e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	e853 3f00 	ldrex	r3, [r3]
 80097ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f023 0301 	bic.w	r3, r3, #1
 80097f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	3308      	adds	r3, #8
 80097fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009800:	61fa      	str	r2, [r7, #28]
 8009802:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009804:	69b9      	ldr	r1, [r7, #24]
 8009806:	69fa      	ldr	r2, [r7, #28]
 8009808:	e841 2300 	strex	r3, r2, [r1]
 800980c:	617b      	str	r3, [r7, #20]
   return(result);
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1e5      	bne.n	80097e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2220      	movs	r2, #32
 8009818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2200      	movs	r2, #0
 8009820:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009824:	2303      	movs	r3, #3
 8009826:	e011      	b.n	800984c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2220      	movs	r2, #32
 800982c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2220      	movs	r2, #32
 8009832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	3758      	adds	r7, #88	; 0x58
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	603b      	str	r3, [r7, #0]
 8009860:	4613      	mov	r3, r2
 8009862:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009864:	e049      	b.n	80098fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800986c:	d045      	beq.n	80098fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800986e:	f7f9 ffd3 	bl	8003818 <HAL_GetTick>
 8009872:	4602      	mov	r2, r0
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	1ad3      	subs	r3, r2, r3
 8009878:	69ba      	ldr	r2, [r7, #24]
 800987a:	429a      	cmp	r2, r3
 800987c:	d302      	bcc.n	8009884 <UART_WaitOnFlagUntilTimeout+0x30>
 800987e:	69bb      	ldr	r3, [r7, #24]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d101      	bne.n	8009888 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e048      	b.n	800991a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 0304 	and.w	r3, r3, #4
 8009892:	2b00      	cmp	r3, #0
 8009894:	d031      	beq.n	80098fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	69db      	ldr	r3, [r3, #28]
 800989c:	f003 0308 	and.w	r3, r3, #8
 80098a0:	2b08      	cmp	r3, #8
 80098a2:	d110      	bne.n	80098c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2208      	movs	r2, #8
 80098aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f000 f8ff 	bl	8009ab0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2208      	movs	r2, #8
 80098b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2200      	movs	r2, #0
 80098be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	e029      	b.n	800991a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	69db      	ldr	r3, [r3, #28]
 80098cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098d4:	d111      	bne.n	80098fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f000 f8e5 	bl	8009ab0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2220      	movs	r2, #32
 80098ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e00f      	b.n	800991a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	69da      	ldr	r2, [r3, #28]
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	4013      	ands	r3, r2
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	429a      	cmp	r2, r3
 8009908:	bf0c      	ite	eq
 800990a:	2301      	moveq	r3, #1
 800990c:	2300      	movne	r3, #0
 800990e:	b2db      	uxtb	r3, r3
 8009910:	461a      	mov	r2, r3
 8009912:	79fb      	ldrb	r3, [r7, #7]
 8009914:	429a      	cmp	r2, r3
 8009916:	d0a6      	beq.n	8009866 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
	...

08009924 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009924:	b480      	push	{r7}
 8009926:	b097      	sub	sp, #92	; 0x5c
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	4613      	mov	r3, r2
 8009930:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	88fa      	ldrh	r2, [r7, #6]
 800993c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	88fa      	ldrh	r2, [r7, #6]
 8009944:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	689b      	ldr	r3, [r3, #8]
 8009952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009956:	d10e      	bne.n	8009976 <UART_Start_Receive_IT+0x52>
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d105      	bne.n	800996c <UART_Start_Receive_IT+0x48>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009966:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800996a:	e02d      	b.n	80099c8 <UART_Start_Receive_IT+0xa4>
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	22ff      	movs	r2, #255	; 0xff
 8009970:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009974:	e028      	b.n	80099c8 <UART_Start_Receive_IT+0xa4>
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10d      	bne.n	800999a <UART_Start_Receive_IT+0x76>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d104      	bne.n	8009990 <UART_Start_Receive_IT+0x6c>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	22ff      	movs	r2, #255	; 0xff
 800998a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800998e:	e01b      	b.n	80099c8 <UART_Start_Receive_IT+0xa4>
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	227f      	movs	r2, #127	; 0x7f
 8009994:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009998:	e016      	b.n	80099c8 <UART_Start_Receive_IT+0xa4>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099a2:	d10d      	bne.n	80099c0 <UART_Start_Receive_IT+0x9c>
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d104      	bne.n	80099b6 <UART_Start_Receive_IT+0x92>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	227f      	movs	r2, #127	; 0x7f
 80099b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80099b4:	e008      	b.n	80099c8 <UART_Start_Receive_IT+0xa4>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	223f      	movs	r2, #63	; 0x3f
 80099ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80099be:	e003      	b.n	80099c8 <UART_Start_Receive_IT+0xa4>
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2222      	movs	r2, #34	; 0x22
 80099d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	3308      	adds	r3, #8
 80099de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099e2:	e853 3f00 	ldrex	r3, [r3]
 80099e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ea:	f043 0301 	orr.w	r3, r3, #1
 80099ee:	657b      	str	r3, [r7, #84]	; 0x54
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	3308      	adds	r3, #8
 80099f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80099f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80099fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099fc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80099fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a00:	e841 2300 	strex	r3, r2, [r1]
 8009a04:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009a06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d1e5      	bne.n	80099d8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a14:	d107      	bne.n	8009a26 <UART_Start_Receive_IT+0x102>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d103      	bne.n	8009a26 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	4a21      	ldr	r2, [pc, #132]	; (8009aa8 <UART_Start_Receive_IT+0x184>)
 8009a22:	669a      	str	r2, [r3, #104]	; 0x68
 8009a24:	e002      	b.n	8009a2c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	4a20      	ldr	r2, [pc, #128]	; (8009aac <UART_Start_Receive_IT+0x188>)
 8009a2a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d019      	beq.n	8009a68 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3c:	e853 3f00 	ldrex	r3, [r3]
 8009a40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009a48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	461a      	mov	r2, r3
 8009a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a52:	637b      	str	r3, [r7, #52]	; 0x34
 8009a54:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a5a:	e841 2300 	strex	r3, r2, [r1]
 8009a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d1e6      	bne.n	8009a34 <UART_Start_Receive_IT+0x110>
 8009a66:	e018      	b.n	8009a9a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	e853 3f00 	ldrex	r3, [r3]
 8009a74:	613b      	str	r3, [r7, #16]
   return(result);
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	f043 0320 	orr.w	r3, r3, #32
 8009a7c:	653b      	str	r3, [r7, #80]	; 0x50
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	461a      	mov	r2, r3
 8009a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a86:	623b      	str	r3, [r7, #32]
 8009a88:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8a:	69f9      	ldr	r1, [r7, #28]
 8009a8c:	6a3a      	ldr	r2, [r7, #32]
 8009a8e:	e841 2300 	strex	r3, r2, [r1]
 8009a92:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1e6      	bne.n	8009a68 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	375c      	adds	r7, #92	; 0x5c
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	08009f19 	.word	0x08009f19
 8009aac:	08009d71 	.word	0x08009d71

08009ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b095      	sub	sp, #84	; 0x54
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ac0:	e853 3f00 	ldrex	r3, [r3]
 8009ac4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009acc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ad6:	643b      	str	r3, [r7, #64]	; 0x40
 8009ad8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ada:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009adc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ade:	e841 2300 	strex	r3, r2, [r1]
 8009ae2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1e6      	bne.n	8009ab8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	3308      	adds	r3, #8
 8009af0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af2:	6a3b      	ldr	r3, [r7, #32]
 8009af4:	e853 3f00 	ldrex	r3, [r3]
 8009af8:	61fb      	str	r3, [r7, #28]
   return(result);
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	f023 0301 	bic.w	r3, r3, #1
 8009b00:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	3308      	adds	r3, #8
 8009b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b12:	e841 2300 	strex	r3, r2, [r1]
 8009b16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d1e5      	bne.n	8009aea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d118      	bne.n	8009b58 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	e853 3f00 	ldrex	r3, [r3]
 8009b32:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	f023 0310 	bic.w	r3, r3, #16
 8009b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	461a      	mov	r2, r3
 8009b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b44:	61bb      	str	r3, [r7, #24]
 8009b46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b48:	6979      	ldr	r1, [r7, #20]
 8009b4a:	69ba      	ldr	r2, [r7, #24]
 8009b4c:	e841 2300 	strex	r3, r2, [r1]
 8009b50:	613b      	str	r3, [r7, #16]
   return(result);
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1e6      	bne.n	8009b26 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2220      	movs	r2, #32
 8009b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009b6c:	bf00      	nop
 8009b6e:	3754      	adds	r7, #84	; 0x54
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2200      	movs	r2, #0
 8009b92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f7ff fbc6 	bl	8009328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b9c:	bf00      	nop
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b08f      	sub	sp, #60	; 0x3c
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bb0:	2b21      	cmp	r3, #33	; 0x21
 8009bb2:	d14d      	bne.n	8009c50 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d132      	bne.n	8009c26 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bc6:	6a3b      	ldr	r3, [r7, #32]
 8009bc8:	e853 3f00 	ldrex	r3, [r3]
 8009bcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009be0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009be6:	e841 2300 	strex	r3, r2, [r1]
 8009bea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1e6      	bne.n	8009bc0 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	e853 3f00 	ldrex	r3, [r3]
 8009bfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c06:	633b      	str	r3, [r7, #48]	; 0x30
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c10:	61bb      	str	r3, [r7, #24]
 8009c12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c14:	6979      	ldr	r1, [r7, #20]
 8009c16:	69ba      	ldr	r2, [r7, #24]
 8009c18:	e841 2300 	strex	r3, r2, [r1]
 8009c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1e6      	bne.n	8009bf2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009c24:	e014      	b.n	8009c50 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c2a:	781a      	ldrb	r2, [r3, #0]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	b292      	uxth	r2, r2
 8009c32:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c38:	1c5a      	adds	r2, r3, #1
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	3b01      	subs	r3, #1
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009c50:	bf00      	nop
 8009c52:	373c      	adds	r7, #60	; 0x3c
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b091      	sub	sp, #68	; 0x44
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c68:	2b21      	cmp	r3, #33	; 0x21
 8009c6a:	d151      	bne.n	8009d10 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d132      	bne.n	8009cde <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c80:	e853 3f00 	ldrex	r3, [r3]
 8009c84:	623b      	str	r3, [r7, #32]
   return(result);
 8009c86:	6a3b      	ldr	r3, [r7, #32]
 8009c88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	461a      	mov	r2, r3
 8009c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c96:	633b      	str	r3, [r7, #48]	; 0x30
 8009c98:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c9e:	e841 2300 	strex	r3, r2, [r1]
 8009ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d1e6      	bne.n	8009c78 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	e853 3f00 	ldrex	r3, [r3]
 8009cb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc8:	61fb      	str	r3, [r7, #28]
 8009cca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ccc:	69b9      	ldr	r1, [r7, #24]
 8009cce:	69fa      	ldr	r2, [r7, #28]
 8009cd0:	e841 2300 	strex	r3, r2, [r1]
 8009cd4:	617b      	str	r3, [r7, #20]
   return(result);
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1e6      	bne.n	8009caa <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009cdc:	e018      	b.n	8009d10 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce6:	881a      	ldrh	r2, [r3, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cf0:	b292      	uxth	r2, r2
 8009cf2:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cf8:	1c9a      	adds	r2, r3, #2
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	3b01      	subs	r3, #1
 8009d08:	b29a      	uxth	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009d10:	bf00      	nop
 8009d12:	3744      	adds	r7, #68	; 0x44
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b088      	sub	sp, #32
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	e853 3f00 	ldrex	r3, [r3]
 8009d30:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d38:	61fb      	str	r3, [r7, #28]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	61bb      	str	r3, [r7, #24]
 8009d44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d46:	6979      	ldr	r1, [r7, #20]
 8009d48:	69ba      	ldr	r2, [r7, #24]
 8009d4a:	e841 2300 	strex	r3, r2, [r1]
 8009d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d1e6      	bne.n	8009d24 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2220      	movs	r2, #32
 8009d5a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f7f9 f980 	bl	8003068 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d68:	bf00      	nop
 8009d6a:	3720      	adds	r7, #32
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b09c      	sub	sp, #112	; 0x70
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d7e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d88:	2b22      	cmp	r3, #34	; 0x22
 8009d8a:	f040 80b9 	bne.w	8009f00 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d94:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009d98:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009d9c:	b2d9      	uxtb	r1, r3
 8009d9e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009da2:	b2da      	uxtb	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009da8:	400a      	ands	r2, r1
 8009daa:	b2d2      	uxtb	r2, r2
 8009dac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009db2:	1c5a      	adds	r2, r3, #1
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f040 809c 	bne.w	8009f10 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009de0:	e853 3f00 	ldrex	r3, [r3]
 8009de4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009de8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009dec:	66bb      	str	r3, [r7, #104]	; 0x68
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	461a      	mov	r2, r3
 8009df4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009df6:	65bb      	str	r3, [r7, #88]	; 0x58
 8009df8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009dfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009dfe:	e841 2300 	strex	r3, r2, [r1]
 8009e02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009e04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1e6      	bne.n	8009dd8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	3308      	adds	r3, #8
 8009e10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e14:	e853 3f00 	ldrex	r3, [r3]
 8009e18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e1c:	f023 0301 	bic.w	r3, r3, #1
 8009e20:	667b      	str	r3, [r7, #100]	; 0x64
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3308      	adds	r3, #8
 8009e28:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009e2a:	647a      	str	r2, [r7, #68]	; 0x44
 8009e2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009e30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e32:	e841 2300 	strex	r3, r2, [r1]
 8009e36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1e5      	bne.n	8009e0a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2220      	movs	r2, #32
 8009e42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d018      	beq.n	8009e92 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e68:	e853 3f00 	ldrex	r3, [r3]
 8009e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e74:	663b      	str	r3, [r7, #96]	; 0x60
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e7e:	633b      	str	r3, [r7, #48]	; 0x30
 8009e80:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e86:	e841 2300 	strex	r3, r2, [r1]
 8009e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d1e6      	bne.n	8009e60 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d12e      	bne.n	8009ef8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	e853 3f00 	ldrex	r3, [r3]
 8009eac:	60fb      	str	r3, [r7, #12]
   return(result);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	f023 0310 	bic.w	r3, r3, #16
 8009eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	461a      	mov	r2, r3
 8009ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ebe:	61fb      	str	r3, [r7, #28]
 8009ec0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec2:	69b9      	ldr	r1, [r7, #24]
 8009ec4:	69fa      	ldr	r2, [r7, #28]
 8009ec6:	e841 2300 	strex	r3, r2, [r1]
 8009eca:	617b      	str	r3, [r7, #20]
   return(result);
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1e6      	bne.n	8009ea0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	69db      	ldr	r3, [r3, #28]
 8009ed8:	f003 0310 	and.w	r3, r3, #16
 8009edc:	2b10      	cmp	r3, #16
 8009ede:	d103      	bne.n	8009ee8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2210      	movs	r2, #16
 8009ee6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009eee:	4619      	mov	r1, r3
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f7ff fa23 	bl	800933c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ef6:	e00b      	b.n	8009f10 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f7f9 f8d5 	bl	80030a8 <HAL_UART_RxCpltCallback>
}
 8009efe:	e007      	b.n	8009f10 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	699a      	ldr	r2, [r3, #24]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f042 0208 	orr.w	r2, r2, #8
 8009f0e:	619a      	str	r2, [r3, #24]
}
 8009f10:	bf00      	nop
 8009f12:	3770      	adds	r7, #112	; 0x70
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b09c      	sub	sp, #112	; 0x70
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f26:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f30:	2b22      	cmp	r3, #34	; 0x22
 8009f32:	f040 80b9 	bne.w	800a0a8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009f3c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f44:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009f46:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009f4a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009f4e:	4013      	ands	r3, r2
 8009f50:	b29a      	uxth	r2, r3
 8009f52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009f54:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f5a:	1c9a      	adds	r2, r3, #2
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f040 809c 	bne.w	800a0b8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f88:	e853 3f00 	ldrex	r3, [r3]
 8009f8c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f94:	667b      	str	r3, [r7, #100]	; 0x64
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f9e:	657b      	str	r3, [r7, #84]	; 0x54
 8009fa0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009fa4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009fa6:	e841 2300 	strex	r3, r2, [r1]
 8009faa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d1e6      	bne.n	8009f80 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3308      	adds	r3, #8
 8009fb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fbc:	e853 3f00 	ldrex	r3, [r3]
 8009fc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc4:	f023 0301 	bic.w	r3, r3, #1
 8009fc8:	663b      	str	r3, [r7, #96]	; 0x60
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	3308      	adds	r3, #8
 8009fd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009fd2:	643a      	str	r2, [r7, #64]	; 0x40
 8009fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009fd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009fda:	e841 2300 	strex	r3, r2, [r1]
 8009fde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d1e5      	bne.n	8009fb2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2220      	movs	r2, #32
 8009fea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a004:	2b00      	cmp	r3, #0
 800a006:	d018      	beq.n	800a03a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a00e:	6a3b      	ldr	r3, [r7, #32]
 800a010:	e853 3f00 	ldrex	r3, [r3]
 800a014:	61fb      	str	r3, [r7, #28]
   return(result);
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a01c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	461a      	mov	r2, r3
 800a024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a026:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a028:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a02a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a02c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a02e:	e841 2300 	strex	r3, r2, [r1]
 800a032:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a036:	2b00      	cmp	r3, #0
 800a038:	d1e6      	bne.n	800a008 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d12e      	bne.n	800a0a0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	e853 3f00 	ldrex	r3, [r3]
 800a054:	60bb      	str	r3, [r7, #8]
   return(result);
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	f023 0310 	bic.w	r3, r3, #16
 800a05c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	461a      	mov	r2, r3
 800a064:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a066:	61bb      	str	r3, [r7, #24]
 800a068:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06a:	6979      	ldr	r1, [r7, #20]
 800a06c:	69ba      	ldr	r2, [r7, #24]
 800a06e:	e841 2300 	strex	r3, r2, [r1]
 800a072:	613b      	str	r3, [r7, #16]
   return(result);
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1e6      	bne.n	800a048 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	69db      	ldr	r3, [r3, #28]
 800a080:	f003 0310 	and.w	r3, r3, #16
 800a084:	2b10      	cmp	r3, #16
 800a086:	d103      	bne.n	800a090 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2210      	movs	r2, #16
 800a08e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a096:	4619      	mov	r1, r3
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f7ff f94f 	bl	800933c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a09e:	e00b      	b.n	800a0b8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7f9 f801 	bl	80030a8 <HAL_UART_RxCpltCallback>
}
 800a0a6:	e007      	b.n	800a0b8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	699a      	ldr	r2, [r3, #24]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f042 0208 	orr.w	r2, r2, #8
 800a0b6:	619a      	str	r2, [r3, #24]
}
 800a0b8:	bf00      	nop
 800a0ba:	3770      	adds	r7, #112	; 0x70
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <malloc>:
 800a0d4:	4b02      	ldr	r3, [pc, #8]	; (800a0e0 <malloc+0xc>)
 800a0d6:	4601      	mov	r1, r0
 800a0d8:	6818      	ldr	r0, [r3, #0]
 800a0da:	f000 b82b 	b.w	800a134 <_malloc_r>
 800a0de:	bf00      	nop
 800a0e0:	2000022c 	.word	0x2000022c

0800a0e4 <free>:
 800a0e4:	4b02      	ldr	r3, [pc, #8]	; (800a0f0 <free+0xc>)
 800a0e6:	4601      	mov	r1, r0
 800a0e8:	6818      	ldr	r0, [r3, #0]
 800a0ea:	f002 bbab 	b.w	800c844 <_free_r>
 800a0ee:	bf00      	nop
 800a0f0:	2000022c 	.word	0x2000022c

0800a0f4 <sbrk_aligned>:
 800a0f4:	b570      	push	{r4, r5, r6, lr}
 800a0f6:	4e0e      	ldr	r6, [pc, #56]	; (800a130 <sbrk_aligned+0x3c>)
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	6831      	ldr	r1, [r6, #0]
 800a0fc:	4605      	mov	r5, r0
 800a0fe:	b911      	cbnz	r1, 800a106 <sbrk_aligned+0x12>
 800a100:	f001 fcc2 	bl	800ba88 <_sbrk_r>
 800a104:	6030      	str	r0, [r6, #0]
 800a106:	4621      	mov	r1, r4
 800a108:	4628      	mov	r0, r5
 800a10a:	f001 fcbd 	bl	800ba88 <_sbrk_r>
 800a10e:	1c43      	adds	r3, r0, #1
 800a110:	d00a      	beq.n	800a128 <sbrk_aligned+0x34>
 800a112:	1cc4      	adds	r4, r0, #3
 800a114:	f024 0403 	bic.w	r4, r4, #3
 800a118:	42a0      	cmp	r0, r4
 800a11a:	d007      	beq.n	800a12c <sbrk_aligned+0x38>
 800a11c:	1a21      	subs	r1, r4, r0
 800a11e:	4628      	mov	r0, r5
 800a120:	f001 fcb2 	bl	800ba88 <_sbrk_r>
 800a124:	3001      	adds	r0, #1
 800a126:	d101      	bne.n	800a12c <sbrk_aligned+0x38>
 800a128:	f04f 34ff 	mov.w	r4, #4294967295
 800a12c:	4620      	mov	r0, r4
 800a12e:	bd70      	pop	{r4, r5, r6, pc}
 800a130:	20000a34 	.word	0x20000a34

0800a134 <_malloc_r>:
 800a134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a138:	1ccd      	adds	r5, r1, #3
 800a13a:	f025 0503 	bic.w	r5, r5, #3
 800a13e:	3508      	adds	r5, #8
 800a140:	2d0c      	cmp	r5, #12
 800a142:	bf38      	it	cc
 800a144:	250c      	movcc	r5, #12
 800a146:	2d00      	cmp	r5, #0
 800a148:	4607      	mov	r7, r0
 800a14a:	db01      	blt.n	800a150 <_malloc_r+0x1c>
 800a14c:	42a9      	cmp	r1, r5
 800a14e:	d905      	bls.n	800a15c <_malloc_r+0x28>
 800a150:	230c      	movs	r3, #12
 800a152:	603b      	str	r3, [r7, #0]
 800a154:	2600      	movs	r6, #0
 800a156:	4630      	mov	r0, r6
 800a158:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a15c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a230 <_malloc_r+0xfc>
 800a160:	f000 f868 	bl	800a234 <__malloc_lock>
 800a164:	f8d8 3000 	ldr.w	r3, [r8]
 800a168:	461c      	mov	r4, r3
 800a16a:	bb5c      	cbnz	r4, 800a1c4 <_malloc_r+0x90>
 800a16c:	4629      	mov	r1, r5
 800a16e:	4638      	mov	r0, r7
 800a170:	f7ff ffc0 	bl	800a0f4 <sbrk_aligned>
 800a174:	1c43      	adds	r3, r0, #1
 800a176:	4604      	mov	r4, r0
 800a178:	d155      	bne.n	800a226 <_malloc_r+0xf2>
 800a17a:	f8d8 4000 	ldr.w	r4, [r8]
 800a17e:	4626      	mov	r6, r4
 800a180:	2e00      	cmp	r6, #0
 800a182:	d145      	bne.n	800a210 <_malloc_r+0xdc>
 800a184:	2c00      	cmp	r4, #0
 800a186:	d048      	beq.n	800a21a <_malloc_r+0xe6>
 800a188:	6823      	ldr	r3, [r4, #0]
 800a18a:	4631      	mov	r1, r6
 800a18c:	4638      	mov	r0, r7
 800a18e:	eb04 0903 	add.w	r9, r4, r3
 800a192:	f001 fc79 	bl	800ba88 <_sbrk_r>
 800a196:	4581      	cmp	r9, r0
 800a198:	d13f      	bne.n	800a21a <_malloc_r+0xe6>
 800a19a:	6821      	ldr	r1, [r4, #0]
 800a19c:	1a6d      	subs	r5, r5, r1
 800a19e:	4629      	mov	r1, r5
 800a1a0:	4638      	mov	r0, r7
 800a1a2:	f7ff ffa7 	bl	800a0f4 <sbrk_aligned>
 800a1a6:	3001      	adds	r0, #1
 800a1a8:	d037      	beq.n	800a21a <_malloc_r+0xe6>
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	442b      	add	r3, r5
 800a1ae:	6023      	str	r3, [r4, #0]
 800a1b0:	f8d8 3000 	ldr.w	r3, [r8]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d038      	beq.n	800a22a <_malloc_r+0xf6>
 800a1b8:	685a      	ldr	r2, [r3, #4]
 800a1ba:	42a2      	cmp	r2, r4
 800a1bc:	d12b      	bne.n	800a216 <_malloc_r+0xe2>
 800a1be:	2200      	movs	r2, #0
 800a1c0:	605a      	str	r2, [r3, #4]
 800a1c2:	e00f      	b.n	800a1e4 <_malloc_r+0xb0>
 800a1c4:	6822      	ldr	r2, [r4, #0]
 800a1c6:	1b52      	subs	r2, r2, r5
 800a1c8:	d41f      	bmi.n	800a20a <_malloc_r+0xd6>
 800a1ca:	2a0b      	cmp	r2, #11
 800a1cc:	d917      	bls.n	800a1fe <_malloc_r+0xca>
 800a1ce:	1961      	adds	r1, r4, r5
 800a1d0:	42a3      	cmp	r3, r4
 800a1d2:	6025      	str	r5, [r4, #0]
 800a1d4:	bf18      	it	ne
 800a1d6:	6059      	strne	r1, [r3, #4]
 800a1d8:	6863      	ldr	r3, [r4, #4]
 800a1da:	bf08      	it	eq
 800a1dc:	f8c8 1000 	streq.w	r1, [r8]
 800a1e0:	5162      	str	r2, [r4, r5]
 800a1e2:	604b      	str	r3, [r1, #4]
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	f104 060b 	add.w	r6, r4, #11
 800a1ea:	f000 f829 	bl	800a240 <__malloc_unlock>
 800a1ee:	f026 0607 	bic.w	r6, r6, #7
 800a1f2:	1d23      	adds	r3, r4, #4
 800a1f4:	1af2      	subs	r2, r6, r3
 800a1f6:	d0ae      	beq.n	800a156 <_malloc_r+0x22>
 800a1f8:	1b9b      	subs	r3, r3, r6
 800a1fa:	50a3      	str	r3, [r4, r2]
 800a1fc:	e7ab      	b.n	800a156 <_malloc_r+0x22>
 800a1fe:	42a3      	cmp	r3, r4
 800a200:	6862      	ldr	r2, [r4, #4]
 800a202:	d1dd      	bne.n	800a1c0 <_malloc_r+0x8c>
 800a204:	f8c8 2000 	str.w	r2, [r8]
 800a208:	e7ec      	b.n	800a1e4 <_malloc_r+0xb0>
 800a20a:	4623      	mov	r3, r4
 800a20c:	6864      	ldr	r4, [r4, #4]
 800a20e:	e7ac      	b.n	800a16a <_malloc_r+0x36>
 800a210:	4634      	mov	r4, r6
 800a212:	6876      	ldr	r6, [r6, #4]
 800a214:	e7b4      	b.n	800a180 <_malloc_r+0x4c>
 800a216:	4613      	mov	r3, r2
 800a218:	e7cc      	b.n	800a1b4 <_malloc_r+0x80>
 800a21a:	230c      	movs	r3, #12
 800a21c:	603b      	str	r3, [r7, #0]
 800a21e:	4638      	mov	r0, r7
 800a220:	f000 f80e 	bl	800a240 <__malloc_unlock>
 800a224:	e797      	b.n	800a156 <_malloc_r+0x22>
 800a226:	6025      	str	r5, [r4, #0]
 800a228:	e7dc      	b.n	800a1e4 <_malloc_r+0xb0>
 800a22a:	605b      	str	r3, [r3, #4]
 800a22c:	deff      	udf	#255	; 0xff
 800a22e:	bf00      	nop
 800a230:	20000a30 	.word	0x20000a30

0800a234 <__malloc_lock>:
 800a234:	4801      	ldr	r0, [pc, #4]	; (800a23c <__malloc_lock+0x8>)
 800a236:	f001 bc73 	b.w	800bb20 <__retarget_lock_acquire_recursive>
 800a23a:	bf00      	nop
 800a23c:	20000b78 	.word	0x20000b78

0800a240 <__malloc_unlock>:
 800a240:	4801      	ldr	r0, [pc, #4]	; (800a248 <__malloc_unlock+0x8>)
 800a242:	f001 bc6e 	b.w	800bb22 <__retarget_lock_release_recursive>
 800a246:	bf00      	nop
 800a248:	20000b78 	.word	0x20000b78

0800a24c <realloc>:
 800a24c:	4b02      	ldr	r3, [pc, #8]	; (800a258 <realloc+0xc>)
 800a24e:	460a      	mov	r2, r1
 800a250:	4601      	mov	r1, r0
 800a252:	6818      	ldr	r0, [r3, #0]
 800a254:	f000 b802 	b.w	800a25c <_realloc_r>
 800a258:	2000022c 	.word	0x2000022c

0800a25c <_realloc_r>:
 800a25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a260:	4680      	mov	r8, r0
 800a262:	4614      	mov	r4, r2
 800a264:	460e      	mov	r6, r1
 800a266:	b921      	cbnz	r1, 800a272 <_realloc_r+0x16>
 800a268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a26c:	4611      	mov	r1, r2
 800a26e:	f7ff bf61 	b.w	800a134 <_malloc_r>
 800a272:	b92a      	cbnz	r2, 800a280 <_realloc_r+0x24>
 800a274:	f002 fae6 	bl	800c844 <_free_r>
 800a278:	4625      	mov	r5, r4
 800a27a:	4628      	mov	r0, r5
 800a27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a280:	f003 fb43 	bl	800d90a <_malloc_usable_size_r>
 800a284:	4284      	cmp	r4, r0
 800a286:	4607      	mov	r7, r0
 800a288:	d802      	bhi.n	800a290 <_realloc_r+0x34>
 800a28a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a28e:	d812      	bhi.n	800a2b6 <_realloc_r+0x5a>
 800a290:	4621      	mov	r1, r4
 800a292:	4640      	mov	r0, r8
 800a294:	f7ff ff4e 	bl	800a134 <_malloc_r>
 800a298:	4605      	mov	r5, r0
 800a29a:	2800      	cmp	r0, #0
 800a29c:	d0ed      	beq.n	800a27a <_realloc_r+0x1e>
 800a29e:	42bc      	cmp	r4, r7
 800a2a0:	4622      	mov	r2, r4
 800a2a2:	4631      	mov	r1, r6
 800a2a4:	bf28      	it	cs
 800a2a6:	463a      	movcs	r2, r7
 800a2a8:	f001 fc3c 	bl	800bb24 <memcpy>
 800a2ac:	4631      	mov	r1, r6
 800a2ae:	4640      	mov	r0, r8
 800a2b0:	f002 fac8 	bl	800c844 <_free_r>
 800a2b4:	e7e1      	b.n	800a27a <_realloc_r+0x1e>
 800a2b6:	4635      	mov	r5, r6
 800a2b8:	e7df      	b.n	800a27a <_realloc_r+0x1e>

0800a2ba <sulp>:
 800a2ba:	b570      	push	{r4, r5, r6, lr}
 800a2bc:	4604      	mov	r4, r0
 800a2be:	460d      	mov	r5, r1
 800a2c0:	ec45 4b10 	vmov	d0, r4, r5
 800a2c4:	4616      	mov	r6, r2
 800a2c6:	f003 f9df 	bl	800d688 <__ulp>
 800a2ca:	ec51 0b10 	vmov	r0, r1, d0
 800a2ce:	b17e      	cbz	r6, 800a2f0 <sulp+0x36>
 800a2d0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a2d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	dd09      	ble.n	800a2f0 <sulp+0x36>
 800a2dc:	051b      	lsls	r3, r3, #20
 800a2de:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a2e2:	2400      	movs	r4, #0
 800a2e4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a2e8:	4622      	mov	r2, r4
 800a2ea:	462b      	mov	r3, r5
 800a2ec:	f7f6 f994 	bl	8000618 <__aeabi_dmul>
 800a2f0:	bd70      	pop	{r4, r5, r6, pc}
 800a2f2:	0000      	movs	r0, r0
 800a2f4:	0000      	movs	r0, r0
	...

0800a2f8 <_strtod_l>:
 800a2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2fc:	ed2d 8b02 	vpush	{d8}
 800a300:	b09b      	sub	sp, #108	; 0x6c
 800a302:	4604      	mov	r4, r0
 800a304:	9213      	str	r2, [sp, #76]	; 0x4c
 800a306:	2200      	movs	r2, #0
 800a308:	9216      	str	r2, [sp, #88]	; 0x58
 800a30a:	460d      	mov	r5, r1
 800a30c:	f04f 0800 	mov.w	r8, #0
 800a310:	f04f 0900 	mov.w	r9, #0
 800a314:	460a      	mov	r2, r1
 800a316:	9215      	str	r2, [sp, #84]	; 0x54
 800a318:	7811      	ldrb	r1, [r2, #0]
 800a31a:	292b      	cmp	r1, #43	; 0x2b
 800a31c:	d04c      	beq.n	800a3b8 <_strtod_l+0xc0>
 800a31e:	d83a      	bhi.n	800a396 <_strtod_l+0x9e>
 800a320:	290d      	cmp	r1, #13
 800a322:	d834      	bhi.n	800a38e <_strtod_l+0x96>
 800a324:	2908      	cmp	r1, #8
 800a326:	d834      	bhi.n	800a392 <_strtod_l+0x9a>
 800a328:	2900      	cmp	r1, #0
 800a32a:	d03d      	beq.n	800a3a8 <_strtod_l+0xb0>
 800a32c:	2200      	movs	r2, #0
 800a32e:	920a      	str	r2, [sp, #40]	; 0x28
 800a330:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a332:	7832      	ldrb	r2, [r6, #0]
 800a334:	2a30      	cmp	r2, #48	; 0x30
 800a336:	f040 80b4 	bne.w	800a4a2 <_strtod_l+0x1aa>
 800a33a:	7872      	ldrb	r2, [r6, #1]
 800a33c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a340:	2a58      	cmp	r2, #88	; 0x58
 800a342:	d170      	bne.n	800a426 <_strtod_l+0x12e>
 800a344:	9302      	str	r3, [sp, #8]
 800a346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a348:	9301      	str	r3, [sp, #4]
 800a34a:	ab16      	add	r3, sp, #88	; 0x58
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	4a8e      	ldr	r2, [pc, #568]	; (800a588 <_strtod_l+0x290>)
 800a350:	ab17      	add	r3, sp, #92	; 0x5c
 800a352:	a915      	add	r1, sp, #84	; 0x54
 800a354:	4620      	mov	r0, r4
 800a356:	f002 fb29 	bl	800c9ac <__gethex>
 800a35a:	f010 070f 	ands.w	r7, r0, #15
 800a35e:	4605      	mov	r5, r0
 800a360:	d005      	beq.n	800a36e <_strtod_l+0x76>
 800a362:	2f06      	cmp	r7, #6
 800a364:	d12a      	bne.n	800a3bc <_strtod_l+0xc4>
 800a366:	3601      	adds	r6, #1
 800a368:	2300      	movs	r3, #0
 800a36a:	9615      	str	r6, [sp, #84]	; 0x54
 800a36c:	930a      	str	r3, [sp, #40]	; 0x28
 800a36e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a370:	2b00      	cmp	r3, #0
 800a372:	f040 857f 	bne.w	800ae74 <_strtod_l+0xb7c>
 800a376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a378:	b1db      	cbz	r3, 800a3b2 <_strtod_l+0xba>
 800a37a:	4642      	mov	r2, r8
 800a37c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a380:	ec43 2b10 	vmov	d0, r2, r3
 800a384:	b01b      	add	sp, #108	; 0x6c
 800a386:	ecbd 8b02 	vpop	{d8}
 800a38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a38e:	2920      	cmp	r1, #32
 800a390:	d1cc      	bne.n	800a32c <_strtod_l+0x34>
 800a392:	3201      	adds	r2, #1
 800a394:	e7bf      	b.n	800a316 <_strtod_l+0x1e>
 800a396:	292d      	cmp	r1, #45	; 0x2d
 800a398:	d1c8      	bne.n	800a32c <_strtod_l+0x34>
 800a39a:	2101      	movs	r1, #1
 800a39c:	910a      	str	r1, [sp, #40]	; 0x28
 800a39e:	1c51      	adds	r1, r2, #1
 800a3a0:	9115      	str	r1, [sp, #84]	; 0x54
 800a3a2:	7852      	ldrb	r2, [r2, #1]
 800a3a4:	2a00      	cmp	r2, #0
 800a3a6:	d1c3      	bne.n	800a330 <_strtod_l+0x38>
 800a3a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a3aa:	9515      	str	r5, [sp, #84]	; 0x54
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f040 855f 	bne.w	800ae70 <_strtod_l+0xb78>
 800a3b2:	4642      	mov	r2, r8
 800a3b4:	464b      	mov	r3, r9
 800a3b6:	e7e3      	b.n	800a380 <_strtod_l+0x88>
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	e7ef      	b.n	800a39c <_strtod_l+0xa4>
 800a3bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a3be:	b13a      	cbz	r2, 800a3d0 <_strtod_l+0xd8>
 800a3c0:	2135      	movs	r1, #53	; 0x35
 800a3c2:	a818      	add	r0, sp, #96	; 0x60
 800a3c4:	f003 fa5d 	bl	800d882 <__copybits>
 800a3c8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f002 fe30 	bl	800d030 <_Bfree>
 800a3d0:	3f01      	subs	r7, #1
 800a3d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a3d4:	2f04      	cmp	r7, #4
 800a3d6:	d806      	bhi.n	800a3e6 <_strtod_l+0xee>
 800a3d8:	e8df f007 	tbb	[pc, r7]
 800a3dc:	201d0314 	.word	0x201d0314
 800a3e0:	14          	.byte	0x14
 800a3e1:	00          	.byte	0x00
 800a3e2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a3e6:	05e9      	lsls	r1, r5, #23
 800a3e8:	bf48      	it	mi
 800a3ea:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a3ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a3f2:	0d1b      	lsrs	r3, r3, #20
 800a3f4:	051b      	lsls	r3, r3, #20
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1b9      	bne.n	800a36e <_strtod_l+0x76>
 800a3fa:	f001 fb67 	bl	800bacc <__errno>
 800a3fe:	2322      	movs	r3, #34	; 0x22
 800a400:	6003      	str	r3, [r0, #0]
 800a402:	e7b4      	b.n	800a36e <_strtod_l+0x76>
 800a404:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a408:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a40c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a410:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a414:	e7e7      	b.n	800a3e6 <_strtod_l+0xee>
 800a416:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a590 <_strtod_l+0x298>
 800a41a:	e7e4      	b.n	800a3e6 <_strtod_l+0xee>
 800a41c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a420:	f04f 38ff 	mov.w	r8, #4294967295
 800a424:	e7df      	b.n	800a3e6 <_strtod_l+0xee>
 800a426:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a428:	1c5a      	adds	r2, r3, #1
 800a42a:	9215      	str	r2, [sp, #84]	; 0x54
 800a42c:	785b      	ldrb	r3, [r3, #1]
 800a42e:	2b30      	cmp	r3, #48	; 0x30
 800a430:	d0f9      	beq.n	800a426 <_strtod_l+0x12e>
 800a432:	2b00      	cmp	r3, #0
 800a434:	d09b      	beq.n	800a36e <_strtod_l+0x76>
 800a436:	2301      	movs	r3, #1
 800a438:	f04f 0a00 	mov.w	sl, #0
 800a43c:	9304      	str	r3, [sp, #16]
 800a43e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a440:	930b      	str	r3, [sp, #44]	; 0x2c
 800a442:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a446:	46d3      	mov	fp, sl
 800a448:	220a      	movs	r2, #10
 800a44a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a44c:	7806      	ldrb	r6, [r0, #0]
 800a44e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a452:	b2d9      	uxtb	r1, r3
 800a454:	2909      	cmp	r1, #9
 800a456:	d926      	bls.n	800a4a6 <_strtod_l+0x1ae>
 800a458:	494c      	ldr	r1, [pc, #304]	; (800a58c <_strtod_l+0x294>)
 800a45a:	2201      	movs	r2, #1
 800a45c:	f001 fac9 	bl	800b9f2 <strncmp>
 800a460:	2800      	cmp	r0, #0
 800a462:	d030      	beq.n	800a4c6 <_strtod_l+0x1ce>
 800a464:	2000      	movs	r0, #0
 800a466:	4632      	mov	r2, r6
 800a468:	9005      	str	r0, [sp, #20]
 800a46a:	465e      	mov	r6, fp
 800a46c:	4603      	mov	r3, r0
 800a46e:	2a65      	cmp	r2, #101	; 0x65
 800a470:	d001      	beq.n	800a476 <_strtod_l+0x17e>
 800a472:	2a45      	cmp	r2, #69	; 0x45
 800a474:	d113      	bne.n	800a49e <_strtod_l+0x1a6>
 800a476:	b91e      	cbnz	r6, 800a480 <_strtod_l+0x188>
 800a478:	9a04      	ldr	r2, [sp, #16]
 800a47a:	4302      	orrs	r2, r0
 800a47c:	d094      	beq.n	800a3a8 <_strtod_l+0xb0>
 800a47e:	2600      	movs	r6, #0
 800a480:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a482:	1c6a      	adds	r2, r5, #1
 800a484:	9215      	str	r2, [sp, #84]	; 0x54
 800a486:	786a      	ldrb	r2, [r5, #1]
 800a488:	2a2b      	cmp	r2, #43	; 0x2b
 800a48a:	d074      	beq.n	800a576 <_strtod_l+0x27e>
 800a48c:	2a2d      	cmp	r2, #45	; 0x2d
 800a48e:	d078      	beq.n	800a582 <_strtod_l+0x28a>
 800a490:	f04f 0c00 	mov.w	ip, #0
 800a494:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a498:	2909      	cmp	r1, #9
 800a49a:	d97f      	bls.n	800a59c <_strtod_l+0x2a4>
 800a49c:	9515      	str	r5, [sp, #84]	; 0x54
 800a49e:	2700      	movs	r7, #0
 800a4a0:	e09e      	b.n	800a5e0 <_strtod_l+0x2e8>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	e7c8      	b.n	800a438 <_strtod_l+0x140>
 800a4a6:	f1bb 0f08 	cmp.w	fp, #8
 800a4aa:	bfd8      	it	le
 800a4ac:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a4ae:	f100 0001 	add.w	r0, r0, #1
 800a4b2:	bfda      	itte	le
 800a4b4:	fb02 3301 	mlale	r3, r2, r1, r3
 800a4b8:	9309      	strle	r3, [sp, #36]	; 0x24
 800a4ba:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a4be:	f10b 0b01 	add.w	fp, fp, #1
 800a4c2:	9015      	str	r0, [sp, #84]	; 0x54
 800a4c4:	e7c1      	b.n	800a44a <_strtod_l+0x152>
 800a4c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4c8:	1c5a      	adds	r2, r3, #1
 800a4ca:	9215      	str	r2, [sp, #84]	; 0x54
 800a4cc:	785a      	ldrb	r2, [r3, #1]
 800a4ce:	f1bb 0f00 	cmp.w	fp, #0
 800a4d2:	d037      	beq.n	800a544 <_strtod_l+0x24c>
 800a4d4:	9005      	str	r0, [sp, #20]
 800a4d6:	465e      	mov	r6, fp
 800a4d8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a4dc:	2b09      	cmp	r3, #9
 800a4de:	d912      	bls.n	800a506 <_strtod_l+0x20e>
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e7c4      	b.n	800a46e <_strtod_l+0x176>
 800a4e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4e6:	1c5a      	adds	r2, r3, #1
 800a4e8:	9215      	str	r2, [sp, #84]	; 0x54
 800a4ea:	785a      	ldrb	r2, [r3, #1]
 800a4ec:	3001      	adds	r0, #1
 800a4ee:	2a30      	cmp	r2, #48	; 0x30
 800a4f0:	d0f8      	beq.n	800a4e4 <_strtod_l+0x1ec>
 800a4f2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a4f6:	2b08      	cmp	r3, #8
 800a4f8:	f200 84c1 	bhi.w	800ae7e <_strtod_l+0xb86>
 800a4fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4fe:	9005      	str	r0, [sp, #20]
 800a500:	2000      	movs	r0, #0
 800a502:	930b      	str	r3, [sp, #44]	; 0x2c
 800a504:	4606      	mov	r6, r0
 800a506:	3a30      	subs	r2, #48	; 0x30
 800a508:	f100 0301 	add.w	r3, r0, #1
 800a50c:	d014      	beq.n	800a538 <_strtod_l+0x240>
 800a50e:	9905      	ldr	r1, [sp, #20]
 800a510:	4419      	add	r1, r3
 800a512:	9105      	str	r1, [sp, #20]
 800a514:	4633      	mov	r3, r6
 800a516:	eb00 0c06 	add.w	ip, r0, r6
 800a51a:	210a      	movs	r1, #10
 800a51c:	4563      	cmp	r3, ip
 800a51e:	d113      	bne.n	800a548 <_strtod_l+0x250>
 800a520:	1833      	adds	r3, r6, r0
 800a522:	2b08      	cmp	r3, #8
 800a524:	f106 0601 	add.w	r6, r6, #1
 800a528:	4406      	add	r6, r0
 800a52a:	dc1a      	bgt.n	800a562 <_strtod_l+0x26a>
 800a52c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a52e:	230a      	movs	r3, #10
 800a530:	fb03 2301 	mla	r3, r3, r1, r2
 800a534:	9309      	str	r3, [sp, #36]	; 0x24
 800a536:	2300      	movs	r3, #0
 800a538:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a53a:	1c51      	adds	r1, r2, #1
 800a53c:	9115      	str	r1, [sp, #84]	; 0x54
 800a53e:	7852      	ldrb	r2, [r2, #1]
 800a540:	4618      	mov	r0, r3
 800a542:	e7c9      	b.n	800a4d8 <_strtod_l+0x1e0>
 800a544:	4658      	mov	r0, fp
 800a546:	e7d2      	b.n	800a4ee <_strtod_l+0x1f6>
 800a548:	2b08      	cmp	r3, #8
 800a54a:	f103 0301 	add.w	r3, r3, #1
 800a54e:	dc03      	bgt.n	800a558 <_strtod_l+0x260>
 800a550:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a552:	434f      	muls	r7, r1
 800a554:	9709      	str	r7, [sp, #36]	; 0x24
 800a556:	e7e1      	b.n	800a51c <_strtod_l+0x224>
 800a558:	2b10      	cmp	r3, #16
 800a55a:	bfd8      	it	le
 800a55c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a560:	e7dc      	b.n	800a51c <_strtod_l+0x224>
 800a562:	2e10      	cmp	r6, #16
 800a564:	bfdc      	itt	le
 800a566:	230a      	movle	r3, #10
 800a568:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a56c:	e7e3      	b.n	800a536 <_strtod_l+0x23e>
 800a56e:	2300      	movs	r3, #0
 800a570:	9305      	str	r3, [sp, #20]
 800a572:	2301      	movs	r3, #1
 800a574:	e780      	b.n	800a478 <_strtod_l+0x180>
 800a576:	f04f 0c00 	mov.w	ip, #0
 800a57a:	1caa      	adds	r2, r5, #2
 800a57c:	9215      	str	r2, [sp, #84]	; 0x54
 800a57e:	78aa      	ldrb	r2, [r5, #2]
 800a580:	e788      	b.n	800a494 <_strtod_l+0x19c>
 800a582:	f04f 0c01 	mov.w	ip, #1
 800a586:	e7f8      	b.n	800a57a <_strtod_l+0x282>
 800a588:	0800e4c0 	.word	0x0800e4c0
 800a58c:	0800e4bc 	.word	0x0800e4bc
 800a590:	7ff00000 	.word	0x7ff00000
 800a594:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a596:	1c51      	adds	r1, r2, #1
 800a598:	9115      	str	r1, [sp, #84]	; 0x54
 800a59a:	7852      	ldrb	r2, [r2, #1]
 800a59c:	2a30      	cmp	r2, #48	; 0x30
 800a59e:	d0f9      	beq.n	800a594 <_strtod_l+0x29c>
 800a5a0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a5a4:	2908      	cmp	r1, #8
 800a5a6:	f63f af7a 	bhi.w	800a49e <_strtod_l+0x1a6>
 800a5aa:	3a30      	subs	r2, #48	; 0x30
 800a5ac:	9208      	str	r2, [sp, #32]
 800a5ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a5b0:	920c      	str	r2, [sp, #48]	; 0x30
 800a5b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a5b4:	1c57      	adds	r7, r2, #1
 800a5b6:	9715      	str	r7, [sp, #84]	; 0x54
 800a5b8:	7852      	ldrb	r2, [r2, #1]
 800a5ba:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a5be:	f1be 0f09 	cmp.w	lr, #9
 800a5c2:	d938      	bls.n	800a636 <_strtod_l+0x33e>
 800a5c4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a5c6:	1a7f      	subs	r7, r7, r1
 800a5c8:	2f08      	cmp	r7, #8
 800a5ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a5ce:	dc03      	bgt.n	800a5d8 <_strtod_l+0x2e0>
 800a5d0:	9908      	ldr	r1, [sp, #32]
 800a5d2:	428f      	cmp	r7, r1
 800a5d4:	bfa8      	it	ge
 800a5d6:	460f      	movge	r7, r1
 800a5d8:	f1bc 0f00 	cmp.w	ip, #0
 800a5dc:	d000      	beq.n	800a5e0 <_strtod_l+0x2e8>
 800a5de:	427f      	negs	r7, r7
 800a5e0:	2e00      	cmp	r6, #0
 800a5e2:	d14f      	bne.n	800a684 <_strtod_l+0x38c>
 800a5e4:	9904      	ldr	r1, [sp, #16]
 800a5e6:	4301      	orrs	r1, r0
 800a5e8:	f47f aec1 	bne.w	800a36e <_strtod_l+0x76>
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f47f aedb 	bne.w	800a3a8 <_strtod_l+0xb0>
 800a5f2:	2a69      	cmp	r2, #105	; 0x69
 800a5f4:	d029      	beq.n	800a64a <_strtod_l+0x352>
 800a5f6:	dc26      	bgt.n	800a646 <_strtod_l+0x34e>
 800a5f8:	2a49      	cmp	r2, #73	; 0x49
 800a5fa:	d026      	beq.n	800a64a <_strtod_l+0x352>
 800a5fc:	2a4e      	cmp	r2, #78	; 0x4e
 800a5fe:	f47f aed3 	bne.w	800a3a8 <_strtod_l+0xb0>
 800a602:	499b      	ldr	r1, [pc, #620]	; (800a870 <_strtod_l+0x578>)
 800a604:	a815      	add	r0, sp, #84	; 0x54
 800a606:	f002 fc11 	bl	800ce2c <__match>
 800a60a:	2800      	cmp	r0, #0
 800a60c:	f43f aecc 	beq.w	800a3a8 <_strtod_l+0xb0>
 800a610:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	2b28      	cmp	r3, #40	; 0x28
 800a616:	d12f      	bne.n	800a678 <_strtod_l+0x380>
 800a618:	4996      	ldr	r1, [pc, #600]	; (800a874 <_strtod_l+0x57c>)
 800a61a:	aa18      	add	r2, sp, #96	; 0x60
 800a61c:	a815      	add	r0, sp, #84	; 0x54
 800a61e:	f002 fc19 	bl	800ce54 <__hexnan>
 800a622:	2805      	cmp	r0, #5
 800a624:	d128      	bne.n	800a678 <_strtod_l+0x380>
 800a626:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a628:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a62c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a630:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a634:	e69b      	b.n	800a36e <_strtod_l+0x76>
 800a636:	9f08      	ldr	r7, [sp, #32]
 800a638:	210a      	movs	r1, #10
 800a63a:	fb01 2107 	mla	r1, r1, r7, r2
 800a63e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a642:	9208      	str	r2, [sp, #32]
 800a644:	e7b5      	b.n	800a5b2 <_strtod_l+0x2ba>
 800a646:	2a6e      	cmp	r2, #110	; 0x6e
 800a648:	e7d9      	b.n	800a5fe <_strtod_l+0x306>
 800a64a:	498b      	ldr	r1, [pc, #556]	; (800a878 <_strtod_l+0x580>)
 800a64c:	a815      	add	r0, sp, #84	; 0x54
 800a64e:	f002 fbed 	bl	800ce2c <__match>
 800a652:	2800      	cmp	r0, #0
 800a654:	f43f aea8 	beq.w	800a3a8 <_strtod_l+0xb0>
 800a658:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a65a:	4988      	ldr	r1, [pc, #544]	; (800a87c <_strtod_l+0x584>)
 800a65c:	3b01      	subs	r3, #1
 800a65e:	a815      	add	r0, sp, #84	; 0x54
 800a660:	9315      	str	r3, [sp, #84]	; 0x54
 800a662:	f002 fbe3 	bl	800ce2c <__match>
 800a666:	b910      	cbnz	r0, 800a66e <_strtod_l+0x376>
 800a668:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a66a:	3301      	adds	r3, #1
 800a66c:	9315      	str	r3, [sp, #84]	; 0x54
 800a66e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a88c <_strtod_l+0x594>
 800a672:	f04f 0800 	mov.w	r8, #0
 800a676:	e67a      	b.n	800a36e <_strtod_l+0x76>
 800a678:	4881      	ldr	r0, [pc, #516]	; (800a880 <_strtod_l+0x588>)
 800a67a:	f001 fa61 	bl	800bb40 <nan>
 800a67e:	ec59 8b10 	vmov	r8, r9, d0
 800a682:	e674      	b.n	800a36e <_strtod_l+0x76>
 800a684:	9b05      	ldr	r3, [sp, #20]
 800a686:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a688:	1afb      	subs	r3, r7, r3
 800a68a:	f1bb 0f00 	cmp.w	fp, #0
 800a68e:	bf08      	it	eq
 800a690:	46b3      	moveq	fp, r6
 800a692:	2e10      	cmp	r6, #16
 800a694:	9308      	str	r3, [sp, #32]
 800a696:	4635      	mov	r5, r6
 800a698:	bfa8      	it	ge
 800a69a:	2510      	movge	r5, #16
 800a69c:	f7f5 ff42 	bl	8000524 <__aeabi_ui2d>
 800a6a0:	2e09      	cmp	r6, #9
 800a6a2:	4680      	mov	r8, r0
 800a6a4:	4689      	mov	r9, r1
 800a6a6:	dd13      	ble.n	800a6d0 <_strtod_l+0x3d8>
 800a6a8:	4b76      	ldr	r3, [pc, #472]	; (800a884 <_strtod_l+0x58c>)
 800a6aa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a6ae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a6b2:	f7f5 ffb1 	bl	8000618 <__aeabi_dmul>
 800a6b6:	4680      	mov	r8, r0
 800a6b8:	4650      	mov	r0, sl
 800a6ba:	4689      	mov	r9, r1
 800a6bc:	f7f5 ff32 	bl	8000524 <__aeabi_ui2d>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4640      	mov	r0, r8
 800a6c6:	4649      	mov	r1, r9
 800a6c8:	f7f5 fdf0 	bl	80002ac <__adddf3>
 800a6cc:	4680      	mov	r8, r0
 800a6ce:	4689      	mov	r9, r1
 800a6d0:	2e0f      	cmp	r6, #15
 800a6d2:	dc38      	bgt.n	800a746 <_strtod_l+0x44e>
 800a6d4:	9b08      	ldr	r3, [sp, #32]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f43f ae49 	beq.w	800a36e <_strtod_l+0x76>
 800a6dc:	dd24      	ble.n	800a728 <_strtod_l+0x430>
 800a6de:	2b16      	cmp	r3, #22
 800a6e0:	dc0b      	bgt.n	800a6fa <_strtod_l+0x402>
 800a6e2:	4968      	ldr	r1, [pc, #416]	; (800a884 <_strtod_l+0x58c>)
 800a6e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a6e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6ec:	4642      	mov	r2, r8
 800a6ee:	464b      	mov	r3, r9
 800a6f0:	f7f5 ff92 	bl	8000618 <__aeabi_dmul>
 800a6f4:	4680      	mov	r8, r0
 800a6f6:	4689      	mov	r9, r1
 800a6f8:	e639      	b.n	800a36e <_strtod_l+0x76>
 800a6fa:	9a08      	ldr	r2, [sp, #32]
 800a6fc:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a700:	4293      	cmp	r3, r2
 800a702:	db20      	blt.n	800a746 <_strtod_l+0x44e>
 800a704:	4c5f      	ldr	r4, [pc, #380]	; (800a884 <_strtod_l+0x58c>)
 800a706:	f1c6 060f 	rsb	r6, r6, #15
 800a70a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a70e:	4642      	mov	r2, r8
 800a710:	464b      	mov	r3, r9
 800a712:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a716:	f7f5 ff7f 	bl	8000618 <__aeabi_dmul>
 800a71a:	9b08      	ldr	r3, [sp, #32]
 800a71c:	1b9e      	subs	r6, r3, r6
 800a71e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a722:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a726:	e7e3      	b.n	800a6f0 <_strtod_l+0x3f8>
 800a728:	9b08      	ldr	r3, [sp, #32]
 800a72a:	3316      	adds	r3, #22
 800a72c:	db0b      	blt.n	800a746 <_strtod_l+0x44e>
 800a72e:	9b05      	ldr	r3, [sp, #20]
 800a730:	1bdf      	subs	r7, r3, r7
 800a732:	4b54      	ldr	r3, [pc, #336]	; (800a884 <_strtod_l+0x58c>)
 800a734:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a73c:	4640      	mov	r0, r8
 800a73e:	4649      	mov	r1, r9
 800a740:	f7f6 f894 	bl	800086c <__aeabi_ddiv>
 800a744:	e7d6      	b.n	800a6f4 <_strtod_l+0x3fc>
 800a746:	9b08      	ldr	r3, [sp, #32]
 800a748:	1b75      	subs	r5, r6, r5
 800a74a:	441d      	add	r5, r3
 800a74c:	2d00      	cmp	r5, #0
 800a74e:	dd70      	ble.n	800a832 <_strtod_l+0x53a>
 800a750:	f015 030f 	ands.w	r3, r5, #15
 800a754:	d00a      	beq.n	800a76c <_strtod_l+0x474>
 800a756:	494b      	ldr	r1, [pc, #300]	; (800a884 <_strtod_l+0x58c>)
 800a758:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a75c:	4642      	mov	r2, r8
 800a75e:	464b      	mov	r3, r9
 800a760:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a764:	f7f5 ff58 	bl	8000618 <__aeabi_dmul>
 800a768:	4680      	mov	r8, r0
 800a76a:	4689      	mov	r9, r1
 800a76c:	f035 050f 	bics.w	r5, r5, #15
 800a770:	d04d      	beq.n	800a80e <_strtod_l+0x516>
 800a772:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a776:	dd22      	ble.n	800a7be <_strtod_l+0x4c6>
 800a778:	2500      	movs	r5, #0
 800a77a:	46ab      	mov	fp, r5
 800a77c:	9509      	str	r5, [sp, #36]	; 0x24
 800a77e:	9505      	str	r5, [sp, #20]
 800a780:	2322      	movs	r3, #34	; 0x22
 800a782:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a88c <_strtod_l+0x594>
 800a786:	6023      	str	r3, [r4, #0]
 800a788:	f04f 0800 	mov.w	r8, #0
 800a78c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f43f aded 	beq.w	800a36e <_strtod_l+0x76>
 800a794:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a796:	4620      	mov	r0, r4
 800a798:	f002 fc4a 	bl	800d030 <_Bfree>
 800a79c:	9905      	ldr	r1, [sp, #20]
 800a79e:	4620      	mov	r0, r4
 800a7a0:	f002 fc46 	bl	800d030 <_Bfree>
 800a7a4:	4659      	mov	r1, fp
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f002 fc42 	bl	800d030 <_Bfree>
 800a7ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f002 fc3e 	bl	800d030 <_Bfree>
 800a7b4:	4629      	mov	r1, r5
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f002 fc3a 	bl	800d030 <_Bfree>
 800a7bc:	e5d7      	b.n	800a36e <_strtod_l+0x76>
 800a7be:	4b32      	ldr	r3, [pc, #200]	; (800a888 <_strtod_l+0x590>)
 800a7c0:	9304      	str	r3, [sp, #16]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	112d      	asrs	r5, r5, #4
 800a7c6:	4640      	mov	r0, r8
 800a7c8:	4649      	mov	r1, r9
 800a7ca:	469a      	mov	sl, r3
 800a7cc:	2d01      	cmp	r5, #1
 800a7ce:	dc21      	bgt.n	800a814 <_strtod_l+0x51c>
 800a7d0:	b10b      	cbz	r3, 800a7d6 <_strtod_l+0x4de>
 800a7d2:	4680      	mov	r8, r0
 800a7d4:	4689      	mov	r9, r1
 800a7d6:	492c      	ldr	r1, [pc, #176]	; (800a888 <_strtod_l+0x590>)
 800a7d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a7dc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a7e0:	4642      	mov	r2, r8
 800a7e2:	464b      	mov	r3, r9
 800a7e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7e8:	f7f5 ff16 	bl	8000618 <__aeabi_dmul>
 800a7ec:	4b27      	ldr	r3, [pc, #156]	; (800a88c <_strtod_l+0x594>)
 800a7ee:	460a      	mov	r2, r1
 800a7f0:	400b      	ands	r3, r1
 800a7f2:	4927      	ldr	r1, [pc, #156]	; (800a890 <_strtod_l+0x598>)
 800a7f4:	428b      	cmp	r3, r1
 800a7f6:	4680      	mov	r8, r0
 800a7f8:	d8be      	bhi.n	800a778 <_strtod_l+0x480>
 800a7fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a7fe:	428b      	cmp	r3, r1
 800a800:	bf86      	itte	hi
 800a802:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a894 <_strtod_l+0x59c>
 800a806:	f04f 38ff 	movhi.w	r8, #4294967295
 800a80a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a80e:	2300      	movs	r3, #0
 800a810:	9304      	str	r3, [sp, #16]
 800a812:	e07b      	b.n	800a90c <_strtod_l+0x614>
 800a814:	07ea      	lsls	r2, r5, #31
 800a816:	d505      	bpl.n	800a824 <_strtod_l+0x52c>
 800a818:	9b04      	ldr	r3, [sp, #16]
 800a81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81e:	f7f5 fefb 	bl	8000618 <__aeabi_dmul>
 800a822:	2301      	movs	r3, #1
 800a824:	9a04      	ldr	r2, [sp, #16]
 800a826:	3208      	adds	r2, #8
 800a828:	f10a 0a01 	add.w	sl, sl, #1
 800a82c:	106d      	asrs	r5, r5, #1
 800a82e:	9204      	str	r2, [sp, #16]
 800a830:	e7cc      	b.n	800a7cc <_strtod_l+0x4d4>
 800a832:	d0ec      	beq.n	800a80e <_strtod_l+0x516>
 800a834:	426d      	negs	r5, r5
 800a836:	f015 020f 	ands.w	r2, r5, #15
 800a83a:	d00a      	beq.n	800a852 <_strtod_l+0x55a>
 800a83c:	4b11      	ldr	r3, [pc, #68]	; (800a884 <_strtod_l+0x58c>)
 800a83e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a842:	4640      	mov	r0, r8
 800a844:	4649      	mov	r1, r9
 800a846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84a:	f7f6 f80f 	bl	800086c <__aeabi_ddiv>
 800a84e:	4680      	mov	r8, r0
 800a850:	4689      	mov	r9, r1
 800a852:	112d      	asrs	r5, r5, #4
 800a854:	d0db      	beq.n	800a80e <_strtod_l+0x516>
 800a856:	2d1f      	cmp	r5, #31
 800a858:	dd1e      	ble.n	800a898 <_strtod_l+0x5a0>
 800a85a:	2500      	movs	r5, #0
 800a85c:	46ab      	mov	fp, r5
 800a85e:	9509      	str	r5, [sp, #36]	; 0x24
 800a860:	9505      	str	r5, [sp, #20]
 800a862:	2322      	movs	r3, #34	; 0x22
 800a864:	f04f 0800 	mov.w	r8, #0
 800a868:	f04f 0900 	mov.w	r9, #0
 800a86c:	6023      	str	r3, [r4, #0]
 800a86e:	e78d      	b.n	800a78c <_strtod_l+0x494>
 800a870:	0800e61e 	.word	0x0800e61e
 800a874:	0800e4d4 	.word	0x0800e4d4
 800a878:	0800e616 	.word	0x0800e616
 800a87c:	0800e650 	.word	0x0800e650
 800a880:	0800e8e0 	.word	0x0800e8e0
 800a884:	0800e7c0 	.word	0x0800e7c0
 800a888:	0800e798 	.word	0x0800e798
 800a88c:	7ff00000 	.word	0x7ff00000
 800a890:	7ca00000 	.word	0x7ca00000
 800a894:	7fefffff 	.word	0x7fefffff
 800a898:	f015 0310 	ands.w	r3, r5, #16
 800a89c:	bf18      	it	ne
 800a89e:	236a      	movne	r3, #106	; 0x6a
 800a8a0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ac44 <_strtod_l+0x94c>
 800a8a4:	9304      	str	r3, [sp, #16]
 800a8a6:	4640      	mov	r0, r8
 800a8a8:	4649      	mov	r1, r9
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	07ea      	lsls	r2, r5, #31
 800a8ae:	d504      	bpl.n	800a8ba <_strtod_l+0x5c2>
 800a8b0:	e9da 2300 	ldrd	r2, r3, [sl]
 800a8b4:	f7f5 feb0 	bl	8000618 <__aeabi_dmul>
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	106d      	asrs	r5, r5, #1
 800a8bc:	f10a 0a08 	add.w	sl, sl, #8
 800a8c0:	d1f4      	bne.n	800a8ac <_strtod_l+0x5b4>
 800a8c2:	b10b      	cbz	r3, 800a8c8 <_strtod_l+0x5d0>
 800a8c4:	4680      	mov	r8, r0
 800a8c6:	4689      	mov	r9, r1
 800a8c8:	9b04      	ldr	r3, [sp, #16]
 800a8ca:	b1bb      	cbz	r3, 800a8fc <_strtod_l+0x604>
 800a8cc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a8d0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	4649      	mov	r1, r9
 800a8d8:	dd10      	ble.n	800a8fc <_strtod_l+0x604>
 800a8da:	2b1f      	cmp	r3, #31
 800a8dc:	f340 811e 	ble.w	800ab1c <_strtod_l+0x824>
 800a8e0:	2b34      	cmp	r3, #52	; 0x34
 800a8e2:	bfde      	ittt	le
 800a8e4:	f04f 33ff 	movle.w	r3, #4294967295
 800a8e8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a8ec:	4093      	lslle	r3, r2
 800a8ee:	f04f 0800 	mov.w	r8, #0
 800a8f2:	bfcc      	ite	gt
 800a8f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a8f8:	ea03 0901 	andle.w	r9, r3, r1
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	2300      	movs	r3, #0
 800a900:	4640      	mov	r0, r8
 800a902:	4649      	mov	r1, r9
 800a904:	f7f6 f8f0 	bl	8000ae8 <__aeabi_dcmpeq>
 800a908:	2800      	cmp	r0, #0
 800a90a:	d1a6      	bne.n	800a85a <_strtod_l+0x562>
 800a90c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a912:	4633      	mov	r3, r6
 800a914:	465a      	mov	r2, fp
 800a916:	4620      	mov	r0, r4
 800a918:	f002 fbf2 	bl	800d100 <__s2b>
 800a91c:	9009      	str	r0, [sp, #36]	; 0x24
 800a91e:	2800      	cmp	r0, #0
 800a920:	f43f af2a 	beq.w	800a778 <_strtod_l+0x480>
 800a924:	9a08      	ldr	r2, [sp, #32]
 800a926:	9b05      	ldr	r3, [sp, #20]
 800a928:	2a00      	cmp	r2, #0
 800a92a:	eba3 0307 	sub.w	r3, r3, r7
 800a92e:	bfa8      	it	ge
 800a930:	2300      	movge	r3, #0
 800a932:	930c      	str	r3, [sp, #48]	; 0x30
 800a934:	2500      	movs	r5, #0
 800a936:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a93a:	9312      	str	r3, [sp, #72]	; 0x48
 800a93c:	46ab      	mov	fp, r5
 800a93e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a940:	4620      	mov	r0, r4
 800a942:	6859      	ldr	r1, [r3, #4]
 800a944:	f002 fb34 	bl	800cfb0 <_Balloc>
 800a948:	9005      	str	r0, [sp, #20]
 800a94a:	2800      	cmp	r0, #0
 800a94c:	f43f af18 	beq.w	800a780 <_strtod_l+0x488>
 800a950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a952:	691a      	ldr	r2, [r3, #16]
 800a954:	3202      	adds	r2, #2
 800a956:	f103 010c 	add.w	r1, r3, #12
 800a95a:	0092      	lsls	r2, r2, #2
 800a95c:	300c      	adds	r0, #12
 800a95e:	f001 f8e1 	bl	800bb24 <memcpy>
 800a962:	ec49 8b10 	vmov	d0, r8, r9
 800a966:	aa18      	add	r2, sp, #96	; 0x60
 800a968:	a917      	add	r1, sp, #92	; 0x5c
 800a96a:	4620      	mov	r0, r4
 800a96c:	f002 fefc 	bl	800d768 <__d2b>
 800a970:	ec49 8b18 	vmov	d8, r8, r9
 800a974:	9016      	str	r0, [sp, #88]	; 0x58
 800a976:	2800      	cmp	r0, #0
 800a978:	f43f af02 	beq.w	800a780 <_strtod_l+0x488>
 800a97c:	2101      	movs	r1, #1
 800a97e:	4620      	mov	r0, r4
 800a980:	f002 fc56 	bl	800d230 <__i2b>
 800a984:	4683      	mov	fp, r0
 800a986:	2800      	cmp	r0, #0
 800a988:	f43f aefa 	beq.w	800a780 <_strtod_l+0x488>
 800a98c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a98e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a990:	2e00      	cmp	r6, #0
 800a992:	bfab      	itete	ge
 800a994:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a996:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a998:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a99a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a99e:	bfac      	ite	ge
 800a9a0:	eb06 0a03 	addge.w	sl, r6, r3
 800a9a4:	1b9f      	sublt	r7, r3, r6
 800a9a6:	9b04      	ldr	r3, [sp, #16]
 800a9a8:	1af6      	subs	r6, r6, r3
 800a9aa:	4416      	add	r6, r2
 800a9ac:	4ba0      	ldr	r3, [pc, #640]	; (800ac30 <_strtod_l+0x938>)
 800a9ae:	3e01      	subs	r6, #1
 800a9b0:	429e      	cmp	r6, r3
 800a9b2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a9b6:	f280 80c4 	bge.w	800ab42 <_strtod_l+0x84a>
 800a9ba:	1b9b      	subs	r3, r3, r6
 800a9bc:	2b1f      	cmp	r3, #31
 800a9be:	eba2 0203 	sub.w	r2, r2, r3
 800a9c2:	f04f 0101 	mov.w	r1, #1
 800a9c6:	f300 80b0 	bgt.w	800ab2a <_strtod_l+0x832>
 800a9ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a9ce:	930e      	str	r3, [sp, #56]	; 0x38
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	930d      	str	r3, [sp, #52]	; 0x34
 800a9d4:	eb0a 0602 	add.w	r6, sl, r2
 800a9d8:	9b04      	ldr	r3, [sp, #16]
 800a9da:	45b2      	cmp	sl, r6
 800a9dc:	4417      	add	r7, r2
 800a9de:	441f      	add	r7, r3
 800a9e0:	4653      	mov	r3, sl
 800a9e2:	bfa8      	it	ge
 800a9e4:	4633      	movge	r3, r6
 800a9e6:	42bb      	cmp	r3, r7
 800a9e8:	bfa8      	it	ge
 800a9ea:	463b      	movge	r3, r7
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	bfc2      	ittt	gt
 800a9f0:	1af6      	subgt	r6, r6, r3
 800a9f2:	1aff      	subgt	r7, r7, r3
 800a9f4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a9f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	dd17      	ble.n	800aa2e <_strtod_l+0x736>
 800a9fe:	4659      	mov	r1, fp
 800aa00:	461a      	mov	r2, r3
 800aa02:	4620      	mov	r0, r4
 800aa04:	f002 fcd4 	bl	800d3b0 <__pow5mult>
 800aa08:	4683      	mov	fp, r0
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	f43f aeb8 	beq.w	800a780 <_strtod_l+0x488>
 800aa10:	4601      	mov	r1, r0
 800aa12:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aa14:	4620      	mov	r0, r4
 800aa16:	f002 fc21 	bl	800d25c <__multiply>
 800aa1a:	900b      	str	r0, [sp, #44]	; 0x2c
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	f43f aeaf 	beq.w	800a780 <_strtod_l+0x488>
 800aa22:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aa24:	4620      	mov	r0, r4
 800aa26:	f002 fb03 	bl	800d030 <_Bfree>
 800aa2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa2c:	9316      	str	r3, [sp, #88]	; 0x58
 800aa2e:	2e00      	cmp	r6, #0
 800aa30:	f300 808c 	bgt.w	800ab4c <_strtod_l+0x854>
 800aa34:	9b08      	ldr	r3, [sp, #32]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	dd08      	ble.n	800aa4c <_strtod_l+0x754>
 800aa3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aa3c:	9905      	ldr	r1, [sp, #20]
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f002 fcb6 	bl	800d3b0 <__pow5mult>
 800aa44:	9005      	str	r0, [sp, #20]
 800aa46:	2800      	cmp	r0, #0
 800aa48:	f43f ae9a 	beq.w	800a780 <_strtod_l+0x488>
 800aa4c:	2f00      	cmp	r7, #0
 800aa4e:	dd08      	ble.n	800aa62 <_strtod_l+0x76a>
 800aa50:	9905      	ldr	r1, [sp, #20]
 800aa52:	463a      	mov	r2, r7
 800aa54:	4620      	mov	r0, r4
 800aa56:	f002 fd05 	bl	800d464 <__lshift>
 800aa5a:	9005      	str	r0, [sp, #20]
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	f43f ae8f 	beq.w	800a780 <_strtod_l+0x488>
 800aa62:	f1ba 0f00 	cmp.w	sl, #0
 800aa66:	dd08      	ble.n	800aa7a <_strtod_l+0x782>
 800aa68:	4659      	mov	r1, fp
 800aa6a:	4652      	mov	r2, sl
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f002 fcf9 	bl	800d464 <__lshift>
 800aa72:	4683      	mov	fp, r0
 800aa74:	2800      	cmp	r0, #0
 800aa76:	f43f ae83 	beq.w	800a780 <_strtod_l+0x488>
 800aa7a:	9a05      	ldr	r2, [sp, #20]
 800aa7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f002 fd78 	bl	800d574 <__mdiff>
 800aa84:	4605      	mov	r5, r0
 800aa86:	2800      	cmp	r0, #0
 800aa88:	f43f ae7a 	beq.w	800a780 <_strtod_l+0x488>
 800aa8c:	68c3      	ldr	r3, [r0, #12]
 800aa8e:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa90:	2300      	movs	r3, #0
 800aa92:	60c3      	str	r3, [r0, #12]
 800aa94:	4659      	mov	r1, fp
 800aa96:	f002 fd51 	bl	800d53c <__mcmp>
 800aa9a:	2800      	cmp	r0, #0
 800aa9c:	da60      	bge.n	800ab60 <_strtod_l+0x868>
 800aa9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaa0:	ea53 0308 	orrs.w	r3, r3, r8
 800aaa4:	f040 8084 	bne.w	800abb0 <_strtod_l+0x8b8>
 800aaa8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d17f      	bne.n	800abb0 <_strtod_l+0x8b8>
 800aab0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aab4:	0d1b      	lsrs	r3, r3, #20
 800aab6:	051b      	lsls	r3, r3, #20
 800aab8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aabc:	d978      	bls.n	800abb0 <_strtod_l+0x8b8>
 800aabe:	696b      	ldr	r3, [r5, #20]
 800aac0:	b913      	cbnz	r3, 800aac8 <_strtod_l+0x7d0>
 800aac2:	692b      	ldr	r3, [r5, #16]
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	dd73      	ble.n	800abb0 <_strtod_l+0x8b8>
 800aac8:	4629      	mov	r1, r5
 800aaca:	2201      	movs	r2, #1
 800aacc:	4620      	mov	r0, r4
 800aace:	f002 fcc9 	bl	800d464 <__lshift>
 800aad2:	4659      	mov	r1, fp
 800aad4:	4605      	mov	r5, r0
 800aad6:	f002 fd31 	bl	800d53c <__mcmp>
 800aada:	2800      	cmp	r0, #0
 800aadc:	dd68      	ble.n	800abb0 <_strtod_l+0x8b8>
 800aade:	9904      	ldr	r1, [sp, #16]
 800aae0:	4a54      	ldr	r2, [pc, #336]	; (800ac34 <_strtod_l+0x93c>)
 800aae2:	464b      	mov	r3, r9
 800aae4:	2900      	cmp	r1, #0
 800aae6:	f000 8084 	beq.w	800abf2 <_strtod_l+0x8fa>
 800aaea:	ea02 0109 	and.w	r1, r2, r9
 800aaee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aaf2:	dc7e      	bgt.n	800abf2 <_strtod_l+0x8fa>
 800aaf4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aaf8:	f77f aeb3 	ble.w	800a862 <_strtod_l+0x56a>
 800aafc:	4b4e      	ldr	r3, [pc, #312]	; (800ac38 <_strtod_l+0x940>)
 800aafe:	4640      	mov	r0, r8
 800ab00:	4649      	mov	r1, r9
 800ab02:	2200      	movs	r2, #0
 800ab04:	f7f5 fd88 	bl	8000618 <__aeabi_dmul>
 800ab08:	4b4a      	ldr	r3, [pc, #296]	; (800ac34 <_strtod_l+0x93c>)
 800ab0a:	400b      	ands	r3, r1
 800ab0c:	4680      	mov	r8, r0
 800ab0e:	4689      	mov	r9, r1
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	f47f ae3f 	bne.w	800a794 <_strtod_l+0x49c>
 800ab16:	2322      	movs	r3, #34	; 0x22
 800ab18:	6023      	str	r3, [r4, #0]
 800ab1a:	e63b      	b.n	800a794 <_strtod_l+0x49c>
 800ab1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab20:	fa02 f303 	lsl.w	r3, r2, r3
 800ab24:	ea03 0808 	and.w	r8, r3, r8
 800ab28:	e6e8      	b.n	800a8fc <_strtod_l+0x604>
 800ab2a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ab2e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ab32:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ab36:	36e2      	adds	r6, #226	; 0xe2
 800ab38:	fa01 f306 	lsl.w	r3, r1, r6
 800ab3c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ab40:	e748      	b.n	800a9d4 <_strtod_l+0x6dc>
 800ab42:	2100      	movs	r1, #0
 800ab44:	2301      	movs	r3, #1
 800ab46:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800ab4a:	e743      	b.n	800a9d4 <_strtod_l+0x6dc>
 800ab4c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab4e:	4632      	mov	r2, r6
 800ab50:	4620      	mov	r0, r4
 800ab52:	f002 fc87 	bl	800d464 <__lshift>
 800ab56:	9016      	str	r0, [sp, #88]	; 0x58
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	f47f af6b 	bne.w	800aa34 <_strtod_l+0x73c>
 800ab5e:	e60f      	b.n	800a780 <_strtod_l+0x488>
 800ab60:	46ca      	mov	sl, r9
 800ab62:	d171      	bne.n	800ac48 <_strtod_l+0x950>
 800ab64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab66:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab6a:	b352      	cbz	r2, 800abc2 <_strtod_l+0x8ca>
 800ab6c:	4a33      	ldr	r2, [pc, #204]	; (800ac3c <_strtod_l+0x944>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d12a      	bne.n	800abc8 <_strtod_l+0x8d0>
 800ab72:	9b04      	ldr	r3, [sp, #16]
 800ab74:	4641      	mov	r1, r8
 800ab76:	b1fb      	cbz	r3, 800abb8 <_strtod_l+0x8c0>
 800ab78:	4b2e      	ldr	r3, [pc, #184]	; (800ac34 <_strtod_l+0x93c>)
 800ab7a:	ea09 0303 	and.w	r3, r9, r3
 800ab7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ab82:	f04f 32ff 	mov.w	r2, #4294967295
 800ab86:	d81a      	bhi.n	800abbe <_strtod_l+0x8c6>
 800ab88:	0d1b      	lsrs	r3, r3, #20
 800ab8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ab8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab92:	4299      	cmp	r1, r3
 800ab94:	d118      	bne.n	800abc8 <_strtod_l+0x8d0>
 800ab96:	4b2a      	ldr	r3, [pc, #168]	; (800ac40 <_strtod_l+0x948>)
 800ab98:	459a      	cmp	sl, r3
 800ab9a:	d102      	bne.n	800aba2 <_strtod_l+0x8aa>
 800ab9c:	3101      	adds	r1, #1
 800ab9e:	f43f adef 	beq.w	800a780 <_strtod_l+0x488>
 800aba2:	4b24      	ldr	r3, [pc, #144]	; (800ac34 <_strtod_l+0x93c>)
 800aba4:	ea0a 0303 	and.w	r3, sl, r3
 800aba8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800abac:	f04f 0800 	mov.w	r8, #0
 800abb0:	9b04      	ldr	r3, [sp, #16]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1a2      	bne.n	800aafc <_strtod_l+0x804>
 800abb6:	e5ed      	b.n	800a794 <_strtod_l+0x49c>
 800abb8:	f04f 33ff 	mov.w	r3, #4294967295
 800abbc:	e7e9      	b.n	800ab92 <_strtod_l+0x89a>
 800abbe:	4613      	mov	r3, r2
 800abc0:	e7e7      	b.n	800ab92 <_strtod_l+0x89a>
 800abc2:	ea53 0308 	orrs.w	r3, r3, r8
 800abc6:	d08a      	beq.n	800aade <_strtod_l+0x7e6>
 800abc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abca:	b1e3      	cbz	r3, 800ac06 <_strtod_l+0x90e>
 800abcc:	ea13 0f0a 	tst.w	r3, sl
 800abd0:	d0ee      	beq.n	800abb0 <_strtod_l+0x8b8>
 800abd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abd4:	9a04      	ldr	r2, [sp, #16]
 800abd6:	4640      	mov	r0, r8
 800abd8:	4649      	mov	r1, r9
 800abda:	b1c3      	cbz	r3, 800ac0e <_strtod_l+0x916>
 800abdc:	f7ff fb6d 	bl	800a2ba <sulp>
 800abe0:	4602      	mov	r2, r0
 800abe2:	460b      	mov	r3, r1
 800abe4:	ec51 0b18 	vmov	r0, r1, d8
 800abe8:	f7f5 fb60 	bl	80002ac <__adddf3>
 800abec:	4680      	mov	r8, r0
 800abee:	4689      	mov	r9, r1
 800abf0:	e7de      	b.n	800abb0 <_strtod_l+0x8b8>
 800abf2:	4013      	ands	r3, r2
 800abf4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800abf8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800abfc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ac00:	f04f 38ff 	mov.w	r8, #4294967295
 800ac04:	e7d4      	b.n	800abb0 <_strtod_l+0x8b8>
 800ac06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac08:	ea13 0f08 	tst.w	r3, r8
 800ac0c:	e7e0      	b.n	800abd0 <_strtod_l+0x8d8>
 800ac0e:	f7ff fb54 	bl	800a2ba <sulp>
 800ac12:	4602      	mov	r2, r0
 800ac14:	460b      	mov	r3, r1
 800ac16:	ec51 0b18 	vmov	r0, r1, d8
 800ac1a:	f7f5 fb45 	bl	80002a8 <__aeabi_dsub>
 800ac1e:	2200      	movs	r2, #0
 800ac20:	2300      	movs	r3, #0
 800ac22:	4680      	mov	r8, r0
 800ac24:	4689      	mov	r9, r1
 800ac26:	f7f5 ff5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d0c0      	beq.n	800abb0 <_strtod_l+0x8b8>
 800ac2e:	e618      	b.n	800a862 <_strtod_l+0x56a>
 800ac30:	fffffc02 	.word	0xfffffc02
 800ac34:	7ff00000 	.word	0x7ff00000
 800ac38:	39500000 	.word	0x39500000
 800ac3c:	000fffff 	.word	0x000fffff
 800ac40:	7fefffff 	.word	0x7fefffff
 800ac44:	0800e4e8 	.word	0x0800e4e8
 800ac48:	4659      	mov	r1, fp
 800ac4a:	4628      	mov	r0, r5
 800ac4c:	f002 fde6 	bl	800d81c <__ratio>
 800ac50:	ec57 6b10 	vmov	r6, r7, d0
 800ac54:	ee10 0a10 	vmov	r0, s0
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac5e:	4639      	mov	r1, r7
 800ac60:	f7f5 ff56 	bl	8000b10 <__aeabi_dcmple>
 800ac64:	2800      	cmp	r0, #0
 800ac66:	d071      	beq.n	800ad4c <_strtod_l+0xa54>
 800ac68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d17c      	bne.n	800ad68 <_strtod_l+0xa70>
 800ac6e:	f1b8 0f00 	cmp.w	r8, #0
 800ac72:	d15a      	bne.n	800ad2a <_strtod_l+0xa32>
 800ac74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d15d      	bne.n	800ad38 <_strtod_l+0xa40>
 800ac7c:	4b90      	ldr	r3, [pc, #576]	; (800aec0 <_strtod_l+0xbc8>)
 800ac7e:	2200      	movs	r2, #0
 800ac80:	4630      	mov	r0, r6
 800ac82:	4639      	mov	r1, r7
 800ac84:	f7f5 ff3a 	bl	8000afc <__aeabi_dcmplt>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	d15c      	bne.n	800ad46 <_strtod_l+0xa4e>
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	4639      	mov	r1, r7
 800ac90:	4b8c      	ldr	r3, [pc, #560]	; (800aec4 <_strtod_l+0xbcc>)
 800ac92:	2200      	movs	r2, #0
 800ac94:	f7f5 fcc0 	bl	8000618 <__aeabi_dmul>
 800ac98:	4606      	mov	r6, r0
 800ac9a:	460f      	mov	r7, r1
 800ac9c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800aca0:	9606      	str	r6, [sp, #24]
 800aca2:	9307      	str	r3, [sp, #28]
 800aca4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aca8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800acac:	4b86      	ldr	r3, [pc, #536]	; (800aec8 <_strtod_l+0xbd0>)
 800acae:	ea0a 0303 	and.w	r3, sl, r3
 800acb2:	930d      	str	r3, [sp, #52]	; 0x34
 800acb4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acb6:	4b85      	ldr	r3, [pc, #532]	; (800aecc <_strtod_l+0xbd4>)
 800acb8:	429a      	cmp	r2, r3
 800acba:	f040 8090 	bne.w	800adde <_strtod_l+0xae6>
 800acbe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800acc2:	ec49 8b10 	vmov	d0, r8, r9
 800acc6:	f002 fcdf 	bl	800d688 <__ulp>
 800acca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acce:	ec51 0b10 	vmov	r0, r1, d0
 800acd2:	f7f5 fca1 	bl	8000618 <__aeabi_dmul>
 800acd6:	4642      	mov	r2, r8
 800acd8:	464b      	mov	r3, r9
 800acda:	f7f5 fae7 	bl	80002ac <__adddf3>
 800acde:	460b      	mov	r3, r1
 800ace0:	4979      	ldr	r1, [pc, #484]	; (800aec8 <_strtod_l+0xbd0>)
 800ace2:	4a7b      	ldr	r2, [pc, #492]	; (800aed0 <_strtod_l+0xbd8>)
 800ace4:	4019      	ands	r1, r3
 800ace6:	4291      	cmp	r1, r2
 800ace8:	4680      	mov	r8, r0
 800acea:	d944      	bls.n	800ad76 <_strtod_l+0xa7e>
 800acec:	ee18 2a90 	vmov	r2, s17
 800acf0:	4b78      	ldr	r3, [pc, #480]	; (800aed4 <_strtod_l+0xbdc>)
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d104      	bne.n	800ad00 <_strtod_l+0xa08>
 800acf6:	ee18 3a10 	vmov	r3, s16
 800acfa:	3301      	adds	r3, #1
 800acfc:	f43f ad40 	beq.w	800a780 <_strtod_l+0x488>
 800ad00:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800aed4 <_strtod_l+0xbdc>
 800ad04:	f04f 38ff 	mov.w	r8, #4294967295
 800ad08:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	f002 f990 	bl	800d030 <_Bfree>
 800ad10:	9905      	ldr	r1, [sp, #20]
 800ad12:	4620      	mov	r0, r4
 800ad14:	f002 f98c 	bl	800d030 <_Bfree>
 800ad18:	4659      	mov	r1, fp
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	f002 f988 	bl	800d030 <_Bfree>
 800ad20:	4629      	mov	r1, r5
 800ad22:	4620      	mov	r0, r4
 800ad24:	f002 f984 	bl	800d030 <_Bfree>
 800ad28:	e609      	b.n	800a93e <_strtod_l+0x646>
 800ad2a:	f1b8 0f01 	cmp.w	r8, #1
 800ad2e:	d103      	bne.n	800ad38 <_strtod_l+0xa40>
 800ad30:	f1b9 0f00 	cmp.w	r9, #0
 800ad34:	f43f ad95 	beq.w	800a862 <_strtod_l+0x56a>
 800ad38:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ae90 <_strtod_l+0xb98>
 800ad3c:	4f60      	ldr	r7, [pc, #384]	; (800aec0 <_strtod_l+0xbc8>)
 800ad3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad42:	2600      	movs	r6, #0
 800ad44:	e7ae      	b.n	800aca4 <_strtod_l+0x9ac>
 800ad46:	4f5f      	ldr	r7, [pc, #380]	; (800aec4 <_strtod_l+0xbcc>)
 800ad48:	2600      	movs	r6, #0
 800ad4a:	e7a7      	b.n	800ac9c <_strtod_l+0x9a4>
 800ad4c:	4b5d      	ldr	r3, [pc, #372]	; (800aec4 <_strtod_l+0xbcc>)
 800ad4e:	4630      	mov	r0, r6
 800ad50:	4639      	mov	r1, r7
 800ad52:	2200      	movs	r2, #0
 800ad54:	f7f5 fc60 	bl	8000618 <__aeabi_dmul>
 800ad58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad5a:	4606      	mov	r6, r0
 800ad5c:	460f      	mov	r7, r1
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d09c      	beq.n	800ac9c <_strtod_l+0x9a4>
 800ad62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ad66:	e79d      	b.n	800aca4 <_strtod_l+0x9ac>
 800ad68:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ae98 <_strtod_l+0xba0>
 800ad6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad70:	ec57 6b17 	vmov	r6, r7, d7
 800ad74:	e796      	b.n	800aca4 <_strtod_l+0x9ac>
 800ad76:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ad7a:	9b04      	ldr	r3, [sp, #16]
 800ad7c:	46ca      	mov	sl, r9
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1c2      	bne.n	800ad08 <_strtod_l+0xa10>
 800ad82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad88:	0d1b      	lsrs	r3, r3, #20
 800ad8a:	051b      	lsls	r3, r3, #20
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d1bb      	bne.n	800ad08 <_strtod_l+0xa10>
 800ad90:	4630      	mov	r0, r6
 800ad92:	4639      	mov	r1, r7
 800ad94:	f7f5 ff38 	bl	8000c08 <__aeabi_d2lz>
 800ad98:	f7f5 fc10 	bl	80005bc <__aeabi_l2d>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	460b      	mov	r3, r1
 800ada0:	4630      	mov	r0, r6
 800ada2:	4639      	mov	r1, r7
 800ada4:	f7f5 fa80 	bl	80002a8 <__aeabi_dsub>
 800ada8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800adaa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800adae:	ea43 0308 	orr.w	r3, r3, r8
 800adb2:	4313      	orrs	r3, r2
 800adb4:	4606      	mov	r6, r0
 800adb6:	460f      	mov	r7, r1
 800adb8:	d054      	beq.n	800ae64 <_strtod_l+0xb6c>
 800adba:	a339      	add	r3, pc, #228	; (adr r3, 800aea0 <_strtod_l+0xba8>)
 800adbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc0:	f7f5 fe9c 	bl	8000afc <__aeabi_dcmplt>
 800adc4:	2800      	cmp	r0, #0
 800adc6:	f47f ace5 	bne.w	800a794 <_strtod_l+0x49c>
 800adca:	a337      	add	r3, pc, #220	; (adr r3, 800aea8 <_strtod_l+0xbb0>)
 800adcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add0:	4630      	mov	r0, r6
 800add2:	4639      	mov	r1, r7
 800add4:	f7f5 feb0 	bl	8000b38 <__aeabi_dcmpgt>
 800add8:	2800      	cmp	r0, #0
 800adda:	d095      	beq.n	800ad08 <_strtod_l+0xa10>
 800addc:	e4da      	b.n	800a794 <_strtod_l+0x49c>
 800adde:	9b04      	ldr	r3, [sp, #16]
 800ade0:	b333      	cbz	r3, 800ae30 <_strtod_l+0xb38>
 800ade2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ade4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ade8:	d822      	bhi.n	800ae30 <_strtod_l+0xb38>
 800adea:	a331      	add	r3, pc, #196	; (adr r3, 800aeb0 <_strtod_l+0xbb8>)
 800adec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf0:	4630      	mov	r0, r6
 800adf2:	4639      	mov	r1, r7
 800adf4:	f7f5 fe8c 	bl	8000b10 <__aeabi_dcmple>
 800adf8:	b1a0      	cbz	r0, 800ae24 <_strtod_l+0xb2c>
 800adfa:	4639      	mov	r1, r7
 800adfc:	4630      	mov	r0, r6
 800adfe:	f7f5 fee3 	bl	8000bc8 <__aeabi_d2uiz>
 800ae02:	2801      	cmp	r0, #1
 800ae04:	bf38      	it	cc
 800ae06:	2001      	movcc	r0, #1
 800ae08:	f7f5 fb8c 	bl	8000524 <__aeabi_ui2d>
 800ae0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae0e:	4606      	mov	r6, r0
 800ae10:	460f      	mov	r7, r1
 800ae12:	bb23      	cbnz	r3, 800ae5e <_strtod_l+0xb66>
 800ae14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae18:	9010      	str	r0, [sp, #64]	; 0x40
 800ae1a:	9311      	str	r3, [sp, #68]	; 0x44
 800ae1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ae20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ae24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae28:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ae2c:	1a9b      	subs	r3, r3, r2
 800ae2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae30:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ae34:	eeb0 0a48 	vmov.f32	s0, s16
 800ae38:	eef0 0a68 	vmov.f32	s1, s17
 800ae3c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ae40:	f002 fc22 	bl	800d688 <__ulp>
 800ae44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ae48:	ec53 2b10 	vmov	r2, r3, d0
 800ae4c:	f7f5 fbe4 	bl	8000618 <__aeabi_dmul>
 800ae50:	ec53 2b18 	vmov	r2, r3, d8
 800ae54:	f7f5 fa2a 	bl	80002ac <__adddf3>
 800ae58:	4680      	mov	r8, r0
 800ae5a:	4689      	mov	r9, r1
 800ae5c:	e78d      	b.n	800ad7a <_strtod_l+0xa82>
 800ae5e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ae62:	e7db      	b.n	800ae1c <_strtod_l+0xb24>
 800ae64:	a314      	add	r3, pc, #80	; (adr r3, 800aeb8 <_strtod_l+0xbc0>)
 800ae66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae6a:	f7f5 fe47 	bl	8000afc <__aeabi_dcmplt>
 800ae6e:	e7b3      	b.n	800add8 <_strtod_l+0xae0>
 800ae70:	2300      	movs	r3, #0
 800ae72:	930a      	str	r3, [sp, #40]	; 0x28
 800ae74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ae76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae78:	6013      	str	r3, [r2, #0]
 800ae7a:	f7ff ba7c 	b.w	800a376 <_strtod_l+0x7e>
 800ae7e:	2a65      	cmp	r2, #101	; 0x65
 800ae80:	f43f ab75 	beq.w	800a56e <_strtod_l+0x276>
 800ae84:	2a45      	cmp	r2, #69	; 0x45
 800ae86:	f43f ab72 	beq.w	800a56e <_strtod_l+0x276>
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	f7ff bbaa 	b.w	800a5e4 <_strtod_l+0x2ec>
 800ae90:	00000000 	.word	0x00000000
 800ae94:	bff00000 	.word	0xbff00000
 800ae98:	00000000 	.word	0x00000000
 800ae9c:	3ff00000 	.word	0x3ff00000
 800aea0:	94a03595 	.word	0x94a03595
 800aea4:	3fdfffff 	.word	0x3fdfffff
 800aea8:	35afe535 	.word	0x35afe535
 800aeac:	3fe00000 	.word	0x3fe00000
 800aeb0:	ffc00000 	.word	0xffc00000
 800aeb4:	41dfffff 	.word	0x41dfffff
 800aeb8:	94a03595 	.word	0x94a03595
 800aebc:	3fcfffff 	.word	0x3fcfffff
 800aec0:	3ff00000 	.word	0x3ff00000
 800aec4:	3fe00000 	.word	0x3fe00000
 800aec8:	7ff00000 	.word	0x7ff00000
 800aecc:	7fe00000 	.word	0x7fe00000
 800aed0:	7c9fffff 	.word	0x7c9fffff
 800aed4:	7fefffff 	.word	0x7fefffff

0800aed8 <strtod>:
 800aed8:	460a      	mov	r2, r1
 800aeda:	4601      	mov	r1, r0
 800aedc:	4802      	ldr	r0, [pc, #8]	; (800aee8 <strtod+0x10>)
 800aede:	4b03      	ldr	r3, [pc, #12]	; (800aeec <strtod+0x14>)
 800aee0:	6800      	ldr	r0, [r0, #0]
 800aee2:	f7ff ba09 	b.w	800a2f8 <_strtod_l>
 800aee6:	bf00      	nop
 800aee8:	2000022c 	.word	0x2000022c
 800aeec:	20000074 	.word	0x20000074

0800aef0 <__cvt>:
 800aef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aef4:	ec55 4b10 	vmov	r4, r5, d0
 800aef8:	2d00      	cmp	r5, #0
 800aefa:	460e      	mov	r6, r1
 800aefc:	4619      	mov	r1, r3
 800aefe:	462b      	mov	r3, r5
 800af00:	bfbb      	ittet	lt
 800af02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800af06:	461d      	movlt	r5, r3
 800af08:	2300      	movge	r3, #0
 800af0a:	232d      	movlt	r3, #45	; 0x2d
 800af0c:	700b      	strb	r3, [r1, #0]
 800af0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800af14:	4691      	mov	r9, r2
 800af16:	f023 0820 	bic.w	r8, r3, #32
 800af1a:	bfbc      	itt	lt
 800af1c:	4622      	movlt	r2, r4
 800af1e:	4614      	movlt	r4, r2
 800af20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af24:	d005      	beq.n	800af32 <__cvt+0x42>
 800af26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800af2a:	d100      	bne.n	800af2e <__cvt+0x3e>
 800af2c:	3601      	adds	r6, #1
 800af2e:	2102      	movs	r1, #2
 800af30:	e000      	b.n	800af34 <__cvt+0x44>
 800af32:	2103      	movs	r1, #3
 800af34:	ab03      	add	r3, sp, #12
 800af36:	9301      	str	r3, [sp, #4]
 800af38:	ab02      	add	r3, sp, #8
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	ec45 4b10 	vmov	d0, r4, r5
 800af40:	4653      	mov	r3, sl
 800af42:	4632      	mov	r2, r6
 800af44:	f000 fe8c 	bl	800bc60 <_dtoa_r>
 800af48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800af4c:	4607      	mov	r7, r0
 800af4e:	d102      	bne.n	800af56 <__cvt+0x66>
 800af50:	f019 0f01 	tst.w	r9, #1
 800af54:	d022      	beq.n	800af9c <__cvt+0xac>
 800af56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af5a:	eb07 0906 	add.w	r9, r7, r6
 800af5e:	d110      	bne.n	800af82 <__cvt+0x92>
 800af60:	783b      	ldrb	r3, [r7, #0]
 800af62:	2b30      	cmp	r3, #48	; 0x30
 800af64:	d10a      	bne.n	800af7c <__cvt+0x8c>
 800af66:	2200      	movs	r2, #0
 800af68:	2300      	movs	r3, #0
 800af6a:	4620      	mov	r0, r4
 800af6c:	4629      	mov	r1, r5
 800af6e:	f7f5 fdbb 	bl	8000ae8 <__aeabi_dcmpeq>
 800af72:	b918      	cbnz	r0, 800af7c <__cvt+0x8c>
 800af74:	f1c6 0601 	rsb	r6, r6, #1
 800af78:	f8ca 6000 	str.w	r6, [sl]
 800af7c:	f8da 3000 	ldr.w	r3, [sl]
 800af80:	4499      	add	r9, r3
 800af82:	2200      	movs	r2, #0
 800af84:	2300      	movs	r3, #0
 800af86:	4620      	mov	r0, r4
 800af88:	4629      	mov	r1, r5
 800af8a:	f7f5 fdad 	bl	8000ae8 <__aeabi_dcmpeq>
 800af8e:	b108      	cbz	r0, 800af94 <__cvt+0xa4>
 800af90:	f8cd 900c 	str.w	r9, [sp, #12]
 800af94:	2230      	movs	r2, #48	; 0x30
 800af96:	9b03      	ldr	r3, [sp, #12]
 800af98:	454b      	cmp	r3, r9
 800af9a:	d307      	bcc.n	800afac <__cvt+0xbc>
 800af9c:	9b03      	ldr	r3, [sp, #12]
 800af9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afa0:	1bdb      	subs	r3, r3, r7
 800afa2:	4638      	mov	r0, r7
 800afa4:	6013      	str	r3, [r2, #0]
 800afa6:	b004      	add	sp, #16
 800afa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afac:	1c59      	adds	r1, r3, #1
 800afae:	9103      	str	r1, [sp, #12]
 800afb0:	701a      	strb	r2, [r3, #0]
 800afb2:	e7f0      	b.n	800af96 <__cvt+0xa6>

0800afb4 <__exponent>:
 800afb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afb6:	4603      	mov	r3, r0
 800afb8:	2900      	cmp	r1, #0
 800afba:	bfb8      	it	lt
 800afbc:	4249      	neglt	r1, r1
 800afbe:	f803 2b02 	strb.w	r2, [r3], #2
 800afc2:	bfb4      	ite	lt
 800afc4:	222d      	movlt	r2, #45	; 0x2d
 800afc6:	222b      	movge	r2, #43	; 0x2b
 800afc8:	2909      	cmp	r1, #9
 800afca:	7042      	strb	r2, [r0, #1]
 800afcc:	dd2a      	ble.n	800b024 <__exponent+0x70>
 800afce:	f10d 0207 	add.w	r2, sp, #7
 800afd2:	4617      	mov	r7, r2
 800afd4:	260a      	movs	r6, #10
 800afd6:	4694      	mov	ip, r2
 800afd8:	fb91 f5f6 	sdiv	r5, r1, r6
 800afdc:	fb06 1415 	mls	r4, r6, r5, r1
 800afe0:	3430      	adds	r4, #48	; 0x30
 800afe2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800afe6:	460c      	mov	r4, r1
 800afe8:	2c63      	cmp	r4, #99	; 0x63
 800afea:	f102 32ff 	add.w	r2, r2, #4294967295
 800afee:	4629      	mov	r1, r5
 800aff0:	dcf1      	bgt.n	800afd6 <__exponent+0x22>
 800aff2:	3130      	adds	r1, #48	; 0x30
 800aff4:	f1ac 0402 	sub.w	r4, ip, #2
 800aff8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800affc:	1c41      	adds	r1, r0, #1
 800affe:	4622      	mov	r2, r4
 800b000:	42ba      	cmp	r2, r7
 800b002:	d30a      	bcc.n	800b01a <__exponent+0x66>
 800b004:	f10d 0209 	add.w	r2, sp, #9
 800b008:	eba2 020c 	sub.w	r2, r2, ip
 800b00c:	42bc      	cmp	r4, r7
 800b00e:	bf88      	it	hi
 800b010:	2200      	movhi	r2, #0
 800b012:	4413      	add	r3, r2
 800b014:	1a18      	subs	r0, r3, r0
 800b016:	b003      	add	sp, #12
 800b018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b01a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b01e:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b022:	e7ed      	b.n	800b000 <__exponent+0x4c>
 800b024:	2330      	movs	r3, #48	; 0x30
 800b026:	3130      	adds	r1, #48	; 0x30
 800b028:	7083      	strb	r3, [r0, #2]
 800b02a:	70c1      	strb	r1, [r0, #3]
 800b02c:	1d03      	adds	r3, r0, #4
 800b02e:	e7f1      	b.n	800b014 <__exponent+0x60>

0800b030 <_printf_float>:
 800b030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b034:	ed2d 8b02 	vpush	{d8}
 800b038:	b08d      	sub	sp, #52	; 0x34
 800b03a:	460c      	mov	r4, r1
 800b03c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b040:	4616      	mov	r6, r2
 800b042:	461f      	mov	r7, r3
 800b044:	4605      	mov	r5, r0
 800b046:	f000 fce7 	bl	800ba18 <_localeconv_r>
 800b04a:	f8d0 a000 	ldr.w	sl, [r0]
 800b04e:	4650      	mov	r0, sl
 800b050:	f7f5 f91e 	bl	8000290 <strlen>
 800b054:	2300      	movs	r3, #0
 800b056:	930a      	str	r3, [sp, #40]	; 0x28
 800b058:	6823      	ldr	r3, [r4, #0]
 800b05a:	9305      	str	r3, [sp, #20]
 800b05c:	f8d8 3000 	ldr.w	r3, [r8]
 800b060:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b064:	3307      	adds	r3, #7
 800b066:	f023 0307 	bic.w	r3, r3, #7
 800b06a:	f103 0208 	add.w	r2, r3, #8
 800b06e:	f8c8 2000 	str.w	r2, [r8]
 800b072:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b076:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b07a:	9307      	str	r3, [sp, #28]
 800b07c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b080:	ee08 0a10 	vmov	s16, r0
 800b084:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b088:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b08c:	4b9e      	ldr	r3, [pc, #632]	; (800b308 <_printf_float+0x2d8>)
 800b08e:	f04f 32ff 	mov.w	r2, #4294967295
 800b092:	f7f5 fd5b 	bl	8000b4c <__aeabi_dcmpun>
 800b096:	bb88      	cbnz	r0, 800b0fc <_printf_float+0xcc>
 800b098:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b09c:	4b9a      	ldr	r3, [pc, #616]	; (800b308 <_printf_float+0x2d8>)
 800b09e:	f04f 32ff 	mov.w	r2, #4294967295
 800b0a2:	f7f5 fd35 	bl	8000b10 <__aeabi_dcmple>
 800b0a6:	bb48      	cbnz	r0, 800b0fc <_printf_float+0xcc>
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	4640      	mov	r0, r8
 800b0ae:	4649      	mov	r1, r9
 800b0b0:	f7f5 fd24 	bl	8000afc <__aeabi_dcmplt>
 800b0b4:	b110      	cbz	r0, 800b0bc <_printf_float+0x8c>
 800b0b6:	232d      	movs	r3, #45	; 0x2d
 800b0b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0bc:	4a93      	ldr	r2, [pc, #588]	; (800b30c <_printf_float+0x2dc>)
 800b0be:	4b94      	ldr	r3, [pc, #592]	; (800b310 <_printf_float+0x2e0>)
 800b0c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b0c4:	bf94      	ite	ls
 800b0c6:	4690      	movls	r8, r2
 800b0c8:	4698      	movhi	r8, r3
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	6123      	str	r3, [r4, #16]
 800b0ce:	9b05      	ldr	r3, [sp, #20]
 800b0d0:	f023 0304 	bic.w	r3, r3, #4
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	f04f 0900 	mov.w	r9, #0
 800b0da:	9700      	str	r7, [sp, #0]
 800b0dc:	4633      	mov	r3, r6
 800b0de:	aa0b      	add	r2, sp, #44	; 0x2c
 800b0e0:	4621      	mov	r1, r4
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	f000 f9da 	bl	800b49c <_printf_common>
 800b0e8:	3001      	adds	r0, #1
 800b0ea:	f040 8090 	bne.w	800b20e <_printf_float+0x1de>
 800b0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f2:	b00d      	add	sp, #52	; 0x34
 800b0f4:	ecbd 8b02 	vpop	{d8}
 800b0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0fc:	4642      	mov	r2, r8
 800b0fe:	464b      	mov	r3, r9
 800b100:	4640      	mov	r0, r8
 800b102:	4649      	mov	r1, r9
 800b104:	f7f5 fd22 	bl	8000b4c <__aeabi_dcmpun>
 800b108:	b140      	cbz	r0, 800b11c <_printf_float+0xec>
 800b10a:	464b      	mov	r3, r9
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	bfbc      	itt	lt
 800b110:	232d      	movlt	r3, #45	; 0x2d
 800b112:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b116:	4a7f      	ldr	r2, [pc, #508]	; (800b314 <_printf_float+0x2e4>)
 800b118:	4b7f      	ldr	r3, [pc, #508]	; (800b318 <_printf_float+0x2e8>)
 800b11a:	e7d1      	b.n	800b0c0 <_printf_float+0x90>
 800b11c:	6863      	ldr	r3, [r4, #4]
 800b11e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b122:	9206      	str	r2, [sp, #24]
 800b124:	1c5a      	adds	r2, r3, #1
 800b126:	d13f      	bne.n	800b1a8 <_printf_float+0x178>
 800b128:	2306      	movs	r3, #6
 800b12a:	6063      	str	r3, [r4, #4]
 800b12c:	9b05      	ldr	r3, [sp, #20]
 800b12e:	6861      	ldr	r1, [r4, #4]
 800b130:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b134:	2300      	movs	r3, #0
 800b136:	9303      	str	r3, [sp, #12]
 800b138:	ab0a      	add	r3, sp, #40	; 0x28
 800b13a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b13e:	ab09      	add	r3, sp, #36	; 0x24
 800b140:	ec49 8b10 	vmov	d0, r8, r9
 800b144:	9300      	str	r3, [sp, #0]
 800b146:	6022      	str	r2, [r4, #0]
 800b148:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b14c:	4628      	mov	r0, r5
 800b14e:	f7ff fecf 	bl	800aef0 <__cvt>
 800b152:	9b06      	ldr	r3, [sp, #24]
 800b154:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b156:	2b47      	cmp	r3, #71	; 0x47
 800b158:	4680      	mov	r8, r0
 800b15a:	d108      	bne.n	800b16e <_printf_float+0x13e>
 800b15c:	1cc8      	adds	r0, r1, #3
 800b15e:	db02      	blt.n	800b166 <_printf_float+0x136>
 800b160:	6863      	ldr	r3, [r4, #4]
 800b162:	4299      	cmp	r1, r3
 800b164:	dd41      	ble.n	800b1ea <_printf_float+0x1ba>
 800b166:	f1ab 0302 	sub.w	r3, fp, #2
 800b16a:	fa5f fb83 	uxtb.w	fp, r3
 800b16e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b172:	d820      	bhi.n	800b1b6 <_printf_float+0x186>
 800b174:	3901      	subs	r1, #1
 800b176:	465a      	mov	r2, fp
 800b178:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b17c:	9109      	str	r1, [sp, #36]	; 0x24
 800b17e:	f7ff ff19 	bl	800afb4 <__exponent>
 800b182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b184:	1813      	adds	r3, r2, r0
 800b186:	2a01      	cmp	r2, #1
 800b188:	4681      	mov	r9, r0
 800b18a:	6123      	str	r3, [r4, #16]
 800b18c:	dc02      	bgt.n	800b194 <_printf_float+0x164>
 800b18e:	6822      	ldr	r2, [r4, #0]
 800b190:	07d2      	lsls	r2, r2, #31
 800b192:	d501      	bpl.n	800b198 <_printf_float+0x168>
 800b194:	3301      	adds	r3, #1
 800b196:	6123      	str	r3, [r4, #16]
 800b198:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d09c      	beq.n	800b0da <_printf_float+0xaa>
 800b1a0:	232d      	movs	r3, #45	; 0x2d
 800b1a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1a6:	e798      	b.n	800b0da <_printf_float+0xaa>
 800b1a8:	9a06      	ldr	r2, [sp, #24]
 800b1aa:	2a47      	cmp	r2, #71	; 0x47
 800b1ac:	d1be      	bne.n	800b12c <_printf_float+0xfc>
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d1bc      	bne.n	800b12c <_printf_float+0xfc>
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e7b9      	b.n	800b12a <_printf_float+0xfa>
 800b1b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b1ba:	d118      	bne.n	800b1ee <_printf_float+0x1be>
 800b1bc:	2900      	cmp	r1, #0
 800b1be:	6863      	ldr	r3, [r4, #4]
 800b1c0:	dd0b      	ble.n	800b1da <_printf_float+0x1aa>
 800b1c2:	6121      	str	r1, [r4, #16]
 800b1c4:	b913      	cbnz	r3, 800b1cc <_printf_float+0x19c>
 800b1c6:	6822      	ldr	r2, [r4, #0]
 800b1c8:	07d0      	lsls	r0, r2, #31
 800b1ca:	d502      	bpl.n	800b1d2 <_printf_float+0x1a2>
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	440b      	add	r3, r1
 800b1d0:	6123      	str	r3, [r4, #16]
 800b1d2:	65a1      	str	r1, [r4, #88]	; 0x58
 800b1d4:	f04f 0900 	mov.w	r9, #0
 800b1d8:	e7de      	b.n	800b198 <_printf_float+0x168>
 800b1da:	b913      	cbnz	r3, 800b1e2 <_printf_float+0x1b2>
 800b1dc:	6822      	ldr	r2, [r4, #0]
 800b1de:	07d2      	lsls	r2, r2, #31
 800b1e0:	d501      	bpl.n	800b1e6 <_printf_float+0x1b6>
 800b1e2:	3302      	adds	r3, #2
 800b1e4:	e7f4      	b.n	800b1d0 <_printf_float+0x1a0>
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e7f2      	b.n	800b1d0 <_printf_float+0x1a0>
 800b1ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b1ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1f0:	4299      	cmp	r1, r3
 800b1f2:	db05      	blt.n	800b200 <_printf_float+0x1d0>
 800b1f4:	6823      	ldr	r3, [r4, #0]
 800b1f6:	6121      	str	r1, [r4, #16]
 800b1f8:	07d8      	lsls	r0, r3, #31
 800b1fa:	d5ea      	bpl.n	800b1d2 <_printf_float+0x1a2>
 800b1fc:	1c4b      	adds	r3, r1, #1
 800b1fe:	e7e7      	b.n	800b1d0 <_printf_float+0x1a0>
 800b200:	2900      	cmp	r1, #0
 800b202:	bfd4      	ite	le
 800b204:	f1c1 0202 	rsble	r2, r1, #2
 800b208:	2201      	movgt	r2, #1
 800b20a:	4413      	add	r3, r2
 800b20c:	e7e0      	b.n	800b1d0 <_printf_float+0x1a0>
 800b20e:	6823      	ldr	r3, [r4, #0]
 800b210:	055a      	lsls	r2, r3, #21
 800b212:	d407      	bmi.n	800b224 <_printf_float+0x1f4>
 800b214:	6923      	ldr	r3, [r4, #16]
 800b216:	4642      	mov	r2, r8
 800b218:	4631      	mov	r1, r6
 800b21a:	4628      	mov	r0, r5
 800b21c:	47b8      	blx	r7
 800b21e:	3001      	adds	r0, #1
 800b220:	d12c      	bne.n	800b27c <_printf_float+0x24c>
 800b222:	e764      	b.n	800b0ee <_printf_float+0xbe>
 800b224:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b228:	f240 80e0 	bls.w	800b3ec <_printf_float+0x3bc>
 800b22c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b230:	2200      	movs	r2, #0
 800b232:	2300      	movs	r3, #0
 800b234:	f7f5 fc58 	bl	8000ae8 <__aeabi_dcmpeq>
 800b238:	2800      	cmp	r0, #0
 800b23a:	d034      	beq.n	800b2a6 <_printf_float+0x276>
 800b23c:	4a37      	ldr	r2, [pc, #220]	; (800b31c <_printf_float+0x2ec>)
 800b23e:	2301      	movs	r3, #1
 800b240:	4631      	mov	r1, r6
 800b242:	4628      	mov	r0, r5
 800b244:	47b8      	blx	r7
 800b246:	3001      	adds	r0, #1
 800b248:	f43f af51 	beq.w	800b0ee <_printf_float+0xbe>
 800b24c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b250:	429a      	cmp	r2, r3
 800b252:	db02      	blt.n	800b25a <_printf_float+0x22a>
 800b254:	6823      	ldr	r3, [r4, #0]
 800b256:	07d8      	lsls	r0, r3, #31
 800b258:	d510      	bpl.n	800b27c <_printf_float+0x24c>
 800b25a:	ee18 3a10 	vmov	r3, s16
 800b25e:	4652      	mov	r2, sl
 800b260:	4631      	mov	r1, r6
 800b262:	4628      	mov	r0, r5
 800b264:	47b8      	blx	r7
 800b266:	3001      	adds	r0, #1
 800b268:	f43f af41 	beq.w	800b0ee <_printf_float+0xbe>
 800b26c:	f04f 0800 	mov.w	r8, #0
 800b270:	f104 091a 	add.w	r9, r4, #26
 800b274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b276:	3b01      	subs	r3, #1
 800b278:	4543      	cmp	r3, r8
 800b27a:	dc09      	bgt.n	800b290 <_printf_float+0x260>
 800b27c:	6823      	ldr	r3, [r4, #0]
 800b27e:	079b      	lsls	r3, r3, #30
 800b280:	f100 8107 	bmi.w	800b492 <_printf_float+0x462>
 800b284:	68e0      	ldr	r0, [r4, #12]
 800b286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b288:	4298      	cmp	r0, r3
 800b28a:	bfb8      	it	lt
 800b28c:	4618      	movlt	r0, r3
 800b28e:	e730      	b.n	800b0f2 <_printf_float+0xc2>
 800b290:	2301      	movs	r3, #1
 800b292:	464a      	mov	r2, r9
 800b294:	4631      	mov	r1, r6
 800b296:	4628      	mov	r0, r5
 800b298:	47b8      	blx	r7
 800b29a:	3001      	adds	r0, #1
 800b29c:	f43f af27 	beq.w	800b0ee <_printf_float+0xbe>
 800b2a0:	f108 0801 	add.w	r8, r8, #1
 800b2a4:	e7e6      	b.n	800b274 <_printf_float+0x244>
 800b2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	dc39      	bgt.n	800b320 <_printf_float+0x2f0>
 800b2ac:	4a1b      	ldr	r2, [pc, #108]	; (800b31c <_printf_float+0x2ec>)
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	4631      	mov	r1, r6
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	47b8      	blx	r7
 800b2b6:	3001      	adds	r0, #1
 800b2b8:	f43f af19 	beq.w	800b0ee <_printf_float+0xbe>
 800b2bc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	d102      	bne.n	800b2ca <_printf_float+0x29a>
 800b2c4:	6823      	ldr	r3, [r4, #0]
 800b2c6:	07d9      	lsls	r1, r3, #31
 800b2c8:	d5d8      	bpl.n	800b27c <_printf_float+0x24c>
 800b2ca:	ee18 3a10 	vmov	r3, s16
 800b2ce:	4652      	mov	r2, sl
 800b2d0:	4631      	mov	r1, r6
 800b2d2:	4628      	mov	r0, r5
 800b2d4:	47b8      	blx	r7
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	f43f af09 	beq.w	800b0ee <_printf_float+0xbe>
 800b2dc:	f04f 0900 	mov.w	r9, #0
 800b2e0:	f104 0a1a 	add.w	sl, r4, #26
 800b2e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e6:	425b      	negs	r3, r3
 800b2e8:	454b      	cmp	r3, r9
 800b2ea:	dc01      	bgt.n	800b2f0 <_printf_float+0x2c0>
 800b2ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2ee:	e792      	b.n	800b216 <_printf_float+0x1e6>
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	4652      	mov	r2, sl
 800b2f4:	4631      	mov	r1, r6
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	47b8      	blx	r7
 800b2fa:	3001      	adds	r0, #1
 800b2fc:	f43f aef7 	beq.w	800b0ee <_printf_float+0xbe>
 800b300:	f109 0901 	add.w	r9, r9, #1
 800b304:	e7ee      	b.n	800b2e4 <_printf_float+0x2b4>
 800b306:	bf00      	nop
 800b308:	7fefffff 	.word	0x7fefffff
 800b30c:	0800e611 	.word	0x0800e611
 800b310:	0800e615 	.word	0x0800e615
 800b314:	0800e619 	.word	0x0800e619
 800b318:	0800e61d 	.word	0x0800e61d
 800b31c:	0800e621 	.word	0x0800e621
 800b320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b322:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b324:	429a      	cmp	r2, r3
 800b326:	bfa8      	it	ge
 800b328:	461a      	movge	r2, r3
 800b32a:	2a00      	cmp	r2, #0
 800b32c:	4691      	mov	r9, r2
 800b32e:	dc37      	bgt.n	800b3a0 <_printf_float+0x370>
 800b330:	f04f 0b00 	mov.w	fp, #0
 800b334:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b338:	f104 021a 	add.w	r2, r4, #26
 800b33c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b33e:	9305      	str	r3, [sp, #20]
 800b340:	eba3 0309 	sub.w	r3, r3, r9
 800b344:	455b      	cmp	r3, fp
 800b346:	dc33      	bgt.n	800b3b0 <_printf_float+0x380>
 800b348:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b34c:	429a      	cmp	r2, r3
 800b34e:	db3b      	blt.n	800b3c8 <_printf_float+0x398>
 800b350:	6823      	ldr	r3, [r4, #0]
 800b352:	07da      	lsls	r2, r3, #31
 800b354:	d438      	bmi.n	800b3c8 <_printf_float+0x398>
 800b356:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b35a:	eba2 0903 	sub.w	r9, r2, r3
 800b35e:	9b05      	ldr	r3, [sp, #20]
 800b360:	1ad2      	subs	r2, r2, r3
 800b362:	4591      	cmp	r9, r2
 800b364:	bfa8      	it	ge
 800b366:	4691      	movge	r9, r2
 800b368:	f1b9 0f00 	cmp.w	r9, #0
 800b36c:	dc35      	bgt.n	800b3da <_printf_float+0x3aa>
 800b36e:	f04f 0800 	mov.w	r8, #0
 800b372:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b376:	f104 0a1a 	add.w	sl, r4, #26
 800b37a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b37e:	1a9b      	subs	r3, r3, r2
 800b380:	eba3 0309 	sub.w	r3, r3, r9
 800b384:	4543      	cmp	r3, r8
 800b386:	f77f af79 	ble.w	800b27c <_printf_float+0x24c>
 800b38a:	2301      	movs	r3, #1
 800b38c:	4652      	mov	r2, sl
 800b38e:	4631      	mov	r1, r6
 800b390:	4628      	mov	r0, r5
 800b392:	47b8      	blx	r7
 800b394:	3001      	adds	r0, #1
 800b396:	f43f aeaa 	beq.w	800b0ee <_printf_float+0xbe>
 800b39a:	f108 0801 	add.w	r8, r8, #1
 800b39e:	e7ec      	b.n	800b37a <_printf_float+0x34a>
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	4631      	mov	r1, r6
 800b3a4:	4642      	mov	r2, r8
 800b3a6:	4628      	mov	r0, r5
 800b3a8:	47b8      	blx	r7
 800b3aa:	3001      	adds	r0, #1
 800b3ac:	d1c0      	bne.n	800b330 <_printf_float+0x300>
 800b3ae:	e69e      	b.n	800b0ee <_printf_float+0xbe>
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	4631      	mov	r1, r6
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	9205      	str	r2, [sp, #20]
 800b3b8:	47b8      	blx	r7
 800b3ba:	3001      	adds	r0, #1
 800b3bc:	f43f ae97 	beq.w	800b0ee <_printf_float+0xbe>
 800b3c0:	9a05      	ldr	r2, [sp, #20]
 800b3c2:	f10b 0b01 	add.w	fp, fp, #1
 800b3c6:	e7b9      	b.n	800b33c <_printf_float+0x30c>
 800b3c8:	ee18 3a10 	vmov	r3, s16
 800b3cc:	4652      	mov	r2, sl
 800b3ce:	4631      	mov	r1, r6
 800b3d0:	4628      	mov	r0, r5
 800b3d2:	47b8      	blx	r7
 800b3d4:	3001      	adds	r0, #1
 800b3d6:	d1be      	bne.n	800b356 <_printf_float+0x326>
 800b3d8:	e689      	b.n	800b0ee <_printf_float+0xbe>
 800b3da:	9a05      	ldr	r2, [sp, #20]
 800b3dc:	464b      	mov	r3, r9
 800b3de:	4442      	add	r2, r8
 800b3e0:	4631      	mov	r1, r6
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	47b8      	blx	r7
 800b3e6:	3001      	adds	r0, #1
 800b3e8:	d1c1      	bne.n	800b36e <_printf_float+0x33e>
 800b3ea:	e680      	b.n	800b0ee <_printf_float+0xbe>
 800b3ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3ee:	2a01      	cmp	r2, #1
 800b3f0:	dc01      	bgt.n	800b3f6 <_printf_float+0x3c6>
 800b3f2:	07db      	lsls	r3, r3, #31
 800b3f4:	d53a      	bpl.n	800b46c <_printf_float+0x43c>
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	4642      	mov	r2, r8
 800b3fa:	4631      	mov	r1, r6
 800b3fc:	4628      	mov	r0, r5
 800b3fe:	47b8      	blx	r7
 800b400:	3001      	adds	r0, #1
 800b402:	f43f ae74 	beq.w	800b0ee <_printf_float+0xbe>
 800b406:	ee18 3a10 	vmov	r3, s16
 800b40a:	4652      	mov	r2, sl
 800b40c:	4631      	mov	r1, r6
 800b40e:	4628      	mov	r0, r5
 800b410:	47b8      	blx	r7
 800b412:	3001      	adds	r0, #1
 800b414:	f43f ae6b 	beq.w	800b0ee <_printf_float+0xbe>
 800b418:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b41c:	2200      	movs	r2, #0
 800b41e:	2300      	movs	r3, #0
 800b420:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b424:	f7f5 fb60 	bl	8000ae8 <__aeabi_dcmpeq>
 800b428:	b9d8      	cbnz	r0, 800b462 <_printf_float+0x432>
 800b42a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b42e:	f108 0201 	add.w	r2, r8, #1
 800b432:	4631      	mov	r1, r6
 800b434:	4628      	mov	r0, r5
 800b436:	47b8      	blx	r7
 800b438:	3001      	adds	r0, #1
 800b43a:	d10e      	bne.n	800b45a <_printf_float+0x42a>
 800b43c:	e657      	b.n	800b0ee <_printf_float+0xbe>
 800b43e:	2301      	movs	r3, #1
 800b440:	4652      	mov	r2, sl
 800b442:	4631      	mov	r1, r6
 800b444:	4628      	mov	r0, r5
 800b446:	47b8      	blx	r7
 800b448:	3001      	adds	r0, #1
 800b44a:	f43f ae50 	beq.w	800b0ee <_printf_float+0xbe>
 800b44e:	f108 0801 	add.w	r8, r8, #1
 800b452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b454:	3b01      	subs	r3, #1
 800b456:	4543      	cmp	r3, r8
 800b458:	dcf1      	bgt.n	800b43e <_printf_float+0x40e>
 800b45a:	464b      	mov	r3, r9
 800b45c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b460:	e6da      	b.n	800b218 <_printf_float+0x1e8>
 800b462:	f04f 0800 	mov.w	r8, #0
 800b466:	f104 0a1a 	add.w	sl, r4, #26
 800b46a:	e7f2      	b.n	800b452 <_printf_float+0x422>
 800b46c:	2301      	movs	r3, #1
 800b46e:	4642      	mov	r2, r8
 800b470:	e7df      	b.n	800b432 <_printf_float+0x402>
 800b472:	2301      	movs	r3, #1
 800b474:	464a      	mov	r2, r9
 800b476:	4631      	mov	r1, r6
 800b478:	4628      	mov	r0, r5
 800b47a:	47b8      	blx	r7
 800b47c:	3001      	adds	r0, #1
 800b47e:	f43f ae36 	beq.w	800b0ee <_printf_float+0xbe>
 800b482:	f108 0801 	add.w	r8, r8, #1
 800b486:	68e3      	ldr	r3, [r4, #12]
 800b488:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b48a:	1a5b      	subs	r3, r3, r1
 800b48c:	4543      	cmp	r3, r8
 800b48e:	dcf0      	bgt.n	800b472 <_printf_float+0x442>
 800b490:	e6f8      	b.n	800b284 <_printf_float+0x254>
 800b492:	f04f 0800 	mov.w	r8, #0
 800b496:	f104 0919 	add.w	r9, r4, #25
 800b49a:	e7f4      	b.n	800b486 <_printf_float+0x456>

0800b49c <_printf_common>:
 800b49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4a0:	4616      	mov	r6, r2
 800b4a2:	4699      	mov	r9, r3
 800b4a4:	688a      	ldr	r2, [r1, #8]
 800b4a6:	690b      	ldr	r3, [r1, #16]
 800b4a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	bfb8      	it	lt
 800b4b0:	4613      	movlt	r3, r2
 800b4b2:	6033      	str	r3, [r6, #0]
 800b4b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4b8:	4607      	mov	r7, r0
 800b4ba:	460c      	mov	r4, r1
 800b4bc:	b10a      	cbz	r2, 800b4c2 <_printf_common+0x26>
 800b4be:	3301      	adds	r3, #1
 800b4c0:	6033      	str	r3, [r6, #0]
 800b4c2:	6823      	ldr	r3, [r4, #0]
 800b4c4:	0699      	lsls	r1, r3, #26
 800b4c6:	bf42      	ittt	mi
 800b4c8:	6833      	ldrmi	r3, [r6, #0]
 800b4ca:	3302      	addmi	r3, #2
 800b4cc:	6033      	strmi	r3, [r6, #0]
 800b4ce:	6825      	ldr	r5, [r4, #0]
 800b4d0:	f015 0506 	ands.w	r5, r5, #6
 800b4d4:	d106      	bne.n	800b4e4 <_printf_common+0x48>
 800b4d6:	f104 0a19 	add.w	sl, r4, #25
 800b4da:	68e3      	ldr	r3, [r4, #12]
 800b4dc:	6832      	ldr	r2, [r6, #0]
 800b4de:	1a9b      	subs	r3, r3, r2
 800b4e0:	42ab      	cmp	r3, r5
 800b4e2:	dc26      	bgt.n	800b532 <_printf_common+0x96>
 800b4e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4e8:	1e13      	subs	r3, r2, #0
 800b4ea:	6822      	ldr	r2, [r4, #0]
 800b4ec:	bf18      	it	ne
 800b4ee:	2301      	movne	r3, #1
 800b4f0:	0692      	lsls	r2, r2, #26
 800b4f2:	d42b      	bmi.n	800b54c <_printf_common+0xb0>
 800b4f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4f8:	4649      	mov	r1, r9
 800b4fa:	4638      	mov	r0, r7
 800b4fc:	47c0      	blx	r8
 800b4fe:	3001      	adds	r0, #1
 800b500:	d01e      	beq.n	800b540 <_printf_common+0xa4>
 800b502:	6823      	ldr	r3, [r4, #0]
 800b504:	6922      	ldr	r2, [r4, #16]
 800b506:	f003 0306 	and.w	r3, r3, #6
 800b50a:	2b04      	cmp	r3, #4
 800b50c:	bf02      	ittt	eq
 800b50e:	68e5      	ldreq	r5, [r4, #12]
 800b510:	6833      	ldreq	r3, [r6, #0]
 800b512:	1aed      	subeq	r5, r5, r3
 800b514:	68a3      	ldr	r3, [r4, #8]
 800b516:	bf0c      	ite	eq
 800b518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b51c:	2500      	movne	r5, #0
 800b51e:	4293      	cmp	r3, r2
 800b520:	bfc4      	itt	gt
 800b522:	1a9b      	subgt	r3, r3, r2
 800b524:	18ed      	addgt	r5, r5, r3
 800b526:	2600      	movs	r6, #0
 800b528:	341a      	adds	r4, #26
 800b52a:	42b5      	cmp	r5, r6
 800b52c:	d11a      	bne.n	800b564 <_printf_common+0xc8>
 800b52e:	2000      	movs	r0, #0
 800b530:	e008      	b.n	800b544 <_printf_common+0xa8>
 800b532:	2301      	movs	r3, #1
 800b534:	4652      	mov	r2, sl
 800b536:	4649      	mov	r1, r9
 800b538:	4638      	mov	r0, r7
 800b53a:	47c0      	blx	r8
 800b53c:	3001      	adds	r0, #1
 800b53e:	d103      	bne.n	800b548 <_printf_common+0xac>
 800b540:	f04f 30ff 	mov.w	r0, #4294967295
 800b544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b548:	3501      	adds	r5, #1
 800b54a:	e7c6      	b.n	800b4da <_printf_common+0x3e>
 800b54c:	18e1      	adds	r1, r4, r3
 800b54e:	1c5a      	adds	r2, r3, #1
 800b550:	2030      	movs	r0, #48	; 0x30
 800b552:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b556:	4422      	add	r2, r4
 800b558:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b55c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b560:	3302      	adds	r3, #2
 800b562:	e7c7      	b.n	800b4f4 <_printf_common+0x58>
 800b564:	2301      	movs	r3, #1
 800b566:	4622      	mov	r2, r4
 800b568:	4649      	mov	r1, r9
 800b56a:	4638      	mov	r0, r7
 800b56c:	47c0      	blx	r8
 800b56e:	3001      	adds	r0, #1
 800b570:	d0e6      	beq.n	800b540 <_printf_common+0xa4>
 800b572:	3601      	adds	r6, #1
 800b574:	e7d9      	b.n	800b52a <_printf_common+0x8e>
	...

0800b578 <_printf_i>:
 800b578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b57c:	7e0f      	ldrb	r7, [r1, #24]
 800b57e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b580:	2f78      	cmp	r7, #120	; 0x78
 800b582:	4691      	mov	r9, r2
 800b584:	4680      	mov	r8, r0
 800b586:	460c      	mov	r4, r1
 800b588:	469a      	mov	sl, r3
 800b58a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b58e:	d807      	bhi.n	800b5a0 <_printf_i+0x28>
 800b590:	2f62      	cmp	r7, #98	; 0x62
 800b592:	d80a      	bhi.n	800b5aa <_printf_i+0x32>
 800b594:	2f00      	cmp	r7, #0
 800b596:	f000 80d4 	beq.w	800b742 <_printf_i+0x1ca>
 800b59a:	2f58      	cmp	r7, #88	; 0x58
 800b59c:	f000 80c0 	beq.w	800b720 <_printf_i+0x1a8>
 800b5a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b5a8:	e03a      	b.n	800b620 <_printf_i+0xa8>
 800b5aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b5ae:	2b15      	cmp	r3, #21
 800b5b0:	d8f6      	bhi.n	800b5a0 <_printf_i+0x28>
 800b5b2:	a101      	add	r1, pc, #4	; (adr r1, 800b5b8 <_printf_i+0x40>)
 800b5b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5b8:	0800b611 	.word	0x0800b611
 800b5bc:	0800b625 	.word	0x0800b625
 800b5c0:	0800b5a1 	.word	0x0800b5a1
 800b5c4:	0800b5a1 	.word	0x0800b5a1
 800b5c8:	0800b5a1 	.word	0x0800b5a1
 800b5cc:	0800b5a1 	.word	0x0800b5a1
 800b5d0:	0800b625 	.word	0x0800b625
 800b5d4:	0800b5a1 	.word	0x0800b5a1
 800b5d8:	0800b5a1 	.word	0x0800b5a1
 800b5dc:	0800b5a1 	.word	0x0800b5a1
 800b5e0:	0800b5a1 	.word	0x0800b5a1
 800b5e4:	0800b729 	.word	0x0800b729
 800b5e8:	0800b651 	.word	0x0800b651
 800b5ec:	0800b6e3 	.word	0x0800b6e3
 800b5f0:	0800b5a1 	.word	0x0800b5a1
 800b5f4:	0800b5a1 	.word	0x0800b5a1
 800b5f8:	0800b74b 	.word	0x0800b74b
 800b5fc:	0800b5a1 	.word	0x0800b5a1
 800b600:	0800b651 	.word	0x0800b651
 800b604:	0800b5a1 	.word	0x0800b5a1
 800b608:	0800b5a1 	.word	0x0800b5a1
 800b60c:	0800b6eb 	.word	0x0800b6eb
 800b610:	682b      	ldr	r3, [r5, #0]
 800b612:	1d1a      	adds	r2, r3, #4
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	602a      	str	r2, [r5, #0]
 800b618:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b61c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b620:	2301      	movs	r3, #1
 800b622:	e09f      	b.n	800b764 <_printf_i+0x1ec>
 800b624:	6820      	ldr	r0, [r4, #0]
 800b626:	682b      	ldr	r3, [r5, #0]
 800b628:	0607      	lsls	r7, r0, #24
 800b62a:	f103 0104 	add.w	r1, r3, #4
 800b62e:	6029      	str	r1, [r5, #0]
 800b630:	d501      	bpl.n	800b636 <_printf_i+0xbe>
 800b632:	681e      	ldr	r6, [r3, #0]
 800b634:	e003      	b.n	800b63e <_printf_i+0xc6>
 800b636:	0646      	lsls	r6, r0, #25
 800b638:	d5fb      	bpl.n	800b632 <_printf_i+0xba>
 800b63a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b63e:	2e00      	cmp	r6, #0
 800b640:	da03      	bge.n	800b64a <_printf_i+0xd2>
 800b642:	232d      	movs	r3, #45	; 0x2d
 800b644:	4276      	negs	r6, r6
 800b646:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b64a:	485a      	ldr	r0, [pc, #360]	; (800b7b4 <_printf_i+0x23c>)
 800b64c:	230a      	movs	r3, #10
 800b64e:	e012      	b.n	800b676 <_printf_i+0xfe>
 800b650:	682b      	ldr	r3, [r5, #0]
 800b652:	6820      	ldr	r0, [r4, #0]
 800b654:	1d19      	adds	r1, r3, #4
 800b656:	6029      	str	r1, [r5, #0]
 800b658:	0605      	lsls	r5, r0, #24
 800b65a:	d501      	bpl.n	800b660 <_printf_i+0xe8>
 800b65c:	681e      	ldr	r6, [r3, #0]
 800b65e:	e002      	b.n	800b666 <_printf_i+0xee>
 800b660:	0641      	lsls	r1, r0, #25
 800b662:	d5fb      	bpl.n	800b65c <_printf_i+0xe4>
 800b664:	881e      	ldrh	r6, [r3, #0]
 800b666:	4853      	ldr	r0, [pc, #332]	; (800b7b4 <_printf_i+0x23c>)
 800b668:	2f6f      	cmp	r7, #111	; 0x6f
 800b66a:	bf0c      	ite	eq
 800b66c:	2308      	moveq	r3, #8
 800b66e:	230a      	movne	r3, #10
 800b670:	2100      	movs	r1, #0
 800b672:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b676:	6865      	ldr	r5, [r4, #4]
 800b678:	60a5      	str	r5, [r4, #8]
 800b67a:	2d00      	cmp	r5, #0
 800b67c:	bfa2      	ittt	ge
 800b67e:	6821      	ldrge	r1, [r4, #0]
 800b680:	f021 0104 	bicge.w	r1, r1, #4
 800b684:	6021      	strge	r1, [r4, #0]
 800b686:	b90e      	cbnz	r6, 800b68c <_printf_i+0x114>
 800b688:	2d00      	cmp	r5, #0
 800b68a:	d04b      	beq.n	800b724 <_printf_i+0x1ac>
 800b68c:	4615      	mov	r5, r2
 800b68e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b692:	fb03 6711 	mls	r7, r3, r1, r6
 800b696:	5dc7      	ldrb	r7, [r0, r7]
 800b698:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b69c:	4637      	mov	r7, r6
 800b69e:	42bb      	cmp	r3, r7
 800b6a0:	460e      	mov	r6, r1
 800b6a2:	d9f4      	bls.n	800b68e <_printf_i+0x116>
 800b6a4:	2b08      	cmp	r3, #8
 800b6a6:	d10b      	bne.n	800b6c0 <_printf_i+0x148>
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	07de      	lsls	r6, r3, #31
 800b6ac:	d508      	bpl.n	800b6c0 <_printf_i+0x148>
 800b6ae:	6923      	ldr	r3, [r4, #16]
 800b6b0:	6861      	ldr	r1, [r4, #4]
 800b6b2:	4299      	cmp	r1, r3
 800b6b4:	bfde      	ittt	le
 800b6b6:	2330      	movle	r3, #48	; 0x30
 800b6b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b6bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b6c0:	1b52      	subs	r2, r2, r5
 800b6c2:	6122      	str	r2, [r4, #16]
 800b6c4:	f8cd a000 	str.w	sl, [sp]
 800b6c8:	464b      	mov	r3, r9
 800b6ca:	aa03      	add	r2, sp, #12
 800b6cc:	4621      	mov	r1, r4
 800b6ce:	4640      	mov	r0, r8
 800b6d0:	f7ff fee4 	bl	800b49c <_printf_common>
 800b6d4:	3001      	adds	r0, #1
 800b6d6:	d14a      	bne.n	800b76e <_printf_i+0x1f6>
 800b6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6dc:	b004      	add	sp, #16
 800b6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	f043 0320 	orr.w	r3, r3, #32
 800b6e8:	6023      	str	r3, [r4, #0]
 800b6ea:	4833      	ldr	r0, [pc, #204]	; (800b7b8 <_printf_i+0x240>)
 800b6ec:	2778      	movs	r7, #120	; 0x78
 800b6ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b6f2:	6823      	ldr	r3, [r4, #0]
 800b6f4:	6829      	ldr	r1, [r5, #0]
 800b6f6:	061f      	lsls	r7, r3, #24
 800b6f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b6fc:	d402      	bmi.n	800b704 <_printf_i+0x18c>
 800b6fe:	065f      	lsls	r7, r3, #25
 800b700:	bf48      	it	mi
 800b702:	b2b6      	uxthmi	r6, r6
 800b704:	07df      	lsls	r7, r3, #31
 800b706:	bf48      	it	mi
 800b708:	f043 0320 	orrmi.w	r3, r3, #32
 800b70c:	6029      	str	r1, [r5, #0]
 800b70e:	bf48      	it	mi
 800b710:	6023      	strmi	r3, [r4, #0]
 800b712:	b91e      	cbnz	r6, 800b71c <_printf_i+0x1a4>
 800b714:	6823      	ldr	r3, [r4, #0]
 800b716:	f023 0320 	bic.w	r3, r3, #32
 800b71a:	6023      	str	r3, [r4, #0]
 800b71c:	2310      	movs	r3, #16
 800b71e:	e7a7      	b.n	800b670 <_printf_i+0xf8>
 800b720:	4824      	ldr	r0, [pc, #144]	; (800b7b4 <_printf_i+0x23c>)
 800b722:	e7e4      	b.n	800b6ee <_printf_i+0x176>
 800b724:	4615      	mov	r5, r2
 800b726:	e7bd      	b.n	800b6a4 <_printf_i+0x12c>
 800b728:	682b      	ldr	r3, [r5, #0]
 800b72a:	6826      	ldr	r6, [r4, #0]
 800b72c:	6961      	ldr	r1, [r4, #20]
 800b72e:	1d18      	adds	r0, r3, #4
 800b730:	6028      	str	r0, [r5, #0]
 800b732:	0635      	lsls	r5, r6, #24
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	d501      	bpl.n	800b73c <_printf_i+0x1c4>
 800b738:	6019      	str	r1, [r3, #0]
 800b73a:	e002      	b.n	800b742 <_printf_i+0x1ca>
 800b73c:	0670      	lsls	r0, r6, #25
 800b73e:	d5fb      	bpl.n	800b738 <_printf_i+0x1c0>
 800b740:	8019      	strh	r1, [r3, #0]
 800b742:	2300      	movs	r3, #0
 800b744:	6123      	str	r3, [r4, #16]
 800b746:	4615      	mov	r5, r2
 800b748:	e7bc      	b.n	800b6c4 <_printf_i+0x14c>
 800b74a:	682b      	ldr	r3, [r5, #0]
 800b74c:	1d1a      	adds	r2, r3, #4
 800b74e:	602a      	str	r2, [r5, #0]
 800b750:	681d      	ldr	r5, [r3, #0]
 800b752:	6862      	ldr	r2, [r4, #4]
 800b754:	2100      	movs	r1, #0
 800b756:	4628      	mov	r0, r5
 800b758:	f7f4 fd4a 	bl	80001f0 <memchr>
 800b75c:	b108      	cbz	r0, 800b762 <_printf_i+0x1ea>
 800b75e:	1b40      	subs	r0, r0, r5
 800b760:	6060      	str	r0, [r4, #4]
 800b762:	6863      	ldr	r3, [r4, #4]
 800b764:	6123      	str	r3, [r4, #16]
 800b766:	2300      	movs	r3, #0
 800b768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b76c:	e7aa      	b.n	800b6c4 <_printf_i+0x14c>
 800b76e:	6923      	ldr	r3, [r4, #16]
 800b770:	462a      	mov	r2, r5
 800b772:	4649      	mov	r1, r9
 800b774:	4640      	mov	r0, r8
 800b776:	47d0      	blx	sl
 800b778:	3001      	adds	r0, #1
 800b77a:	d0ad      	beq.n	800b6d8 <_printf_i+0x160>
 800b77c:	6823      	ldr	r3, [r4, #0]
 800b77e:	079b      	lsls	r3, r3, #30
 800b780:	d413      	bmi.n	800b7aa <_printf_i+0x232>
 800b782:	68e0      	ldr	r0, [r4, #12]
 800b784:	9b03      	ldr	r3, [sp, #12]
 800b786:	4298      	cmp	r0, r3
 800b788:	bfb8      	it	lt
 800b78a:	4618      	movlt	r0, r3
 800b78c:	e7a6      	b.n	800b6dc <_printf_i+0x164>
 800b78e:	2301      	movs	r3, #1
 800b790:	4632      	mov	r2, r6
 800b792:	4649      	mov	r1, r9
 800b794:	4640      	mov	r0, r8
 800b796:	47d0      	blx	sl
 800b798:	3001      	adds	r0, #1
 800b79a:	d09d      	beq.n	800b6d8 <_printf_i+0x160>
 800b79c:	3501      	adds	r5, #1
 800b79e:	68e3      	ldr	r3, [r4, #12]
 800b7a0:	9903      	ldr	r1, [sp, #12]
 800b7a2:	1a5b      	subs	r3, r3, r1
 800b7a4:	42ab      	cmp	r3, r5
 800b7a6:	dcf2      	bgt.n	800b78e <_printf_i+0x216>
 800b7a8:	e7eb      	b.n	800b782 <_printf_i+0x20a>
 800b7aa:	2500      	movs	r5, #0
 800b7ac:	f104 0619 	add.w	r6, r4, #25
 800b7b0:	e7f5      	b.n	800b79e <_printf_i+0x226>
 800b7b2:	bf00      	nop
 800b7b4:	0800e623 	.word	0x0800e623
 800b7b8:	0800e634 	.word	0x0800e634

0800b7bc <std>:
 800b7bc:	2300      	movs	r3, #0
 800b7be:	b510      	push	{r4, lr}
 800b7c0:	4604      	mov	r4, r0
 800b7c2:	e9c0 3300 	strd	r3, r3, [r0]
 800b7c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7ca:	6083      	str	r3, [r0, #8]
 800b7cc:	8181      	strh	r1, [r0, #12]
 800b7ce:	6643      	str	r3, [r0, #100]	; 0x64
 800b7d0:	81c2      	strh	r2, [r0, #14]
 800b7d2:	6183      	str	r3, [r0, #24]
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	2208      	movs	r2, #8
 800b7d8:	305c      	adds	r0, #92	; 0x5c
 800b7da:	f000 f902 	bl	800b9e2 <memset>
 800b7de:	4b05      	ldr	r3, [pc, #20]	; (800b7f4 <std+0x38>)
 800b7e0:	6263      	str	r3, [r4, #36]	; 0x24
 800b7e2:	4b05      	ldr	r3, [pc, #20]	; (800b7f8 <std+0x3c>)
 800b7e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800b7e6:	4b05      	ldr	r3, [pc, #20]	; (800b7fc <std+0x40>)
 800b7e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b7ea:	4b05      	ldr	r3, [pc, #20]	; (800b800 <std+0x44>)
 800b7ec:	6224      	str	r4, [r4, #32]
 800b7ee:	6323      	str	r3, [r4, #48]	; 0x30
 800b7f0:	bd10      	pop	{r4, pc}
 800b7f2:	bf00      	nop
 800b7f4:	0800b95d 	.word	0x0800b95d
 800b7f8:	0800b97f 	.word	0x0800b97f
 800b7fc:	0800b9b7 	.word	0x0800b9b7
 800b800:	0800b9db 	.word	0x0800b9db

0800b804 <stdio_exit_handler>:
 800b804:	4a02      	ldr	r2, [pc, #8]	; (800b810 <stdio_exit_handler+0xc>)
 800b806:	4903      	ldr	r1, [pc, #12]	; (800b814 <stdio_exit_handler+0x10>)
 800b808:	4803      	ldr	r0, [pc, #12]	; (800b818 <stdio_exit_handler+0x14>)
 800b80a:	f000 b869 	b.w	800b8e0 <_fwalk_sglue>
 800b80e:	bf00      	nop
 800b810:	20000068 	.word	0x20000068
 800b814:	0800dcf1 	.word	0x0800dcf1
 800b818:	200001e0 	.word	0x200001e0

0800b81c <cleanup_stdio>:
 800b81c:	6841      	ldr	r1, [r0, #4]
 800b81e:	4b0c      	ldr	r3, [pc, #48]	; (800b850 <cleanup_stdio+0x34>)
 800b820:	4299      	cmp	r1, r3
 800b822:	b510      	push	{r4, lr}
 800b824:	4604      	mov	r4, r0
 800b826:	d001      	beq.n	800b82c <cleanup_stdio+0x10>
 800b828:	f002 fa62 	bl	800dcf0 <_fflush_r>
 800b82c:	68a1      	ldr	r1, [r4, #8]
 800b82e:	4b09      	ldr	r3, [pc, #36]	; (800b854 <cleanup_stdio+0x38>)
 800b830:	4299      	cmp	r1, r3
 800b832:	d002      	beq.n	800b83a <cleanup_stdio+0x1e>
 800b834:	4620      	mov	r0, r4
 800b836:	f002 fa5b 	bl	800dcf0 <_fflush_r>
 800b83a:	68e1      	ldr	r1, [r4, #12]
 800b83c:	4b06      	ldr	r3, [pc, #24]	; (800b858 <cleanup_stdio+0x3c>)
 800b83e:	4299      	cmp	r1, r3
 800b840:	d004      	beq.n	800b84c <cleanup_stdio+0x30>
 800b842:	4620      	mov	r0, r4
 800b844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b848:	f002 ba52 	b.w	800dcf0 <_fflush_r>
 800b84c:	bd10      	pop	{r4, pc}
 800b84e:	bf00      	nop
 800b850:	20000a38 	.word	0x20000a38
 800b854:	20000aa0 	.word	0x20000aa0
 800b858:	20000b08 	.word	0x20000b08

0800b85c <global_stdio_init.part.0>:
 800b85c:	b510      	push	{r4, lr}
 800b85e:	4b0b      	ldr	r3, [pc, #44]	; (800b88c <global_stdio_init.part.0+0x30>)
 800b860:	4c0b      	ldr	r4, [pc, #44]	; (800b890 <global_stdio_init.part.0+0x34>)
 800b862:	4a0c      	ldr	r2, [pc, #48]	; (800b894 <global_stdio_init.part.0+0x38>)
 800b864:	601a      	str	r2, [r3, #0]
 800b866:	4620      	mov	r0, r4
 800b868:	2200      	movs	r2, #0
 800b86a:	2104      	movs	r1, #4
 800b86c:	f7ff ffa6 	bl	800b7bc <std>
 800b870:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b874:	2201      	movs	r2, #1
 800b876:	2109      	movs	r1, #9
 800b878:	f7ff ffa0 	bl	800b7bc <std>
 800b87c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b880:	2202      	movs	r2, #2
 800b882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b886:	2112      	movs	r1, #18
 800b888:	f7ff bf98 	b.w	800b7bc <std>
 800b88c:	20000b70 	.word	0x20000b70
 800b890:	20000a38 	.word	0x20000a38
 800b894:	0800b805 	.word	0x0800b805

0800b898 <__sfp_lock_acquire>:
 800b898:	4801      	ldr	r0, [pc, #4]	; (800b8a0 <__sfp_lock_acquire+0x8>)
 800b89a:	f000 b941 	b.w	800bb20 <__retarget_lock_acquire_recursive>
 800b89e:	bf00      	nop
 800b8a0:	20000b79 	.word	0x20000b79

0800b8a4 <__sfp_lock_release>:
 800b8a4:	4801      	ldr	r0, [pc, #4]	; (800b8ac <__sfp_lock_release+0x8>)
 800b8a6:	f000 b93c 	b.w	800bb22 <__retarget_lock_release_recursive>
 800b8aa:	bf00      	nop
 800b8ac:	20000b79 	.word	0x20000b79

0800b8b0 <__sinit>:
 800b8b0:	b510      	push	{r4, lr}
 800b8b2:	4604      	mov	r4, r0
 800b8b4:	f7ff fff0 	bl	800b898 <__sfp_lock_acquire>
 800b8b8:	6a23      	ldr	r3, [r4, #32]
 800b8ba:	b11b      	cbz	r3, 800b8c4 <__sinit+0x14>
 800b8bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8c0:	f7ff bff0 	b.w	800b8a4 <__sfp_lock_release>
 800b8c4:	4b04      	ldr	r3, [pc, #16]	; (800b8d8 <__sinit+0x28>)
 800b8c6:	6223      	str	r3, [r4, #32]
 800b8c8:	4b04      	ldr	r3, [pc, #16]	; (800b8dc <__sinit+0x2c>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1f5      	bne.n	800b8bc <__sinit+0xc>
 800b8d0:	f7ff ffc4 	bl	800b85c <global_stdio_init.part.0>
 800b8d4:	e7f2      	b.n	800b8bc <__sinit+0xc>
 800b8d6:	bf00      	nop
 800b8d8:	0800b81d 	.word	0x0800b81d
 800b8dc:	20000b70 	.word	0x20000b70

0800b8e0 <_fwalk_sglue>:
 800b8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8e4:	4607      	mov	r7, r0
 800b8e6:	4688      	mov	r8, r1
 800b8e8:	4614      	mov	r4, r2
 800b8ea:	2600      	movs	r6, #0
 800b8ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8f0:	f1b9 0901 	subs.w	r9, r9, #1
 800b8f4:	d505      	bpl.n	800b902 <_fwalk_sglue+0x22>
 800b8f6:	6824      	ldr	r4, [r4, #0]
 800b8f8:	2c00      	cmp	r4, #0
 800b8fa:	d1f7      	bne.n	800b8ec <_fwalk_sglue+0xc>
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b902:	89ab      	ldrh	r3, [r5, #12]
 800b904:	2b01      	cmp	r3, #1
 800b906:	d907      	bls.n	800b918 <_fwalk_sglue+0x38>
 800b908:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b90c:	3301      	adds	r3, #1
 800b90e:	d003      	beq.n	800b918 <_fwalk_sglue+0x38>
 800b910:	4629      	mov	r1, r5
 800b912:	4638      	mov	r0, r7
 800b914:	47c0      	blx	r8
 800b916:	4306      	orrs	r6, r0
 800b918:	3568      	adds	r5, #104	; 0x68
 800b91a:	e7e9      	b.n	800b8f0 <_fwalk_sglue+0x10>

0800b91c <siprintf>:
 800b91c:	b40e      	push	{r1, r2, r3}
 800b91e:	b500      	push	{lr}
 800b920:	b09c      	sub	sp, #112	; 0x70
 800b922:	ab1d      	add	r3, sp, #116	; 0x74
 800b924:	9002      	str	r0, [sp, #8]
 800b926:	9006      	str	r0, [sp, #24]
 800b928:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b92c:	4809      	ldr	r0, [pc, #36]	; (800b954 <siprintf+0x38>)
 800b92e:	9107      	str	r1, [sp, #28]
 800b930:	9104      	str	r1, [sp, #16]
 800b932:	4909      	ldr	r1, [pc, #36]	; (800b958 <siprintf+0x3c>)
 800b934:	f853 2b04 	ldr.w	r2, [r3], #4
 800b938:	9105      	str	r1, [sp, #20]
 800b93a:	6800      	ldr	r0, [r0, #0]
 800b93c:	9301      	str	r3, [sp, #4]
 800b93e:	a902      	add	r1, sp, #8
 800b940:	f002 f852 	bl	800d9e8 <_svfiprintf_r>
 800b944:	9b02      	ldr	r3, [sp, #8]
 800b946:	2200      	movs	r2, #0
 800b948:	701a      	strb	r2, [r3, #0]
 800b94a:	b01c      	add	sp, #112	; 0x70
 800b94c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b950:	b003      	add	sp, #12
 800b952:	4770      	bx	lr
 800b954:	2000022c 	.word	0x2000022c
 800b958:	ffff0208 	.word	0xffff0208

0800b95c <__sread>:
 800b95c:	b510      	push	{r4, lr}
 800b95e:	460c      	mov	r4, r1
 800b960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b964:	f000 f87e 	bl	800ba64 <_read_r>
 800b968:	2800      	cmp	r0, #0
 800b96a:	bfab      	itete	ge
 800b96c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b96e:	89a3      	ldrhlt	r3, [r4, #12]
 800b970:	181b      	addge	r3, r3, r0
 800b972:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b976:	bfac      	ite	ge
 800b978:	6563      	strge	r3, [r4, #84]	; 0x54
 800b97a:	81a3      	strhlt	r3, [r4, #12]
 800b97c:	bd10      	pop	{r4, pc}

0800b97e <__swrite>:
 800b97e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b982:	461f      	mov	r7, r3
 800b984:	898b      	ldrh	r3, [r1, #12]
 800b986:	05db      	lsls	r3, r3, #23
 800b988:	4605      	mov	r5, r0
 800b98a:	460c      	mov	r4, r1
 800b98c:	4616      	mov	r6, r2
 800b98e:	d505      	bpl.n	800b99c <__swrite+0x1e>
 800b990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b994:	2302      	movs	r3, #2
 800b996:	2200      	movs	r2, #0
 800b998:	f000 f852 	bl	800ba40 <_lseek_r>
 800b99c:	89a3      	ldrh	r3, [r4, #12]
 800b99e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9a6:	81a3      	strh	r3, [r4, #12]
 800b9a8:	4632      	mov	r2, r6
 800b9aa:	463b      	mov	r3, r7
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b2:	f000 b879 	b.w	800baa8 <_write_r>

0800b9b6 <__sseek>:
 800b9b6:	b510      	push	{r4, lr}
 800b9b8:	460c      	mov	r4, r1
 800b9ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9be:	f000 f83f 	bl	800ba40 <_lseek_r>
 800b9c2:	1c43      	adds	r3, r0, #1
 800b9c4:	89a3      	ldrh	r3, [r4, #12]
 800b9c6:	bf15      	itete	ne
 800b9c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9d2:	81a3      	strheq	r3, [r4, #12]
 800b9d4:	bf18      	it	ne
 800b9d6:	81a3      	strhne	r3, [r4, #12]
 800b9d8:	bd10      	pop	{r4, pc}

0800b9da <__sclose>:
 800b9da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9de:	f000 b81f 	b.w	800ba20 <_close_r>

0800b9e2 <memset>:
 800b9e2:	4402      	add	r2, r0
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d100      	bne.n	800b9ec <memset+0xa>
 800b9ea:	4770      	bx	lr
 800b9ec:	f803 1b01 	strb.w	r1, [r3], #1
 800b9f0:	e7f9      	b.n	800b9e6 <memset+0x4>

0800b9f2 <strncmp>:
 800b9f2:	b510      	push	{r4, lr}
 800b9f4:	b16a      	cbz	r2, 800ba12 <strncmp+0x20>
 800b9f6:	3901      	subs	r1, #1
 800b9f8:	1884      	adds	r4, r0, r2
 800b9fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9fe:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d103      	bne.n	800ba0e <strncmp+0x1c>
 800ba06:	42a0      	cmp	r0, r4
 800ba08:	d001      	beq.n	800ba0e <strncmp+0x1c>
 800ba0a:	2a00      	cmp	r2, #0
 800ba0c:	d1f5      	bne.n	800b9fa <strncmp+0x8>
 800ba0e:	1ad0      	subs	r0, r2, r3
 800ba10:	bd10      	pop	{r4, pc}
 800ba12:	4610      	mov	r0, r2
 800ba14:	e7fc      	b.n	800ba10 <strncmp+0x1e>
	...

0800ba18 <_localeconv_r>:
 800ba18:	4800      	ldr	r0, [pc, #0]	; (800ba1c <_localeconv_r+0x4>)
 800ba1a:	4770      	bx	lr
 800ba1c:	20000164 	.word	0x20000164

0800ba20 <_close_r>:
 800ba20:	b538      	push	{r3, r4, r5, lr}
 800ba22:	4d06      	ldr	r5, [pc, #24]	; (800ba3c <_close_r+0x1c>)
 800ba24:	2300      	movs	r3, #0
 800ba26:	4604      	mov	r4, r0
 800ba28:	4608      	mov	r0, r1
 800ba2a:	602b      	str	r3, [r5, #0]
 800ba2c:	f7f7 fdf3 	bl	8003616 <_close>
 800ba30:	1c43      	adds	r3, r0, #1
 800ba32:	d102      	bne.n	800ba3a <_close_r+0x1a>
 800ba34:	682b      	ldr	r3, [r5, #0]
 800ba36:	b103      	cbz	r3, 800ba3a <_close_r+0x1a>
 800ba38:	6023      	str	r3, [r4, #0]
 800ba3a:	bd38      	pop	{r3, r4, r5, pc}
 800ba3c:	20000b74 	.word	0x20000b74

0800ba40 <_lseek_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	4d07      	ldr	r5, [pc, #28]	; (800ba60 <_lseek_r+0x20>)
 800ba44:	4604      	mov	r4, r0
 800ba46:	4608      	mov	r0, r1
 800ba48:	4611      	mov	r1, r2
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	602a      	str	r2, [r5, #0]
 800ba4e:	461a      	mov	r2, r3
 800ba50:	f7f7 fe08 	bl	8003664 <_lseek>
 800ba54:	1c43      	adds	r3, r0, #1
 800ba56:	d102      	bne.n	800ba5e <_lseek_r+0x1e>
 800ba58:	682b      	ldr	r3, [r5, #0]
 800ba5a:	b103      	cbz	r3, 800ba5e <_lseek_r+0x1e>
 800ba5c:	6023      	str	r3, [r4, #0]
 800ba5e:	bd38      	pop	{r3, r4, r5, pc}
 800ba60:	20000b74 	.word	0x20000b74

0800ba64 <_read_r>:
 800ba64:	b538      	push	{r3, r4, r5, lr}
 800ba66:	4d07      	ldr	r5, [pc, #28]	; (800ba84 <_read_r+0x20>)
 800ba68:	4604      	mov	r4, r0
 800ba6a:	4608      	mov	r0, r1
 800ba6c:	4611      	mov	r1, r2
 800ba6e:	2200      	movs	r2, #0
 800ba70:	602a      	str	r2, [r5, #0]
 800ba72:	461a      	mov	r2, r3
 800ba74:	f7f7 fd96 	bl	80035a4 <_read>
 800ba78:	1c43      	adds	r3, r0, #1
 800ba7a:	d102      	bne.n	800ba82 <_read_r+0x1e>
 800ba7c:	682b      	ldr	r3, [r5, #0]
 800ba7e:	b103      	cbz	r3, 800ba82 <_read_r+0x1e>
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	bd38      	pop	{r3, r4, r5, pc}
 800ba84:	20000b74 	.word	0x20000b74

0800ba88 <_sbrk_r>:
 800ba88:	b538      	push	{r3, r4, r5, lr}
 800ba8a:	4d06      	ldr	r5, [pc, #24]	; (800baa4 <_sbrk_r+0x1c>)
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	4604      	mov	r4, r0
 800ba90:	4608      	mov	r0, r1
 800ba92:	602b      	str	r3, [r5, #0]
 800ba94:	f7f7 fdf4 	bl	8003680 <_sbrk>
 800ba98:	1c43      	adds	r3, r0, #1
 800ba9a:	d102      	bne.n	800baa2 <_sbrk_r+0x1a>
 800ba9c:	682b      	ldr	r3, [r5, #0]
 800ba9e:	b103      	cbz	r3, 800baa2 <_sbrk_r+0x1a>
 800baa0:	6023      	str	r3, [r4, #0]
 800baa2:	bd38      	pop	{r3, r4, r5, pc}
 800baa4:	20000b74 	.word	0x20000b74

0800baa8 <_write_r>:
 800baa8:	b538      	push	{r3, r4, r5, lr}
 800baaa:	4d07      	ldr	r5, [pc, #28]	; (800bac8 <_write_r+0x20>)
 800baac:	4604      	mov	r4, r0
 800baae:	4608      	mov	r0, r1
 800bab0:	4611      	mov	r1, r2
 800bab2:	2200      	movs	r2, #0
 800bab4:	602a      	str	r2, [r5, #0]
 800bab6:	461a      	mov	r2, r3
 800bab8:	f7f7 fd91 	bl	80035de <_write>
 800babc:	1c43      	adds	r3, r0, #1
 800babe:	d102      	bne.n	800bac6 <_write_r+0x1e>
 800bac0:	682b      	ldr	r3, [r5, #0]
 800bac2:	b103      	cbz	r3, 800bac6 <_write_r+0x1e>
 800bac4:	6023      	str	r3, [r4, #0]
 800bac6:	bd38      	pop	{r3, r4, r5, pc}
 800bac8:	20000b74 	.word	0x20000b74

0800bacc <__errno>:
 800bacc:	4b01      	ldr	r3, [pc, #4]	; (800bad4 <__errno+0x8>)
 800bace:	6818      	ldr	r0, [r3, #0]
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	2000022c 	.word	0x2000022c

0800bad8 <__libc_init_array>:
 800bad8:	b570      	push	{r4, r5, r6, lr}
 800bada:	4d0d      	ldr	r5, [pc, #52]	; (800bb10 <__libc_init_array+0x38>)
 800badc:	4c0d      	ldr	r4, [pc, #52]	; (800bb14 <__libc_init_array+0x3c>)
 800bade:	1b64      	subs	r4, r4, r5
 800bae0:	10a4      	asrs	r4, r4, #2
 800bae2:	2600      	movs	r6, #0
 800bae4:	42a6      	cmp	r6, r4
 800bae6:	d109      	bne.n	800bafc <__libc_init_array+0x24>
 800bae8:	4d0b      	ldr	r5, [pc, #44]	; (800bb18 <__libc_init_array+0x40>)
 800baea:	4c0c      	ldr	r4, [pc, #48]	; (800bb1c <__libc_init_array+0x44>)
 800baec:	f002 fc30 	bl	800e350 <_init>
 800baf0:	1b64      	subs	r4, r4, r5
 800baf2:	10a4      	asrs	r4, r4, #2
 800baf4:	2600      	movs	r6, #0
 800baf6:	42a6      	cmp	r6, r4
 800baf8:	d105      	bne.n	800bb06 <__libc_init_array+0x2e>
 800bafa:	bd70      	pop	{r4, r5, r6, pc}
 800bafc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb00:	4798      	blx	r3
 800bb02:	3601      	adds	r6, #1
 800bb04:	e7ee      	b.n	800bae4 <__libc_init_array+0xc>
 800bb06:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb0a:	4798      	blx	r3
 800bb0c:	3601      	adds	r6, #1
 800bb0e:	e7f2      	b.n	800baf6 <__libc_init_array+0x1e>
 800bb10:	0800e8e4 	.word	0x0800e8e4
 800bb14:	0800e8e4 	.word	0x0800e8e4
 800bb18:	0800e8e4 	.word	0x0800e8e4
 800bb1c:	0800e8e8 	.word	0x0800e8e8

0800bb20 <__retarget_lock_acquire_recursive>:
 800bb20:	4770      	bx	lr

0800bb22 <__retarget_lock_release_recursive>:
 800bb22:	4770      	bx	lr

0800bb24 <memcpy>:
 800bb24:	440a      	add	r2, r1
 800bb26:	4291      	cmp	r1, r2
 800bb28:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb2c:	d100      	bne.n	800bb30 <memcpy+0xc>
 800bb2e:	4770      	bx	lr
 800bb30:	b510      	push	{r4, lr}
 800bb32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb3a:	4291      	cmp	r1, r2
 800bb3c:	d1f9      	bne.n	800bb32 <memcpy+0xe>
 800bb3e:	bd10      	pop	{r4, pc}

0800bb40 <nan>:
 800bb40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bb48 <nan+0x8>
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	00000000 	.word	0x00000000
 800bb4c:	7ff80000 	.word	0x7ff80000

0800bb50 <quorem>:
 800bb50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb54:	6903      	ldr	r3, [r0, #16]
 800bb56:	690c      	ldr	r4, [r1, #16]
 800bb58:	42a3      	cmp	r3, r4
 800bb5a:	4607      	mov	r7, r0
 800bb5c:	db7e      	blt.n	800bc5c <quorem+0x10c>
 800bb5e:	3c01      	subs	r4, #1
 800bb60:	f101 0814 	add.w	r8, r1, #20
 800bb64:	f100 0514 	add.w	r5, r0, #20
 800bb68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb6c:	9301      	str	r3, [sp, #4]
 800bb6e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb76:	3301      	adds	r3, #1
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bb7e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb82:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb86:	d331      	bcc.n	800bbec <quorem+0x9c>
 800bb88:	f04f 0e00 	mov.w	lr, #0
 800bb8c:	4640      	mov	r0, r8
 800bb8e:	46ac      	mov	ip, r5
 800bb90:	46f2      	mov	sl, lr
 800bb92:	f850 2b04 	ldr.w	r2, [r0], #4
 800bb96:	b293      	uxth	r3, r2
 800bb98:	fb06 e303 	mla	r3, r6, r3, lr
 800bb9c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bba0:	0c1a      	lsrs	r2, r3, #16
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	ebaa 0303 	sub.w	r3, sl, r3
 800bba8:	f8dc a000 	ldr.w	sl, [ip]
 800bbac:	fa13 f38a 	uxtah	r3, r3, sl
 800bbb0:	fb06 220e 	mla	r2, r6, lr, r2
 800bbb4:	9300      	str	r3, [sp, #0]
 800bbb6:	9b00      	ldr	r3, [sp, #0]
 800bbb8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bbbc:	b292      	uxth	r2, r2
 800bbbe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bbc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbc6:	f8bd 3000 	ldrh.w	r3, [sp]
 800bbca:	4581      	cmp	r9, r0
 800bbcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbd0:	f84c 3b04 	str.w	r3, [ip], #4
 800bbd4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bbd8:	d2db      	bcs.n	800bb92 <quorem+0x42>
 800bbda:	f855 300b 	ldr.w	r3, [r5, fp]
 800bbde:	b92b      	cbnz	r3, 800bbec <quorem+0x9c>
 800bbe0:	9b01      	ldr	r3, [sp, #4]
 800bbe2:	3b04      	subs	r3, #4
 800bbe4:	429d      	cmp	r5, r3
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	d32c      	bcc.n	800bc44 <quorem+0xf4>
 800bbea:	613c      	str	r4, [r7, #16]
 800bbec:	4638      	mov	r0, r7
 800bbee:	f001 fca5 	bl	800d53c <__mcmp>
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	db22      	blt.n	800bc3c <quorem+0xec>
 800bbf6:	3601      	adds	r6, #1
 800bbf8:	4629      	mov	r1, r5
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc00:	f8d1 c000 	ldr.w	ip, [r1]
 800bc04:	b293      	uxth	r3, r2
 800bc06:	1ac3      	subs	r3, r0, r3
 800bc08:	0c12      	lsrs	r2, r2, #16
 800bc0a:	fa13 f38c 	uxtah	r3, r3, ip
 800bc0e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bc12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc16:	b29b      	uxth	r3, r3
 800bc18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc1c:	45c1      	cmp	r9, r8
 800bc1e:	f841 3b04 	str.w	r3, [r1], #4
 800bc22:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bc26:	d2e9      	bcs.n	800bbfc <quorem+0xac>
 800bc28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc30:	b922      	cbnz	r2, 800bc3c <quorem+0xec>
 800bc32:	3b04      	subs	r3, #4
 800bc34:	429d      	cmp	r5, r3
 800bc36:	461a      	mov	r2, r3
 800bc38:	d30a      	bcc.n	800bc50 <quorem+0x100>
 800bc3a:	613c      	str	r4, [r7, #16]
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	b003      	add	sp, #12
 800bc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc44:	6812      	ldr	r2, [r2, #0]
 800bc46:	3b04      	subs	r3, #4
 800bc48:	2a00      	cmp	r2, #0
 800bc4a:	d1ce      	bne.n	800bbea <quorem+0x9a>
 800bc4c:	3c01      	subs	r4, #1
 800bc4e:	e7c9      	b.n	800bbe4 <quorem+0x94>
 800bc50:	6812      	ldr	r2, [r2, #0]
 800bc52:	3b04      	subs	r3, #4
 800bc54:	2a00      	cmp	r2, #0
 800bc56:	d1f0      	bne.n	800bc3a <quorem+0xea>
 800bc58:	3c01      	subs	r4, #1
 800bc5a:	e7eb      	b.n	800bc34 <quorem+0xe4>
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	e7ee      	b.n	800bc3e <quorem+0xee>

0800bc60 <_dtoa_r>:
 800bc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc64:	ed2d 8b04 	vpush	{d8-d9}
 800bc68:	69c5      	ldr	r5, [r0, #28]
 800bc6a:	b093      	sub	sp, #76	; 0x4c
 800bc6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bc70:	ec57 6b10 	vmov	r6, r7, d0
 800bc74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bc78:	9107      	str	r1, [sp, #28]
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	920a      	str	r2, [sp, #40]	; 0x28
 800bc7e:	930d      	str	r3, [sp, #52]	; 0x34
 800bc80:	b975      	cbnz	r5, 800bca0 <_dtoa_r+0x40>
 800bc82:	2010      	movs	r0, #16
 800bc84:	f7fe fa26 	bl	800a0d4 <malloc>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	61e0      	str	r0, [r4, #28]
 800bc8c:	b920      	cbnz	r0, 800bc98 <_dtoa_r+0x38>
 800bc8e:	4bae      	ldr	r3, [pc, #696]	; (800bf48 <_dtoa_r+0x2e8>)
 800bc90:	21ef      	movs	r1, #239	; 0xef
 800bc92:	48ae      	ldr	r0, [pc, #696]	; (800bf4c <_dtoa_r+0x2ec>)
 800bc94:	f002 f86e 	bl	800dd74 <__assert_func>
 800bc98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bc9c:	6005      	str	r5, [r0, #0]
 800bc9e:	60c5      	str	r5, [r0, #12]
 800bca0:	69e3      	ldr	r3, [r4, #28]
 800bca2:	6819      	ldr	r1, [r3, #0]
 800bca4:	b151      	cbz	r1, 800bcbc <_dtoa_r+0x5c>
 800bca6:	685a      	ldr	r2, [r3, #4]
 800bca8:	604a      	str	r2, [r1, #4]
 800bcaa:	2301      	movs	r3, #1
 800bcac:	4093      	lsls	r3, r2
 800bcae:	608b      	str	r3, [r1, #8]
 800bcb0:	4620      	mov	r0, r4
 800bcb2:	f001 f9bd 	bl	800d030 <_Bfree>
 800bcb6:	69e3      	ldr	r3, [r4, #28]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	601a      	str	r2, [r3, #0]
 800bcbc:	1e3b      	subs	r3, r7, #0
 800bcbe:	bfbb      	ittet	lt
 800bcc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bcc4:	9303      	strlt	r3, [sp, #12]
 800bcc6:	2300      	movge	r3, #0
 800bcc8:	2201      	movlt	r2, #1
 800bcca:	bfac      	ite	ge
 800bccc:	f8c8 3000 	strge.w	r3, [r8]
 800bcd0:	f8c8 2000 	strlt.w	r2, [r8]
 800bcd4:	4b9e      	ldr	r3, [pc, #632]	; (800bf50 <_dtoa_r+0x2f0>)
 800bcd6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bcda:	ea33 0308 	bics.w	r3, r3, r8
 800bcde:	d11b      	bne.n	800bd18 <_dtoa_r+0xb8>
 800bce0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bce2:	f242 730f 	movw	r3, #9999	; 0x270f
 800bce6:	6013      	str	r3, [r2, #0]
 800bce8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bcec:	4333      	orrs	r3, r6
 800bcee:	f000 8593 	beq.w	800c818 <_dtoa_r+0xbb8>
 800bcf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcf4:	b963      	cbnz	r3, 800bd10 <_dtoa_r+0xb0>
 800bcf6:	4b97      	ldr	r3, [pc, #604]	; (800bf54 <_dtoa_r+0x2f4>)
 800bcf8:	e027      	b.n	800bd4a <_dtoa_r+0xea>
 800bcfa:	4b97      	ldr	r3, [pc, #604]	; (800bf58 <_dtoa_r+0x2f8>)
 800bcfc:	9300      	str	r3, [sp, #0]
 800bcfe:	3308      	adds	r3, #8
 800bd00:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd02:	6013      	str	r3, [r2, #0]
 800bd04:	9800      	ldr	r0, [sp, #0]
 800bd06:	b013      	add	sp, #76	; 0x4c
 800bd08:	ecbd 8b04 	vpop	{d8-d9}
 800bd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd10:	4b90      	ldr	r3, [pc, #576]	; (800bf54 <_dtoa_r+0x2f4>)
 800bd12:	9300      	str	r3, [sp, #0]
 800bd14:	3303      	adds	r3, #3
 800bd16:	e7f3      	b.n	800bd00 <_dtoa_r+0xa0>
 800bd18:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	ec51 0b17 	vmov	r0, r1, d7
 800bd22:	eeb0 8a47 	vmov.f32	s16, s14
 800bd26:	eef0 8a67 	vmov.f32	s17, s15
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	f7f4 fedc 	bl	8000ae8 <__aeabi_dcmpeq>
 800bd30:	4681      	mov	r9, r0
 800bd32:	b160      	cbz	r0, 800bd4e <_dtoa_r+0xee>
 800bd34:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd36:	2301      	movs	r3, #1
 800bd38:	6013      	str	r3, [r2, #0]
 800bd3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	f000 8568 	beq.w	800c812 <_dtoa_r+0xbb2>
 800bd42:	4b86      	ldr	r3, [pc, #536]	; (800bf5c <_dtoa_r+0x2fc>)
 800bd44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd46:	6013      	str	r3, [r2, #0]
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	e7da      	b.n	800bd04 <_dtoa_r+0xa4>
 800bd4e:	aa10      	add	r2, sp, #64	; 0x40
 800bd50:	a911      	add	r1, sp, #68	; 0x44
 800bd52:	4620      	mov	r0, r4
 800bd54:	eeb0 0a48 	vmov.f32	s0, s16
 800bd58:	eef0 0a68 	vmov.f32	s1, s17
 800bd5c:	f001 fd04 	bl	800d768 <__d2b>
 800bd60:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bd64:	4682      	mov	sl, r0
 800bd66:	2d00      	cmp	r5, #0
 800bd68:	d07f      	beq.n	800be6a <_dtoa_r+0x20a>
 800bd6a:	ee18 3a90 	vmov	r3, s17
 800bd6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd72:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bd76:	ec51 0b18 	vmov	r0, r1, d8
 800bd7a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bd7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bd82:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bd86:	4619      	mov	r1, r3
 800bd88:	2200      	movs	r2, #0
 800bd8a:	4b75      	ldr	r3, [pc, #468]	; (800bf60 <_dtoa_r+0x300>)
 800bd8c:	f7f4 fa8c 	bl	80002a8 <__aeabi_dsub>
 800bd90:	a367      	add	r3, pc, #412	; (adr r3, 800bf30 <_dtoa_r+0x2d0>)
 800bd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd96:	f7f4 fc3f 	bl	8000618 <__aeabi_dmul>
 800bd9a:	a367      	add	r3, pc, #412	; (adr r3, 800bf38 <_dtoa_r+0x2d8>)
 800bd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda0:	f7f4 fa84 	bl	80002ac <__adddf3>
 800bda4:	4606      	mov	r6, r0
 800bda6:	4628      	mov	r0, r5
 800bda8:	460f      	mov	r7, r1
 800bdaa:	f7f4 fbcb 	bl	8000544 <__aeabi_i2d>
 800bdae:	a364      	add	r3, pc, #400	; (adr r3, 800bf40 <_dtoa_r+0x2e0>)
 800bdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb4:	f7f4 fc30 	bl	8000618 <__aeabi_dmul>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	460b      	mov	r3, r1
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	4639      	mov	r1, r7
 800bdc0:	f7f4 fa74 	bl	80002ac <__adddf3>
 800bdc4:	4606      	mov	r6, r0
 800bdc6:	460f      	mov	r7, r1
 800bdc8:	f7f4 fed6 	bl	8000b78 <__aeabi_d2iz>
 800bdcc:	2200      	movs	r2, #0
 800bdce:	4683      	mov	fp, r0
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	4639      	mov	r1, r7
 800bdd6:	f7f4 fe91 	bl	8000afc <__aeabi_dcmplt>
 800bdda:	b148      	cbz	r0, 800bdf0 <_dtoa_r+0x190>
 800bddc:	4658      	mov	r0, fp
 800bdde:	f7f4 fbb1 	bl	8000544 <__aeabi_i2d>
 800bde2:	4632      	mov	r2, r6
 800bde4:	463b      	mov	r3, r7
 800bde6:	f7f4 fe7f 	bl	8000ae8 <__aeabi_dcmpeq>
 800bdea:	b908      	cbnz	r0, 800bdf0 <_dtoa_r+0x190>
 800bdec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bdf0:	f1bb 0f16 	cmp.w	fp, #22
 800bdf4:	d857      	bhi.n	800bea6 <_dtoa_r+0x246>
 800bdf6:	4b5b      	ldr	r3, [pc, #364]	; (800bf64 <_dtoa_r+0x304>)
 800bdf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be00:	ec51 0b18 	vmov	r0, r1, d8
 800be04:	f7f4 fe7a 	bl	8000afc <__aeabi_dcmplt>
 800be08:	2800      	cmp	r0, #0
 800be0a:	d04e      	beq.n	800beaa <_dtoa_r+0x24a>
 800be0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be10:	2300      	movs	r3, #0
 800be12:	930c      	str	r3, [sp, #48]	; 0x30
 800be14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be16:	1b5b      	subs	r3, r3, r5
 800be18:	1e5a      	subs	r2, r3, #1
 800be1a:	bf45      	ittet	mi
 800be1c:	f1c3 0301 	rsbmi	r3, r3, #1
 800be20:	9305      	strmi	r3, [sp, #20]
 800be22:	2300      	movpl	r3, #0
 800be24:	2300      	movmi	r3, #0
 800be26:	9206      	str	r2, [sp, #24]
 800be28:	bf54      	ite	pl
 800be2a:	9305      	strpl	r3, [sp, #20]
 800be2c:	9306      	strmi	r3, [sp, #24]
 800be2e:	f1bb 0f00 	cmp.w	fp, #0
 800be32:	db3c      	blt.n	800beae <_dtoa_r+0x24e>
 800be34:	9b06      	ldr	r3, [sp, #24]
 800be36:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800be3a:	445b      	add	r3, fp
 800be3c:	9306      	str	r3, [sp, #24]
 800be3e:	2300      	movs	r3, #0
 800be40:	9308      	str	r3, [sp, #32]
 800be42:	9b07      	ldr	r3, [sp, #28]
 800be44:	2b09      	cmp	r3, #9
 800be46:	d868      	bhi.n	800bf1a <_dtoa_r+0x2ba>
 800be48:	2b05      	cmp	r3, #5
 800be4a:	bfc4      	itt	gt
 800be4c:	3b04      	subgt	r3, #4
 800be4e:	9307      	strgt	r3, [sp, #28]
 800be50:	9b07      	ldr	r3, [sp, #28]
 800be52:	f1a3 0302 	sub.w	r3, r3, #2
 800be56:	bfcc      	ite	gt
 800be58:	2500      	movgt	r5, #0
 800be5a:	2501      	movle	r5, #1
 800be5c:	2b03      	cmp	r3, #3
 800be5e:	f200 8085 	bhi.w	800bf6c <_dtoa_r+0x30c>
 800be62:	e8df f003 	tbb	[pc, r3]
 800be66:	3b2e      	.short	0x3b2e
 800be68:	5839      	.short	0x5839
 800be6a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800be6e:	441d      	add	r5, r3
 800be70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800be74:	2b20      	cmp	r3, #32
 800be76:	bfc1      	itttt	gt
 800be78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800be7c:	fa08 f803 	lslgt.w	r8, r8, r3
 800be80:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800be84:	fa26 f303 	lsrgt.w	r3, r6, r3
 800be88:	bfd6      	itet	le
 800be8a:	f1c3 0320 	rsble	r3, r3, #32
 800be8e:	ea48 0003 	orrgt.w	r0, r8, r3
 800be92:	fa06 f003 	lslle.w	r0, r6, r3
 800be96:	f7f4 fb45 	bl	8000524 <__aeabi_ui2d>
 800be9a:	2201      	movs	r2, #1
 800be9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bea0:	3d01      	subs	r5, #1
 800bea2:	920e      	str	r2, [sp, #56]	; 0x38
 800bea4:	e76f      	b.n	800bd86 <_dtoa_r+0x126>
 800bea6:	2301      	movs	r3, #1
 800bea8:	e7b3      	b.n	800be12 <_dtoa_r+0x1b2>
 800beaa:	900c      	str	r0, [sp, #48]	; 0x30
 800beac:	e7b2      	b.n	800be14 <_dtoa_r+0x1b4>
 800beae:	9b05      	ldr	r3, [sp, #20]
 800beb0:	eba3 030b 	sub.w	r3, r3, fp
 800beb4:	9305      	str	r3, [sp, #20]
 800beb6:	f1cb 0300 	rsb	r3, fp, #0
 800beba:	9308      	str	r3, [sp, #32]
 800bebc:	2300      	movs	r3, #0
 800bebe:	930b      	str	r3, [sp, #44]	; 0x2c
 800bec0:	e7bf      	b.n	800be42 <_dtoa_r+0x1e2>
 800bec2:	2300      	movs	r3, #0
 800bec4:	9309      	str	r3, [sp, #36]	; 0x24
 800bec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bec8:	2b00      	cmp	r3, #0
 800beca:	dc52      	bgt.n	800bf72 <_dtoa_r+0x312>
 800becc:	2301      	movs	r3, #1
 800bece:	9301      	str	r3, [sp, #4]
 800bed0:	9304      	str	r3, [sp, #16]
 800bed2:	461a      	mov	r2, r3
 800bed4:	920a      	str	r2, [sp, #40]	; 0x28
 800bed6:	e00b      	b.n	800bef0 <_dtoa_r+0x290>
 800bed8:	2301      	movs	r3, #1
 800beda:	e7f3      	b.n	800bec4 <_dtoa_r+0x264>
 800bedc:	2300      	movs	r3, #0
 800bede:	9309      	str	r3, [sp, #36]	; 0x24
 800bee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bee2:	445b      	add	r3, fp
 800bee4:	9301      	str	r3, [sp, #4]
 800bee6:	3301      	adds	r3, #1
 800bee8:	2b01      	cmp	r3, #1
 800beea:	9304      	str	r3, [sp, #16]
 800beec:	bfb8      	it	lt
 800beee:	2301      	movlt	r3, #1
 800bef0:	69e0      	ldr	r0, [r4, #28]
 800bef2:	2100      	movs	r1, #0
 800bef4:	2204      	movs	r2, #4
 800bef6:	f102 0614 	add.w	r6, r2, #20
 800befa:	429e      	cmp	r6, r3
 800befc:	d93d      	bls.n	800bf7a <_dtoa_r+0x31a>
 800befe:	6041      	str	r1, [r0, #4]
 800bf00:	4620      	mov	r0, r4
 800bf02:	f001 f855 	bl	800cfb0 <_Balloc>
 800bf06:	9000      	str	r0, [sp, #0]
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	d139      	bne.n	800bf80 <_dtoa_r+0x320>
 800bf0c:	4b16      	ldr	r3, [pc, #88]	; (800bf68 <_dtoa_r+0x308>)
 800bf0e:	4602      	mov	r2, r0
 800bf10:	f240 11af 	movw	r1, #431	; 0x1af
 800bf14:	e6bd      	b.n	800bc92 <_dtoa_r+0x32>
 800bf16:	2301      	movs	r3, #1
 800bf18:	e7e1      	b.n	800bede <_dtoa_r+0x27e>
 800bf1a:	2501      	movs	r5, #1
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	9307      	str	r3, [sp, #28]
 800bf20:	9509      	str	r5, [sp, #36]	; 0x24
 800bf22:	f04f 33ff 	mov.w	r3, #4294967295
 800bf26:	9301      	str	r3, [sp, #4]
 800bf28:	9304      	str	r3, [sp, #16]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	2312      	movs	r3, #18
 800bf2e:	e7d1      	b.n	800bed4 <_dtoa_r+0x274>
 800bf30:	636f4361 	.word	0x636f4361
 800bf34:	3fd287a7 	.word	0x3fd287a7
 800bf38:	8b60c8b3 	.word	0x8b60c8b3
 800bf3c:	3fc68a28 	.word	0x3fc68a28
 800bf40:	509f79fb 	.word	0x509f79fb
 800bf44:	3fd34413 	.word	0x3fd34413
 800bf48:	0800e65a 	.word	0x0800e65a
 800bf4c:	0800e671 	.word	0x0800e671
 800bf50:	7ff00000 	.word	0x7ff00000
 800bf54:	0800e656 	.word	0x0800e656
 800bf58:	0800e64d 	.word	0x0800e64d
 800bf5c:	0800e622 	.word	0x0800e622
 800bf60:	3ff80000 	.word	0x3ff80000
 800bf64:	0800e7c0 	.word	0x0800e7c0
 800bf68:	0800e6c9 	.word	0x0800e6c9
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf70:	e7d7      	b.n	800bf22 <_dtoa_r+0x2c2>
 800bf72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf74:	9301      	str	r3, [sp, #4]
 800bf76:	9304      	str	r3, [sp, #16]
 800bf78:	e7ba      	b.n	800bef0 <_dtoa_r+0x290>
 800bf7a:	3101      	adds	r1, #1
 800bf7c:	0052      	lsls	r2, r2, #1
 800bf7e:	e7ba      	b.n	800bef6 <_dtoa_r+0x296>
 800bf80:	69e3      	ldr	r3, [r4, #28]
 800bf82:	9a00      	ldr	r2, [sp, #0]
 800bf84:	601a      	str	r2, [r3, #0]
 800bf86:	9b04      	ldr	r3, [sp, #16]
 800bf88:	2b0e      	cmp	r3, #14
 800bf8a:	f200 80a8 	bhi.w	800c0de <_dtoa_r+0x47e>
 800bf8e:	2d00      	cmp	r5, #0
 800bf90:	f000 80a5 	beq.w	800c0de <_dtoa_r+0x47e>
 800bf94:	f1bb 0f00 	cmp.w	fp, #0
 800bf98:	dd38      	ble.n	800c00c <_dtoa_r+0x3ac>
 800bf9a:	4bc0      	ldr	r3, [pc, #768]	; (800c29c <_dtoa_r+0x63c>)
 800bf9c:	f00b 020f 	and.w	r2, fp, #15
 800bfa0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfa4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bfa8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bfac:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bfb0:	d019      	beq.n	800bfe6 <_dtoa_r+0x386>
 800bfb2:	4bbb      	ldr	r3, [pc, #748]	; (800c2a0 <_dtoa_r+0x640>)
 800bfb4:	ec51 0b18 	vmov	r0, r1, d8
 800bfb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bfbc:	f7f4 fc56 	bl	800086c <__aeabi_ddiv>
 800bfc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfc4:	f008 080f 	and.w	r8, r8, #15
 800bfc8:	2503      	movs	r5, #3
 800bfca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c2a0 <_dtoa_r+0x640>
 800bfce:	f1b8 0f00 	cmp.w	r8, #0
 800bfd2:	d10a      	bne.n	800bfea <_dtoa_r+0x38a>
 800bfd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfd8:	4632      	mov	r2, r6
 800bfda:	463b      	mov	r3, r7
 800bfdc:	f7f4 fc46 	bl	800086c <__aeabi_ddiv>
 800bfe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfe4:	e02b      	b.n	800c03e <_dtoa_r+0x3de>
 800bfe6:	2502      	movs	r5, #2
 800bfe8:	e7ef      	b.n	800bfca <_dtoa_r+0x36a>
 800bfea:	f018 0f01 	tst.w	r8, #1
 800bfee:	d008      	beq.n	800c002 <_dtoa_r+0x3a2>
 800bff0:	4630      	mov	r0, r6
 800bff2:	4639      	mov	r1, r7
 800bff4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bff8:	f7f4 fb0e 	bl	8000618 <__aeabi_dmul>
 800bffc:	3501      	adds	r5, #1
 800bffe:	4606      	mov	r6, r0
 800c000:	460f      	mov	r7, r1
 800c002:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c006:	f109 0908 	add.w	r9, r9, #8
 800c00a:	e7e0      	b.n	800bfce <_dtoa_r+0x36e>
 800c00c:	f000 809f 	beq.w	800c14e <_dtoa_r+0x4ee>
 800c010:	f1cb 0600 	rsb	r6, fp, #0
 800c014:	4ba1      	ldr	r3, [pc, #644]	; (800c29c <_dtoa_r+0x63c>)
 800c016:	4fa2      	ldr	r7, [pc, #648]	; (800c2a0 <_dtoa_r+0x640>)
 800c018:	f006 020f 	and.w	r2, r6, #15
 800c01c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c024:	ec51 0b18 	vmov	r0, r1, d8
 800c028:	f7f4 faf6 	bl	8000618 <__aeabi_dmul>
 800c02c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c030:	1136      	asrs	r6, r6, #4
 800c032:	2300      	movs	r3, #0
 800c034:	2502      	movs	r5, #2
 800c036:	2e00      	cmp	r6, #0
 800c038:	d17e      	bne.n	800c138 <_dtoa_r+0x4d8>
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1d0      	bne.n	800bfe0 <_dtoa_r+0x380>
 800c03e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c040:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c044:	2b00      	cmp	r3, #0
 800c046:	f000 8084 	beq.w	800c152 <_dtoa_r+0x4f2>
 800c04a:	4b96      	ldr	r3, [pc, #600]	; (800c2a4 <_dtoa_r+0x644>)
 800c04c:	2200      	movs	r2, #0
 800c04e:	4640      	mov	r0, r8
 800c050:	4649      	mov	r1, r9
 800c052:	f7f4 fd53 	bl	8000afc <__aeabi_dcmplt>
 800c056:	2800      	cmp	r0, #0
 800c058:	d07b      	beq.n	800c152 <_dtoa_r+0x4f2>
 800c05a:	9b04      	ldr	r3, [sp, #16]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d078      	beq.n	800c152 <_dtoa_r+0x4f2>
 800c060:	9b01      	ldr	r3, [sp, #4]
 800c062:	2b00      	cmp	r3, #0
 800c064:	dd39      	ble.n	800c0da <_dtoa_r+0x47a>
 800c066:	4b90      	ldr	r3, [pc, #576]	; (800c2a8 <_dtoa_r+0x648>)
 800c068:	2200      	movs	r2, #0
 800c06a:	4640      	mov	r0, r8
 800c06c:	4649      	mov	r1, r9
 800c06e:	f7f4 fad3 	bl	8000618 <__aeabi_dmul>
 800c072:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c076:	9e01      	ldr	r6, [sp, #4]
 800c078:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c07c:	3501      	adds	r5, #1
 800c07e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c082:	4628      	mov	r0, r5
 800c084:	f7f4 fa5e 	bl	8000544 <__aeabi_i2d>
 800c088:	4642      	mov	r2, r8
 800c08a:	464b      	mov	r3, r9
 800c08c:	f7f4 fac4 	bl	8000618 <__aeabi_dmul>
 800c090:	4b86      	ldr	r3, [pc, #536]	; (800c2ac <_dtoa_r+0x64c>)
 800c092:	2200      	movs	r2, #0
 800c094:	f7f4 f90a 	bl	80002ac <__adddf3>
 800c098:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c09c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0a0:	9303      	str	r3, [sp, #12]
 800c0a2:	2e00      	cmp	r6, #0
 800c0a4:	d158      	bne.n	800c158 <_dtoa_r+0x4f8>
 800c0a6:	4b82      	ldr	r3, [pc, #520]	; (800c2b0 <_dtoa_r+0x650>)
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	4640      	mov	r0, r8
 800c0ac:	4649      	mov	r1, r9
 800c0ae:	f7f4 f8fb 	bl	80002a8 <__aeabi_dsub>
 800c0b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0b6:	4680      	mov	r8, r0
 800c0b8:	4689      	mov	r9, r1
 800c0ba:	f7f4 fd3d 	bl	8000b38 <__aeabi_dcmpgt>
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	f040 8296 	bne.w	800c5f0 <_dtoa_r+0x990>
 800c0c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c0c8:	4640      	mov	r0, r8
 800c0ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0ce:	4649      	mov	r1, r9
 800c0d0:	f7f4 fd14 	bl	8000afc <__aeabi_dcmplt>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	f040 8289 	bne.w	800c5ec <_dtoa_r+0x98c>
 800c0da:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c0de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f2c0 814e 	blt.w	800c382 <_dtoa_r+0x722>
 800c0e6:	f1bb 0f0e 	cmp.w	fp, #14
 800c0ea:	f300 814a 	bgt.w	800c382 <_dtoa_r+0x722>
 800c0ee:	4b6b      	ldr	r3, [pc, #428]	; (800c29c <_dtoa_r+0x63c>)
 800c0f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c0f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c0f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f280 80dc 	bge.w	800c2b8 <_dtoa_r+0x658>
 800c100:	9b04      	ldr	r3, [sp, #16]
 800c102:	2b00      	cmp	r3, #0
 800c104:	f300 80d8 	bgt.w	800c2b8 <_dtoa_r+0x658>
 800c108:	f040 826f 	bne.w	800c5ea <_dtoa_r+0x98a>
 800c10c:	4b68      	ldr	r3, [pc, #416]	; (800c2b0 <_dtoa_r+0x650>)
 800c10e:	2200      	movs	r2, #0
 800c110:	4640      	mov	r0, r8
 800c112:	4649      	mov	r1, r9
 800c114:	f7f4 fa80 	bl	8000618 <__aeabi_dmul>
 800c118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c11c:	f7f4 fd02 	bl	8000b24 <__aeabi_dcmpge>
 800c120:	9e04      	ldr	r6, [sp, #16]
 800c122:	4637      	mov	r7, r6
 800c124:	2800      	cmp	r0, #0
 800c126:	f040 8245 	bne.w	800c5b4 <_dtoa_r+0x954>
 800c12a:	9d00      	ldr	r5, [sp, #0]
 800c12c:	2331      	movs	r3, #49	; 0x31
 800c12e:	f805 3b01 	strb.w	r3, [r5], #1
 800c132:	f10b 0b01 	add.w	fp, fp, #1
 800c136:	e241      	b.n	800c5bc <_dtoa_r+0x95c>
 800c138:	07f2      	lsls	r2, r6, #31
 800c13a:	d505      	bpl.n	800c148 <_dtoa_r+0x4e8>
 800c13c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c140:	f7f4 fa6a 	bl	8000618 <__aeabi_dmul>
 800c144:	3501      	adds	r5, #1
 800c146:	2301      	movs	r3, #1
 800c148:	1076      	asrs	r6, r6, #1
 800c14a:	3708      	adds	r7, #8
 800c14c:	e773      	b.n	800c036 <_dtoa_r+0x3d6>
 800c14e:	2502      	movs	r5, #2
 800c150:	e775      	b.n	800c03e <_dtoa_r+0x3de>
 800c152:	9e04      	ldr	r6, [sp, #16]
 800c154:	465f      	mov	r7, fp
 800c156:	e792      	b.n	800c07e <_dtoa_r+0x41e>
 800c158:	9900      	ldr	r1, [sp, #0]
 800c15a:	4b50      	ldr	r3, [pc, #320]	; (800c29c <_dtoa_r+0x63c>)
 800c15c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c160:	4431      	add	r1, r6
 800c162:	9102      	str	r1, [sp, #8]
 800c164:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c166:	eeb0 9a47 	vmov.f32	s18, s14
 800c16a:	eef0 9a67 	vmov.f32	s19, s15
 800c16e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c172:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c176:	2900      	cmp	r1, #0
 800c178:	d044      	beq.n	800c204 <_dtoa_r+0x5a4>
 800c17a:	494e      	ldr	r1, [pc, #312]	; (800c2b4 <_dtoa_r+0x654>)
 800c17c:	2000      	movs	r0, #0
 800c17e:	f7f4 fb75 	bl	800086c <__aeabi_ddiv>
 800c182:	ec53 2b19 	vmov	r2, r3, d9
 800c186:	f7f4 f88f 	bl	80002a8 <__aeabi_dsub>
 800c18a:	9d00      	ldr	r5, [sp, #0]
 800c18c:	ec41 0b19 	vmov	d9, r0, r1
 800c190:	4649      	mov	r1, r9
 800c192:	4640      	mov	r0, r8
 800c194:	f7f4 fcf0 	bl	8000b78 <__aeabi_d2iz>
 800c198:	4606      	mov	r6, r0
 800c19a:	f7f4 f9d3 	bl	8000544 <__aeabi_i2d>
 800c19e:	4602      	mov	r2, r0
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	4640      	mov	r0, r8
 800c1a4:	4649      	mov	r1, r9
 800c1a6:	f7f4 f87f 	bl	80002a8 <__aeabi_dsub>
 800c1aa:	3630      	adds	r6, #48	; 0x30
 800c1ac:	f805 6b01 	strb.w	r6, [r5], #1
 800c1b0:	ec53 2b19 	vmov	r2, r3, d9
 800c1b4:	4680      	mov	r8, r0
 800c1b6:	4689      	mov	r9, r1
 800c1b8:	f7f4 fca0 	bl	8000afc <__aeabi_dcmplt>
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	d164      	bne.n	800c28a <_dtoa_r+0x62a>
 800c1c0:	4642      	mov	r2, r8
 800c1c2:	464b      	mov	r3, r9
 800c1c4:	4937      	ldr	r1, [pc, #220]	; (800c2a4 <_dtoa_r+0x644>)
 800c1c6:	2000      	movs	r0, #0
 800c1c8:	f7f4 f86e 	bl	80002a8 <__aeabi_dsub>
 800c1cc:	ec53 2b19 	vmov	r2, r3, d9
 800c1d0:	f7f4 fc94 	bl	8000afc <__aeabi_dcmplt>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	f040 80b6 	bne.w	800c346 <_dtoa_r+0x6e6>
 800c1da:	9b02      	ldr	r3, [sp, #8]
 800c1dc:	429d      	cmp	r5, r3
 800c1de:	f43f af7c 	beq.w	800c0da <_dtoa_r+0x47a>
 800c1e2:	4b31      	ldr	r3, [pc, #196]	; (800c2a8 <_dtoa_r+0x648>)
 800c1e4:	ec51 0b19 	vmov	r0, r1, d9
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f7f4 fa15 	bl	8000618 <__aeabi_dmul>
 800c1ee:	4b2e      	ldr	r3, [pc, #184]	; (800c2a8 <_dtoa_r+0x648>)
 800c1f0:	ec41 0b19 	vmov	d9, r0, r1
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	4640      	mov	r0, r8
 800c1f8:	4649      	mov	r1, r9
 800c1fa:	f7f4 fa0d 	bl	8000618 <__aeabi_dmul>
 800c1fe:	4680      	mov	r8, r0
 800c200:	4689      	mov	r9, r1
 800c202:	e7c5      	b.n	800c190 <_dtoa_r+0x530>
 800c204:	ec51 0b17 	vmov	r0, r1, d7
 800c208:	f7f4 fa06 	bl	8000618 <__aeabi_dmul>
 800c20c:	9b02      	ldr	r3, [sp, #8]
 800c20e:	9d00      	ldr	r5, [sp, #0]
 800c210:	930f      	str	r3, [sp, #60]	; 0x3c
 800c212:	ec41 0b19 	vmov	d9, r0, r1
 800c216:	4649      	mov	r1, r9
 800c218:	4640      	mov	r0, r8
 800c21a:	f7f4 fcad 	bl	8000b78 <__aeabi_d2iz>
 800c21e:	4606      	mov	r6, r0
 800c220:	f7f4 f990 	bl	8000544 <__aeabi_i2d>
 800c224:	3630      	adds	r6, #48	; 0x30
 800c226:	4602      	mov	r2, r0
 800c228:	460b      	mov	r3, r1
 800c22a:	4640      	mov	r0, r8
 800c22c:	4649      	mov	r1, r9
 800c22e:	f7f4 f83b 	bl	80002a8 <__aeabi_dsub>
 800c232:	f805 6b01 	strb.w	r6, [r5], #1
 800c236:	9b02      	ldr	r3, [sp, #8]
 800c238:	429d      	cmp	r5, r3
 800c23a:	4680      	mov	r8, r0
 800c23c:	4689      	mov	r9, r1
 800c23e:	f04f 0200 	mov.w	r2, #0
 800c242:	d124      	bne.n	800c28e <_dtoa_r+0x62e>
 800c244:	4b1b      	ldr	r3, [pc, #108]	; (800c2b4 <_dtoa_r+0x654>)
 800c246:	ec51 0b19 	vmov	r0, r1, d9
 800c24a:	f7f4 f82f 	bl	80002ac <__adddf3>
 800c24e:	4602      	mov	r2, r0
 800c250:	460b      	mov	r3, r1
 800c252:	4640      	mov	r0, r8
 800c254:	4649      	mov	r1, r9
 800c256:	f7f4 fc6f 	bl	8000b38 <__aeabi_dcmpgt>
 800c25a:	2800      	cmp	r0, #0
 800c25c:	d173      	bne.n	800c346 <_dtoa_r+0x6e6>
 800c25e:	ec53 2b19 	vmov	r2, r3, d9
 800c262:	4914      	ldr	r1, [pc, #80]	; (800c2b4 <_dtoa_r+0x654>)
 800c264:	2000      	movs	r0, #0
 800c266:	f7f4 f81f 	bl	80002a8 <__aeabi_dsub>
 800c26a:	4602      	mov	r2, r0
 800c26c:	460b      	mov	r3, r1
 800c26e:	4640      	mov	r0, r8
 800c270:	4649      	mov	r1, r9
 800c272:	f7f4 fc43 	bl	8000afc <__aeabi_dcmplt>
 800c276:	2800      	cmp	r0, #0
 800c278:	f43f af2f 	beq.w	800c0da <_dtoa_r+0x47a>
 800c27c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c27e:	1e6b      	subs	r3, r5, #1
 800c280:	930f      	str	r3, [sp, #60]	; 0x3c
 800c282:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c286:	2b30      	cmp	r3, #48	; 0x30
 800c288:	d0f8      	beq.n	800c27c <_dtoa_r+0x61c>
 800c28a:	46bb      	mov	fp, r7
 800c28c:	e04a      	b.n	800c324 <_dtoa_r+0x6c4>
 800c28e:	4b06      	ldr	r3, [pc, #24]	; (800c2a8 <_dtoa_r+0x648>)
 800c290:	f7f4 f9c2 	bl	8000618 <__aeabi_dmul>
 800c294:	4680      	mov	r8, r0
 800c296:	4689      	mov	r9, r1
 800c298:	e7bd      	b.n	800c216 <_dtoa_r+0x5b6>
 800c29a:	bf00      	nop
 800c29c:	0800e7c0 	.word	0x0800e7c0
 800c2a0:	0800e798 	.word	0x0800e798
 800c2a4:	3ff00000 	.word	0x3ff00000
 800c2a8:	40240000 	.word	0x40240000
 800c2ac:	401c0000 	.word	0x401c0000
 800c2b0:	40140000 	.word	0x40140000
 800c2b4:	3fe00000 	.word	0x3fe00000
 800c2b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c2bc:	9d00      	ldr	r5, [sp, #0]
 800c2be:	4642      	mov	r2, r8
 800c2c0:	464b      	mov	r3, r9
 800c2c2:	4630      	mov	r0, r6
 800c2c4:	4639      	mov	r1, r7
 800c2c6:	f7f4 fad1 	bl	800086c <__aeabi_ddiv>
 800c2ca:	f7f4 fc55 	bl	8000b78 <__aeabi_d2iz>
 800c2ce:	9001      	str	r0, [sp, #4]
 800c2d0:	f7f4 f938 	bl	8000544 <__aeabi_i2d>
 800c2d4:	4642      	mov	r2, r8
 800c2d6:	464b      	mov	r3, r9
 800c2d8:	f7f4 f99e 	bl	8000618 <__aeabi_dmul>
 800c2dc:	4602      	mov	r2, r0
 800c2de:	460b      	mov	r3, r1
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	4639      	mov	r1, r7
 800c2e4:	f7f3 ffe0 	bl	80002a8 <__aeabi_dsub>
 800c2e8:	9e01      	ldr	r6, [sp, #4]
 800c2ea:	9f04      	ldr	r7, [sp, #16]
 800c2ec:	3630      	adds	r6, #48	; 0x30
 800c2ee:	f805 6b01 	strb.w	r6, [r5], #1
 800c2f2:	9e00      	ldr	r6, [sp, #0]
 800c2f4:	1bae      	subs	r6, r5, r6
 800c2f6:	42b7      	cmp	r7, r6
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	d134      	bne.n	800c368 <_dtoa_r+0x708>
 800c2fe:	f7f3 ffd5 	bl	80002ac <__adddf3>
 800c302:	4642      	mov	r2, r8
 800c304:	464b      	mov	r3, r9
 800c306:	4606      	mov	r6, r0
 800c308:	460f      	mov	r7, r1
 800c30a:	f7f4 fc15 	bl	8000b38 <__aeabi_dcmpgt>
 800c30e:	b9c8      	cbnz	r0, 800c344 <_dtoa_r+0x6e4>
 800c310:	4642      	mov	r2, r8
 800c312:	464b      	mov	r3, r9
 800c314:	4630      	mov	r0, r6
 800c316:	4639      	mov	r1, r7
 800c318:	f7f4 fbe6 	bl	8000ae8 <__aeabi_dcmpeq>
 800c31c:	b110      	cbz	r0, 800c324 <_dtoa_r+0x6c4>
 800c31e:	9b01      	ldr	r3, [sp, #4]
 800c320:	07db      	lsls	r3, r3, #31
 800c322:	d40f      	bmi.n	800c344 <_dtoa_r+0x6e4>
 800c324:	4651      	mov	r1, sl
 800c326:	4620      	mov	r0, r4
 800c328:	f000 fe82 	bl	800d030 <_Bfree>
 800c32c:	2300      	movs	r3, #0
 800c32e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c330:	702b      	strb	r3, [r5, #0]
 800c332:	f10b 0301 	add.w	r3, fp, #1
 800c336:	6013      	str	r3, [r2, #0]
 800c338:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	f43f ace2 	beq.w	800bd04 <_dtoa_r+0xa4>
 800c340:	601d      	str	r5, [r3, #0]
 800c342:	e4df      	b.n	800bd04 <_dtoa_r+0xa4>
 800c344:	465f      	mov	r7, fp
 800c346:	462b      	mov	r3, r5
 800c348:	461d      	mov	r5, r3
 800c34a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c34e:	2a39      	cmp	r2, #57	; 0x39
 800c350:	d106      	bne.n	800c360 <_dtoa_r+0x700>
 800c352:	9a00      	ldr	r2, [sp, #0]
 800c354:	429a      	cmp	r2, r3
 800c356:	d1f7      	bne.n	800c348 <_dtoa_r+0x6e8>
 800c358:	9900      	ldr	r1, [sp, #0]
 800c35a:	2230      	movs	r2, #48	; 0x30
 800c35c:	3701      	adds	r7, #1
 800c35e:	700a      	strb	r2, [r1, #0]
 800c360:	781a      	ldrb	r2, [r3, #0]
 800c362:	3201      	adds	r2, #1
 800c364:	701a      	strb	r2, [r3, #0]
 800c366:	e790      	b.n	800c28a <_dtoa_r+0x62a>
 800c368:	4ba3      	ldr	r3, [pc, #652]	; (800c5f8 <_dtoa_r+0x998>)
 800c36a:	2200      	movs	r2, #0
 800c36c:	f7f4 f954 	bl	8000618 <__aeabi_dmul>
 800c370:	2200      	movs	r2, #0
 800c372:	2300      	movs	r3, #0
 800c374:	4606      	mov	r6, r0
 800c376:	460f      	mov	r7, r1
 800c378:	f7f4 fbb6 	bl	8000ae8 <__aeabi_dcmpeq>
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d09e      	beq.n	800c2be <_dtoa_r+0x65e>
 800c380:	e7d0      	b.n	800c324 <_dtoa_r+0x6c4>
 800c382:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c384:	2a00      	cmp	r2, #0
 800c386:	f000 80ca 	beq.w	800c51e <_dtoa_r+0x8be>
 800c38a:	9a07      	ldr	r2, [sp, #28]
 800c38c:	2a01      	cmp	r2, #1
 800c38e:	f300 80ad 	bgt.w	800c4ec <_dtoa_r+0x88c>
 800c392:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c394:	2a00      	cmp	r2, #0
 800c396:	f000 80a5 	beq.w	800c4e4 <_dtoa_r+0x884>
 800c39a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c39e:	9e08      	ldr	r6, [sp, #32]
 800c3a0:	9d05      	ldr	r5, [sp, #20]
 800c3a2:	9a05      	ldr	r2, [sp, #20]
 800c3a4:	441a      	add	r2, r3
 800c3a6:	9205      	str	r2, [sp, #20]
 800c3a8:	9a06      	ldr	r2, [sp, #24]
 800c3aa:	2101      	movs	r1, #1
 800c3ac:	441a      	add	r2, r3
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	9206      	str	r2, [sp, #24]
 800c3b2:	f000 ff3d 	bl	800d230 <__i2b>
 800c3b6:	4607      	mov	r7, r0
 800c3b8:	b165      	cbz	r5, 800c3d4 <_dtoa_r+0x774>
 800c3ba:	9b06      	ldr	r3, [sp, #24]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	dd09      	ble.n	800c3d4 <_dtoa_r+0x774>
 800c3c0:	42ab      	cmp	r3, r5
 800c3c2:	9a05      	ldr	r2, [sp, #20]
 800c3c4:	bfa8      	it	ge
 800c3c6:	462b      	movge	r3, r5
 800c3c8:	1ad2      	subs	r2, r2, r3
 800c3ca:	9205      	str	r2, [sp, #20]
 800c3cc:	9a06      	ldr	r2, [sp, #24]
 800c3ce:	1aed      	subs	r5, r5, r3
 800c3d0:	1ad3      	subs	r3, r2, r3
 800c3d2:	9306      	str	r3, [sp, #24]
 800c3d4:	9b08      	ldr	r3, [sp, #32]
 800c3d6:	b1f3      	cbz	r3, 800c416 <_dtoa_r+0x7b6>
 800c3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f000 80a3 	beq.w	800c526 <_dtoa_r+0x8c6>
 800c3e0:	2e00      	cmp	r6, #0
 800c3e2:	dd10      	ble.n	800c406 <_dtoa_r+0x7a6>
 800c3e4:	4639      	mov	r1, r7
 800c3e6:	4632      	mov	r2, r6
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f000 ffe1 	bl	800d3b0 <__pow5mult>
 800c3ee:	4652      	mov	r2, sl
 800c3f0:	4601      	mov	r1, r0
 800c3f2:	4607      	mov	r7, r0
 800c3f4:	4620      	mov	r0, r4
 800c3f6:	f000 ff31 	bl	800d25c <__multiply>
 800c3fa:	4651      	mov	r1, sl
 800c3fc:	4680      	mov	r8, r0
 800c3fe:	4620      	mov	r0, r4
 800c400:	f000 fe16 	bl	800d030 <_Bfree>
 800c404:	46c2      	mov	sl, r8
 800c406:	9b08      	ldr	r3, [sp, #32]
 800c408:	1b9a      	subs	r2, r3, r6
 800c40a:	d004      	beq.n	800c416 <_dtoa_r+0x7b6>
 800c40c:	4651      	mov	r1, sl
 800c40e:	4620      	mov	r0, r4
 800c410:	f000 ffce 	bl	800d3b0 <__pow5mult>
 800c414:	4682      	mov	sl, r0
 800c416:	2101      	movs	r1, #1
 800c418:	4620      	mov	r0, r4
 800c41a:	f000 ff09 	bl	800d230 <__i2b>
 800c41e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c420:	2b00      	cmp	r3, #0
 800c422:	4606      	mov	r6, r0
 800c424:	f340 8081 	ble.w	800c52a <_dtoa_r+0x8ca>
 800c428:	461a      	mov	r2, r3
 800c42a:	4601      	mov	r1, r0
 800c42c:	4620      	mov	r0, r4
 800c42e:	f000 ffbf 	bl	800d3b0 <__pow5mult>
 800c432:	9b07      	ldr	r3, [sp, #28]
 800c434:	2b01      	cmp	r3, #1
 800c436:	4606      	mov	r6, r0
 800c438:	dd7a      	ble.n	800c530 <_dtoa_r+0x8d0>
 800c43a:	f04f 0800 	mov.w	r8, #0
 800c43e:	6933      	ldr	r3, [r6, #16]
 800c440:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c444:	6918      	ldr	r0, [r3, #16]
 800c446:	f000 fea5 	bl	800d194 <__hi0bits>
 800c44a:	f1c0 0020 	rsb	r0, r0, #32
 800c44e:	9b06      	ldr	r3, [sp, #24]
 800c450:	4418      	add	r0, r3
 800c452:	f010 001f 	ands.w	r0, r0, #31
 800c456:	f000 8094 	beq.w	800c582 <_dtoa_r+0x922>
 800c45a:	f1c0 0320 	rsb	r3, r0, #32
 800c45e:	2b04      	cmp	r3, #4
 800c460:	f340 8085 	ble.w	800c56e <_dtoa_r+0x90e>
 800c464:	9b05      	ldr	r3, [sp, #20]
 800c466:	f1c0 001c 	rsb	r0, r0, #28
 800c46a:	4403      	add	r3, r0
 800c46c:	9305      	str	r3, [sp, #20]
 800c46e:	9b06      	ldr	r3, [sp, #24]
 800c470:	4403      	add	r3, r0
 800c472:	4405      	add	r5, r0
 800c474:	9306      	str	r3, [sp, #24]
 800c476:	9b05      	ldr	r3, [sp, #20]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	dd05      	ble.n	800c488 <_dtoa_r+0x828>
 800c47c:	4651      	mov	r1, sl
 800c47e:	461a      	mov	r2, r3
 800c480:	4620      	mov	r0, r4
 800c482:	f000 ffef 	bl	800d464 <__lshift>
 800c486:	4682      	mov	sl, r0
 800c488:	9b06      	ldr	r3, [sp, #24]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	dd05      	ble.n	800c49a <_dtoa_r+0x83a>
 800c48e:	4631      	mov	r1, r6
 800c490:	461a      	mov	r2, r3
 800c492:	4620      	mov	r0, r4
 800c494:	f000 ffe6 	bl	800d464 <__lshift>
 800c498:	4606      	mov	r6, r0
 800c49a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d072      	beq.n	800c586 <_dtoa_r+0x926>
 800c4a0:	4631      	mov	r1, r6
 800c4a2:	4650      	mov	r0, sl
 800c4a4:	f001 f84a 	bl	800d53c <__mcmp>
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	da6c      	bge.n	800c586 <_dtoa_r+0x926>
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	4651      	mov	r1, sl
 800c4b0:	220a      	movs	r2, #10
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	f000 fdde 	bl	800d074 <__multadd>
 800c4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c4be:	4682      	mov	sl, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f000 81b0 	beq.w	800c826 <_dtoa_r+0xbc6>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	4639      	mov	r1, r7
 800c4ca:	220a      	movs	r2, #10
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	f000 fdd1 	bl	800d074 <__multadd>
 800c4d2:	9b01      	ldr	r3, [sp, #4]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	4607      	mov	r7, r0
 800c4d8:	f300 8096 	bgt.w	800c608 <_dtoa_r+0x9a8>
 800c4dc:	9b07      	ldr	r3, [sp, #28]
 800c4de:	2b02      	cmp	r3, #2
 800c4e0:	dc59      	bgt.n	800c596 <_dtoa_r+0x936>
 800c4e2:	e091      	b.n	800c608 <_dtoa_r+0x9a8>
 800c4e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c4ea:	e758      	b.n	800c39e <_dtoa_r+0x73e>
 800c4ec:	9b04      	ldr	r3, [sp, #16]
 800c4ee:	1e5e      	subs	r6, r3, #1
 800c4f0:	9b08      	ldr	r3, [sp, #32]
 800c4f2:	42b3      	cmp	r3, r6
 800c4f4:	bfbf      	itttt	lt
 800c4f6:	9b08      	ldrlt	r3, [sp, #32]
 800c4f8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c4fa:	9608      	strlt	r6, [sp, #32]
 800c4fc:	1af3      	sublt	r3, r6, r3
 800c4fe:	bfb4      	ite	lt
 800c500:	18d2      	addlt	r2, r2, r3
 800c502:	1b9e      	subge	r6, r3, r6
 800c504:	9b04      	ldr	r3, [sp, #16]
 800c506:	bfbc      	itt	lt
 800c508:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c50a:	2600      	movlt	r6, #0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	bfb7      	itett	lt
 800c510:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c514:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c518:	1a9d      	sublt	r5, r3, r2
 800c51a:	2300      	movlt	r3, #0
 800c51c:	e741      	b.n	800c3a2 <_dtoa_r+0x742>
 800c51e:	9e08      	ldr	r6, [sp, #32]
 800c520:	9d05      	ldr	r5, [sp, #20]
 800c522:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c524:	e748      	b.n	800c3b8 <_dtoa_r+0x758>
 800c526:	9a08      	ldr	r2, [sp, #32]
 800c528:	e770      	b.n	800c40c <_dtoa_r+0x7ac>
 800c52a:	9b07      	ldr	r3, [sp, #28]
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	dc19      	bgt.n	800c564 <_dtoa_r+0x904>
 800c530:	9b02      	ldr	r3, [sp, #8]
 800c532:	b9bb      	cbnz	r3, 800c564 <_dtoa_r+0x904>
 800c534:	9b03      	ldr	r3, [sp, #12]
 800c536:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c53a:	b99b      	cbnz	r3, 800c564 <_dtoa_r+0x904>
 800c53c:	9b03      	ldr	r3, [sp, #12]
 800c53e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c542:	0d1b      	lsrs	r3, r3, #20
 800c544:	051b      	lsls	r3, r3, #20
 800c546:	b183      	cbz	r3, 800c56a <_dtoa_r+0x90a>
 800c548:	9b05      	ldr	r3, [sp, #20]
 800c54a:	3301      	adds	r3, #1
 800c54c:	9305      	str	r3, [sp, #20]
 800c54e:	9b06      	ldr	r3, [sp, #24]
 800c550:	3301      	adds	r3, #1
 800c552:	9306      	str	r3, [sp, #24]
 800c554:	f04f 0801 	mov.w	r8, #1
 800c558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	f47f af6f 	bne.w	800c43e <_dtoa_r+0x7de>
 800c560:	2001      	movs	r0, #1
 800c562:	e774      	b.n	800c44e <_dtoa_r+0x7ee>
 800c564:	f04f 0800 	mov.w	r8, #0
 800c568:	e7f6      	b.n	800c558 <_dtoa_r+0x8f8>
 800c56a:	4698      	mov	r8, r3
 800c56c:	e7f4      	b.n	800c558 <_dtoa_r+0x8f8>
 800c56e:	d082      	beq.n	800c476 <_dtoa_r+0x816>
 800c570:	9a05      	ldr	r2, [sp, #20]
 800c572:	331c      	adds	r3, #28
 800c574:	441a      	add	r2, r3
 800c576:	9205      	str	r2, [sp, #20]
 800c578:	9a06      	ldr	r2, [sp, #24]
 800c57a:	441a      	add	r2, r3
 800c57c:	441d      	add	r5, r3
 800c57e:	9206      	str	r2, [sp, #24]
 800c580:	e779      	b.n	800c476 <_dtoa_r+0x816>
 800c582:	4603      	mov	r3, r0
 800c584:	e7f4      	b.n	800c570 <_dtoa_r+0x910>
 800c586:	9b04      	ldr	r3, [sp, #16]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	dc37      	bgt.n	800c5fc <_dtoa_r+0x99c>
 800c58c:	9b07      	ldr	r3, [sp, #28]
 800c58e:	2b02      	cmp	r3, #2
 800c590:	dd34      	ble.n	800c5fc <_dtoa_r+0x99c>
 800c592:	9b04      	ldr	r3, [sp, #16]
 800c594:	9301      	str	r3, [sp, #4]
 800c596:	9b01      	ldr	r3, [sp, #4]
 800c598:	b963      	cbnz	r3, 800c5b4 <_dtoa_r+0x954>
 800c59a:	4631      	mov	r1, r6
 800c59c:	2205      	movs	r2, #5
 800c59e:	4620      	mov	r0, r4
 800c5a0:	f000 fd68 	bl	800d074 <__multadd>
 800c5a4:	4601      	mov	r1, r0
 800c5a6:	4606      	mov	r6, r0
 800c5a8:	4650      	mov	r0, sl
 800c5aa:	f000 ffc7 	bl	800d53c <__mcmp>
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	f73f adbb 	bgt.w	800c12a <_dtoa_r+0x4ca>
 800c5b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5b6:	9d00      	ldr	r5, [sp, #0]
 800c5b8:	ea6f 0b03 	mvn.w	fp, r3
 800c5bc:	f04f 0800 	mov.w	r8, #0
 800c5c0:	4631      	mov	r1, r6
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f000 fd34 	bl	800d030 <_Bfree>
 800c5c8:	2f00      	cmp	r7, #0
 800c5ca:	f43f aeab 	beq.w	800c324 <_dtoa_r+0x6c4>
 800c5ce:	f1b8 0f00 	cmp.w	r8, #0
 800c5d2:	d005      	beq.n	800c5e0 <_dtoa_r+0x980>
 800c5d4:	45b8      	cmp	r8, r7
 800c5d6:	d003      	beq.n	800c5e0 <_dtoa_r+0x980>
 800c5d8:	4641      	mov	r1, r8
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f000 fd28 	bl	800d030 <_Bfree>
 800c5e0:	4639      	mov	r1, r7
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f000 fd24 	bl	800d030 <_Bfree>
 800c5e8:	e69c      	b.n	800c324 <_dtoa_r+0x6c4>
 800c5ea:	2600      	movs	r6, #0
 800c5ec:	4637      	mov	r7, r6
 800c5ee:	e7e1      	b.n	800c5b4 <_dtoa_r+0x954>
 800c5f0:	46bb      	mov	fp, r7
 800c5f2:	4637      	mov	r7, r6
 800c5f4:	e599      	b.n	800c12a <_dtoa_r+0x4ca>
 800c5f6:	bf00      	nop
 800c5f8:	40240000 	.word	0x40240000
 800c5fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	f000 80c8 	beq.w	800c794 <_dtoa_r+0xb34>
 800c604:	9b04      	ldr	r3, [sp, #16]
 800c606:	9301      	str	r3, [sp, #4]
 800c608:	2d00      	cmp	r5, #0
 800c60a:	dd05      	ble.n	800c618 <_dtoa_r+0x9b8>
 800c60c:	4639      	mov	r1, r7
 800c60e:	462a      	mov	r2, r5
 800c610:	4620      	mov	r0, r4
 800c612:	f000 ff27 	bl	800d464 <__lshift>
 800c616:	4607      	mov	r7, r0
 800c618:	f1b8 0f00 	cmp.w	r8, #0
 800c61c:	d05b      	beq.n	800c6d6 <_dtoa_r+0xa76>
 800c61e:	6879      	ldr	r1, [r7, #4]
 800c620:	4620      	mov	r0, r4
 800c622:	f000 fcc5 	bl	800cfb0 <_Balloc>
 800c626:	4605      	mov	r5, r0
 800c628:	b928      	cbnz	r0, 800c636 <_dtoa_r+0x9d6>
 800c62a:	4b83      	ldr	r3, [pc, #524]	; (800c838 <_dtoa_r+0xbd8>)
 800c62c:	4602      	mov	r2, r0
 800c62e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c632:	f7ff bb2e 	b.w	800bc92 <_dtoa_r+0x32>
 800c636:	693a      	ldr	r2, [r7, #16]
 800c638:	3202      	adds	r2, #2
 800c63a:	0092      	lsls	r2, r2, #2
 800c63c:	f107 010c 	add.w	r1, r7, #12
 800c640:	300c      	adds	r0, #12
 800c642:	f7ff fa6f 	bl	800bb24 <memcpy>
 800c646:	2201      	movs	r2, #1
 800c648:	4629      	mov	r1, r5
 800c64a:	4620      	mov	r0, r4
 800c64c:	f000 ff0a 	bl	800d464 <__lshift>
 800c650:	9b00      	ldr	r3, [sp, #0]
 800c652:	3301      	adds	r3, #1
 800c654:	9304      	str	r3, [sp, #16]
 800c656:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c65a:	4413      	add	r3, r2
 800c65c:	9308      	str	r3, [sp, #32]
 800c65e:	9b02      	ldr	r3, [sp, #8]
 800c660:	f003 0301 	and.w	r3, r3, #1
 800c664:	46b8      	mov	r8, r7
 800c666:	9306      	str	r3, [sp, #24]
 800c668:	4607      	mov	r7, r0
 800c66a:	9b04      	ldr	r3, [sp, #16]
 800c66c:	4631      	mov	r1, r6
 800c66e:	3b01      	subs	r3, #1
 800c670:	4650      	mov	r0, sl
 800c672:	9301      	str	r3, [sp, #4]
 800c674:	f7ff fa6c 	bl	800bb50 <quorem>
 800c678:	4641      	mov	r1, r8
 800c67a:	9002      	str	r0, [sp, #8]
 800c67c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c680:	4650      	mov	r0, sl
 800c682:	f000 ff5b 	bl	800d53c <__mcmp>
 800c686:	463a      	mov	r2, r7
 800c688:	9005      	str	r0, [sp, #20]
 800c68a:	4631      	mov	r1, r6
 800c68c:	4620      	mov	r0, r4
 800c68e:	f000 ff71 	bl	800d574 <__mdiff>
 800c692:	68c2      	ldr	r2, [r0, #12]
 800c694:	4605      	mov	r5, r0
 800c696:	bb02      	cbnz	r2, 800c6da <_dtoa_r+0xa7a>
 800c698:	4601      	mov	r1, r0
 800c69a:	4650      	mov	r0, sl
 800c69c:	f000 ff4e 	bl	800d53c <__mcmp>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	4629      	mov	r1, r5
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	9209      	str	r2, [sp, #36]	; 0x24
 800c6a8:	f000 fcc2 	bl	800d030 <_Bfree>
 800c6ac:	9b07      	ldr	r3, [sp, #28]
 800c6ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6b0:	9d04      	ldr	r5, [sp, #16]
 800c6b2:	ea43 0102 	orr.w	r1, r3, r2
 800c6b6:	9b06      	ldr	r3, [sp, #24]
 800c6b8:	4319      	orrs	r1, r3
 800c6ba:	d110      	bne.n	800c6de <_dtoa_r+0xa7e>
 800c6bc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c6c0:	d029      	beq.n	800c716 <_dtoa_r+0xab6>
 800c6c2:	9b05      	ldr	r3, [sp, #20]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	dd02      	ble.n	800c6ce <_dtoa_r+0xa6e>
 800c6c8:	9b02      	ldr	r3, [sp, #8]
 800c6ca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c6ce:	9b01      	ldr	r3, [sp, #4]
 800c6d0:	f883 9000 	strb.w	r9, [r3]
 800c6d4:	e774      	b.n	800c5c0 <_dtoa_r+0x960>
 800c6d6:	4638      	mov	r0, r7
 800c6d8:	e7ba      	b.n	800c650 <_dtoa_r+0x9f0>
 800c6da:	2201      	movs	r2, #1
 800c6dc:	e7e1      	b.n	800c6a2 <_dtoa_r+0xa42>
 800c6de:	9b05      	ldr	r3, [sp, #20]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	db04      	blt.n	800c6ee <_dtoa_r+0xa8e>
 800c6e4:	9907      	ldr	r1, [sp, #28]
 800c6e6:	430b      	orrs	r3, r1
 800c6e8:	9906      	ldr	r1, [sp, #24]
 800c6ea:	430b      	orrs	r3, r1
 800c6ec:	d120      	bne.n	800c730 <_dtoa_r+0xad0>
 800c6ee:	2a00      	cmp	r2, #0
 800c6f0:	dded      	ble.n	800c6ce <_dtoa_r+0xa6e>
 800c6f2:	4651      	mov	r1, sl
 800c6f4:	2201      	movs	r2, #1
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	f000 feb4 	bl	800d464 <__lshift>
 800c6fc:	4631      	mov	r1, r6
 800c6fe:	4682      	mov	sl, r0
 800c700:	f000 ff1c 	bl	800d53c <__mcmp>
 800c704:	2800      	cmp	r0, #0
 800c706:	dc03      	bgt.n	800c710 <_dtoa_r+0xab0>
 800c708:	d1e1      	bne.n	800c6ce <_dtoa_r+0xa6e>
 800c70a:	f019 0f01 	tst.w	r9, #1
 800c70e:	d0de      	beq.n	800c6ce <_dtoa_r+0xa6e>
 800c710:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c714:	d1d8      	bne.n	800c6c8 <_dtoa_r+0xa68>
 800c716:	9a01      	ldr	r2, [sp, #4]
 800c718:	2339      	movs	r3, #57	; 0x39
 800c71a:	7013      	strb	r3, [r2, #0]
 800c71c:	462b      	mov	r3, r5
 800c71e:	461d      	mov	r5, r3
 800c720:	3b01      	subs	r3, #1
 800c722:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c726:	2a39      	cmp	r2, #57	; 0x39
 800c728:	d06c      	beq.n	800c804 <_dtoa_r+0xba4>
 800c72a:	3201      	adds	r2, #1
 800c72c:	701a      	strb	r2, [r3, #0]
 800c72e:	e747      	b.n	800c5c0 <_dtoa_r+0x960>
 800c730:	2a00      	cmp	r2, #0
 800c732:	dd07      	ble.n	800c744 <_dtoa_r+0xae4>
 800c734:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c738:	d0ed      	beq.n	800c716 <_dtoa_r+0xab6>
 800c73a:	9a01      	ldr	r2, [sp, #4]
 800c73c:	f109 0301 	add.w	r3, r9, #1
 800c740:	7013      	strb	r3, [r2, #0]
 800c742:	e73d      	b.n	800c5c0 <_dtoa_r+0x960>
 800c744:	9b04      	ldr	r3, [sp, #16]
 800c746:	9a08      	ldr	r2, [sp, #32]
 800c748:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d043      	beq.n	800c7d8 <_dtoa_r+0xb78>
 800c750:	4651      	mov	r1, sl
 800c752:	2300      	movs	r3, #0
 800c754:	220a      	movs	r2, #10
 800c756:	4620      	mov	r0, r4
 800c758:	f000 fc8c 	bl	800d074 <__multadd>
 800c75c:	45b8      	cmp	r8, r7
 800c75e:	4682      	mov	sl, r0
 800c760:	f04f 0300 	mov.w	r3, #0
 800c764:	f04f 020a 	mov.w	r2, #10
 800c768:	4641      	mov	r1, r8
 800c76a:	4620      	mov	r0, r4
 800c76c:	d107      	bne.n	800c77e <_dtoa_r+0xb1e>
 800c76e:	f000 fc81 	bl	800d074 <__multadd>
 800c772:	4680      	mov	r8, r0
 800c774:	4607      	mov	r7, r0
 800c776:	9b04      	ldr	r3, [sp, #16]
 800c778:	3301      	adds	r3, #1
 800c77a:	9304      	str	r3, [sp, #16]
 800c77c:	e775      	b.n	800c66a <_dtoa_r+0xa0a>
 800c77e:	f000 fc79 	bl	800d074 <__multadd>
 800c782:	4639      	mov	r1, r7
 800c784:	4680      	mov	r8, r0
 800c786:	2300      	movs	r3, #0
 800c788:	220a      	movs	r2, #10
 800c78a:	4620      	mov	r0, r4
 800c78c:	f000 fc72 	bl	800d074 <__multadd>
 800c790:	4607      	mov	r7, r0
 800c792:	e7f0      	b.n	800c776 <_dtoa_r+0xb16>
 800c794:	9b04      	ldr	r3, [sp, #16]
 800c796:	9301      	str	r3, [sp, #4]
 800c798:	9d00      	ldr	r5, [sp, #0]
 800c79a:	4631      	mov	r1, r6
 800c79c:	4650      	mov	r0, sl
 800c79e:	f7ff f9d7 	bl	800bb50 <quorem>
 800c7a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c7a6:	9b00      	ldr	r3, [sp, #0]
 800c7a8:	f805 9b01 	strb.w	r9, [r5], #1
 800c7ac:	1aea      	subs	r2, r5, r3
 800c7ae:	9b01      	ldr	r3, [sp, #4]
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	dd07      	ble.n	800c7c4 <_dtoa_r+0xb64>
 800c7b4:	4651      	mov	r1, sl
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	220a      	movs	r2, #10
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	f000 fc5a 	bl	800d074 <__multadd>
 800c7c0:	4682      	mov	sl, r0
 800c7c2:	e7ea      	b.n	800c79a <_dtoa_r+0xb3a>
 800c7c4:	9b01      	ldr	r3, [sp, #4]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	bfc8      	it	gt
 800c7ca:	461d      	movgt	r5, r3
 800c7cc:	9b00      	ldr	r3, [sp, #0]
 800c7ce:	bfd8      	it	le
 800c7d0:	2501      	movle	r5, #1
 800c7d2:	441d      	add	r5, r3
 800c7d4:	f04f 0800 	mov.w	r8, #0
 800c7d8:	4651      	mov	r1, sl
 800c7da:	2201      	movs	r2, #1
 800c7dc:	4620      	mov	r0, r4
 800c7de:	f000 fe41 	bl	800d464 <__lshift>
 800c7e2:	4631      	mov	r1, r6
 800c7e4:	4682      	mov	sl, r0
 800c7e6:	f000 fea9 	bl	800d53c <__mcmp>
 800c7ea:	2800      	cmp	r0, #0
 800c7ec:	dc96      	bgt.n	800c71c <_dtoa_r+0xabc>
 800c7ee:	d102      	bne.n	800c7f6 <_dtoa_r+0xb96>
 800c7f0:	f019 0f01 	tst.w	r9, #1
 800c7f4:	d192      	bne.n	800c71c <_dtoa_r+0xabc>
 800c7f6:	462b      	mov	r3, r5
 800c7f8:	461d      	mov	r5, r3
 800c7fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7fe:	2a30      	cmp	r2, #48	; 0x30
 800c800:	d0fa      	beq.n	800c7f8 <_dtoa_r+0xb98>
 800c802:	e6dd      	b.n	800c5c0 <_dtoa_r+0x960>
 800c804:	9a00      	ldr	r2, [sp, #0]
 800c806:	429a      	cmp	r2, r3
 800c808:	d189      	bne.n	800c71e <_dtoa_r+0xabe>
 800c80a:	f10b 0b01 	add.w	fp, fp, #1
 800c80e:	2331      	movs	r3, #49	; 0x31
 800c810:	e796      	b.n	800c740 <_dtoa_r+0xae0>
 800c812:	4b0a      	ldr	r3, [pc, #40]	; (800c83c <_dtoa_r+0xbdc>)
 800c814:	f7ff ba99 	b.w	800bd4a <_dtoa_r+0xea>
 800c818:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	f47f aa6d 	bne.w	800bcfa <_dtoa_r+0x9a>
 800c820:	4b07      	ldr	r3, [pc, #28]	; (800c840 <_dtoa_r+0xbe0>)
 800c822:	f7ff ba92 	b.w	800bd4a <_dtoa_r+0xea>
 800c826:	9b01      	ldr	r3, [sp, #4]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	dcb5      	bgt.n	800c798 <_dtoa_r+0xb38>
 800c82c:	9b07      	ldr	r3, [sp, #28]
 800c82e:	2b02      	cmp	r3, #2
 800c830:	f73f aeb1 	bgt.w	800c596 <_dtoa_r+0x936>
 800c834:	e7b0      	b.n	800c798 <_dtoa_r+0xb38>
 800c836:	bf00      	nop
 800c838:	0800e6c9 	.word	0x0800e6c9
 800c83c:	0800e621 	.word	0x0800e621
 800c840:	0800e64d 	.word	0x0800e64d

0800c844 <_free_r>:
 800c844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c846:	2900      	cmp	r1, #0
 800c848:	d044      	beq.n	800c8d4 <_free_r+0x90>
 800c84a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c84e:	9001      	str	r0, [sp, #4]
 800c850:	2b00      	cmp	r3, #0
 800c852:	f1a1 0404 	sub.w	r4, r1, #4
 800c856:	bfb8      	it	lt
 800c858:	18e4      	addlt	r4, r4, r3
 800c85a:	f7fd fceb 	bl	800a234 <__malloc_lock>
 800c85e:	4a1e      	ldr	r2, [pc, #120]	; (800c8d8 <_free_r+0x94>)
 800c860:	9801      	ldr	r0, [sp, #4]
 800c862:	6813      	ldr	r3, [r2, #0]
 800c864:	b933      	cbnz	r3, 800c874 <_free_r+0x30>
 800c866:	6063      	str	r3, [r4, #4]
 800c868:	6014      	str	r4, [r2, #0]
 800c86a:	b003      	add	sp, #12
 800c86c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c870:	f7fd bce6 	b.w	800a240 <__malloc_unlock>
 800c874:	42a3      	cmp	r3, r4
 800c876:	d908      	bls.n	800c88a <_free_r+0x46>
 800c878:	6825      	ldr	r5, [r4, #0]
 800c87a:	1961      	adds	r1, r4, r5
 800c87c:	428b      	cmp	r3, r1
 800c87e:	bf01      	itttt	eq
 800c880:	6819      	ldreq	r1, [r3, #0]
 800c882:	685b      	ldreq	r3, [r3, #4]
 800c884:	1949      	addeq	r1, r1, r5
 800c886:	6021      	streq	r1, [r4, #0]
 800c888:	e7ed      	b.n	800c866 <_free_r+0x22>
 800c88a:	461a      	mov	r2, r3
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	b10b      	cbz	r3, 800c894 <_free_r+0x50>
 800c890:	42a3      	cmp	r3, r4
 800c892:	d9fa      	bls.n	800c88a <_free_r+0x46>
 800c894:	6811      	ldr	r1, [r2, #0]
 800c896:	1855      	adds	r5, r2, r1
 800c898:	42a5      	cmp	r5, r4
 800c89a:	d10b      	bne.n	800c8b4 <_free_r+0x70>
 800c89c:	6824      	ldr	r4, [r4, #0]
 800c89e:	4421      	add	r1, r4
 800c8a0:	1854      	adds	r4, r2, r1
 800c8a2:	42a3      	cmp	r3, r4
 800c8a4:	6011      	str	r1, [r2, #0]
 800c8a6:	d1e0      	bne.n	800c86a <_free_r+0x26>
 800c8a8:	681c      	ldr	r4, [r3, #0]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	6053      	str	r3, [r2, #4]
 800c8ae:	440c      	add	r4, r1
 800c8b0:	6014      	str	r4, [r2, #0]
 800c8b2:	e7da      	b.n	800c86a <_free_r+0x26>
 800c8b4:	d902      	bls.n	800c8bc <_free_r+0x78>
 800c8b6:	230c      	movs	r3, #12
 800c8b8:	6003      	str	r3, [r0, #0]
 800c8ba:	e7d6      	b.n	800c86a <_free_r+0x26>
 800c8bc:	6825      	ldr	r5, [r4, #0]
 800c8be:	1961      	adds	r1, r4, r5
 800c8c0:	428b      	cmp	r3, r1
 800c8c2:	bf04      	itt	eq
 800c8c4:	6819      	ldreq	r1, [r3, #0]
 800c8c6:	685b      	ldreq	r3, [r3, #4]
 800c8c8:	6063      	str	r3, [r4, #4]
 800c8ca:	bf04      	itt	eq
 800c8cc:	1949      	addeq	r1, r1, r5
 800c8ce:	6021      	streq	r1, [r4, #0]
 800c8d0:	6054      	str	r4, [r2, #4]
 800c8d2:	e7ca      	b.n	800c86a <_free_r+0x26>
 800c8d4:	b003      	add	sp, #12
 800c8d6:	bd30      	pop	{r4, r5, pc}
 800c8d8:	20000a30 	.word	0x20000a30

0800c8dc <rshift>:
 800c8dc:	6903      	ldr	r3, [r0, #16]
 800c8de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c8e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c8ea:	f100 0414 	add.w	r4, r0, #20
 800c8ee:	dd45      	ble.n	800c97c <rshift+0xa0>
 800c8f0:	f011 011f 	ands.w	r1, r1, #31
 800c8f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c8f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c8fc:	d10c      	bne.n	800c918 <rshift+0x3c>
 800c8fe:	f100 0710 	add.w	r7, r0, #16
 800c902:	4629      	mov	r1, r5
 800c904:	42b1      	cmp	r1, r6
 800c906:	d334      	bcc.n	800c972 <rshift+0x96>
 800c908:	1a9b      	subs	r3, r3, r2
 800c90a:	009b      	lsls	r3, r3, #2
 800c90c:	1eea      	subs	r2, r5, #3
 800c90e:	4296      	cmp	r6, r2
 800c910:	bf38      	it	cc
 800c912:	2300      	movcc	r3, #0
 800c914:	4423      	add	r3, r4
 800c916:	e015      	b.n	800c944 <rshift+0x68>
 800c918:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c91c:	f1c1 0820 	rsb	r8, r1, #32
 800c920:	40cf      	lsrs	r7, r1
 800c922:	f105 0e04 	add.w	lr, r5, #4
 800c926:	46a1      	mov	r9, r4
 800c928:	4576      	cmp	r6, lr
 800c92a:	46f4      	mov	ip, lr
 800c92c:	d815      	bhi.n	800c95a <rshift+0x7e>
 800c92e:	1a9a      	subs	r2, r3, r2
 800c930:	0092      	lsls	r2, r2, #2
 800c932:	3a04      	subs	r2, #4
 800c934:	3501      	adds	r5, #1
 800c936:	42ae      	cmp	r6, r5
 800c938:	bf38      	it	cc
 800c93a:	2200      	movcc	r2, #0
 800c93c:	18a3      	adds	r3, r4, r2
 800c93e:	50a7      	str	r7, [r4, r2]
 800c940:	b107      	cbz	r7, 800c944 <rshift+0x68>
 800c942:	3304      	adds	r3, #4
 800c944:	1b1a      	subs	r2, r3, r4
 800c946:	42a3      	cmp	r3, r4
 800c948:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c94c:	bf08      	it	eq
 800c94e:	2300      	moveq	r3, #0
 800c950:	6102      	str	r2, [r0, #16]
 800c952:	bf08      	it	eq
 800c954:	6143      	streq	r3, [r0, #20]
 800c956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c95a:	f8dc c000 	ldr.w	ip, [ip]
 800c95e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c962:	ea4c 0707 	orr.w	r7, ip, r7
 800c966:	f849 7b04 	str.w	r7, [r9], #4
 800c96a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c96e:	40cf      	lsrs	r7, r1
 800c970:	e7da      	b.n	800c928 <rshift+0x4c>
 800c972:	f851 cb04 	ldr.w	ip, [r1], #4
 800c976:	f847 cf04 	str.w	ip, [r7, #4]!
 800c97a:	e7c3      	b.n	800c904 <rshift+0x28>
 800c97c:	4623      	mov	r3, r4
 800c97e:	e7e1      	b.n	800c944 <rshift+0x68>

0800c980 <__hexdig_fun>:
 800c980:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c984:	2b09      	cmp	r3, #9
 800c986:	d802      	bhi.n	800c98e <__hexdig_fun+0xe>
 800c988:	3820      	subs	r0, #32
 800c98a:	b2c0      	uxtb	r0, r0
 800c98c:	4770      	bx	lr
 800c98e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c992:	2b05      	cmp	r3, #5
 800c994:	d801      	bhi.n	800c99a <__hexdig_fun+0x1a>
 800c996:	3847      	subs	r0, #71	; 0x47
 800c998:	e7f7      	b.n	800c98a <__hexdig_fun+0xa>
 800c99a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c99e:	2b05      	cmp	r3, #5
 800c9a0:	d801      	bhi.n	800c9a6 <__hexdig_fun+0x26>
 800c9a2:	3827      	subs	r0, #39	; 0x27
 800c9a4:	e7f1      	b.n	800c98a <__hexdig_fun+0xa>
 800c9a6:	2000      	movs	r0, #0
 800c9a8:	4770      	bx	lr
	...

0800c9ac <__gethex>:
 800c9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b0:	4617      	mov	r7, r2
 800c9b2:	680a      	ldr	r2, [r1, #0]
 800c9b4:	b085      	sub	sp, #20
 800c9b6:	f102 0b02 	add.w	fp, r2, #2
 800c9ba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c9be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c9c2:	4681      	mov	r9, r0
 800c9c4:	468a      	mov	sl, r1
 800c9c6:	9302      	str	r3, [sp, #8]
 800c9c8:	32fe      	adds	r2, #254	; 0xfe
 800c9ca:	eb02 030b 	add.w	r3, r2, fp
 800c9ce:	46d8      	mov	r8, fp
 800c9d0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c9d4:	9301      	str	r3, [sp, #4]
 800c9d6:	2830      	cmp	r0, #48	; 0x30
 800c9d8:	d0f7      	beq.n	800c9ca <__gethex+0x1e>
 800c9da:	f7ff ffd1 	bl	800c980 <__hexdig_fun>
 800c9de:	4604      	mov	r4, r0
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	d138      	bne.n	800ca56 <__gethex+0xaa>
 800c9e4:	49a7      	ldr	r1, [pc, #668]	; (800cc84 <__gethex+0x2d8>)
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	4640      	mov	r0, r8
 800c9ea:	f7ff f802 	bl	800b9f2 <strncmp>
 800c9ee:	4606      	mov	r6, r0
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	d169      	bne.n	800cac8 <__gethex+0x11c>
 800c9f4:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c9f8:	465d      	mov	r5, fp
 800c9fa:	f7ff ffc1 	bl	800c980 <__hexdig_fun>
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	d064      	beq.n	800cacc <__gethex+0x120>
 800ca02:	465a      	mov	r2, fp
 800ca04:	7810      	ldrb	r0, [r2, #0]
 800ca06:	2830      	cmp	r0, #48	; 0x30
 800ca08:	4690      	mov	r8, r2
 800ca0a:	f102 0201 	add.w	r2, r2, #1
 800ca0e:	d0f9      	beq.n	800ca04 <__gethex+0x58>
 800ca10:	f7ff ffb6 	bl	800c980 <__hexdig_fun>
 800ca14:	2301      	movs	r3, #1
 800ca16:	fab0 f480 	clz	r4, r0
 800ca1a:	0964      	lsrs	r4, r4, #5
 800ca1c:	465e      	mov	r6, fp
 800ca1e:	9301      	str	r3, [sp, #4]
 800ca20:	4642      	mov	r2, r8
 800ca22:	4615      	mov	r5, r2
 800ca24:	3201      	adds	r2, #1
 800ca26:	7828      	ldrb	r0, [r5, #0]
 800ca28:	f7ff ffaa 	bl	800c980 <__hexdig_fun>
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	d1f8      	bne.n	800ca22 <__gethex+0x76>
 800ca30:	4994      	ldr	r1, [pc, #592]	; (800cc84 <__gethex+0x2d8>)
 800ca32:	2201      	movs	r2, #1
 800ca34:	4628      	mov	r0, r5
 800ca36:	f7fe ffdc 	bl	800b9f2 <strncmp>
 800ca3a:	b978      	cbnz	r0, 800ca5c <__gethex+0xb0>
 800ca3c:	b946      	cbnz	r6, 800ca50 <__gethex+0xa4>
 800ca3e:	1c6e      	adds	r6, r5, #1
 800ca40:	4632      	mov	r2, r6
 800ca42:	4615      	mov	r5, r2
 800ca44:	3201      	adds	r2, #1
 800ca46:	7828      	ldrb	r0, [r5, #0]
 800ca48:	f7ff ff9a 	bl	800c980 <__hexdig_fun>
 800ca4c:	2800      	cmp	r0, #0
 800ca4e:	d1f8      	bne.n	800ca42 <__gethex+0x96>
 800ca50:	1b73      	subs	r3, r6, r5
 800ca52:	009e      	lsls	r6, r3, #2
 800ca54:	e004      	b.n	800ca60 <__gethex+0xb4>
 800ca56:	2400      	movs	r4, #0
 800ca58:	4626      	mov	r6, r4
 800ca5a:	e7e1      	b.n	800ca20 <__gethex+0x74>
 800ca5c:	2e00      	cmp	r6, #0
 800ca5e:	d1f7      	bne.n	800ca50 <__gethex+0xa4>
 800ca60:	782b      	ldrb	r3, [r5, #0]
 800ca62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ca66:	2b50      	cmp	r3, #80	; 0x50
 800ca68:	d13d      	bne.n	800cae6 <__gethex+0x13a>
 800ca6a:	786b      	ldrb	r3, [r5, #1]
 800ca6c:	2b2b      	cmp	r3, #43	; 0x2b
 800ca6e:	d02f      	beq.n	800cad0 <__gethex+0x124>
 800ca70:	2b2d      	cmp	r3, #45	; 0x2d
 800ca72:	d031      	beq.n	800cad8 <__gethex+0x12c>
 800ca74:	1c69      	adds	r1, r5, #1
 800ca76:	f04f 0b00 	mov.w	fp, #0
 800ca7a:	7808      	ldrb	r0, [r1, #0]
 800ca7c:	f7ff ff80 	bl	800c980 <__hexdig_fun>
 800ca80:	1e42      	subs	r2, r0, #1
 800ca82:	b2d2      	uxtb	r2, r2
 800ca84:	2a18      	cmp	r2, #24
 800ca86:	d82e      	bhi.n	800cae6 <__gethex+0x13a>
 800ca88:	f1a0 0210 	sub.w	r2, r0, #16
 800ca8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ca90:	f7ff ff76 	bl	800c980 <__hexdig_fun>
 800ca94:	f100 3cff 	add.w	ip, r0, #4294967295
 800ca98:	fa5f fc8c 	uxtb.w	ip, ip
 800ca9c:	f1bc 0f18 	cmp.w	ip, #24
 800caa0:	d91d      	bls.n	800cade <__gethex+0x132>
 800caa2:	f1bb 0f00 	cmp.w	fp, #0
 800caa6:	d000      	beq.n	800caaa <__gethex+0xfe>
 800caa8:	4252      	negs	r2, r2
 800caaa:	4416      	add	r6, r2
 800caac:	f8ca 1000 	str.w	r1, [sl]
 800cab0:	b1dc      	cbz	r4, 800caea <__gethex+0x13e>
 800cab2:	9b01      	ldr	r3, [sp, #4]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	bf14      	ite	ne
 800cab8:	f04f 0800 	movne.w	r8, #0
 800cabc:	f04f 0806 	moveq.w	r8, #6
 800cac0:	4640      	mov	r0, r8
 800cac2:	b005      	add	sp, #20
 800cac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cac8:	4645      	mov	r5, r8
 800caca:	4626      	mov	r6, r4
 800cacc:	2401      	movs	r4, #1
 800cace:	e7c7      	b.n	800ca60 <__gethex+0xb4>
 800cad0:	f04f 0b00 	mov.w	fp, #0
 800cad4:	1ca9      	adds	r1, r5, #2
 800cad6:	e7d0      	b.n	800ca7a <__gethex+0xce>
 800cad8:	f04f 0b01 	mov.w	fp, #1
 800cadc:	e7fa      	b.n	800cad4 <__gethex+0x128>
 800cade:	230a      	movs	r3, #10
 800cae0:	fb03 0002 	mla	r0, r3, r2, r0
 800cae4:	e7d0      	b.n	800ca88 <__gethex+0xdc>
 800cae6:	4629      	mov	r1, r5
 800cae8:	e7e0      	b.n	800caac <__gethex+0x100>
 800caea:	eba5 0308 	sub.w	r3, r5, r8
 800caee:	3b01      	subs	r3, #1
 800caf0:	4621      	mov	r1, r4
 800caf2:	2b07      	cmp	r3, #7
 800caf4:	dc0a      	bgt.n	800cb0c <__gethex+0x160>
 800caf6:	4648      	mov	r0, r9
 800caf8:	f000 fa5a 	bl	800cfb0 <_Balloc>
 800cafc:	4604      	mov	r4, r0
 800cafe:	b940      	cbnz	r0, 800cb12 <__gethex+0x166>
 800cb00:	4b61      	ldr	r3, [pc, #388]	; (800cc88 <__gethex+0x2dc>)
 800cb02:	4602      	mov	r2, r0
 800cb04:	21e4      	movs	r1, #228	; 0xe4
 800cb06:	4861      	ldr	r0, [pc, #388]	; (800cc8c <__gethex+0x2e0>)
 800cb08:	f001 f934 	bl	800dd74 <__assert_func>
 800cb0c:	3101      	adds	r1, #1
 800cb0e:	105b      	asrs	r3, r3, #1
 800cb10:	e7ef      	b.n	800caf2 <__gethex+0x146>
 800cb12:	f100 0a14 	add.w	sl, r0, #20
 800cb16:	2300      	movs	r3, #0
 800cb18:	495a      	ldr	r1, [pc, #360]	; (800cc84 <__gethex+0x2d8>)
 800cb1a:	f8cd a004 	str.w	sl, [sp, #4]
 800cb1e:	469b      	mov	fp, r3
 800cb20:	45a8      	cmp	r8, r5
 800cb22:	d342      	bcc.n	800cbaa <__gethex+0x1fe>
 800cb24:	9801      	ldr	r0, [sp, #4]
 800cb26:	f840 bb04 	str.w	fp, [r0], #4
 800cb2a:	eba0 000a 	sub.w	r0, r0, sl
 800cb2e:	1080      	asrs	r0, r0, #2
 800cb30:	6120      	str	r0, [r4, #16]
 800cb32:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800cb36:	4658      	mov	r0, fp
 800cb38:	f000 fb2c 	bl	800d194 <__hi0bits>
 800cb3c:	683d      	ldr	r5, [r7, #0]
 800cb3e:	eba8 0000 	sub.w	r0, r8, r0
 800cb42:	42a8      	cmp	r0, r5
 800cb44:	dd59      	ble.n	800cbfa <__gethex+0x24e>
 800cb46:	eba0 0805 	sub.w	r8, r0, r5
 800cb4a:	4641      	mov	r1, r8
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	f000 febb 	bl	800d8c8 <__any_on>
 800cb52:	4683      	mov	fp, r0
 800cb54:	b1b8      	cbz	r0, 800cb86 <__gethex+0x1da>
 800cb56:	f108 33ff 	add.w	r3, r8, #4294967295
 800cb5a:	1159      	asrs	r1, r3, #5
 800cb5c:	f003 021f 	and.w	r2, r3, #31
 800cb60:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cb64:	f04f 0b01 	mov.w	fp, #1
 800cb68:	fa0b f202 	lsl.w	r2, fp, r2
 800cb6c:	420a      	tst	r2, r1
 800cb6e:	d00a      	beq.n	800cb86 <__gethex+0x1da>
 800cb70:	455b      	cmp	r3, fp
 800cb72:	dd06      	ble.n	800cb82 <__gethex+0x1d6>
 800cb74:	f1a8 0102 	sub.w	r1, r8, #2
 800cb78:	4620      	mov	r0, r4
 800cb7a:	f000 fea5 	bl	800d8c8 <__any_on>
 800cb7e:	2800      	cmp	r0, #0
 800cb80:	d138      	bne.n	800cbf4 <__gethex+0x248>
 800cb82:	f04f 0b02 	mov.w	fp, #2
 800cb86:	4641      	mov	r1, r8
 800cb88:	4620      	mov	r0, r4
 800cb8a:	f7ff fea7 	bl	800c8dc <rshift>
 800cb8e:	4446      	add	r6, r8
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	42b3      	cmp	r3, r6
 800cb94:	da41      	bge.n	800cc1a <__gethex+0x26e>
 800cb96:	4621      	mov	r1, r4
 800cb98:	4648      	mov	r0, r9
 800cb9a:	f000 fa49 	bl	800d030 <_Bfree>
 800cb9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cba0:	2300      	movs	r3, #0
 800cba2:	6013      	str	r3, [r2, #0]
 800cba4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800cba8:	e78a      	b.n	800cac0 <__gethex+0x114>
 800cbaa:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800cbae:	2a2e      	cmp	r2, #46	; 0x2e
 800cbb0:	d014      	beq.n	800cbdc <__gethex+0x230>
 800cbb2:	2b20      	cmp	r3, #32
 800cbb4:	d106      	bne.n	800cbc4 <__gethex+0x218>
 800cbb6:	9b01      	ldr	r3, [sp, #4]
 800cbb8:	f843 bb04 	str.w	fp, [r3], #4
 800cbbc:	f04f 0b00 	mov.w	fp, #0
 800cbc0:	9301      	str	r3, [sp, #4]
 800cbc2:	465b      	mov	r3, fp
 800cbc4:	7828      	ldrb	r0, [r5, #0]
 800cbc6:	9303      	str	r3, [sp, #12]
 800cbc8:	f7ff feda 	bl	800c980 <__hexdig_fun>
 800cbcc:	9b03      	ldr	r3, [sp, #12]
 800cbce:	f000 000f 	and.w	r0, r0, #15
 800cbd2:	4098      	lsls	r0, r3
 800cbd4:	ea4b 0b00 	orr.w	fp, fp, r0
 800cbd8:	3304      	adds	r3, #4
 800cbda:	e7a1      	b.n	800cb20 <__gethex+0x174>
 800cbdc:	45a8      	cmp	r8, r5
 800cbde:	d8e8      	bhi.n	800cbb2 <__gethex+0x206>
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	9303      	str	r3, [sp, #12]
 800cbe6:	f7fe ff04 	bl	800b9f2 <strncmp>
 800cbea:	4926      	ldr	r1, [pc, #152]	; (800cc84 <__gethex+0x2d8>)
 800cbec:	9b03      	ldr	r3, [sp, #12]
 800cbee:	2800      	cmp	r0, #0
 800cbf0:	d1df      	bne.n	800cbb2 <__gethex+0x206>
 800cbf2:	e795      	b.n	800cb20 <__gethex+0x174>
 800cbf4:	f04f 0b03 	mov.w	fp, #3
 800cbf8:	e7c5      	b.n	800cb86 <__gethex+0x1da>
 800cbfa:	da0b      	bge.n	800cc14 <__gethex+0x268>
 800cbfc:	eba5 0800 	sub.w	r8, r5, r0
 800cc00:	4621      	mov	r1, r4
 800cc02:	4642      	mov	r2, r8
 800cc04:	4648      	mov	r0, r9
 800cc06:	f000 fc2d 	bl	800d464 <__lshift>
 800cc0a:	eba6 0608 	sub.w	r6, r6, r8
 800cc0e:	4604      	mov	r4, r0
 800cc10:	f100 0a14 	add.w	sl, r0, #20
 800cc14:	f04f 0b00 	mov.w	fp, #0
 800cc18:	e7ba      	b.n	800cb90 <__gethex+0x1e4>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	42b3      	cmp	r3, r6
 800cc1e:	dd73      	ble.n	800cd08 <__gethex+0x35c>
 800cc20:	1b9e      	subs	r6, r3, r6
 800cc22:	42b5      	cmp	r5, r6
 800cc24:	dc34      	bgt.n	800cc90 <__gethex+0x2e4>
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2b02      	cmp	r3, #2
 800cc2a:	d023      	beq.n	800cc74 <__gethex+0x2c8>
 800cc2c:	2b03      	cmp	r3, #3
 800cc2e:	d025      	beq.n	800cc7c <__gethex+0x2d0>
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d115      	bne.n	800cc60 <__gethex+0x2b4>
 800cc34:	42b5      	cmp	r5, r6
 800cc36:	d113      	bne.n	800cc60 <__gethex+0x2b4>
 800cc38:	2d01      	cmp	r5, #1
 800cc3a:	d10b      	bne.n	800cc54 <__gethex+0x2a8>
 800cc3c:	9a02      	ldr	r2, [sp, #8]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6013      	str	r3, [r2, #0]
 800cc42:	2301      	movs	r3, #1
 800cc44:	6123      	str	r3, [r4, #16]
 800cc46:	f8ca 3000 	str.w	r3, [sl]
 800cc4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc4c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cc50:	601c      	str	r4, [r3, #0]
 800cc52:	e735      	b.n	800cac0 <__gethex+0x114>
 800cc54:	1e69      	subs	r1, r5, #1
 800cc56:	4620      	mov	r0, r4
 800cc58:	f000 fe36 	bl	800d8c8 <__any_on>
 800cc5c:	2800      	cmp	r0, #0
 800cc5e:	d1ed      	bne.n	800cc3c <__gethex+0x290>
 800cc60:	4621      	mov	r1, r4
 800cc62:	4648      	mov	r0, r9
 800cc64:	f000 f9e4 	bl	800d030 <_Bfree>
 800cc68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	6013      	str	r3, [r2, #0]
 800cc6e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800cc72:	e725      	b.n	800cac0 <__gethex+0x114>
 800cc74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d1f2      	bne.n	800cc60 <__gethex+0x2b4>
 800cc7a:	e7df      	b.n	800cc3c <__gethex+0x290>
 800cc7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d1dc      	bne.n	800cc3c <__gethex+0x290>
 800cc82:	e7ed      	b.n	800cc60 <__gethex+0x2b4>
 800cc84:	0800e4bc 	.word	0x0800e4bc
 800cc88:	0800e6c9 	.word	0x0800e6c9
 800cc8c:	0800e6da 	.word	0x0800e6da
 800cc90:	f106 38ff 	add.w	r8, r6, #4294967295
 800cc94:	f1bb 0f00 	cmp.w	fp, #0
 800cc98:	d133      	bne.n	800cd02 <__gethex+0x356>
 800cc9a:	f1b8 0f00 	cmp.w	r8, #0
 800cc9e:	d004      	beq.n	800ccaa <__gethex+0x2fe>
 800cca0:	4641      	mov	r1, r8
 800cca2:	4620      	mov	r0, r4
 800cca4:	f000 fe10 	bl	800d8c8 <__any_on>
 800cca8:	4683      	mov	fp, r0
 800ccaa:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ccae:	2301      	movs	r3, #1
 800ccb0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ccb4:	f008 081f 	and.w	r8, r8, #31
 800ccb8:	fa03 f308 	lsl.w	r3, r3, r8
 800ccbc:	4213      	tst	r3, r2
 800ccbe:	4631      	mov	r1, r6
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	bf18      	it	ne
 800ccc4:	f04b 0b02 	orrne.w	fp, fp, #2
 800ccc8:	1bad      	subs	r5, r5, r6
 800ccca:	f7ff fe07 	bl	800c8dc <rshift>
 800ccce:	687e      	ldr	r6, [r7, #4]
 800ccd0:	f04f 0802 	mov.w	r8, #2
 800ccd4:	f1bb 0f00 	cmp.w	fp, #0
 800ccd8:	d04a      	beq.n	800cd70 <__gethex+0x3c4>
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	2b02      	cmp	r3, #2
 800ccde:	d016      	beq.n	800cd0e <__gethex+0x362>
 800cce0:	2b03      	cmp	r3, #3
 800cce2:	d018      	beq.n	800cd16 <__gethex+0x36a>
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d109      	bne.n	800ccfc <__gethex+0x350>
 800cce8:	f01b 0f02 	tst.w	fp, #2
 800ccec:	d006      	beq.n	800ccfc <__gethex+0x350>
 800ccee:	f8da 3000 	ldr.w	r3, [sl]
 800ccf2:	ea4b 0b03 	orr.w	fp, fp, r3
 800ccf6:	f01b 0f01 	tst.w	fp, #1
 800ccfa:	d10f      	bne.n	800cd1c <__gethex+0x370>
 800ccfc:	f048 0810 	orr.w	r8, r8, #16
 800cd00:	e036      	b.n	800cd70 <__gethex+0x3c4>
 800cd02:	f04f 0b01 	mov.w	fp, #1
 800cd06:	e7d0      	b.n	800ccaa <__gethex+0x2fe>
 800cd08:	f04f 0801 	mov.w	r8, #1
 800cd0c:	e7e2      	b.n	800ccd4 <__gethex+0x328>
 800cd0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd10:	f1c3 0301 	rsb	r3, r3, #1
 800cd14:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d0ef      	beq.n	800ccfc <__gethex+0x350>
 800cd1c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cd20:	f104 0214 	add.w	r2, r4, #20
 800cd24:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800cd28:	9301      	str	r3, [sp, #4]
 800cd2a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800cd2e:	2300      	movs	r3, #0
 800cd30:	4694      	mov	ip, r2
 800cd32:	f852 1b04 	ldr.w	r1, [r2], #4
 800cd36:	f1b1 3fff 	cmp.w	r1, #4294967295
 800cd3a:	d01e      	beq.n	800cd7a <__gethex+0x3ce>
 800cd3c:	3101      	adds	r1, #1
 800cd3e:	f8cc 1000 	str.w	r1, [ip]
 800cd42:	f1b8 0f02 	cmp.w	r8, #2
 800cd46:	f104 0214 	add.w	r2, r4, #20
 800cd4a:	d13d      	bne.n	800cdc8 <__gethex+0x41c>
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	3b01      	subs	r3, #1
 800cd50:	42ab      	cmp	r3, r5
 800cd52:	d10b      	bne.n	800cd6c <__gethex+0x3c0>
 800cd54:	1169      	asrs	r1, r5, #5
 800cd56:	2301      	movs	r3, #1
 800cd58:	f005 051f 	and.w	r5, r5, #31
 800cd5c:	fa03 f505 	lsl.w	r5, r3, r5
 800cd60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd64:	421d      	tst	r5, r3
 800cd66:	bf18      	it	ne
 800cd68:	f04f 0801 	movne.w	r8, #1
 800cd6c:	f048 0820 	orr.w	r8, r8, #32
 800cd70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd72:	601c      	str	r4, [r3, #0]
 800cd74:	9b02      	ldr	r3, [sp, #8]
 800cd76:	601e      	str	r6, [r3, #0]
 800cd78:	e6a2      	b.n	800cac0 <__gethex+0x114>
 800cd7a:	4290      	cmp	r0, r2
 800cd7c:	f842 3c04 	str.w	r3, [r2, #-4]
 800cd80:	d8d6      	bhi.n	800cd30 <__gethex+0x384>
 800cd82:	68a2      	ldr	r2, [r4, #8]
 800cd84:	4593      	cmp	fp, r2
 800cd86:	db17      	blt.n	800cdb8 <__gethex+0x40c>
 800cd88:	6861      	ldr	r1, [r4, #4]
 800cd8a:	4648      	mov	r0, r9
 800cd8c:	3101      	adds	r1, #1
 800cd8e:	f000 f90f 	bl	800cfb0 <_Balloc>
 800cd92:	4682      	mov	sl, r0
 800cd94:	b918      	cbnz	r0, 800cd9e <__gethex+0x3f2>
 800cd96:	4b1b      	ldr	r3, [pc, #108]	; (800ce04 <__gethex+0x458>)
 800cd98:	4602      	mov	r2, r0
 800cd9a:	2184      	movs	r1, #132	; 0x84
 800cd9c:	e6b3      	b.n	800cb06 <__gethex+0x15a>
 800cd9e:	6922      	ldr	r2, [r4, #16]
 800cda0:	3202      	adds	r2, #2
 800cda2:	f104 010c 	add.w	r1, r4, #12
 800cda6:	0092      	lsls	r2, r2, #2
 800cda8:	300c      	adds	r0, #12
 800cdaa:	f7fe febb 	bl	800bb24 <memcpy>
 800cdae:	4621      	mov	r1, r4
 800cdb0:	4648      	mov	r0, r9
 800cdb2:	f000 f93d 	bl	800d030 <_Bfree>
 800cdb6:	4654      	mov	r4, sl
 800cdb8:	6922      	ldr	r2, [r4, #16]
 800cdba:	1c51      	adds	r1, r2, #1
 800cdbc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cdc0:	6121      	str	r1, [r4, #16]
 800cdc2:	2101      	movs	r1, #1
 800cdc4:	6151      	str	r1, [r2, #20]
 800cdc6:	e7bc      	b.n	800cd42 <__gethex+0x396>
 800cdc8:	6921      	ldr	r1, [r4, #16]
 800cdca:	4559      	cmp	r1, fp
 800cdcc:	dd0b      	ble.n	800cde6 <__gethex+0x43a>
 800cdce:	2101      	movs	r1, #1
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	f7ff fd83 	bl	800c8dc <rshift>
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	3601      	adds	r6, #1
 800cdda:	42b3      	cmp	r3, r6
 800cddc:	f6ff aedb 	blt.w	800cb96 <__gethex+0x1ea>
 800cde0:	f04f 0801 	mov.w	r8, #1
 800cde4:	e7c2      	b.n	800cd6c <__gethex+0x3c0>
 800cde6:	f015 051f 	ands.w	r5, r5, #31
 800cdea:	d0f9      	beq.n	800cde0 <__gethex+0x434>
 800cdec:	9b01      	ldr	r3, [sp, #4]
 800cdee:	441a      	add	r2, r3
 800cdf0:	f1c5 0520 	rsb	r5, r5, #32
 800cdf4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800cdf8:	f000 f9cc 	bl	800d194 <__hi0bits>
 800cdfc:	42a8      	cmp	r0, r5
 800cdfe:	dbe6      	blt.n	800cdce <__gethex+0x422>
 800ce00:	e7ee      	b.n	800cde0 <__gethex+0x434>
 800ce02:	bf00      	nop
 800ce04:	0800e6c9 	.word	0x0800e6c9

0800ce08 <L_shift>:
 800ce08:	f1c2 0208 	rsb	r2, r2, #8
 800ce0c:	0092      	lsls	r2, r2, #2
 800ce0e:	b570      	push	{r4, r5, r6, lr}
 800ce10:	f1c2 0620 	rsb	r6, r2, #32
 800ce14:	6843      	ldr	r3, [r0, #4]
 800ce16:	6804      	ldr	r4, [r0, #0]
 800ce18:	fa03 f506 	lsl.w	r5, r3, r6
 800ce1c:	432c      	orrs	r4, r5
 800ce1e:	40d3      	lsrs	r3, r2
 800ce20:	6004      	str	r4, [r0, #0]
 800ce22:	f840 3f04 	str.w	r3, [r0, #4]!
 800ce26:	4288      	cmp	r0, r1
 800ce28:	d3f4      	bcc.n	800ce14 <L_shift+0xc>
 800ce2a:	bd70      	pop	{r4, r5, r6, pc}

0800ce2c <__match>:
 800ce2c:	b530      	push	{r4, r5, lr}
 800ce2e:	6803      	ldr	r3, [r0, #0]
 800ce30:	3301      	adds	r3, #1
 800ce32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce36:	b914      	cbnz	r4, 800ce3e <__match+0x12>
 800ce38:	6003      	str	r3, [r0, #0]
 800ce3a:	2001      	movs	r0, #1
 800ce3c:	bd30      	pop	{r4, r5, pc}
 800ce3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce42:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ce46:	2d19      	cmp	r5, #25
 800ce48:	bf98      	it	ls
 800ce4a:	3220      	addls	r2, #32
 800ce4c:	42a2      	cmp	r2, r4
 800ce4e:	d0f0      	beq.n	800ce32 <__match+0x6>
 800ce50:	2000      	movs	r0, #0
 800ce52:	e7f3      	b.n	800ce3c <__match+0x10>

0800ce54 <__hexnan>:
 800ce54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce58:	680b      	ldr	r3, [r1, #0]
 800ce5a:	6801      	ldr	r1, [r0, #0]
 800ce5c:	115e      	asrs	r6, r3, #5
 800ce5e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ce62:	f013 031f 	ands.w	r3, r3, #31
 800ce66:	b087      	sub	sp, #28
 800ce68:	bf18      	it	ne
 800ce6a:	3604      	addne	r6, #4
 800ce6c:	2500      	movs	r5, #0
 800ce6e:	1f37      	subs	r7, r6, #4
 800ce70:	4682      	mov	sl, r0
 800ce72:	4690      	mov	r8, r2
 800ce74:	9301      	str	r3, [sp, #4]
 800ce76:	f846 5c04 	str.w	r5, [r6, #-4]
 800ce7a:	46b9      	mov	r9, r7
 800ce7c:	463c      	mov	r4, r7
 800ce7e:	9502      	str	r5, [sp, #8]
 800ce80:	46ab      	mov	fp, r5
 800ce82:	784a      	ldrb	r2, [r1, #1]
 800ce84:	1c4b      	adds	r3, r1, #1
 800ce86:	9303      	str	r3, [sp, #12]
 800ce88:	b342      	cbz	r2, 800cedc <__hexnan+0x88>
 800ce8a:	4610      	mov	r0, r2
 800ce8c:	9105      	str	r1, [sp, #20]
 800ce8e:	9204      	str	r2, [sp, #16]
 800ce90:	f7ff fd76 	bl	800c980 <__hexdig_fun>
 800ce94:	2800      	cmp	r0, #0
 800ce96:	d14f      	bne.n	800cf38 <__hexnan+0xe4>
 800ce98:	9a04      	ldr	r2, [sp, #16]
 800ce9a:	9905      	ldr	r1, [sp, #20]
 800ce9c:	2a20      	cmp	r2, #32
 800ce9e:	d818      	bhi.n	800ced2 <__hexnan+0x7e>
 800cea0:	9b02      	ldr	r3, [sp, #8]
 800cea2:	459b      	cmp	fp, r3
 800cea4:	dd13      	ble.n	800cece <__hexnan+0x7a>
 800cea6:	454c      	cmp	r4, r9
 800cea8:	d206      	bcs.n	800ceb8 <__hexnan+0x64>
 800ceaa:	2d07      	cmp	r5, #7
 800ceac:	dc04      	bgt.n	800ceb8 <__hexnan+0x64>
 800ceae:	462a      	mov	r2, r5
 800ceb0:	4649      	mov	r1, r9
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	f7ff ffa8 	bl	800ce08 <L_shift>
 800ceb8:	4544      	cmp	r4, r8
 800ceba:	d950      	bls.n	800cf5e <__hexnan+0x10a>
 800cebc:	2300      	movs	r3, #0
 800cebe:	f1a4 0904 	sub.w	r9, r4, #4
 800cec2:	f844 3c04 	str.w	r3, [r4, #-4]
 800cec6:	f8cd b008 	str.w	fp, [sp, #8]
 800ceca:	464c      	mov	r4, r9
 800cecc:	461d      	mov	r5, r3
 800cece:	9903      	ldr	r1, [sp, #12]
 800ced0:	e7d7      	b.n	800ce82 <__hexnan+0x2e>
 800ced2:	2a29      	cmp	r2, #41	; 0x29
 800ced4:	d155      	bne.n	800cf82 <__hexnan+0x12e>
 800ced6:	3102      	adds	r1, #2
 800ced8:	f8ca 1000 	str.w	r1, [sl]
 800cedc:	f1bb 0f00 	cmp.w	fp, #0
 800cee0:	d04f      	beq.n	800cf82 <__hexnan+0x12e>
 800cee2:	454c      	cmp	r4, r9
 800cee4:	d206      	bcs.n	800cef4 <__hexnan+0xa0>
 800cee6:	2d07      	cmp	r5, #7
 800cee8:	dc04      	bgt.n	800cef4 <__hexnan+0xa0>
 800ceea:	462a      	mov	r2, r5
 800ceec:	4649      	mov	r1, r9
 800ceee:	4620      	mov	r0, r4
 800cef0:	f7ff ff8a 	bl	800ce08 <L_shift>
 800cef4:	4544      	cmp	r4, r8
 800cef6:	d934      	bls.n	800cf62 <__hexnan+0x10e>
 800cef8:	f1a8 0204 	sub.w	r2, r8, #4
 800cefc:	4623      	mov	r3, r4
 800cefe:	f853 1b04 	ldr.w	r1, [r3], #4
 800cf02:	f842 1f04 	str.w	r1, [r2, #4]!
 800cf06:	429f      	cmp	r7, r3
 800cf08:	d2f9      	bcs.n	800cefe <__hexnan+0xaa>
 800cf0a:	1b3b      	subs	r3, r7, r4
 800cf0c:	f023 0303 	bic.w	r3, r3, #3
 800cf10:	3304      	adds	r3, #4
 800cf12:	3e03      	subs	r6, #3
 800cf14:	3401      	adds	r4, #1
 800cf16:	42a6      	cmp	r6, r4
 800cf18:	bf38      	it	cc
 800cf1a:	2304      	movcc	r3, #4
 800cf1c:	4443      	add	r3, r8
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f843 2b04 	str.w	r2, [r3], #4
 800cf24:	429f      	cmp	r7, r3
 800cf26:	d2fb      	bcs.n	800cf20 <__hexnan+0xcc>
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	b91b      	cbnz	r3, 800cf34 <__hexnan+0xe0>
 800cf2c:	4547      	cmp	r7, r8
 800cf2e:	d126      	bne.n	800cf7e <__hexnan+0x12a>
 800cf30:	2301      	movs	r3, #1
 800cf32:	603b      	str	r3, [r7, #0]
 800cf34:	2005      	movs	r0, #5
 800cf36:	e025      	b.n	800cf84 <__hexnan+0x130>
 800cf38:	3501      	adds	r5, #1
 800cf3a:	2d08      	cmp	r5, #8
 800cf3c:	f10b 0b01 	add.w	fp, fp, #1
 800cf40:	dd06      	ble.n	800cf50 <__hexnan+0xfc>
 800cf42:	4544      	cmp	r4, r8
 800cf44:	d9c3      	bls.n	800cece <__hexnan+0x7a>
 800cf46:	2300      	movs	r3, #0
 800cf48:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf4c:	2501      	movs	r5, #1
 800cf4e:	3c04      	subs	r4, #4
 800cf50:	6822      	ldr	r2, [r4, #0]
 800cf52:	f000 000f 	and.w	r0, r0, #15
 800cf56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cf5a:	6020      	str	r0, [r4, #0]
 800cf5c:	e7b7      	b.n	800cece <__hexnan+0x7a>
 800cf5e:	2508      	movs	r5, #8
 800cf60:	e7b5      	b.n	800cece <__hexnan+0x7a>
 800cf62:	9b01      	ldr	r3, [sp, #4]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d0df      	beq.n	800cf28 <__hexnan+0xd4>
 800cf68:	f1c3 0320 	rsb	r3, r3, #32
 800cf6c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf70:	40da      	lsrs	r2, r3
 800cf72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cf76:	4013      	ands	r3, r2
 800cf78:	f846 3c04 	str.w	r3, [r6, #-4]
 800cf7c:	e7d4      	b.n	800cf28 <__hexnan+0xd4>
 800cf7e:	3f04      	subs	r7, #4
 800cf80:	e7d2      	b.n	800cf28 <__hexnan+0xd4>
 800cf82:	2004      	movs	r0, #4
 800cf84:	b007      	add	sp, #28
 800cf86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf8a <__ascii_mbtowc>:
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	b901      	cbnz	r1, 800cf90 <__ascii_mbtowc+0x6>
 800cf8e:	a901      	add	r1, sp, #4
 800cf90:	b142      	cbz	r2, 800cfa4 <__ascii_mbtowc+0x1a>
 800cf92:	b14b      	cbz	r3, 800cfa8 <__ascii_mbtowc+0x1e>
 800cf94:	7813      	ldrb	r3, [r2, #0]
 800cf96:	600b      	str	r3, [r1, #0]
 800cf98:	7812      	ldrb	r2, [r2, #0]
 800cf9a:	1e10      	subs	r0, r2, #0
 800cf9c:	bf18      	it	ne
 800cf9e:	2001      	movne	r0, #1
 800cfa0:	b002      	add	sp, #8
 800cfa2:	4770      	bx	lr
 800cfa4:	4610      	mov	r0, r2
 800cfa6:	e7fb      	b.n	800cfa0 <__ascii_mbtowc+0x16>
 800cfa8:	f06f 0001 	mvn.w	r0, #1
 800cfac:	e7f8      	b.n	800cfa0 <__ascii_mbtowc+0x16>
	...

0800cfb0 <_Balloc>:
 800cfb0:	b570      	push	{r4, r5, r6, lr}
 800cfb2:	69c6      	ldr	r6, [r0, #28]
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	460d      	mov	r5, r1
 800cfb8:	b976      	cbnz	r6, 800cfd8 <_Balloc+0x28>
 800cfba:	2010      	movs	r0, #16
 800cfbc:	f7fd f88a 	bl	800a0d4 <malloc>
 800cfc0:	4602      	mov	r2, r0
 800cfc2:	61e0      	str	r0, [r4, #28]
 800cfc4:	b920      	cbnz	r0, 800cfd0 <_Balloc+0x20>
 800cfc6:	4b18      	ldr	r3, [pc, #96]	; (800d028 <_Balloc+0x78>)
 800cfc8:	4818      	ldr	r0, [pc, #96]	; (800d02c <_Balloc+0x7c>)
 800cfca:	216b      	movs	r1, #107	; 0x6b
 800cfcc:	f000 fed2 	bl	800dd74 <__assert_func>
 800cfd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfd4:	6006      	str	r6, [r0, #0]
 800cfd6:	60c6      	str	r6, [r0, #12]
 800cfd8:	69e6      	ldr	r6, [r4, #28]
 800cfda:	68f3      	ldr	r3, [r6, #12]
 800cfdc:	b183      	cbz	r3, 800d000 <_Balloc+0x50>
 800cfde:	69e3      	ldr	r3, [r4, #28]
 800cfe0:	68db      	ldr	r3, [r3, #12]
 800cfe2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cfe6:	b9b8      	cbnz	r0, 800d018 <_Balloc+0x68>
 800cfe8:	2101      	movs	r1, #1
 800cfea:	fa01 f605 	lsl.w	r6, r1, r5
 800cfee:	1d72      	adds	r2, r6, #5
 800cff0:	0092      	lsls	r2, r2, #2
 800cff2:	4620      	mov	r0, r4
 800cff4:	f000 fedc 	bl	800ddb0 <_calloc_r>
 800cff8:	b160      	cbz	r0, 800d014 <_Balloc+0x64>
 800cffa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cffe:	e00e      	b.n	800d01e <_Balloc+0x6e>
 800d000:	2221      	movs	r2, #33	; 0x21
 800d002:	2104      	movs	r1, #4
 800d004:	4620      	mov	r0, r4
 800d006:	f000 fed3 	bl	800ddb0 <_calloc_r>
 800d00a:	69e3      	ldr	r3, [r4, #28]
 800d00c:	60f0      	str	r0, [r6, #12]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d1e4      	bne.n	800cfde <_Balloc+0x2e>
 800d014:	2000      	movs	r0, #0
 800d016:	bd70      	pop	{r4, r5, r6, pc}
 800d018:	6802      	ldr	r2, [r0, #0]
 800d01a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d01e:	2300      	movs	r3, #0
 800d020:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d024:	e7f7      	b.n	800d016 <_Balloc+0x66>
 800d026:	bf00      	nop
 800d028:	0800e65a 	.word	0x0800e65a
 800d02c:	0800e73a 	.word	0x0800e73a

0800d030 <_Bfree>:
 800d030:	b570      	push	{r4, r5, r6, lr}
 800d032:	69c6      	ldr	r6, [r0, #28]
 800d034:	4605      	mov	r5, r0
 800d036:	460c      	mov	r4, r1
 800d038:	b976      	cbnz	r6, 800d058 <_Bfree+0x28>
 800d03a:	2010      	movs	r0, #16
 800d03c:	f7fd f84a 	bl	800a0d4 <malloc>
 800d040:	4602      	mov	r2, r0
 800d042:	61e8      	str	r0, [r5, #28]
 800d044:	b920      	cbnz	r0, 800d050 <_Bfree+0x20>
 800d046:	4b09      	ldr	r3, [pc, #36]	; (800d06c <_Bfree+0x3c>)
 800d048:	4809      	ldr	r0, [pc, #36]	; (800d070 <_Bfree+0x40>)
 800d04a:	218f      	movs	r1, #143	; 0x8f
 800d04c:	f000 fe92 	bl	800dd74 <__assert_func>
 800d050:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d054:	6006      	str	r6, [r0, #0]
 800d056:	60c6      	str	r6, [r0, #12]
 800d058:	b13c      	cbz	r4, 800d06a <_Bfree+0x3a>
 800d05a:	69eb      	ldr	r3, [r5, #28]
 800d05c:	6862      	ldr	r2, [r4, #4]
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d064:	6021      	str	r1, [r4, #0]
 800d066:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d06a:	bd70      	pop	{r4, r5, r6, pc}
 800d06c:	0800e65a 	.word	0x0800e65a
 800d070:	0800e73a 	.word	0x0800e73a

0800d074 <__multadd>:
 800d074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d078:	690d      	ldr	r5, [r1, #16]
 800d07a:	4607      	mov	r7, r0
 800d07c:	460c      	mov	r4, r1
 800d07e:	461e      	mov	r6, r3
 800d080:	f101 0c14 	add.w	ip, r1, #20
 800d084:	2000      	movs	r0, #0
 800d086:	f8dc 3000 	ldr.w	r3, [ip]
 800d08a:	b299      	uxth	r1, r3
 800d08c:	fb02 6101 	mla	r1, r2, r1, r6
 800d090:	0c1e      	lsrs	r6, r3, #16
 800d092:	0c0b      	lsrs	r3, r1, #16
 800d094:	fb02 3306 	mla	r3, r2, r6, r3
 800d098:	b289      	uxth	r1, r1
 800d09a:	3001      	adds	r0, #1
 800d09c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d0a0:	4285      	cmp	r5, r0
 800d0a2:	f84c 1b04 	str.w	r1, [ip], #4
 800d0a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d0aa:	dcec      	bgt.n	800d086 <__multadd+0x12>
 800d0ac:	b30e      	cbz	r6, 800d0f2 <__multadd+0x7e>
 800d0ae:	68a3      	ldr	r3, [r4, #8]
 800d0b0:	42ab      	cmp	r3, r5
 800d0b2:	dc19      	bgt.n	800d0e8 <__multadd+0x74>
 800d0b4:	6861      	ldr	r1, [r4, #4]
 800d0b6:	4638      	mov	r0, r7
 800d0b8:	3101      	adds	r1, #1
 800d0ba:	f7ff ff79 	bl	800cfb0 <_Balloc>
 800d0be:	4680      	mov	r8, r0
 800d0c0:	b928      	cbnz	r0, 800d0ce <__multadd+0x5a>
 800d0c2:	4602      	mov	r2, r0
 800d0c4:	4b0c      	ldr	r3, [pc, #48]	; (800d0f8 <__multadd+0x84>)
 800d0c6:	480d      	ldr	r0, [pc, #52]	; (800d0fc <__multadd+0x88>)
 800d0c8:	21ba      	movs	r1, #186	; 0xba
 800d0ca:	f000 fe53 	bl	800dd74 <__assert_func>
 800d0ce:	6922      	ldr	r2, [r4, #16]
 800d0d0:	3202      	adds	r2, #2
 800d0d2:	f104 010c 	add.w	r1, r4, #12
 800d0d6:	0092      	lsls	r2, r2, #2
 800d0d8:	300c      	adds	r0, #12
 800d0da:	f7fe fd23 	bl	800bb24 <memcpy>
 800d0de:	4621      	mov	r1, r4
 800d0e0:	4638      	mov	r0, r7
 800d0e2:	f7ff ffa5 	bl	800d030 <_Bfree>
 800d0e6:	4644      	mov	r4, r8
 800d0e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d0ec:	3501      	adds	r5, #1
 800d0ee:	615e      	str	r6, [r3, #20]
 800d0f0:	6125      	str	r5, [r4, #16]
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0f8:	0800e6c9 	.word	0x0800e6c9
 800d0fc:	0800e73a 	.word	0x0800e73a

0800d100 <__s2b>:
 800d100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d104:	460c      	mov	r4, r1
 800d106:	4615      	mov	r5, r2
 800d108:	461f      	mov	r7, r3
 800d10a:	2209      	movs	r2, #9
 800d10c:	3308      	adds	r3, #8
 800d10e:	4606      	mov	r6, r0
 800d110:	fb93 f3f2 	sdiv	r3, r3, r2
 800d114:	2100      	movs	r1, #0
 800d116:	2201      	movs	r2, #1
 800d118:	429a      	cmp	r2, r3
 800d11a:	db09      	blt.n	800d130 <__s2b+0x30>
 800d11c:	4630      	mov	r0, r6
 800d11e:	f7ff ff47 	bl	800cfb0 <_Balloc>
 800d122:	b940      	cbnz	r0, 800d136 <__s2b+0x36>
 800d124:	4602      	mov	r2, r0
 800d126:	4b19      	ldr	r3, [pc, #100]	; (800d18c <__s2b+0x8c>)
 800d128:	4819      	ldr	r0, [pc, #100]	; (800d190 <__s2b+0x90>)
 800d12a:	21d3      	movs	r1, #211	; 0xd3
 800d12c:	f000 fe22 	bl	800dd74 <__assert_func>
 800d130:	0052      	lsls	r2, r2, #1
 800d132:	3101      	adds	r1, #1
 800d134:	e7f0      	b.n	800d118 <__s2b+0x18>
 800d136:	9b08      	ldr	r3, [sp, #32]
 800d138:	6143      	str	r3, [r0, #20]
 800d13a:	2d09      	cmp	r5, #9
 800d13c:	f04f 0301 	mov.w	r3, #1
 800d140:	6103      	str	r3, [r0, #16]
 800d142:	dd16      	ble.n	800d172 <__s2b+0x72>
 800d144:	f104 0909 	add.w	r9, r4, #9
 800d148:	46c8      	mov	r8, r9
 800d14a:	442c      	add	r4, r5
 800d14c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d150:	4601      	mov	r1, r0
 800d152:	3b30      	subs	r3, #48	; 0x30
 800d154:	220a      	movs	r2, #10
 800d156:	4630      	mov	r0, r6
 800d158:	f7ff ff8c 	bl	800d074 <__multadd>
 800d15c:	45a0      	cmp	r8, r4
 800d15e:	d1f5      	bne.n	800d14c <__s2b+0x4c>
 800d160:	f1a5 0408 	sub.w	r4, r5, #8
 800d164:	444c      	add	r4, r9
 800d166:	1b2d      	subs	r5, r5, r4
 800d168:	1963      	adds	r3, r4, r5
 800d16a:	42bb      	cmp	r3, r7
 800d16c:	db04      	blt.n	800d178 <__s2b+0x78>
 800d16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d172:	340a      	adds	r4, #10
 800d174:	2509      	movs	r5, #9
 800d176:	e7f6      	b.n	800d166 <__s2b+0x66>
 800d178:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d17c:	4601      	mov	r1, r0
 800d17e:	3b30      	subs	r3, #48	; 0x30
 800d180:	220a      	movs	r2, #10
 800d182:	4630      	mov	r0, r6
 800d184:	f7ff ff76 	bl	800d074 <__multadd>
 800d188:	e7ee      	b.n	800d168 <__s2b+0x68>
 800d18a:	bf00      	nop
 800d18c:	0800e6c9 	.word	0x0800e6c9
 800d190:	0800e73a 	.word	0x0800e73a

0800d194 <__hi0bits>:
 800d194:	0c03      	lsrs	r3, r0, #16
 800d196:	041b      	lsls	r3, r3, #16
 800d198:	b9d3      	cbnz	r3, 800d1d0 <__hi0bits+0x3c>
 800d19a:	0400      	lsls	r0, r0, #16
 800d19c:	2310      	movs	r3, #16
 800d19e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d1a2:	bf04      	itt	eq
 800d1a4:	0200      	lsleq	r0, r0, #8
 800d1a6:	3308      	addeq	r3, #8
 800d1a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d1ac:	bf04      	itt	eq
 800d1ae:	0100      	lsleq	r0, r0, #4
 800d1b0:	3304      	addeq	r3, #4
 800d1b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d1b6:	bf04      	itt	eq
 800d1b8:	0080      	lsleq	r0, r0, #2
 800d1ba:	3302      	addeq	r3, #2
 800d1bc:	2800      	cmp	r0, #0
 800d1be:	db05      	blt.n	800d1cc <__hi0bits+0x38>
 800d1c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d1c4:	f103 0301 	add.w	r3, r3, #1
 800d1c8:	bf08      	it	eq
 800d1ca:	2320      	moveq	r3, #32
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	4770      	bx	lr
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	e7e4      	b.n	800d19e <__hi0bits+0xa>

0800d1d4 <__lo0bits>:
 800d1d4:	6803      	ldr	r3, [r0, #0]
 800d1d6:	f013 0207 	ands.w	r2, r3, #7
 800d1da:	d00c      	beq.n	800d1f6 <__lo0bits+0x22>
 800d1dc:	07d9      	lsls	r1, r3, #31
 800d1de:	d422      	bmi.n	800d226 <__lo0bits+0x52>
 800d1e0:	079a      	lsls	r2, r3, #30
 800d1e2:	bf49      	itett	mi
 800d1e4:	085b      	lsrmi	r3, r3, #1
 800d1e6:	089b      	lsrpl	r3, r3, #2
 800d1e8:	6003      	strmi	r3, [r0, #0]
 800d1ea:	2201      	movmi	r2, #1
 800d1ec:	bf5c      	itt	pl
 800d1ee:	6003      	strpl	r3, [r0, #0]
 800d1f0:	2202      	movpl	r2, #2
 800d1f2:	4610      	mov	r0, r2
 800d1f4:	4770      	bx	lr
 800d1f6:	b299      	uxth	r1, r3
 800d1f8:	b909      	cbnz	r1, 800d1fe <__lo0bits+0x2a>
 800d1fa:	0c1b      	lsrs	r3, r3, #16
 800d1fc:	2210      	movs	r2, #16
 800d1fe:	b2d9      	uxtb	r1, r3
 800d200:	b909      	cbnz	r1, 800d206 <__lo0bits+0x32>
 800d202:	3208      	adds	r2, #8
 800d204:	0a1b      	lsrs	r3, r3, #8
 800d206:	0719      	lsls	r1, r3, #28
 800d208:	bf04      	itt	eq
 800d20a:	091b      	lsreq	r3, r3, #4
 800d20c:	3204      	addeq	r2, #4
 800d20e:	0799      	lsls	r1, r3, #30
 800d210:	bf04      	itt	eq
 800d212:	089b      	lsreq	r3, r3, #2
 800d214:	3202      	addeq	r2, #2
 800d216:	07d9      	lsls	r1, r3, #31
 800d218:	d403      	bmi.n	800d222 <__lo0bits+0x4e>
 800d21a:	085b      	lsrs	r3, r3, #1
 800d21c:	f102 0201 	add.w	r2, r2, #1
 800d220:	d003      	beq.n	800d22a <__lo0bits+0x56>
 800d222:	6003      	str	r3, [r0, #0]
 800d224:	e7e5      	b.n	800d1f2 <__lo0bits+0x1e>
 800d226:	2200      	movs	r2, #0
 800d228:	e7e3      	b.n	800d1f2 <__lo0bits+0x1e>
 800d22a:	2220      	movs	r2, #32
 800d22c:	e7e1      	b.n	800d1f2 <__lo0bits+0x1e>
	...

0800d230 <__i2b>:
 800d230:	b510      	push	{r4, lr}
 800d232:	460c      	mov	r4, r1
 800d234:	2101      	movs	r1, #1
 800d236:	f7ff febb 	bl	800cfb0 <_Balloc>
 800d23a:	4602      	mov	r2, r0
 800d23c:	b928      	cbnz	r0, 800d24a <__i2b+0x1a>
 800d23e:	4b05      	ldr	r3, [pc, #20]	; (800d254 <__i2b+0x24>)
 800d240:	4805      	ldr	r0, [pc, #20]	; (800d258 <__i2b+0x28>)
 800d242:	f240 1145 	movw	r1, #325	; 0x145
 800d246:	f000 fd95 	bl	800dd74 <__assert_func>
 800d24a:	2301      	movs	r3, #1
 800d24c:	6144      	str	r4, [r0, #20]
 800d24e:	6103      	str	r3, [r0, #16]
 800d250:	bd10      	pop	{r4, pc}
 800d252:	bf00      	nop
 800d254:	0800e6c9 	.word	0x0800e6c9
 800d258:	0800e73a 	.word	0x0800e73a

0800d25c <__multiply>:
 800d25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d260:	4691      	mov	r9, r2
 800d262:	690a      	ldr	r2, [r1, #16]
 800d264:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d268:	429a      	cmp	r2, r3
 800d26a:	bfb8      	it	lt
 800d26c:	460b      	movlt	r3, r1
 800d26e:	460c      	mov	r4, r1
 800d270:	bfbc      	itt	lt
 800d272:	464c      	movlt	r4, r9
 800d274:	4699      	movlt	r9, r3
 800d276:	6927      	ldr	r7, [r4, #16]
 800d278:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d27c:	68a3      	ldr	r3, [r4, #8]
 800d27e:	6861      	ldr	r1, [r4, #4]
 800d280:	eb07 060a 	add.w	r6, r7, sl
 800d284:	42b3      	cmp	r3, r6
 800d286:	b085      	sub	sp, #20
 800d288:	bfb8      	it	lt
 800d28a:	3101      	addlt	r1, #1
 800d28c:	f7ff fe90 	bl	800cfb0 <_Balloc>
 800d290:	b930      	cbnz	r0, 800d2a0 <__multiply+0x44>
 800d292:	4602      	mov	r2, r0
 800d294:	4b44      	ldr	r3, [pc, #272]	; (800d3a8 <__multiply+0x14c>)
 800d296:	4845      	ldr	r0, [pc, #276]	; (800d3ac <__multiply+0x150>)
 800d298:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d29c:	f000 fd6a 	bl	800dd74 <__assert_func>
 800d2a0:	f100 0514 	add.w	r5, r0, #20
 800d2a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d2a8:	462b      	mov	r3, r5
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	4543      	cmp	r3, r8
 800d2ae:	d321      	bcc.n	800d2f4 <__multiply+0x98>
 800d2b0:	f104 0314 	add.w	r3, r4, #20
 800d2b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d2b8:	f109 0314 	add.w	r3, r9, #20
 800d2bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d2c0:	9202      	str	r2, [sp, #8]
 800d2c2:	1b3a      	subs	r2, r7, r4
 800d2c4:	3a15      	subs	r2, #21
 800d2c6:	f022 0203 	bic.w	r2, r2, #3
 800d2ca:	3204      	adds	r2, #4
 800d2cc:	f104 0115 	add.w	r1, r4, #21
 800d2d0:	428f      	cmp	r7, r1
 800d2d2:	bf38      	it	cc
 800d2d4:	2204      	movcc	r2, #4
 800d2d6:	9201      	str	r2, [sp, #4]
 800d2d8:	9a02      	ldr	r2, [sp, #8]
 800d2da:	9303      	str	r3, [sp, #12]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d80c      	bhi.n	800d2fa <__multiply+0x9e>
 800d2e0:	2e00      	cmp	r6, #0
 800d2e2:	dd03      	ble.n	800d2ec <__multiply+0x90>
 800d2e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d05b      	beq.n	800d3a4 <__multiply+0x148>
 800d2ec:	6106      	str	r6, [r0, #16]
 800d2ee:	b005      	add	sp, #20
 800d2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2f4:	f843 2b04 	str.w	r2, [r3], #4
 800d2f8:	e7d8      	b.n	800d2ac <__multiply+0x50>
 800d2fa:	f8b3 a000 	ldrh.w	sl, [r3]
 800d2fe:	f1ba 0f00 	cmp.w	sl, #0
 800d302:	d024      	beq.n	800d34e <__multiply+0xf2>
 800d304:	f104 0e14 	add.w	lr, r4, #20
 800d308:	46a9      	mov	r9, r5
 800d30a:	f04f 0c00 	mov.w	ip, #0
 800d30e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d312:	f8d9 1000 	ldr.w	r1, [r9]
 800d316:	fa1f fb82 	uxth.w	fp, r2
 800d31a:	b289      	uxth	r1, r1
 800d31c:	fb0a 110b 	mla	r1, sl, fp, r1
 800d320:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d324:	f8d9 2000 	ldr.w	r2, [r9]
 800d328:	4461      	add	r1, ip
 800d32a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d32e:	fb0a c20b 	mla	r2, sl, fp, ip
 800d332:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d336:	b289      	uxth	r1, r1
 800d338:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d33c:	4577      	cmp	r7, lr
 800d33e:	f849 1b04 	str.w	r1, [r9], #4
 800d342:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d346:	d8e2      	bhi.n	800d30e <__multiply+0xb2>
 800d348:	9a01      	ldr	r2, [sp, #4]
 800d34a:	f845 c002 	str.w	ip, [r5, r2]
 800d34e:	9a03      	ldr	r2, [sp, #12]
 800d350:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d354:	3304      	adds	r3, #4
 800d356:	f1b9 0f00 	cmp.w	r9, #0
 800d35a:	d021      	beq.n	800d3a0 <__multiply+0x144>
 800d35c:	6829      	ldr	r1, [r5, #0]
 800d35e:	f104 0c14 	add.w	ip, r4, #20
 800d362:	46ae      	mov	lr, r5
 800d364:	f04f 0a00 	mov.w	sl, #0
 800d368:	f8bc b000 	ldrh.w	fp, [ip]
 800d36c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d370:	fb09 220b 	mla	r2, r9, fp, r2
 800d374:	4452      	add	r2, sl
 800d376:	b289      	uxth	r1, r1
 800d378:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d37c:	f84e 1b04 	str.w	r1, [lr], #4
 800d380:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d384:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d388:	f8be 1000 	ldrh.w	r1, [lr]
 800d38c:	fb09 110a 	mla	r1, r9, sl, r1
 800d390:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d394:	4567      	cmp	r7, ip
 800d396:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d39a:	d8e5      	bhi.n	800d368 <__multiply+0x10c>
 800d39c:	9a01      	ldr	r2, [sp, #4]
 800d39e:	50a9      	str	r1, [r5, r2]
 800d3a0:	3504      	adds	r5, #4
 800d3a2:	e799      	b.n	800d2d8 <__multiply+0x7c>
 800d3a4:	3e01      	subs	r6, #1
 800d3a6:	e79b      	b.n	800d2e0 <__multiply+0x84>
 800d3a8:	0800e6c9 	.word	0x0800e6c9
 800d3ac:	0800e73a 	.word	0x0800e73a

0800d3b0 <__pow5mult>:
 800d3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b4:	4615      	mov	r5, r2
 800d3b6:	f012 0203 	ands.w	r2, r2, #3
 800d3ba:	4606      	mov	r6, r0
 800d3bc:	460f      	mov	r7, r1
 800d3be:	d007      	beq.n	800d3d0 <__pow5mult+0x20>
 800d3c0:	4c25      	ldr	r4, [pc, #148]	; (800d458 <__pow5mult+0xa8>)
 800d3c2:	3a01      	subs	r2, #1
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3ca:	f7ff fe53 	bl	800d074 <__multadd>
 800d3ce:	4607      	mov	r7, r0
 800d3d0:	10ad      	asrs	r5, r5, #2
 800d3d2:	d03d      	beq.n	800d450 <__pow5mult+0xa0>
 800d3d4:	69f4      	ldr	r4, [r6, #28]
 800d3d6:	b97c      	cbnz	r4, 800d3f8 <__pow5mult+0x48>
 800d3d8:	2010      	movs	r0, #16
 800d3da:	f7fc fe7b 	bl	800a0d4 <malloc>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	61f0      	str	r0, [r6, #28]
 800d3e2:	b928      	cbnz	r0, 800d3f0 <__pow5mult+0x40>
 800d3e4:	4b1d      	ldr	r3, [pc, #116]	; (800d45c <__pow5mult+0xac>)
 800d3e6:	481e      	ldr	r0, [pc, #120]	; (800d460 <__pow5mult+0xb0>)
 800d3e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d3ec:	f000 fcc2 	bl	800dd74 <__assert_func>
 800d3f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3f4:	6004      	str	r4, [r0, #0]
 800d3f6:	60c4      	str	r4, [r0, #12]
 800d3f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d3fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d400:	b94c      	cbnz	r4, 800d416 <__pow5mult+0x66>
 800d402:	f240 2171 	movw	r1, #625	; 0x271
 800d406:	4630      	mov	r0, r6
 800d408:	f7ff ff12 	bl	800d230 <__i2b>
 800d40c:	2300      	movs	r3, #0
 800d40e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d412:	4604      	mov	r4, r0
 800d414:	6003      	str	r3, [r0, #0]
 800d416:	f04f 0900 	mov.w	r9, #0
 800d41a:	07eb      	lsls	r3, r5, #31
 800d41c:	d50a      	bpl.n	800d434 <__pow5mult+0x84>
 800d41e:	4639      	mov	r1, r7
 800d420:	4622      	mov	r2, r4
 800d422:	4630      	mov	r0, r6
 800d424:	f7ff ff1a 	bl	800d25c <__multiply>
 800d428:	4639      	mov	r1, r7
 800d42a:	4680      	mov	r8, r0
 800d42c:	4630      	mov	r0, r6
 800d42e:	f7ff fdff 	bl	800d030 <_Bfree>
 800d432:	4647      	mov	r7, r8
 800d434:	106d      	asrs	r5, r5, #1
 800d436:	d00b      	beq.n	800d450 <__pow5mult+0xa0>
 800d438:	6820      	ldr	r0, [r4, #0]
 800d43a:	b938      	cbnz	r0, 800d44c <__pow5mult+0x9c>
 800d43c:	4622      	mov	r2, r4
 800d43e:	4621      	mov	r1, r4
 800d440:	4630      	mov	r0, r6
 800d442:	f7ff ff0b 	bl	800d25c <__multiply>
 800d446:	6020      	str	r0, [r4, #0]
 800d448:	f8c0 9000 	str.w	r9, [r0]
 800d44c:	4604      	mov	r4, r0
 800d44e:	e7e4      	b.n	800d41a <__pow5mult+0x6a>
 800d450:	4638      	mov	r0, r7
 800d452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d456:	bf00      	nop
 800d458:	0800e888 	.word	0x0800e888
 800d45c:	0800e65a 	.word	0x0800e65a
 800d460:	0800e73a 	.word	0x0800e73a

0800d464 <__lshift>:
 800d464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d468:	460c      	mov	r4, r1
 800d46a:	6849      	ldr	r1, [r1, #4]
 800d46c:	6923      	ldr	r3, [r4, #16]
 800d46e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d472:	68a3      	ldr	r3, [r4, #8]
 800d474:	4607      	mov	r7, r0
 800d476:	4691      	mov	r9, r2
 800d478:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d47c:	f108 0601 	add.w	r6, r8, #1
 800d480:	42b3      	cmp	r3, r6
 800d482:	db0b      	blt.n	800d49c <__lshift+0x38>
 800d484:	4638      	mov	r0, r7
 800d486:	f7ff fd93 	bl	800cfb0 <_Balloc>
 800d48a:	4605      	mov	r5, r0
 800d48c:	b948      	cbnz	r0, 800d4a2 <__lshift+0x3e>
 800d48e:	4602      	mov	r2, r0
 800d490:	4b28      	ldr	r3, [pc, #160]	; (800d534 <__lshift+0xd0>)
 800d492:	4829      	ldr	r0, [pc, #164]	; (800d538 <__lshift+0xd4>)
 800d494:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d498:	f000 fc6c 	bl	800dd74 <__assert_func>
 800d49c:	3101      	adds	r1, #1
 800d49e:	005b      	lsls	r3, r3, #1
 800d4a0:	e7ee      	b.n	800d480 <__lshift+0x1c>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	f100 0114 	add.w	r1, r0, #20
 800d4a8:	f100 0210 	add.w	r2, r0, #16
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	4553      	cmp	r3, sl
 800d4b0:	db33      	blt.n	800d51a <__lshift+0xb6>
 800d4b2:	6920      	ldr	r0, [r4, #16]
 800d4b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d4b8:	f104 0314 	add.w	r3, r4, #20
 800d4bc:	f019 091f 	ands.w	r9, r9, #31
 800d4c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d4c8:	d02b      	beq.n	800d522 <__lshift+0xbe>
 800d4ca:	f1c9 0e20 	rsb	lr, r9, #32
 800d4ce:	468a      	mov	sl, r1
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	6818      	ldr	r0, [r3, #0]
 800d4d4:	fa00 f009 	lsl.w	r0, r0, r9
 800d4d8:	4310      	orrs	r0, r2
 800d4da:	f84a 0b04 	str.w	r0, [sl], #4
 800d4de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4e2:	459c      	cmp	ip, r3
 800d4e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d4e8:	d8f3      	bhi.n	800d4d2 <__lshift+0x6e>
 800d4ea:	ebac 0304 	sub.w	r3, ip, r4
 800d4ee:	3b15      	subs	r3, #21
 800d4f0:	f023 0303 	bic.w	r3, r3, #3
 800d4f4:	3304      	adds	r3, #4
 800d4f6:	f104 0015 	add.w	r0, r4, #21
 800d4fa:	4584      	cmp	ip, r0
 800d4fc:	bf38      	it	cc
 800d4fe:	2304      	movcc	r3, #4
 800d500:	50ca      	str	r2, [r1, r3]
 800d502:	b10a      	cbz	r2, 800d508 <__lshift+0xa4>
 800d504:	f108 0602 	add.w	r6, r8, #2
 800d508:	3e01      	subs	r6, #1
 800d50a:	4638      	mov	r0, r7
 800d50c:	612e      	str	r6, [r5, #16]
 800d50e:	4621      	mov	r1, r4
 800d510:	f7ff fd8e 	bl	800d030 <_Bfree>
 800d514:	4628      	mov	r0, r5
 800d516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d51a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d51e:	3301      	adds	r3, #1
 800d520:	e7c5      	b.n	800d4ae <__lshift+0x4a>
 800d522:	3904      	subs	r1, #4
 800d524:	f853 2b04 	ldr.w	r2, [r3], #4
 800d528:	f841 2f04 	str.w	r2, [r1, #4]!
 800d52c:	459c      	cmp	ip, r3
 800d52e:	d8f9      	bhi.n	800d524 <__lshift+0xc0>
 800d530:	e7ea      	b.n	800d508 <__lshift+0xa4>
 800d532:	bf00      	nop
 800d534:	0800e6c9 	.word	0x0800e6c9
 800d538:	0800e73a 	.word	0x0800e73a

0800d53c <__mcmp>:
 800d53c:	b530      	push	{r4, r5, lr}
 800d53e:	6902      	ldr	r2, [r0, #16]
 800d540:	690c      	ldr	r4, [r1, #16]
 800d542:	1b12      	subs	r2, r2, r4
 800d544:	d10e      	bne.n	800d564 <__mcmp+0x28>
 800d546:	f100 0314 	add.w	r3, r0, #20
 800d54a:	3114      	adds	r1, #20
 800d54c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d550:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d554:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d558:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d55c:	42a5      	cmp	r5, r4
 800d55e:	d003      	beq.n	800d568 <__mcmp+0x2c>
 800d560:	d305      	bcc.n	800d56e <__mcmp+0x32>
 800d562:	2201      	movs	r2, #1
 800d564:	4610      	mov	r0, r2
 800d566:	bd30      	pop	{r4, r5, pc}
 800d568:	4283      	cmp	r3, r0
 800d56a:	d3f3      	bcc.n	800d554 <__mcmp+0x18>
 800d56c:	e7fa      	b.n	800d564 <__mcmp+0x28>
 800d56e:	f04f 32ff 	mov.w	r2, #4294967295
 800d572:	e7f7      	b.n	800d564 <__mcmp+0x28>

0800d574 <__mdiff>:
 800d574:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d578:	460c      	mov	r4, r1
 800d57a:	4606      	mov	r6, r0
 800d57c:	4611      	mov	r1, r2
 800d57e:	4620      	mov	r0, r4
 800d580:	4690      	mov	r8, r2
 800d582:	f7ff ffdb 	bl	800d53c <__mcmp>
 800d586:	1e05      	subs	r5, r0, #0
 800d588:	d110      	bne.n	800d5ac <__mdiff+0x38>
 800d58a:	4629      	mov	r1, r5
 800d58c:	4630      	mov	r0, r6
 800d58e:	f7ff fd0f 	bl	800cfb0 <_Balloc>
 800d592:	b930      	cbnz	r0, 800d5a2 <__mdiff+0x2e>
 800d594:	4b3a      	ldr	r3, [pc, #232]	; (800d680 <__mdiff+0x10c>)
 800d596:	4602      	mov	r2, r0
 800d598:	f240 2137 	movw	r1, #567	; 0x237
 800d59c:	4839      	ldr	r0, [pc, #228]	; (800d684 <__mdiff+0x110>)
 800d59e:	f000 fbe9 	bl	800dd74 <__assert_func>
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d5a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ac:	bfa4      	itt	ge
 800d5ae:	4643      	movge	r3, r8
 800d5b0:	46a0      	movge	r8, r4
 800d5b2:	4630      	mov	r0, r6
 800d5b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d5b8:	bfa6      	itte	ge
 800d5ba:	461c      	movge	r4, r3
 800d5bc:	2500      	movge	r5, #0
 800d5be:	2501      	movlt	r5, #1
 800d5c0:	f7ff fcf6 	bl	800cfb0 <_Balloc>
 800d5c4:	b920      	cbnz	r0, 800d5d0 <__mdiff+0x5c>
 800d5c6:	4b2e      	ldr	r3, [pc, #184]	; (800d680 <__mdiff+0x10c>)
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	f240 2145 	movw	r1, #581	; 0x245
 800d5ce:	e7e5      	b.n	800d59c <__mdiff+0x28>
 800d5d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d5d4:	6926      	ldr	r6, [r4, #16]
 800d5d6:	60c5      	str	r5, [r0, #12]
 800d5d8:	f104 0914 	add.w	r9, r4, #20
 800d5dc:	f108 0514 	add.w	r5, r8, #20
 800d5e0:	f100 0e14 	add.w	lr, r0, #20
 800d5e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d5e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d5ec:	f108 0210 	add.w	r2, r8, #16
 800d5f0:	46f2      	mov	sl, lr
 800d5f2:	2100      	movs	r1, #0
 800d5f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d5f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d5fc:	fa11 f88b 	uxtah	r8, r1, fp
 800d600:	b299      	uxth	r1, r3
 800d602:	0c1b      	lsrs	r3, r3, #16
 800d604:	eba8 0801 	sub.w	r8, r8, r1
 800d608:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d60c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d610:	fa1f f888 	uxth.w	r8, r8
 800d614:	1419      	asrs	r1, r3, #16
 800d616:	454e      	cmp	r6, r9
 800d618:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d61c:	f84a 3b04 	str.w	r3, [sl], #4
 800d620:	d8e8      	bhi.n	800d5f4 <__mdiff+0x80>
 800d622:	1b33      	subs	r3, r6, r4
 800d624:	3b15      	subs	r3, #21
 800d626:	f023 0303 	bic.w	r3, r3, #3
 800d62a:	3304      	adds	r3, #4
 800d62c:	3415      	adds	r4, #21
 800d62e:	42a6      	cmp	r6, r4
 800d630:	bf38      	it	cc
 800d632:	2304      	movcc	r3, #4
 800d634:	441d      	add	r5, r3
 800d636:	4473      	add	r3, lr
 800d638:	469e      	mov	lr, r3
 800d63a:	462e      	mov	r6, r5
 800d63c:	4566      	cmp	r6, ip
 800d63e:	d30e      	bcc.n	800d65e <__mdiff+0xea>
 800d640:	f10c 0203 	add.w	r2, ip, #3
 800d644:	1b52      	subs	r2, r2, r5
 800d646:	f022 0203 	bic.w	r2, r2, #3
 800d64a:	3d03      	subs	r5, #3
 800d64c:	45ac      	cmp	ip, r5
 800d64e:	bf38      	it	cc
 800d650:	2200      	movcc	r2, #0
 800d652:	4413      	add	r3, r2
 800d654:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d658:	b17a      	cbz	r2, 800d67a <__mdiff+0x106>
 800d65a:	6107      	str	r7, [r0, #16]
 800d65c:	e7a4      	b.n	800d5a8 <__mdiff+0x34>
 800d65e:	f856 8b04 	ldr.w	r8, [r6], #4
 800d662:	fa11 f288 	uxtah	r2, r1, r8
 800d666:	1414      	asrs	r4, r2, #16
 800d668:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d66c:	b292      	uxth	r2, r2
 800d66e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d672:	f84e 2b04 	str.w	r2, [lr], #4
 800d676:	1421      	asrs	r1, r4, #16
 800d678:	e7e0      	b.n	800d63c <__mdiff+0xc8>
 800d67a:	3f01      	subs	r7, #1
 800d67c:	e7ea      	b.n	800d654 <__mdiff+0xe0>
 800d67e:	bf00      	nop
 800d680:	0800e6c9 	.word	0x0800e6c9
 800d684:	0800e73a 	.word	0x0800e73a

0800d688 <__ulp>:
 800d688:	b082      	sub	sp, #8
 800d68a:	ed8d 0b00 	vstr	d0, [sp]
 800d68e:	9a01      	ldr	r2, [sp, #4]
 800d690:	4b0f      	ldr	r3, [pc, #60]	; (800d6d0 <__ulp+0x48>)
 800d692:	4013      	ands	r3, r2
 800d694:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d698:	2b00      	cmp	r3, #0
 800d69a:	dc08      	bgt.n	800d6ae <__ulp+0x26>
 800d69c:	425b      	negs	r3, r3
 800d69e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d6a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d6a6:	da04      	bge.n	800d6b2 <__ulp+0x2a>
 800d6a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d6ac:	4113      	asrs	r3, r2
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	e008      	b.n	800d6c4 <__ulp+0x3c>
 800d6b2:	f1a2 0314 	sub.w	r3, r2, #20
 800d6b6:	2b1e      	cmp	r3, #30
 800d6b8:	bfda      	itte	le
 800d6ba:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d6be:	40da      	lsrle	r2, r3
 800d6c0:	2201      	movgt	r2, #1
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	4619      	mov	r1, r3
 800d6c6:	4610      	mov	r0, r2
 800d6c8:	ec41 0b10 	vmov	d0, r0, r1
 800d6cc:	b002      	add	sp, #8
 800d6ce:	4770      	bx	lr
 800d6d0:	7ff00000 	.word	0x7ff00000

0800d6d4 <__b2d>:
 800d6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6d8:	6906      	ldr	r6, [r0, #16]
 800d6da:	f100 0814 	add.w	r8, r0, #20
 800d6de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d6e2:	1f37      	subs	r7, r6, #4
 800d6e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d6e8:	4610      	mov	r0, r2
 800d6ea:	f7ff fd53 	bl	800d194 <__hi0bits>
 800d6ee:	f1c0 0320 	rsb	r3, r0, #32
 800d6f2:	280a      	cmp	r0, #10
 800d6f4:	600b      	str	r3, [r1, #0]
 800d6f6:	491b      	ldr	r1, [pc, #108]	; (800d764 <__b2d+0x90>)
 800d6f8:	dc15      	bgt.n	800d726 <__b2d+0x52>
 800d6fa:	f1c0 0c0b 	rsb	ip, r0, #11
 800d6fe:	fa22 f30c 	lsr.w	r3, r2, ip
 800d702:	45b8      	cmp	r8, r7
 800d704:	ea43 0501 	orr.w	r5, r3, r1
 800d708:	bf34      	ite	cc
 800d70a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d70e:	2300      	movcs	r3, #0
 800d710:	3015      	adds	r0, #21
 800d712:	fa02 f000 	lsl.w	r0, r2, r0
 800d716:	fa23 f30c 	lsr.w	r3, r3, ip
 800d71a:	4303      	orrs	r3, r0
 800d71c:	461c      	mov	r4, r3
 800d71e:	ec45 4b10 	vmov	d0, r4, r5
 800d722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d726:	45b8      	cmp	r8, r7
 800d728:	bf3a      	itte	cc
 800d72a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d72e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d732:	2300      	movcs	r3, #0
 800d734:	380b      	subs	r0, #11
 800d736:	d012      	beq.n	800d75e <__b2d+0x8a>
 800d738:	f1c0 0120 	rsb	r1, r0, #32
 800d73c:	fa23 f401 	lsr.w	r4, r3, r1
 800d740:	4082      	lsls	r2, r0
 800d742:	4322      	orrs	r2, r4
 800d744:	4547      	cmp	r7, r8
 800d746:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800d74a:	bf8c      	ite	hi
 800d74c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d750:	2200      	movls	r2, #0
 800d752:	4083      	lsls	r3, r0
 800d754:	40ca      	lsrs	r2, r1
 800d756:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d75a:	4313      	orrs	r3, r2
 800d75c:	e7de      	b.n	800d71c <__b2d+0x48>
 800d75e:	ea42 0501 	orr.w	r5, r2, r1
 800d762:	e7db      	b.n	800d71c <__b2d+0x48>
 800d764:	3ff00000 	.word	0x3ff00000

0800d768 <__d2b>:
 800d768:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d76c:	460f      	mov	r7, r1
 800d76e:	2101      	movs	r1, #1
 800d770:	ec59 8b10 	vmov	r8, r9, d0
 800d774:	4616      	mov	r6, r2
 800d776:	f7ff fc1b 	bl	800cfb0 <_Balloc>
 800d77a:	4604      	mov	r4, r0
 800d77c:	b930      	cbnz	r0, 800d78c <__d2b+0x24>
 800d77e:	4602      	mov	r2, r0
 800d780:	4b24      	ldr	r3, [pc, #144]	; (800d814 <__d2b+0xac>)
 800d782:	4825      	ldr	r0, [pc, #148]	; (800d818 <__d2b+0xb0>)
 800d784:	f240 310f 	movw	r1, #783	; 0x30f
 800d788:	f000 faf4 	bl	800dd74 <__assert_func>
 800d78c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d790:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d794:	bb2d      	cbnz	r5, 800d7e2 <__d2b+0x7a>
 800d796:	9301      	str	r3, [sp, #4]
 800d798:	f1b8 0300 	subs.w	r3, r8, #0
 800d79c:	d026      	beq.n	800d7ec <__d2b+0x84>
 800d79e:	4668      	mov	r0, sp
 800d7a0:	9300      	str	r3, [sp, #0]
 800d7a2:	f7ff fd17 	bl	800d1d4 <__lo0bits>
 800d7a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d7aa:	b1e8      	cbz	r0, 800d7e8 <__d2b+0x80>
 800d7ac:	f1c0 0320 	rsb	r3, r0, #32
 800d7b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d7b4:	430b      	orrs	r3, r1
 800d7b6:	40c2      	lsrs	r2, r0
 800d7b8:	6163      	str	r3, [r4, #20]
 800d7ba:	9201      	str	r2, [sp, #4]
 800d7bc:	9b01      	ldr	r3, [sp, #4]
 800d7be:	61a3      	str	r3, [r4, #24]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	bf14      	ite	ne
 800d7c4:	2202      	movne	r2, #2
 800d7c6:	2201      	moveq	r2, #1
 800d7c8:	6122      	str	r2, [r4, #16]
 800d7ca:	b1bd      	cbz	r5, 800d7fc <__d2b+0x94>
 800d7cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d7d0:	4405      	add	r5, r0
 800d7d2:	603d      	str	r5, [r7, #0]
 800d7d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d7d8:	6030      	str	r0, [r6, #0]
 800d7da:	4620      	mov	r0, r4
 800d7dc:	b003      	add	sp, #12
 800d7de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7e6:	e7d6      	b.n	800d796 <__d2b+0x2e>
 800d7e8:	6161      	str	r1, [r4, #20]
 800d7ea:	e7e7      	b.n	800d7bc <__d2b+0x54>
 800d7ec:	a801      	add	r0, sp, #4
 800d7ee:	f7ff fcf1 	bl	800d1d4 <__lo0bits>
 800d7f2:	9b01      	ldr	r3, [sp, #4]
 800d7f4:	6163      	str	r3, [r4, #20]
 800d7f6:	3020      	adds	r0, #32
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	e7e5      	b.n	800d7c8 <__d2b+0x60>
 800d7fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d800:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d804:	6038      	str	r0, [r7, #0]
 800d806:	6918      	ldr	r0, [r3, #16]
 800d808:	f7ff fcc4 	bl	800d194 <__hi0bits>
 800d80c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d810:	e7e2      	b.n	800d7d8 <__d2b+0x70>
 800d812:	bf00      	nop
 800d814:	0800e6c9 	.word	0x0800e6c9
 800d818:	0800e73a 	.word	0x0800e73a

0800d81c <__ratio>:
 800d81c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d820:	4688      	mov	r8, r1
 800d822:	4669      	mov	r1, sp
 800d824:	4681      	mov	r9, r0
 800d826:	f7ff ff55 	bl	800d6d4 <__b2d>
 800d82a:	a901      	add	r1, sp, #4
 800d82c:	4640      	mov	r0, r8
 800d82e:	ec55 4b10 	vmov	r4, r5, d0
 800d832:	f7ff ff4f 	bl	800d6d4 <__b2d>
 800d836:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d83a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d83e:	eba3 0c02 	sub.w	ip, r3, r2
 800d842:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d846:	1a9b      	subs	r3, r3, r2
 800d848:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d84c:	ec51 0b10 	vmov	r0, r1, d0
 800d850:	2b00      	cmp	r3, #0
 800d852:	bfd6      	itet	le
 800d854:	460a      	movle	r2, r1
 800d856:	462a      	movgt	r2, r5
 800d858:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d85c:	468b      	mov	fp, r1
 800d85e:	462f      	mov	r7, r5
 800d860:	bfd4      	ite	le
 800d862:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d866:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d86a:	4620      	mov	r0, r4
 800d86c:	ee10 2a10 	vmov	r2, s0
 800d870:	465b      	mov	r3, fp
 800d872:	4639      	mov	r1, r7
 800d874:	f7f2 fffa 	bl	800086c <__aeabi_ddiv>
 800d878:	ec41 0b10 	vmov	d0, r0, r1
 800d87c:	b003      	add	sp, #12
 800d87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d882 <__copybits>:
 800d882:	3901      	subs	r1, #1
 800d884:	b570      	push	{r4, r5, r6, lr}
 800d886:	1149      	asrs	r1, r1, #5
 800d888:	6914      	ldr	r4, [r2, #16]
 800d88a:	3101      	adds	r1, #1
 800d88c:	f102 0314 	add.w	r3, r2, #20
 800d890:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d894:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d898:	1f05      	subs	r5, r0, #4
 800d89a:	42a3      	cmp	r3, r4
 800d89c:	d30c      	bcc.n	800d8b8 <__copybits+0x36>
 800d89e:	1aa3      	subs	r3, r4, r2
 800d8a0:	3b11      	subs	r3, #17
 800d8a2:	f023 0303 	bic.w	r3, r3, #3
 800d8a6:	3211      	adds	r2, #17
 800d8a8:	42a2      	cmp	r2, r4
 800d8aa:	bf88      	it	hi
 800d8ac:	2300      	movhi	r3, #0
 800d8ae:	4418      	add	r0, r3
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	4288      	cmp	r0, r1
 800d8b4:	d305      	bcc.n	800d8c2 <__copybits+0x40>
 800d8b6:	bd70      	pop	{r4, r5, r6, pc}
 800d8b8:	f853 6b04 	ldr.w	r6, [r3], #4
 800d8bc:	f845 6f04 	str.w	r6, [r5, #4]!
 800d8c0:	e7eb      	b.n	800d89a <__copybits+0x18>
 800d8c2:	f840 3b04 	str.w	r3, [r0], #4
 800d8c6:	e7f4      	b.n	800d8b2 <__copybits+0x30>

0800d8c8 <__any_on>:
 800d8c8:	f100 0214 	add.w	r2, r0, #20
 800d8cc:	6900      	ldr	r0, [r0, #16]
 800d8ce:	114b      	asrs	r3, r1, #5
 800d8d0:	4298      	cmp	r0, r3
 800d8d2:	b510      	push	{r4, lr}
 800d8d4:	db11      	blt.n	800d8fa <__any_on+0x32>
 800d8d6:	dd0a      	ble.n	800d8ee <__any_on+0x26>
 800d8d8:	f011 011f 	ands.w	r1, r1, #31
 800d8dc:	d007      	beq.n	800d8ee <__any_on+0x26>
 800d8de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d8e2:	fa24 f001 	lsr.w	r0, r4, r1
 800d8e6:	fa00 f101 	lsl.w	r1, r0, r1
 800d8ea:	428c      	cmp	r4, r1
 800d8ec:	d10b      	bne.n	800d906 <__any_on+0x3e>
 800d8ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8f2:	4293      	cmp	r3, r2
 800d8f4:	d803      	bhi.n	800d8fe <__any_on+0x36>
 800d8f6:	2000      	movs	r0, #0
 800d8f8:	bd10      	pop	{r4, pc}
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	e7f7      	b.n	800d8ee <__any_on+0x26>
 800d8fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d902:	2900      	cmp	r1, #0
 800d904:	d0f5      	beq.n	800d8f2 <__any_on+0x2a>
 800d906:	2001      	movs	r0, #1
 800d908:	e7f6      	b.n	800d8f8 <__any_on+0x30>

0800d90a <_malloc_usable_size_r>:
 800d90a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d90e:	1f18      	subs	r0, r3, #4
 800d910:	2b00      	cmp	r3, #0
 800d912:	bfbc      	itt	lt
 800d914:	580b      	ldrlt	r3, [r1, r0]
 800d916:	18c0      	addlt	r0, r0, r3
 800d918:	4770      	bx	lr

0800d91a <__ascii_wctomb>:
 800d91a:	b149      	cbz	r1, 800d930 <__ascii_wctomb+0x16>
 800d91c:	2aff      	cmp	r2, #255	; 0xff
 800d91e:	bf85      	ittet	hi
 800d920:	238a      	movhi	r3, #138	; 0x8a
 800d922:	6003      	strhi	r3, [r0, #0]
 800d924:	700a      	strbls	r2, [r1, #0]
 800d926:	f04f 30ff 	movhi.w	r0, #4294967295
 800d92a:	bf98      	it	ls
 800d92c:	2001      	movls	r0, #1
 800d92e:	4770      	bx	lr
 800d930:	4608      	mov	r0, r1
 800d932:	4770      	bx	lr

0800d934 <__ssputs_r>:
 800d934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d938:	688e      	ldr	r6, [r1, #8]
 800d93a:	461f      	mov	r7, r3
 800d93c:	42be      	cmp	r6, r7
 800d93e:	680b      	ldr	r3, [r1, #0]
 800d940:	4682      	mov	sl, r0
 800d942:	460c      	mov	r4, r1
 800d944:	4690      	mov	r8, r2
 800d946:	d82c      	bhi.n	800d9a2 <__ssputs_r+0x6e>
 800d948:	898a      	ldrh	r2, [r1, #12]
 800d94a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d94e:	d026      	beq.n	800d99e <__ssputs_r+0x6a>
 800d950:	6965      	ldr	r5, [r4, #20]
 800d952:	6909      	ldr	r1, [r1, #16]
 800d954:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d958:	eba3 0901 	sub.w	r9, r3, r1
 800d95c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d960:	1c7b      	adds	r3, r7, #1
 800d962:	444b      	add	r3, r9
 800d964:	106d      	asrs	r5, r5, #1
 800d966:	429d      	cmp	r5, r3
 800d968:	bf38      	it	cc
 800d96a:	461d      	movcc	r5, r3
 800d96c:	0553      	lsls	r3, r2, #21
 800d96e:	d527      	bpl.n	800d9c0 <__ssputs_r+0x8c>
 800d970:	4629      	mov	r1, r5
 800d972:	f7fc fbdf 	bl	800a134 <_malloc_r>
 800d976:	4606      	mov	r6, r0
 800d978:	b360      	cbz	r0, 800d9d4 <__ssputs_r+0xa0>
 800d97a:	6921      	ldr	r1, [r4, #16]
 800d97c:	464a      	mov	r2, r9
 800d97e:	f7fe f8d1 	bl	800bb24 <memcpy>
 800d982:	89a3      	ldrh	r3, [r4, #12]
 800d984:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d98c:	81a3      	strh	r3, [r4, #12]
 800d98e:	6126      	str	r6, [r4, #16]
 800d990:	6165      	str	r5, [r4, #20]
 800d992:	444e      	add	r6, r9
 800d994:	eba5 0509 	sub.w	r5, r5, r9
 800d998:	6026      	str	r6, [r4, #0]
 800d99a:	60a5      	str	r5, [r4, #8]
 800d99c:	463e      	mov	r6, r7
 800d99e:	42be      	cmp	r6, r7
 800d9a0:	d900      	bls.n	800d9a4 <__ssputs_r+0x70>
 800d9a2:	463e      	mov	r6, r7
 800d9a4:	6820      	ldr	r0, [r4, #0]
 800d9a6:	4632      	mov	r2, r6
 800d9a8:	4641      	mov	r1, r8
 800d9aa:	f000 f9c9 	bl	800dd40 <memmove>
 800d9ae:	68a3      	ldr	r3, [r4, #8]
 800d9b0:	1b9b      	subs	r3, r3, r6
 800d9b2:	60a3      	str	r3, [r4, #8]
 800d9b4:	6823      	ldr	r3, [r4, #0]
 800d9b6:	4433      	add	r3, r6
 800d9b8:	6023      	str	r3, [r4, #0]
 800d9ba:	2000      	movs	r0, #0
 800d9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9c0:	462a      	mov	r2, r5
 800d9c2:	f7fc fc4b 	bl	800a25c <_realloc_r>
 800d9c6:	4606      	mov	r6, r0
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	d1e0      	bne.n	800d98e <__ssputs_r+0x5a>
 800d9cc:	6921      	ldr	r1, [r4, #16]
 800d9ce:	4650      	mov	r0, sl
 800d9d0:	f7fe ff38 	bl	800c844 <_free_r>
 800d9d4:	230c      	movs	r3, #12
 800d9d6:	f8ca 3000 	str.w	r3, [sl]
 800d9da:	89a3      	ldrh	r3, [r4, #12]
 800d9dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9e0:	81a3      	strh	r3, [r4, #12]
 800d9e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d9e6:	e7e9      	b.n	800d9bc <__ssputs_r+0x88>

0800d9e8 <_svfiprintf_r>:
 800d9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ec:	4698      	mov	r8, r3
 800d9ee:	898b      	ldrh	r3, [r1, #12]
 800d9f0:	061b      	lsls	r3, r3, #24
 800d9f2:	b09d      	sub	sp, #116	; 0x74
 800d9f4:	4607      	mov	r7, r0
 800d9f6:	460d      	mov	r5, r1
 800d9f8:	4614      	mov	r4, r2
 800d9fa:	d50e      	bpl.n	800da1a <_svfiprintf_r+0x32>
 800d9fc:	690b      	ldr	r3, [r1, #16]
 800d9fe:	b963      	cbnz	r3, 800da1a <_svfiprintf_r+0x32>
 800da00:	2140      	movs	r1, #64	; 0x40
 800da02:	f7fc fb97 	bl	800a134 <_malloc_r>
 800da06:	6028      	str	r0, [r5, #0]
 800da08:	6128      	str	r0, [r5, #16]
 800da0a:	b920      	cbnz	r0, 800da16 <_svfiprintf_r+0x2e>
 800da0c:	230c      	movs	r3, #12
 800da0e:	603b      	str	r3, [r7, #0]
 800da10:	f04f 30ff 	mov.w	r0, #4294967295
 800da14:	e0d0      	b.n	800dbb8 <_svfiprintf_r+0x1d0>
 800da16:	2340      	movs	r3, #64	; 0x40
 800da18:	616b      	str	r3, [r5, #20]
 800da1a:	2300      	movs	r3, #0
 800da1c:	9309      	str	r3, [sp, #36]	; 0x24
 800da1e:	2320      	movs	r3, #32
 800da20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da24:	f8cd 800c 	str.w	r8, [sp, #12]
 800da28:	2330      	movs	r3, #48	; 0x30
 800da2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dbd0 <_svfiprintf_r+0x1e8>
 800da2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da32:	f04f 0901 	mov.w	r9, #1
 800da36:	4623      	mov	r3, r4
 800da38:	469a      	mov	sl, r3
 800da3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da3e:	b10a      	cbz	r2, 800da44 <_svfiprintf_r+0x5c>
 800da40:	2a25      	cmp	r2, #37	; 0x25
 800da42:	d1f9      	bne.n	800da38 <_svfiprintf_r+0x50>
 800da44:	ebba 0b04 	subs.w	fp, sl, r4
 800da48:	d00b      	beq.n	800da62 <_svfiprintf_r+0x7a>
 800da4a:	465b      	mov	r3, fp
 800da4c:	4622      	mov	r2, r4
 800da4e:	4629      	mov	r1, r5
 800da50:	4638      	mov	r0, r7
 800da52:	f7ff ff6f 	bl	800d934 <__ssputs_r>
 800da56:	3001      	adds	r0, #1
 800da58:	f000 80a9 	beq.w	800dbae <_svfiprintf_r+0x1c6>
 800da5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da5e:	445a      	add	r2, fp
 800da60:	9209      	str	r2, [sp, #36]	; 0x24
 800da62:	f89a 3000 	ldrb.w	r3, [sl]
 800da66:	2b00      	cmp	r3, #0
 800da68:	f000 80a1 	beq.w	800dbae <_svfiprintf_r+0x1c6>
 800da6c:	2300      	movs	r3, #0
 800da6e:	f04f 32ff 	mov.w	r2, #4294967295
 800da72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da76:	f10a 0a01 	add.w	sl, sl, #1
 800da7a:	9304      	str	r3, [sp, #16]
 800da7c:	9307      	str	r3, [sp, #28]
 800da7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da82:	931a      	str	r3, [sp, #104]	; 0x68
 800da84:	4654      	mov	r4, sl
 800da86:	2205      	movs	r2, #5
 800da88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da8c:	4850      	ldr	r0, [pc, #320]	; (800dbd0 <_svfiprintf_r+0x1e8>)
 800da8e:	f7f2 fbaf 	bl	80001f0 <memchr>
 800da92:	9a04      	ldr	r2, [sp, #16]
 800da94:	b9d8      	cbnz	r0, 800dace <_svfiprintf_r+0xe6>
 800da96:	06d0      	lsls	r0, r2, #27
 800da98:	bf44      	itt	mi
 800da9a:	2320      	movmi	r3, #32
 800da9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800daa0:	0711      	lsls	r1, r2, #28
 800daa2:	bf44      	itt	mi
 800daa4:	232b      	movmi	r3, #43	; 0x2b
 800daa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800daaa:	f89a 3000 	ldrb.w	r3, [sl]
 800daae:	2b2a      	cmp	r3, #42	; 0x2a
 800dab0:	d015      	beq.n	800dade <_svfiprintf_r+0xf6>
 800dab2:	9a07      	ldr	r2, [sp, #28]
 800dab4:	4654      	mov	r4, sl
 800dab6:	2000      	movs	r0, #0
 800dab8:	f04f 0c0a 	mov.w	ip, #10
 800dabc:	4621      	mov	r1, r4
 800dabe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dac2:	3b30      	subs	r3, #48	; 0x30
 800dac4:	2b09      	cmp	r3, #9
 800dac6:	d94d      	bls.n	800db64 <_svfiprintf_r+0x17c>
 800dac8:	b1b0      	cbz	r0, 800daf8 <_svfiprintf_r+0x110>
 800daca:	9207      	str	r2, [sp, #28]
 800dacc:	e014      	b.n	800daf8 <_svfiprintf_r+0x110>
 800dace:	eba0 0308 	sub.w	r3, r0, r8
 800dad2:	fa09 f303 	lsl.w	r3, r9, r3
 800dad6:	4313      	orrs	r3, r2
 800dad8:	9304      	str	r3, [sp, #16]
 800dada:	46a2      	mov	sl, r4
 800dadc:	e7d2      	b.n	800da84 <_svfiprintf_r+0x9c>
 800dade:	9b03      	ldr	r3, [sp, #12]
 800dae0:	1d19      	adds	r1, r3, #4
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	9103      	str	r1, [sp, #12]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	bfbb      	ittet	lt
 800daea:	425b      	neglt	r3, r3
 800daec:	f042 0202 	orrlt.w	r2, r2, #2
 800daf0:	9307      	strge	r3, [sp, #28]
 800daf2:	9307      	strlt	r3, [sp, #28]
 800daf4:	bfb8      	it	lt
 800daf6:	9204      	strlt	r2, [sp, #16]
 800daf8:	7823      	ldrb	r3, [r4, #0]
 800dafa:	2b2e      	cmp	r3, #46	; 0x2e
 800dafc:	d10c      	bne.n	800db18 <_svfiprintf_r+0x130>
 800dafe:	7863      	ldrb	r3, [r4, #1]
 800db00:	2b2a      	cmp	r3, #42	; 0x2a
 800db02:	d134      	bne.n	800db6e <_svfiprintf_r+0x186>
 800db04:	9b03      	ldr	r3, [sp, #12]
 800db06:	1d1a      	adds	r2, r3, #4
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	9203      	str	r2, [sp, #12]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	bfb8      	it	lt
 800db10:	f04f 33ff 	movlt.w	r3, #4294967295
 800db14:	3402      	adds	r4, #2
 800db16:	9305      	str	r3, [sp, #20]
 800db18:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dbe0 <_svfiprintf_r+0x1f8>
 800db1c:	7821      	ldrb	r1, [r4, #0]
 800db1e:	2203      	movs	r2, #3
 800db20:	4650      	mov	r0, sl
 800db22:	f7f2 fb65 	bl	80001f0 <memchr>
 800db26:	b138      	cbz	r0, 800db38 <_svfiprintf_r+0x150>
 800db28:	9b04      	ldr	r3, [sp, #16]
 800db2a:	eba0 000a 	sub.w	r0, r0, sl
 800db2e:	2240      	movs	r2, #64	; 0x40
 800db30:	4082      	lsls	r2, r0
 800db32:	4313      	orrs	r3, r2
 800db34:	3401      	adds	r4, #1
 800db36:	9304      	str	r3, [sp, #16]
 800db38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db3c:	4825      	ldr	r0, [pc, #148]	; (800dbd4 <_svfiprintf_r+0x1ec>)
 800db3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db42:	2206      	movs	r2, #6
 800db44:	f7f2 fb54 	bl	80001f0 <memchr>
 800db48:	2800      	cmp	r0, #0
 800db4a:	d038      	beq.n	800dbbe <_svfiprintf_r+0x1d6>
 800db4c:	4b22      	ldr	r3, [pc, #136]	; (800dbd8 <_svfiprintf_r+0x1f0>)
 800db4e:	bb1b      	cbnz	r3, 800db98 <_svfiprintf_r+0x1b0>
 800db50:	9b03      	ldr	r3, [sp, #12]
 800db52:	3307      	adds	r3, #7
 800db54:	f023 0307 	bic.w	r3, r3, #7
 800db58:	3308      	adds	r3, #8
 800db5a:	9303      	str	r3, [sp, #12]
 800db5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db5e:	4433      	add	r3, r6
 800db60:	9309      	str	r3, [sp, #36]	; 0x24
 800db62:	e768      	b.n	800da36 <_svfiprintf_r+0x4e>
 800db64:	fb0c 3202 	mla	r2, ip, r2, r3
 800db68:	460c      	mov	r4, r1
 800db6a:	2001      	movs	r0, #1
 800db6c:	e7a6      	b.n	800dabc <_svfiprintf_r+0xd4>
 800db6e:	2300      	movs	r3, #0
 800db70:	3401      	adds	r4, #1
 800db72:	9305      	str	r3, [sp, #20]
 800db74:	4619      	mov	r1, r3
 800db76:	f04f 0c0a 	mov.w	ip, #10
 800db7a:	4620      	mov	r0, r4
 800db7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db80:	3a30      	subs	r2, #48	; 0x30
 800db82:	2a09      	cmp	r2, #9
 800db84:	d903      	bls.n	800db8e <_svfiprintf_r+0x1a6>
 800db86:	2b00      	cmp	r3, #0
 800db88:	d0c6      	beq.n	800db18 <_svfiprintf_r+0x130>
 800db8a:	9105      	str	r1, [sp, #20]
 800db8c:	e7c4      	b.n	800db18 <_svfiprintf_r+0x130>
 800db8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800db92:	4604      	mov	r4, r0
 800db94:	2301      	movs	r3, #1
 800db96:	e7f0      	b.n	800db7a <_svfiprintf_r+0x192>
 800db98:	ab03      	add	r3, sp, #12
 800db9a:	9300      	str	r3, [sp, #0]
 800db9c:	462a      	mov	r2, r5
 800db9e:	4b0f      	ldr	r3, [pc, #60]	; (800dbdc <_svfiprintf_r+0x1f4>)
 800dba0:	a904      	add	r1, sp, #16
 800dba2:	4638      	mov	r0, r7
 800dba4:	f7fd fa44 	bl	800b030 <_printf_float>
 800dba8:	1c42      	adds	r2, r0, #1
 800dbaa:	4606      	mov	r6, r0
 800dbac:	d1d6      	bne.n	800db5c <_svfiprintf_r+0x174>
 800dbae:	89ab      	ldrh	r3, [r5, #12]
 800dbb0:	065b      	lsls	r3, r3, #25
 800dbb2:	f53f af2d 	bmi.w	800da10 <_svfiprintf_r+0x28>
 800dbb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbb8:	b01d      	add	sp, #116	; 0x74
 800dbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbbe:	ab03      	add	r3, sp, #12
 800dbc0:	9300      	str	r3, [sp, #0]
 800dbc2:	462a      	mov	r2, r5
 800dbc4:	4b05      	ldr	r3, [pc, #20]	; (800dbdc <_svfiprintf_r+0x1f4>)
 800dbc6:	a904      	add	r1, sp, #16
 800dbc8:	4638      	mov	r0, r7
 800dbca:	f7fd fcd5 	bl	800b578 <_printf_i>
 800dbce:	e7eb      	b.n	800dba8 <_svfiprintf_r+0x1c0>
 800dbd0:	0800e894 	.word	0x0800e894
 800dbd4:	0800e89e 	.word	0x0800e89e
 800dbd8:	0800b031 	.word	0x0800b031
 800dbdc:	0800d935 	.word	0x0800d935
 800dbe0:	0800e89a 	.word	0x0800e89a

0800dbe4 <__sflush_r>:
 800dbe4:	898a      	ldrh	r2, [r1, #12]
 800dbe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbea:	4605      	mov	r5, r0
 800dbec:	0710      	lsls	r0, r2, #28
 800dbee:	460c      	mov	r4, r1
 800dbf0:	d458      	bmi.n	800dca4 <__sflush_r+0xc0>
 800dbf2:	684b      	ldr	r3, [r1, #4]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	dc05      	bgt.n	800dc04 <__sflush_r+0x20>
 800dbf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	dc02      	bgt.n	800dc04 <__sflush_r+0x20>
 800dbfe:	2000      	movs	r0, #0
 800dc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc06:	2e00      	cmp	r6, #0
 800dc08:	d0f9      	beq.n	800dbfe <__sflush_r+0x1a>
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc10:	682f      	ldr	r7, [r5, #0]
 800dc12:	6a21      	ldr	r1, [r4, #32]
 800dc14:	602b      	str	r3, [r5, #0]
 800dc16:	d032      	beq.n	800dc7e <__sflush_r+0x9a>
 800dc18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc1a:	89a3      	ldrh	r3, [r4, #12]
 800dc1c:	075a      	lsls	r2, r3, #29
 800dc1e:	d505      	bpl.n	800dc2c <__sflush_r+0x48>
 800dc20:	6863      	ldr	r3, [r4, #4]
 800dc22:	1ac0      	subs	r0, r0, r3
 800dc24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc26:	b10b      	cbz	r3, 800dc2c <__sflush_r+0x48>
 800dc28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc2a:	1ac0      	subs	r0, r0, r3
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	4602      	mov	r2, r0
 800dc30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc32:	6a21      	ldr	r1, [r4, #32]
 800dc34:	4628      	mov	r0, r5
 800dc36:	47b0      	blx	r6
 800dc38:	1c43      	adds	r3, r0, #1
 800dc3a:	89a3      	ldrh	r3, [r4, #12]
 800dc3c:	d106      	bne.n	800dc4c <__sflush_r+0x68>
 800dc3e:	6829      	ldr	r1, [r5, #0]
 800dc40:	291d      	cmp	r1, #29
 800dc42:	d82b      	bhi.n	800dc9c <__sflush_r+0xb8>
 800dc44:	4a29      	ldr	r2, [pc, #164]	; (800dcec <__sflush_r+0x108>)
 800dc46:	410a      	asrs	r2, r1
 800dc48:	07d6      	lsls	r6, r2, #31
 800dc4a:	d427      	bmi.n	800dc9c <__sflush_r+0xb8>
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	6062      	str	r2, [r4, #4]
 800dc50:	04d9      	lsls	r1, r3, #19
 800dc52:	6922      	ldr	r2, [r4, #16]
 800dc54:	6022      	str	r2, [r4, #0]
 800dc56:	d504      	bpl.n	800dc62 <__sflush_r+0x7e>
 800dc58:	1c42      	adds	r2, r0, #1
 800dc5a:	d101      	bne.n	800dc60 <__sflush_r+0x7c>
 800dc5c:	682b      	ldr	r3, [r5, #0]
 800dc5e:	b903      	cbnz	r3, 800dc62 <__sflush_r+0x7e>
 800dc60:	6560      	str	r0, [r4, #84]	; 0x54
 800dc62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc64:	602f      	str	r7, [r5, #0]
 800dc66:	2900      	cmp	r1, #0
 800dc68:	d0c9      	beq.n	800dbfe <__sflush_r+0x1a>
 800dc6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc6e:	4299      	cmp	r1, r3
 800dc70:	d002      	beq.n	800dc78 <__sflush_r+0x94>
 800dc72:	4628      	mov	r0, r5
 800dc74:	f7fe fde6 	bl	800c844 <_free_r>
 800dc78:	2000      	movs	r0, #0
 800dc7a:	6360      	str	r0, [r4, #52]	; 0x34
 800dc7c:	e7c0      	b.n	800dc00 <__sflush_r+0x1c>
 800dc7e:	2301      	movs	r3, #1
 800dc80:	4628      	mov	r0, r5
 800dc82:	47b0      	blx	r6
 800dc84:	1c41      	adds	r1, r0, #1
 800dc86:	d1c8      	bne.n	800dc1a <__sflush_r+0x36>
 800dc88:	682b      	ldr	r3, [r5, #0]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d0c5      	beq.n	800dc1a <__sflush_r+0x36>
 800dc8e:	2b1d      	cmp	r3, #29
 800dc90:	d001      	beq.n	800dc96 <__sflush_r+0xb2>
 800dc92:	2b16      	cmp	r3, #22
 800dc94:	d101      	bne.n	800dc9a <__sflush_r+0xb6>
 800dc96:	602f      	str	r7, [r5, #0]
 800dc98:	e7b1      	b.n	800dbfe <__sflush_r+0x1a>
 800dc9a:	89a3      	ldrh	r3, [r4, #12]
 800dc9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dca0:	81a3      	strh	r3, [r4, #12]
 800dca2:	e7ad      	b.n	800dc00 <__sflush_r+0x1c>
 800dca4:	690f      	ldr	r7, [r1, #16]
 800dca6:	2f00      	cmp	r7, #0
 800dca8:	d0a9      	beq.n	800dbfe <__sflush_r+0x1a>
 800dcaa:	0793      	lsls	r3, r2, #30
 800dcac:	680e      	ldr	r6, [r1, #0]
 800dcae:	bf08      	it	eq
 800dcb0:	694b      	ldreq	r3, [r1, #20]
 800dcb2:	600f      	str	r7, [r1, #0]
 800dcb4:	bf18      	it	ne
 800dcb6:	2300      	movne	r3, #0
 800dcb8:	eba6 0807 	sub.w	r8, r6, r7
 800dcbc:	608b      	str	r3, [r1, #8]
 800dcbe:	f1b8 0f00 	cmp.w	r8, #0
 800dcc2:	dd9c      	ble.n	800dbfe <__sflush_r+0x1a>
 800dcc4:	6a21      	ldr	r1, [r4, #32]
 800dcc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dcc8:	4643      	mov	r3, r8
 800dcca:	463a      	mov	r2, r7
 800dccc:	4628      	mov	r0, r5
 800dcce:	47b0      	blx	r6
 800dcd0:	2800      	cmp	r0, #0
 800dcd2:	dc06      	bgt.n	800dce2 <__sflush_r+0xfe>
 800dcd4:	89a3      	ldrh	r3, [r4, #12]
 800dcd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcda:	81a3      	strh	r3, [r4, #12]
 800dcdc:	f04f 30ff 	mov.w	r0, #4294967295
 800dce0:	e78e      	b.n	800dc00 <__sflush_r+0x1c>
 800dce2:	4407      	add	r7, r0
 800dce4:	eba8 0800 	sub.w	r8, r8, r0
 800dce8:	e7e9      	b.n	800dcbe <__sflush_r+0xda>
 800dcea:	bf00      	nop
 800dcec:	dfbffffe 	.word	0xdfbffffe

0800dcf0 <_fflush_r>:
 800dcf0:	b538      	push	{r3, r4, r5, lr}
 800dcf2:	690b      	ldr	r3, [r1, #16]
 800dcf4:	4605      	mov	r5, r0
 800dcf6:	460c      	mov	r4, r1
 800dcf8:	b913      	cbnz	r3, 800dd00 <_fflush_r+0x10>
 800dcfa:	2500      	movs	r5, #0
 800dcfc:	4628      	mov	r0, r5
 800dcfe:	bd38      	pop	{r3, r4, r5, pc}
 800dd00:	b118      	cbz	r0, 800dd0a <_fflush_r+0x1a>
 800dd02:	6a03      	ldr	r3, [r0, #32]
 800dd04:	b90b      	cbnz	r3, 800dd0a <_fflush_r+0x1a>
 800dd06:	f7fd fdd3 	bl	800b8b0 <__sinit>
 800dd0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d0f3      	beq.n	800dcfa <_fflush_r+0xa>
 800dd12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd14:	07d0      	lsls	r0, r2, #31
 800dd16:	d404      	bmi.n	800dd22 <_fflush_r+0x32>
 800dd18:	0599      	lsls	r1, r3, #22
 800dd1a:	d402      	bmi.n	800dd22 <_fflush_r+0x32>
 800dd1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd1e:	f7fd feff 	bl	800bb20 <__retarget_lock_acquire_recursive>
 800dd22:	4628      	mov	r0, r5
 800dd24:	4621      	mov	r1, r4
 800dd26:	f7ff ff5d 	bl	800dbe4 <__sflush_r>
 800dd2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd2c:	07da      	lsls	r2, r3, #31
 800dd2e:	4605      	mov	r5, r0
 800dd30:	d4e4      	bmi.n	800dcfc <_fflush_r+0xc>
 800dd32:	89a3      	ldrh	r3, [r4, #12]
 800dd34:	059b      	lsls	r3, r3, #22
 800dd36:	d4e1      	bmi.n	800dcfc <_fflush_r+0xc>
 800dd38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd3a:	f7fd fef2 	bl	800bb22 <__retarget_lock_release_recursive>
 800dd3e:	e7dd      	b.n	800dcfc <_fflush_r+0xc>

0800dd40 <memmove>:
 800dd40:	4288      	cmp	r0, r1
 800dd42:	b510      	push	{r4, lr}
 800dd44:	eb01 0402 	add.w	r4, r1, r2
 800dd48:	d902      	bls.n	800dd50 <memmove+0x10>
 800dd4a:	4284      	cmp	r4, r0
 800dd4c:	4623      	mov	r3, r4
 800dd4e:	d807      	bhi.n	800dd60 <memmove+0x20>
 800dd50:	1e43      	subs	r3, r0, #1
 800dd52:	42a1      	cmp	r1, r4
 800dd54:	d008      	beq.n	800dd68 <memmove+0x28>
 800dd56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd5e:	e7f8      	b.n	800dd52 <memmove+0x12>
 800dd60:	4402      	add	r2, r0
 800dd62:	4601      	mov	r1, r0
 800dd64:	428a      	cmp	r2, r1
 800dd66:	d100      	bne.n	800dd6a <memmove+0x2a>
 800dd68:	bd10      	pop	{r4, pc}
 800dd6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd72:	e7f7      	b.n	800dd64 <memmove+0x24>

0800dd74 <__assert_func>:
 800dd74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd76:	4614      	mov	r4, r2
 800dd78:	461a      	mov	r2, r3
 800dd7a:	4b09      	ldr	r3, [pc, #36]	; (800dda0 <__assert_func+0x2c>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	4605      	mov	r5, r0
 800dd80:	68d8      	ldr	r0, [r3, #12]
 800dd82:	b14c      	cbz	r4, 800dd98 <__assert_func+0x24>
 800dd84:	4b07      	ldr	r3, [pc, #28]	; (800dda4 <__assert_func+0x30>)
 800dd86:	9100      	str	r1, [sp, #0]
 800dd88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd8c:	4906      	ldr	r1, [pc, #24]	; (800dda8 <__assert_func+0x34>)
 800dd8e:	462b      	mov	r3, r5
 800dd90:	f000 f824 	bl	800dddc <fiprintf>
 800dd94:	f000 f834 	bl	800de00 <abort>
 800dd98:	4b04      	ldr	r3, [pc, #16]	; (800ddac <__assert_func+0x38>)
 800dd9a:	461c      	mov	r4, r3
 800dd9c:	e7f3      	b.n	800dd86 <__assert_func+0x12>
 800dd9e:	bf00      	nop
 800dda0:	2000022c 	.word	0x2000022c
 800dda4:	0800e8a5 	.word	0x0800e8a5
 800dda8:	0800e8b2 	.word	0x0800e8b2
 800ddac:	0800e8e0 	.word	0x0800e8e0

0800ddb0 <_calloc_r>:
 800ddb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddb2:	fba1 2402 	umull	r2, r4, r1, r2
 800ddb6:	b94c      	cbnz	r4, 800ddcc <_calloc_r+0x1c>
 800ddb8:	4611      	mov	r1, r2
 800ddba:	9201      	str	r2, [sp, #4]
 800ddbc:	f7fc f9ba 	bl	800a134 <_malloc_r>
 800ddc0:	9a01      	ldr	r2, [sp, #4]
 800ddc2:	4605      	mov	r5, r0
 800ddc4:	b930      	cbnz	r0, 800ddd4 <_calloc_r+0x24>
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	b003      	add	sp, #12
 800ddca:	bd30      	pop	{r4, r5, pc}
 800ddcc:	220c      	movs	r2, #12
 800ddce:	6002      	str	r2, [r0, #0]
 800ddd0:	2500      	movs	r5, #0
 800ddd2:	e7f8      	b.n	800ddc6 <_calloc_r+0x16>
 800ddd4:	4621      	mov	r1, r4
 800ddd6:	f7fd fe04 	bl	800b9e2 <memset>
 800ddda:	e7f4      	b.n	800ddc6 <_calloc_r+0x16>

0800dddc <fiprintf>:
 800dddc:	b40e      	push	{r1, r2, r3}
 800ddde:	b503      	push	{r0, r1, lr}
 800dde0:	4601      	mov	r1, r0
 800dde2:	ab03      	add	r3, sp, #12
 800dde4:	4805      	ldr	r0, [pc, #20]	; (800ddfc <fiprintf+0x20>)
 800dde6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddea:	6800      	ldr	r0, [r0, #0]
 800ddec:	9301      	str	r3, [sp, #4]
 800ddee:	f000 f837 	bl	800de60 <_vfiprintf_r>
 800ddf2:	b002      	add	sp, #8
 800ddf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddf8:	b003      	add	sp, #12
 800ddfa:	4770      	bx	lr
 800ddfc:	2000022c 	.word	0x2000022c

0800de00 <abort>:
 800de00:	b508      	push	{r3, lr}
 800de02:	2006      	movs	r0, #6
 800de04:	f000 fa04 	bl	800e210 <raise>
 800de08:	2001      	movs	r0, #1
 800de0a:	f7f5 fbc1 	bl	8003590 <_exit>

0800de0e <__sfputc_r>:
 800de0e:	6893      	ldr	r3, [r2, #8]
 800de10:	3b01      	subs	r3, #1
 800de12:	2b00      	cmp	r3, #0
 800de14:	b410      	push	{r4}
 800de16:	6093      	str	r3, [r2, #8]
 800de18:	da08      	bge.n	800de2c <__sfputc_r+0x1e>
 800de1a:	6994      	ldr	r4, [r2, #24]
 800de1c:	42a3      	cmp	r3, r4
 800de1e:	db01      	blt.n	800de24 <__sfputc_r+0x16>
 800de20:	290a      	cmp	r1, #10
 800de22:	d103      	bne.n	800de2c <__sfputc_r+0x1e>
 800de24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de28:	f000 b934 	b.w	800e094 <__swbuf_r>
 800de2c:	6813      	ldr	r3, [r2, #0]
 800de2e:	1c58      	adds	r0, r3, #1
 800de30:	6010      	str	r0, [r2, #0]
 800de32:	7019      	strb	r1, [r3, #0]
 800de34:	4608      	mov	r0, r1
 800de36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <__sfputs_r>:
 800de3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de3e:	4606      	mov	r6, r0
 800de40:	460f      	mov	r7, r1
 800de42:	4614      	mov	r4, r2
 800de44:	18d5      	adds	r5, r2, r3
 800de46:	42ac      	cmp	r4, r5
 800de48:	d101      	bne.n	800de4e <__sfputs_r+0x12>
 800de4a:	2000      	movs	r0, #0
 800de4c:	e007      	b.n	800de5e <__sfputs_r+0x22>
 800de4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de52:	463a      	mov	r2, r7
 800de54:	4630      	mov	r0, r6
 800de56:	f7ff ffda 	bl	800de0e <__sfputc_r>
 800de5a:	1c43      	adds	r3, r0, #1
 800de5c:	d1f3      	bne.n	800de46 <__sfputs_r+0xa>
 800de5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800de60 <_vfiprintf_r>:
 800de60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de64:	460d      	mov	r5, r1
 800de66:	b09d      	sub	sp, #116	; 0x74
 800de68:	4614      	mov	r4, r2
 800de6a:	4698      	mov	r8, r3
 800de6c:	4606      	mov	r6, r0
 800de6e:	b118      	cbz	r0, 800de78 <_vfiprintf_r+0x18>
 800de70:	6a03      	ldr	r3, [r0, #32]
 800de72:	b90b      	cbnz	r3, 800de78 <_vfiprintf_r+0x18>
 800de74:	f7fd fd1c 	bl	800b8b0 <__sinit>
 800de78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de7a:	07d9      	lsls	r1, r3, #31
 800de7c:	d405      	bmi.n	800de8a <_vfiprintf_r+0x2a>
 800de7e:	89ab      	ldrh	r3, [r5, #12]
 800de80:	059a      	lsls	r2, r3, #22
 800de82:	d402      	bmi.n	800de8a <_vfiprintf_r+0x2a>
 800de84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de86:	f7fd fe4b 	bl	800bb20 <__retarget_lock_acquire_recursive>
 800de8a:	89ab      	ldrh	r3, [r5, #12]
 800de8c:	071b      	lsls	r3, r3, #28
 800de8e:	d501      	bpl.n	800de94 <_vfiprintf_r+0x34>
 800de90:	692b      	ldr	r3, [r5, #16]
 800de92:	b99b      	cbnz	r3, 800debc <_vfiprintf_r+0x5c>
 800de94:	4629      	mov	r1, r5
 800de96:	4630      	mov	r0, r6
 800de98:	f000 f93a 	bl	800e110 <__swsetup_r>
 800de9c:	b170      	cbz	r0, 800debc <_vfiprintf_r+0x5c>
 800de9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dea0:	07dc      	lsls	r4, r3, #31
 800dea2:	d504      	bpl.n	800deae <_vfiprintf_r+0x4e>
 800dea4:	f04f 30ff 	mov.w	r0, #4294967295
 800dea8:	b01d      	add	sp, #116	; 0x74
 800deaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deae:	89ab      	ldrh	r3, [r5, #12]
 800deb0:	0598      	lsls	r0, r3, #22
 800deb2:	d4f7      	bmi.n	800dea4 <_vfiprintf_r+0x44>
 800deb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800deb6:	f7fd fe34 	bl	800bb22 <__retarget_lock_release_recursive>
 800deba:	e7f3      	b.n	800dea4 <_vfiprintf_r+0x44>
 800debc:	2300      	movs	r3, #0
 800debe:	9309      	str	r3, [sp, #36]	; 0x24
 800dec0:	2320      	movs	r3, #32
 800dec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dec6:	f8cd 800c 	str.w	r8, [sp, #12]
 800deca:	2330      	movs	r3, #48	; 0x30
 800decc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e080 <_vfiprintf_r+0x220>
 800ded0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ded4:	f04f 0901 	mov.w	r9, #1
 800ded8:	4623      	mov	r3, r4
 800deda:	469a      	mov	sl, r3
 800dedc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dee0:	b10a      	cbz	r2, 800dee6 <_vfiprintf_r+0x86>
 800dee2:	2a25      	cmp	r2, #37	; 0x25
 800dee4:	d1f9      	bne.n	800deda <_vfiprintf_r+0x7a>
 800dee6:	ebba 0b04 	subs.w	fp, sl, r4
 800deea:	d00b      	beq.n	800df04 <_vfiprintf_r+0xa4>
 800deec:	465b      	mov	r3, fp
 800deee:	4622      	mov	r2, r4
 800def0:	4629      	mov	r1, r5
 800def2:	4630      	mov	r0, r6
 800def4:	f7ff ffa2 	bl	800de3c <__sfputs_r>
 800def8:	3001      	adds	r0, #1
 800defa:	f000 80a9 	beq.w	800e050 <_vfiprintf_r+0x1f0>
 800defe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df00:	445a      	add	r2, fp
 800df02:	9209      	str	r2, [sp, #36]	; 0x24
 800df04:	f89a 3000 	ldrb.w	r3, [sl]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	f000 80a1 	beq.w	800e050 <_vfiprintf_r+0x1f0>
 800df0e:	2300      	movs	r3, #0
 800df10:	f04f 32ff 	mov.w	r2, #4294967295
 800df14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df18:	f10a 0a01 	add.w	sl, sl, #1
 800df1c:	9304      	str	r3, [sp, #16]
 800df1e:	9307      	str	r3, [sp, #28]
 800df20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df24:	931a      	str	r3, [sp, #104]	; 0x68
 800df26:	4654      	mov	r4, sl
 800df28:	2205      	movs	r2, #5
 800df2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df2e:	4854      	ldr	r0, [pc, #336]	; (800e080 <_vfiprintf_r+0x220>)
 800df30:	f7f2 f95e 	bl	80001f0 <memchr>
 800df34:	9a04      	ldr	r2, [sp, #16]
 800df36:	b9d8      	cbnz	r0, 800df70 <_vfiprintf_r+0x110>
 800df38:	06d1      	lsls	r1, r2, #27
 800df3a:	bf44      	itt	mi
 800df3c:	2320      	movmi	r3, #32
 800df3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df42:	0713      	lsls	r3, r2, #28
 800df44:	bf44      	itt	mi
 800df46:	232b      	movmi	r3, #43	; 0x2b
 800df48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800df4c:	f89a 3000 	ldrb.w	r3, [sl]
 800df50:	2b2a      	cmp	r3, #42	; 0x2a
 800df52:	d015      	beq.n	800df80 <_vfiprintf_r+0x120>
 800df54:	9a07      	ldr	r2, [sp, #28]
 800df56:	4654      	mov	r4, sl
 800df58:	2000      	movs	r0, #0
 800df5a:	f04f 0c0a 	mov.w	ip, #10
 800df5e:	4621      	mov	r1, r4
 800df60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df64:	3b30      	subs	r3, #48	; 0x30
 800df66:	2b09      	cmp	r3, #9
 800df68:	d94d      	bls.n	800e006 <_vfiprintf_r+0x1a6>
 800df6a:	b1b0      	cbz	r0, 800df9a <_vfiprintf_r+0x13a>
 800df6c:	9207      	str	r2, [sp, #28]
 800df6e:	e014      	b.n	800df9a <_vfiprintf_r+0x13a>
 800df70:	eba0 0308 	sub.w	r3, r0, r8
 800df74:	fa09 f303 	lsl.w	r3, r9, r3
 800df78:	4313      	orrs	r3, r2
 800df7a:	9304      	str	r3, [sp, #16]
 800df7c:	46a2      	mov	sl, r4
 800df7e:	e7d2      	b.n	800df26 <_vfiprintf_r+0xc6>
 800df80:	9b03      	ldr	r3, [sp, #12]
 800df82:	1d19      	adds	r1, r3, #4
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	9103      	str	r1, [sp, #12]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	bfbb      	ittet	lt
 800df8c:	425b      	neglt	r3, r3
 800df8e:	f042 0202 	orrlt.w	r2, r2, #2
 800df92:	9307      	strge	r3, [sp, #28]
 800df94:	9307      	strlt	r3, [sp, #28]
 800df96:	bfb8      	it	lt
 800df98:	9204      	strlt	r2, [sp, #16]
 800df9a:	7823      	ldrb	r3, [r4, #0]
 800df9c:	2b2e      	cmp	r3, #46	; 0x2e
 800df9e:	d10c      	bne.n	800dfba <_vfiprintf_r+0x15a>
 800dfa0:	7863      	ldrb	r3, [r4, #1]
 800dfa2:	2b2a      	cmp	r3, #42	; 0x2a
 800dfa4:	d134      	bne.n	800e010 <_vfiprintf_r+0x1b0>
 800dfa6:	9b03      	ldr	r3, [sp, #12]
 800dfa8:	1d1a      	adds	r2, r3, #4
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	9203      	str	r2, [sp, #12]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	bfb8      	it	lt
 800dfb2:	f04f 33ff 	movlt.w	r3, #4294967295
 800dfb6:	3402      	adds	r4, #2
 800dfb8:	9305      	str	r3, [sp, #20]
 800dfba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e090 <_vfiprintf_r+0x230>
 800dfbe:	7821      	ldrb	r1, [r4, #0]
 800dfc0:	2203      	movs	r2, #3
 800dfc2:	4650      	mov	r0, sl
 800dfc4:	f7f2 f914 	bl	80001f0 <memchr>
 800dfc8:	b138      	cbz	r0, 800dfda <_vfiprintf_r+0x17a>
 800dfca:	9b04      	ldr	r3, [sp, #16]
 800dfcc:	eba0 000a 	sub.w	r0, r0, sl
 800dfd0:	2240      	movs	r2, #64	; 0x40
 800dfd2:	4082      	lsls	r2, r0
 800dfd4:	4313      	orrs	r3, r2
 800dfd6:	3401      	adds	r4, #1
 800dfd8:	9304      	str	r3, [sp, #16]
 800dfda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfde:	4829      	ldr	r0, [pc, #164]	; (800e084 <_vfiprintf_r+0x224>)
 800dfe0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dfe4:	2206      	movs	r2, #6
 800dfe6:	f7f2 f903 	bl	80001f0 <memchr>
 800dfea:	2800      	cmp	r0, #0
 800dfec:	d03f      	beq.n	800e06e <_vfiprintf_r+0x20e>
 800dfee:	4b26      	ldr	r3, [pc, #152]	; (800e088 <_vfiprintf_r+0x228>)
 800dff0:	bb1b      	cbnz	r3, 800e03a <_vfiprintf_r+0x1da>
 800dff2:	9b03      	ldr	r3, [sp, #12]
 800dff4:	3307      	adds	r3, #7
 800dff6:	f023 0307 	bic.w	r3, r3, #7
 800dffa:	3308      	adds	r3, #8
 800dffc:	9303      	str	r3, [sp, #12]
 800dffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e000:	443b      	add	r3, r7
 800e002:	9309      	str	r3, [sp, #36]	; 0x24
 800e004:	e768      	b.n	800ded8 <_vfiprintf_r+0x78>
 800e006:	fb0c 3202 	mla	r2, ip, r2, r3
 800e00a:	460c      	mov	r4, r1
 800e00c:	2001      	movs	r0, #1
 800e00e:	e7a6      	b.n	800df5e <_vfiprintf_r+0xfe>
 800e010:	2300      	movs	r3, #0
 800e012:	3401      	adds	r4, #1
 800e014:	9305      	str	r3, [sp, #20]
 800e016:	4619      	mov	r1, r3
 800e018:	f04f 0c0a 	mov.w	ip, #10
 800e01c:	4620      	mov	r0, r4
 800e01e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e022:	3a30      	subs	r2, #48	; 0x30
 800e024:	2a09      	cmp	r2, #9
 800e026:	d903      	bls.n	800e030 <_vfiprintf_r+0x1d0>
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d0c6      	beq.n	800dfba <_vfiprintf_r+0x15a>
 800e02c:	9105      	str	r1, [sp, #20]
 800e02e:	e7c4      	b.n	800dfba <_vfiprintf_r+0x15a>
 800e030:	fb0c 2101 	mla	r1, ip, r1, r2
 800e034:	4604      	mov	r4, r0
 800e036:	2301      	movs	r3, #1
 800e038:	e7f0      	b.n	800e01c <_vfiprintf_r+0x1bc>
 800e03a:	ab03      	add	r3, sp, #12
 800e03c:	9300      	str	r3, [sp, #0]
 800e03e:	462a      	mov	r2, r5
 800e040:	4b12      	ldr	r3, [pc, #72]	; (800e08c <_vfiprintf_r+0x22c>)
 800e042:	a904      	add	r1, sp, #16
 800e044:	4630      	mov	r0, r6
 800e046:	f7fc fff3 	bl	800b030 <_printf_float>
 800e04a:	4607      	mov	r7, r0
 800e04c:	1c78      	adds	r0, r7, #1
 800e04e:	d1d6      	bne.n	800dffe <_vfiprintf_r+0x19e>
 800e050:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e052:	07d9      	lsls	r1, r3, #31
 800e054:	d405      	bmi.n	800e062 <_vfiprintf_r+0x202>
 800e056:	89ab      	ldrh	r3, [r5, #12]
 800e058:	059a      	lsls	r2, r3, #22
 800e05a:	d402      	bmi.n	800e062 <_vfiprintf_r+0x202>
 800e05c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e05e:	f7fd fd60 	bl	800bb22 <__retarget_lock_release_recursive>
 800e062:	89ab      	ldrh	r3, [r5, #12]
 800e064:	065b      	lsls	r3, r3, #25
 800e066:	f53f af1d 	bmi.w	800dea4 <_vfiprintf_r+0x44>
 800e06a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e06c:	e71c      	b.n	800dea8 <_vfiprintf_r+0x48>
 800e06e:	ab03      	add	r3, sp, #12
 800e070:	9300      	str	r3, [sp, #0]
 800e072:	462a      	mov	r2, r5
 800e074:	4b05      	ldr	r3, [pc, #20]	; (800e08c <_vfiprintf_r+0x22c>)
 800e076:	a904      	add	r1, sp, #16
 800e078:	4630      	mov	r0, r6
 800e07a:	f7fd fa7d 	bl	800b578 <_printf_i>
 800e07e:	e7e4      	b.n	800e04a <_vfiprintf_r+0x1ea>
 800e080:	0800e894 	.word	0x0800e894
 800e084:	0800e89e 	.word	0x0800e89e
 800e088:	0800b031 	.word	0x0800b031
 800e08c:	0800de3d 	.word	0x0800de3d
 800e090:	0800e89a 	.word	0x0800e89a

0800e094 <__swbuf_r>:
 800e094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e096:	460e      	mov	r6, r1
 800e098:	4614      	mov	r4, r2
 800e09a:	4605      	mov	r5, r0
 800e09c:	b118      	cbz	r0, 800e0a6 <__swbuf_r+0x12>
 800e09e:	6a03      	ldr	r3, [r0, #32]
 800e0a0:	b90b      	cbnz	r3, 800e0a6 <__swbuf_r+0x12>
 800e0a2:	f7fd fc05 	bl	800b8b0 <__sinit>
 800e0a6:	69a3      	ldr	r3, [r4, #24]
 800e0a8:	60a3      	str	r3, [r4, #8]
 800e0aa:	89a3      	ldrh	r3, [r4, #12]
 800e0ac:	071a      	lsls	r2, r3, #28
 800e0ae:	d525      	bpl.n	800e0fc <__swbuf_r+0x68>
 800e0b0:	6923      	ldr	r3, [r4, #16]
 800e0b2:	b31b      	cbz	r3, 800e0fc <__swbuf_r+0x68>
 800e0b4:	6823      	ldr	r3, [r4, #0]
 800e0b6:	6922      	ldr	r2, [r4, #16]
 800e0b8:	1a98      	subs	r0, r3, r2
 800e0ba:	6963      	ldr	r3, [r4, #20]
 800e0bc:	b2f6      	uxtb	r6, r6
 800e0be:	4283      	cmp	r3, r0
 800e0c0:	4637      	mov	r7, r6
 800e0c2:	dc04      	bgt.n	800e0ce <__swbuf_r+0x3a>
 800e0c4:	4621      	mov	r1, r4
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	f7ff fe12 	bl	800dcf0 <_fflush_r>
 800e0cc:	b9e0      	cbnz	r0, 800e108 <__swbuf_r+0x74>
 800e0ce:	68a3      	ldr	r3, [r4, #8]
 800e0d0:	3b01      	subs	r3, #1
 800e0d2:	60a3      	str	r3, [r4, #8]
 800e0d4:	6823      	ldr	r3, [r4, #0]
 800e0d6:	1c5a      	adds	r2, r3, #1
 800e0d8:	6022      	str	r2, [r4, #0]
 800e0da:	701e      	strb	r6, [r3, #0]
 800e0dc:	6962      	ldr	r2, [r4, #20]
 800e0de:	1c43      	adds	r3, r0, #1
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d004      	beq.n	800e0ee <__swbuf_r+0x5a>
 800e0e4:	89a3      	ldrh	r3, [r4, #12]
 800e0e6:	07db      	lsls	r3, r3, #31
 800e0e8:	d506      	bpl.n	800e0f8 <__swbuf_r+0x64>
 800e0ea:	2e0a      	cmp	r6, #10
 800e0ec:	d104      	bne.n	800e0f8 <__swbuf_r+0x64>
 800e0ee:	4621      	mov	r1, r4
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	f7ff fdfd 	bl	800dcf0 <_fflush_r>
 800e0f6:	b938      	cbnz	r0, 800e108 <__swbuf_r+0x74>
 800e0f8:	4638      	mov	r0, r7
 800e0fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0fc:	4621      	mov	r1, r4
 800e0fe:	4628      	mov	r0, r5
 800e100:	f000 f806 	bl	800e110 <__swsetup_r>
 800e104:	2800      	cmp	r0, #0
 800e106:	d0d5      	beq.n	800e0b4 <__swbuf_r+0x20>
 800e108:	f04f 37ff 	mov.w	r7, #4294967295
 800e10c:	e7f4      	b.n	800e0f8 <__swbuf_r+0x64>
	...

0800e110 <__swsetup_r>:
 800e110:	b538      	push	{r3, r4, r5, lr}
 800e112:	4b2a      	ldr	r3, [pc, #168]	; (800e1bc <__swsetup_r+0xac>)
 800e114:	4605      	mov	r5, r0
 800e116:	6818      	ldr	r0, [r3, #0]
 800e118:	460c      	mov	r4, r1
 800e11a:	b118      	cbz	r0, 800e124 <__swsetup_r+0x14>
 800e11c:	6a03      	ldr	r3, [r0, #32]
 800e11e:	b90b      	cbnz	r3, 800e124 <__swsetup_r+0x14>
 800e120:	f7fd fbc6 	bl	800b8b0 <__sinit>
 800e124:	89a3      	ldrh	r3, [r4, #12]
 800e126:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e12a:	0718      	lsls	r0, r3, #28
 800e12c:	d422      	bmi.n	800e174 <__swsetup_r+0x64>
 800e12e:	06d9      	lsls	r1, r3, #27
 800e130:	d407      	bmi.n	800e142 <__swsetup_r+0x32>
 800e132:	2309      	movs	r3, #9
 800e134:	602b      	str	r3, [r5, #0]
 800e136:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e13a:	81a3      	strh	r3, [r4, #12]
 800e13c:	f04f 30ff 	mov.w	r0, #4294967295
 800e140:	e034      	b.n	800e1ac <__swsetup_r+0x9c>
 800e142:	0758      	lsls	r0, r3, #29
 800e144:	d512      	bpl.n	800e16c <__swsetup_r+0x5c>
 800e146:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e148:	b141      	cbz	r1, 800e15c <__swsetup_r+0x4c>
 800e14a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e14e:	4299      	cmp	r1, r3
 800e150:	d002      	beq.n	800e158 <__swsetup_r+0x48>
 800e152:	4628      	mov	r0, r5
 800e154:	f7fe fb76 	bl	800c844 <_free_r>
 800e158:	2300      	movs	r3, #0
 800e15a:	6363      	str	r3, [r4, #52]	; 0x34
 800e15c:	89a3      	ldrh	r3, [r4, #12]
 800e15e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e162:	81a3      	strh	r3, [r4, #12]
 800e164:	2300      	movs	r3, #0
 800e166:	6063      	str	r3, [r4, #4]
 800e168:	6923      	ldr	r3, [r4, #16]
 800e16a:	6023      	str	r3, [r4, #0]
 800e16c:	89a3      	ldrh	r3, [r4, #12]
 800e16e:	f043 0308 	orr.w	r3, r3, #8
 800e172:	81a3      	strh	r3, [r4, #12]
 800e174:	6923      	ldr	r3, [r4, #16]
 800e176:	b94b      	cbnz	r3, 800e18c <__swsetup_r+0x7c>
 800e178:	89a3      	ldrh	r3, [r4, #12]
 800e17a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e17e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e182:	d003      	beq.n	800e18c <__swsetup_r+0x7c>
 800e184:	4621      	mov	r1, r4
 800e186:	4628      	mov	r0, r5
 800e188:	f000 f884 	bl	800e294 <__smakebuf_r>
 800e18c:	89a0      	ldrh	r0, [r4, #12]
 800e18e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e192:	f010 0301 	ands.w	r3, r0, #1
 800e196:	d00a      	beq.n	800e1ae <__swsetup_r+0x9e>
 800e198:	2300      	movs	r3, #0
 800e19a:	60a3      	str	r3, [r4, #8]
 800e19c:	6963      	ldr	r3, [r4, #20]
 800e19e:	425b      	negs	r3, r3
 800e1a0:	61a3      	str	r3, [r4, #24]
 800e1a2:	6923      	ldr	r3, [r4, #16]
 800e1a4:	b943      	cbnz	r3, 800e1b8 <__swsetup_r+0xa8>
 800e1a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e1aa:	d1c4      	bne.n	800e136 <__swsetup_r+0x26>
 800e1ac:	bd38      	pop	{r3, r4, r5, pc}
 800e1ae:	0781      	lsls	r1, r0, #30
 800e1b0:	bf58      	it	pl
 800e1b2:	6963      	ldrpl	r3, [r4, #20]
 800e1b4:	60a3      	str	r3, [r4, #8]
 800e1b6:	e7f4      	b.n	800e1a2 <__swsetup_r+0x92>
 800e1b8:	2000      	movs	r0, #0
 800e1ba:	e7f7      	b.n	800e1ac <__swsetup_r+0x9c>
 800e1bc:	2000022c 	.word	0x2000022c

0800e1c0 <_raise_r>:
 800e1c0:	291f      	cmp	r1, #31
 800e1c2:	b538      	push	{r3, r4, r5, lr}
 800e1c4:	4604      	mov	r4, r0
 800e1c6:	460d      	mov	r5, r1
 800e1c8:	d904      	bls.n	800e1d4 <_raise_r+0x14>
 800e1ca:	2316      	movs	r3, #22
 800e1cc:	6003      	str	r3, [r0, #0]
 800e1ce:	f04f 30ff 	mov.w	r0, #4294967295
 800e1d2:	bd38      	pop	{r3, r4, r5, pc}
 800e1d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e1d6:	b112      	cbz	r2, 800e1de <_raise_r+0x1e>
 800e1d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e1dc:	b94b      	cbnz	r3, 800e1f2 <_raise_r+0x32>
 800e1de:	4620      	mov	r0, r4
 800e1e0:	f000 f830 	bl	800e244 <_getpid_r>
 800e1e4:	462a      	mov	r2, r5
 800e1e6:	4601      	mov	r1, r0
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1ee:	f000 b817 	b.w	800e220 <_kill_r>
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d00a      	beq.n	800e20c <_raise_r+0x4c>
 800e1f6:	1c59      	adds	r1, r3, #1
 800e1f8:	d103      	bne.n	800e202 <_raise_r+0x42>
 800e1fa:	2316      	movs	r3, #22
 800e1fc:	6003      	str	r3, [r0, #0]
 800e1fe:	2001      	movs	r0, #1
 800e200:	e7e7      	b.n	800e1d2 <_raise_r+0x12>
 800e202:	2400      	movs	r4, #0
 800e204:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e208:	4628      	mov	r0, r5
 800e20a:	4798      	blx	r3
 800e20c:	2000      	movs	r0, #0
 800e20e:	e7e0      	b.n	800e1d2 <_raise_r+0x12>

0800e210 <raise>:
 800e210:	4b02      	ldr	r3, [pc, #8]	; (800e21c <raise+0xc>)
 800e212:	4601      	mov	r1, r0
 800e214:	6818      	ldr	r0, [r3, #0]
 800e216:	f7ff bfd3 	b.w	800e1c0 <_raise_r>
 800e21a:	bf00      	nop
 800e21c:	2000022c 	.word	0x2000022c

0800e220 <_kill_r>:
 800e220:	b538      	push	{r3, r4, r5, lr}
 800e222:	4d07      	ldr	r5, [pc, #28]	; (800e240 <_kill_r+0x20>)
 800e224:	2300      	movs	r3, #0
 800e226:	4604      	mov	r4, r0
 800e228:	4608      	mov	r0, r1
 800e22a:	4611      	mov	r1, r2
 800e22c:	602b      	str	r3, [r5, #0]
 800e22e:	f7f5 f99f 	bl	8003570 <_kill>
 800e232:	1c43      	adds	r3, r0, #1
 800e234:	d102      	bne.n	800e23c <_kill_r+0x1c>
 800e236:	682b      	ldr	r3, [r5, #0]
 800e238:	b103      	cbz	r3, 800e23c <_kill_r+0x1c>
 800e23a:	6023      	str	r3, [r4, #0]
 800e23c:	bd38      	pop	{r3, r4, r5, pc}
 800e23e:	bf00      	nop
 800e240:	20000b74 	.word	0x20000b74

0800e244 <_getpid_r>:
 800e244:	f7f5 b98c 	b.w	8003560 <_getpid>

0800e248 <__swhatbuf_r>:
 800e248:	b570      	push	{r4, r5, r6, lr}
 800e24a:	460c      	mov	r4, r1
 800e24c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e250:	2900      	cmp	r1, #0
 800e252:	b096      	sub	sp, #88	; 0x58
 800e254:	4615      	mov	r5, r2
 800e256:	461e      	mov	r6, r3
 800e258:	da0d      	bge.n	800e276 <__swhatbuf_r+0x2e>
 800e25a:	89a3      	ldrh	r3, [r4, #12]
 800e25c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e260:	f04f 0100 	mov.w	r1, #0
 800e264:	bf0c      	ite	eq
 800e266:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e26a:	2340      	movne	r3, #64	; 0x40
 800e26c:	2000      	movs	r0, #0
 800e26e:	6031      	str	r1, [r6, #0]
 800e270:	602b      	str	r3, [r5, #0]
 800e272:	b016      	add	sp, #88	; 0x58
 800e274:	bd70      	pop	{r4, r5, r6, pc}
 800e276:	466a      	mov	r2, sp
 800e278:	f000 f848 	bl	800e30c <_fstat_r>
 800e27c:	2800      	cmp	r0, #0
 800e27e:	dbec      	blt.n	800e25a <__swhatbuf_r+0x12>
 800e280:	9901      	ldr	r1, [sp, #4]
 800e282:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e286:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e28a:	4259      	negs	r1, r3
 800e28c:	4159      	adcs	r1, r3
 800e28e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e292:	e7eb      	b.n	800e26c <__swhatbuf_r+0x24>

0800e294 <__smakebuf_r>:
 800e294:	898b      	ldrh	r3, [r1, #12]
 800e296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e298:	079d      	lsls	r5, r3, #30
 800e29a:	4606      	mov	r6, r0
 800e29c:	460c      	mov	r4, r1
 800e29e:	d507      	bpl.n	800e2b0 <__smakebuf_r+0x1c>
 800e2a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e2a4:	6023      	str	r3, [r4, #0]
 800e2a6:	6123      	str	r3, [r4, #16]
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	6163      	str	r3, [r4, #20]
 800e2ac:	b002      	add	sp, #8
 800e2ae:	bd70      	pop	{r4, r5, r6, pc}
 800e2b0:	ab01      	add	r3, sp, #4
 800e2b2:	466a      	mov	r2, sp
 800e2b4:	f7ff ffc8 	bl	800e248 <__swhatbuf_r>
 800e2b8:	9900      	ldr	r1, [sp, #0]
 800e2ba:	4605      	mov	r5, r0
 800e2bc:	4630      	mov	r0, r6
 800e2be:	f7fb ff39 	bl	800a134 <_malloc_r>
 800e2c2:	b948      	cbnz	r0, 800e2d8 <__smakebuf_r+0x44>
 800e2c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2c8:	059a      	lsls	r2, r3, #22
 800e2ca:	d4ef      	bmi.n	800e2ac <__smakebuf_r+0x18>
 800e2cc:	f023 0303 	bic.w	r3, r3, #3
 800e2d0:	f043 0302 	orr.w	r3, r3, #2
 800e2d4:	81a3      	strh	r3, [r4, #12]
 800e2d6:	e7e3      	b.n	800e2a0 <__smakebuf_r+0xc>
 800e2d8:	89a3      	ldrh	r3, [r4, #12]
 800e2da:	6020      	str	r0, [r4, #0]
 800e2dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2e0:	81a3      	strh	r3, [r4, #12]
 800e2e2:	9b00      	ldr	r3, [sp, #0]
 800e2e4:	6163      	str	r3, [r4, #20]
 800e2e6:	9b01      	ldr	r3, [sp, #4]
 800e2e8:	6120      	str	r0, [r4, #16]
 800e2ea:	b15b      	cbz	r3, 800e304 <__smakebuf_r+0x70>
 800e2ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2f0:	4630      	mov	r0, r6
 800e2f2:	f000 f81d 	bl	800e330 <_isatty_r>
 800e2f6:	b128      	cbz	r0, 800e304 <__smakebuf_r+0x70>
 800e2f8:	89a3      	ldrh	r3, [r4, #12]
 800e2fa:	f023 0303 	bic.w	r3, r3, #3
 800e2fe:	f043 0301 	orr.w	r3, r3, #1
 800e302:	81a3      	strh	r3, [r4, #12]
 800e304:	89a3      	ldrh	r3, [r4, #12]
 800e306:	431d      	orrs	r5, r3
 800e308:	81a5      	strh	r5, [r4, #12]
 800e30a:	e7cf      	b.n	800e2ac <__smakebuf_r+0x18>

0800e30c <_fstat_r>:
 800e30c:	b538      	push	{r3, r4, r5, lr}
 800e30e:	4d07      	ldr	r5, [pc, #28]	; (800e32c <_fstat_r+0x20>)
 800e310:	2300      	movs	r3, #0
 800e312:	4604      	mov	r4, r0
 800e314:	4608      	mov	r0, r1
 800e316:	4611      	mov	r1, r2
 800e318:	602b      	str	r3, [r5, #0]
 800e31a:	f7f5 f988 	bl	800362e <_fstat>
 800e31e:	1c43      	adds	r3, r0, #1
 800e320:	d102      	bne.n	800e328 <_fstat_r+0x1c>
 800e322:	682b      	ldr	r3, [r5, #0]
 800e324:	b103      	cbz	r3, 800e328 <_fstat_r+0x1c>
 800e326:	6023      	str	r3, [r4, #0]
 800e328:	bd38      	pop	{r3, r4, r5, pc}
 800e32a:	bf00      	nop
 800e32c:	20000b74 	.word	0x20000b74

0800e330 <_isatty_r>:
 800e330:	b538      	push	{r3, r4, r5, lr}
 800e332:	4d06      	ldr	r5, [pc, #24]	; (800e34c <_isatty_r+0x1c>)
 800e334:	2300      	movs	r3, #0
 800e336:	4604      	mov	r4, r0
 800e338:	4608      	mov	r0, r1
 800e33a:	602b      	str	r3, [r5, #0]
 800e33c:	f7f5 f987 	bl	800364e <_isatty>
 800e340:	1c43      	adds	r3, r0, #1
 800e342:	d102      	bne.n	800e34a <_isatty_r+0x1a>
 800e344:	682b      	ldr	r3, [r5, #0]
 800e346:	b103      	cbz	r3, 800e34a <_isatty_r+0x1a>
 800e348:	6023      	str	r3, [r4, #0]
 800e34a:	bd38      	pop	{r3, r4, r5, pc}
 800e34c:	20000b74 	.word	0x20000b74

0800e350 <_init>:
 800e350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e352:	bf00      	nop
 800e354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e356:	bc08      	pop	{r3}
 800e358:	469e      	mov	lr, r3
 800e35a:	4770      	bx	lr

0800e35c <_fini>:
 800e35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e35e:	bf00      	nop
 800e360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e362:	bc08      	pop	{r3}
 800e364:	469e      	mov	lr, r3
 800e366:	4770      	bx	lr
