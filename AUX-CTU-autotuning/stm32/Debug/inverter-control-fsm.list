
inverter-control-fsm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  0800e570  0800e570  0001e570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eafc  0800eafc  0002026c  2**0
                  CONTENTS
  4 .ARM          00000000  0800eafc  0800eafc  0002026c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800eafc  0800eafc  0002026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eafc  0800eafc  0001eafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb00  0800eb00  0001eb00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  0800eb04  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002026c  2**0
                  CONTENTS
 10 .bss          0000094c  2000026c  2000026c  0002026c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bb8  20000bb8  0002026c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002026c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c5b5  00000000  00000000  000202df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000031db  00000000  00000000  0003c894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ad0  00000000  00000000  0003fa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001578  00000000  00000000  00041540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000247c3  00000000  00000000  00042ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f5e8  00000000  00000000  0006727b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e4ebe  00000000  00000000  00086863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000089fc  00000000  00000000  0016b724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b6  00000000  00000000  00174120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000026c 	.word	0x2000026c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e558 	.word	0x0800e558

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000270 	.word	0x20000270
 80001cc:	0800e558 	.word	0x0800e558

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2lz>:
 8000c08:	b538      	push	{r3, r4, r5, lr}
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	4604      	mov	r4, r0
 8000c10:	460d      	mov	r5, r1
 8000c12:	f7ff ff73 	bl	8000afc <__aeabi_dcmplt>
 8000c16:	b928      	cbnz	r0, 8000c24 <__aeabi_d2lz+0x1c>
 8000c18:	4620      	mov	r0, r4
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c20:	f000 b80a 	b.w	8000c38 <__aeabi_d2ulz>
 8000c24:	4620      	mov	r0, r4
 8000c26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c2a:	f000 f805 	bl	8000c38 <__aeabi_d2ulz>
 8000c2e:	4240      	negs	r0, r0
 8000c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c34:	bd38      	pop	{r3, r4, r5, pc}
 8000c36:	bf00      	nop

08000c38 <__aeabi_d2ulz>:
 8000c38:	b5d0      	push	{r4, r6, r7, lr}
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__aeabi_d2ulz+0x34>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4606      	mov	r6, r0
 8000c40:	460f      	mov	r7, r1
 8000c42:	f7ff fce9 	bl	8000618 <__aeabi_dmul>
 8000c46:	f7ff ffbf 	bl	8000bc8 <__aeabi_d2uiz>
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	f7ff fc6a 	bl	8000524 <__aeabi_ui2d>
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <__aeabi_d2ulz+0x38>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	f7ff fce0 	bl	8000618 <__aeabi_dmul>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	4639      	mov	r1, r7
 8000c60:	f7ff fb22 	bl	80002a8 <__aeabi_dsub>
 8000c64:	f7ff ffb0 	bl	8000bc8 <__aeabi_d2uiz>
 8000c68:	4621      	mov	r1, r4
 8000c6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c6c:	3df00000 	.word	0x3df00000
 8000c70:	41f00000 	.word	0x41f00000

08000c74 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d002      	beq.n	8000c8a <case_insensitive_strcmp+0x16>
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e056      	b.n	8000d3c <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d10d      	bne.n	8000cb2 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e050      	b.n	8000d3c <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d101      	bne.n	8000ca6 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e04a      	b.n	8000d3c <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	73fb      	strb	r3, [r7, #15]
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	4a22      	ldr	r2, [pc, #136]	; (8000d48 <case_insensitive_strcmp+0xd4>)
 8000cbe:	4413      	add	r3, r2
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d103      	bne.n	8000cd2 <case_insensitive_strcmp+0x5e>
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	f103 0220 	add.w	r2, r3, #32
 8000cd0:	e000      	b.n	8000cd4 <case_insensitive_strcmp+0x60>
 8000cd2:	7bfa      	ldrb	r2, [r7, #15]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	73bb      	strb	r3, [r7, #14]
 8000cda:	7bbb      	ldrb	r3, [r7, #14]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	491a      	ldr	r1, [pc, #104]	; (8000d48 <case_insensitive_strcmp+0xd4>)
 8000ce0:	440b      	add	r3, r1
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d102      	bne.n	8000cf2 <case_insensitive_strcmp+0x7e>
 8000cec:	7bbb      	ldrb	r3, [r7, #14]
 8000cee:	3320      	adds	r3, #32
 8000cf0:	e000      	b.n	8000cf4 <case_insensitive_strcmp+0x80>
 8000cf2:	7bbb      	ldrb	r3, [r7, #14]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d0d0      	beq.n	8000c9a <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	737b      	strb	r3, [r7, #13]
 8000cfe:	7b7b      	ldrb	r3, [r7, #13]
 8000d00:	3301      	adds	r3, #1
 8000d02:	4a11      	ldr	r2, [pc, #68]	; (8000d48 <case_insensitive_strcmp+0xd4>)
 8000d04:	4413      	add	r3, r2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d103      	bne.n	8000d18 <case_insensitive_strcmp+0xa4>
 8000d10:	7b7b      	ldrb	r3, [r7, #13]
 8000d12:	f103 0220 	add.w	r2, r3, #32
 8000d16:	e000      	b.n	8000d1a <case_insensitive_strcmp+0xa6>
 8000d18:	7b7a      	ldrb	r2, [r7, #13]
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	733b      	strb	r3, [r7, #12]
 8000d20:	7b3b      	ldrb	r3, [r7, #12]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4908      	ldr	r1, [pc, #32]	; (8000d48 <case_insensitive_strcmp+0xd4>)
 8000d26:	440b      	add	r3, r1
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d102      	bne.n	8000d38 <case_insensitive_strcmp+0xc4>
 8000d32:	7b3b      	ldrb	r3, [r7, #12]
 8000d34:	3320      	adds	r3, #32
 8000d36:	e000      	b.n	8000d3a <case_insensitive_strcmp+0xc6>
 8000d38:	7b3b      	ldrb	r3, [r7, #12]
 8000d3a:	1ad3      	subs	r3, r2, r3
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	0800e728 	.word	0x0800e728

08000d4c <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2028      	movs	r0, #40	; 0x28
 8000d5a:	4798      	blx	r3
 8000d5c:	60f8      	str	r0, [r7, #12]
    if (node)
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d004      	beq.n	8000d6e <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000d64:	2228      	movs	r2, #40	; 0x28
 8000d66:	2100      	movs	r1, #0
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f00a ff3e 	bl	800bbea <memset>
    }

    return node;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000d84:	e037      	b.n	8000df6 <cJSON_Delete+0x7e>
    {
        next = item->next;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d108      	bne.n	8000daa <cJSON_Delete+0x32>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d004      	beq.n	8000daa <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ffe7 	bl	8000d78 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d109      	bne.n	8000dca <cJSON_Delete+0x52>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	691b      	ldr	r3, [r3, #16]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d005      	beq.n	8000dca <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <cJSON_Delete+0x90>)
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	6912      	ldr	r2, [r2, #16]
 8000dc6:	4610      	mov	r0, r2
 8000dc8:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d109      	bne.n	8000dea <cJSON_Delete+0x72>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a1b      	ldr	r3, [r3, #32]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d005      	beq.n	8000dea <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <cJSON_Delete+0x90>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	6a12      	ldr	r2, [r2, #32]
 8000de6:	4610      	mov	r0, r2
 8000de8:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <cJSON_Delete+0x90>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	4798      	blx	r3
        item = next;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1c4      	bne.n	8000d86 <cJSON_Delete+0xe>
    }
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000000 	.word	0x20000000

08000e0c <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8000e10:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	0000      	movs	r0, r0
	...

08000e20 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b098      	sub	sp, #96	; 0x60
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
    double number = 0;
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	f04f 0300 	mov.w	r3, #0
 8000e32:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8000e3a:	f7ff ffe7 	bl	8000e0c <get_decimal_point>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <parse_number+0x36>
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <parse_number+0x3a>
    {
        return false;
 8000e56:	2300      	movs	r3, #0
 8000e58:	e0a0      	b.n	8000f9c <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000e5e:	e03d      	b.n	8000edc <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	6899      	ldr	r1, [r3, #8]
 8000e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e6a:	440b      	add	r3, r1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b45      	cmp	r3, #69	; 0x45
 8000e72:	dc17      	bgt.n	8000ea4 <parse_number+0x84>
 8000e74:	2b2b      	cmp	r3, #43	; 0x2b
 8000e76:	db40      	blt.n	8000efa <parse_number+0xda>
 8000e78:	3b2b      	subs	r3, #43	; 0x2b
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	409a      	lsls	r2, r3
 8000e7e:	4b4c      	ldr	r3, [pc, #304]	; (8000fb0 <parse_number+0x190>)
 8000e80:	4013      	ands	r3, r2
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	bf14      	ite	ne
 8000e86:	2301      	movne	r3, #1
 8000e88:	2300      	moveq	r3, #0
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d10b      	bne.n	8000ea8 <parse_number+0x88>
 8000e90:	f002 0308 	and.w	r3, r2, #8
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	bf14      	ite	ne
 8000e98:	2301      	movne	r3, #1
 8000e9a:	2300      	moveq	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d111      	bne.n	8000ec6 <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 8000ea2:	e02a      	b.n	8000efa <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 8000ea4:	2b65      	cmp	r3, #101	; 0x65
 8000ea6:	d128      	bne.n	8000efa <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	6899      	ldr	r1, [r3, #8]
 8000eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000eb2:	440b      	add	r3, r1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	7819      	ldrb	r1, [r3, #0]
 8000eb8:	f107 0208 	add.w	r2, r7, #8
 8000ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ebe:	4413      	add	r3, r2
 8000ec0:	460a      	mov	r2, r1
 8000ec2:	701a      	strb	r2, [r3, #0]
                break;
 8000ec4:	e007      	b.n	8000ed6 <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 8000ec6:	f107 0208 	add.w	r2, r7, #8
 8000eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ecc:	4413      	add	r3, r2
 8000ece:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000ed2:	701a      	strb	r2, [r3, #0]
                break;
 8000ed4:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8000ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ed8:	3301      	adds	r3, #1
 8000eda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ede:	2b3e      	cmp	r3, #62	; 0x3e
 8000ee0:	d80d      	bhi.n	8000efe <parse_number+0xde>
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00a      	beq.n	8000efe <parse_number+0xde>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000eee:	441a      	add	r2, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d3b3      	bcc.n	8000e60 <parse_number+0x40>
        }
    }
loop_end:
 8000ef8:	e001      	b.n	8000efe <parse_number+0xde>
                goto loop_end;
 8000efa:	bf00      	nop
 8000efc:	e000      	b.n	8000f00 <parse_number+0xe0>
loop_end:
 8000efe:	bf00      	nop
    number_c_string[i] = '\0';
 8000f00:	f107 0208 	add.w	r2, r7, #8
 8000f04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f06:	4413      	add	r3, r2
 8000f08:	2200      	movs	r2, #0
 8000f0a:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8000f0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f10:	f107 0308 	add.w	r3, r7, #8
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f00a f8e2 	bl	800b0e0 <strtod>
 8000f1c:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 8000f20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d101      	bne.n	8000f2e <parse_number+0x10e>
    {
        return false; /* parse_error */
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e036      	b.n	8000f9c <parse_number+0x17c>
    }

    item->valuedouble = number;
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8000f34:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8000f38:	a31b      	add	r3, pc, #108	; (adr r3, 8000fa8 <parse_number+0x188>)
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000f42:	f7ff fdef 	bl	8000b24 <__aeabi_dcmpge>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d004      	beq.n	8000f56 <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8000f52:	615a      	str	r2, [r3, #20]
 8000f54:	e015      	b.n	8000f82 <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 8000f56:	f04f 0200 	mov.w	r2, #0
 8000f5a:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <parse_number+0x194>)
 8000f5c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000f60:	f7ff fdd6 	bl	8000b10 <__aeabi_dcmple>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d004      	beq.n	8000f74 <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f70:	615a      	str	r2, [r3, #20]
 8000f72:	e006      	b.n	8000f82 <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 8000f74:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000f78:	f7ff fdfe 	bl	8000b78 <__aeabi_d2iz>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2208      	movs	r2, #8
 8000f86:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000f8e:	f107 0208 	add.w	r2, r7, #8
 8000f92:	1a8a      	subs	r2, r1, r2
 8000f94:	441a      	add	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	609a      	str	r2, [r3, #8]
    return true;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3760      	adds	r7, #96	; 0x60
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	ffc00000 	.word	0xffc00000
 8000fac:	41dfffff 	.word	0x41dfffff
 8000fb0:	04007fe5 	.word	0x04007fe5
 8000fb4:	c1e00000 	.word	0xc1e00000

08000fb8 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	e04c      	b.n	8001068 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b2f      	cmp	r3, #47	; 0x2f
 8000fd8:	d90f      	bls.n	8000ffa <parse_hex4+0x42>
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4413      	add	r3, r2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b39      	cmp	r3, #57	; 0x39
 8000fe4:	d809      	bhi.n	8000ffa <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4413      	add	r3, r2
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	3b30      	subs	r3, #48	; 0x30
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	e02d      	b.n	8001056 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4413      	add	r3, r2
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b40      	cmp	r3, #64	; 0x40
 8001004:	d90f      	bls.n	8001026 <parse_hex4+0x6e>
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4413      	add	r3, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b46      	cmp	r3, #70	; 0x46
 8001010:	d809      	bhi.n	8001026 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4413      	add	r3, r2
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	3b37      	subs	r3, #55	; 0x37
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	e017      	b.n	8001056 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	4413      	add	r3, r2
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b60      	cmp	r3, #96	; 0x60
 8001030:	d90f      	bls.n	8001052 <parse_hex4+0x9a>
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4413      	add	r3, r2
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b66      	cmp	r3, #102	; 0x66
 800103c:	d809      	bhi.n	8001052 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4413      	add	r3, r2
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	3b57      	subs	r3, #87	; 0x57
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	e001      	b.n	8001056 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8001052:	2300      	movs	r3, #0
 8001054:	e00c      	b.n	8001070 <parse_hex4+0xb8>
        }

        if (i < 3)
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	2b02      	cmp	r3, #2
 800105a:	d802      	bhi.n	8001062 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	3301      	adds	r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	2b03      	cmp	r3, #3
 800106c:	d9af      	bls.n	8000fce <parse_hex4+0x16>
        }
    }

    return h;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b05      	cmp	r3, #5
 80010b4:	f340 80b7 	ble.w	8001226 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	3302      	adds	r3, #2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff7b 	bl	8000fb8 <parse_hex4>
 80010c2:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80010ca:	d304      	bcc.n	80010d6 <utf16_literal_to_utf8+0x5a>
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80010d2:	f0c0 80aa 	bcc.w	800122a <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80010dc:	d337      	bcc.n	800114e <utf16_literal_to_utf8+0xd2>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80010e4:	d233      	bcs.n	800114e <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	3306      	adds	r3, #6
 80010ea:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80010f0:	230c      	movs	r3, #12
 80010f2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b05      	cmp	r3, #5
 80010fe:	f340 8096 	ble.w	800122e <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b5c      	cmp	r3, #92	; 0x5c
 8001108:	f040 8093 	bne.w	8001232 <utf16_literal_to_utf8+0x1b6>
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3301      	adds	r3, #1
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b75      	cmp	r3, #117	; 0x75
 8001114:	f040 808d 	bne.w	8001232 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3302      	adds	r3, #2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff4b 	bl	8000fb8 <parse_hex4>
 8001122:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 800112a:	f0c0 8084 	bcc.w	8001236 <utf16_literal_to_utf8+0x1ba>
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001134:	d27f      	bcs.n	8001236 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	029a      	lsls	r2, r3, #10
 800113a:	4b43      	ldr	r3, [pc, #268]	; (8001248 <utf16_literal_to_utf8+0x1cc>)
 800113c:	4013      	ands	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001144:	4313      	orrs	r3, r2
 8001146:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800114c:	e004      	b.n	8001158 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800114e:	2306      	movs	r3, #6
 8001150:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	2b7f      	cmp	r3, #127	; 0x7f
 800115c:	d803      	bhi.n	8001166 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 800115e:	2301      	movs	r3, #1
 8001160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001164:	e01f      	b.n	80011a6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800116c:	d206      	bcs.n	800117c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800116e:	2302      	movs	r3, #2
 8001170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001174:	23c0      	movs	r3, #192	; 0xc0
 8001176:	f887 3020 	strb.w	r3, [r7, #32]
 800117a:	e014      	b.n	80011a6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001182:	d206      	bcs.n	8001192 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001184:	2303      	movs	r3, #3
 8001186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 800118a:	23e0      	movs	r3, #224	; 0xe0
 800118c:	f887 3020 	strb.w	r3, [r7, #32]
 8001190:	e009      	b.n	80011a6 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001198:	d24f      	bcs.n	800123a <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 800119a:	2304      	movs	r3, #4
 800119c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80011a0:	23f0      	movs	r3, #240	; 0xf0
 80011a2:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80011a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011aa:	3b01      	subs	r3, #1
 80011ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80011b0:	e015      	b.n	80011de <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6819      	ldr	r1, [r3, #0]
 80011c0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011c4:	440b      	add	r3, r1
 80011c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	099b      	lsrs	r3, r3, #6
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80011d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011d8:	3b01      	subs	r3, #1
 80011da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80011de:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1e5      	bne.n	80011b2 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80011e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d909      	bls.n	8001202 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	b2d9      	uxtb	r1, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	701a      	strb	r2, [r3, #0]
 8001200:	e007      	b.n	8001212 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	b2da      	uxtb	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800121a:	441a      	add	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001220:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001224:	e00b      	b.n	800123e <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8001226:	bf00      	nop
 8001228:	e008      	b.n	800123c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800122a:	bf00      	nop
 800122c:	e006      	b.n	800123c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800122e:	bf00      	nop
 8001230:	e004      	b.n	800123c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001232:	bf00      	nop
 8001234:	e002      	b.n	800123c <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001236:	bf00      	nop
 8001238:	e000      	b.n	800123c <utf16_literal_to_utf8+0x1c0>
        goto fail;
 800123a:	bf00      	nop

fail:
    return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3728      	adds	r7, #40	; 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	000ffc00 	.word	0x000ffc00

0800124c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	3301      	adds	r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	3301      	adds	r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001276:	2300      	movs	r3, #0
 8001278:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	4413      	add	r3, r2
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b22      	cmp	r3, #34	; 0x22
 8001288:	f040 8103 	bne.w	8001492 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001294:	e017      	b.n	80012c6 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001296:	6a3b      	ldr	r3, [r7, #32]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b5c      	cmp	r3, #92	; 0x5c
 800129c:	d110      	bne.n	80012c0 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800129e:	6a3b      	ldr	r3, [r7, #32]
 80012a0:	1c5a      	adds	r2, r3, #1
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	f080 80f1 	bcs.w	8001496 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	3301      	adds	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
                input_end++;
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	3301      	adds	r3, #1
 80012be:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	3301      	adds	r3, #1
 80012c4:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6a3a      	ldr	r2, [r7, #32]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	461a      	mov	r2, r3
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d203      	bcs.n	80012e0 <parse_string+0x94>
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b22      	cmp	r3, #34	; 0x22
 80012de:	d1da      	bne.n	8001296 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6a3a      	ldr	r2, [r7, #32]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	f080 80d3 	bcs.w	800149a <parse_string+0x24e>
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b22      	cmp	r3, #34	; 0x22
 80012fa:	f040 80ce 	bne.w	800149a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	4413      	add	r3, r2
 8001308:	6a3a      	ldr	r2, [r7, #32]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	461a      	mov	r2, r3
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	3201      	adds	r2, #1
 800131c:	4610      	mov	r0, r2
 800131e:	4798      	blx	r3
 8001320:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80ba 	beq.w	800149e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 800132e:	e094      	b.n	800145a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b5c      	cmp	r3, #92	; 0x5c
 8001336:	d008      	beq.n	800134a <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800133a:	1c53      	adds	r3, r2, #1
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1c59      	adds	r1, r3, #1
 8001342:	60f9      	str	r1, [r7, #12]
 8001344:	7812      	ldrb	r2, [r2, #0]
 8001346:	701a      	strb	r2, [r3, #0]
 8001348:	e087      	b.n	800145a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800134a:	2302      	movs	r3, #2
 800134c:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 800134e:	6a3a      	ldr	r2, [r7, #32]
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	f340 80a4 	ble.w	80014a2 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	3301      	adds	r3, #1
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b75      	cmp	r3, #117	; 0x75
 8001362:	f300 80a0 	bgt.w	80014a6 <parse_string+0x25a>
 8001366:	2b5c      	cmp	r3, #92	; 0x5c
 8001368:	da04      	bge.n	8001374 <parse_string+0x128>
 800136a:	2b22      	cmp	r3, #34	; 0x22
 800136c:	d05c      	beq.n	8001428 <parse_string+0x1dc>
 800136e:	2b2f      	cmp	r3, #47	; 0x2f
 8001370:	d05a      	beq.n	8001428 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001372:	e098      	b.n	80014a6 <parse_string+0x25a>
            switch (input_pointer[1])
 8001374:	3b5c      	subs	r3, #92	; 0x5c
 8001376:	2b19      	cmp	r3, #25
 8001378:	f200 8095 	bhi.w	80014a6 <parse_string+0x25a>
 800137c:	a201      	add	r2, pc, #4	; (adr r2, 8001384 <parse_string+0x138>)
 800137e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001382:	bf00      	nop
 8001384:	08001429 	.word	0x08001429
 8001388:	080014a7 	.word	0x080014a7
 800138c:	080014a7 	.word	0x080014a7
 8001390:	080014a7 	.word	0x080014a7
 8001394:	080014a7 	.word	0x080014a7
 8001398:	080014a7 	.word	0x080014a7
 800139c:	080013ed 	.word	0x080013ed
 80013a0:	080014a7 	.word	0x080014a7
 80013a4:	080014a7 	.word	0x080014a7
 80013a8:	080014a7 	.word	0x080014a7
 80013ac:	080013f9 	.word	0x080013f9
 80013b0:	080014a7 	.word	0x080014a7
 80013b4:	080014a7 	.word	0x080014a7
 80013b8:	080014a7 	.word	0x080014a7
 80013bc:	080014a7 	.word	0x080014a7
 80013c0:	080014a7 	.word	0x080014a7
 80013c4:	080014a7 	.word	0x080014a7
 80013c8:	080014a7 	.word	0x080014a7
 80013cc:	08001405 	.word	0x08001405
 80013d0:	080014a7 	.word	0x080014a7
 80013d4:	080014a7 	.word	0x080014a7
 80013d8:	080014a7 	.word	0x080014a7
 80013dc:	08001411 	.word	0x08001411
 80013e0:	080014a7 	.word	0x080014a7
 80013e4:	0800141d 	.word	0x0800141d
 80013e8:	08001439 	.word	0x08001439
                    *output_pointer++ = '\b';
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	60fa      	str	r2, [r7, #12]
 80013f2:	2208      	movs	r2, #8
 80013f4:	701a      	strb	r2, [r3, #0]
                    break;
 80013f6:	e02c      	b.n	8001452 <parse_string+0x206>
                    *output_pointer++ = '\f';
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	60fa      	str	r2, [r7, #12]
 80013fe:	220c      	movs	r2, #12
 8001400:	701a      	strb	r2, [r3, #0]
                    break;
 8001402:	e026      	b.n	8001452 <parse_string+0x206>
                    *output_pointer++ = '\n';
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	60fa      	str	r2, [r7, #12]
 800140a:	220a      	movs	r2, #10
 800140c:	701a      	strb	r2, [r3, #0]
                    break;
 800140e:	e020      	b.n	8001452 <parse_string+0x206>
                    *output_pointer++ = '\r';
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	60fa      	str	r2, [r7, #12]
 8001416:	220d      	movs	r2, #13
 8001418:	701a      	strb	r2, [r3, #0]
                    break;
 800141a:	e01a      	b.n	8001452 <parse_string+0x206>
                    *output_pointer++ = '\t';
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	60fa      	str	r2, [r7, #12]
 8001422:	2209      	movs	r2, #9
 8001424:	701a      	strb	r2, [r3, #0]
                    break;
 8001426:	e014      	b.n	8001452 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	1c5a      	adds	r2, r3, #1
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	1c59      	adds	r1, r3, #1
 8001430:	60f9      	str	r1, [r7, #12]
 8001432:	7812      	ldrb	r2, [r2, #0]
 8001434:	701a      	strb	r2, [r3, #0]
                    break;
 8001436:	e00c      	b.n	8001452 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	461a      	mov	r2, r3
 800143e:	6a39      	ldr	r1, [r7, #32]
 8001440:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001442:	f7ff fe1b 	bl	800107c <utf16_literal_to_utf8>
 8001446:	4603      	mov	r3, r0
 8001448:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 800144a:	7dfb      	ldrb	r3, [r7, #23]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d02c      	beq.n	80014aa <parse_string+0x25e>
                    break;
 8001450:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001452:	7dfb      	ldrb	r3, [r7, #23]
 8001454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001456:	4413      	add	r3, r2
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800145a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	429a      	cmp	r2, r3
 8001460:	f4ff af66 	bcc.w	8001330 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2210      	movs	r2, #16
 800146e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6a3a      	ldr	r2, [r7, #32]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	461a      	mov	r2, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	609a      	str	r2, [r3, #8]

    return true;
 800148e:	2301      	movs	r3, #1
 8001490:	e01e      	b.n	80014d0 <parse_string+0x284>
        goto fail;
 8001492:	bf00      	nop
 8001494:	e00a      	b.n	80014ac <parse_string+0x260>
                    goto fail;
 8001496:	bf00      	nop
 8001498:	e008      	b.n	80014ac <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800149a:	bf00      	nop
 800149c:	e006      	b.n	80014ac <parse_string+0x260>
            goto fail; /* allocation failure */
 800149e:	bf00      	nop
 80014a0:	e004      	b.n	80014ac <parse_string+0x260>
                goto fail;
 80014a2:	bf00      	nop
 80014a4:	e002      	b.n	80014ac <parse_string+0x260>
                    goto fail;
 80014a6:	bf00      	nop
 80014a8:	e000      	b.n	80014ac <parse_string+0x260>
                        goto fail;
 80014aa:	bf00      	nop

fail:
    if (output != NULL)
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <parse_string+0x26e>
    {
        input_buffer->hooks.deallocate(output);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	69f8      	ldr	r0, [r7, #28]
 80014b8:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d006      	beq.n	80014ce <parse_string+0x282>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	609a      	str	r2, [r3, #8]
    }

    return false;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3728      	adds	r7, #40	; 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <buffer_skip_whitespace+0x16>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e02c      	b.n	800154c <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <buffer_skip_whitespace+0x2c>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	429a      	cmp	r2, r3
 8001502:	d306      	bcc.n	8001512 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	e021      	b.n	800154c <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00d      	beq.n	8001534 <buffer_skip_whitespace+0x5c>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	d207      	bcs.n	8001534 <buffer_skip_whitespace+0x5c>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	4413      	add	r3, r2
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b20      	cmp	r3, #32
 8001532:	d9e9      	bls.n	8001508 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	d104      	bne.n	800154a <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	1e5a      	subs	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800154a:	687b      	ldr	r3, [r7, #4]
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <skip_utf8_bom+0x1e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <skip_utf8_bom+0x1e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <skip_utf8_bom+0x22>
    {
        return NULL;
 8001576:	2300      	movs	r3, #0
 8001578:	e01c      	b.n	80015b4 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d018      	beq.n	80015b2 <skip_utf8_bom+0x5a>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	1d1a      	adds	r2, r3, #4
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	d211      	bcs.n	80015b2 <skip_utf8_bom+0x5a>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	4413      	add	r3, r2
 8001598:	2203      	movs	r2, #3
 800159a:	4908      	ldr	r1, [pc, #32]	; (80015bc <skip_utf8_bom+0x64>)
 800159c:	4618      	mov	r0, r3
 800159e:	f00a fb2c 	bl	800bbfa <strncmp>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d104      	bne.n	80015b2 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	1cda      	adds	r2, r3, #3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80015b2:	687b      	ldr	r3, [r7, #4]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	0800e5a8 	.word	0x0800e5a8

080015c0 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e00c      	b.n	80015f0 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f7fe fe5a 	bl	8000290 <strlen>
 80015dc:	4603      	mov	r3, r0
 80015de:	3301      	adds	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68ba      	ldr	r2, [r7, #8]
 80015e6:	6979      	ldr	r1, [r7, #20]
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f000 f805 	bl	80015f8 <cJSON_ParseWithLengthOpts>
 80015ee:	4603      	mov	r3, r0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08e      	sub	sp, #56	; 0x38
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001606:	f107 0318 	add.w	r3, r7, #24
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800161a:	2300      	movs	r3, #0
 800161c:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 800161e:	4b41      	ldr	r3, [pc, #260]	; (8001724 <cJSON_ParseWithLengthOpts+0x12c>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001624:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <cJSON_ParseWithLengthOpts+0x12c>)
 8001626:	2200      	movs	r2, #0
 8001628:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d042      	beq.n	80016b6 <cJSON_ParseWithLengthOpts+0xbe>
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d03f      	beq.n	80016b6 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001642:	4a39      	ldr	r2, [pc, #228]	; (8001728 <cJSON_ParseWithLengthOpts+0x130>)
 8001644:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001648:	ca07      	ldmia	r2, {r0, r1, r2}
 800164a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800164e:	4836      	ldr	r0, [pc, #216]	; (8001728 <cJSON_ParseWithLengthOpts+0x130>)
 8001650:	f7ff fb7c 	bl	8000d4c <cJSON_New_Item>
 8001654:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8001656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001658:	2b00      	cmp	r3, #0
 800165a:	d02e      	beq.n	80016ba <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 800165c:	f107 0318 	add.w	r3, r7, #24
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff79 	bl	8001558 <skip_utf8_bom>
 8001666:	4603      	mov	r3, r0
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff35 	bl	80014d8 <buffer_skip_whitespace>
 800166e:	4603      	mov	r3, r0
 8001670:	4619      	mov	r1, r3
 8001672:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001674:	f000 f868 	bl	8001748 <parse_value>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d01f      	beq.n	80016be <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00e      	beq.n	80016a2 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001684:	f107 0318 	add.w	r3, r7, #24
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff25 	bl	80014d8 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800168e:	6a3a      	ldr	r2, [r7, #32]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	429a      	cmp	r2, r3
 8001694:	d215      	bcs.n	80016c2 <cJSON_ParseWithLengthOpts+0xca>
 8001696:	69ba      	ldr	r2, [r7, #24]
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	4413      	add	r3, r2
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10f      	bne.n	80016c2 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d004      	beq.n	80016b2 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	6a3b      	ldr	r3, [r7, #32]
 80016ac:	441a      	add	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	601a      	str	r2, [r3, #0]
    }

    return item;
 80016b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b4:	e031      	b.n	800171a <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 80016b6:	bf00      	nop
 80016b8:	e004      	b.n	80016c4 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80016ba:	bf00      	nop
 80016bc:	e002      	b.n	80016c4 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80016be:	bf00      	nop
 80016c0:	e000      	b.n	80016c4 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 80016c2:	bf00      	nop

fail:
    if (item != NULL)
 80016c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 80016ca:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016cc:	f7ff fb54 	bl	8000d78 <cJSON_Delete>
    }

    if (value != NULL)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d020      	beq.n	8001718 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 80016de:	6a3a      	ldr	r2, [r7, #32]
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d202      	bcs.n	80016ec <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 80016e6:	6a3b      	ldr	r3, [r7, #32]
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	e005      	b.n	80016f8 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d004      	beq.n	8001708 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	441a      	add	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <cJSON_ParseWithLengthOpts+0x12c>)
 800170a:	461a      	mov	r2, r3
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001714:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3738      	adds	r7, #56	; 0x38
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000288 	.word	0x20000288
 8001728:	20000000 	.word	0x20000000

0800172c <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff41 	bl	80015c0 <cJSON_ParseWithOpts>
 800173e:	4603      	mov	r3, r0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <parse_value+0x18>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <parse_value+0x1c>
    {
        return false; /* no input */
 8001760:	2300      	movs	r3, #0
 8001762:	e0d2      	b.n	800190a <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d01d      	beq.n	80017a6 <parse_value+0x5e>
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	1d1a      	adds	r2, r3, #4
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	d816      	bhi.n	80017a6 <parse_value+0x5e>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4413      	add	r3, r2
 8001782:	2204      	movs	r2, #4
 8001784:	4963      	ldr	r1, [pc, #396]	; (8001914 <parse_value+0x1cc>)
 8001786:	4618      	mov	r0, r3
 8001788:	f00a fa37 	bl	800bbfa <strncmp>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d109      	bne.n	80017a6 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2204      	movs	r2, #4
 8001796:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	1d1a      	adds	r2, r3, #4
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	609a      	str	r2, [r3, #8]
        return true;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e0b1      	b.n	800190a <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d01d      	beq.n	80017e8 <parse_value+0xa0>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	1d5a      	adds	r2, r3, #5
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d816      	bhi.n	80017e8 <parse_value+0xa0>
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	4413      	add	r3, r2
 80017c4:	2205      	movs	r2, #5
 80017c6:	4954      	ldr	r1, [pc, #336]	; (8001918 <parse_value+0x1d0>)
 80017c8:	4618      	mov	r0, r3
 80017ca:	f00a fa16 	bl	800bbfa <strncmp>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d109      	bne.n	80017e8 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	1d5a      	adds	r2, r3, #5
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	609a      	str	r2, [r3, #8]
        return true;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e090      	b.n	800190a <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d020      	beq.n	8001830 <parse_value+0xe8>
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	1d1a      	adds	r2, r3, #4
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d819      	bhi.n	8001830 <parse_value+0xe8>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4413      	add	r3, r2
 8001806:	2204      	movs	r2, #4
 8001808:	4944      	ldr	r1, [pc, #272]	; (800191c <parse_value+0x1d4>)
 800180a:	4618      	mov	r0, r3
 800180c:	f00a f9f5 	bl	800bbfa <strncmp>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10c      	bne.n	8001830 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2202      	movs	r2, #2
 800181a:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	1d1a      	adds	r2, r3, #4
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	609a      	str	r2, [r3, #8]
        return true;
 800182c:	2301      	movs	r3, #1
 800182e:	e06c      	b.n	800190a <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d013      	beq.n	800185e <parse_value+0x116>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	429a      	cmp	r2, r3
 8001840:	d20d      	bcs.n	800185e <parse_value+0x116>
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	4413      	add	r3, r2
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b22      	cmp	r3, #34	; 0x22
 8001850:	d105      	bne.n	800185e <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001852:	6839      	ldr	r1, [r7, #0]
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff fcf9 	bl	800124c <parse_string>
 800185a:	4603      	mov	r3, r0
 800185c:	e055      	b.n	800190a <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d023      	beq.n	80018ac <parse_value+0x164>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	d21d      	bcs.n	80018ac <parse_value+0x164>
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4413      	add	r3, r2
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b2d      	cmp	r3, #45	; 0x2d
 800187e:	d00f      	beq.n	80018a0 <parse_value+0x158>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b2f      	cmp	r3, #47	; 0x2f
 800188e:	d90d      	bls.n	80018ac <parse_value+0x164>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4413      	add	r3, r2
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b39      	cmp	r3, #57	; 0x39
 800189e:	d805      	bhi.n	80018ac <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 80018a0:	6839      	ldr	r1, [r7, #0]
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff fabc 	bl	8000e20 <parse_number>
 80018a8:	4603      	mov	r3, r0
 80018aa:	e02e      	b.n	800190a <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d013      	beq.n	80018da <parse_value+0x192>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d20d      	bcs.n	80018da <parse_value+0x192>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	4413      	add	r3, r2
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b5b      	cmp	r3, #91	; 0x5b
 80018cc:	d105      	bne.n	80018da <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80018ce:	6839      	ldr	r1, [r7, #0]
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 f825 	bl	8001920 <parse_array>
 80018d6:	4603      	mov	r3, r0
 80018d8:	e017      	b.n	800190a <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <parse_value+0x1c0>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d20d      	bcs.n	8001908 <parse_value+0x1c0>
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	4413      	add	r3, r2
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b7b      	cmp	r3, #123	; 0x7b
 80018fa:	d105      	bne.n	8001908 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 80018fc:	6839      	ldr	r1, [r7, #0]
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f8d2 	bl	8001aa8 <parse_object>
 8001904:	4603      	mov	r3, r0
 8001906:	e000      	b.n	800190a <parse_value+0x1c2>
    }

    return false;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	0800e57c 	.word	0x0800e57c
 8001918:	0800e5ac 	.word	0x0800e5ac
 800191c:	0800e5b4 	.word	0x0800e5b4

08001920 <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800193a:	d301      	bcc.n	8001940 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 800193c:	2300      	movs	r3, #0
 800193e:	e0af      	b.n	8001aa0 <parse_array+0x180>
    }
    input_buffer->depth++;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	4413      	add	r3, r2
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b5b      	cmp	r3, #91	; 0x5b
 8001958:	f040 8094 	bne.w	8001a84 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001966:	6838      	ldr	r0, [r7, #0]
 8001968:	f7ff fdb6 	bl	80014d8 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00d      	beq.n	800198e <parse_array+0x6e>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	429a      	cmp	r2, r3
 800197c:	d207      	bcs.n	800198e <parse_array+0x6e>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	4413      	add	r3, r2
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b5d      	cmp	r3, #93	; 0x5d
 800198c:	d061      	beq.n	8001a52 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <parse_array+0x80>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	d305      	bcc.n	80019ac <parse_array+0x8c>
    {
        input_buffer->offset--;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	1e5a      	subs	r2, r3, #1
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	609a      	str	r2, [r3, #8]
        goto fail;
 80019aa:	e072      	b.n	8001a92 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	1e5a      	subs	r2, r3, #1
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	3310      	adds	r3, #16
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f9c6 	bl	8000d4c <cJSON_New_Item>
 80019c0:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d05f      	beq.n	8001a88 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d104      	bne.n	80019d8 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	e007      	b.n	80019e8 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	1c5a      	adds	r2, r3, #1
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80019f2:	6838      	ldr	r0, [r7, #0]
 80019f4:	f7ff fd70 	bl	80014d8 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80019f8:	6839      	ldr	r1, [r7, #0]
 80019fa:	6938      	ldr	r0, [r7, #16]
 80019fc:	f7ff fea4 	bl	8001748 <parse_value>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d042      	beq.n	8001a8c <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001a06:	6838      	ldr	r0, [r7, #0]
 8001a08:	f7ff fd66 	bl	80014d8 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d00d      	beq.n	8001a2e <parse_array+0x10e>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689a      	ldr	r2, [r3, #8]
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d207      	bcs.n	8001a2e <parse_array+0x10e>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	4413      	add	r3, r2
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b2c      	cmp	r3, #44	; 0x2c
 8001a2c:	d0c3      	beq.n	80019b6 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d02d      	beq.n	8001a90 <parse_array+0x170>
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d227      	bcs.n	8001a90 <parse_array+0x170>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	4413      	add	r3, r2
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b5d      	cmp	r3, #93	; 0x5d
 8001a4e:	d11f      	bne.n	8001a90 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001a50:	e000      	b.n	8001a54 <parse_array+0x134>
        goto success;
 8001a52:	bf00      	nop
    input_buffer->depth--;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	1e5a      	subs	r2, r3, #1
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <parse_array+0x14a>
        head->prev = current_item;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	697a      	ldr	r2, [r7, #20]
 8001a74:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	609a      	str	r2, [r3, #8]

    return true;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e00d      	b.n	8001aa0 <parse_array+0x180>
        goto fail;
 8001a84:	bf00      	nop
 8001a86:	e004      	b.n	8001a92 <parse_array+0x172>
            goto fail; /* allocation failure */
 8001a88:	bf00      	nop
 8001a8a:	e002      	b.n	8001a92 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001a8c:	bf00      	nop
 8001a8e:	e000      	b.n	8001a92 <parse_array+0x172>
        goto fail; /* expected end of array */
 8001a90:	bf00      	nop

fail:
    if (head != NULL)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d002      	beq.n	8001a9e <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001a98:	6978      	ldr	r0, [r7, #20]
 8001a9a:	f7ff f96d 	bl	8000d78 <cJSON_Delete>
    }

    return false;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ac2:	d301      	bcc.n	8001ac8 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e0ea      	b.n	8001c9e <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f000 80d0 	beq.w	8001c7a <parse_object+0x1d2>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	f080 80c9 	bcs.w	8001c7a <parse_object+0x1d2>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4413      	add	r3, r2
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b7b      	cmp	r3, #123	; 0x7b
 8001af6:	f040 80c0 	bne.w	8001c7a <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001b04:	6838      	ldr	r0, [r7, #0]
 8001b06:	f7ff fce7 	bl	80014d8 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00e      	beq.n	8001b2e <parse_object+0x86>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d208      	bcs.n	8001b2e <parse_object+0x86>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b7d      	cmp	r3, #125	; 0x7d
 8001b2a:	f000 808d 	beq.w	8001c48 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <parse_object+0x98>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d305      	bcc.n	8001b4c <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	1e5a      	subs	r2, r3, #1
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	609a      	str	r2, [r3, #8]
        goto fail;
 8001b4a:	e0a1      	b.n	8001c90 <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	1e5a      	subs	r2, r3, #1
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	3310      	adds	r3, #16
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff f8f6 	bl	8000d4c <cJSON_New_Item>
 8001b60:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 808a 	beq.w	8001c7e <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d104      	bne.n	8001b7a <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
 8001b78:	e007      	b.n	8001b8a <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001b94:	6838      	ldr	r0, [r7, #0]
 8001b96:	f7ff fc9f 	bl	80014d8 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001b9a:	6839      	ldr	r1, [r7, #0]
 8001b9c:	6938      	ldr	r0, [r7, #16]
 8001b9e:	f7ff fb55 	bl	800124c <parse_string>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d06c      	beq.n	8001c82 <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001ba8:	6838      	ldr	r0, [r7, #0]
 8001baa:	f7ff fc95 	bl	80014d8 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d061      	beq.n	8001c86 <parse_object+0x1de>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d25b      	bcs.n	8001c86 <parse_object+0x1de>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b3a      	cmp	r3, #58	; 0x3a
 8001bdc:	d153      	bne.n	8001c86 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001be8:	6838      	ldr	r0, [r7, #0]
 8001bea:	f7ff fc75 	bl	80014d8 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001bee:	6839      	ldr	r1, [r7, #0]
 8001bf0:	6938      	ldr	r0, [r7, #16]
 8001bf2:	f7ff fda9 	bl	8001748 <parse_value>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d046      	beq.n	8001c8a <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001bfc:	6838      	ldr	r0, [r7, #0]
 8001bfe:	f7ff fc6b 	bl	80014d8 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00d      	beq.n	8001c24 <parse_object+0x17c>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d207      	bcs.n	8001c24 <parse_object+0x17c>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b2c      	cmp	r3, #44	; 0x2c
 8001c22:	d098      	beq.n	8001b56 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d031      	beq.n	8001c8e <parse_object+0x1e6>
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d22b      	bcs.n	8001c8e <parse_object+0x1e6>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	4413      	add	r3, r2
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b7d      	cmp	r3, #125	; 0x7d
 8001c44:	d123      	bne.n	8001c8e <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8001c46:	e000      	b.n	8001c4a <parse_object+0x1a2>
        goto success; /* empty object */
 8001c48:	bf00      	nop
    input_buffer->depth--;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	1e5a      	subs	r2, r3, #1
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <parse_object+0x1b8>
        head->prev = current_item;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2240      	movs	r2, #64	; 0x40
 8001c64:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	609a      	str	r2, [r3, #8]
    return true;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e011      	b.n	8001c9e <parse_object+0x1f6>
        goto fail; /* not an object */
 8001c7a:	bf00      	nop
 8001c7c:	e008      	b.n	8001c90 <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8001c7e:	bf00      	nop
 8001c80:	e006      	b.n	8001c90 <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8001c82:	bf00      	nop
 8001c84:	e004      	b.n	8001c90 <parse_object+0x1e8>
            goto fail; /* invalid object */
 8001c86:	bf00      	nop
 8001c88:	e002      	b.n	8001c90 <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8001c8a:	bf00      	nop
 8001c8c:	e000      	b.n	8001c90 <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8001c8e:	bf00      	nop

fail:
    if (head != NULL)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff f86e 	bl	8000d78 <cJSON_Delete>
    }

    return false;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d002      	beq.n	8001cc2 <get_object_item+0x1c>
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <get_object_item+0x20>
    {
        return NULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e033      	b.n	8001d2e <get_object_item+0x88>
    }

    current_element = object->child;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d017      	beq.n	8001d02 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001cd2:	e002      	b.n	8001cda <get_object_item+0x34>
        {
            current_element = current_element->next;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d01c      	beq.n	8001d1a <get_object_item+0x74>
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d018      	beq.n	8001d1a <get_object_item+0x74>
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4619      	mov	r1, r3
 8001cee:	68b8      	ldr	r0, [r7, #8]
 8001cf0:	f7fe fa6e 	bl	80001d0 <strcmp>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1ec      	bne.n	8001cd4 <get_object_item+0x2e>
 8001cfa:	e00e      	b.n	8001d1a <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <get_object_item+0x74>
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	68b8      	ldr	r0, [r7, #8]
 8001d10:	f7fe ffb0 	bl	8000c74 <case_insensitive_strcmp>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <get_object_item+0x82>
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <get_object_item+0x86>
        return NULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e000      	b.n	8001d2e <get_object_item+0x88>
    }

    return current_element;
 8001d2c:	697b      	ldr	r3, [r7, #20]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <cJSON_GetObjectItemCaseSensitive>:
{
    return get_object_item(object, string, false);
}

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, true);
 8001d40:	2201      	movs	r2, #1
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff ffae 	bl	8001ca6 <get_object_item>
 8001d4a:	4603      	mov	r3, r0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <cJSON_IsNumber+0x12>
    {
        return false;
 8001d62:	2300      	movs	r3, #0
 8001d64:	e007      	b.n	8001d76 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	bf0c      	ite	eq
 8001d70:	2301      	moveq	r3, #1
 8001d72:	2300      	movne	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <cJSON_IsString>:

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <cJSON_IsString+0x12>
    {
        return false;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e007      	b.n	8001da4 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b10      	cmp	r3, #16
 8001d9c:	bf0c      	ite	eq
 8001d9e:	2301      	moveq	r3, #1
 8001da0:	2300      	movne	r3, #0
 8001da2:	b2db      	uxtb	r3, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	f2ad 5df4 	subw	sp, sp, #1524	; 0x5f4
 8001db6:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001db8:	f001 fdac 	bl	8003914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dbc:	f000 fdca 	bl	8002954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc0:	f001 f8a2 	bl	8002f08 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dc4:	f001 f882 	bl	8002ecc <MX_DMA_Init>
  MX_I2C1_Init();
 8001dc8:	f000 ffd8 	bl	8002d7c <MX_I2C1_Init>
  MX_ADC2_Init();
 8001dcc:	f000 fe24 	bl	8002a18 <MX_ADC2_Init>
  MX_HRTIM1_Init();
 8001dd0:	f000 fe82 	bl	8002ad8 <MX_HRTIM1_Init>
  MX_USART2_UART_Init();
 8001dd4:	f001 f84a 	bl	8002e6c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001dd8:	f001 f810 	bl	8002dfc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001ddc:	2100      	movs	r1, #0
 8001dde:	488c      	ldr	r0, [pc, #560]	; (8002010 <main+0x260>)
 8001de0:	f002 f8ac 	bl	8003f3c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) adc_buf, ADC_BUF_LEN);
 8001de4:	2297      	movs	r2, #151	; 0x97
 8001de6:	498b      	ldr	r1, [pc, #556]	; (8002014 <main+0x264>)
 8001de8:	4889      	ldr	r0, [pc, #548]	; (8002010 <main+0x260>)
 8001dea:	f001 ffcd 	bl	8003d88 <HAL_ADC_Start_DMA>
	// Buffers for I2C
	uint8_t aTxRegPtr[1];
	uint8_t aTxData[2];

	// Set current sensor averaging
	aTxRegPtr[0] = 0x00;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f887 353c 	strb.w	r3, [r7, #1340]	; 0x53c
	aTxData[0] = 0b01000111;
 8001df4:	2347      	movs	r3, #71	; 0x47
 8001df6:	f887 3538 	strb.w	r3, [r7, #1336]	; 0x538
	aTxData[1] = 0b00100111;
 8001dfa:	2327      	movs	r3, #39	; 0x27
 8001dfc:	f887 3539 	strb.w	r3, [r7, #1337]	; 0x539
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
			(uint16_t) aTxRegPtr[0], 1, (uint8_t*) aTxData, 2, HAL_MAX_DELAY);
 8001e00:	f897 353c 	ldrb.w	r3, [r7, #1340]	; 0x53c
	HAL_I2C_Mem_Write(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0a:	9302      	str	r3, [sp, #8]
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	2301      	movs	r3, #1
 8001e18:	2180      	movs	r1, #128	; 0x80
 8001e1a:	487f      	ldr	r0, [pc, #508]	; (8002018 <main+0x268>)
 8001e1c:	f004 fc56 	bl	80066cc <HAL_I2C_Mem_Write>

	double current_duty = STARTING_DUTY;
 8001e20:	a373      	add	r3, pc, #460	; (adr r3, 8001ff0 <main+0x240>)
 8001e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e26:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 8001e2a:	e9c1 2300 	strd	r2, r3, [r1]
	double cal_duty = current_duty;
 8001e2e:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8001e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e36:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 8001e3a:	e9c1 2300 	strd	r2, r3, [r1]
	double max_duty = MAX_DUTY_CALIBRATION;
 8001e3e:	a36e      	add	r3, pc, #440	; (adr r3, 8001ff8 <main+0x248>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 8001e48:	e9c1 2300 	strd	r2, r3, [r1]
	double min_duty = MIN_DUTY_CALIBRATION;
 8001e4c:	a36c      	add	r3, pc, #432	; (adr r3, 8002000 <main+0x250>)
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8001e56:	e9c1 2300 	strd	r2, r3, [r1]
	uint16_t signal_period = 604;
 8001e5a:	f44f 7317 	mov.w	r3, #604	; 0x25c
 8001e5e:	f8a7 354e 	strh.w	r3, [r7, #1358]	; 0x54e
	uint16_t compare1_val = STARTING_DUTY * signal_period;
 8001e62:	f8b7 354e 	ldrh.w	r3, [r7, #1358]	; 0x54e
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fb6c 	bl	8000544 <__aeabi_i2d>
 8001e6c:	a360      	add	r3, pc, #384	; (adr r3, 8001ff0 <main+0x240>)
 8001e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e72:	f7fe fbd1 	bl	8000618 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f7fe fea3 	bl	8000bc8 <__aeabi_d2uiz>
 8001e82:	4603      	mov	r3, r0
 8001e84:	f8a7 354c 	strh.w	r3, [r7, #1356]	; 0x54c
	uint16_t compare3_val = compare1_val + signal_period / 2;
 8001e88:	f8b7 354e 	ldrh.w	r3, [r7, #1358]	; 0x54e
 8001e8c:	085b      	lsrs	r3, r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	f8b7 354c 	ldrh.w	r3, [r7, #1356]	; 0x54c
 8001e94:	4413      	add	r3, r2
 8001e96:	f8a7 354a 	strh.w	r3, [r7, #1354]	; 0x54a

	HAL_HRTIM_WaveformCountStart(&hhrtim1,
 8001e9a:	f44f 21e0 	mov.w	r1, #458752	; 0x70000
 8001e9e:	485f      	ldr	r0, [pc, #380]	; (800201c <main+0x26c>)
 8001ea0:	f003 fdeb 	bl	8005a7a <HAL_HRTIM_WaveformCountStart>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_MASTER | HRTIM_TIMERID_TIMER_B);
	HAL_HRTIM_WaveformOutputStart(&hhrtim1,
 8001ea4:	2103      	movs	r1, #3
 8001ea6:	485d      	ldr	r0, [pc, #372]	; (800201c <main+0x26c>)
 8001ea8:	f003 fd8d 	bl	80059c6 <HAL_HRTIM_WaveformOutputStart>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2);
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 8001eac:	4b5b      	ldr	r3, [pc, #364]	; (800201c <main+0x26c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f8b7 254c 	ldrh.w	r2, [r7, #1356]	; 0x54c
 8001eb4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			HRTIM_COMPAREUNIT_1, compare1_val);
	__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 8001eb8:	4b58      	ldr	r3, [pc, #352]	; (800201c <main+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8b7 254a 	ldrh.w	r2, [r7, #1354]	; 0x54a
 8001ec0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			HRTIM_COMPAREUNIT_3, compare3_val);
	HAL_HRTIM_SoftwareUpdate(&hhrtim1,
 8001ec4:	2107      	movs	r1, #7
 8001ec6:	4855      	ldr	r0, [pc, #340]	; (800201c <main+0x26c>)
 8001ec8:	f003 fe02 	bl	8005ad0 <HAL_HRTIM_SoftwareUpdate>

	int16_t tuning;
	uint16_t adc_max;
	uint8_t low_vds_count;

	uint8_t zero_cross = 103;
 8001ecc:	2367      	movs	r3, #103	; 0x67
 8001ece:	f887 3549 	strb.w	r3, [r7, #1353]	; 0x549
	uint8_t low_vds_count_threshold = current_duty * ADC_BUF_LEN - 1;
 8001ed2:	a34d      	add	r3, pc, #308	; (adr r3, 8002008 <main+0x258>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 8001edc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ee0:	f7fe fb9a 	bl	8000618 <__aeabi_dmul>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	4b4b      	ldr	r3, [pc, #300]	; (8002020 <main+0x270>)
 8001ef2:	f7fe f9d9 	bl	80002a8 <__aeabi_dsub>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4610      	mov	r0, r2
 8001efc:	4619      	mov	r1, r3
 8001efe:	f7fe fe63 	bl	8000bc8 <__aeabi_d2uiz>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f887 359c 	strb.w	r3, [r7, #1436]	; 0x59c
	uint16_t low_vds_threshold = 200;
 8001f08:	23c8      	movs	r3, #200	; 0xc8
 8001f0a:	f8a7 3546 	strh.w	r3, [r7, #1350]	; 0x546
	uint16_t vds_checking_threshold = 1800;
 8001f0e:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 8001f12:	f8a7 3544 	strh.w	r3, [r7, #1348]	; 0x544
	int16_t tuning_threshold = 400;
 8001f16:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001f1a:	f8a7 3542 	strh.w	r3, [r7, #1346]	; 0x542


	char json[1024];

	double alert_temp1 = 0, alert_temp2 = 0, alert_voltage = 0, alert_current = 0;
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8001f2a:	e9c1 2300 	strd	r2, r3, [r1]
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 8001f3a:	e9c1 2300 	strd	r2, r3, [r1]
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8001f4a:	e9c1 2300 	strd	r2, r3, [r1]
 8001f4e:	f04f 0200 	mov.w	r2, #0
 8001f52:	f04f 0300 	mov.w	r3, #0
 8001f56:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 8001f5a:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_UART_Receive_IT(&huart2, &rxBuffer[rxIndex], 1); // Enable UART receive interrupt
 8001f5e:	4b31      	ldr	r3, [pc, #196]	; (8002024 <main+0x274>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b30      	ldr	r3, [pc, #192]	; (8002028 <main+0x278>)
 8001f68:	4413      	add	r3, r2
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	482f      	ldr	r0, [pc, #188]	; (800202c <main+0x27c>)
 8001f70:	f006 ffb4 	bl	8008edc <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8001f74:	482e      	ldr	r0, [pc, #184]	; (8002030 <main+0x280>)
 8001f76:	f006 fc5d 	bl	8008834 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		adc_max = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f8a7 359e 	strh.w	r3, [r7, #1438]	; 0x59e
		low_vds_count = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f887 359d 	strb.w	r3, [r7, #1437]	; 0x59d
		uint16_t adc_buf2[ADC_BUF_LEN];

		/* Transfer buffer and find maximum value */
		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8001f8c:	e028      	b.n	8001fe0 <main+0x230>
			adc_buf2[i] = adc_buf[i]; // convert to real value
 8001f8e:	4a21      	ldr	r2, [pc, #132]	; (8002014 <main+0x264>)
 8001f90:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8001f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f98:	b299      	uxth	r1, r3
 8001f9a:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8001f9e:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 8001fa2:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8001fa6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			if (adc_buf2[i] > adc_max) {
 8001faa:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8001fae:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 8001fb2:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8001fb6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001fba:	f8b7 259e 	ldrh.w	r2, [r7, #1438]	; 0x59e
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d209      	bcs.n	8001fd6 <main+0x226>
				adc_max = adc_buf2[i];	// find maximum value in buffer
 8001fc2:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8001fc6:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 8001fca:	f8d7 2574 	ldr.w	r2, [r7, #1396]	; 0x574
 8001fce:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001fd2:	f8a7 359e 	strh.w	r3, [r7, #1438]	; 0x59e
		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001fd6:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 8001fe0:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8001fe4:	2b96      	cmp	r3, #150	; 0x96
 8001fe6:	ddd2      	ble.n	8001f8e <main+0x1de>
			}
		}

		/* Count how much values are 'zero' */
		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 8001fee:	e03d      	b.n	800206c <main+0x2bc>
 8001ff0:	33333333 	.word	0x33333333
 8001ff4:	3fd33333 	.word	0x3fd33333
 8001ff8:	9999999a 	.word	0x9999999a
 8001ffc:	3fd99999 	.word	0x3fd99999
 8002000:	9999999a 	.word	0x9999999a
 8002004:	3fc99999 	.word	0x3fc99999
 8002008:	00000000 	.word	0x00000000
 800200c:	4062e000 	.word	0x4062e000
 8002010:	20000290 	.word	0x20000290
 8002014:	2000052c 	.word	0x2000052c
 8002018:	20000400 	.word	0x20000400
 800201c:	20000324 	.word	0x20000324
 8002020:	3ff00000 	.word	0x3ff00000
 8002024:	20000a5c 	.word	0x20000a5c
 8002028:	2000065c 	.word	0x2000065c
 800202c:	200004a0 	.word	0x200004a0
 8002030:	20000454 	.word	0x20000454
			if (adc_buf2[i] < low_vds_threshold
 8002034:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8002038:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 800203c:	f8d7 2570 	ldr.w	r2, [r7, #1392]	; 0x570
 8002040:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002044:	f8b7 2546 	ldrh.w	r2, [r7, #1350]	; 0x546
 8002048:	429a      	cmp	r2, r3
 800204a:	d90a      	bls.n	8002062 <main+0x2b2>
					&& adc_max > vds_checking_threshold) {
 800204c:	f8b7 259e 	ldrh.w	r2, [r7, #1438]	; 0x59e
 8002050:	f8b7 3544 	ldrh.w	r3, [r7, #1348]	; 0x544
 8002054:	429a      	cmp	r2, r3
 8002056:	d904      	bls.n	8002062 <main+0x2b2>
				low_vds_count++;
 8002058:	f897 359d 	ldrb.w	r3, [r7, #1437]	; 0x59d
 800205c:	3301      	adds	r3, #1
 800205e:	f887 359d 	strb.w	r3, [r7, #1437]	; 0x59d
		for (int i = 0; i < ADC_BUF_LEN; i++) {
 8002062:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8002066:	3301      	adds	r3, #1
 8002068:	f8c7 3570 	str.w	r3, [r7, #1392]	; 0x570
 800206c:	f8d7 3570 	ldr.w	r3, [r7, #1392]	; 0x570
 8002070:	2b96      	cmp	r3, #150	; 0x96
 8002072:	dddf      	ble.n	8002034 <main+0x284>
			}
		}

		/* Find hard-switching value */
		tuning = adc_buf2[zero_cross];
 8002074:	f897 2549 	ldrb.w	r2, [r7, #1353]	; 0x549
 8002078:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800207c:	f2a3 53bc 	subw	r3, r3, #1468	; 0x5bc
 8002080:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002084:	f8a7 3540 	strh.w	r3, [r7, #1344]	; 0x540

		if ((currentState == STATE_CALIBRATING) || (currentState == STATE_LOCALIZATION))
 8002088:	4bd5      	ldr	r3, [pc, #852]	; (80023e0 <main+0x630>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d003      	beq.n	8002098 <main+0x2e8>
 8002090:	4bd3      	ldr	r3, [pc, #844]	; (80023e0 <main+0x630>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b02      	cmp	r3, #2
 8002096:	d10d      	bne.n	80020b4 <main+0x304>
		{
			//set duty limits
			max_duty = MAX_DUTY_CALIBRATION;
 8002098:	a3bf      	add	r3, pc, #764	; (adr r3, 8002398 <main+0x5e8>)
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 80020a2:	e9c1 2300 	strd	r2, r3, [r1]
			min_duty = MIN_DUTY_CALIBRATION;
 80020a6:	a3be      	add	r3, pc, #760	; (adr r3, 80023a0 <main+0x5f0>)
 80020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ac:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 80020b0:	e9c1 2300 	strd	r2, r3, [r1]
		}

		// I2C readings
		uint8_t aRxBuffer[2];

		aTxRegPtr[0] = 0x02;
 80020b4:	2302      	movs	r3, #2
 80020b6:	f887 353c 	strb.w	r3, [r7, #1340]	; 0x53c
		aRxBuffer[0] = 0x00;
 80020ba:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 80020be:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
		aRxBuffer[1] = 0x00;
 80020c6:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 80020ca:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80020ce:	2200      	movs	r2, #0
 80020d0:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
 80020d2:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	2301      	movs	r3, #1
 80020de:	2180      	movs	r1, #128	; 0x80
 80020e0:	48c0      	ldr	r0, [pc, #768]	; (80023e4 <main+0x634>)
 80020e2:	f004 f909 	bl	80062f8 <HAL_I2C_Master_Transmit>
				(uint8_t*) aTxRegPtr, 1, HAL_MAX_DELAY);
		HAL_I2C_Master_Receive(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
 80020e6:	f507 729a 	add.w	r2, r7, #308	; 0x134
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	2302      	movs	r3, #2
 80020f2:	2180      	movs	r1, #128	; 0x80
 80020f4:	48bb      	ldr	r0, [pc, #748]	; (80023e4 <main+0x634>)
 80020f6:	f004 f9f3 	bl	80064e0 <HAL_I2C_Master_Receive>
				(uint8_t*) aRxBuffer, 2, HAL_MAX_DELAY);
		double voltage = (aRxBuffer[0] << 8 | aRxBuffer[1]) * 0.00125 * 20.1 / 5.1;
 80020fa:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 80020fe:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 800210a:	f2a2 428c 	subw	r2, r2, #1164	; 0x48c
 800210e:	7852      	ldrb	r2, [r2, #1]
 8002110:	4313      	orrs	r3, r2
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fa16 	bl	8000544 <__aeabi_i2d>
 8002118:	a3a3      	add	r3, pc, #652	; (adr r3, 80023a8 <main+0x5f8>)
 800211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211e:	f7fe fa7b 	bl	8000618 <__aeabi_dmul>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	a3a1      	add	r3, pc, #644	; (adr r3, 80023b0 <main+0x600>)
 800212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002130:	f7fe fa72 	bl	8000618 <__aeabi_dmul>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4610      	mov	r0, r2
 800213a:	4619      	mov	r1, r3
 800213c:	a39e      	add	r3, pc, #632	; (adr r3, 80023b8 <main+0x608>)
 800213e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002142:	f7fe fb93 	bl	800086c <__aeabi_ddiv>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 800214e:	e9c1 2300 	strd	r2, r3, [r1]

		aTxRegPtr[0] = 0x00;
 8002152:	2300      	movs	r3, #0
 8002154:	f887 353c 	strb.w	r3, [r7, #1340]	; 0x53c
		aRxBuffer[0] = 0x00;
 8002158:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800215c:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
		aRxBuffer[1] = 0x00;
 8002164:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8002168:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800216c:	2200      	movs	r2, #0
 800216e:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) I2C_ADD_TEMP1 << 1,
 8002170:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 8002174:	f04f 33ff 	mov.w	r3, #4294967295
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2301      	movs	r3, #1
 800217c:	2190      	movs	r1, #144	; 0x90
 800217e:	4899      	ldr	r0, [pc, #612]	; (80023e4 <main+0x634>)
 8002180:	f004 f8ba 	bl	80062f8 <HAL_I2C_Master_Transmit>
				(uint8_t*) aTxRegPtr, 1, HAL_MAX_DELAY);
		HAL_I2C_Master_Receive(&hi2c1, (uint16_t) I2C_ADD_TEMP1 << 1,
 8002184:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2302      	movs	r3, #2
 8002190:	2190      	movs	r1, #144	; 0x90
 8002192:	4894      	ldr	r0, [pc, #592]	; (80023e4 <main+0x634>)
 8002194:	f004 f9a4 	bl	80064e0 <HAL_I2C_Master_Receive>
				(uint8_t*) aRxBuffer, 2, HAL_MAX_DELAY);
		double temp1 = (aRxBuffer[0] << 4 | aRxBuffer[1] >> 4) * 0.0625;
 8002198:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800219c:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 80021a8:	f2a2 428c 	subw	r2, r2, #1164	; 0x48c
 80021ac:	7852      	ldrb	r2, [r2, #1]
 80021ae:	0912      	lsrs	r2, r2, #4
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	4313      	orrs	r3, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe f9c5 	bl	8000544 <__aeabi_i2d>
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	4b8a      	ldr	r3, [pc, #552]	; (80023e8 <main+0x638>)
 80021c0:	f7fe fa2a 	bl	8000618 <__aeabi_dmul>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 80021cc:	e9c1 2300 	strd	r2, r3, [r1]

		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) I2C_ADD_TEMP2 << 1U,
 80021d0:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2301      	movs	r3, #1
 80021dc:	2192      	movs	r1, #146	; 0x92
 80021de:	4881      	ldr	r0, [pc, #516]	; (80023e4 <main+0x634>)
 80021e0:	f004 f88a 	bl	80062f8 <HAL_I2C_Master_Transmit>
				(uint8_t*) aTxRegPtr, 1, HAL_MAX_DELAY);
		HAL_I2C_Master_Receive(&hi2c1, (uint16_t) I2C_ADD_TEMP2 << 1U,
 80021e4:	f507 729a 	add.w	r2, r7, #308	; 0x134
 80021e8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	2302      	movs	r3, #2
 80021f0:	2192      	movs	r1, #146	; 0x92
 80021f2:	487c      	ldr	r0, [pc, #496]	; (80023e4 <main+0x634>)
 80021f4:	f004 f974 	bl	80064e0 <HAL_I2C_Master_Receive>
				(uint8_t*) aRxBuffer, 2, HAL_MAX_DELAY);
		double temp2 = (aRxBuffer[0] << 4 | aRxBuffer[1] >> 4) * 0.0625;
 80021f8:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 80021fc:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 8002208:	f2a2 428c 	subw	r2, r2, #1164	; 0x48c
 800220c:	7852      	ldrb	r2, [r2, #1]
 800220e:	0912      	lsrs	r2, r2, #4
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	4313      	orrs	r3, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe f995 	bl	8000544 <__aeabi_i2d>
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	4b72      	ldr	r3, [pc, #456]	; (80023e8 <main+0x638>)
 8002220:	f7fe f9fa 	bl	8000618 <__aeabi_dmul>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 800222c:	e9c1 2300 	strd	r2, r3, [r1]

		aTxRegPtr[0] = 0x01;
 8002230:	2301      	movs	r3, #1
 8002232:	f887 353c 	strb.w	r3, [r7, #1340]	; 0x53c
		aRxBuffer[0] = 0x00;
 8002236:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800223a:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
		aRxBuffer[1] = 0x00;
 8002242:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8002246:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800224a:	2200      	movs	r2, #0
 800224c:	705a      	strb	r2, [r3, #1]
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
 800224e:	f207 523c 	addw	r2, r7, #1340	; 0x53c
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2301      	movs	r3, #1
 800225a:	2180      	movs	r1, #128	; 0x80
 800225c:	4861      	ldr	r0, [pc, #388]	; (80023e4 <main+0x634>)
 800225e:	f004 f84b 	bl	80062f8 <HAL_I2C_Master_Transmit>
				(uint8_t*) aTxRegPtr, 1, HAL_MAX_DELAY);
		HAL_I2C_Master_Receive(&hi2c1, (uint16_t) I2C_ADD_PWR << 1U,
 8002262:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	2302      	movs	r3, #2
 800226e:	2180      	movs	r1, #128	; 0x80
 8002270:	485c      	ldr	r0, [pc, #368]	; (80023e4 <main+0x634>)
 8002272:	f004 f935 	bl	80064e0 <HAL_I2C_Master_Receive>
				(uint8_t*) aRxBuffer, 2, HAL_MAX_DELAY);
		double current = (int16_t) (aRxBuffer[0] << 8 | aRxBuffer[1])
 8002276:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800227a:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	b21a      	sxth	r2, r3
 8002284:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8002288:	f2a3 438c 	subw	r3, r3, #1164	; 0x48c
 800228c:	785b      	ldrb	r3, [r3, #1]
 800228e:	b21b      	sxth	r3, r3
 8002290:	4313      	orrs	r3, r2
 8002292:	b21b      	sxth	r3, r3
				* 0.0000025 / 0.012;
 8002294:	4618      	mov	r0, r3
 8002296:	f7fe f955 	bl	8000544 <__aeabi_i2d>
 800229a:	a349      	add	r3, pc, #292	; (adr r3, 80023c0 <main+0x610>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe f9ba 	bl	8000618 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
		double current = (int16_t) (aRxBuffer[0] << 8 | aRxBuffer[1])
 80022ac:	a346      	add	r3, pc, #280	; (adr r3, 80023c8 <main+0x618>)
 80022ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b2:	f7fe fadb 	bl	800086c <__aeabi_ddiv>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 80022be:	e9c1 2300 	strd	r2, r3, [r1]


		// check for High Switching or Diode Conducting
		// avoid transient cycle
		if (adc_max > vds_checking_threshold)
 80022c2:	f8b7 259e 	ldrh.w	r2, [r7, #1438]	; 0x59e
 80022c6:	f8b7 3544 	ldrh.w	r3, [r7, #1348]	; 0x544
 80022ca:	429a      	cmp	r2, r3
 80022cc:	f240 8182 	bls.w	80025d4 <main+0x824>
		{
			if (tuning > tuning_threshold) {
 80022d0:	f9b7 2540 	ldrsh.w	r2, [r7, #1344]	; 0x540
 80022d4:	f9b7 3542 	ldrsh.w	r3, [r7, #1346]	; 0x542
 80022d8:	429a      	cmp	r2, r3
 80022da:	f340 809a 	ble.w	8002412 <main+0x662>
				current_duty = current_duty - DUTY_CYCLE_SINGLE_CHANGE;
 80022de:	a33c      	add	r3, pc, #240	; (adr r3, 80023d0 <main+0x620>)
 80022e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e4:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 80022e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022ec:	f7fd ffdc 	bl	80002a8 <__aeabi_dsub>
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 80022f8:	e9c1 2300 	strd	r2, r3, [r1]
				low_vds_count_threshold = current_duty * ADC_BUF_LEN - 1;
 80022fc:	a336      	add	r3, pc, #216	; (adr r3, 80023d8 <main+0x628>)
 80022fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002302:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 8002306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800230a:	f7fe f985 	bl	8000618 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	4b34      	ldr	r3, [pc, #208]	; (80023ec <main+0x63c>)
 800231c:	f7fd ffc4 	bl	80002a8 <__aeabi_dsub>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f7fe fc4e 	bl	8000bc8 <__aeabi_d2uiz>
 800232c:	4603      	mov	r3, r0
 800232e:	f887 359c 	strb.w	r3, [r7, #1436]	; 0x59c
				if (current_duty > min_duty)
 8002332:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8002336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233a:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 800233e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002342:	f7fe fbf9 	bl	8000b38 <__aeabi_dcmpgt>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d05e      	beq.n	800240a <main+0x65a>
				{
					compare1_val = current_duty * signal_period;
 800234c:	f8b7 354e 	ldrh.w	r3, [r7, #1358]	; 0x54e
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe f8f7 	bl	8000544 <__aeabi_i2d>
 8002356:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800235a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235e:	f7fe f95b 	bl	8000618 <__aeabi_dmul>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4610      	mov	r0, r2
 8002368:	4619      	mov	r1, r3
 800236a:	f7fe fc2d 	bl	8000bc8 <__aeabi_d2uiz>
 800236e:	4603      	mov	r3, r0
 8002370:	f8a7 354c 	strh.w	r3, [r7, #1356]	; 0x54c
					compare3_val = compare1_val + signal_period / 2;
 8002374:	f8b7 354e 	ldrh.w	r3, [r7, #1358]	; 0x54e
 8002378:	085b      	lsrs	r3, r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	f8b7 354c 	ldrh.w	r3, [r7, #1356]	; 0x54c
 8002380:	4413      	add	r3, r2
 8002382:	f8a7 354a 	strh.w	r3, [r7, #1354]	; 0x54a
					__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 8002386:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <main+0x640>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f8b7 254c 	ldrh.w	r2, [r7, #1356]	; 0x54c
 800238e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8002392:	e02f      	b.n	80023f4 <main+0x644>
 8002394:	f3af 8000 	nop.w
 8002398:	9999999a 	.word	0x9999999a
 800239c:	3fd99999 	.word	0x3fd99999
 80023a0:	9999999a 	.word	0x9999999a
 80023a4:	3fc99999 	.word	0x3fc99999
 80023a8:	47ae147b 	.word	0x47ae147b
 80023ac:	3f547ae1 	.word	0x3f547ae1
 80023b0:	9999999a 	.word	0x9999999a
 80023b4:	40341999 	.word	0x40341999
 80023b8:	66666666 	.word	0x66666666
 80023bc:	40146666 	.word	0x40146666
 80023c0:	88e368f1 	.word	0x88e368f1
 80023c4:	3ec4f8b5 	.word	0x3ec4f8b5
 80023c8:	bc6a7efa 	.word	0xbc6a7efa
 80023cc:	3f889374 	.word	0x3f889374
 80023d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80023d4:	3f60624d 	.word	0x3f60624d
 80023d8:	00000000 	.word	0x00000000
 80023dc:	4062e000 	.word	0x4062e000
 80023e0:	20000528 	.word	0x20000528
 80023e4:	20000400 	.word	0x20000400
 80023e8:	3fb00000 	.word	0x3fb00000
 80023ec:	3ff00000 	.word	0x3ff00000
 80023f0:	20000324 	.word	0x20000324
							HRTIM_COMPAREUNIT_1, compare1_val);
					__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 80023f4:	4ba6      	ldr	r3, [pc, #664]	; (8002690 <main+0x8e0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f8b7 254a 	ldrh.w	r2, [r7, #1354]	; 0x54a
 80023fc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
							HRTIM_COMPAREUNIT_3, compare3_val);
					HAL_HRTIM_SoftwareUpdate(&hhrtim1, HRTIM_TIMERUPDATE_A);
 8002400:	2102      	movs	r1, #2
 8002402:	48a3      	ldr	r0, [pc, #652]	; (8002690 <main+0x8e0>)
 8002404:	f003 fb64 	bl	8005ad0 <HAL_HRTIM_SoftwareUpdate>
 8002408:	e0e4      	b.n	80025d4 <main+0x824>
				} else {
					gAlertType = HS;
 800240a:	4ba2      	ldr	r3, [pc, #648]	; (8002694 <main+0x8e4>)
 800240c:	2204      	movs	r2, #4
 800240e:	701a      	strb	r2, [r3, #0]
 8002410:	e0e0      	b.n	80025d4 <main+0x824>
				}
			} else if (low_vds_count > low_vds_count_threshold)
 8002412:	f897 259d 	ldrb.w	r2, [r7, #1437]	; 0x59d
 8002416:	f897 359c 	ldrb.w	r3, [r7, #1436]	; 0x59c
 800241a:	429a      	cmp	r2, r3
 800241c:	d968      	bls.n	80024f0 <main+0x740>
			{
				current_duty = current_duty + DUTY_CYCLE_SINGLE_CHANGE;
 800241e:	a390      	add	r3, pc, #576	; (adr r3, 8002660 <main+0x8b0>)
 8002420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002424:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 8002428:	e9d1 0100 	ldrd	r0, r1, [r1]
 800242c:	f7fd ff3e 	bl	80002ac <__adddf3>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 8002438:	e9c1 2300 	strd	r2, r3, [r1]
				low_vds_count_threshold = current_duty * ADC_BUF_LEN - 1;
 800243c:	a38a      	add	r3, pc, #552	; (adr r3, 8002668 <main+0x8b8>)
 800243e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002442:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 8002446:	e9d1 0100 	ldrd	r0, r1, [r1]
 800244a:	f7fe f8e5 	bl	8000618 <__aeabi_dmul>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4610      	mov	r0, r2
 8002454:	4619      	mov	r1, r3
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	4b8f      	ldr	r3, [pc, #572]	; (8002698 <main+0x8e8>)
 800245c:	f7fd ff24 	bl	80002a8 <__aeabi_dsub>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	f7fe fbae 	bl	8000bc8 <__aeabi_d2uiz>
 800246c:	4603      	mov	r3, r0
 800246e:	f887 359c 	strb.w	r3, [r7, #1436]	; 0x59c
				if (current_duty < max_duty)
 8002472:	f507 63b5 	add.w	r3, r7, #1448	; 0x5a8
 8002476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247a:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 800247e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002482:	f7fe fb3b 	bl	8000afc <__aeabi_dcmplt>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d02d      	beq.n	80024e8 <main+0x738>
				{
					compare1_val = current_duty * signal_period;
 800248c:	f8b7 354e 	ldrh.w	r3, [r7, #1358]	; 0x54e
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe f857 	bl	8000544 <__aeabi_i2d>
 8002496:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249e:	f7fe f8bb 	bl	8000618 <__aeabi_dmul>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4610      	mov	r0, r2
 80024a8:	4619      	mov	r1, r3
 80024aa:	f7fe fb8d 	bl	8000bc8 <__aeabi_d2uiz>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f8a7 354c 	strh.w	r3, [r7, #1356]	; 0x54c
					compare3_val = compare1_val + signal_period / 2;
 80024b4:	f8b7 354e 	ldrh.w	r3, [r7, #1358]	; 0x54e
 80024b8:	085b      	lsrs	r3, r3, #1
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	f8b7 354c 	ldrh.w	r3, [r7, #1356]	; 0x54c
 80024c0:	4413      	add	r3, r2
 80024c2:	f8a7 354a 	strh.w	r3, [r7, #1354]	; 0x54a
					__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 80024c6:	4b72      	ldr	r3, [pc, #456]	; (8002690 <main+0x8e0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8b7 254c 	ldrh.w	r2, [r7, #1356]	; 0x54c
 80024ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
							HRTIM_COMPAREUNIT_1, compare1_val);
					__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 80024d2:	4b6f      	ldr	r3, [pc, #444]	; (8002690 <main+0x8e0>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f8b7 254a 	ldrh.w	r2, [r7, #1354]	; 0x54a
 80024da:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
							HRTIM_COMPAREUNIT_3, compare3_val);
					HAL_HRTIM_SoftwareUpdate(&hhrtim1, HRTIM_TIMERUPDATE_A);
 80024de:	2102      	movs	r1, #2
 80024e0:	486b      	ldr	r0, [pc, #428]	; (8002690 <main+0x8e0>)
 80024e2:	f003 faf5 	bl	8005ad0 <HAL_HRTIM_SoftwareUpdate>
 80024e6:	e075      	b.n	80025d4 <main+0x824>
				} else {
					gAlertType = DI;
 80024e8:	4b6a      	ldr	r3, [pc, #424]	; (8002694 <main+0x8e4>)
 80024ea:	2205      	movs	r2, #5
 80024ec:	701a      	strb	r2, [r3, #0]
 80024ee:	e071      	b.n	80025d4 <main+0x824>
				}
			} else if ((currentState == STATE_CALIBRATING) && (voltage > 66.5)) {
 80024f0:	4b6a      	ldr	r3, [pc, #424]	; (800269c <main+0x8ec>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d125      	bne.n	8002544 <main+0x794>
 80024f8:	a35d      	add	r3, pc, #372	; (adr r3, 8002670 <main+0x8c0>)
 80024fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fe:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 8002502:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002506:	f7fe fb17 	bl	8000b38 <__aeabi_dcmpgt>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d019      	beq.n	8002544 <main+0x794>
				if (cal_duty != current_duty)
 8002510:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002518:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 800251c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002520:	f7fe fae2 	bl	8000ae8 <__aeabi_dcmpeq>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d108      	bne.n	800253c <main+0x78c>
					cal_duty = current_duty;
 800252a:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002532:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 8002536:	e9c1 2300 	strd	r2, r3, [r1]
				if (cal_duty != current_duty)
 800253a:	e04b      	b.n	80025d4 <main+0x824>
				 else
				 {
					handleEvent(EVENT_CALIBRATE_DONE);
 800253c:	2001      	movs	r0, #1
 800253e:	f000 fd3b 	bl	8002fb8 <handleEvent>
				if (cal_duty != current_duty)
 8002542:	e047      	b.n	80025d4 <main+0x824>
				 }
			} else if (currentState == STATE_DEPLOY) //no duty cycle changes
 8002544:	4b55      	ldr	r3, [pc, #340]	; (800269c <main+0x8ec>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d143      	bne.n	80025d4 <main+0x824>
			{
				// dynamic reaction to slow duty cycle changes
				min_duty = current_duty - DEPLOY_DUTY_TRESHOLD;
 800254c:	a34a      	add	r3, pc, #296	; (adr r3, 8002678 <main+0x8c8>)
 800254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002552:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 8002556:	e9d1 0100 	ldrd	r0, r1, [r1]
 800255a:	f7fd fea5 	bl	80002a8 <__aeabi_dsub>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8002566:	e9c1 2300 	strd	r2, r3, [r1]
				if (min_duty < MIN_DUTY_CALIBRATION)
 800256a:	a345      	add	r3, pc, #276	; (adr r3, 8002680 <main+0x8d0>)
 800256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002570:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8002574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002578:	f7fe fac0 	bl	8000afc <__aeabi_dcmplt>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d006      	beq.n	8002590 <main+0x7e0>
					min_duty = MIN_DUTY_CALIBRATION;
 8002582:	a33f      	add	r3, pc, #252	; (adr r3, 8002680 <main+0x8d0>)
 8002584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002588:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 800258c:	e9c1 2300 	strd	r2, r3, [r1]

				max_duty = current_duty + DEPLOY_DUTY_TRESHOLD;
 8002590:	a339      	add	r3, pc, #228	; (adr r3, 8002678 <main+0x8c8>)
 8002592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002596:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 800259a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800259e:	f7fd fe85 	bl	80002ac <__adddf3>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 80025aa:	e9c1 2300 	strd	r2, r3, [r1]
				if (max_duty > MAX_DUTY_CALIBRATION)
 80025ae:	a336      	add	r3, pc, #216	; (adr r3, 8002688 <main+0x8d8>)
 80025b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b4:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 80025b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025bc:	f7fe fabc 	bl	8000b38 <__aeabi_dcmpgt>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d006      	beq.n	80025d4 <main+0x824>
					max_duty = MAX_DUTY_CALIBRATION;
 80025c6:	a330      	add	r3, pc, #192	; (adr r3, 8002688 <main+0x8d8>)
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 80025d0:	e9c1 2300 	strd	r2, r3, [r1]
			}
		}

		// handle ALERTS
		if ((temp1 > TEMP_LIMIT) || (temp2 > TEMP_LIMIT)) {
 80025d4:	4b32      	ldr	r3, [pc, #200]	; (80026a0 <main+0x8f0>)
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 80025de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025e2:	f7fe faa9 	bl	8000b38 <__aeabi_dcmpgt>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10b      	bne.n	8002604 <main+0x854>
 80025ec:	4b2c      	ldr	r3, [pc, #176]	; (80026a0 <main+0x8f0>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 80025f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80025fa:	f7fe fa9d 	bl	8000b38 <__aeabi_dcmpgt>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d013      	beq.n	800262c <main+0x87c>
			gAlertType = OT;
 8002604:	4b23      	ldr	r3, [pc, #140]	; (8002694 <main+0x8e4>)
 8002606:	2203      	movs	r2, #3
 8002608:	701a      	strb	r2, [r3, #0]
			alert_temp1 = temp1;
 800260a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002612:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8002616:	e9c1 2300 	strd	r2, r3, [r1]
			alert_temp2 = temp2;
 800261a:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002622:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 8002626:	e9c1 2300 	strd	r2, r3, [r1]
 800262a:	e054      	b.n	80026d6 <main+0x926>
		} else if (voltage > VOLT_LIMIT){
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <main+0x8f4>)
 800262e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002632:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 8002636:	e9d1 0100 	ldrd	r0, r1, [r1]
 800263a:	f7fe fa7d 	bl	8000b38 <__aeabi_dcmpgt>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d031      	beq.n	80026a8 <main+0x8f8>
			gAlertType = OV;
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <main+0x8e4>)
 8002646:	2201      	movs	r2, #1
 8002648:	701a      	strb	r2, [r3, #0]
			alert_voltage = voltage;
 800264a:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 800264e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002652:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 8002656:	e9c1 2300 	strd	r2, r3, [r1]
 800265a:	e03c      	b.n	80026d6 <main+0x926>
 800265c:	f3af 8000 	nop.w
 8002660:	d2f1a9fc 	.word	0xd2f1a9fc
 8002664:	3f60624d 	.word	0x3f60624d
 8002668:	00000000 	.word	0x00000000
 800266c:	4062e000 	.word	0x4062e000
 8002670:	00000000 	.word	0x00000000
 8002674:	4050a000 	.word	0x4050a000
 8002678:	eb851eb8 	.word	0xeb851eb8
 800267c:	3f8eb851 	.word	0x3f8eb851
 8002680:	9999999a 	.word	0x9999999a
 8002684:	3fc99999 	.word	0x3fc99999
 8002688:	9999999a 	.word	0x9999999a
 800268c:	3fd99999 	.word	0x3fd99999
 8002690:	20000324 	.word	0x20000324
 8002694:	20000a60 	.word	0x20000a60
 8002698:	3ff00000 	.word	0x3ff00000
 800269c:	20000528 	.word	0x20000528
 80026a0:	20000010 	.word	0x20000010
 80026a4:	20000020 	.word	0x20000020
		} else if (current > CURRENT_LIMIT) {
 80026a8:	4ba1      	ldr	r3, [pc, #644]	; (8002930 <main+0xb80>)
 80026aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ae:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 80026b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026b6:	f7fe fa3f 	bl	8000b38 <__aeabi_dcmpgt>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <main+0x926>
			gAlertType = OC;
 80026c0:	4b9c      	ldr	r3, [pc, #624]	; (8002934 <main+0xb84>)
 80026c2:	2202      	movs	r2, #2
 80026c4:	701a      	strb	r2, [r3, #0]
			alert_current = current;
 80026c6:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 80026ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ce:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 80026d2:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if ((gAlertType != NONE) && (currentState != STATE_IDLE))
 80026d6:	4b97      	ldr	r3, [pc, #604]	; (8002934 <main+0xb84>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d055      	beq.n	800278a <main+0x9da>
 80026de:	4b96      	ldr	r3, [pc, #600]	; (8002938 <main+0xb88>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d051      	beq.n	800278a <main+0x9da>
		{
			handleEvent(EVENT_ALERT);
 80026e6:	2004      	movs	r0, #4
 80026e8:	f000 fc66 	bl	8002fb8 <handleEvent>
			// reset waveform
			current_duty = STARTING_DUTY;
 80026ec:	a38c      	add	r3, pc, #560	; (adr r3, 8002920 <main+0xb70>)
 80026ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f2:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 80026f6:	e9c1 2300 	strd	r2, r3, [r1]
			compare1_val = current_duty * signal_period;
 80026fa:	f8b7 354e 	ldrh.w	r3, [r7, #1358]	; 0x54e
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fd ff20 	bl	8000544 <__aeabi_i2d>
 8002704:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8002708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270c:	f7fd ff84 	bl	8000618 <__aeabi_dmul>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4610      	mov	r0, r2
 8002716:	4619      	mov	r1, r3
 8002718:	f7fe fa56 	bl	8000bc8 <__aeabi_d2uiz>
 800271c:	4603      	mov	r3, r0
 800271e:	f8a7 354c 	strh.w	r3, [r7, #1356]	; 0x54c
			compare3_val = compare1_val + signal_period / 2;
 8002722:	f8b7 354e 	ldrh.w	r3, [r7, #1358]	; 0x54e
 8002726:	085b      	lsrs	r3, r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	f8b7 354c 	ldrh.w	r3, [r7, #1356]	; 0x54c
 800272e:	4413      	add	r3, r2
 8002730:	f8a7 354a 	strh.w	r3, [r7, #1354]	; 0x54a
			low_vds_count_threshold = current_duty * ADC_BUF_LEN - 1;
 8002734:	a37c      	add	r3, pc, #496	; (adr r3, 8002928 <main+0xb78>)
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 800273e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002742:	f7fd ff69 	bl	8000618 <__aeabi_dmul>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4610      	mov	r0, r2
 800274c:	4619      	mov	r1, r3
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	4b7a      	ldr	r3, [pc, #488]	; (800293c <main+0xb8c>)
 8002754:	f7fd fda8 	bl	80002a8 <__aeabi_dsub>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	f7fe fa32 	bl	8000bc8 <__aeabi_d2uiz>
 8002764:	4603      	mov	r3, r0
 8002766:	f887 359c 	strb.w	r3, [r7, #1436]	; 0x59c
			__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 800276a:	4b75      	ldr	r3, [pc, #468]	; (8002940 <main+0xb90>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f8b7 254c 	ldrh.w	r2, [r7, #1356]	; 0x54c
 8002772:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
					HRTIM_COMPAREUNIT_1, compare1_val);
			__HAL_HRTIM_SETCOMPARE(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A,
 8002776:	4b72      	ldr	r3, [pc, #456]	; (8002940 <main+0xb90>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8b7 254a 	ldrh.w	r2, [r7, #1354]	; 0x54a
 800277e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					HRTIM_COMPAREUNIT_3, compare3_val);
			HAL_HRTIM_SoftwareUpdate(&hhrtim1, HRTIM_TIMERUPDATE_A);
 8002782:	2102      	movs	r1, #2
 8002784:	486e      	ldr	r0, [pc, #440]	; (8002940 <main+0xb90>)
 8002786:	f003 f9a3 	bl	8005ad0 <HAL_HRTIM_SoftwareUpdate>
		}

		if (SEND_TIMER_FLAG && UART_READY && (currentState != STATE_CALIBRATING))
 800278a:	4b6e      	ldr	r3, [pc, #440]	; (8002944 <main+0xb94>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80c0 	beq.w	8002916 <main+0xb66>
 8002796:	4b6c      	ldr	r3, [pc, #432]	; (8002948 <main+0xb98>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 80ba 	beq.w	8002916 <main+0xb66>
 80027a2:	4b65      	ldr	r3, [pc, #404]	; (8002938 <main+0xb88>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	f000 80b5 	beq.w	8002916 <main+0xb66>
		{
			if (alert_temp1)
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 80027b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027bc:	f7fe f994 	bl	8000ae8 <__aeabi_dcmpeq>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d107      	bne.n	80027d6 <main+0xa26>
				temp1 = alert_temp1;
 80027c6:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 80027d2:	e9c1 2300 	strd	r2, r3, [r1]
			if (alert_temp2)
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 80027e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027e6:	f7fe f97f 	bl	8000ae8 <__aeabi_dcmpeq>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d107      	bne.n	8002800 <main+0xa50>
				temp2 = alert_temp2;
 80027f0:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 80027f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f8:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 80027fc:	e9c1 2300 	strd	r2, r3, [r1]
			if (alert_voltage)
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 800280c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002810:	f7fe f96a 	bl	8000ae8 <__aeabi_dcmpeq>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d107      	bne.n	800282a <main+0xa7a>
				voltage = alert_voltage;
 800281a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800281e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002822:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 8002826:	e9c1 2300 	strd	r2, r3, [r1]
			if (alert_current)
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	f04f 0300 	mov.w	r3, #0
 8002832:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 8002836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800283a:	f7fe f955 	bl	8000ae8 <__aeabi_dcmpeq>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d107      	bne.n	8002854 <main+0xaa4>
				current = alert_current;
 8002844:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 8002848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284c:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 8002850:	e9c1 2300 	strd	r2, r3, [r1]

			sprintf(json,
 8002854:	f9b7 3540 	ldrsh.w	r3, [r7, #1344]	; 0x540
 8002858:	f897 259d 	ldrb.w	r2, [r7, #1437]	; 0x59d
 800285c:	f897 159c 	ldrb.w	r1, [r7, #1436]	; 0x59c
 8002860:	4834      	ldr	r0, [pc, #208]	; (8002934 <main+0xb84>)
 8002862:	7800      	ldrb	r0, [r0, #0]
 8002864:	4604      	mov	r4, r0
 8002866:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800286a:	940b      	str	r4, [sp, #44]	; 0x2c
 800286c:	910a      	str	r1, [sp, #40]	; 0x28
 800286e:	9209      	str	r2, [sp, #36]	; 0x24
 8002870:	9308      	str	r3, [sp, #32]
 8002872:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8002876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800287e:	f507 63ad 	add.w	r3, r7, #1384	; 0x568
 8002882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002886:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800288a:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 800288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002892:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002896:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289e:	e9cd 2300 	strd	r2, r3, [sp]
 80028a2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	4928      	ldr	r1, [pc, #160]	; (800294c <main+0xb9c>)
 80028ac:	f009 f93a 	bl	800bb24 <siprintf>
					"{\"temperature1\":%.2f,\"temperature2\":%.2f,\"duty\":%.3f,\"voltage\":%.2f,\"current\":%.2f,\"tuning\":%i,\"low_vds\":%i,\"low_vds_threshold\":%i,\"alert\":%i}",
					temp1, temp2, current_duty, voltage, current, tuning,
					low_vds_count, low_vds_count_threshold, gAlertType);

			HAL_UART_Transmit_IT(&huart2, (uint8_t*) json, strlen(json));
 80028b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7fd fceb 	bl	8000290 <strlen>
 80028ba:	4603      	mov	r3, r0
 80028bc:	b29a      	uxth	r2, r3
 80028be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80028c2:	4619      	mov	r1, r3
 80028c4:	4822      	ldr	r0, [pc, #136]	; (8002950 <main+0xba0>)
 80028c6:	f006 faab 	bl	8008e20 <HAL_UART_Transmit_IT>
			UART_READY = false;
 80028ca:	4b1f      	ldr	r3, [pc, #124]	; (8002948 <main+0xb98>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
			SEND_TIMER_FLAG = false;
 80028d0:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <main+0xb94>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
			alert_temp1 = alert_temp2 = alert_voltage = alert_current = 0;
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 80028e2:	e9c1 2300 	strd	r2, r3, [r1]
 80028e6:	f507 63af 	add.w	r3, r7, #1400	; 0x578
 80028ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ee:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 80028f2:	e9c1 2300 	strd	r2, r3, [r1]
 80028f6:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80028fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fe:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 8002902:	e9c1 2300 	strd	r2, r3, [r1]
 8002906:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 800290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290e:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 8002912:	e9c1 2300 	strd	r2, r3, [r1]
		}

		HAL_Delay(10);
 8002916:	200a      	movs	r0, #10
 8002918:	f001 f862 	bl	80039e0 <HAL_Delay>
	while (1) {
 800291c:	f7ff bb2d 	b.w	8001f7a <main+0x1ca>
 8002920:	33333333 	.word	0x33333333
 8002924:	3fd33333 	.word	0x3fd33333
 8002928:	00000000 	.word	0x00000000
 800292c:	4062e000 	.word	0x4062e000
 8002930:	20000018 	.word	0x20000018
 8002934:	20000a60 	.word	0x20000a60
 8002938:	20000528 	.word	0x20000528
 800293c:	3ff00000 	.word	0x3ff00000
 8002940:	20000324 	.word	0x20000324
 8002944:	20000a5f 	.word	0x20000a5f
 8002948:	2000000c 	.word	0x2000000c
 800294c:	0800e5bc 	.word	0x0800e5bc
 8002950:	200004a0 	.word	0x200004a0

08002954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b096      	sub	sp, #88	; 0x58
 8002958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800295a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800295e:	2228      	movs	r2, #40	; 0x28
 8002960:	2100      	movs	r1, #0
 8002962:	4618      	mov	r0, r3
 8002964:	f009 f941 	bl	800bbea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002968:	f107 031c 	add.w	r3, r7, #28
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	609a      	str	r2, [r3, #8]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002978:	463b      	mov	r3, r7
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	60da      	str	r2, [r3, #12]
 8002984:	611a      	str	r2, [r3, #16]
 8002986:	615a      	str	r2, [r3, #20]
 8002988:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800298a:	2301      	movs	r3, #1
 800298c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800298e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002992:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002994:	2300      	movs	r3, #0
 8002996:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002998:	2301      	movs	r3, #1
 800299a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800299c:	2302      	movs	r3, #2
 800299e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80029a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80029a6:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80029aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029b0:	4618      	mov	r0, r3
 80029b2:	f004 fb3d 	bl	8007030 <HAL_RCC_OscConfig>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80029bc:	f000 fcb6 	bl	800332c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029c0:	230f      	movs	r3, #15
 80029c2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029c4:	2302      	movs	r3, #2
 80029c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029c8:	2300      	movs	r3, #0
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80029cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029d2:	2300      	movs	r3, #0
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029d6:	f107 031c 	add.w	r3, r7, #28
 80029da:	2102      	movs	r1, #2
 80029dc:	4618      	mov	r0, r3
 80029de:	f005 fb65 	bl	80080ac <HAL_RCC_ClockConfig>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80029e8:	f000 fca0 	bl	800332c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1|RCC_PERIPHCLK_I2C1;
 80029ec:	f244 0320 	movw	r3, #16416	; 0x4020
 80029f0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80029f2:	2310      	movs	r3, #16
 80029f4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Hrtim1ClockSelection = RCC_HRTIM1CLK_PLLCLK;
 80029f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029fa:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029fc:	463b      	mov	r3, r7
 80029fe:	4618      	mov	r0, r3
 8002a00:	f005 fd8a 	bl	8008518 <HAL_RCCEx_PeriphCLKConfig>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002a0a:	f000 fc8f 	bl	800332c <Error_Handler>
  }
}
 8002a0e:	bf00      	nop
 8002a10:	3758      	adds	r7, #88	; 0x58
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
	...

08002a18 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a1e:	463b      	mov	r3, r7
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
 8002a2c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002a2e:	4b28      	ldr	r3, [pc, #160]	; (8002ad0 <MX_ADC2_Init+0xb8>)
 8002a30:	4a28      	ldr	r2, [pc, #160]	; (8002ad4 <MX_ADC2_Init+0xbc>)
 8002a32:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002a34:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <MX_ADC2_Init+0xb8>)
 8002a36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a3a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002a3c:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <MX_ADC2_Init+0xb8>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a42:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <MX_ADC2_Init+0xb8>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002a48:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <MX_ADC2_Init+0xb8>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002a4e:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <MX_ADC2_Init+0xb8>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002a56:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <MX_ADC2_Init+0xb8>)
 8002a58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONVHRTIM_TRG1;
 8002a5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ad0 <MX_ADC2_Init+0xb8>)
 8002a60:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8002a64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a66:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <MX_ADC2_Init+0xb8>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002a6c:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <MX_ADC2_Init+0xb8>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002a72:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <MX_ADC2_Init+0xb8>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <MX_ADC2_Init+0xb8>)
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002a80:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <MX_ADC2_Init+0xb8>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002a86:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <MX_ADC2_Init+0xb8>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002a8c:	4810      	ldr	r0, [pc, #64]	; (8002ad0 <MX_ADC2_Init+0xb8>)
 8002a8e:	f000 ffe9 	bl	8003a64 <HAL_ADC_Init>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8002a98:	f000 fc48 	bl	800332c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002a9c:	2305      	movs	r3, #5
 8002a9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002ab4:	463b      	mov	r3, r7
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4805      	ldr	r0, [pc, #20]	; (8002ad0 <MX_ADC2_Init+0xb8>)
 8002aba:	f001 fab1 	bl	8004020 <HAL_ADC_ConfigChannel>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_ADC2_Init+0xb0>
  {
    Error_Handler();
 8002ac4:	f000 fc32 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002ac8:	bf00      	nop
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000290 	.word	0x20000290
 8002ad4:	50000100 	.word	0x50000100

08002ad8 <MX_HRTIM1_Init>:
  * @brief HRTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM1_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b0a6      	sub	sp, #152	; 0x98
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM1_Init 0 */

  /* USER CODE END HRTIM1_Init 0 */

  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 8002ade:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8002ae8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8002af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002afa:	2254      	movs	r2, #84	; 0x54
 8002afc:	2100      	movs	r1, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f009 f873 	bl	800bbea <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8002b04:	f107 0320 	add.w	r3, r7, #32
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 8002b10:	463b      	mov	r3, r7
 8002b12:	2220      	movs	r2, #32
 8002b14:	2100      	movs	r1, #0
 8002b16:	4618      	mov	r0, r3
 8002b18:	f009 f867 	bl	800bbea <memset>

  /* USER CODE BEGIN HRTIM1_Init 1 */

  /* USER CODE END HRTIM1_Init 1 */
  hhrtim1.Instance = HRTIM1;
 8002b1c:	4b95      	ldr	r3, [pc, #596]	; (8002d74 <MX_HRTIM1_Init+0x29c>)
 8002b1e:	4a96      	ldr	r2, [pc, #600]	; (8002d78 <MX_HRTIM1_Init+0x2a0>)
 8002b20:	601a      	str	r2, [r3, #0]
  hhrtim1.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8002b22:	4b94      	ldr	r3, [pc, #592]	; (8002d74 <MX_HRTIM1_Init+0x29c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	605a      	str	r2, [r3, #4]
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8002b28:	4b92      	ldr	r3, [pc, #584]	; (8002d74 <MX_HRTIM1_Init+0x29c>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8002b2e:	4891      	ldr	r0, [pc, #580]	; (8002d74 <MX_HRTIM1_Init+0x29c>)
 8002b30:	f002 fb0e 	bl	8005150 <HAL_HRTIM_Init>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_HRTIM1_Init+0x66>
  {
    Error_Handler();
 8002b3a:	f000 fbf7 	bl	800332c <Error_Handler>
  }
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_14) != HAL_OK)
 8002b3e:	210c      	movs	r1, #12
 8002b40:	488c      	ldr	r0, [pc, #560]	; (8002d74 <MX_HRTIM1_Init+0x29c>)
 8002b42:	f002 fbd1 	bl	80052e8 <HAL_HRTIM_DLLCalibrationStart>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_HRTIM1_Init+0x78>
  {
    Error_Handler();
 8002b4c:	f000 fbee 	bl	800332c <Error_Handler>
  }
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 8002b50:	210a      	movs	r1, #10
 8002b52:	4888      	ldr	r0, [pc, #544]	; (8002d74 <MX_HRTIM1_Init+0x29c>)
 8002b54:	f002 fc20 	bl	8005398 <HAL_HRTIM_PollForDLLCalibration>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_HRTIM1_Init+0x8a>
  {
    Error_Handler();
 8002b5e:	f000 fbe5 	bl	800332c <Error_Handler>
  }
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_TIMER_B;
 8002b62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  pADCTriggerCfg.Trigger = HRTIM_ADCTRIGGEREVENT13_TIMERB_PERIOD;
 8002b6a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 8002b72:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002b76:	461a      	mov	r2, r3
 8002b78:	2101      	movs	r1, #1
 8002b7a:	487e      	ldr	r0, [pc, #504]	; (8002d74 <MX_HRTIM1_Init+0x29c>)
 8002b7c:	f002 fc68 	bl	8005450 <HAL_HRTIM_ADCTriggerConfig>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_HRTIM1_Init+0xb2>
  {
    Error_Handler();
 8002b86:	f000 fbd1 	bl	800332c <Error_Handler>
  }
  pTimeBaseCfg.Period = 604;
 8002b8a:	f44f 7317 	mov.w	r3, #604	; 0x25c
 8002b8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL32;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 8002ba4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2105      	movs	r1, #5
 8002bac:	4871      	ldr	r0, [pc, #452]	; (8002d74 <MX_HRTIM1_Init+0x29c>)
 8002bae:	f002 fc27 	bl	8005400 <HAL_HRTIM_TimeBaseConfig>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_HRTIM1_Init+0xe4>
  {
    Error_Handler();
 8002bb8:	f000 fbb8 	bl	800332c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_MASTER_IT_NONE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8002be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002be4:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8002be6:	2300      	movs	r3, #0
 8002be8:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8002bf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	2105      	movs	r1, #5
 8002bfa:	485e      	ldr	r0, [pc, #376]	; (8002d74 <MX_HRTIM1_Init+0x29c>)
 8002bfc:	f002 fcd2 	bl	80055a4 <HAL_HRTIM_WaveformTimerConfig>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_HRTIM1_Init+0x132>
  {
    Error_Handler();
 8002c06:	f000 fb91 	bl	800332c <Error_Handler>
  }
  pTimeBaseCfg.Period = 0xA0FF;
 8002c0a:	f24a 03ff 	movw	r3, #41215	; 0xa0ff
 8002c0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.Mode = HRTIM_MODE_SINGLESHOT_RETRIGGERABLE;
 8002c12:	2310      	movs	r3, #16
 8002c14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8002c18:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4854      	ldr	r0, [pc, #336]	; (8002d74 <MX_HRTIM1_Init+0x29c>)
 8002c22:	f002 fbed 	bl	8005400 <HAL_HRTIM_TimeBaseConfig>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_HRTIM1_Init+0x158>
  {
    Error_Handler();
 8002c2c:	f000 fb7e 	bl	800332c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_NONE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8002c34:	2300      	movs	r3, #0
 8002c36:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8002c40:	2300      	movs	r3, #0
 8002c42:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8002c44:	2300      	movs	r3, #0
 8002c46:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_MASTER_PER;
 8002c50:	2310      	movs	r3, #16
 8002c52:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8002c54:	2300      	movs	r3, #0
 8002c56:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8002c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2100      	movs	r1, #0
 8002c60:	4844      	ldr	r0, [pc, #272]	; (8002d74 <MX_HRTIM1_Init+0x29c>)
 8002c62:	f002 fc9f 	bl	80055a4 <HAL_HRTIM_WaveformTimerConfig>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_HRTIM1_Init+0x198>
  {
    Error_Handler();
 8002c6c:	f000 fb5e 	bl	800332c <Error_Handler>
  }
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8002c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c78:	461a      	mov	r2, r3
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	483d      	ldr	r0, [pc, #244]	; (8002d74 <MX_HRTIM1_Init+0x29c>)
 8002c7e:	f002 fc91 	bl	80055a4 <HAL_HRTIM_WaveformTimerConfig>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <MX_HRTIM1_Init+0x1b4>
  {
    Error_Handler();
 8002c88:	f000 fb50 	bl	800332c <Error_Handler>
  }
  pCompareCfg.CompareValue = 207;
 8002c8c:	23cf      	movs	r3, #207	; 0xcf
 8002c8e:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002c90:	f107 0320 	add.w	r3, r7, #32
 8002c94:	2201      	movs	r2, #1
 8002c96:	2100      	movs	r1, #0
 8002c98:	4836      	ldr	r0, [pc, #216]	; (8002d74 <MX_HRTIM1_Init+0x29c>)
 8002c9a:	f002 fcf5 	bl	8005688 <HAL_HRTIM_WaveformCompareConfig>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_HRTIM1_Init+0x1d0>
  {
    Error_Handler();
 8002ca4:	f000 fb42 	bl	800332c <Error_Handler>
  }
  pCompareCfg.CompareValue = 302;
 8002ca8:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8002cac:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002cb6:	f107 0320 	add.w	r3, r7, #32
 8002cba:	2202      	movs	r2, #2
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	482d      	ldr	r0, [pc, #180]	; (8002d74 <MX_HRTIM1_Init+0x29c>)
 8002cc0:	f002 fce2 	bl	8005688 <HAL_HRTIM_WaveformCompareConfig>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_HRTIM1_Init+0x1f6>
  {
    Error_Handler();
 8002cca:	f000 fb2f 	bl	800332c <Error_Handler>
  }
  pCompareCfg.CompareValue = 509;
 8002cce:	f240 13fd 	movw	r3, #509	; 0x1fd
 8002cd2:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002cd4:	f107 0320 	add.w	r3, r7, #32
 8002cd8:	2204      	movs	r2, #4
 8002cda:	2100      	movs	r1, #0
 8002cdc:	4825      	ldr	r0, [pc, #148]	; (8002d74 <MX_HRTIM1_Init+0x29c>)
 8002cde:	f002 fcd3 	bl	8005688 <HAL_HRTIM_WaveformCompareConfig>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <MX_HRTIM1_Init+0x214>
  {
    Error_Handler();
 8002ce8:	f000 fb20 	bl	800332c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8002cec:	2300      	movs	r3, #0
 8002cee:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_MASTERPER;
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002cfc:	2308      	movs	r3, #8
 8002cfe:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8002d0c:	463b      	mov	r3, r7
 8002d0e:	2201      	movs	r2, #1
 8002d10:	2100      	movs	r1, #0
 8002d12:	4818      	ldr	r0, [pc, #96]	; (8002d74 <MX_HRTIM1_Init+0x29c>)
 8002d14:	f002 fe26 	bl	8005964 <HAL_HRTIM_WaveformOutputConfig>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_HRTIM1_Init+0x24a>
  {
    Error_Handler();
 8002d1e:	f000 fb05 	bl	800332c <Error_Handler>
  }
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP2;
 8002d22:	2310      	movs	r3, #16
 8002d24:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP3;
 8002d26:	2320      	movs	r3, #32
 8002d28:	60bb      	str	r3, [r7, #8]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8002d2a:	463b      	mov	r3, r7
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4810      	ldr	r0, [pc, #64]	; (8002d74 <MX_HRTIM1_Init+0x29c>)
 8002d32:	f002 fe17 	bl	8005964 <HAL_HRTIM_WaveformOutputConfig>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <MX_HRTIM1_Init+0x268>
  {
    Error_Handler();
 8002d3c:	f000 faf6 	bl	800332c <Error_Handler>
  }
  pTimeBaseCfg.Period = 1216;
 8002d40:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002d44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8002d48:	2308      	movs	r3, #8
 8002d4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8002d4e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d52:	461a      	mov	r2, r3
 8002d54:	2101      	movs	r1, #1
 8002d56:	4807      	ldr	r0, [pc, #28]	; (8002d74 <MX_HRTIM1_Init+0x29c>)
 8002d58:	f002 fb52 	bl	8005400 <HAL_HRTIM_TimeBaseConfig>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_HRTIM1_Init+0x28e>
  {
    Error_Handler();
 8002d62:	f000 fae3 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM1_Init 2 */

  /* USER CODE END HRTIM1_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8002d66:	4803      	ldr	r0, [pc, #12]	; (8002d74 <MX_HRTIM1_Init+0x29c>)
 8002d68:	f000 fb96 	bl	8003498 <HAL_HRTIM_MspPostInit>

}
 8002d6c:	bf00      	nop
 8002d6e:	3798      	adds	r7, #152	; 0x98
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000324 	.word	0x20000324
 8002d78:	40017400 	.word	0x40017400

08002d7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d80:	4b1b      	ldr	r3, [pc, #108]	; (8002df0 <MX_I2C1_Init+0x74>)
 8002d82:	4a1c      	ldr	r2, [pc, #112]	; (8002df4 <MX_I2C1_Init+0x78>)
 8002d84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8002d86:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <MX_I2C1_Init+0x74>)
 8002d88:	4a1b      	ldr	r2, [pc, #108]	; (8002df8 <MX_I2C1_Init+0x7c>)
 8002d8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002d8c:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <MX_I2C1_Init+0x74>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d92:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <MX_I2C1_Init+0x74>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d98:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <MX_I2C1_Init+0x74>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <MX_I2C1_Init+0x74>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <MX_I2C1_Init+0x74>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002daa:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <MX_I2C1_Init+0x74>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <MX_I2C1_Init+0x74>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002db6:	480e      	ldr	r0, [pc, #56]	; (8002df0 <MX_I2C1_Init+0x74>)
 8002db8:	f003 fa0e 	bl	80061d8 <HAL_I2C_Init>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002dc2:	f000 fab3 	bl	800332c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	4809      	ldr	r0, [pc, #36]	; (8002df0 <MX_I2C1_Init+0x74>)
 8002dca:	f004 f879 	bl	8006ec0 <HAL_I2CEx_ConfigAnalogFilter>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002dd4:	f000 faaa 	bl	800332c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002dd8:	2100      	movs	r1, #0
 8002dda:	4805      	ldr	r0, [pc, #20]	; (8002df0 <MX_I2C1_Init+0x74>)
 8002ddc:	f004 f8bb 	bl	8006f56 <HAL_I2CEx_ConfigDigitalFilter>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002de6:	f000 faa1 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000400 	.word	0x20000400
 8002df4:	40005400 	.word	0x40005400
 8002df8:	10707dbc 	.word	0x10707dbc

08002dfc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e02:	1d3b      	adds	r3, r7, #4
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002e0c:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <MX_TIM6_Init+0x68>)
 8002e0e:	4a16      	ldr	r2, [pc, #88]	; (8002e68 <MX_TIM6_Init+0x6c>)
 8002e10:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1024;
 8002e12:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <MX_TIM6_Init+0x68>)
 8002e14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e18:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <MX_TIM6_Init+0x68>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 18750;
 8002e20:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <MX_TIM6_Init+0x68>)
 8002e22:	f644 123e 	movw	r2, #18750	; 0x493e
 8002e26:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e28:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <MX_TIM6_Init+0x68>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002e2e:	480d      	ldr	r0, [pc, #52]	; (8002e64 <MX_TIM6_Init+0x68>)
 8002e30:	f005 fca8 	bl	8008784 <HAL_TIM_Base_Init>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002e3a:	f000 fa77 	bl	800332c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002e46:	1d3b      	adds	r3, r7, #4
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4806      	ldr	r0, [pc, #24]	; (8002e64 <MX_TIM6_Init+0x68>)
 8002e4c:	f005 ff0e 	bl	8008c6c <HAL_TIMEx_MasterConfigSynchronization>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002e56:	f000 fa69 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000454 	.word	0x20000454
 8002e68:	40001000 	.word	0x40001000

08002e6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e70:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002e72:	4a15      	ldr	r2, [pc, #84]	; (8002ec8 <MX_USART2_UART_Init+0x5c>)
 8002e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e76:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e84:	4b0f      	ldr	r3, [pc, #60]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e90:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002e92:	220c      	movs	r2, #12
 8002e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e96:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e9c:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ea2:	4b08      	ldr	r3, [pc, #32]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ea8:	4b06      	ldr	r3, [pc, #24]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002eae:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <MX_USART2_UART_Init+0x58>)
 8002eb0:	f005 ff68 	bl	8008d84 <HAL_UART_Init>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002eba:	f000 fa37 	bl	800332c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	200004a0 	.word	0x200004a0
 8002ec8:	40004400 	.word	0x40004400

08002ecc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ed2:	4b0c      	ldr	r3, [pc, #48]	; (8002f04 <MX_DMA_Init+0x38>)
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <MX_DMA_Init+0x38>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6153      	str	r3, [r2, #20]
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <MX_DMA_Init+0x38>)
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	607b      	str	r3, [r7, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002eea:	2200      	movs	r2, #0
 8002eec:	2100      	movs	r1, #0
 8002eee:	200c      	movs	r0, #12
 8002ef0:	f001 fd5f 	bl	80049b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002ef4:	200c      	movs	r0, #12
 8002ef6:	f001 fd78 	bl	80049ea <HAL_NVIC_EnableIRQ>

}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000

08002f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08a      	sub	sp, #40	; 0x28
 8002f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0e:	f107 0314 	add.w	r3, r7, #20
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	605a      	str	r2, [r3, #4]
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	60da      	str	r2, [r3, #12]
 8002f1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f1e:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <MX_GPIO_Init+0xa8>)
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	4a23      	ldr	r2, [pc, #140]	; (8002fb0 <MX_GPIO_Init+0xa8>)
 8002f24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f28:	6153      	str	r3, [r2, #20]
 8002f2a:	4b21      	ldr	r3, [pc, #132]	; (8002fb0 <MX_GPIO_Init+0xa8>)
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f36:	4b1e      	ldr	r3, [pc, #120]	; (8002fb0 <MX_GPIO_Init+0xa8>)
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	4a1d      	ldr	r2, [pc, #116]	; (8002fb0 <MX_GPIO_Init+0xa8>)
 8002f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f40:	6153      	str	r3, [r2, #20]
 8002f42:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <MX_GPIO_Init+0xa8>)
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f4e:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <MX_GPIO_Init+0xa8>)
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	4a17      	ldr	r2, [pc, #92]	; (8002fb0 <MX_GPIO_Init+0xa8>)
 8002f54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002f58:	6153      	str	r3, [r2, #20]
 8002f5a:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <MX_GPIO_Init+0xa8>)
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f66:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <MX_GPIO_Init+0xa8>)
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	4a11      	ldr	r2, [pc, #68]	; (8002fb0 <MX_GPIO_Init+0xa8>)
 8002f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f70:	6153      	str	r3, [r2, #20]
 8002f72:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <MX_GPIO_Init+0xa8>)
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f7a:	607b      	str	r3, [r7, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_DATA_Pin|EN_FULL_Pin, GPIO_PIN_RESET);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002f84:	480b      	ldr	r0, [pc, #44]	; (8002fb4 <MX_GPIO_Init+0xac>)
 8002f86:	f002 f8cb 	bl	8005120 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_DATA_Pin EN_FULL_Pin */
  GPIO_InitStruct.Pin = LED_DATA_Pin|EN_FULL_Pin;
 8002f8a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f90:	2301      	movs	r3, #1
 8002f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f9c:	f107 0314 	add.w	r3, r7, #20
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4804      	ldr	r0, [pc, #16]	; (8002fb4 <MX_GPIO_Init+0xac>)
 8002fa4:	f001 ff4a 	bl	8004e3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002fa8:	bf00      	nop
 8002faa:	3728      	adds	r7, #40	; 0x28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	48000400 	.word	0x48000400

08002fb8 <handleEvent>:

/* USER CODE BEGIN 4 */

void handleEvent(event_t event) {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
	bool transitionFound = false;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < sizeof(transitionTable) / sizeof(transition_t); i++) {
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	e029      	b.n	8003020 <handleEvent+0x68>
		if (transitionTable[i].currentState == currentState
 8002fcc:	4a18      	ldr	r2, [pc, #96]	; (8003030 <handleEvent+0x78>)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8002fd4:	4b17      	ldr	r3, [pc, #92]	; (8003034 <handleEvent+0x7c>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d11e      	bne.n	800301a <handleEvent+0x62>
				&& transitionTable[i].event == event) {
 8002fdc:	4a14      	ldr	r2, [pc, #80]	; (8003030 <handleEvent+0x78>)
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	785b      	ldrb	r3, [r3, #1]
 8002fe6:	79fa      	ldrb	r2, [r7, #7]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d116      	bne.n	800301a <handleEvent+0x62>
			currentState = transitionTable[i].nextState;
 8002fec:	4a10      	ldr	r2, [pc, #64]	; (8003030 <handleEvent+0x78>)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	789a      	ldrb	r2, [r3, #2]
 8002ff6:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <handleEvent+0x7c>)
 8002ff8:	701a      	strb	r2, [r3, #0]
			if (transitionTable[i].action != NULL) {
 8002ffa:	4a0d      	ldr	r2, [pc, #52]	; (8003030 <handleEvent+0x78>)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d005      	beq.n	8003014 <handleEvent+0x5c>
				transitionTable[i].action();
 8003008:	4a09      	ldr	r2, [pc, #36]	; (8003030 <handleEvent+0x78>)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4798      	blx	r3
			}

			transitionFound = true;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
			break;
 8003018:	e005      	b.n	8003026 <handleEvent+0x6e>
	for (int i = 0; i < sizeof(transitionTable) / sizeof(transition_t); i++) {
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	3301      	adds	r3, #1
 800301e:	60bb      	str	r3, [r7, #8]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b0d      	cmp	r3, #13
 8003024:	d9d2      	bls.n	8002fcc <handleEvent+0x14>
	}

	if (!transitionFound) {
//        printf("Invalid event in the current state\n");
	}
}
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	20000028 	.word	0x20000028
 8003034:	20000528 	.word	0x20000528

08003038 <actionTurnOn>:

void actionTurnOn() {
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
	HAL_HRTIM_WaveformOutputStart(&hhrtim1,
 800303c:	2103      	movs	r1, #3
 800303e:	4809      	ldr	r0, [pc, #36]	; (8003064 <actionTurnOn+0x2c>)
 8003040:	f002 fcc1 	bl	80059c6 <HAL_HRTIM_WaveformOutputStart>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2);
	HAL_HRTIM_SoftwareUpdate(&hhrtim1,
 8003044:	2102      	movs	r1, #2
 8003046:	4807      	ldr	r0, [pc, #28]	; (8003064 <actionTurnOn+0x2c>)
 8003048:	f002 fd42 	bl	8005ad0 <HAL_HRTIM_SoftwareUpdate>
	HRTIM_TIMERUPDATE_A);

	HAL_Delay(50);
 800304c:	2032      	movs	r0, #50	; 0x32
 800304e:	f000 fcc7 	bl	80039e0 <HAL_Delay>

	HAL_GPIO_WritePin(EN_FULL_GPIO_Port, EN_FULL_Pin, GPIO_PIN_SET);
 8003052:	2201      	movs	r2, #1
 8003054:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003058:	4803      	ldr	r0, [pc, #12]	; (8003068 <actionTurnOn+0x30>)
 800305a:	f002 f861 	bl	8005120 <HAL_GPIO_WritePin>
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000324 	.word	0x20000324
 8003068:	48000400 	.word	0x48000400

0800306c <actionTurnOff>:

void actionTurnOff() {
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN_FULL_GPIO_Port, EN_FULL_Pin, GPIO_PIN_RESET);
 8003070:	2200      	movs	r2, #0
 8003072:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003076:	4808      	ldr	r0, [pc, #32]	; (8003098 <actionTurnOff+0x2c>)
 8003078:	f002 f852 	bl	8005120 <HAL_GPIO_WritePin>

	HAL_Delay(50);
 800307c:	2032      	movs	r0, #50	; 0x32
 800307e:	f000 fcaf 	bl	80039e0 <HAL_Delay>

	HAL_HRTIM_WaveformOutputStop(&hhrtim1,
 8003082:	2103      	movs	r1, #3
 8003084:	4805      	ldr	r0, [pc, #20]	; (800309c <actionTurnOff+0x30>)
 8003086:	f002 fccb 	bl	8005a20 <HAL_HRTIM_WaveformOutputStop>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2);
	HAL_HRTIM_SoftwareUpdate(&hhrtim1,
 800308a:	2102      	movs	r1, #2
 800308c:	4803      	ldr	r0, [pc, #12]	; (800309c <actionTurnOff+0x30>)
 800308e:	f002 fd1f 	bl	8005ad0 <HAL_HRTIM_SoftwareUpdate>
	HRTIM_TIMERUPDATE_A);
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	48000400 	.word	0x48000400
 800309c:	20000324 	.word	0x20000324

080030a0 <parse_json>:

void parse_json(const char *json) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	cJSON *root = cJSON_Parse(json);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7fe fb3f 	bl	800172c <cJSON_Parse>
 80030ae:	61f8      	str	r0, [r7, #28]
	if (root == NULL) {
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 8090 	beq.w	80031d8 <parse_json+0x138>
		return;
	}

	cJSON *overtemp = cJSON_GetObjectItemCaseSensitive(root, "overtemperature");
 80030b8:	4949      	ldr	r1, [pc, #292]	; (80031e0 <parse_json+0x140>)
 80030ba:	69f8      	ldr	r0, [r7, #28]
 80030bc:	f7fe fe3b 	bl	8001d36 <cJSON_GetObjectItemCaseSensitive>
 80030c0:	61b8      	str	r0, [r7, #24]
	if (cJSON_IsNumber(overtemp) && (overtemp->valuedouble != 0))
 80030c2:	69b8      	ldr	r0, [r7, #24]
 80030c4:	f7fe fe46 	bl	8001d54 <cJSON_IsNumber>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d011      	beq.n	80030f2 <parse_json+0x52>
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	f7fd fd04 	bl	8000ae8 <__aeabi_dcmpeq>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d105      	bne.n	80030f2 <parse_json+0x52>
		TEMP_LIMIT = overtemp->valuedouble;
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80030ec:	493d      	ldr	r1, [pc, #244]	; (80031e4 <parse_json+0x144>)
 80030ee:	e9c1 2300 	strd	r2, r3, [r1]

	cJSON *overcurr = cJSON_GetObjectItemCaseSensitive(root, "overcurrent");
 80030f2:	493d      	ldr	r1, [pc, #244]	; (80031e8 <parse_json+0x148>)
 80030f4:	69f8      	ldr	r0, [r7, #28]
 80030f6:	f7fe fe1e 	bl	8001d36 <cJSON_GetObjectItemCaseSensitive>
 80030fa:	6178      	str	r0, [r7, #20]
	if (cJSON_IsNumber(overcurr) && (overcurr->valuedouble != 0))
 80030fc:	6978      	ldr	r0, [r7, #20]
 80030fe:	f7fe fe29 	bl	8001d54 <cJSON_IsNumber>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d011      	beq.n	800312c <parse_json+0x8c>
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	f7fd fce7 	bl	8000ae8 <__aeabi_dcmpeq>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d105      	bne.n	800312c <parse_json+0x8c>
		CURRENT_LIMIT = overcurr->valuedouble;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003126:	4931      	ldr	r1, [pc, #196]	; (80031ec <parse_json+0x14c>)
 8003128:	e9c1 2300 	strd	r2, r3, [r1]

	cJSON *overvolt = cJSON_GetObjectItemCaseSensitive(root, "overvoltage");
 800312c:	4930      	ldr	r1, [pc, #192]	; (80031f0 <parse_json+0x150>)
 800312e:	69f8      	ldr	r0, [r7, #28]
 8003130:	f7fe fe01 	bl	8001d36 <cJSON_GetObjectItemCaseSensitive>
 8003134:	6138      	str	r0, [r7, #16]
	if (cJSON_IsNumber(overvolt) && (overvolt->valuedouble != 0))
 8003136:	6938      	ldr	r0, [r7, #16]
 8003138:	f7fe fe0c 	bl	8001d54 <cJSON_IsNumber>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d011      	beq.n	8003166 <parse_json+0xc6>
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	f7fd fcca 	bl	8000ae8 <__aeabi_dcmpeq>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d105      	bne.n	8003166 <parse_json+0xc6>
		VOLT_LIMIT = overvolt->valuedouble;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003160:	4924      	ldr	r1, [pc, #144]	; (80031f4 <parse_json+0x154>)
 8003162:	e9c1 2300 	strd	r2, r3, [r1]

	cJSON *mode = cJSON_GetObjectItemCaseSensitive(root, "mode");
 8003166:	4924      	ldr	r1, [pc, #144]	; (80031f8 <parse_json+0x158>)
 8003168:	69f8      	ldr	r0, [r7, #28]
 800316a:	f7fe fde4 	bl	8001d36 <cJSON_GetObjectItemCaseSensitive>
 800316e:	60f8      	str	r0, [r7, #12]
	if (cJSON_IsString(mode) && (mode->valuestring != NULL)) {
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f7fe fe06 	bl	8001d82 <cJSON_IsString>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d02e      	beq.n	80031da <parse_json+0x13a>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d02a      	beq.n	80031da <parse_json+0x13a>
		if (strcmp(mode->valuestring, "off") == 0) {
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	491c      	ldr	r1, [pc, #112]	; (80031fc <parse_json+0x15c>)
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd f820 	bl	80001d0 <strcmp>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d103      	bne.n	800319e <parse_json+0xfe>
			handleEvent(EVENT_OFF_MSG);
 8003196:	2000      	movs	r0, #0
 8003198:	f7ff ff0e 	bl	8002fb8 <handleEvent>
 800319c:	e018      	b.n	80031d0 <parse_json+0x130>
		}
		else if (strcmp(mode->valuestring, "localization") == 0) {
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	4917      	ldr	r1, [pc, #92]	; (8003200 <parse_json+0x160>)
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fd f813 	bl	80001d0 <strcmp>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d103      	bne.n	80031b8 <parse_json+0x118>
			handleEvent(EVENT_LOCALIZATION_MSG);
 80031b0:	2002      	movs	r0, #2
 80031b2:	f7ff ff01 	bl	8002fb8 <handleEvent>
 80031b6:	e00b      	b.n	80031d0 <parse_json+0x130>
		}
		else if (strcmp(mode->valuestring, "deploy") == 0) {
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	4911      	ldr	r1, [pc, #68]	; (8003204 <parse_json+0x164>)
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd f806 	bl	80001d0 <strcmp>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d102      	bne.n	80031d0 <parse_json+0x130>
			handleEvent(EVENT_DEPLOY_MSG);
 80031ca:	2003      	movs	r0, #3
 80031cc:	f7ff fef4 	bl	8002fb8 <handleEvent>
		}

	cJSON_Delete(root);
 80031d0:	69f8      	ldr	r0, [r7, #28]
 80031d2:	f7fd fdd1 	bl	8000d78 <cJSON_Delete>
 80031d6:	e000      	b.n	80031da <parse_json+0x13a>
		return;
 80031d8:	bf00      	nop
	}
}
 80031da:	3720      	adds	r7, #32
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	0800e64c 	.word	0x0800e64c
 80031e4:	20000010 	.word	0x20000010
 80031e8:	0800e65c 	.word	0x0800e65c
 80031ec:	20000018 	.word	0x20000018
 80031f0:	0800e668 	.word	0x0800e668
 80031f4:	20000020 	.word	0x20000020
 80031f8:	0800e674 	.word	0x0800e674
 80031fc:	0800e67c 	.word	0x0800e67c
 8003200:	0800e680 	.word	0x0800e680
 8003204:	0800e690 	.word	0x0800e690

08003208 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
	UART_READY = true;
 8003210:	4b07      	ldr	r3, [pc, #28]	; (8003230 <HAL_UART_TxCpltCallback+0x28>)
 8003212:	2201      	movs	r2, #1
 8003214:	701a      	strb	r2, [r3, #0]
	if (gAlertType != NONE)
 8003216:	4b07      	ldr	r3, [pc, #28]	; (8003234 <HAL_UART_TxCpltCallback+0x2c>)
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d002      	beq.n	8003224 <HAL_UART_TxCpltCallback+0x1c>
		gAlertType = NONE;
 800321e:	4b05      	ldr	r3, [pc, #20]	; (8003234 <HAL_UART_TxCpltCallback+0x2c>)
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	2000000c 	.word	0x2000000c
 8003234:	20000a60 	.word	0x20000a60

08003238 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
	SEND_TIMER_FLAG = true;
 8003240:	4b04      	ldr	r3, [pc, #16]	; (8003254 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8003242:	2201      	movs	r2, #1
 8003244:	701a      	strb	r2, [r3, #0]

}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000a5f 	.word	0x20000a5f

08003258 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2) {
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a2e      	ldr	r2, [pc, #184]	; (800331c <HAL_UART_RxCpltCallback+0xc4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d155      	bne.n	8003314 <HAL_UART_RxCpltCallback+0xbc>
		if (rxIndex < BUFFER_SIZE) {
 8003268:	4b2d      	ldr	r3, [pc, #180]	; (8003320 <HAL_UART_RxCpltCallback+0xc8>)
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b29b      	uxth	r3, r3
 800326e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003272:	d244      	bcs.n	80032fe <HAL_UART_RxCpltCallback+0xa6>
			if (rxBuffer[rxIndex] == '{') {
 8003274:	4b2a      	ldr	r3, [pc, #168]	; (8003320 <HAL_UART_RxCpltCallback+0xc8>)
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	b29b      	uxth	r3, r3
 800327a:	461a      	mov	r2, r3
 800327c:	4b29      	ldr	r3, [pc, #164]	; (8003324 <HAL_UART_RxCpltCallback+0xcc>)
 800327e:	5c9b      	ldrb	r3, [r3, r2]
 8003280:	2b7b      	cmp	r3, #123	; 0x7b
 8003282:	d105      	bne.n	8003290 <HAL_UART_RxCpltCallback+0x38>
				// Start of JSON data
				rxIndex = 0;
 8003284:	4b26      	ldr	r3, [pc, #152]	; (8003320 <HAL_UART_RxCpltCallback+0xc8>)
 8003286:	2200      	movs	r2, #0
 8003288:	801a      	strh	r2, [r3, #0]
				jsonFlag = 1;
 800328a:	4b27      	ldr	r3, [pc, #156]	; (8003328 <HAL_UART_RxCpltCallback+0xd0>)
 800328c:	2201      	movs	r2, #1
 800328e:	701a      	strb	r2, [r3, #0]
			}

			if (jsonFlag) {
 8003290:	4b25      	ldr	r3, [pc, #148]	; (8003328 <HAL_UART_RxCpltCallback+0xd0>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d031      	beq.n	80032fe <HAL_UART_RxCpltCallback+0xa6>
				// Store received data in the buffer
				rxBuffer[rxIndex] =
						rxBuffer[rxIndex] == '\r' ? '\n' : rxBuffer[rxIndex]; // Replace '\r' with '\n'
 800329a:	4b21      	ldr	r3, [pc, #132]	; (8003320 <HAL_UART_RxCpltCallback+0xc8>)
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	461a      	mov	r2, r3
 80032a2:	4b20      	ldr	r3, [pc, #128]	; (8003324 <HAL_UART_RxCpltCallback+0xcc>)
 80032a4:	5c9b      	ldrb	r3, [r3, r2]
				rxBuffer[rxIndex] =
 80032a6:	2b0d      	cmp	r3, #13
 80032a8:	d006      	beq.n	80032b8 <HAL_UART_RxCpltCallback+0x60>
						rxBuffer[rxIndex] == '\r' ? '\n' : rxBuffer[rxIndex]; // Replace '\r' with '\n'
 80032aa:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <HAL_UART_RxCpltCallback+0xc8>)
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	461a      	mov	r2, r3
				rxBuffer[rxIndex] =
 80032b2:	4b1c      	ldr	r3, [pc, #112]	; (8003324 <HAL_UART_RxCpltCallback+0xcc>)
 80032b4:	5c9b      	ldrb	r3, [r3, r2]
 80032b6:	e000      	b.n	80032ba <HAL_UART_RxCpltCallback+0x62>
 80032b8:	230a      	movs	r3, #10
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <HAL_UART_RxCpltCallback+0xc8>)
 80032bc:	8812      	ldrh	r2, [r2, #0]
 80032be:	b292      	uxth	r2, r2
 80032c0:	4611      	mov	r1, r2
 80032c2:	4a18      	ldr	r2, [pc, #96]	; (8003324 <HAL_UART_RxCpltCallback+0xcc>)
 80032c4:	5453      	strb	r3, [r2, r1]
				rxIndex++;
 80032c6:	4b16      	ldr	r3, [pc, #88]	; (8003320 <HAL_UART_RxCpltCallback+0xc8>)
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3301      	adds	r3, #1
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	4b13      	ldr	r3, [pc, #76]	; (8003320 <HAL_UART_RxCpltCallback+0xc8>)
 80032d2:	801a      	strh	r2, [r3, #0]

				if (rxBuffer[rxIndex - 1] == '}') {
 80032d4:	4b12      	ldr	r3, [pc, #72]	; (8003320 <HAL_UART_RxCpltCallback+0xc8>)
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	4a11      	ldr	r2, [pc, #68]	; (8003324 <HAL_UART_RxCpltCallback+0xcc>)
 80032de:	5cd3      	ldrb	r3, [r2, r3]
 80032e0:	2b7d      	cmp	r3, #125	; 0x7d
 80032e2:	d10c      	bne.n	80032fe <HAL_UART_RxCpltCallback+0xa6>
					// End of JSON data
					rxBuffer[rxIndex] = '\0'; // Null-terminate the JSON string
 80032e4:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <HAL_UART_RxCpltCallback+0xc8>)
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	461a      	mov	r2, r3
 80032ec:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <HAL_UART_RxCpltCallback+0xcc>)
 80032ee:	2100      	movs	r1, #0
 80032f0:	5499      	strb	r1, [r3, r2]
					jsonFlag = 0;
 80032f2:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <HAL_UART_RxCpltCallback+0xd0>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	701a      	strb	r2, [r3, #0]
					parse_json((const char*) rxBuffer);
 80032f8:	480a      	ldr	r0, [pc, #40]	; (8003324 <HAL_UART_RxCpltCallback+0xcc>)
 80032fa:	f7ff fed1 	bl	80030a0 <parse_json>
				}
			}
		}

		HAL_UART_Receive_IT(&huart2, &rxBuffer[rxIndex], 1); // Enable UART receive interrupt again
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <HAL_UART_RxCpltCallback+0xc8>)
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	4b07      	ldr	r3, [pc, #28]	; (8003324 <HAL_UART_RxCpltCallback+0xcc>)
 8003308:	4413      	add	r3, r2
 800330a:	2201      	movs	r2, #1
 800330c:	4619      	mov	r1, r3
 800330e:	4803      	ldr	r0, [pc, #12]	; (800331c <HAL_UART_RxCpltCallback+0xc4>)
 8003310:	f005 fde4 	bl	8008edc <HAL_UART_Receive_IT>
	}
}
 8003314:	bf00      	nop
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	200004a0 	.word	0x200004a0
 8003320:	20000a5c 	.word	0x20000a5c
 8003324:	2000065c 	.word	0x2000065c
 8003328:	20000a5e 	.word	0x20000a5e

0800332c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003330:	b672      	cpsid	i
}
 8003332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003334:	e7fe      	b.n	8003334 <Error_Handler+0x8>
	...

08003338 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800333e:	4b0f      	ldr	r3, [pc, #60]	; (800337c <HAL_MspInit+0x44>)
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	4a0e      	ldr	r2, [pc, #56]	; (800337c <HAL_MspInit+0x44>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	6193      	str	r3, [r2, #24]
 800334a:	4b0c      	ldr	r3, [pc, #48]	; (800337c <HAL_MspInit+0x44>)
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	607b      	str	r3, [r7, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	4b09      	ldr	r3, [pc, #36]	; (800337c <HAL_MspInit+0x44>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	4a08      	ldr	r2, [pc, #32]	; (800337c <HAL_MspInit+0x44>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003360:	61d3      	str	r3, [r2, #28]
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_MspInit+0x44>)
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000

08003380 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08a      	sub	sp, #40	; 0x28
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003388:	f107 0314 	add.w	r3, r7, #20
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	60da      	str	r2, [r3, #12]
 8003396:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a29      	ldr	r2, [pc, #164]	; (8003444 <HAL_ADC_MspInit+0xc4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d14b      	bne.n	800343a <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80033a2:	4b29      	ldr	r3, [pc, #164]	; (8003448 <HAL_ADC_MspInit+0xc8>)
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	4a28      	ldr	r2, [pc, #160]	; (8003448 <HAL_ADC_MspInit+0xc8>)
 80033a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ac:	6153      	str	r3, [r2, #20]
 80033ae:	4b26      	ldr	r3, [pc, #152]	; (8003448 <HAL_ADC_MspInit+0xc8>)
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ba:	4b23      	ldr	r3, [pc, #140]	; (8003448 <HAL_ADC_MspInit+0xc8>)
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	4a22      	ldr	r2, [pc, #136]	; (8003448 <HAL_ADC_MspInit+0xc8>)
 80033c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80033c4:	6153      	str	r3, [r2, #20]
 80033c6:	4b20      	ldr	r3, [pc, #128]	; (8003448 <HAL_ADC_MspInit+0xc8>)
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC4     ------> ADC2_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80033d2:	2310      	movs	r3, #16
 80033d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033d6:	2303      	movs	r3, #3
 80033d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033de:	f107 0314 	add.w	r3, r7, #20
 80033e2:	4619      	mov	r1, r3
 80033e4:	4819      	ldr	r0, [pc, #100]	; (800344c <HAL_ADC_MspInit+0xcc>)
 80033e6:	f001 fd29 	bl	8004e3c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 80033ea:	4b19      	ldr	r3, [pc, #100]	; (8003450 <HAL_ADC_MspInit+0xd0>)
 80033ec:	4a19      	ldr	r2, [pc, #100]	; (8003454 <HAL_ADC_MspInit+0xd4>)
 80033ee:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033f0:	4b17      	ldr	r3, [pc, #92]	; (8003450 <HAL_ADC_MspInit+0xd0>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80033f6:	4b16      	ldr	r3, [pc, #88]	; (8003450 <HAL_ADC_MspInit+0xd0>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80033fc:	4b14      	ldr	r3, [pc, #80]	; (8003450 <HAL_ADC_MspInit+0xd0>)
 80033fe:	2280      	movs	r2, #128	; 0x80
 8003400:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003402:	4b13      	ldr	r3, [pc, #76]	; (8003450 <HAL_ADC_MspInit+0xd0>)
 8003404:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003408:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800340a:	4b11      	ldr	r3, [pc, #68]	; (8003450 <HAL_ADC_MspInit+0xd0>)
 800340c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003410:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003412:	4b0f      	ldr	r3, [pc, #60]	; (8003450 <HAL_ADC_MspInit+0xd0>)
 8003414:	2220      	movs	r2, #32
 8003416:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003418:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <HAL_ADC_MspInit+0xd0>)
 800341a:	2200      	movs	r2, #0
 800341c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800341e:	480c      	ldr	r0, [pc, #48]	; (8003450 <HAL_ADC_MspInit+0xd0>)
 8003420:	f001 fafd 	bl	8004a1e <HAL_DMA_Init>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 800342a:	f7ff ff7f 	bl	800332c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a07      	ldr	r2, [pc, #28]	; (8003450 <HAL_ADC_MspInit+0xd0>)
 8003432:	639a      	str	r2, [r3, #56]	; 0x38
 8003434:	4a06      	ldr	r2, [pc, #24]	; (8003450 <HAL_ADC_MspInit+0xd0>)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800343a:	bf00      	nop
 800343c:	3728      	adds	r7, #40	; 0x28
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	50000100 	.word	0x50000100
 8003448:	40021000 	.word	0x40021000
 800344c:	48000800 	.word	0x48000800
 8003450:	200002e0 	.word	0x200002e0
 8003454:	4002001c 	.word	0x4002001c

08003458 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if(hhrtim->Instance==HRTIM1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <HAL_HRTIM_MspInit+0x38>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d10b      	bne.n	8003482 <HAL_HRTIM_MspInit+0x2a>
  {
  /* USER CODE BEGIN HRTIM1_MspInit 0 */

  /* USER CODE END HRTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <HAL_HRTIM_MspInit+0x3c>)
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	4a09      	ldr	r2, [pc, #36]	; (8003494 <HAL_HRTIM_MspInit+0x3c>)
 8003470:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003474:	6193      	str	r3, [r2, #24]
 8003476:	4b07      	ldr	r3, [pc, #28]	; (8003494 <HAL_HRTIM_MspInit+0x3c>)
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8003482:	bf00      	nop
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40017400 	.word	0x40017400
 8003494:	40021000 	.word	0x40021000

08003498 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a0:	f107 030c 	add.w	r3, r7, #12
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a12      	ldr	r2, [pc, #72]	; (8003500 <HAL_HRTIM_MspPostInit+0x68>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d11d      	bne.n	80034f6 <HAL_HRTIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ba:	4b12      	ldr	r3, [pc, #72]	; (8003504 <HAL_HRTIM_MspPostInit+0x6c>)
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	4a11      	ldr	r2, [pc, #68]	; (8003504 <HAL_HRTIM_MspPostInit+0x6c>)
 80034c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c4:	6153      	str	r3, [r2, #20]
 80034c6:	4b0f      	ldr	r3, [pc, #60]	; (8003504 <HAL_HRTIM_MspPostInit+0x6c>)
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	60bb      	str	r3, [r7, #8]
 80034d0:	68bb      	ldr	r3, [r7, #8]
    /**HRTIM1 GPIO Configuration
    PA8     ------> HRTIM1_CHA1
    PA9     ------> HRTIM1_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80034d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d8:	2302      	movs	r3, #2
 80034da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034e0:	2303      	movs	r3, #3
 80034e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80034e4:	230d      	movs	r3, #13
 80034e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e8:	f107 030c 	add.w	r3, r7, #12
 80034ec:	4619      	mov	r1, r3
 80034ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034f2:	f001 fca3 	bl	8004e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80034f6:	bf00      	nop
 80034f8:	3720      	adds	r7, #32
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40017400 	.word	0x40017400
 8003504:	40021000 	.word	0x40021000

08003508 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08a      	sub	sp, #40	; 0x28
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003510:	f107 0314 	add.w	r3, r7, #20
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1b      	ldr	r2, [pc, #108]	; (8003594 <HAL_I2C_MspInit+0x8c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d12f      	bne.n	800358a <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800352a:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <HAL_I2C_MspInit+0x90>)
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	4a1a      	ldr	r2, [pc, #104]	; (8003598 <HAL_I2C_MspInit+0x90>)
 8003530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003534:	6153      	str	r3, [r2, #20]
 8003536:	4b18      	ldr	r3, [pc, #96]	; (8003598 <HAL_I2C_MspInit+0x90>)
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003542:	23c0      	movs	r3, #192	; 0xc0
 8003544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003546:	2312      	movs	r3, #18
 8003548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800354e:	2303      	movs	r3, #3
 8003550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003552:	2304      	movs	r3, #4
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003556:	f107 0314 	add.w	r3, r7, #20
 800355a:	4619      	mov	r1, r3
 800355c:	480f      	ldr	r0, [pc, #60]	; (800359c <HAL_I2C_MspInit+0x94>)
 800355e:	f001 fc6d 	bl	8004e3c <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB6_FMP);
 8003562:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003566:	f003 fd43 	bl	8006ff0 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 800356a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800356e:	f003 fd3f 	bl	8006ff0 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003572:	4b09      	ldr	r3, [pc, #36]	; (8003598 <HAL_I2C_MspInit+0x90>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	4a08      	ldr	r2, [pc, #32]	; (8003598 <HAL_I2C_MspInit+0x90>)
 8003578:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800357c:	61d3      	str	r3, [r2, #28]
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_I2C_MspInit+0x90>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800358a:	bf00      	nop
 800358c:	3728      	adds	r7, #40	; 0x28
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40005400 	.word	0x40005400
 8003598:	40021000 	.word	0x40021000
 800359c:	48000400 	.word	0x48000400

080035a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a0d      	ldr	r2, [pc, #52]	; (80035e4 <HAL_TIM_Base_MspInit+0x44>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d113      	bne.n	80035da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80035b2:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <HAL_TIM_Base_MspInit+0x48>)
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	4a0c      	ldr	r2, [pc, #48]	; (80035e8 <HAL_TIM_Base_MspInit+0x48>)
 80035b8:	f043 0310 	orr.w	r3, r3, #16
 80035bc:	61d3      	str	r3, [r2, #28]
 80035be:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <HAL_TIM_Base_MspInit+0x48>)
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 80035ca:	2200      	movs	r2, #0
 80035cc:	2100      	movs	r1, #0
 80035ce:	2036      	movs	r0, #54	; 0x36
 80035d0:	f001 f9ef 	bl	80049b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80035d4:	2036      	movs	r0, #54	; 0x36
 80035d6:	f001 fa08 	bl	80049ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80035da:	bf00      	nop
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40001000 	.word	0x40001000
 80035e8:	40021000 	.word	0x40021000

080035ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	; 0x28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	60da      	str	r2, [r3, #12]
 8003602:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a1b      	ldr	r2, [pc, #108]	; (8003678 <HAL_UART_MspInit+0x8c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d130      	bne.n	8003670 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800360e:	4b1b      	ldr	r3, [pc, #108]	; (800367c <HAL_UART_MspInit+0x90>)
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	4a1a      	ldr	r2, [pc, #104]	; (800367c <HAL_UART_MspInit+0x90>)
 8003614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003618:	61d3      	str	r3, [r2, #28]
 800361a:	4b18      	ldr	r3, [pc, #96]	; (800367c <HAL_UART_MspInit+0x90>)
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003626:	4b15      	ldr	r3, [pc, #84]	; (800367c <HAL_UART_MspInit+0x90>)
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	4a14      	ldr	r2, [pc, #80]	; (800367c <HAL_UART_MspInit+0x90>)
 800362c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003630:	6153      	str	r3, [r2, #20]
 8003632:	4b12      	ldr	r3, [pc, #72]	; (800367c <HAL_UART_MspInit+0x90>)
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800363e:	230c      	movs	r3, #12
 8003640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003642:	2302      	movs	r3, #2
 8003644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003646:	2300      	movs	r3, #0
 8003648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800364a:	2303      	movs	r3, #3
 800364c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800364e:	2307      	movs	r3, #7
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003652:	f107 0314 	add.w	r3, r7, #20
 8003656:	4619      	mov	r1, r3
 8003658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800365c:	f001 fbee 	bl	8004e3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 11, 0);
 8003660:	2200      	movs	r2, #0
 8003662:	210b      	movs	r1, #11
 8003664:	2026      	movs	r0, #38	; 0x26
 8003666:	f001 f9a4 	bl	80049b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800366a:	2026      	movs	r0, #38	; 0x26
 800366c:	f001 f9bd 	bl	80049ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003670:	bf00      	nop
 8003672:	3728      	adds	r7, #40	; 0x28
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40004400 	.word	0x40004400
 800367c:	40021000 	.word	0x40021000

08003680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003684:	e7fe      	b.n	8003684 <NMI_Handler+0x4>

08003686 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003686:	b480      	push	{r7}
 8003688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800368a:	e7fe      	b.n	800368a <HardFault_Handler+0x4>

0800368c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003690:	e7fe      	b.n	8003690 <MemManage_Handler+0x4>

08003692 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003692:	b480      	push	{r7}
 8003694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003696:	e7fe      	b.n	8003696 <BusFault_Handler+0x4>

08003698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800369c:	e7fe      	b.n	800369c <UsageFault_Handler+0x4>

0800369e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800369e:	b480      	push	{r7}
 80036a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036b0:	bf00      	nop
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036ba:	b480      	push	{r7}
 80036bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036cc:	f000 f968 	bl	80039a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036d0:	bf00      	nop
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80036d8:	4802      	ldr	r0, [pc, #8]	; (80036e4 <DMA1_Channel2_IRQHandler+0x10>)
 80036da:	f001 fabd 	bl	8004c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	200002e0 	.word	0x200002e0

080036e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80036ec:	4802      	ldr	r0, [pc, #8]	; (80036f8 <USART2_IRQHandler+0x10>)
 80036ee:	f005 fc39 	bl	8008f64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	200004a0 	.word	0x200004a0

080036fc <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003700:	4802      	ldr	r0, [pc, #8]	; (800370c <TIM6_DAC1_IRQHandler+0x10>)
 8003702:	f005 f8f3 	bl	80088ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000454 	.word	0x20000454

08003710 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  return 1;
 8003714:	2301      	movs	r3, #1
}
 8003716:	4618      	mov	r0, r3
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <_kill>:

int _kill(int pid, int sig)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800372a:	f008 fad3 	bl	800bcd4 <__errno>
 800372e:	4603      	mov	r3, r0
 8003730:	2216      	movs	r2, #22
 8003732:	601a      	str	r2, [r3, #0]
  return -1;
 8003734:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <_exit>:

void _exit (int status)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003748:	f04f 31ff 	mov.w	r1, #4294967295
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff ffe7 	bl	8003720 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003752:	e7fe      	b.n	8003752 <_exit+0x12>

08003754 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	e00a      	b.n	800377c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003766:	f3af 8000 	nop.w
 800376a:	4601      	mov	r1, r0
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	60ba      	str	r2, [r7, #8]
 8003772:	b2ca      	uxtb	r2, r1
 8003774:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	3301      	adds	r3, #1
 800377a:	617b      	str	r3, [r7, #20]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	429a      	cmp	r2, r3
 8003782:	dbf0      	blt.n	8003766 <_read+0x12>
  }

  return len;
 8003784:	687b      	ldr	r3, [r7, #4]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b086      	sub	sp, #24
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	e009      	b.n	80037b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	60ba      	str	r2, [r7, #8]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	3301      	adds	r3, #1
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	dbf1      	blt.n	80037a0 <_write+0x12>
  }
  return len;
 80037bc:	687b      	ldr	r3, [r7, #4]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <_close>:

int _close(int file)
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037ee:	605a      	str	r2, [r3, #4]
  return 0;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <_isatty>:

int _isatty(int file)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003806:	2301      	movs	r3, #1
}
 8003808:	4618      	mov	r0, r3
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003838:	4a14      	ldr	r2, [pc, #80]	; (800388c <_sbrk+0x5c>)
 800383a:	4b15      	ldr	r3, [pc, #84]	; (8003890 <_sbrk+0x60>)
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003844:	4b13      	ldr	r3, [pc, #76]	; (8003894 <_sbrk+0x64>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d102      	bne.n	8003852 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800384c:	4b11      	ldr	r3, [pc, #68]	; (8003894 <_sbrk+0x64>)
 800384e:	4a12      	ldr	r2, [pc, #72]	; (8003898 <_sbrk+0x68>)
 8003850:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <_sbrk+0x64>)
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	429a      	cmp	r2, r3
 800385e:	d207      	bcs.n	8003870 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003860:	f008 fa38 	bl	800bcd4 <__errno>
 8003864:	4603      	mov	r3, r0
 8003866:	220c      	movs	r2, #12
 8003868:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800386a:	f04f 33ff 	mov.w	r3, #4294967295
 800386e:	e009      	b.n	8003884 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003870:	4b08      	ldr	r3, [pc, #32]	; (8003894 <_sbrk+0x64>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003876:	4b07      	ldr	r3, [pc, #28]	; (8003894 <_sbrk+0x64>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4413      	add	r3, r2
 800387e:	4a05      	ldr	r2, [pc, #20]	; (8003894 <_sbrk+0x64>)
 8003880:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003882:	68fb      	ldr	r3, [r7, #12]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	20003000 	.word	0x20003000
 8003890:	00000400 	.word	0x00000400
 8003894:	20000a64 	.word	0x20000a64
 8003898:	20000bb8 	.word	0x20000bb8

0800389c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038a0:	4b06      	ldr	r3, [pc, #24]	; (80038bc <SystemInit+0x20>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a6:	4a05      	ldr	r2, [pc, #20]	; (80038bc <SystemInit+0x20>)
 80038a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038b0:	bf00      	nop
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	e000ed00 	.word	0xe000ed00

080038c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80038c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80038f8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80038c4:	f7ff ffea 	bl	800389c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038c8:	480c      	ldr	r0, [pc, #48]	; (80038fc <LoopForever+0x6>)
  ldr r1, =_edata
 80038ca:	490d      	ldr	r1, [pc, #52]	; (8003900 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038cc:	4a0d      	ldr	r2, [pc, #52]	; (8003904 <LoopForever+0xe>)
  movs r3, #0
 80038ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038d0:	e002      	b.n	80038d8 <LoopCopyDataInit>

080038d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038d6:	3304      	adds	r3, #4

080038d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038dc:	d3f9      	bcc.n	80038d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038de:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038e0:	4c0a      	ldr	r4, [pc, #40]	; (800390c <LoopForever+0x16>)
  movs r3, #0
 80038e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038e4:	e001      	b.n	80038ea <LoopFillZerobss>

080038e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038e8:	3204      	adds	r2, #4

080038ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038ec:	d3fb      	bcc.n	80038e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038ee:	f008 f9f7 	bl	800bce0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80038f2:	f7fe fa5d 	bl	8001db0 <main>

080038f6 <LoopForever>:

LoopForever:
    b LoopForever
 80038f6:	e7fe      	b.n	80038f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80038f8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80038fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003900:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8003904:	0800eb04 	.word	0x0800eb04
  ldr r2, =_sbss
 8003908:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 800390c:	20000bb8 	.word	0x20000bb8

08003910 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003910:	e7fe      	b.n	8003910 <ADC1_2_IRQHandler>
	...

08003914 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <HAL_Init+0x28>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a07      	ldr	r2, [pc, #28]	; (800393c <HAL_Init+0x28>)
 800391e:	f043 0310 	orr.w	r3, r3, #16
 8003922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003924:	2003      	movs	r0, #3
 8003926:	f001 f839 	bl	800499c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800392a:	200a      	movs	r0, #10
 800392c:	f000 f808 	bl	8003940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003930:	f7ff fd02 	bl	8003338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40022000 	.word	0x40022000

08003940 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003948:	4b12      	ldr	r3, [pc, #72]	; (8003994 <HAL_InitTick+0x54>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	4b12      	ldr	r3, [pc, #72]	; (8003998 <HAL_InitTick+0x58>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	4619      	mov	r1, r3
 8003952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003956:	fbb3 f3f1 	udiv	r3, r3, r1
 800395a:	fbb2 f3f3 	udiv	r3, r2, r3
 800395e:	4618      	mov	r0, r3
 8003960:	f001 f851 	bl	8004a06 <HAL_SYSTICK_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e00e      	b.n	800398c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b0f      	cmp	r3, #15
 8003972:	d80a      	bhi.n	800398a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003974:	2200      	movs	r2, #0
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	f04f 30ff 	mov.w	r0, #4294967295
 800397c:	f001 f819 	bl	80049b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003980:	4a06      	ldr	r2, [pc, #24]	; (800399c <HAL_InitTick+0x5c>)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
 8003988:	e000      	b.n	800398c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
}
 800398c:	4618      	mov	r0, r3
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20000098 	.word	0x20000098
 8003998:	200000a0 	.word	0x200000a0
 800399c:	2000009c 	.word	0x2000009c

080039a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_IncTick+0x20>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <HAL_IncTick+0x24>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4413      	add	r3, r2
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <HAL_IncTick+0x24>)
 80039b2:	6013      	str	r3, [r2, #0]
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	200000a0 	.word	0x200000a0
 80039c4:	20000a68 	.word	0x20000a68

080039c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <HAL_GetTick+0x14>)
 80039ce:	681b      	ldr	r3, [r3, #0]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000a68 	.word	0x20000a68

080039e0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039e8:	f7ff ffee 	bl	80039c8 <HAL_GetTick>
 80039ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d005      	beq.n	8003a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039fa:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <HAL_Delay+0x44>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4413      	add	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003a06:	bf00      	nop
 8003a08:	f7ff ffde 	bl	80039c8 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d8f7      	bhi.n	8003a08 <HAL_Delay+0x28>
  {
  }
}
 8003a18:	bf00      	nop
 8003a1a:	bf00      	nop
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	200000a0 	.word	0x200000a0

08003a28 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b09a      	sub	sp, #104	; 0x68
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e172      	b.n	8003d6a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d176      	bne.n	8003b84 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d152      	bne.n	8003b44 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff fc61 	bl	8003380 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d13b      	bne.n	8003b44 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fe2f 	bl	8004730 <ADC_Disable>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d12f      	bne.n	8003b44 <HAL_ADC_Init+0xe0>
 8003ae4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d12b      	bne.n	8003b44 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003af4:	f023 0302 	bic.w	r3, r3, #2
 8003af8:	f043 0202 	orr.w	r2, r3, #2
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b0e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b1e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b20:	4b94      	ldr	r3, [pc, #592]	; (8003d74 <HAL_ADC_Init+0x310>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a94      	ldr	r2, [pc, #592]	; (8003d78 <HAL_ADC_Init+0x314>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	0c9a      	lsrs	r2, r3, #18
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b36:	e002      	b.n	8003b3e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1f9      	bne.n	8003b38 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b60:	d110      	bne.n	8003b84 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f023 0312 	bic.w	r3, r3, #18
 8003b6a:	f043 0210 	orr.w	r2, r3, #16
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b76:	f043 0201 	orr.w	r2, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f040 80df 	bne.w	8003d50 <HAL_ADC_Init+0x2ec>
 8003b92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f040 80da 	bne.w	8003d50 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f040 80d2 	bne.w	8003d50 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003bb4:	f043 0202 	orr.w	r2, r3, #2
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bbc:	4b6f      	ldr	r3, [pc, #444]	; (8003d7c <HAL_ADC_Init+0x318>)
 8003bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bc8:	d102      	bne.n	8003bd0 <HAL_ADC_Init+0x16c>
 8003bca:	4b6d      	ldr	r3, [pc, #436]	; (8003d80 <HAL_ADC_Init+0x31c>)
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	e002      	b.n	8003bd6 <HAL_ADC_Init+0x172>
 8003bd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003bd4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d108      	bne.n	8003bf6 <HAL_ADC_Init+0x192>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_ADC_Init+0x192>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <HAL_ADC_Init+0x194>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d11c      	bne.n	8003c36 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003bfc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d010      	beq.n	8003c24 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d107      	bne.n	8003c1e <HAL_ADC_Init+0x1ba>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d101      	bne.n	8003c1e <HAL_ADC_Init+0x1ba>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <HAL_ADC_Init+0x1bc>
 8003c1e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d108      	bne.n	8003c36 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003c24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	431a      	orrs	r2, r3
 8003c32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c34:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	7e5b      	ldrb	r3, [r3, #25]
 8003c3a:	035b      	lsls	r3, r3, #13
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c40:	2a01      	cmp	r2, #1
 8003c42:	d002      	beq.n	8003c4a <HAL_ADC_Init+0x1e6>
 8003c44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c48:	e000      	b.n	8003c4c <HAL_ADC_Init+0x1e8>
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d11b      	bne.n	8003ca2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	7e5b      	ldrb	r3, [r3, #25]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	3b01      	subs	r3, #1
 8003c78:	045a      	lsls	r2, r3, #17
 8003c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c82:	663b      	str	r3, [r7, #96]	; 0x60
 8003c84:	e00d      	b.n	8003ca2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003c8e:	f043 0220 	orr.w	r2, r3, #32
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	f043 0201 	orr.w	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d007      	beq.n	8003cba <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 030c 	and.w	r3, r3, #12
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d114      	bne.n	8003cf2 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6812      	ldr	r2, [r2, #0]
 8003cd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cd6:	f023 0302 	bic.w	r3, r3, #2
 8003cda:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	7e1b      	ldrb	r3, [r3, #24]
 8003ce0:	039a      	lsls	r2, r3, #14
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	4313      	orrs	r3, r2
 8003cec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	4b22      	ldr	r3, [pc, #136]	; (8003d84 <HAL_ADC_Init+0x320>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6812      	ldr	r2, [r2, #0]
 8003d00:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003d02:	430b      	orrs	r3, r1
 8003d04:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d10c      	bne.n	8003d28 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	f023 010f 	bic.w	r1, r3, #15
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	1e5a      	subs	r2, r3, #1
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	631a      	str	r2, [r3, #48]	; 0x30
 8003d26:	e007      	b.n	8003d38 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 020f 	bic.w	r2, r2, #15
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	f023 0303 	bic.w	r3, r3, #3
 8003d46:	f043 0201 	orr.w	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	641a      	str	r2, [r3, #64]	; 0x40
 8003d4e:	e00a      	b.n	8003d66 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	f023 0312 	bic.w	r3, r3, #18
 8003d58:	f043 0210 	orr.w	r2, r3, #16
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8003d60:	2301      	movs	r3, #1
 8003d62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003d66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3768      	adds	r7, #104	; 0x68
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000098 	.word	0x20000098
 8003d78:	431bde83 	.word	0x431bde83
 8003d7c:	50000300 	.word	0x50000300
 8003d80:	50000100 	.word	0x50000100
 8003d84:	fff0c007 	.word	0xfff0c007

08003d88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b086      	sub	sp, #24
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f040 80b9 	bne.w	8003f1a <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d101      	bne.n	8003db6 <HAL_ADC_Start_DMA+0x2e>
 8003db2:	2302      	movs	r3, #2
 8003db4:	e0b4      	b.n	8003f20 <HAL_ADC_Start_DMA+0x198>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8003dbe:	4b5a      	ldr	r3, [pc, #360]	; (8003f28 <HAL_ADC_Start_DMA+0x1a0>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f040 80a0 	bne.w	8003f0c <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	f000 fc4b 	bl	8004668 <ADC_Enable>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f040 8092 	bne.w	8003f02 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003de6:	f023 0301 	bic.w	r3, r3, #1
 8003dea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003df2:	4b4d      	ldr	r3, [pc, #308]	; (8003f28 <HAL_ADC_Start_DMA+0x1a0>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d004      	beq.n	8003e08 <HAL_ADC_Start_DMA+0x80>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e06:	d115      	bne.n	8003e34 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d027      	beq.n	8003e72 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003e32:	e01e      	b.n	8003e72 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e48:	d004      	beq.n	8003e54 <HAL_ADC_Start_DMA+0xcc>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a37      	ldr	r2, [pc, #220]	; (8003f2c <HAL_ADC_Start_DMA+0x1a4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d10e      	bne.n	8003e72 <HAL_ADC_Start_DMA+0xea>
 8003e54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d007      	beq.n	8003e72 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7e:	d106      	bne.n	8003e8e <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e84:	f023 0206 	bic.w	r2, r3, #6
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	645a      	str	r2, [r3, #68]	; 0x44
 8003e8c:	e002      	b.n	8003e94 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea0:	4a23      	ldr	r2, [pc, #140]	; (8003f30 <HAL_ADC_Start_DMA+0x1a8>)
 8003ea2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea8:	4a22      	ldr	r2, [pc, #136]	; (8003f34 <HAL_ADC_Start_DMA+0x1ac>)
 8003eaa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	4a21      	ldr	r2, [pc, #132]	; (8003f38 <HAL_ADC_Start_DMA+0x1b0>)
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	221c      	movs	r2, #28
 8003eba:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0210 	orr.w	r2, r2, #16
 8003eca:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3340      	adds	r3, #64	; 0x40
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f000 fdde 	bl	8004aac <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0204 	orr.w	r2, r2, #4
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	e00d      	b.n	8003f1e <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f0a:	e008      	b.n	8003f1e <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003f18:	e001      	b.n	8003f1e <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	50000300 	.word	0x50000300
 8003f2c:	50000100 	.word	0x50000100
 8003f30:	0800459d 	.word	0x0800459d
 8003f34:	08004617 	.word	0x08004617
 8003f38:	08004633 	.word	0x08004633

08003f3c <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_ADCEx_Calibration_Start+0x1c>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e05f      	b.n	8004018 <HAL_ADCEx_Calibration_Start+0xdc>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 fbe5 	bl	8004730 <ADC_Disable>
 8003f66:	4603      	mov	r3, r0
 8003f68:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d14e      	bne.n	800400e <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8003f84:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d107      	bne.n	8003f9c <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f9a:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003faa:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8003fac:	f7ff fd0c 	bl	80039c8 <HAL_GetTick>
 8003fb0:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003fb2:	e01c      	b.n	8003fee <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003fb4:	f7ff fd08 	bl	80039c8 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b0a      	cmp	r3, #10
 8003fc0:	d915      	bls.n	8003fee <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fd0:	d10d      	bne.n	8003fee <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f023 0312 	bic.w	r3, r3, #18
 8003fda:	f043 0210 	orr.w	r2, r3, #16
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e014      	b.n	8004018 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ffc:	d0da      	beq.n	8003fb4 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	f043 0201 	orr.w	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004016:	7bfb      	ldrb	r3, [r7, #15]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004020:	b480      	push	{r7}
 8004022:	b09b      	sub	sp, #108	; 0x6c
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_ADC_ConfigChannel+0x22>
 800403e:	2302      	movs	r3, #2
 8004040:	e2a1      	b.n	8004586 <HAL_ADC_ConfigChannel+0x566>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	f040 8285 	bne.w	8004564 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b04      	cmp	r3, #4
 8004060:	d81c      	bhi.n	800409c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	4613      	mov	r3, r2
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	4413      	add	r3, r2
 8004072:	005b      	lsls	r3, r3, #1
 8004074:	461a      	mov	r2, r3
 8004076:	231f      	movs	r3, #31
 8004078:	4093      	lsls	r3, r2
 800407a:	43db      	mvns	r3, r3
 800407c:	4019      	ands	r1, r3
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	4413      	add	r3, r2
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	fa00 f203 	lsl.w	r2, r0, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	631a      	str	r2, [r3, #48]	; 0x30
 800409a:	e063      	b.n	8004164 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b09      	cmp	r3, #9
 80040a2:	d81e      	bhi.n	80040e2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	4413      	add	r3, r2
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	3b1e      	subs	r3, #30
 80040b8:	221f      	movs	r2, #31
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43db      	mvns	r3, r3
 80040c0:	4019      	ands	r1, r3
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	4413      	add	r3, r2
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	3b1e      	subs	r3, #30
 80040d4:	fa00 f203 	lsl.w	r2, r0, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	635a      	str	r2, [r3, #52]	; 0x34
 80040e0:	e040      	b.n	8004164 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2b0e      	cmp	r3, #14
 80040e8:	d81e      	bhi.n	8004128 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	4613      	mov	r3, r2
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	4413      	add	r3, r2
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	3b3c      	subs	r3, #60	; 0x3c
 80040fe:	221f      	movs	r2, #31
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	43db      	mvns	r3, r3
 8004106:	4019      	ands	r1, r3
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	6818      	ldr	r0, [r3, #0]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	4413      	add	r3, r2
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	3b3c      	subs	r3, #60	; 0x3c
 800411a:	fa00 f203 	lsl.w	r2, r0, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	639a      	str	r2, [r3, #56]	; 0x38
 8004126:	e01d      	b.n	8004164 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	4413      	add	r3, r2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	3b5a      	subs	r3, #90	; 0x5a
 800413c:	221f      	movs	r2, #31
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	43db      	mvns	r3, r3
 8004144:	4019      	ands	r1, r3
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	4413      	add	r3, r2
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	3b5a      	subs	r3, #90	; 0x5a
 8004158:	fa00 f203 	lsl.w	r2, r0, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b00      	cmp	r3, #0
 8004170:	f040 80e5 	bne.w	800433e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b09      	cmp	r3, #9
 800417a:	d91c      	bls.n	80041b6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6999      	ldr	r1, [r3, #24]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4613      	mov	r3, r2
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	4413      	add	r3, r2
 800418c:	3b1e      	subs	r3, #30
 800418e:	2207      	movs	r2, #7
 8004190:	fa02 f303 	lsl.w	r3, r2, r3
 8004194:	43db      	mvns	r3, r3
 8004196:	4019      	ands	r1, r3
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	6898      	ldr	r0, [r3, #8]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	4613      	mov	r3, r2
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	4413      	add	r3, r2
 80041a6:	3b1e      	subs	r3, #30
 80041a8:	fa00 f203 	lsl.w	r2, r0, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	619a      	str	r2, [r3, #24]
 80041b4:	e019      	b.n	80041ea <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6959      	ldr	r1, [r3, #20]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	4613      	mov	r3, r2
 80041c2:	005b      	lsls	r3, r3, #1
 80041c4:	4413      	add	r3, r2
 80041c6:	2207      	movs	r2, #7
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	43db      	mvns	r3, r3
 80041ce:	4019      	ands	r1, r3
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	6898      	ldr	r0, [r3, #8]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	4613      	mov	r3, r2
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	4413      	add	r3, r2
 80041de:	fa00 f203 	lsl.w	r2, r0, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	695a      	ldr	r2, [r3, #20]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	08db      	lsrs	r3, r3, #3
 80041f6:	f003 0303 	and.w	r3, r3, #3
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	3b01      	subs	r3, #1
 8004208:	2b03      	cmp	r3, #3
 800420a:	d84f      	bhi.n	80042ac <HAL_ADC_ConfigChannel+0x28c>
 800420c:	a201      	add	r2, pc, #4	; (adr r2, 8004214 <HAL_ADC_ConfigChannel+0x1f4>)
 800420e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004212:	bf00      	nop
 8004214:	08004225 	.word	0x08004225
 8004218:	08004247 	.word	0x08004247
 800421c:	08004269 	.word	0x08004269
 8004220:	0800428b 	.word	0x0800428b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800422a:	4b9c      	ldr	r3, [pc, #624]	; (800449c <HAL_ADC_ConfigChannel+0x47c>)
 800422c:	4013      	ands	r3, r2
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	0691      	lsls	r1, r2, #26
 8004234:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004236:	430a      	orrs	r2, r1
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004242:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004244:	e07b      	b.n	800433e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800424c:	4b93      	ldr	r3, [pc, #588]	; (800449c <HAL_ADC_ConfigChannel+0x47c>)
 800424e:	4013      	ands	r3, r2
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	0691      	lsls	r1, r2, #26
 8004256:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004258:	430a      	orrs	r2, r1
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004264:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004266:	e06a      	b.n	800433e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800426e:	4b8b      	ldr	r3, [pc, #556]	; (800449c <HAL_ADC_ConfigChannel+0x47c>)
 8004270:	4013      	ands	r3, r2
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	6812      	ldr	r2, [r2, #0]
 8004276:	0691      	lsls	r1, r2, #26
 8004278:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800427a:	430a      	orrs	r2, r1
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004286:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004288:	e059      	b.n	800433e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004290:	4b82      	ldr	r3, [pc, #520]	; (800449c <HAL_ADC_ConfigChannel+0x47c>)
 8004292:	4013      	ands	r3, r2
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	0691      	lsls	r1, r2, #26
 800429a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800429c:	430a      	orrs	r2, r1
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80042a8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80042aa:	e048      	b.n	800433e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	069b      	lsls	r3, r3, #26
 80042bc:	429a      	cmp	r2, r3
 80042be:	d107      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80042ce:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	069b      	lsls	r3, r3, #26
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d107      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80042f2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	069b      	lsls	r3, r3, #26
 8004304:	429a      	cmp	r2, r3
 8004306:	d107      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004316:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800431e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	069b      	lsls	r3, r3, #26
 8004328:	429a      	cmp	r2, r3
 800432a:	d107      	bne.n	800433c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800433a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800433c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 0303 	and.w	r3, r3, #3
 8004348:	2b01      	cmp	r3, #1
 800434a:	d108      	bne.n	800435e <HAL_ADC_ConfigChannel+0x33e>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_ADC_ConfigChannel+0x33e>
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <HAL_ADC_ConfigChannel+0x340>
 800435e:	2300      	movs	r3, #0
 8004360:	2b00      	cmp	r3, #0
 8004362:	f040 810a 	bne.w	800457a <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d00f      	beq.n	800438e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2201      	movs	r2, #1
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	43da      	mvns	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	400a      	ands	r2, r1
 8004388:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800438c:	e049      	b.n	8004422 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2201      	movs	r2, #1
 800439c:	409a      	lsls	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b09      	cmp	r3, #9
 80043ae:	d91c      	bls.n	80043ea <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6999      	ldr	r1, [r3, #24]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	4613      	mov	r3, r2
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	4413      	add	r3, r2
 80043c0:	3b1b      	subs	r3, #27
 80043c2:	2207      	movs	r2, #7
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	4019      	ands	r1, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	6898      	ldr	r0, [r3, #8]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	4613      	mov	r3, r2
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	4413      	add	r3, r2
 80043da:	3b1b      	subs	r3, #27
 80043dc:	fa00 f203 	lsl.w	r2, r0, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	619a      	str	r2, [r3, #24]
 80043e8:	e01b      	b.n	8004422 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6959      	ldr	r1, [r3, #20]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	4613      	mov	r3, r2
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	4413      	add	r3, r2
 80043fc:	2207      	movs	r2, #7
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43db      	mvns	r3, r3
 8004404:	4019      	ands	r1, r3
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	6898      	ldr	r0, [r3, #8]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	4613      	mov	r3, r2
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	4413      	add	r3, r2
 8004416:	fa00 f203 	lsl.w	r2, r0, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004422:	4b1f      	ldr	r3, [pc, #124]	; (80044a0 <HAL_ADC_ConfigChannel+0x480>)
 8004424:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b10      	cmp	r3, #16
 800442c:	d105      	bne.n	800443a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800442e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004436:	2b00      	cmp	r3, #0
 8004438:	d015      	beq.n	8004466 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800443e:	2b11      	cmp	r3, #17
 8004440:	d105      	bne.n	800444e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00b      	beq.n	8004466 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004452:	2b12      	cmp	r3, #18
 8004454:	f040 8091 	bne.w	800457a <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8004458:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004460:	2b00      	cmp	r3, #0
 8004462:	f040 808a 	bne.w	800457a <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800446e:	d102      	bne.n	8004476 <HAL_ADC_ConfigChannel+0x456>
 8004470:	4b0c      	ldr	r3, [pc, #48]	; (80044a4 <HAL_ADC_ConfigChannel+0x484>)
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	e002      	b.n	800447c <HAL_ADC_ConfigChannel+0x45c>
 8004476:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800447a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 0303 	and.w	r3, r3, #3
 8004486:	2b01      	cmp	r3, #1
 8004488:	d10e      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x488>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b01      	cmp	r3, #1
 8004496:	d107      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x488>
 8004498:	2301      	movs	r3, #1
 800449a:	e006      	b.n	80044aa <HAL_ADC_ConfigChannel+0x48a>
 800449c:	83fff000 	.word	0x83fff000
 80044a0:	50000300 	.word	0x50000300
 80044a4:	50000100 	.word	0x50000100
 80044a8:	2300      	movs	r3, #0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d150      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80044ae:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d010      	beq.n	80044d6 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d107      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x4b0>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x4b0>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x4b2>
 80044d0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d13c      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b10      	cmp	r3, #16
 80044dc:	d11d      	bne.n	800451a <HAL_ADC_ConfigChannel+0x4fa>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044e6:	d118      	bne.n	800451a <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80044e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80044f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044f2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044f4:	4b27      	ldr	r3, [pc, #156]	; (8004594 <HAL_ADC_ConfigChannel+0x574>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a27      	ldr	r2, [pc, #156]	; (8004598 <HAL_ADC_ConfigChannel+0x578>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	0c9a      	lsrs	r2, r3, #18
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800450a:	e002      	b.n	8004512 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	3b01      	subs	r3, #1
 8004510:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1f9      	bne.n	800450c <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004518:	e02e      	b.n	8004578 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b11      	cmp	r3, #17
 8004520:	d10b      	bne.n	800453a <HAL_ADC_ConfigChannel+0x51a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800452a:	d106      	bne.n	800453a <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800452c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004536:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004538:	e01e      	b.n	8004578 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b12      	cmp	r3, #18
 8004540:	d11a      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800454a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800454c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800454e:	e013      	b.n	8004578 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	f043 0220 	orr.w	r2, r3, #32
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004562:	e00a      	b.n	800457a <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	f043 0220 	orr.w	r2, r3, #32
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004576:	e000      	b.n	800457a <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004578:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004582:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004586:	4618      	mov	r0, r3
 8004588:	376c      	adds	r7, #108	; 0x6c
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	20000098 	.word	0x20000098
 8004598:	431bde83 	.word	0x431bde83

0800459c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d126      	bne.n	8004604 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d115      	bne.n	80045fc <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d111      	bne.n	80045fc <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d105      	bne.n	80045fc <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	f043 0201 	orr.w	r2, r3, #1
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f7ff fa13 	bl	8003a28 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004602:	e004      	b.n	800460e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	4798      	blx	r3
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b084      	sub	sp, #16
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f7ff fa09 	bl	8003a3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800462a:	bf00      	nop
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b084      	sub	sp, #16
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004650:	f043 0204 	orr.w	r2, r3, #4
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f7ff f9f9 	bl	8003a50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800465e:	bf00      	nop
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
	...

08004668 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	2b01      	cmp	r3, #1
 8004680:	d108      	bne.n	8004694 <ADC_Enable+0x2c>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <ADC_Enable+0x2c>
 8004690:	2301      	movs	r3, #1
 8004692:	e000      	b.n	8004696 <ADC_Enable+0x2e>
 8004694:	2300      	movs	r3, #0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d143      	bne.n	8004722 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	4b22      	ldr	r3, [pc, #136]	; (800472c <ADC_Enable+0xc4>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00d      	beq.n	80046c4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	f043 0210 	orr.w	r2, r3, #16
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b8:	f043 0201 	orr.w	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e02f      	b.n	8004724 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80046d4:	f7ff f978 	bl	80039c8 <HAL_GetTick>
 80046d8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80046da:	e01b      	b.n	8004714 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80046dc:	f7ff f974 	bl	80039c8 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d914      	bls.n	8004714 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d00d      	beq.n	8004714 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	f043 0210 	orr.w	r2, r3, #16
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004708:	f043 0201 	orr.w	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e007      	b.n	8004724 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b01      	cmp	r3, #1
 8004720:	d1dc      	bne.n	80046dc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	8000003f 	.word	0x8000003f

08004730 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	2b01      	cmp	r3, #1
 8004748:	d108      	bne.n	800475c <ADC_Disable+0x2c>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b01      	cmp	r3, #1
 8004756:	d101      	bne.n	800475c <ADC_Disable+0x2c>
 8004758:	2301      	movs	r3, #1
 800475a:	e000      	b.n	800475e <ADC_Disable+0x2e>
 800475c:	2300      	movs	r3, #0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d047      	beq.n	80047f2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f003 030d 	and.w	r3, r3, #13
 800476c:	2b01      	cmp	r3, #1
 800476e:	d10f      	bne.n	8004790 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0202 	orr.w	r2, r2, #2
 800477e:	609a      	str	r2, [r3, #8]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2203      	movs	r2, #3
 8004786:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004788:	f7ff f91e 	bl	80039c8 <HAL_GetTick>
 800478c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800478e:	e029      	b.n	80047e4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	f043 0210 	orr.w	r2, r3, #16
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a0:	f043 0201 	orr.w	r2, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e023      	b.n	80047f4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80047ac:	f7ff f90c 	bl	80039c8 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d914      	bls.n	80047e4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d10d      	bne.n	80047e4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	f043 0210 	orr.w	r2, r3, #16
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d8:	f043 0201 	orr.w	r2, r3, #1
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e007      	b.n	80047f4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d0dc      	beq.n	80047ac <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f003 0307 	and.w	r3, r3, #7
 800480a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800480c:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <__NVIC_SetPriorityGrouping+0x44>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004818:	4013      	ands	r3, r2
 800481a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004824:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800482c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800482e:	4a04      	ldr	r2, [pc, #16]	; (8004840 <__NVIC_SetPriorityGrouping+0x44>)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	60d3      	str	r3, [r2, #12]
}
 8004834:	bf00      	nop
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	e000ed00 	.word	0xe000ed00

08004844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004848:	4b04      	ldr	r3, [pc, #16]	; (800485c <__NVIC_GetPriorityGrouping+0x18>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	0a1b      	lsrs	r3, r3, #8
 800484e:	f003 0307 	and.w	r3, r3, #7
}
 8004852:	4618      	mov	r0, r3
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	e000ed00 	.word	0xe000ed00

08004860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800486a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486e:	2b00      	cmp	r3, #0
 8004870:	db0b      	blt.n	800488a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004872:	79fb      	ldrb	r3, [r7, #7]
 8004874:	f003 021f 	and.w	r2, r3, #31
 8004878:	4907      	ldr	r1, [pc, #28]	; (8004898 <__NVIC_EnableIRQ+0x38>)
 800487a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	2001      	movs	r0, #1
 8004882:	fa00 f202 	lsl.w	r2, r0, r2
 8004886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	e000e100 	.word	0xe000e100

0800489c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4603      	mov	r3, r0
 80048a4:	6039      	str	r1, [r7, #0]
 80048a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	db0a      	blt.n	80048c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	490c      	ldr	r1, [pc, #48]	; (80048e8 <__NVIC_SetPriority+0x4c>)
 80048b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ba:	0112      	lsls	r2, r2, #4
 80048bc:	b2d2      	uxtb	r2, r2
 80048be:	440b      	add	r3, r1
 80048c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048c4:	e00a      	b.n	80048dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	4908      	ldr	r1, [pc, #32]	; (80048ec <__NVIC_SetPriority+0x50>)
 80048cc:	79fb      	ldrb	r3, [r7, #7]
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	3b04      	subs	r3, #4
 80048d4:	0112      	lsls	r2, r2, #4
 80048d6:	b2d2      	uxtb	r2, r2
 80048d8:	440b      	add	r3, r1
 80048da:	761a      	strb	r2, [r3, #24]
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	e000e100 	.word	0xe000e100
 80048ec:	e000ed00 	.word	0xe000ed00

080048f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b089      	sub	sp, #36	; 0x24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f1c3 0307 	rsb	r3, r3, #7
 800490a:	2b04      	cmp	r3, #4
 800490c:	bf28      	it	cs
 800490e:	2304      	movcs	r3, #4
 8004910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	3304      	adds	r3, #4
 8004916:	2b06      	cmp	r3, #6
 8004918:	d902      	bls.n	8004920 <NVIC_EncodePriority+0x30>
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	3b03      	subs	r3, #3
 800491e:	e000      	b.n	8004922 <NVIC_EncodePriority+0x32>
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004924:	f04f 32ff 	mov.w	r2, #4294967295
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43da      	mvns	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	401a      	ands	r2, r3
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004938:	f04f 31ff 	mov.w	r1, #4294967295
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	fa01 f303 	lsl.w	r3, r1, r3
 8004942:	43d9      	mvns	r1, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004948:	4313      	orrs	r3, r2
         );
}
 800494a:	4618      	mov	r0, r3
 800494c:	3724      	adds	r7, #36	; 0x24
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
	...

08004958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3b01      	subs	r3, #1
 8004964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004968:	d301      	bcc.n	800496e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800496a:	2301      	movs	r3, #1
 800496c:	e00f      	b.n	800498e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800496e:	4a0a      	ldr	r2, [pc, #40]	; (8004998 <SysTick_Config+0x40>)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3b01      	subs	r3, #1
 8004974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004976:	210f      	movs	r1, #15
 8004978:	f04f 30ff 	mov.w	r0, #4294967295
 800497c:	f7ff ff8e 	bl	800489c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <SysTick_Config+0x40>)
 8004982:	2200      	movs	r2, #0
 8004984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004986:	4b04      	ldr	r3, [pc, #16]	; (8004998 <SysTick_Config+0x40>)
 8004988:	2207      	movs	r2, #7
 800498a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	e000e010 	.word	0xe000e010

0800499c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff ff29 	bl	80047fc <__NVIC_SetPriorityGrouping>
}
 80049aa:	bf00      	nop
 80049ac:	3708      	adds	r7, #8
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b086      	sub	sp, #24
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	4603      	mov	r3, r0
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	607a      	str	r2, [r7, #4]
 80049be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049c4:	f7ff ff3e 	bl	8004844 <__NVIC_GetPriorityGrouping>
 80049c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	68b9      	ldr	r1, [r7, #8]
 80049ce:	6978      	ldr	r0, [r7, #20]
 80049d0:	f7ff ff8e 	bl	80048f0 <NVIC_EncodePriority>
 80049d4:	4602      	mov	r2, r0
 80049d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049da:	4611      	mov	r1, r2
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff ff5d 	bl	800489c <__NVIC_SetPriority>
}
 80049e2:	bf00      	nop
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b082      	sub	sp, #8
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	4603      	mov	r3, r0
 80049f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff ff31 	bl	8004860 <__NVIC_EnableIRQ>
}
 80049fe:	bf00      	nop
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b082      	sub	sp, #8
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff ffa2 	bl	8004958 <SysTick_Config>
 8004a14:	4603      	mov	r3, r0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e037      	b.n	8004aa4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004a4a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004a4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f9b8 	bl	8004dfc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}  
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_DMA_Start_IT+0x20>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e04a      	b.n	8004b62 <HAL_DMA_Start_IT+0xb6>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d13a      	bne.n	8004b54 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 f94b 	bl	8004d9e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d008      	beq.n	8004b22 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 020e 	orr.w	r2, r2, #14
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	e00f      	b.n	8004b42 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f042 020a 	orr.w	r2, r2, #10
 8004b30:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0204 	bic.w	r2, r2, #4
 8004b40:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0201 	orr.w	r2, r2, #1
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	e005      	b.n	8004b60 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004b60:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d008      	beq.n	8004b8e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2204      	movs	r2, #4
 8004b80:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e020      	b.n	8004bd0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 020e 	bic.w	r2, r2, #14
 8004b9c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0201 	bic.w	r2, r2, #1
 8004bac:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8004bbc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d005      	beq.n	8004bfe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2204      	movs	r2, #4
 8004bf6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	73fb      	strb	r3, [r7, #15]
 8004bfc:	e027      	b.n	8004c4e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 020e 	bic.w	r2, r2, #14
 8004c0c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0201 	bic.w	r2, r2, #1
 8004c1c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c26:	2101      	movs	r1, #1
 8004c28:	fa01 f202 	lsl.w	r2, r1, r2
 8004c2c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	4798      	blx	r3
    } 
  }
  return status;
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	2204      	movs	r2, #4
 8004c76:	409a      	lsls	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d024      	beq.n	8004cca <HAL_DMA_IRQHandler+0x72>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d01f      	beq.n	8004cca <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0320 	and.w	r3, r3, #32
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d107      	bne.n	8004ca8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0204 	bic.w	r2, r2, #4
 8004ca6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb0:	2104      	movs	r1, #4
 8004cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8004cb6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d06a      	beq.n	8004d96 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004cc8:	e065      	b.n	8004d96 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	2202      	movs	r2, #2
 8004cd0:	409a      	lsls	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d02c      	beq.n	8004d34 <HAL_DMA_IRQHandler+0xdc>
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d027      	beq.n	8004d34 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10b      	bne.n	8004d0a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 020a 	bic.w	r2, r2, #10
 8004d00:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d12:	2102      	movs	r1, #2
 8004d14:	fa01 f202 	lsl.w	r2, r1, r2
 8004d18:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d035      	beq.n	8004d96 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004d32:	e030      	b.n	8004d96 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	2208      	movs	r2, #8
 8004d3a:	409a      	lsls	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4013      	ands	r3, r2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d028      	beq.n	8004d96 <HAL_DMA_IRQHandler+0x13e>
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d023      	beq.n	8004d96 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 020e 	bic.w	r2, r2, #14
 8004d5c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d66:	2101      	movs	r1, #1
 8004d68:	fa01 f202 	lsl.w	r2, r1, r2
 8004d6c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d004      	beq.n	8004d96 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	4798      	blx	r3
    }
  }
}  
 8004d94:	e7ff      	b.n	8004d96 <HAL_DMA_IRQHandler+0x13e>
 8004d96:	bf00      	nop
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b085      	sub	sp, #20
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	60f8      	str	r0, [r7, #12]
 8004da6:	60b9      	str	r1, [r7, #8]
 8004da8:	607a      	str	r2, [r7, #4]
 8004daa:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db4:	2101      	movs	r1, #1
 8004db6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dba:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b10      	cmp	r3, #16
 8004dca:	d108      	bne.n	8004dde <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ddc:	e007      	b.n	8004dee <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	60da      	str	r2, [r3, #12]
}
 8004dee:	bf00      	nop
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
	...

08004dfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4b09      	ldr	r3, [pc, #36]	; (8004e30 <DMA_CalcBaseAndBitshift+0x34>)
 8004e0c:	4413      	add	r3, r2
 8004e0e:	4a09      	ldr	r2, [pc, #36]	; (8004e34 <DMA_CalcBaseAndBitshift+0x38>)
 8004e10:	fba2 2303 	umull	r2, r3, r2, r3
 8004e14:	091b      	lsrs	r3, r3, #4
 8004e16:	009a      	lsls	r2, r3, #2
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a06      	ldr	r2, [pc, #24]	; (8004e38 <DMA_CalcBaseAndBitshift+0x3c>)
 8004e20:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	bffdfff8 	.word	0xbffdfff8
 8004e34:	cccccccd 	.word	0xcccccccd
 8004e38:	40020000 	.word	0x40020000

08004e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e46:	2300      	movs	r3, #0
 8004e48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e4a:	e14e      	b.n	80050ea <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	2101      	movs	r1, #1
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	fa01 f303 	lsl.w	r3, r1, r3
 8004e58:	4013      	ands	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 8140 	beq.w	80050e4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f003 0303 	and.w	r3, r3, #3
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d005      	beq.n	8004e7c <HAL_GPIO_Init+0x40>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	f003 0303 	and.w	r3, r3, #3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d130      	bne.n	8004ede <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	2203      	movs	r2, #3
 8004e88:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	693a      	ldr	r2, [r7, #16]
 8004e90:	4013      	ands	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eba:	43db      	mvns	r3, r3
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	091b      	lsrs	r3, r3, #4
 8004ec8:	f003 0201 	and.w	r2, r3, #1
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d017      	beq.n	8004f1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	2203      	movs	r2, #3
 8004ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8004efa:	43db      	mvns	r3, r3
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4013      	ands	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	689a      	ldr	r2, [r3, #8]
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d123      	bne.n	8004f6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	08da      	lsrs	r2, r3, #3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3208      	adds	r2, #8
 8004f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	220f      	movs	r2, #15
 8004f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f42:	43db      	mvns	r3, r3
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4013      	ands	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f003 0307 	and.w	r3, r3, #7
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	08da      	lsrs	r2, r3, #3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3208      	adds	r2, #8
 8004f68:	6939      	ldr	r1, [r7, #16]
 8004f6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	2203      	movs	r2, #3
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4013      	ands	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f003 0203 	and.w	r2, r3, #3
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	fa02 f303 	lsl.w	r3, r2, r3
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 809a 	beq.w	80050e4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fb0:	4b55      	ldr	r3, [pc, #340]	; (8005108 <HAL_GPIO_Init+0x2cc>)
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	4a54      	ldr	r2, [pc, #336]	; (8005108 <HAL_GPIO_Init+0x2cc>)
 8004fb6:	f043 0301 	orr.w	r3, r3, #1
 8004fba:	6193      	str	r3, [r2, #24]
 8004fbc:	4b52      	ldr	r3, [pc, #328]	; (8005108 <HAL_GPIO_Init+0x2cc>)
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	60bb      	str	r3, [r7, #8]
 8004fc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004fc8:	4a50      	ldr	r2, [pc, #320]	; (800510c <HAL_GPIO_Init+0x2d0>)
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	089b      	lsrs	r3, r3, #2
 8004fce:	3302      	adds	r3, #2
 8004fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f003 0303 	and.w	r3, r3, #3
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	220f      	movs	r2, #15
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004ff2:	d013      	beq.n	800501c <HAL_GPIO_Init+0x1e0>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a46      	ldr	r2, [pc, #280]	; (8005110 <HAL_GPIO_Init+0x2d4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d00d      	beq.n	8005018 <HAL_GPIO_Init+0x1dc>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a45      	ldr	r2, [pc, #276]	; (8005114 <HAL_GPIO_Init+0x2d8>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d007      	beq.n	8005014 <HAL_GPIO_Init+0x1d8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a44      	ldr	r2, [pc, #272]	; (8005118 <HAL_GPIO_Init+0x2dc>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d101      	bne.n	8005010 <HAL_GPIO_Init+0x1d4>
 800500c:	2303      	movs	r3, #3
 800500e:	e006      	b.n	800501e <HAL_GPIO_Init+0x1e2>
 8005010:	2305      	movs	r3, #5
 8005012:	e004      	b.n	800501e <HAL_GPIO_Init+0x1e2>
 8005014:	2302      	movs	r3, #2
 8005016:	e002      	b.n	800501e <HAL_GPIO_Init+0x1e2>
 8005018:	2301      	movs	r3, #1
 800501a:	e000      	b.n	800501e <HAL_GPIO_Init+0x1e2>
 800501c:	2300      	movs	r3, #0
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	f002 0203 	and.w	r2, r2, #3
 8005024:	0092      	lsls	r2, r2, #2
 8005026:	4093      	lsls	r3, r2
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800502e:	4937      	ldr	r1, [pc, #220]	; (800510c <HAL_GPIO_Init+0x2d0>)
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	089b      	lsrs	r3, r3, #2
 8005034:	3302      	adds	r3, #2
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800503c:	4b37      	ldr	r3, [pc, #220]	; (800511c <HAL_GPIO_Init+0x2e0>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	43db      	mvns	r3, r3
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4013      	ands	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005060:	4a2e      	ldr	r2, [pc, #184]	; (800511c <HAL_GPIO_Init+0x2e0>)
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005066:	4b2d      	ldr	r3, [pc, #180]	; (800511c <HAL_GPIO_Init+0x2e0>)
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	43db      	mvns	r3, r3
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	4013      	ands	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800508a:	4a24      	ldr	r2, [pc, #144]	; (800511c <HAL_GPIO_Init+0x2e0>)
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005090:	4b22      	ldr	r3, [pc, #136]	; (800511c <HAL_GPIO_Init+0x2e0>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	43db      	mvns	r3, r3
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4013      	ands	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80050b4:	4a19      	ldr	r2, [pc, #100]	; (800511c <HAL_GPIO_Init+0x2e0>)
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050ba:	4b18      	ldr	r3, [pc, #96]	; (800511c <HAL_GPIO_Init+0x2e0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	43db      	mvns	r3, r3
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	4013      	ands	r3, r2
 80050c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80050de:	4a0f      	ldr	r2, [pc, #60]	; (800511c <HAL_GPIO_Init+0x2e0>)
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	3301      	adds	r3, #1
 80050e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	fa22 f303 	lsr.w	r3, r2, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f47f aea9 	bne.w	8004e4c <HAL_GPIO_Init+0x10>
  }
}
 80050fa:	bf00      	nop
 80050fc:	bf00      	nop
 80050fe:	371c      	adds	r7, #28
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	40021000 	.word	0x40021000
 800510c:	40010000 	.word	0x40010000
 8005110:	48000400 	.word	0x48000400
 8005114:	48000800 	.word	0x48000800
 8005118:	48000c00 	.word	0x48000c00
 800511c:	40010400 	.word	0x40010400

08005120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	807b      	strh	r3, [r7, #2]
 800512c:	4613      	mov	r3, r2
 800512e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005130:	787b      	ldrb	r3, [r7, #1]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005136:	887a      	ldrh	r2, [r7, #2]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800513c:	e002      	b.n	8005144 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800513e:	887a      	ldrh	r2, [r7, #2]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b086      	sub	sp, #24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e0ba      	b.n	80052d8 <HAL_HRTIM_Init+0x188>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2202      	movs	r2, #2
 8005166:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d02e      	beq.n	8005204 <HAL_HRTIM_Init+0xb4>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a4d      	ldr	r2, [pc, #308]	; (80052e0 <HAL_HRTIM_Init+0x190>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d10b      	bne.n	80051c8 <HAL_HRTIM_Init+0x78>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80051b0:	4b4c      	ldr	r3, [pc, #304]	; (80052e4 <HAL_HRTIM_Init+0x194>)
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	4a4b      	ldr	r2, [pc, #300]	; (80052e4 <HAL_HRTIM_Init+0x194>)
 80051b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051ba:	6193      	str	r3, [r2, #24]
 80051bc:	4b49      	ldr	r3, [pc, #292]	; (80052e4 <HAL_HRTIM_Init+0x194>)
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80051d6:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80051ec:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f7fe f927 	bl	8003458 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d012      	beq.n	800523c <HAL_HRTIM_Init+0xec>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005224:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800524c:	2300      	movs	r3, #0
 800524e:	75fb      	strb	r3, [r7, #23]
 8005250:	e03e      	b.n	80052d0 <HAL_HRTIM_Init+0x180>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8005252:	7dfa      	ldrb	r2, [r7, #23]
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	4613      	mov	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	1a9b      	subs	r3, r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	440b      	add	r3, r1
 8005260:	3318      	adds	r3, #24
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8005266:	7dfa      	ldrb	r2, [r7, #23]
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	1a9b      	subs	r3, r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	331c      	adds	r3, #28
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 800527a:	7dfa      	ldrb	r2, [r7, #23]
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	1a9b      	subs	r3, r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	440b      	add	r3, r1
 8005288:	3320      	adds	r3, #32
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800528e:	7dfa      	ldrb	r2, [r7, #23]
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	1a9b      	subs	r3, r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	440b      	add	r3, r1
 800529c:	3324      	adds	r3, #36	; 0x24
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 80052a2:	7dfa      	ldrb	r2, [r7, #23]
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	4613      	mov	r3, r2
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	1a9b      	subs	r3, r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	440b      	add	r3, r1
 80052b0:	3328      	adds	r3, #40	; 0x28
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 80052b6:	7dfa      	ldrb	r2, [r7, #23]
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	4613      	mov	r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	1a9b      	subs	r3, r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	440b      	add	r3, r1
 80052c4:	3330      	adds	r3, #48	; 0x30
 80052c6:	2200      	movs	r2, #0
 80052c8:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80052ca:	7dfb      	ldrb	r3, [r7, #23]
 80052cc:	3301      	adds	r3, #1
 80052ce:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 80052d0:	7dfb      	ldrb	r3, [r7, #23]
 80052d2:	2b05      	cmp	r3, #5
 80052d4:	d9bd      	bls.n	8005252 <HAL_HRTIM_Init+0x102>
  }

  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40017400 	.word	0x40017400
 80052e4:	40021000 	.word	0x40021000

080052e8 <HAL_HRTIM_DLLCalibrationStart>:
  *       within the HAL_HRTIM_PollForDLLCalibration function, just before
  *       exiting the function.
  */
HAL_StatusTypeDef HAL_HRTIM_DLLCalibrationStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t CalibrationRate)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_CALIBRATIONRATE(CalibrationRate));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d101      	bne.n	8005300 <HAL_HRTIM_DLLCalibrationStart+0x18>
 80052fc:	2302      	movs	r3, #2
 80052fe:	e045      	b.n	800538c <HAL_HRTIM_DLLCalibrationStart+0xa4>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005316:	d114      	bne.n	8005342 <HAL_HRTIM_DLLCalibrationStart+0x5a>
  {
    /* One shot DLL calibration */
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0202 	bic.w	r2, r2, #2
 8005328:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0201 	orr.w	r2, r2, #1
 800533c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
 8005340:	e01f      	b.n	8005382 <HAL_HRTIM_DLLCalibrationStart+0x9a>
  }
  else
  {
    /* Periodic DLL calibration */
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0202 	orr.w	r2, r2, #2
 8005352:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800535e:	f023 010c 	bic.w	r1, r3, #12
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f8d3 23cc 	ldr.w	r2, [r3, #972]	; 0x3cc
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0201 	orr.w	r2, r2, #1
 800537e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_HRTIM_PollForDLLCalibration>:
  * @param  Timeout Timeout duration in millisecond
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_PollForDLLCalibration(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t Timeout)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = HAL_GetTick();
 80053a2:	f7fe fb11 	bl	80039c8 <HAL_GetTick>
 80053a6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80053a8:	e014      	b.n	80053d4 <HAL_HRTIM_PollForDLLCalibration+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b0:	d010      	beq.n	80053d4 <HAL_HRTIM_PollForDLLCalibration+0x3c>
    {
      if(((HAL_GetTick()-tickstart) > Timeout) || (Timeout == 0U))
 80053b2:	f7fe fb09 	bl	80039c8 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d302      	bcc.n	80053c8 <HAL_HRTIM_PollForDLLCalibration+0x30>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d105      	bne.n	80053d4 <HAL_HRTIM_PollForDLLCalibration+0x3c>
      {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2207      	movs	r2, #7
 80053cc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
        return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e011      	b.n	80053f8 <HAL_HRTIM_PollForDLLCalibration+0x60>
  while(__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80053dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e4:	d1e1      	bne.n	80053aa <HAL_HRTIM_PollForDLLCalibration+0x12>
      }
    }
  }

  /* Set HRTIM State */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process unlocked */
  __HAL_UNLOCK(hhrtim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d101      	bne.n	800541c <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8005418:	2302      	movs	r3, #2
 800541a:	e015      	b.n	8005448 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b05      	cmp	r3, #5
 8005428:	d104      	bne.n	8005434 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 fb84 	bl	8005b3a <HRTIM_MasterBase_Config>
 8005432:	e004      	b.n	800543e <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 fbad 	bl	8005b98 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_HRTIM_ADCTriggerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_ADCTriggerConfig(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t ADCTrigger,
                                             const HRTIM_ADCTriggerCfgTypeDef* pADCTriggerCfg)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]

  /* Check parameters */
  assert_param(IS_HRTIM_ADCTRIGGER(ADCTrigger));
  assert_param(IS_HRTIM_ADCTRIGGERUPDATE(pADCTriggerCfg->UpdateSource));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d101      	bne.n	800546c <HAL_HRTIM_ADCTriggerConfig+0x1c>
  {
     return HAL_BUSY;
 8005468:	2302      	movs	r3, #2
 800546a:	e095      	b.n	8005598 <HAL_HRTIM_ADCTriggerConfig+0x148>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005472:	2b01      	cmp	r3, #1
 8005474:	d101      	bne.n	800547a <HAL_HRTIM_ADCTriggerConfig+0x2a>
 8005476:	2302      	movs	r3, #2
 8005478:	e08e      	b.n	8005598 <HAL_HRTIM_ADCTriggerConfig+0x148>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2202      	movs	r2, #2
 8005486:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Set the ADC trigger update source */
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005492:	617b      	str	r3, [r7, #20]

  switch (ADCTrigger)
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	3b01      	subs	r3, #1
 8005498:	2b07      	cmp	r3, #7
 800549a:	d85e      	bhi.n	800555a <HAL_HRTIM_ADCTriggerConfig+0x10a>
 800549c:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <HAL_HRTIM_ADCTriggerConfig+0x54>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	080054c5 	.word	0x080054c5
 80054a8:	080054e9 	.word	0x080054e9
 80054ac:	0800555b 	.word	0x0800555b
 80054b0:	0800550f 	.word	0x0800550f
 80054b4:	0800555b 	.word	0x0800555b
 80054b8:	0800555b 	.word	0x0800555b
 80054bc:	0800555b 	.word	0x0800555b
 80054c0:	08005535 	.word	0x08005535
  {
  case HRTIM_ADCTRIGGER_1:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80054ca:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 1 source */
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6852      	ldr	r2, [r2, #4]
 80054e2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
      break;
 80054e6:	e041      	b.n	800556c <HAL_HRTIM_ADCTriggerConfig+0x11c>
    }

  case HRTIM_ADCTRIGGER_2:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 80054ee:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 2 source */
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6852      	ldr	r2, [r2, #4]
 8005508:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
      break;
 800550c:	e02e      	b.n	800556c <HAL_HRTIM_ADCTriggerConfig+0x11c>
    }

  case HRTIM_ADCTRIGGER_3:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8005514:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	019b      	lsls	r3, r3, #6
 800551c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	4313      	orrs	r3, r2
 8005524:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 3 source */
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	6852      	ldr	r2, [r2, #4]
 800552e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
      break;
 8005532:	e01b      	b.n	800556c <HAL_HRTIM_ADCTriggerConfig+0x11c>
    }

  case HRTIM_ADCTRIGGER_4:
    {
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800553a:	617b      	str	r3, [r7, #20]
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	025b      	lsls	r3, r3, #9
 8005542:	f003 6360 	and.w	r3, r3, #234881024	; 0xe000000
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]

      /* Set the ADC trigger 4 source */
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6852      	ldr	r2, [r2, #4]
 8005554:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
      break;
 8005558:	e008      	b.n	800556c <HAL_HRTIM_ADCTriggerConfig+0x11c>
    }

  default:
    {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2207      	movs	r2, #7
 800555e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 800556a:	bf00      	nop
    }
  }

  if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b07      	cmp	r3, #7
 8005576:	d101      	bne.n	800557c <HAL_HRTIM_ADCTriggerConfig+0x12c>
  {
     return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e00d      	b.n	8005598 <HAL_HRTIM_ADCTriggerConfig+0x148>
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	371c      	adds	r7, #28
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d101      	bne.n	80055c0 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80055bc:	2302      	movs	r3, #2
 80055be:	e05f      	b.n	8005680 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e058      	b.n	8005680 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2202      	movs	r2, #2
 80055da:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	2b05      	cmp	r3, #5
 80055e2:	d104      	bne.n	80055ee <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 80055e4:	6879      	ldr	r1, [r7, #4]
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fb16 	bl	8005c18 <HRTIM_MasterWaveform_Config>
 80055ec:	e004      	b.n	80055f8 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	68b9      	ldr	r1, [r7, #8]
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 fb76 	bl	8005ce4 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6819      	ldr	r1, [r3, #0]
 80055fc:	68f8      	ldr	r0, [r7, #12]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	4613      	mov	r3, r2
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	1a9b      	subs	r3, r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4403      	add	r3, r0
 800560a:	3320      	adds	r3, #32
 800560c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6859      	ldr	r1, [r3, #4]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	4613      	mov	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	1a9b      	subs	r3, r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4403      	add	r3, r0
 8005620:	3324      	adds	r3, #36	; 0x24
 8005622:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6899      	ldr	r1, [r3, #8]
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	4613      	mov	r3, r2
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	1a9b      	subs	r3, r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4403      	add	r3, r0
 8005636:	3328      	adds	r3, #40	; 0x28
 8005638:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68d9      	ldr	r1, [r3, #12]
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	4613      	mov	r3, r2
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	1a9b      	subs	r3, r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4403      	add	r3, r0
 800564c:	332c      	adds	r3, #44	; 0x2c
 800564e:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6919      	ldr	r1, [r3, #16]
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	4613      	mov	r3, r2
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	1a9b      	subs	r3, r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4403      	add	r3, r0
 8005662:	3330      	adds	r3, #48	; 0x30
 8005664:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8005666:	68b9      	ldr	r1, [r7, #8]
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f000 fd53 	bl	8006114 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d101      	bne.n	80056a6 <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80056a2:	2302      	movs	r3, #2
 80056a4:	e157      	b.n	8005956 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e150      	b.n	8005956 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b05      	cmp	r3, #5
 80056c8:	d140      	bne.n	800574c <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3b01      	subs	r3, #1
 80056ce:	2b07      	cmp	r3, #7
 80056d0:	d82a      	bhi.n	8005728 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80056d2:	a201      	add	r2, pc, #4	; (adr r2, 80056d8 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80056d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d8:	080056f9 	.word	0x080056f9
 80056dc:	08005705 	.word	0x08005705
 80056e0:	08005729 	.word	0x08005729
 80056e4:	08005711 	.word	0x08005711
 80056e8:	08005729 	.word	0x08005729
 80056ec:	08005729 	.word	0x08005729
 80056f0:	08005729 	.word	0x08005729
 80056f4:	0800571d 	.word	0x0800571d
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	61da      	str	r2, [r3, #28]
        break;
 8005702:	e01a      	b.n	800573a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	6812      	ldr	r2, [r2, #0]
 800570c:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 800570e:	e014      	b.n	800573a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 800571a:	e00e      	b.n	800573a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8005726:	e008      	b.n	800573a <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2207      	movs	r2, #7
 800572c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8005738:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b07      	cmp	r3, #7
 8005744:	f040 80fe 	bne.w	8005944 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e104      	b.n	8005956 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3b01      	subs	r3, #1
 8005750:	2b07      	cmp	r3, #7
 8005752:	f200 80e3 	bhi.w	800591c <HAL_HRTIM_WaveformCompareConfig+0x294>
 8005756:	a201      	add	r2, pc, #4	; (adr r2, 800575c <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8005758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575c:	0800577d 	.word	0x0800577d
 8005760:	08005791 	.word	0x08005791
 8005764:	0800591d 	.word	0x0800591d
 8005768:	0800584d 	.word	0x0800584d
 800576c:	0800591d 	.word	0x0800591d
 8005770:	0800591d 	.word	0x0800591d
 8005774:	0800591d 	.word	0x0800591d
 8005778:	08005861 	.word	0x08005861
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6819      	ldr	r1, [r3, #0]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	01db      	lsls	r3, r3, #7
 8005788:	440b      	add	r3, r1
 800578a:	339c      	adds	r3, #156	; 0x9c
 800578c:	601a      	str	r2, [r3, #0]
        break;
 800578e:	e0d1      	b.n	8005934 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6819      	ldr	r1, [r3, #0]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	01db      	lsls	r3, r3, #7
 800579c:	440b      	add	r3, r1
 800579e:	33a4      	adds	r3, #164	; 0xa4
 80057a0:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d03f      	beq.n	800582a <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	3301      	adds	r3, #1
 80057b2:	01db      	lsls	r3, r3, #7
 80057b4:	4413      	add	r3, r2
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	6811      	ldr	r1, [r2, #0]
 80057bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	3301      	adds	r3, #1
 80057c4:	01db      	lsls	r3, r3, #7
 80057c6:	440b      	add	r3, r1
 80057c8:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	3301      	adds	r3, #1
 80057d2:	01db      	lsls	r3, r3, #7
 80057d4:	4413      	add	r3, r2
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	68f9      	ldr	r1, [r7, #12]
 80057de:	6809      	ldr	r1, [r1, #0]
 80057e0:	431a      	orrs	r2, r3
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	3301      	adds	r3, #1
 80057e6:	01db      	lsls	r3, r3, #7
 80057e8:	440b      	add	r3, r1
 80057ea:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f4:	d109      	bne.n	800580a <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6819      	ldr	r1, [r3, #0]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	689a      	ldr	r2, [r3, #8]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	01db      	lsls	r3, r3, #7
 8005802:	440b      	add	r3, r1
 8005804:	339c      	adds	r3, #156	; 0x9c
 8005806:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8005808:	e091      	b.n	800592e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005812:	f040 808c 	bne.w	800592e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6819      	ldr	r1, [r3, #0]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	689a      	ldr	r2, [r3, #8]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	01db      	lsls	r3, r3, #7
 8005822:	440b      	add	r3, r1
 8005824:	33a8      	adds	r3, #168	; 0xa8
 8005826:	601a      	str	r2, [r3, #0]
         break;
 8005828:	e081      	b.n	800592e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	3301      	adds	r3, #1
 8005832:	01db      	lsls	r3, r3, #7
 8005834:	4413      	add	r3, r2
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	6811      	ldr	r1, [r2, #0]
 800583c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	3301      	adds	r3, #1
 8005844:	01db      	lsls	r3, r3, #7
 8005846:	440b      	add	r3, r1
 8005848:	601a      	str	r2, [r3, #0]
         break;
 800584a:	e070      	b.n	800592e <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6819      	ldr	r1, [r3, #0]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	01db      	lsls	r3, r3, #7
 8005858:	440b      	add	r3, r1
 800585a:	33a8      	adds	r3, #168	; 0xa8
 800585c:	601a      	str	r2, [r3, #0]
        break;
 800585e:	e069      	b.n	8005934 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6819      	ldr	r1, [r3, #0]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	01db      	lsls	r3, r3, #7
 800586c:	440b      	add	r3, r1
 800586e:	33ac      	adds	r3, #172	; 0xac
 8005870:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d03f      	beq.n	80058fa <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	3301      	adds	r3, #1
 8005882:	01db      	lsls	r3, r3, #7
 8005884:	4413      	add	r3, r2
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	6811      	ldr	r1, [r2, #0]
 800588c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	3301      	adds	r3, #1
 8005894:	01db      	lsls	r3, r3, #7
 8005896:	440b      	add	r3, r1
 8005898:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	3301      	adds	r3, #1
 80058a2:	01db      	lsls	r3, r3, #7
 80058a4:	4413      	add	r3, r2
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	68f9      	ldr	r1, [r7, #12]
 80058b0:	6809      	ldr	r1, [r1, #0]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	3301      	adds	r3, #1
 80058b8:	01db      	lsls	r3, r3, #7
 80058ba:	440b      	add	r3, r1
 80058bc:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c6:	d109      	bne.n	80058dc <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6819      	ldr	r1, [r3, #0]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	01db      	lsls	r3, r3, #7
 80058d4:	440b      	add	r3, r1
 80058d6:	339c      	adds	r3, #156	; 0x9c
 80058d8:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80058da:	e02a      	b.n	8005932 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80058e4:	d125      	bne.n	8005932 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6819      	ldr	r1, [r3, #0]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	689a      	ldr	r2, [r3, #8]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	01db      	lsls	r3, r3, #7
 80058f2:	440b      	add	r3, r1
 80058f4:	33a8      	adds	r3, #168	; 0xa8
 80058f6:	601a      	str	r2, [r3, #0]
         break;
 80058f8:	e01b      	b.n	8005932 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	3301      	adds	r3, #1
 8005902:	01db      	lsls	r3, r3, #7
 8005904:	4413      	add	r3, r2
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	6811      	ldr	r1, [r2, #0]
 800590c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	3301      	adds	r3, #1
 8005914:	01db      	lsls	r3, r3, #7
 8005916:	440b      	add	r3, r1
 8005918:	601a      	str	r2, [r3, #0]
         break;
 800591a:	e00a      	b.n	8005932 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2207      	movs	r2, #7
 8005920:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 800592c:	e002      	b.n	8005934 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 800592e:	bf00      	nop
 8005930:	e000      	b.n	8005934 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8005932:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b07      	cmp	r3, #7
 800593e:	d101      	bne.n	8005944 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e008      	b.n	8005956 <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop

08005964 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d101      	bne.n	8005982 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 800597e:	2302      	movs	r3, #2
 8005980:	e01d      	b.n	80059be <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 800598c:	2302      	movs	r3, #2
 800598e:	e016      	b.n	80059be <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	68b9      	ldr	r1, [r7, #8]
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 fadc 	bl	8005f64 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
 80059ce:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <HAL_HRTIM_WaveformOutputStart+0x18>
 80059da:	2302      	movs	r3, #2
 80059dc:	e01a      	b.n	8005a14 <HAL_HRTIM_WaveformOutputStart+0x4e>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2202      	movs	r2, #2
 80059ea:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	683a      	ldr	r2, [r7, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d101      	bne.n	8005a38 <HAL_HRTIM_WaveformOutputStop+0x18>
 8005a34:	2302      	movs	r3, #2
 8005a36:	e01a      	b.n	8005a6e <HAL_HRTIM_WaveformOutputStop+0x4e>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <HAL_HRTIM_WaveformCountStart>:
  *                   @arg HRTIM_TIMERID_TIMER_E
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart(HRTIM_HandleTypeDef * hhrtim,
                                                 uint32_t Timers)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d101      	bne.n	8005a92 <HAL_HRTIM_WaveformCountStart+0x18>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e018      	b.n	8005ac4 <HAL_HRTIM_WaveformCountStart+0x4a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6819      	ldr	r1, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_HRTIM_SoftwareUpdate>:
  * @note The 'software update' bits in the HRTIM control register 2 register are
  *       automatically reset by hardware
  */
HAL_StatusTypeDef HAL_HRTIM_SoftwareUpdate(HRTIM_HandleTypeDef * hhrtim,
                                           uint32_t Timers)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERUPDATE(Timers));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d101      	bne.n	8005aea <HAL_HRTIM_SoftwareUpdate+0x1a>
  {
     return HAL_BUSY;
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	e021      	b.n	8005b2e <HAL_HRTIM_SoftwareUpdate+0x5e>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d101      	bne.n	8005af8 <HAL_HRTIM_SoftwareUpdate+0x28>
 8005af4:	2302      	movs	r3, #2
 8005af6:	e01a      	b.n	8005b2e <HAL_HRTIM_SoftwareUpdate+0x5e>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Force timer(s) registers update */
  hhrtim->Instance->sCommonRegs.CR2 |= Timers;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f8d3 1384 	ldr.w	r1, [r3, #900]	; 0x384
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b085      	sub	sp, #20
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0307 	bic.w	r3, r3, #7
 8005b52:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f023 0318 	bic.w	r3, r3, #24
 8005b64:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	6812      	ldr	r2, [r2, #0]
 8005b80:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	6852      	ldr	r2, [r2, #4]
 8005b8a:	619a      	str	r2, [r3, #24]
}
 8005b8c:	bf00      	nop
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	3301      	adds	r3, #1
 8005bac:	01db      	lsls	r3, r3, #7
 8005bae:	4413      	add	r3, r2
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f023 0307 	bic.w	r3, r3, #7
 8005bba:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f023 0318 	bic.w	r3, r3, #24
 8005bcc:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	3301      	adds	r3, #1
 8005be0:	01db      	lsls	r3, r3, #7
 8005be2:	4413      	add	r3, r2
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6819      	ldr	r1, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	01db      	lsls	r3, r3, #7
 8005bf4:	440b      	add	r3, r1
 8005bf6:	3394      	adds	r3, #148	; 0x94
 8005bf8:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6819      	ldr	r1, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	01db      	lsls	r3, r3, #7
 8005c06:	440b      	add	r3, r1
 8005c08:	3398      	adds	r3, #152	; 0x98
 8005c0a:	601a      	str	r2, [r3, #0]
}
 8005c0c:	bf00      	nop
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8005c32:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0320 	bic.w	r3, r3, #32
 8005c3a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c4c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c5e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005c70:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005c82:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005c94:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005ca8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cba:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8005cd8:	bf00      	nop
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b08b      	sub	sp, #44	; 0x2c
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	01db      	lsls	r3, r3, #7
 8005cfa:	4413      	add	r3, r2
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	6811      	ldr	r1, [r2, #0]
 8005d02:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	01db      	lsls	r3, r3, #7
 8005d0c:	440b      	add	r3, r1
 8005d0e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	3301      	adds	r3, #1
 8005d18:	01db      	lsls	r3, r3, #7
 8005d1a:	4413      	add	r3, r2
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	01db      	lsls	r3, r3, #7
 8005d28:	4413      	add	r3, r2
 8005d2a:	33e8      	adds	r3, #232	; 0xe8
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	01db      	lsls	r3, r3, #7
 8005d38:	4413      	add	r3, r2
 8005d3a:	33e4      	adds	r3, #228	; 0xe4
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8005d48:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	f023 0320 	bic.w	r3, r3, #32
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8005d98:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da0:	4313      	orrs	r3, r2
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db2:	4313      	orrs	r3, r2
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dc6:	d103      	bne.n	8005dd0 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dde:	4313      	orrs	r3, r2
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005de8:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005df0:	4313      	orrs	r3, r2
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8005dfa:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e02:	4313      	orrs	r3, r2
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	f023 031f 	bic.w	r3, r3, #31
 8005e0c:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e12:	f003 031f 	and.w	r3, r3, #31
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e22:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d108      	bne.n	8005e48 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e3c:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	6a3a      	ldr	r2, [r7, #32]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4c:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8005e50:	d004      	beq.n	8005e5c <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e56:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8005e5a:	d103      	bne.n	8005e64 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e60:	2b40      	cmp	r3, #64	; 0x40
 8005e62:	d108      	bne.n	8005e76 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8005e6a:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e70:	6a3a      	ldr	r2, [r7, #32]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e7a:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d843      	bhi.n	8005f0a <HRTIM_TimingUnitWaveform_Config+0x226>
 8005e82:	a201      	add	r2, pc, #4	; (adr r2, 8005e88 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8005e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e88:	08005e9d 	.word	0x08005e9d
 8005e8c:	08005eb3 	.word	0x08005eb3
 8005e90:	08005ec9 	.word	0x08005ec9
 8005e94:	08005edf 	.word	0x08005edf
 8005e98:	08005ef5 	.word	0x08005ef5
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ea2:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	61fb      	str	r3, [r7, #28]
      break;
 8005eb0:	e02c      	b.n	8005f0c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eb8:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	69fa      	ldr	r2, [r7, #28]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	61fb      	str	r3, [r7, #28]
      break;
 8005ec6:	e021      	b.n	8005f0c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005ece:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	61fb      	str	r3, [r7, #28]
      break;
 8005edc:	e016      	b.n	8005f0c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ee4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eea:	011b      	lsls	r3, r3, #4
 8005eec:	69fa      	ldr	r2, [r7, #28]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	61fb      	str	r3, [r7, #28]
      break;
 8005ef2:	e00b      	b.n	8005f0c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005efa:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f00:	015b      	lsls	r3, r3, #5
 8005f02:	69fa      	ldr	r2, [r7, #28]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	61fb      	str	r3, [r7, #28]
      break;
 8005f08:	e000      	b.n	8005f0c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8005f0a:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	3301      	adds	r3, #1
 8005f14:	01db      	lsls	r3, r3, #7
 8005f16:	4413      	add	r3, r2
 8005f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f1a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	01db      	lsls	r3, r3, #7
 8005f24:	4413      	add	r3, r2
 8005f26:	33e8      	adds	r3, #232	; 0xe8
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	01db      	lsls	r3, r3, #7
 8005f34:	4413      	add	r3, r2
 8005f36:	33e4      	adds	r3, #228	; 0xe4
 8005f38:	6a3a      	ldr	r2, [r7, #32]
 8005f3a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	01db      	lsls	r3, r3, #7
 8005f44:	4413      	add	r3, r2
 8005f46:	33d4      	adds	r3, #212	; 0xd4
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8005f56:	bf00      	nop
 8005f58:	372c      	adds	r7, #44	; 0x2c
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop

08005f64 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b089      	sub	sp, #36	; 0x24
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	01db      	lsls	r3, r3, #7
 8005f7e:	4413      	add	r3, r2
 8005f80:	33e4      	adds	r3, #228	; 0xe4
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	01db      	lsls	r3, r3, #7
 8005f8e:	4413      	add	r3, r2
 8005f90:	33b8      	adds	r3, #184	; 0xb8
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	617b      	str	r3, [r7, #20]

  switch (Output)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f9c:	d04d      	beq.n	800603a <HRTIM_OutputConfig+0xd6>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fa4:	d85e      	bhi.n	8006064 <HRTIM_OutputConfig+0x100>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fac:	d032      	beq.n	8006014 <HRTIM_OutputConfig+0xb0>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb4:	d856      	bhi.n	8006064 <HRTIM_OutputConfig+0x100>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b80      	cmp	r3, #128	; 0x80
 8005fba:	d03e      	beq.n	800603a <HRTIM_OutputConfig+0xd6>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b80      	cmp	r3, #128	; 0x80
 8005fc0:	d850      	bhi.n	8006064 <HRTIM_OutputConfig+0x100>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b40      	cmp	r3, #64	; 0x40
 8005fc6:	d025      	beq.n	8006014 <HRTIM_OutputConfig+0xb0>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b40      	cmp	r3, #64	; 0x40
 8005fcc:	d84a      	bhi.n	8006064 <HRTIM_OutputConfig+0x100>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d01f      	beq.n	8006014 <HRTIM_OutputConfig+0xb0>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d044      	beq.n	8006064 <HRTIM_OutputConfig+0x100>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b20      	cmp	r3, #32
 8005fde:	d841      	bhi.n	8006064 <HRTIM_OutputConfig+0x100>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d33e      	bcc.n	8006064 <HRTIM_OutputConfig+0x100>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3b02      	subs	r3, #2
 8005fea:	2201      	movs	r2, #1
 8005fec:	409a      	lsls	r2, r3
 8005fee:	4b48      	ldr	r3, [pc, #288]	; (8006110 <HRTIM_OutputConfig+0x1ac>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	bf14      	ite	ne
 8005ff6:	2301      	movne	r3, #1
 8005ff8:	2300      	moveq	r3, #0
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d11c      	bne.n	800603a <HRTIM_OutputConfig+0xd6>
 8006000:	f244 0304 	movw	r3, #16388	; 0x4004
 8006004:	4013      	ands	r3, r2
 8006006:	2b00      	cmp	r3, #0
 8006008:	bf14      	ite	ne
 800600a:	2301      	movne	r3, #1
 800600c:	2300      	moveq	r3, #0
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d027      	beq.n	8006064 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6819      	ldr	r1, [r3, #0]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	01db      	lsls	r3, r3, #7
 8006020:	440b      	add	r3, r1
 8006022:	33bc      	adds	r3, #188	; 0xbc
 8006024:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6819      	ldr	r1, [r3, #0]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	689a      	ldr	r2, [r3, #8]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	01db      	lsls	r3, r3, #7
 8006032:	440b      	add	r3, r1
 8006034:	33c0      	adds	r3, #192	; 0xc0
 8006036:	601a      	str	r2, [r3, #0]
      break;
 8006038:	e015      	b.n	8006066 <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6819      	ldr	r1, [r3, #0]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	01db      	lsls	r3, r3, #7
 8006046:	440b      	add	r3, r1
 8006048:	33c4      	adds	r3, #196	; 0xc4
 800604a:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6819      	ldr	r1, [r3, #0]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	01db      	lsls	r3, r3, #7
 8006058:	440b      	add	r3, r1
 800605a:	33c8      	adds	r3, #200	; 0xc8
 800605c:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800605e:	2310      	movs	r3, #16
 8006060:	61bb      	str	r3, [r7, #24]
      break;
 8006062:	e000      	b.n	8006066 <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8006064:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8006066:	22fe      	movs	r2, #254	; 0xfe
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800606e:	43db      	mvns	r3, r3
 8006070:	69fa      	ldr	r2, [r7, #28]
 8006072:	4013      	ands	r3, r2
 8006074:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	fa02 f303 	lsl.w	r3, r2, r3
 8006080:	69fa      	ldr	r2, [r7, #28]
 8006082:	4313      	orrs	r3, r2
 8006084:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68da      	ldr	r2, [r3, #12]
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	fa02 f303 	lsl.w	r3, r2, r3
 8006090:	69fa      	ldr	r2, [r7, #28]
 8006092:	4313      	orrs	r3, r2
 8006094:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	691a      	ldr	r2, [r3, #16]
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	fa02 f303 	lsl.w	r3, r2, r3
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	695a      	ldr	r2, [r3, #20]
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	fa02 f303 	lsl.w	r3, r2, r3
 80060b0:	69fa      	ldr	r2, [r7, #28]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	699a      	ldr	r2, [r3, #24]
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	fa02 f303 	lsl.w	r3, r2, r3
 80060c0:	69fa      	ldr	r2, [r7, #28]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	2b08      	cmp	r3, #8
 80060cc:	d111      	bne.n	80060f2 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10c      	bne.n	80060f2 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d107      	bne.n	80060f2 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	69da      	ldr	r2, [r3, #28]
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ec:	69fa      	ldr	r2, [r7, #28]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	01db      	lsls	r3, r3, #7
 80060fa:	4413      	add	r3, r2
 80060fc:	33e4      	adds	r3, #228	; 0xe4
 80060fe:	69fa      	ldr	r2, [r7, #28]
 8006100:	601a      	str	r2, [r3, #0]
}
 8006102:	bf00      	nop
 8006104:	3724      	adds	r7, #36	; 0x24
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	40000041 	.word	0x40000041

08006114 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b05      	cmp	r3, #5
 8006122:	d851      	bhi.n	80061c8 <HRTIM_ForceRegistersUpdate+0xb4>
 8006124:	a201      	add	r2, pc, #4	; (adr r2, 800612c <HRTIM_ForceRegistersUpdate+0x18>)
 8006126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612a:	bf00      	nop
 800612c:	0800615b 	.word	0x0800615b
 8006130:	08006171 	.word	0x08006171
 8006134:	08006187 	.word	0x08006187
 8006138:	0800619d 	.word	0x0800619d
 800613c:	080061b3 	.word	0x080061b3
 8006140:	08006145 	.word	0x08006145
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f042 0201 	orr.w	r2, r2, #1
 8006154:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006158:	e037      	b.n	80061ca <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0202 	orr.w	r2, r2, #2
 800616a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800616e:	e02c      	b.n	80061ca <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f042 0204 	orr.w	r2, r2, #4
 8006180:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8006184:	e021      	b.n	80061ca <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 0208 	orr.w	r2, r2, #8
 8006196:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800619a:	e016      	b.n	80061ca <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f042 0210 	orr.w	r2, r2, #16
 80061ac:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80061b0:	e00b      	b.n	80061ca <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0220 	orr.w	r2, r2, #32
 80061c2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80061c6:	e000      	b.n	80061ca <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 80061c8:	bf00      	nop
  }
}
 80061ca:	bf00      	nop
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop

080061d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e081      	b.n	80062ee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d106      	bne.n	8006204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7fd f982 	bl	8003508 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2224      	movs	r2, #36	; 0x24
 8006208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0201 	bic.w	r2, r2, #1
 800621a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006228:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006238:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d107      	bne.n	8006252 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689a      	ldr	r2, [r3, #8]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800624e:	609a      	str	r2, [r3, #8]
 8006250:	e006      	b.n	8006260 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800625e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d104      	bne.n	8006272 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006270:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6812      	ldr	r2, [r2, #0]
 800627c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006284:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006294:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691a      	ldr	r2, [r3, #16]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	69d9      	ldr	r1, [r3, #28]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a1a      	ldr	r2, [r3, #32]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0201 	orr.w	r2, r2, #1
 80062ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2220      	movs	r2, #32
 80062da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
	...

080062f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b088      	sub	sp, #32
 80062fc:	af02      	add	r7, sp, #8
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	607a      	str	r2, [r7, #4]
 8006302:	461a      	mov	r2, r3
 8006304:	460b      	mov	r3, r1
 8006306:	817b      	strh	r3, [r7, #10]
 8006308:	4613      	mov	r3, r2
 800630a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b20      	cmp	r3, #32
 8006316:	f040 80da 	bne.w	80064ce <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006320:	2b01      	cmp	r3, #1
 8006322:	d101      	bne.n	8006328 <HAL_I2C_Master_Transmit+0x30>
 8006324:	2302      	movs	r3, #2
 8006326:	e0d3      	b.n	80064d0 <HAL_I2C_Master_Transmit+0x1d8>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006330:	f7fd fb4a 	bl	80039c8 <HAL_GetTick>
 8006334:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	2319      	movs	r3, #25
 800633c:	2201      	movs	r2, #1
 800633e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 fb4e 	bl	80069e4 <I2C_WaitOnFlagUntilTimeout>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e0be      	b.n	80064d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2221      	movs	r2, #33	; 0x21
 8006356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2210      	movs	r2, #16
 800635e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	893a      	ldrh	r2, [r7, #8]
 8006372:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637e:	b29b      	uxth	r3, r3
 8006380:	2bff      	cmp	r3, #255	; 0xff
 8006382:	d90e      	bls.n	80063a2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	22ff      	movs	r2, #255	; 0xff
 8006388:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800638e:	b2da      	uxtb	r2, r3
 8006390:	8979      	ldrh	r1, [r7, #10]
 8006392:	4b51      	ldr	r3, [pc, #324]	; (80064d8 <HAL_I2C_Master_Transmit+0x1e0>)
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 fd5e 	bl	8006e5c <I2C_TransferConfig>
 80063a0:	e06c      	b.n	800647c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a6:	b29a      	uxth	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	8979      	ldrh	r1, [r7, #10]
 80063b4:	4b48      	ldr	r3, [pc, #288]	; (80064d8 <HAL_I2C_Master_Transmit+0x1e0>)
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 fd4d 	bl	8006e5c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80063c2:	e05b      	b.n	800647c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	6a39      	ldr	r1, [r7, #32]
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 fb5a 	bl	8006a82 <I2C_WaitOnTXISFlagUntilTimeout>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e07b      	b.n	80064d0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063dc:	781a      	ldrb	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	3b01      	subs	r3, #1
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800640c:	b29b      	uxth	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d034      	beq.n	800647c <HAL_I2C_Master_Transmit+0x184>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006416:	2b00      	cmp	r3, #0
 8006418:	d130      	bne.n	800647c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	2200      	movs	r2, #0
 8006422:	2180      	movs	r1, #128	; 0x80
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 fadd 	bl	80069e4 <I2C_WaitOnFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d001      	beq.n	8006434 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e04d      	b.n	80064d0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006438:	b29b      	uxth	r3, r3
 800643a:	2bff      	cmp	r3, #255	; 0xff
 800643c:	d90e      	bls.n	800645c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	22ff      	movs	r2, #255	; 0xff
 8006442:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006448:	b2da      	uxtb	r2, r3
 800644a:	8979      	ldrh	r1, [r7, #10]
 800644c:	2300      	movs	r3, #0
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006454:	68f8      	ldr	r0, [r7, #12]
 8006456:	f000 fd01 	bl	8006e5c <I2C_TransferConfig>
 800645a:	e00f      	b.n	800647c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800646a:	b2da      	uxtb	r2, r3
 800646c:	8979      	ldrh	r1, [r7, #10]
 800646e:	2300      	movs	r3, #0
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fcf0 	bl	8006e5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d19e      	bne.n	80063c4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	6a39      	ldr	r1, [r7, #32]
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 fb40 	bl	8006b10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e01a      	b.n	80064d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2220      	movs	r2, #32
 80064a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6859      	ldr	r1, [r3, #4]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	4b0b      	ldr	r3, [pc, #44]	; (80064dc <HAL_I2C_Master_Transmit+0x1e4>)
 80064ae:	400b      	ands	r3, r1
 80064b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2220      	movs	r2, #32
 80064b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	e000      	b.n	80064d0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80064ce:	2302      	movs	r3, #2
  }
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	80002000 	.word	0x80002000
 80064dc:	fe00e800 	.word	0xfe00e800

080064e0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	607a      	str	r2, [r7, #4]
 80064ea:	461a      	mov	r2, r3
 80064ec:	460b      	mov	r3, r1
 80064ee:	817b      	strh	r3, [r7, #10]
 80064f0:	4613      	mov	r3, r2
 80064f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b20      	cmp	r3, #32
 80064fe:	f040 80db 	bne.w	80066b8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006508:	2b01      	cmp	r3, #1
 800650a:	d101      	bne.n	8006510 <HAL_I2C_Master_Receive+0x30>
 800650c:	2302      	movs	r3, #2
 800650e:	e0d4      	b.n	80066ba <HAL_I2C_Master_Receive+0x1da>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006518:	f7fd fa56 	bl	80039c8 <HAL_GetTick>
 800651c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	2319      	movs	r3, #25
 8006524:	2201      	movs	r2, #1
 8006526:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 fa5a 	bl	80069e4 <I2C_WaitOnFlagUntilTimeout>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e0bf      	b.n	80066ba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2222      	movs	r2, #34	; 0x22
 800653e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2210      	movs	r2, #16
 8006546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	893a      	ldrh	r2, [r7, #8]
 800655a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006566:	b29b      	uxth	r3, r3
 8006568:	2bff      	cmp	r3, #255	; 0xff
 800656a:	d90e      	bls.n	800658a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	22ff      	movs	r2, #255	; 0xff
 8006570:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006576:	b2da      	uxtb	r2, r3
 8006578:	8979      	ldrh	r1, [r7, #10]
 800657a:	4b52      	ldr	r3, [pc, #328]	; (80066c4 <HAL_I2C_Master_Receive+0x1e4>)
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 fc6a 	bl	8006e5c <I2C_TransferConfig>
 8006588:	e06d      	b.n	8006666 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800658e:	b29a      	uxth	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006598:	b2da      	uxtb	r2, r3
 800659a:	8979      	ldrh	r1, [r7, #10]
 800659c:	4b49      	ldr	r3, [pc, #292]	; (80066c4 <HAL_I2C_Master_Receive+0x1e4>)
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 fc59 	bl	8006e5c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80065aa:	e05c      	b.n	8006666 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	6a39      	ldr	r1, [r7, #32]
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 faf1 	bl	8006b98 <I2C_WaitOnRXNEFlagUntilTimeout>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e07c      	b.n	80066ba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	b2d2      	uxtb	r2, r2
 80065cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	3b01      	subs	r3, #1
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d034      	beq.n	8006666 <HAL_I2C_Master_Receive+0x186>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006600:	2b00      	cmp	r3, #0
 8006602:	d130      	bne.n	8006666 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	2200      	movs	r2, #0
 800660c:	2180      	movs	r1, #128	; 0x80
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 f9e8 	bl	80069e4 <I2C_WaitOnFlagUntilTimeout>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e04d      	b.n	80066ba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006622:	b29b      	uxth	r3, r3
 8006624:	2bff      	cmp	r3, #255	; 0xff
 8006626:	d90e      	bls.n	8006646 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	22ff      	movs	r2, #255	; 0xff
 800662c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006632:	b2da      	uxtb	r2, r3
 8006634:	8979      	ldrh	r1, [r7, #10]
 8006636:	2300      	movs	r3, #0
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 fc0c 	bl	8006e5c <I2C_TransferConfig>
 8006644:	e00f      	b.n	8006666 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664a:	b29a      	uxth	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006654:	b2da      	uxtb	r2, r3
 8006656:	8979      	ldrh	r1, [r7, #10]
 8006658:	2300      	movs	r3, #0
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 fbfb 	bl	8006e5c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d19d      	bne.n	80065ac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	6a39      	ldr	r1, [r7, #32]
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 fa4b 	bl	8006b10 <I2C_WaitOnSTOPFlagUntilTimeout>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e01a      	b.n	80066ba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2220      	movs	r2, #32
 800668a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6859      	ldr	r1, [r3, #4]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	4b0c      	ldr	r3, [pc, #48]	; (80066c8 <HAL_I2C_Master_Receive+0x1e8>)
 8006698:	400b      	ands	r3, r1
 800669a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2220      	movs	r2, #32
 80066a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	e000      	b.n	80066ba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80066b8:	2302      	movs	r3, #2
  }
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	80002400 	.word	0x80002400
 80066c8:	fe00e800 	.word	0xfe00e800

080066cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b088      	sub	sp, #32
 80066d0:	af02      	add	r7, sp, #8
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	4608      	mov	r0, r1
 80066d6:	4611      	mov	r1, r2
 80066d8:	461a      	mov	r2, r3
 80066da:	4603      	mov	r3, r0
 80066dc:	817b      	strh	r3, [r7, #10]
 80066de:	460b      	mov	r3, r1
 80066e0:	813b      	strh	r3, [r7, #8]
 80066e2:	4613      	mov	r3, r2
 80066e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b20      	cmp	r3, #32
 80066f0:	f040 80f9 	bne.w	80068e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <HAL_I2C_Mem_Write+0x34>
 80066fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d105      	bne.n	800670c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006706:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e0ed      	b.n	80068e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006712:	2b01      	cmp	r3, #1
 8006714:	d101      	bne.n	800671a <HAL_I2C_Mem_Write+0x4e>
 8006716:	2302      	movs	r3, #2
 8006718:	e0e6      	b.n	80068e8 <HAL_I2C_Mem_Write+0x21c>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006722:	f7fd f951 	bl	80039c8 <HAL_GetTick>
 8006726:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	2319      	movs	r3, #25
 800672e:	2201      	movs	r2, #1
 8006730:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f955 	bl	80069e4 <I2C_WaitOnFlagUntilTimeout>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e0d1      	b.n	80068e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2221      	movs	r2, #33	; 0x21
 8006748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2240      	movs	r2, #64	; 0x40
 8006750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6a3a      	ldr	r2, [r7, #32]
 800675e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006764:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800676c:	88f8      	ldrh	r0, [r7, #6]
 800676e:	893a      	ldrh	r2, [r7, #8]
 8006770:	8979      	ldrh	r1, [r7, #10]
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	9301      	str	r3, [sp, #4]
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	4603      	mov	r3, r0
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 f8b9 	bl	80068f4 <I2C_RequestMemoryWrite>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d005      	beq.n	8006794 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e0a9      	b.n	80068e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006798:	b29b      	uxth	r3, r3
 800679a:	2bff      	cmp	r3, #255	; 0xff
 800679c:	d90e      	bls.n	80067bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	22ff      	movs	r2, #255	; 0xff
 80067a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	8979      	ldrh	r1, [r7, #10]
 80067ac:	2300      	movs	r3, #0
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f000 fb51 	bl	8006e5c <I2C_TransferConfig>
 80067ba:	e00f      	b.n	80067dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	8979      	ldrh	r1, [r7, #10]
 80067ce:	2300      	movs	r3, #0
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f000 fb40 	bl	8006e5c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 f94e 	bl	8006a82 <I2C_WaitOnTXISFlagUntilTimeout>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e07b      	b.n	80068e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f4:	781a      	ldrb	r2, [r3, #0]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006800:	1c5a      	adds	r2, r3, #1
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800680a:	b29b      	uxth	r3, r3
 800680c:	3b01      	subs	r3, #1
 800680e:	b29a      	uxth	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006818:	3b01      	subs	r3, #1
 800681a:	b29a      	uxth	r2, r3
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006824:	b29b      	uxth	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d034      	beq.n	8006894 <HAL_I2C_Mem_Write+0x1c8>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800682e:	2b00      	cmp	r3, #0
 8006830:	d130      	bne.n	8006894 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006838:	2200      	movs	r2, #0
 800683a:	2180      	movs	r1, #128	; 0x80
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f8d1 	bl	80069e4 <I2C_WaitOnFlagUntilTimeout>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e04d      	b.n	80068e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006850:	b29b      	uxth	r3, r3
 8006852:	2bff      	cmp	r3, #255	; 0xff
 8006854:	d90e      	bls.n	8006874 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	22ff      	movs	r2, #255	; 0xff
 800685a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006860:	b2da      	uxtb	r2, r3
 8006862:	8979      	ldrh	r1, [r7, #10]
 8006864:	2300      	movs	r3, #0
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 faf5 	bl	8006e5c <I2C_TransferConfig>
 8006872:	e00f      	b.n	8006894 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006878:	b29a      	uxth	r2, r3
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006882:	b2da      	uxtb	r2, r3
 8006884:	8979      	ldrh	r1, [r7, #10]
 8006886:	2300      	movs	r3, #0
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 fae4 	bl	8006e5c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006898:	b29b      	uxth	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d19e      	bne.n	80067dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f000 f934 	bl	8006b10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e01a      	b.n	80068e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2220      	movs	r2, #32
 80068b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	6859      	ldr	r1, [r3, #4]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <HAL_I2C_Mem_Write+0x224>)
 80068c6:	400b      	ands	r3, r1
 80068c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	e000      	b.n	80068e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80068e6:	2302      	movs	r3, #2
  }
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	fe00e800 	.word	0xfe00e800

080068f4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af02      	add	r7, sp, #8
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	4608      	mov	r0, r1
 80068fe:	4611      	mov	r1, r2
 8006900:	461a      	mov	r2, r3
 8006902:	4603      	mov	r3, r0
 8006904:	817b      	strh	r3, [r7, #10]
 8006906:	460b      	mov	r3, r1
 8006908:	813b      	strh	r3, [r7, #8]
 800690a:	4613      	mov	r3, r2
 800690c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800690e:	88fb      	ldrh	r3, [r7, #6]
 8006910:	b2da      	uxtb	r2, r3
 8006912:	8979      	ldrh	r1, [r7, #10]
 8006914:	4b20      	ldr	r3, [pc, #128]	; (8006998 <I2C_RequestMemoryWrite+0xa4>)
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 fa9d 	bl	8006e5c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	69b9      	ldr	r1, [r7, #24]
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 f8ab 	bl	8006a82 <I2C_WaitOnTXISFlagUntilTimeout>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e02c      	b.n	8006990 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006936:	88fb      	ldrh	r3, [r7, #6]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d105      	bne.n	8006948 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800693c:	893b      	ldrh	r3, [r7, #8]
 800693e:	b2da      	uxtb	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	629a      	str	r2, [r3, #40]	; 0x28
 8006946:	e015      	b.n	8006974 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006948:	893b      	ldrh	r3, [r7, #8]
 800694a:	0a1b      	lsrs	r3, r3, #8
 800694c:	b29b      	uxth	r3, r3
 800694e:	b2da      	uxtb	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006956:	69fa      	ldr	r2, [r7, #28]
 8006958:	69b9      	ldr	r1, [r7, #24]
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f000 f891 	bl	8006a82 <I2C_WaitOnTXISFlagUntilTimeout>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e012      	b.n	8006990 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800696a:	893b      	ldrh	r3, [r7, #8]
 800696c:	b2da      	uxtb	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	9300      	str	r3, [sp, #0]
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	2200      	movs	r2, #0
 800697c:	2180      	movs	r1, #128	; 0x80
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 f830 	bl	80069e4 <I2C_WaitOnFlagUntilTimeout>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e000      	b.n	8006990 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	80002000 	.word	0x80002000

0800699c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d103      	bne.n	80069ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2200      	movs	r2, #0
 80069b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d007      	beq.n	80069d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	699a      	ldr	r2, [r3, #24]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f042 0201 	orr.w	r2, r2, #1
 80069d6:	619a      	str	r2, [r3, #24]
  }
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	603b      	str	r3, [r7, #0]
 80069f0:	4613      	mov	r3, r2
 80069f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069f4:	e031      	b.n	8006a5a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fc:	d02d      	beq.n	8006a5a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069fe:	f7fc ffe3 	bl	80039c8 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d302      	bcc.n	8006a14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d122      	bne.n	8006a5a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699a      	ldr	r2, [r3, #24]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	bf0c      	ite	eq
 8006a24:	2301      	moveq	r3, #1
 8006a26:	2300      	movne	r3, #0
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	79fb      	ldrb	r3, [r7, #7]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d113      	bne.n	8006a5a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a36:	f043 0220 	orr.w	r2, r3, #32
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2220      	movs	r2, #32
 8006a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e00f      	b.n	8006a7a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	699a      	ldr	r2, [r3, #24]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	4013      	ands	r3, r2
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	bf0c      	ite	eq
 8006a6a:	2301      	moveq	r3, #1
 8006a6c:	2300      	movne	r3, #0
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	461a      	mov	r2, r3
 8006a72:	79fb      	ldrb	r3, [r7, #7]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d0be      	beq.n	80069f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	60f8      	str	r0, [r7, #12]
 8006a8a:	60b9      	str	r1, [r7, #8]
 8006a8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a8e:	e033      	b.n	8006af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	68b9      	ldr	r1, [r7, #8]
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 f901 	bl	8006c9c <I2C_IsErrorOccurred>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e031      	b.n	8006b08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aaa:	d025      	beq.n	8006af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aac:	f7fc ff8c 	bl	80039c8 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	68ba      	ldr	r2, [r7, #8]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d302      	bcc.n	8006ac2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d11a      	bne.n	8006af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d013      	beq.n	8006af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad4:	f043 0220 	orr.w	r2, r3, #32
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e007      	b.n	8006b08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d1c4      	bne.n	8006a90 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b1c:	e02f      	b.n	8006b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	68b9      	ldr	r1, [r7, #8]
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f000 f8ba 	bl	8006c9c <I2C_IsErrorOccurred>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d001      	beq.n	8006b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e02d      	b.n	8006b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b32:	f7fc ff49 	bl	80039c8 <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d302      	bcc.n	8006b48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d11a      	bne.n	8006b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	d013      	beq.n	8006b7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5a:	f043 0220 	orr.w	r2, r3, #32
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e007      	b.n	8006b8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	f003 0320 	and.w	r3, r3, #32
 8006b88:	2b20      	cmp	r3, #32
 8006b8a:	d1c8      	bne.n	8006b1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
	...

08006b98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ba4:	e06b      	b.n	8006c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	68b9      	ldr	r1, [r7, #8]
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 f876 	bl	8006c9c <I2C_IsErrorOccurred>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e069      	b.n	8006c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	f003 0320 	and.w	r3, r3, #32
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	d138      	bne.n	8006c3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	f003 0304 	and.w	r3, r3, #4
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d105      	bne.n	8006be2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	e055      	b.n	8006c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	f003 0310 	and.w	r3, r3, #16
 8006bec:	2b10      	cmp	r3, #16
 8006bee:	d107      	bne.n	8006c00 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2210      	movs	r2, #16
 8006bf6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2204      	movs	r2, #4
 8006bfc:	645a      	str	r2, [r3, #68]	; 0x44
 8006bfe:	e002      	b.n	8006c06 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6859      	ldr	r1, [r3, #4]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	4b1f      	ldr	r3, [pc, #124]	; (8006c98 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8006c1a:	400b      	ands	r3, r1
 8006c1c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2220      	movs	r2, #32
 8006c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e029      	b.n	8006c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c3a:	f7fc fec5 	bl	80039c8 <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d302      	bcc.n	8006c50 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d116      	bne.n	8006c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	f003 0304 	and.w	r3, r3, #4
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	d00f      	beq.n	8006c7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c62:	f043 0220 	orr.w	r2, r3, #32
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2220      	movs	r2, #32
 8006c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e007      	b.n	8006c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b04      	cmp	r3, #4
 8006c8a:	d18c      	bne.n	8006ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	fe00e800 	.word	0xfe00e800

08006c9c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08a      	sub	sp, #40	; 0x28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	f003 0310 	and.w	r3, r3, #16
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d068      	beq.n	8006d9a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2210      	movs	r2, #16
 8006cce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006cd0:	e049      	b.n	8006d66 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd8:	d045      	beq.n	8006d66 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006cda:	f7fc fe75 	bl	80039c8 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d302      	bcc.n	8006cf0 <I2C_IsErrorOccurred+0x54>
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d13a      	bne.n	8006d66 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cfa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d02:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d12:	d121      	bne.n	8006d58 <I2C_IsErrorOccurred+0xbc>
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d1a:	d01d      	beq.n	8006d58 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006d1c:	7cfb      	ldrb	r3, [r7, #19]
 8006d1e:	2b20      	cmp	r3, #32
 8006d20:	d01a      	beq.n	8006d58 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d30:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006d32:	f7fc fe49 	bl	80039c8 <HAL_GetTick>
 8006d36:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d38:	e00e      	b.n	8006d58 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006d3a:	f7fc fe45 	bl	80039c8 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	2b19      	cmp	r3, #25
 8006d46:	d907      	bls.n	8006d58 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	f043 0320 	orr.w	r3, r3, #32
 8006d4e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006d56:	e006      	b.n	8006d66 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b20      	cmp	r3, #32
 8006d64:	d1e9      	bne.n	8006d3a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	f003 0320 	and.w	r3, r3, #32
 8006d70:	2b20      	cmp	r3, #32
 8006d72:	d003      	beq.n	8006d7c <I2C_IsErrorOccurred+0xe0>
 8006d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0aa      	beq.n	8006cd2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d103      	bne.n	8006d8c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	f043 0304 	orr.w	r3, r3, #4
 8006d92:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00b      	beq.n	8006dc4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	f043 0301 	orr.w	r3, r3, #1
 8006db2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dbc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00b      	beq.n	8006de6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006dce:	6a3b      	ldr	r3, [r7, #32]
 8006dd0:	f043 0308 	orr.w	r3, r3, #8
 8006dd4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006dde:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00b      	beq.n	8006e08 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	f043 0302 	orr.w	r3, r3, #2
 8006df6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e00:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d01c      	beq.n	8006e4a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f7ff fdc3 	bl	800699c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6859      	ldr	r1, [r3, #4]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	4b0d      	ldr	r3, [pc, #52]	; (8006e58 <I2C_IsErrorOccurred+0x1bc>)
 8006e22:	400b      	ands	r3, r1
 8006e24:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2220      	movs	r2, #32
 8006e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006e4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3728      	adds	r7, #40	; 0x28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	fe00e800 	.word	0xfe00e800

08006e5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	607b      	str	r3, [r7, #4]
 8006e66:	460b      	mov	r3, r1
 8006e68:	817b      	strh	r3, [r7, #10]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e6e:	897b      	ldrh	r3, [r7, #10]
 8006e70:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e74:	7a7b      	ldrb	r3, [r7, #9]
 8006e76:	041b      	lsls	r3, r3, #16
 8006e78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e7c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e8a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685a      	ldr	r2, [r3, #4]
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	0d5b      	lsrs	r3, r3, #21
 8006e96:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006e9a:	4b08      	ldr	r3, [pc, #32]	; (8006ebc <I2C_TransferConfig+0x60>)
 8006e9c:	430b      	orrs	r3, r1
 8006e9e:	43db      	mvns	r3, r3
 8006ea0:	ea02 0103 	and.w	r1, r2, r3
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006eae:	bf00      	nop
 8006eb0:	371c      	adds	r7, #28
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	03ff63ff 	.word	0x03ff63ff

08006ec0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b20      	cmp	r3, #32
 8006ed4:	d138      	bne.n	8006f48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d101      	bne.n	8006ee4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e032      	b.n	8006f4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2224      	movs	r2, #36	; 0x24
 8006ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0201 	bic.w	r2, r2, #1
 8006f02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6819      	ldr	r1, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f042 0201 	orr.w	r2, r2, #1
 8006f32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	e000      	b.n	8006f4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006f48:	2302      	movs	r3, #2
  }
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	370c      	adds	r7, #12
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006f56:	b480      	push	{r7}
 8006f58:	b085      	sub	sp, #20
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b20      	cmp	r3, #32
 8006f6a:	d139      	bne.n	8006fe0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d101      	bne.n	8006f7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006f76:	2302      	movs	r3, #2
 8006f78:	e033      	b.n	8006fe2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2224      	movs	r2, #36	; 0x24
 8006f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 0201 	bic.w	r2, r2, #1
 8006f98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006fa8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	021b      	lsls	r3, r3, #8
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0201 	orr.w	r2, r2, #1
 8006fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e000      	b.n	8006fe2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006fe0:	2302      	movs	r3, #2
  }
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
	...

08006ff0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ff8:	4b0b      	ldr	r3, [pc, #44]	; (8007028 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	4a0a      	ldr	r2, [pc, #40]	; (8007028 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006ffe:	f043 0301 	orr.w	r3, r3, #1
 8007002:	6193      	str	r3, [r2, #24]
 8007004:	4b08      	ldr	r3, [pc, #32]	; (8007028 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8007010:	4b06      	ldr	r3, [pc, #24]	; (800702c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	4905      	ldr	r1, [pc, #20]	; (800702c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4313      	orrs	r3, r2
 800701a:	600b      	str	r3, [r1, #0]
}
 800701c:	bf00      	nop
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	40021000 	.word	0x40021000
 800702c:	40010000 	.word	0x40010000

08007030 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8007036:	af00      	add	r7, sp, #0
 8007038:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800703c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007040:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007042:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007046:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d102      	bne.n	8007056 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	f001 b823 	b.w	800809c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800705a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	f000 817d 	beq.w	8007366 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800706c:	4bbc      	ldr	r3, [pc, #752]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f003 030c 	and.w	r3, r3, #12
 8007074:	2b04      	cmp	r3, #4
 8007076:	d00c      	beq.n	8007092 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007078:	4bb9      	ldr	r3, [pc, #740]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f003 030c 	and.w	r3, r3, #12
 8007080:	2b08      	cmp	r3, #8
 8007082:	d15c      	bne.n	800713e <HAL_RCC_OscConfig+0x10e>
 8007084:	4bb6      	ldr	r3, [pc, #728]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800708c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007090:	d155      	bne.n	800713e <HAL_RCC_OscConfig+0x10e>
 8007092:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007096:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800709a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800709e:	fa93 f3a3 	rbit	r3, r3
 80070a2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80070a6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070aa:	fab3 f383 	clz	r3, r3
 80070ae:	b2db      	uxtb	r3, r3
 80070b0:	095b      	lsrs	r3, r3, #5
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	f043 0301 	orr.w	r3, r3, #1
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d102      	bne.n	80070c4 <HAL_RCC_OscConfig+0x94>
 80070be:	4ba8      	ldr	r3, [pc, #672]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	e015      	b.n	80070f0 <HAL_RCC_OscConfig+0xc0>
 80070c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070c8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070cc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80070d0:	fa93 f3a3 	rbit	r3, r3
 80070d4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80070d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070dc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80070e0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80070e4:	fa93 f3a3 	rbit	r3, r3
 80070e8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80070ec:	4b9c      	ldr	r3, [pc, #624]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 80070ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80070f4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80070f8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80070fc:	fa92 f2a2 	rbit	r2, r2
 8007100:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8007104:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8007108:	fab2 f282 	clz	r2, r2
 800710c:	b2d2      	uxtb	r2, r2
 800710e:	f042 0220 	orr.w	r2, r2, #32
 8007112:	b2d2      	uxtb	r2, r2
 8007114:	f002 021f 	and.w	r2, r2, #31
 8007118:	2101      	movs	r1, #1
 800711a:	fa01 f202 	lsl.w	r2, r1, r2
 800711e:	4013      	ands	r3, r2
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 811f 	beq.w	8007364 <HAL_RCC_OscConfig+0x334>
 8007126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800712a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	f040 8116 	bne.w	8007364 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	f000 bfaf 	b.w	800809c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800713e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007142:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800714e:	d106      	bne.n	800715e <HAL_RCC_OscConfig+0x12e>
 8007150:	4b83      	ldr	r3, [pc, #524]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a82      	ldr	r2, [pc, #520]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 8007156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	e036      	b.n	80071cc <HAL_RCC_OscConfig+0x19c>
 800715e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007162:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10c      	bne.n	8007188 <HAL_RCC_OscConfig+0x158>
 800716e:	4b7c      	ldr	r3, [pc, #496]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a7b      	ldr	r2, [pc, #492]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 8007174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007178:	6013      	str	r3, [r2, #0]
 800717a:	4b79      	ldr	r3, [pc, #484]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a78      	ldr	r2, [pc, #480]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 8007180:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007184:	6013      	str	r3, [r2, #0]
 8007186:	e021      	b.n	80071cc <HAL_RCC_OscConfig+0x19c>
 8007188:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800718c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007198:	d10c      	bne.n	80071b4 <HAL_RCC_OscConfig+0x184>
 800719a:	4b71      	ldr	r3, [pc, #452]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a70      	ldr	r2, [pc, #448]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 80071a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	4b6e      	ldr	r3, [pc, #440]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a6d      	ldr	r2, [pc, #436]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 80071ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	e00b      	b.n	80071cc <HAL_RCC_OscConfig+0x19c>
 80071b4:	4b6a      	ldr	r3, [pc, #424]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a69      	ldr	r2, [pc, #420]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 80071ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071be:	6013      	str	r3, [r2, #0]
 80071c0:	4b67      	ldr	r3, [pc, #412]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a66      	ldr	r2, [pc, #408]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 80071c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071ca:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80071cc:	4b64      	ldr	r3, [pc, #400]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 80071ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d0:	f023 020f 	bic.w	r2, r3, #15
 80071d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	495f      	ldr	r1, [pc, #380]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80071e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80071ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d059      	beq.n	80072aa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071f6:	f7fc fbe7 	bl	80039c8 <HAL_GetTick>
 80071fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071fe:	e00a      	b.n	8007216 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007200:	f7fc fbe2 	bl	80039c8 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b64      	cmp	r3, #100	; 0x64
 800720e:	d902      	bls.n	8007216 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	f000 bf43 	b.w	800809c <HAL_RCC_OscConfig+0x106c>
 8007216:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800721a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800721e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8007222:	fa93 f3a3 	rbit	r3, r3
 8007226:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800722a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800722e:	fab3 f383 	clz	r3, r3
 8007232:	b2db      	uxtb	r3, r3
 8007234:	095b      	lsrs	r3, r3, #5
 8007236:	b2db      	uxtb	r3, r3
 8007238:	f043 0301 	orr.w	r3, r3, #1
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b01      	cmp	r3, #1
 8007240:	d102      	bne.n	8007248 <HAL_RCC_OscConfig+0x218>
 8007242:	4b47      	ldr	r3, [pc, #284]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	e015      	b.n	8007274 <HAL_RCC_OscConfig+0x244>
 8007248:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800724c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007250:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007254:	fa93 f3a3 	rbit	r3, r3
 8007258:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800725c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007260:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8007264:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007268:	fa93 f3a3 	rbit	r3, r3
 800726c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007270:	4b3b      	ldr	r3, [pc, #236]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 8007272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007274:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007278:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800727c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007280:	fa92 f2a2 	rbit	r2, r2
 8007284:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007288:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800728c:	fab2 f282 	clz	r2, r2
 8007290:	b2d2      	uxtb	r2, r2
 8007292:	f042 0220 	orr.w	r2, r2, #32
 8007296:	b2d2      	uxtb	r2, r2
 8007298:	f002 021f 	and.w	r2, r2, #31
 800729c:	2101      	movs	r1, #1
 800729e:	fa01 f202 	lsl.w	r2, r1, r2
 80072a2:	4013      	ands	r3, r2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d0ab      	beq.n	8007200 <HAL_RCC_OscConfig+0x1d0>
 80072a8:	e05d      	b.n	8007366 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072aa:	f7fc fb8d 	bl	80039c8 <HAL_GetTick>
 80072ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072b2:	e00a      	b.n	80072ca <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80072b4:	f7fc fb88 	bl	80039c8 <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	2b64      	cmp	r3, #100	; 0x64
 80072c2:	d902      	bls.n	80072ca <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	f000 bee9 	b.w	800809c <HAL_RCC_OscConfig+0x106c>
 80072ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80072ce:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80072d6:	fa93 f3a3 	rbit	r3, r3
 80072da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80072de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072e2:	fab3 f383 	clz	r3, r3
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	095b      	lsrs	r3, r3, #5
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	f043 0301 	orr.w	r3, r3, #1
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d102      	bne.n	80072fc <HAL_RCC_OscConfig+0x2cc>
 80072f6:	4b1a      	ldr	r3, [pc, #104]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	e015      	b.n	8007328 <HAL_RCC_OscConfig+0x2f8>
 80072fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007300:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007304:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007308:	fa93 f3a3 	rbit	r3, r3
 800730c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007310:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007314:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007318:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800731c:	fa93 f3a3 	rbit	r3, r3
 8007320:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007324:	4b0e      	ldr	r3, [pc, #56]	; (8007360 <HAL_RCC_OscConfig+0x330>)
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800732c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007330:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007334:	fa92 f2a2 	rbit	r2, r2
 8007338:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800733c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007340:	fab2 f282 	clz	r2, r2
 8007344:	b2d2      	uxtb	r2, r2
 8007346:	f042 0220 	orr.w	r2, r2, #32
 800734a:	b2d2      	uxtb	r2, r2
 800734c:	f002 021f 	and.w	r2, r2, #31
 8007350:	2101      	movs	r1, #1
 8007352:	fa01 f202 	lsl.w	r2, r1, r2
 8007356:	4013      	ands	r3, r2
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1ab      	bne.n	80072b4 <HAL_RCC_OscConfig+0x284>
 800735c:	e003      	b.n	8007366 <HAL_RCC_OscConfig+0x336>
 800735e:	bf00      	nop
 8007360:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007366:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800736a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	2b00      	cmp	r3, #0
 8007378:	f000 817d 	beq.w	8007676 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800737c:	4ba6      	ldr	r3, [pc, #664]	; (8007618 <HAL_RCC_OscConfig+0x5e8>)
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f003 030c 	and.w	r3, r3, #12
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00b      	beq.n	80073a0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007388:	4ba3      	ldr	r3, [pc, #652]	; (8007618 <HAL_RCC_OscConfig+0x5e8>)
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	f003 030c 	and.w	r3, r3, #12
 8007390:	2b08      	cmp	r3, #8
 8007392:	d172      	bne.n	800747a <HAL_RCC_OscConfig+0x44a>
 8007394:	4ba0      	ldr	r3, [pc, #640]	; (8007618 <HAL_RCC_OscConfig+0x5e8>)
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d16c      	bne.n	800747a <HAL_RCC_OscConfig+0x44a>
 80073a0:	2302      	movs	r3, #2
 80073a2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073a6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80073aa:	fa93 f3a3 	rbit	r3, r3
 80073ae:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80073b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073b6:	fab3 f383 	clz	r3, r3
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	095b      	lsrs	r3, r3, #5
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	f043 0301 	orr.w	r3, r3, #1
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d102      	bne.n	80073d0 <HAL_RCC_OscConfig+0x3a0>
 80073ca:	4b93      	ldr	r3, [pc, #588]	; (8007618 <HAL_RCC_OscConfig+0x5e8>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	e013      	b.n	80073f8 <HAL_RCC_OscConfig+0x3c8>
 80073d0:	2302      	movs	r3, #2
 80073d2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073d6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80073da:	fa93 f3a3 	rbit	r3, r3
 80073de:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80073e2:	2302      	movs	r3, #2
 80073e4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80073e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80073ec:	fa93 f3a3 	rbit	r3, r3
 80073f0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80073f4:	4b88      	ldr	r3, [pc, #544]	; (8007618 <HAL_RCC_OscConfig+0x5e8>)
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	2202      	movs	r2, #2
 80073fa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80073fe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007402:	fa92 f2a2 	rbit	r2, r2
 8007406:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800740a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800740e:	fab2 f282 	clz	r2, r2
 8007412:	b2d2      	uxtb	r2, r2
 8007414:	f042 0220 	orr.w	r2, r2, #32
 8007418:	b2d2      	uxtb	r2, r2
 800741a:	f002 021f 	and.w	r2, r2, #31
 800741e:	2101      	movs	r1, #1
 8007420:	fa01 f202 	lsl.w	r2, r1, r2
 8007424:	4013      	ands	r3, r2
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <HAL_RCC_OscConfig+0x410>
 800742a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800742e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d002      	beq.n	8007440 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	f000 be2e 	b.w	800809c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007440:	4b75      	ldr	r3, [pc, #468]	; (8007618 <HAL_RCC_OscConfig+0x5e8>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007448:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800744c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	21f8      	movs	r1, #248	; 0xf8
 8007456:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800745a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800745e:	fa91 f1a1 	rbit	r1, r1
 8007462:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8007466:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800746a:	fab1 f181 	clz	r1, r1
 800746e:	b2c9      	uxtb	r1, r1
 8007470:	408b      	lsls	r3, r1
 8007472:	4969      	ldr	r1, [pc, #420]	; (8007618 <HAL_RCC_OscConfig+0x5e8>)
 8007474:	4313      	orrs	r3, r2
 8007476:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007478:	e0fd      	b.n	8007676 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800747a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800747e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	2b00      	cmp	r3, #0
 8007488:	f000 8088 	beq.w	800759c <HAL_RCC_OscConfig+0x56c>
 800748c:	2301      	movs	r3, #1
 800748e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007492:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007496:	fa93 f3a3 	rbit	r3, r3
 800749a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800749e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074a2:	fab3 f383 	clz	r3, r3
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80074ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	461a      	mov	r2, r3
 80074b4:	2301      	movs	r3, #1
 80074b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074b8:	f7fc fa86 	bl	80039c8 <HAL_GetTick>
 80074bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074c0:	e00a      	b.n	80074d8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074c2:	f7fc fa81 	bl	80039c8 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d902      	bls.n	80074d8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	f000 bde2 	b.w	800809c <HAL_RCC_OscConfig+0x106c>
 80074d8:	2302      	movs	r3, #2
 80074da:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074de:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80074e2:	fa93 f3a3 	rbit	r3, r3
 80074e6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80074ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074ee:	fab3 f383 	clz	r3, r3
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	095b      	lsrs	r3, r3, #5
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	f043 0301 	orr.w	r3, r3, #1
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d102      	bne.n	8007508 <HAL_RCC_OscConfig+0x4d8>
 8007502:	4b45      	ldr	r3, [pc, #276]	; (8007618 <HAL_RCC_OscConfig+0x5e8>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	e013      	b.n	8007530 <HAL_RCC_OscConfig+0x500>
 8007508:	2302      	movs	r3, #2
 800750a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800750e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007512:	fa93 f3a3 	rbit	r3, r3
 8007516:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800751a:	2302      	movs	r3, #2
 800751c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007520:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007524:	fa93 f3a3 	rbit	r3, r3
 8007528:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800752c:	4b3a      	ldr	r3, [pc, #232]	; (8007618 <HAL_RCC_OscConfig+0x5e8>)
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	2202      	movs	r2, #2
 8007532:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8007536:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800753a:	fa92 f2a2 	rbit	r2, r2
 800753e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007542:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8007546:	fab2 f282 	clz	r2, r2
 800754a:	b2d2      	uxtb	r2, r2
 800754c:	f042 0220 	orr.w	r2, r2, #32
 8007550:	b2d2      	uxtb	r2, r2
 8007552:	f002 021f 	and.w	r2, r2, #31
 8007556:	2101      	movs	r1, #1
 8007558:	fa01 f202 	lsl.w	r2, r1, r2
 800755c:	4013      	ands	r3, r2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0af      	beq.n	80074c2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007562:	4b2d      	ldr	r3, [pc, #180]	; (8007618 <HAL_RCC_OscConfig+0x5e8>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800756a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800756e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	21f8      	movs	r1, #248	; 0xf8
 8007578:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800757c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007580:	fa91 f1a1 	rbit	r1, r1
 8007584:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007588:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800758c:	fab1 f181 	clz	r1, r1
 8007590:	b2c9      	uxtb	r1, r1
 8007592:	408b      	lsls	r3, r1
 8007594:	4920      	ldr	r1, [pc, #128]	; (8007618 <HAL_RCC_OscConfig+0x5e8>)
 8007596:	4313      	orrs	r3, r2
 8007598:	600b      	str	r3, [r1, #0]
 800759a:	e06c      	b.n	8007676 <HAL_RCC_OscConfig+0x646>
 800759c:	2301      	movs	r3, #1
 800759e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80075a6:	fa93 f3a3 	rbit	r3, r3
 80075aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80075ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075b2:	fab3 f383 	clz	r3, r3
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80075bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	461a      	mov	r2, r3
 80075c4:	2300      	movs	r3, #0
 80075c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075c8:	f7fc f9fe 	bl	80039c8 <HAL_GetTick>
 80075cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075d0:	e00a      	b.n	80075e8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075d2:	f7fc f9f9 	bl	80039c8 <HAL_GetTick>
 80075d6:	4602      	mov	r2, r0
 80075d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d902      	bls.n	80075e8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	f000 bd5a 	b.w	800809c <HAL_RCC_OscConfig+0x106c>
 80075e8:	2302      	movs	r3, #2
 80075ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80075f2:	fa93 f3a3 	rbit	r3, r3
 80075f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80075fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075fe:	fab3 f383 	clz	r3, r3
 8007602:	b2db      	uxtb	r3, r3
 8007604:	095b      	lsrs	r3, r3, #5
 8007606:	b2db      	uxtb	r3, r3
 8007608:	f043 0301 	orr.w	r3, r3, #1
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b01      	cmp	r3, #1
 8007610:	d104      	bne.n	800761c <HAL_RCC_OscConfig+0x5ec>
 8007612:	4b01      	ldr	r3, [pc, #4]	; (8007618 <HAL_RCC_OscConfig+0x5e8>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	e015      	b.n	8007644 <HAL_RCC_OscConfig+0x614>
 8007618:	40021000 	.word	0x40021000
 800761c:	2302      	movs	r3, #2
 800761e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007622:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007626:	fa93 f3a3 	rbit	r3, r3
 800762a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800762e:	2302      	movs	r3, #2
 8007630:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007634:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007638:	fa93 f3a3 	rbit	r3, r3
 800763c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007640:	4bc8      	ldr	r3, [pc, #800]	; (8007964 <HAL_RCC_OscConfig+0x934>)
 8007642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007644:	2202      	movs	r2, #2
 8007646:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800764a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800764e:	fa92 f2a2 	rbit	r2, r2
 8007652:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8007656:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800765a:	fab2 f282 	clz	r2, r2
 800765e:	b2d2      	uxtb	r2, r2
 8007660:	f042 0220 	orr.w	r2, r2, #32
 8007664:	b2d2      	uxtb	r2, r2
 8007666:	f002 021f 	and.w	r2, r2, #31
 800766a:	2101      	movs	r1, #1
 800766c:	fa01 f202 	lsl.w	r2, r1, r2
 8007670:	4013      	ands	r3, r2
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1ad      	bne.n	80075d2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800767a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0308 	and.w	r3, r3, #8
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 8110 	beq.w	80078ac <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800768c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007690:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d079      	beq.n	8007790 <HAL_RCC_OscConfig+0x760>
 800769c:	2301      	movs	r3, #1
 800769e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80076a6:	fa93 f3a3 	rbit	r3, r3
 80076aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80076ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076b2:	fab3 f383 	clz	r3, r3
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	461a      	mov	r2, r3
 80076ba:	4bab      	ldr	r3, [pc, #684]	; (8007968 <HAL_RCC_OscConfig+0x938>)
 80076bc:	4413      	add	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	461a      	mov	r2, r3
 80076c2:	2301      	movs	r3, #1
 80076c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80076c6:	f7fc f97f 	bl	80039c8 <HAL_GetTick>
 80076ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076ce:	e00a      	b.n	80076e6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076d0:	f7fc f97a 	bl	80039c8 <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d902      	bls.n	80076e6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	f000 bcdb 	b.w	800809c <HAL_RCC_OscConfig+0x106c>
 80076e6:	2302      	movs	r3, #2
 80076e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80076f0:	fa93 f3a3 	rbit	r3, r3
 80076f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80076f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80076fc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007700:	2202      	movs	r2, #2
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007708:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	fa93 f2a3 	rbit	r2, r3
 8007712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007716:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007724:	2202      	movs	r2, #2
 8007726:	601a      	str	r2, [r3, #0]
 8007728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800772c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	fa93 f2a3 	rbit	r2, r3
 8007736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800773a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800773e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007740:	4b88      	ldr	r3, [pc, #544]	; (8007964 <HAL_RCC_OscConfig+0x934>)
 8007742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007744:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007748:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800774c:	2102      	movs	r1, #2
 800774e:	6019      	str	r1, [r3, #0]
 8007750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007754:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	fa93 f1a3 	rbit	r1, r3
 800775e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007762:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007766:	6019      	str	r1, [r3, #0]
  return result;
 8007768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800776c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	fab3 f383 	clz	r3, r3
 8007776:	b2db      	uxtb	r3, r3
 8007778:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800777c:	b2db      	uxtb	r3, r3
 800777e:	f003 031f 	and.w	r3, r3, #31
 8007782:	2101      	movs	r1, #1
 8007784:	fa01 f303 	lsl.w	r3, r1, r3
 8007788:	4013      	ands	r3, r2
 800778a:	2b00      	cmp	r3, #0
 800778c:	d0a0      	beq.n	80076d0 <HAL_RCC_OscConfig+0x6a0>
 800778e:	e08d      	b.n	80078ac <HAL_RCC_OscConfig+0x87c>
 8007790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007794:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007798:	2201      	movs	r2, #1
 800779a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800779c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	fa93 f2a3 	rbit	r2, r3
 80077aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80077b2:	601a      	str	r2, [r3, #0]
  return result;
 80077b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80077bc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077be:	fab3 f383 	clz	r3, r3
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	461a      	mov	r2, r3
 80077c6:	4b68      	ldr	r3, [pc, #416]	; (8007968 <HAL_RCC_OscConfig+0x938>)
 80077c8:	4413      	add	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	461a      	mov	r2, r3
 80077ce:	2300      	movs	r3, #0
 80077d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077d2:	f7fc f8f9 	bl	80039c8 <HAL_GetTick>
 80077d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077da:	e00a      	b.n	80077f2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077dc:	f7fc f8f4 	bl	80039c8 <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d902      	bls.n	80077f2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	f000 bc55 	b.w	800809c <HAL_RCC_OscConfig+0x106c>
 80077f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80077f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80077fa:	2202      	movs	r2, #2
 80077fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007802:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	fa93 f2a3 	rbit	r2, r3
 800780c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007810:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800781a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800781e:	2202      	movs	r2, #2
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007826:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	fa93 f2a3 	rbit	r2, r3
 8007830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007834:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800783e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007842:	2202      	movs	r2, #2
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800784a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	fa93 f2a3 	rbit	r2, r3
 8007854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007858:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800785c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800785e:	4b41      	ldr	r3, [pc, #260]	; (8007964 <HAL_RCC_OscConfig+0x934>)
 8007860:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007866:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800786a:	2102      	movs	r1, #2
 800786c:	6019      	str	r1, [r3, #0]
 800786e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007872:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	fa93 f1a3 	rbit	r1, r3
 800787c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007880:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007884:	6019      	str	r1, [r3, #0]
  return result;
 8007886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800788a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	fab3 f383 	clz	r3, r3
 8007894:	b2db      	uxtb	r3, r3
 8007896:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800789a:	b2db      	uxtb	r3, r3
 800789c:	f003 031f 	and.w	r3, r3, #31
 80078a0:	2101      	movs	r1, #1
 80078a2:	fa01 f303 	lsl.w	r3, r1, r3
 80078a6:	4013      	ands	r3, r2
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d197      	bne.n	80077dc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0304 	and.w	r3, r3, #4
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 81a1 	beq.w	8007c04 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078c2:	2300      	movs	r3, #0
 80078c4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078c8:	4b26      	ldr	r3, [pc, #152]	; (8007964 <HAL_RCC_OscConfig+0x934>)
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d116      	bne.n	8007902 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078d4:	4b23      	ldr	r3, [pc, #140]	; (8007964 <HAL_RCC_OscConfig+0x934>)
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	4a22      	ldr	r2, [pc, #136]	; (8007964 <HAL_RCC_OscConfig+0x934>)
 80078da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078de:	61d3      	str	r3, [r2, #28]
 80078e0:	4b20      	ldr	r3, [pc, #128]	; (8007964 <HAL_RCC_OscConfig+0x934>)
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80078e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078ec:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80078f0:	601a      	str	r2, [r3, #0]
 80078f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078f6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80078fa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80078fc:	2301      	movs	r3, #1
 80078fe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007902:	4b1a      	ldr	r3, [pc, #104]	; (800796c <HAL_RCC_OscConfig+0x93c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800790a:	2b00      	cmp	r3, #0
 800790c:	d11a      	bne.n	8007944 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800790e:	4b17      	ldr	r3, [pc, #92]	; (800796c <HAL_RCC_OscConfig+0x93c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a16      	ldr	r2, [pc, #88]	; (800796c <HAL_RCC_OscConfig+0x93c>)
 8007914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007918:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800791a:	f7fc f855 	bl	80039c8 <HAL_GetTick>
 800791e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007922:	e009      	b.n	8007938 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007924:	f7fc f850 	bl	80039c8 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	2b64      	cmp	r3, #100	; 0x64
 8007932:	d901      	bls.n	8007938 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8007934:	2303      	movs	r3, #3
 8007936:	e3b1      	b.n	800809c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007938:	4b0c      	ldr	r3, [pc, #48]	; (800796c <HAL_RCC_OscConfig+0x93c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007940:	2b00      	cmp	r3, #0
 8007942:	d0ef      	beq.n	8007924 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007944:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007948:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d10d      	bne.n	8007970 <HAL_RCC_OscConfig+0x940>
 8007954:	4b03      	ldr	r3, [pc, #12]	; (8007964 <HAL_RCC_OscConfig+0x934>)
 8007956:	6a1b      	ldr	r3, [r3, #32]
 8007958:	4a02      	ldr	r2, [pc, #8]	; (8007964 <HAL_RCC_OscConfig+0x934>)
 800795a:	f043 0301 	orr.w	r3, r3, #1
 800795e:	6213      	str	r3, [r2, #32]
 8007960:	e03c      	b.n	80079dc <HAL_RCC_OscConfig+0x9ac>
 8007962:	bf00      	nop
 8007964:	40021000 	.word	0x40021000
 8007968:	10908120 	.word	0x10908120
 800796c:	40007000 	.word	0x40007000
 8007970:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007974:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10c      	bne.n	800799a <HAL_RCC_OscConfig+0x96a>
 8007980:	4bc1      	ldr	r3, [pc, #772]	; (8007c88 <HAL_RCC_OscConfig+0xc58>)
 8007982:	6a1b      	ldr	r3, [r3, #32]
 8007984:	4ac0      	ldr	r2, [pc, #768]	; (8007c88 <HAL_RCC_OscConfig+0xc58>)
 8007986:	f023 0301 	bic.w	r3, r3, #1
 800798a:	6213      	str	r3, [r2, #32]
 800798c:	4bbe      	ldr	r3, [pc, #760]	; (8007c88 <HAL_RCC_OscConfig+0xc58>)
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	4abd      	ldr	r2, [pc, #756]	; (8007c88 <HAL_RCC_OscConfig+0xc58>)
 8007992:	f023 0304 	bic.w	r3, r3, #4
 8007996:	6213      	str	r3, [r2, #32]
 8007998:	e020      	b.n	80079dc <HAL_RCC_OscConfig+0x9ac>
 800799a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800799e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	2b05      	cmp	r3, #5
 80079a8:	d10c      	bne.n	80079c4 <HAL_RCC_OscConfig+0x994>
 80079aa:	4bb7      	ldr	r3, [pc, #732]	; (8007c88 <HAL_RCC_OscConfig+0xc58>)
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	4ab6      	ldr	r2, [pc, #728]	; (8007c88 <HAL_RCC_OscConfig+0xc58>)
 80079b0:	f043 0304 	orr.w	r3, r3, #4
 80079b4:	6213      	str	r3, [r2, #32]
 80079b6:	4bb4      	ldr	r3, [pc, #720]	; (8007c88 <HAL_RCC_OscConfig+0xc58>)
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	4ab3      	ldr	r2, [pc, #716]	; (8007c88 <HAL_RCC_OscConfig+0xc58>)
 80079bc:	f043 0301 	orr.w	r3, r3, #1
 80079c0:	6213      	str	r3, [r2, #32]
 80079c2:	e00b      	b.n	80079dc <HAL_RCC_OscConfig+0x9ac>
 80079c4:	4bb0      	ldr	r3, [pc, #704]	; (8007c88 <HAL_RCC_OscConfig+0xc58>)
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	4aaf      	ldr	r2, [pc, #700]	; (8007c88 <HAL_RCC_OscConfig+0xc58>)
 80079ca:	f023 0301 	bic.w	r3, r3, #1
 80079ce:	6213      	str	r3, [r2, #32]
 80079d0:	4bad      	ldr	r3, [pc, #692]	; (8007c88 <HAL_RCC_OscConfig+0xc58>)
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	4aac      	ldr	r2, [pc, #688]	; (8007c88 <HAL_RCC_OscConfig+0xc58>)
 80079d6:	f023 0304 	bic.w	r3, r3, #4
 80079da:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80079dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80079e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 8081 	beq.w	8007af0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079ee:	f7fb ffeb 	bl	80039c8 <HAL_GetTick>
 80079f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079f6:	e00b      	b.n	8007a10 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079f8:	f7fb ffe6 	bl	80039c8 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d901      	bls.n	8007a10 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e345      	b.n	800809c <HAL_RCC_OscConfig+0x106c>
 8007a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a14:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007a18:	2202      	movs	r2, #2
 8007a1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a20:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	fa93 f2a3 	rbit	r2, r3
 8007a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a2e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a38:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007a3c:	2202      	movs	r2, #2
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a44:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	fa93 f2a3 	rbit	r2, r3
 8007a4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a52:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007a56:	601a      	str	r2, [r3, #0]
  return result;
 8007a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a5c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8007a60:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a62:	fab3 f383 	clz	r3, r3
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	095b      	lsrs	r3, r3, #5
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	f043 0302 	orr.w	r3, r3, #2
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d102      	bne.n	8007a7c <HAL_RCC_OscConfig+0xa4c>
 8007a76:	4b84      	ldr	r3, [pc, #528]	; (8007c88 <HAL_RCC_OscConfig+0xc58>)
 8007a78:	6a1b      	ldr	r3, [r3, #32]
 8007a7a:	e013      	b.n	8007aa4 <HAL_RCC_OscConfig+0xa74>
 8007a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a80:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007a84:	2202      	movs	r2, #2
 8007a86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a8c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	fa93 f2a3 	rbit	r2, r3
 8007a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a9a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	4b79      	ldr	r3, [pc, #484]	; (8007c88 <HAL_RCC_OscConfig+0xc58>)
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007aa8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007aac:	2102      	movs	r1, #2
 8007aae:	6011      	str	r1, [r2, #0]
 8007ab0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ab4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8007ab8:	6812      	ldr	r2, [r2, #0]
 8007aba:	fa92 f1a2 	rbit	r1, r2
 8007abe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ac2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007ac6:	6011      	str	r1, [r2, #0]
  return result;
 8007ac8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007acc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8007ad0:	6812      	ldr	r2, [r2, #0]
 8007ad2:	fab2 f282 	clz	r2, r2
 8007ad6:	b2d2      	uxtb	r2, r2
 8007ad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007adc:	b2d2      	uxtb	r2, r2
 8007ade:	f002 021f 	and.w	r2, r2, #31
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8007ae8:	4013      	ands	r3, r2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d084      	beq.n	80079f8 <HAL_RCC_OscConfig+0x9c8>
 8007aee:	e07f      	b.n	8007bf0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007af0:	f7fb ff6a 	bl	80039c8 <HAL_GetTick>
 8007af4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007af8:	e00b      	b.n	8007b12 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007afa:	f7fb ff65 	bl	80039c8 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e2c4      	b.n	800809c <HAL_RCC_OscConfig+0x106c>
 8007b12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b16:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b22:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	fa93 f2a3 	rbit	r2, r3
 8007b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b30:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b3a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007b3e:	2202      	movs	r2, #2
 8007b40:	601a      	str	r2, [r3, #0]
 8007b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b46:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	fa93 f2a3 	rbit	r2, r3
 8007b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b54:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007b58:	601a      	str	r2, [r3, #0]
  return result;
 8007b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b5e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8007b62:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b64:	fab3 f383 	clz	r3, r3
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	095b      	lsrs	r3, r3, #5
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	f043 0302 	orr.w	r3, r3, #2
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d102      	bne.n	8007b7e <HAL_RCC_OscConfig+0xb4e>
 8007b78:	4b43      	ldr	r3, [pc, #268]	; (8007c88 <HAL_RCC_OscConfig+0xc58>)
 8007b7a:	6a1b      	ldr	r3, [r3, #32]
 8007b7c:	e013      	b.n	8007ba6 <HAL_RCC_OscConfig+0xb76>
 8007b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b82:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007b86:	2202      	movs	r2, #2
 8007b88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b8e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	fa93 f2a3 	rbit	r2, r3
 8007b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b9c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	4b39      	ldr	r3, [pc, #228]	; (8007c88 <HAL_RCC_OscConfig+0xc58>)
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007baa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007bae:	2102      	movs	r1, #2
 8007bb0:	6011      	str	r1, [r2, #0]
 8007bb2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007bb6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8007bba:	6812      	ldr	r2, [r2, #0]
 8007bbc:	fa92 f1a2 	rbit	r1, r2
 8007bc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007bc4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007bc8:	6011      	str	r1, [r2, #0]
  return result;
 8007bca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007bce:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8007bd2:	6812      	ldr	r2, [r2, #0]
 8007bd4:	fab2 f282 	clz	r2, r2
 8007bd8:	b2d2      	uxtb	r2, r2
 8007bda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bde:	b2d2      	uxtb	r2, r2
 8007be0:	f002 021f 	and.w	r2, r2, #31
 8007be4:	2101      	movs	r1, #1
 8007be6:	fa01 f202 	lsl.w	r2, r1, r2
 8007bea:	4013      	ands	r3, r2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d184      	bne.n	8007afa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007bf0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d105      	bne.n	8007c04 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bf8:	4b23      	ldr	r3, [pc, #140]	; (8007c88 <HAL_RCC_OscConfig+0xc58>)
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	4a22      	ldr	r2, [pc, #136]	; (8007c88 <HAL_RCC_OscConfig+0xc58>)
 8007bfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c02:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	69db      	ldr	r3, [r3, #28]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 8242 	beq.w	800809a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c16:	4b1c      	ldr	r3, [pc, #112]	; (8007c88 <HAL_RCC_OscConfig+0xc58>)
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f003 030c 	and.w	r3, r3, #12
 8007c1e:	2b08      	cmp	r3, #8
 8007c20:	f000 8213 	beq.w	800804a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c28:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	69db      	ldr	r3, [r3, #28]
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	f040 8162 	bne.w	8007efa <HAL_RCC_OscConfig+0xeca>
 8007c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c3a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007c3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c48:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	fa93 f2a3 	rbit	r2, r3
 8007c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c56:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007c5a:	601a      	str	r2, [r3, #0]
  return result;
 8007c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c60:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8007c64:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c66:	fab3 f383 	clz	r3, r3
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007c70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	461a      	mov	r2, r3
 8007c78:	2300      	movs	r3, #0
 8007c7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c7c:	f7fb fea4 	bl	80039c8 <HAL_GetTick>
 8007c80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007c84:	e00c      	b.n	8007ca0 <HAL_RCC_OscConfig+0xc70>
 8007c86:	bf00      	nop
 8007c88:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c8c:	f7fb fe9c 	bl	80039c8 <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d901      	bls.n	8007ca0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e1fd      	b.n	800809c <HAL_RCC_OscConfig+0x106c>
 8007ca0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ca4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007ca8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007cac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cb2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	fa93 f2a3 	rbit	r2, r3
 8007cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cc0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007cc4:	601a      	str	r2, [r3, #0]
  return result;
 8007cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8007cce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007cd0:	fab3 f383 	clz	r3, r3
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	095b      	lsrs	r3, r3, #5
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	f043 0301 	orr.w	r3, r3, #1
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d102      	bne.n	8007cea <HAL_RCC_OscConfig+0xcba>
 8007ce4:	4bb0      	ldr	r3, [pc, #704]	; (8007fa8 <HAL_RCC_OscConfig+0xf78>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	e027      	b.n	8007d3a <HAL_RCC_OscConfig+0xd0a>
 8007cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007cf2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007cf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007cfc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	fa93 f2a3 	rbit	r2, r3
 8007d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d0a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d14:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007d18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d22:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	fa93 f2a3 	rbit	r2, r3
 8007d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d30:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	4b9c      	ldr	r3, [pc, #624]	; (8007fa8 <HAL_RCC_OscConfig+0xf78>)
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d3e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007d42:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007d46:	6011      	str	r1, [r2, #0]
 8007d48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d4c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8007d50:	6812      	ldr	r2, [r2, #0]
 8007d52:	fa92 f1a2 	rbit	r1, r2
 8007d56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d5a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007d5e:	6011      	str	r1, [r2, #0]
  return result;
 8007d60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007d64:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8007d68:	6812      	ldr	r2, [r2, #0]
 8007d6a:	fab2 f282 	clz	r2, r2
 8007d6e:	b2d2      	uxtb	r2, r2
 8007d70:	f042 0220 	orr.w	r2, r2, #32
 8007d74:	b2d2      	uxtb	r2, r2
 8007d76:	f002 021f 	and.w	r2, r2, #31
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8007d80:	4013      	ands	r3, r2
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d182      	bne.n	8007c8c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d86:	4b88      	ldr	r3, [pc, #544]	; (8007fa8 <HAL_RCC_OscConfig+0xf78>)
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	430b      	orrs	r3, r1
 8007da8:	497f      	ldr	r1, [pc, #508]	; (8007fa8 <HAL_RCC_OscConfig+0xf78>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	604b      	str	r3, [r1, #4]
 8007dae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007db2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007db6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007dba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dc0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	fa93 f2a3 	rbit	r2, r3
 8007dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007dd2:	601a      	str	r2, [r3, #0]
  return result;
 8007dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007dd8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8007ddc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dde:	fab3 f383 	clz	r3, r3
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007de8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	461a      	mov	r2, r3
 8007df0:	2301      	movs	r3, #1
 8007df2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007df4:	f7fb fde8 	bl	80039c8 <HAL_GetTick>
 8007df8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007dfc:	e009      	b.n	8007e12 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dfe:	f7fb fde3 	bl	80039c8 <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d901      	bls.n	8007e12 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e144      	b.n	800809c <HAL_RCC_OscConfig+0x106c>
 8007e12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e16:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007e1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e24:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	fa93 f2a3 	rbit	r2, r3
 8007e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e32:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007e36:	601a      	str	r2, [r3, #0]
  return result;
 8007e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e3c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8007e40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007e42:	fab3 f383 	clz	r3, r3
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	095b      	lsrs	r3, r3, #5
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	f043 0301 	orr.w	r3, r3, #1
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d102      	bne.n	8007e5c <HAL_RCC_OscConfig+0xe2c>
 8007e56:	4b54      	ldr	r3, [pc, #336]	; (8007fa8 <HAL_RCC_OscConfig+0xf78>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	e027      	b.n	8007eac <HAL_RCC_OscConfig+0xe7c>
 8007e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e60:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007e64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e6e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	fa93 f2a3 	rbit	r2, r3
 8007e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e7c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e86:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007e8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e94:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	fa93 f2a3 	rbit	r2, r3
 8007e9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ea2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	4b3f      	ldr	r3, [pc, #252]	; (8007fa8 <HAL_RCC_OscConfig+0xf78>)
 8007eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007eb0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007eb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8007eb8:	6011      	str	r1, [r2, #0]
 8007eba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ebe:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8007ec2:	6812      	ldr	r2, [r2, #0]
 8007ec4:	fa92 f1a2 	rbit	r1, r2
 8007ec8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ecc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007ed0:	6011      	str	r1, [r2, #0]
  return result;
 8007ed2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8007ed6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8007eda:	6812      	ldr	r2, [r2, #0]
 8007edc:	fab2 f282 	clz	r2, r2
 8007ee0:	b2d2      	uxtb	r2, r2
 8007ee2:	f042 0220 	orr.w	r2, r2, #32
 8007ee6:	b2d2      	uxtb	r2, r2
 8007ee8:	f002 021f 	and.w	r2, r2, #31
 8007eec:	2101      	movs	r1, #1
 8007eee:	fa01 f202 	lsl.w	r2, r1, r2
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d082      	beq.n	8007dfe <HAL_RCC_OscConfig+0xdce>
 8007ef8:	e0cf      	b.n	800809a <HAL_RCC_OscConfig+0x106a>
 8007efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007efe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007f02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f0c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	fa93 f2a3 	rbit	r2, r3
 8007f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f1a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007f1e:	601a      	str	r2, [r3, #0]
  return result;
 8007f20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f24:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8007f28:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f2a:	fab3 f383 	clz	r3, r3
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007f34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f40:	f7fb fd42 	bl	80039c8 <HAL_GetTick>
 8007f44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f48:	e009      	b.n	8007f5e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f4a:	f7fb fd3d 	bl	80039c8 <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d901      	bls.n	8007f5e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e09e      	b.n	800809c <HAL_RCC_OscConfig+0x106c>
 8007f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f62:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007f66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007f6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f70:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	fa93 f2a3 	rbit	r2, r3
 8007f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f7e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007f82:	601a      	str	r2, [r3, #0]
  return result;
 8007f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f88:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8007f8c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f8e:	fab3 f383 	clz	r3, r3
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	095b      	lsrs	r3, r3, #5
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	f043 0301 	orr.w	r3, r3, #1
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d104      	bne.n	8007fac <HAL_RCC_OscConfig+0xf7c>
 8007fa2:	4b01      	ldr	r3, [pc, #4]	; (8007fa8 <HAL_RCC_OscConfig+0xf78>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	e029      	b.n	8007ffc <HAL_RCC_OscConfig+0xfcc>
 8007fa8:	40021000 	.word	0x40021000
 8007fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fb0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007fb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007fb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fbe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	fa93 f2a3 	rbit	r2, r3
 8007fc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fcc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fd6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007fda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fe4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	fa93 f2a3 	rbit	r2, r3
 8007fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ff2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	4b2b      	ldr	r3, [pc, #172]	; (80080a8 <HAL_RCC_OscConfig+0x1078>)
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008000:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8008004:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008008:	6011      	str	r1, [r2, #0]
 800800a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800800e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8008012:	6812      	ldr	r2, [r2, #0]
 8008014:	fa92 f1a2 	rbit	r1, r2
 8008018:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800801c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008020:	6011      	str	r1, [r2, #0]
  return result;
 8008022:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008026:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800802a:	6812      	ldr	r2, [r2, #0]
 800802c:	fab2 f282 	clz	r2, r2
 8008030:	b2d2      	uxtb	r2, r2
 8008032:	f042 0220 	orr.w	r2, r2, #32
 8008036:	b2d2      	uxtb	r2, r2
 8008038:	f002 021f 	and.w	r2, r2, #31
 800803c:	2101      	movs	r1, #1
 800803e:	fa01 f202 	lsl.w	r2, r1, r2
 8008042:	4013      	ands	r3, r2
 8008044:	2b00      	cmp	r3, #0
 8008046:	d180      	bne.n	8007f4a <HAL_RCC_OscConfig+0xf1a>
 8008048:	e027      	b.n	800809a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800804a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800804e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d101      	bne.n	800805e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e01e      	b.n	800809c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800805e:	4b12      	ldr	r3, [pc, #72]	; (80080a8 <HAL_RCC_OscConfig+0x1078>)
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008066:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800806a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800806e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008072:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	429a      	cmp	r2, r3
 800807c:	d10b      	bne.n	8008096 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800807e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008082:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800808a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8008092:	429a      	cmp	r2, r3
 8008094:	d001      	beq.n	800809a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	e000      	b.n	800809c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	4618      	mov	r0, r3
 800809e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	40021000 	.word	0x40021000

080080ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b09e      	sub	sp, #120	; 0x78
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80080b6:	2300      	movs	r3, #0
 80080b8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e162      	b.n	800838a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80080c4:	4b90      	ldr	r3, [pc, #576]	; (8008308 <HAL_RCC_ClockConfig+0x25c>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0307 	and.w	r3, r3, #7
 80080cc:	683a      	ldr	r2, [r7, #0]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d910      	bls.n	80080f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080d2:	4b8d      	ldr	r3, [pc, #564]	; (8008308 <HAL_RCC_ClockConfig+0x25c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f023 0207 	bic.w	r2, r3, #7
 80080da:	498b      	ldr	r1, [pc, #556]	; (8008308 <HAL_RCC_ClockConfig+0x25c>)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	4313      	orrs	r3, r2
 80080e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080e2:	4b89      	ldr	r3, [pc, #548]	; (8008308 <HAL_RCC_ClockConfig+0x25c>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0307 	and.w	r3, r3, #7
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d001      	beq.n	80080f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e14a      	b.n	800838a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0302 	and.w	r3, r3, #2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d008      	beq.n	8008112 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008100:	4b82      	ldr	r3, [pc, #520]	; (800830c <HAL_RCC_ClockConfig+0x260>)
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	497f      	ldr	r1, [pc, #508]	; (800830c <HAL_RCC_ClockConfig+0x260>)
 800810e:	4313      	orrs	r3, r2
 8008110:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	2b00      	cmp	r3, #0
 800811c:	f000 80dc 	beq.w	80082d8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d13c      	bne.n	80081a2 <HAL_RCC_ClockConfig+0xf6>
 8008128:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800812c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800812e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008130:	fa93 f3a3 	rbit	r3, r3
 8008134:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008138:	fab3 f383 	clz	r3, r3
 800813c:	b2db      	uxtb	r3, r3
 800813e:	095b      	lsrs	r3, r3, #5
 8008140:	b2db      	uxtb	r3, r3
 8008142:	f043 0301 	orr.w	r3, r3, #1
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b01      	cmp	r3, #1
 800814a:	d102      	bne.n	8008152 <HAL_RCC_ClockConfig+0xa6>
 800814c:	4b6f      	ldr	r3, [pc, #444]	; (800830c <HAL_RCC_ClockConfig+0x260>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	e00f      	b.n	8008172 <HAL_RCC_ClockConfig+0xc6>
 8008152:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008156:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008158:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800815a:	fa93 f3a3 	rbit	r3, r3
 800815e:	667b      	str	r3, [r7, #100]	; 0x64
 8008160:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008164:	663b      	str	r3, [r7, #96]	; 0x60
 8008166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008168:	fa93 f3a3 	rbit	r3, r3
 800816c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800816e:	4b67      	ldr	r3, [pc, #412]	; (800830c <HAL_RCC_ClockConfig+0x260>)
 8008170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008172:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008176:	65ba      	str	r2, [r7, #88]	; 0x58
 8008178:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800817a:	fa92 f2a2 	rbit	r2, r2
 800817e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008180:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008182:	fab2 f282 	clz	r2, r2
 8008186:	b2d2      	uxtb	r2, r2
 8008188:	f042 0220 	orr.w	r2, r2, #32
 800818c:	b2d2      	uxtb	r2, r2
 800818e:	f002 021f 	and.w	r2, r2, #31
 8008192:	2101      	movs	r1, #1
 8008194:	fa01 f202 	lsl.w	r2, r1, r2
 8008198:	4013      	ands	r3, r2
 800819a:	2b00      	cmp	r3, #0
 800819c:	d17b      	bne.n	8008296 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e0f3      	b.n	800838a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d13c      	bne.n	8008224 <HAL_RCC_ClockConfig+0x178>
 80081aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081b2:	fa93 f3a3 	rbit	r3, r3
 80081b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80081b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081ba:	fab3 f383 	clz	r3, r3
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	095b      	lsrs	r3, r3, #5
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	f043 0301 	orr.w	r3, r3, #1
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d102      	bne.n	80081d4 <HAL_RCC_ClockConfig+0x128>
 80081ce:	4b4f      	ldr	r3, [pc, #316]	; (800830c <HAL_RCC_ClockConfig+0x260>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	e00f      	b.n	80081f4 <HAL_RCC_ClockConfig+0x148>
 80081d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081dc:	fa93 f3a3 	rbit	r3, r3
 80081e0:	647b      	str	r3, [r7, #68]	; 0x44
 80081e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081e6:	643b      	str	r3, [r7, #64]	; 0x40
 80081e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081ea:	fa93 f3a3 	rbit	r3, r3
 80081ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081f0:	4b46      	ldr	r3, [pc, #280]	; (800830c <HAL_RCC_ClockConfig+0x260>)
 80081f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80081f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80081fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081fc:	fa92 f2a2 	rbit	r2, r2
 8008200:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8008202:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008204:	fab2 f282 	clz	r2, r2
 8008208:	b2d2      	uxtb	r2, r2
 800820a:	f042 0220 	orr.w	r2, r2, #32
 800820e:	b2d2      	uxtb	r2, r2
 8008210:	f002 021f 	and.w	r2, r2, #31
 8008214:	2101      	movs	r1, #1
 8008216:	fa01 f202 	lsl.w	r2, r1, r2
 800821a:	4013      	ands	r3, r2
 800821c:	2b00      	cmp	r3, #0
 800821e:	d13a      	bne.n	8008296 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e0b2      	b.n	800838a <HAL_RCC_ClockConfig+0x2de>
 8008224:	2302      	movs	r3, #2
 8008226:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822a:	fa93 f3a3 	rbit	r3, r3
 800822e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008232:	fab3 f383 	clz	r3, r3
 8008236:	b2db      	uxtb	r3, r3
 8008238:	095b      	lsrs	r3, r3, #5
 800823a:	b2db      	uxtb	r3, r3
 800823c:	f043 0301 	orr.w	r3, r3, #1
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2b01      	cmp	r3, #1
 8008244:	d102      	bne.n	800824c <HAL_RCC_ClockConfig+0x1a0>
 8008246:	4b31      	ldr	r3, [pc, #196]	; (800830c <HAL_RCC_ClockConfig+0x260>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	e00d      	b.n	8008268 <HAL_RCC_ClockConfig+0x1bc>
 800824c:	2302      	movs	r3, #2
 800824e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008252:	fa93 f3a3 	rbit	r3, r3
 8008256:	627b      	str	r3, [r7, #36]	; 0x24
 8008258:	2302      	movs	r3, #2
 800825a:	623b      	str	r3, [r7, #32]
 800825c:	6a3b      	ldr	r3, [r7, #32]
 800825e:	fa93 f3a3 	rbit	r3, r3
 8008262:	61fb      	str	r3, [r7, #28]
 8008264:	4b29      	ldr	r3, [pc, #164]	; (800830c <HAL_RCC_ClockConfig+0x260>)
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	2202      	movs	r2, #2
 800826a:	61ba      	str	r2, [r7, #24]
 800826c:	69ba      	ldr	r2, [r7, #24]
 800826e:	fa92 f2a2 	rbit	r2, r2
 8008272:	617a      	str	r2, [r7, #20]
  return result;
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	fab2 f282 	clz	r2, r2
 800827a:	b2d2      	uxtb	r2, r2
 800827c:	f042 0220 	orr.w	r2, r2, #32
 8008280:	b2d2      	uxtb	r2, r2
 8008282:	f002 021f 	and.w	r2, r2, #31
 8008286:	2101      	movs	r1, #1
 8008288:	fa01 f202 	lsl.w	r2, r1, r2
 800828c:	4013      	ands	r3, r2
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e079      	b.n	800838a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008296:	4b1d      	ldr	r3, [pc, #116]	; (800830c <HAL_RCC_ClockConfig+0x260>)
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f023 0203 	bic.w	r2, r3, #3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	491a      	ldr	r1, [pc, #104]	; (800830c <HAL_RCC_ClockConfig+0x260>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80082a8:	f7fb fb8e 	bl	80039c8 <HAL_GetTick>
 80082ac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082ae:	e00a      	b.n	80082c6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082b0:	f7fb fb8a 	bl	80039c8 <HAL_GetTick>
 80082b4:	4602      	mov	r2, r0
 80082b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80082be:	4293      	cmp	r3, r2
 80082c0:	d901      	bls.n	80082c6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	e061      	b.n	800838a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082c6:	4b11      	ldr	r3, [pc, #68]	; (800830c <HAL_RCC_ClockConfig+0x260>)
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	f003 020c 	and.w	r2, r3, #12
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d1eb      	bne.n	80082b0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80082d8:	4b0b      	ldr	r3, [pc, #44]	; (8008308 <HAL_RCC_ClockConfig+0x25c>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 0307 	and.w	r3, r3, #7
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d214      	bcs.n	8008310 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082e6:	4b08      	ldr	r3, [pc, #32]	; (8008308 <HAL_RCC_ClockConfig+0x25c>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f023 0207 	bic.w	r2, r3, #7
 80082ee:	4906      	ldr	r1, [pc, #24]	; (8008308 <HAL_RCC_ClockConfig+0x25c>)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80082f6:	4b04      	ldr	r3, [pc, #16]	; (8008308 <HAL_RCC_ClockConfig+0x25c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0307 	and.w	r3, r3, #7
 80082fe:	683a      	ldr	r2, [r7, #0]
 8008300:	429a      	cmp	r2, r3
 8008302:	d005      	beq.n	8008310 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e040      	b.n	800838a <HAL_RCC_ClockConfig+0x2de>
 8008308:	40022000 	.word	0x40022000
 800830c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0304 	and.w	r3, r3, #4
 8008318:	2b00      	cmp	r3, #0
 800831a:	d008      	beq.n	800832e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800831c:	4b1d      	ldr	r3, [pc, #116]	; (8008394 <HAL_RCC_ClockConfig+0x2e8>)
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	491a      	ldr	r1, [pc, #104]	; (8008394 <HAL_RCC_ClockConfig+0x2e8>)
 800832a:	4313      	orrs	r3, r2
 800832c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0308 	and.w	r3, r3, #8
 8008336:	2b00      	cmp	r3, #0
 8008338:	d009      	beq.n	800834e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800833a:	4b16      	ldr	r3, [pc, #88]	; (8008394 <HAL_RCC_ClockConfig+0x2e8>)
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	4912      	ldr	r1, [pc, #72]	; (8008394 <HAL_RCC_ClockConfig+0x2e8>)
 800834a:	4313      	orrs	r3, r2
 800834c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800834e:	f000 f829 	bl	80083a4 <HAL_RCC_GetSysClockFreq>
 8008352:	4601      	mov	r1, r0
 8008354:	4b0f      	ldr	r3, [pc, #60]	; (8008394 <HAL_RCC_ClockConfig+0x2e8>)
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800835c:	22f0      	movs	r2, #240	; 0xf0
 800835e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	fa92 f2a2 	rbit	r2, r2
 8008366:	60fa      	str	r2, [r7, #12]
  return result;
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	fab2 f282 	clz	r2, r2
 800836e:	b2d2      	uxtb	r2, r2
 8008370:	40d3      	lsrs	r3, r2
 8008372:	4a09      	ldr	r2, [pc, #36]	; (8008398 <HAL_RCC_ClockConfig+0x2ec>)
 8008374:	5cd3      	ldrb	r3, [r2, r3]
 8008376:	fa21 f303 	lsr.w	r3, r1, r3
 800837a:	4a08      	ldr	r2, [pc, #32]	; (800839c <HAL_RCC_ClockConfig+0x2f0>)
 800837c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800837e:	4b08      	ldr	r3, [pc, #32]	; (80083a0 <HAL_RCC_ClockConfig+0x2f4>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4618      	mov	r0, r3
 8008384:	f7fb fadc 	bl	8003940 <HAL_InitTick>
  
  return HAL_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3778      	adds	r7, #120	; 0x78
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	40021000 	.word	0x40021000
 8008398:	0800e698 	.word	0x0800e698
 800839c:	20000098 	.word	0x20000098
 80083a0:	2000009c 	.word	0x2000009c

080083a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b08b      	sub	sp, #44	; 0x2c
 80083a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	61fb      	str	r3, [r7, #28]
 80083ae:	2300      	movs	r3, #0
 80083b0:	61bb      	str	r3, [r7, #24]
 80083b2:	2300      	movs	r3, #0
 80083b4:	627b      	str	r3, [r7, #36]	; 0x24
 80083b6:	2300      	movs	r3, #0
 80083b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80083ba:	2300      	movs	r3, #0
 80083bc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80083be:	4b29      	ldr	r3, [pc, #164]	; (8008464 <HAL_RCC_GetSysClockFreq+0xc0>)
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	f003 030c 	and.w	r3, r3, #12
 80083ca:	2b04      	cmp	r3, #4
 80083cc:	d002      	beq.n	80083d4 <HAL_RCC_GetSysClockFreq+0x30>
 80083ce:	2b08      	cmp	r3, #8
 80083d0:	d003      	beq.n	80083da <HAL_RCC_GetSysClockFreq+0x36>
 80083d2:	e03c      	b.n	800844e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80083d4:	4b24      	ldr	r3, [pc, #144]	; (8008468 <HAL_RCC_GetSysClockFreq+0xc4>)
 80083d6:	623b      	str	r3, [r7, #32]
      break;
 80083d8:	e03c      	b.n	8008454 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80083e0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80083e4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	fa92 f2a2 	rbit	r2, r2
 80083ec:	607a      	str	r2, [r7, #4]
  return result;
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	fab2 f282 	clz	r2, r2
 80083f4:	b2d2      	uxtb	r2, r2
 80083f6:	40d3      	lsrs	r3, r2
 80083f8:	4a1c      	ldr	r2, [pc, #112]	; (800846c <HAL_RCC_GetSysClockFreq+0xc8>)
 80083fa:	5cd3      	ldrb	r3, [r2, r3]
 80083fc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80083fe:	4b19      	ldr	r3, [pc, #100]	; (8008464 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008402:	f003 030f 	and.w	r3, r3, #15
 8008406:	220f      	movs	r2, #15
 8008408:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	fa92 f2a2 	rbit	r2, r2
 8008410:	60fa      	str	r2, [r7, #12]
  return result;
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	fab2 f282 	clz	r2, r2
 8008418:	b2d2      	uxtb	r2, r2
 800841a:	40d3      	lsrs	r3, r2
 800841c:	4a14      	ldr	r2, [pc, #80]	; (8008470 <HAL_RCC_GetSysClockFreq+0xcc>)
 800841e:	5cd3      	ldrb	r3, [r2, r3]
 8008420:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d008      	beq.n	800843e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800842c:	4a0e      	ldr	r2, [pc, #56]	; (8008468 <HAL_RCC_GetSysClockFreq+0xc4>)
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	fbb2 f2f3 	udiv	r2, r2, r3
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	fb02 f303 	mul.w	r3, r2, r3
 800843a:	627b      	str	r3, [r7, #36]	; 0x24
 800843c:	e004      	b.n	8008448 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	4a0c      	ldr	r2, [pc, #48]	; (8008474 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008442:	fb02 f303 	mul.w	r3, r2, r3
 8008446:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	623b      	str	r3, [r7, #32]
      break;
 800844c:	e002      	b.n	8008454 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800844e:	4b06      	ldr	r3, [pc, #24]	; (8008468 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008450:	623b      	str	r3, [r7, #32]
      break;
 8008452:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008454:	6a3b      	ldr	r3, [r7, #32]
}
 8008456:	4618      	mov	r0, r3
 8008458:	372c      	adds	r7, #44	; 0x2c
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	40021000 	.word	0x40021000
 8008468:	007a1200 	.word	0x007a1200
 800846c:	0800e6b0 	.word	0x0800e6b0
 8008470:	0800e6c0 	.word	0x0800e6c0
 8008474:	003d0900 	.word	0x003d0900

08008478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008478:	b480      	push	{r7}
 800847a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800847c:	4b03      	ldr	r3, [pc, #12]	; (800848c <HAL_RCC_GetHCLKFreq+0x14>)
 800847e:	681b      	ldr	r3, [r3, #0]
}
 8008480:	4618      	mov	r0, r3
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	20000098 	.word	0x20000098

08008490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8008496:	f7ff ffef 	bl	8008478 <HAL_RCC_GetHCLKFreq>
 800849a:	4601      	mov	r1, r0
 800849c:	4b0b      	ldr	r3, [pc, #44]	; (80084cc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084a4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80084a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	fa92 f2a2 	rbit	r2, r2
 80084b0:	603a      	str	r2, [r7, #0]
  return result;
 80084b2:	683a      	ldr	r2, [r7, #0]
 80084b4:	fab2 f282 	clz	r2, r2
 80084b8:	b2d2      	uxtb	r2, r2
 80084ba:	40d3      	lsrs	r3, r2
 80084bc:	4a04      	ldr	r2, [pc, #16]	; (80084d0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80084be:	5cd3      	ldrb	r3, [r2, r3]
 80084c0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80084c4:	4618      	mov	r0, r3
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	40021000 	.word	0x40021000
 80084d0:	0800e6a8 	.word	0x0800e6a8

080084d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80084da:	f7ff ffcd 	bl	8008478 <HAL_RCC_GetHCLKFreq>
 80084de:	4601      	mov	r1, r0
 80084e0:	4b0b      	ldr	r3, [pc, #44]	; (8008510 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80084e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80084ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	fa92 f2a2 	rbit	r2, r2
 80084f4:	603a      	str	r2, [r7, #0]
  return result;
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	fab2 f282 	clz	r2, r2
 80084fc:	b2d2      	uxtb	r2, r2
 80084fe:	40d3      	lsrs	r3, r2
 8008500:	4a04      	ldr	r2, [pc, #16]	; (8008514 <HAL_RCC_GetPCLK2Freq+0x40>)
 8008502:	5cd3      	ldrb	r3, [r2, r3]
 8008504:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8008508:	4618      	mov	r0, r3
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	40021000 	.word	0x40021000
 8008514:	0800e6a8 	.word	0x0800e6a8

08008518 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b092      	sub	sp, #72	; 0x48
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008520:	2300      	movs	r3, #0
 8008522:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008524:	2300      	movs	r3, #0
 8008526:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008528:	2300      	movs	r3, #0
 800852a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 80cd 	beq.w	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800853c:	4b8e      	ldr	r3, [pc, #568]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800853e:	69db      	ldr	r3, [r3, #28]
 8008540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10e      	bne.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008548:	4b8b      	ldr	r3, [pc, #556]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800854a:	69db      	ldr	r3, [r3, #28]
 800854c:	4a8a      	ldr	r2, [pc, #552]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800854e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008552:	61d3      	str	r3, [r2, #28]
 8008554:	4b88      	ldr	r3, [pc, #544]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800855c:	60bb      	str	r3, [r7, #8]
 800855e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008560:	2301      	movs	r3, #1
 8008562:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008566:	4b85      	ldr	r3, [pc, #532]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800856e:	2b00      	cmp	r3, #0
 8008570:	d118      	bne.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008572:	4b82      	ldr	r3, [pc, #520]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a81      	ldr	r2, [pc, #516]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8008578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800857c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800857e:	f7fb fa23 	bl	80039c8 <HAL_GetTick>
 8008582:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008584:	e008      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008586:	f7fb fa1f 	bl	80039c8 <HAL_GetTick>
 800858a:	4602      	mov	r2, r0
 800858c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	2b64      	cmp	r3, #100	; 0x64
 8008592:	d901      	bls.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e0ea      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008598:	4b78      	ldr	r3, [pc, #480]	; (800877c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d0f0      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80085a4:	4b74      	ldr	r3, [pc, #464]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085a6:	6a1b      	ldr	r3, [r3, #32]
 80085a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80085ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d07d      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085be:	429a      	cmp	r2, r3
 80085c0:	d076      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085c2:	4b6d      	ldr	r3, [pc, #436]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085d0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	fa93 f3a3 	rbit	r3, r3
 80085d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80085da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80085dc:	fab3 f383 	clz	r3, r3
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	461a      	mov	r2, r3
 80085e4:	4b66      	ldr	r3, [pc, #408]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80085e6:	4413      	add	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	461a      	mov	r2, r3
 80085ec:	2301      	movs	r3, #1
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f8:	fa93 f3a3 	rbit	r3, r3
 80085fc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80085fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008600:	fab3 f383 	clz	r3, r3
 8008604:	b2db      	uxtb	r3, r3
 8008606:	461a      	mov	r2, r3
 8008608:	4b5d      	ldr	r3, [pc, #372]	; (8008780 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800860a:	4413      	add	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	461a      	mov	r2, r3
 8008610:	2300      	movs	r3, #0
 8008612:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008614:	4a58      	ldr	r2, [pc, #352]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008618:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800861a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800861c:	f003 0301 	and.w	r3, r3, #1
 8008620:	2b00      	cmp	r3, #0
 8008622:	d045      	beq.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008624:	f7fb f9d0 	bl	80039c8 <HAL_GetTick>
 8008628:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800862a:	e00a      	b.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800862c:	f7fb f9cc 	bl	80039c8 <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	f241 3288 	movw	r2, #5000	; 0x1388
 800863a:	4293      	cmp	r3, r2
 800863c:	d901      	bls.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800863e:	2303      	movs	r3, #3
 8008640:	e095      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8008642:	2302      	movs	r3, #2
 8008644:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008648:	fa93 f3a3 	rbit	r3, r3
 800864c:	627b      	str	r3, [r7, #36]	; 0x24
 800864e:	2302      	movs	r3, #2
 8008650:	623b      	str	r3, [r7, #32]
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	fa93 f3a3 	rbit	r3, r3
 8008658:	61fb      	str	r3, [r7, #28]
  return result;
 800865a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800865c:	fab3 f383 	clz	r3, r3
 8008660:	b2db      	uxtb	r3, r3
 8008662:	095b      	lsrs	r3, r3, #5
 8008664:	b2db      	uxtb	r3, r3
 8008666:	f043 0302 	orr.w	r3, r3, #2
 800866a:	b2db      	uxtb	r3, r3
 800866c:	2b02      	cmp	r3, #2
 800866e:	d102      	bne.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8008670:	4b41      	ldr	r3, [pc, #260]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008672:	6a1b      	ldr	r3, [r3, #32]
 8008674:	e007      	b.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8008676:	2302      	movs	r3, #2
 8008678:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	fa93 f3a3 	rbit	r3, r3
 8008680:	617b      	str	r3, [r7, #20]
 8008682:	4b3d      	ldr	r3, [pc, #244]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008686:	2202      	movs	r2, #2
 8008688:	613a      	str	r2, [r7, #16]
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	fa92 f2a2 	rbit	r2, r2
 8008690:	60fa      	str	r2, [r7, #12]
  return result;
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	fab2 f282 	clz	r2, r2
 8008698:	b2d2      	uxtb	r2, r2
 800869a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800869e:	b2d2      	uxtb	r2, r2
 80086a0:	f002 021f 	and.w	r2, r2, #31
 80086a4:	2101      	movs	r1, #1
 80086a6:	fa01 f202 	lsl.w	r2, r1, r2
 80086aa:	4013      	ands	r3, r2
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d0bd      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80086b0:	4b31      	ldr	r3, [pc, #196]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	492e      	ldr	r1, [pc, #184]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086be:	4313      	orrs	r3, r2
 80086c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80086c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d105      	bne.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086ca:	4b2b      	ldr	r3, [pc, #172]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	4a2a      	ldr	r2, [pc, #168]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086d4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d008      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80086e2:	4b25      	ldr	r3, [pc, #148]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e6:	f023 0203 	bic.w	r2, r3, #3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	4922      	ldr	r1, [pc, #136]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 0320 	and.w	r3, r3, #32
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d008      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008700:	4b1d      	ldr	r3, [pc, #116]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008704:	f023 0210 	bic.w	r2, r3, #16
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	491a      	ldr	r1, [pc, #104]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800870e:	4313      	orrs	r3, r2
 8008710:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800871a:	2b00      	cmp	r3, #0
 800871c:	d008      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800871e:	4b16      	ldr	r3, [pc, #88]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008722:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	4913      	ldr	r1, [pc, #76]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800872c:	4313      	orrs	r3, r2
 800872e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d008      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800873c:	4b0e      	ldr	r3, [pc, #56]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800873e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008740:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	695b      	ldr	r3, [r3, #20]
 8008748:	490b      	ldr	r1, [pc, #44]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800874a:	4313      	orrs	r3, r2
 800874c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d008      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800875a:	4b07      	ldr	r3, [pc, #28]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	4904      	ldr	r1, [pc, #16]	; (8008778 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8008768:	4313      	orrs	r3, r2
 800876a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3748      	adds	r7, #72	; 0x48
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	40021000 	.word	0x40021000
 800877c:	40007000 	.word	0x40007000
 8008780:	10908100 	.word	0x10908100

08008784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e049      	b.n	800882a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800879c:	b2db      	uxtb	r3, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d106      	bne.n	80087b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7fa fef8 	bl	80035a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	3304      	adds	r3, #4
 80087c0:	4619      	mov	r1, r3
 80087c2:	4610      	mov	r0, r2
 80087c4:	f000 f9da 	bl	8008b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
	...

08008834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008842:	b2db      	uxtb	r3, r3
 8008844:	2b01      	cmp	r3, #1
 8008846:	d001      	beq.n	800884c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008848:	2301      	movs	r3, #1
 800884a:	e040      	b.n	80088ce <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2202      	movs	r2, #2
 8008850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68da      	ldr	r2, [r3, #12]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f042 0201 	orr.w	r2, r2, #1
 8008862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a1c      	ldr	r2, [pc, #112]	; (80088dc <HAL_TIM_Base_Start_IT+0xa8>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d00e      	beq.n	800888c <HAL_TIM_Base_Start_IT+0x58>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008876:	d009      	beq.n	800888c <HAL_TIM_Base_Start_IT+0x58>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a18      	ldr	r2, [pc, #96]	; (80088e0 <HAL_TIM_Base_Start_IT+0xac>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d004      	beq.n	800888c <HAL_TIM_Base_Start_IT+0x58>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a17      	ldr	r2, [pc, #92]	; (80088e4 <HAL_TIM_Base_Start_IT+0xb0>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d115      	bne.n	80088b8 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	689a      	ldr	r2, [r3, #8]
 8008892:	4b15      	ldr	r3, [pc, #84]	; (80088e8 <HAL_TIM_Base_Start_IT+0xb4>)
 8008894:	4013      	ands	r3, r2
 8008896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b06      	cmp	r3, #6
 800889c:	d015      	beq.n	80088ca <HAL_TIM_Base_Start_IT+0x96>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088a4:	d011      	beq.n	80088ca <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f042 0201 	orr.w	r2, r2, #1
 80088b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088b6:	e008      	b.n	80088ca <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f042 0201 	orr.w	r2, r2, #1
 80088c6:	601a      	str	r2, [r3, #0]
 80088c8:	e000      	b.n	80088cc <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	40012c00 	.word	0x40012c00
 80088e0:	40000400 	.word	0x40000400
 80088e4:	40014000 	.word	0x40014000
 80088e8:	00010007 	.word	0x00010007

080088ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	f003 0302 	and.w	r3, r3, #2
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d122      	bne.n	8008948 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	f003 0302 	and.w	r3, r3, #2
 800890c:	2b02      	cmp	r3, #2
 800890e:	d11b      	bne.n	8008948 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f06f 0202 	mvn.w	r2, #2
 8008918:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	f003 0303 	and.w	r3, r3, #3
 800892a:	2b00      	cmp	r3, #0
 800892c:	d003      	beq.n	8008936 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f905 	bl	8008b3e <HAL_TIM_IC_CaptureCallback>
 8008934:	e005      	b.n	8008942 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f8f7 	bl	8008b2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f908 	bl	8008b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	f003 0304 	and.w	r3, r3, #4
 8008952:	2b04      	cmp	r3, #4
 8008954:	d122      	bne.n	800899c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	f003 0304 	and.w	r3, r3, #4
 8008960:	2b04      	cmp	r3, #4
 8008962:	d11b      	bne.n	800899c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f06f 0204 	mvn.w	r2, #4
 800896c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2202      	movs	r2, #2
 8008972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f8db 	bl	8008b3e <HAL_TIM_IC_CaptureCallback>
 8008988:	e005      	b.n	8008996 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f8cd 	bl	8008b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f8de 	bl	8008b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	f003 0308 	and.w	r3, r3, #8
 80089a6:	2b08      	cmp	r3, #8
 80089a8:	d122      	bne.n	80089f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	f003 0308 	and.w	r3, r3, #8
 80089b4:	2b08      	cmp	r3, #8
 80089b6:	d11b      	bne.n	80089f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f06f 0208 	mvn.w	r2, #8
 80089c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2204      	movs	r2, #4
 80089c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	69db      	ldr	r3, [r3, #28]
 80089ce:	f003 0303 	and.w	r3, r3, #3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f000 f8b1 	bl	8008b3e <HAL_TIM_IC_CaptureCallback>
 80089dc:	e005      	b.n	80089ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f8a3 	bl	8008b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f8b4 	bl	8008b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	f003 0310 	and.w	r3, r3, #16
 80089fa:	2b10      	cmp	r3, #16
 80089fc:	d122      	bne.n	8008a44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68db      	ldr	r3, [r3, #12]
 8008a04:	f003 0310 	and.w	r3, r3, #16
 8008a08:	2b10      	cmp	r3, #16
 8008a0a:	d11b      	bne.n	8008a44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f06f 0210 	mvn.w	r2, #16
 8008a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2208      	movs	r2, #8
 8008a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d003      	beq.n	8008a32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f887 	bl	8008b3e <HAL_TIM_IC_CaptureCallback>
 8008a30:	e005      	b.n	8008a3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f879 	bl	8008b2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 f88a 	bl	8008b52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	691b      	ldr	r3, [r3, #16]
 8008a4a:	f003 0301 	and.w	r3, r3, #1
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d10e      	bne.n	8008a70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	f003 0301 	and.w	r3, r3, #1
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d107      	bne.n	8008a70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f06f 0201 	mvn.w	r2, #1
 8008a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f7fa fbe4 	bl	8003238 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a7a:	2b80      	cmp	r3, #128	; 0x80
 8008a7c:	d10e      	bne.n	8008a9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a88:	2b80      	cmp	r3, #128	; 0x80
 8008a8a:	d107      	bne.n	8008a9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f960 	bl	8008d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aaa:	d10e      	bne.n	8008aca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab6:	2b80      	cmp	r3, #128	; 0x80
 8008ab8:	d107      	bne.n	8008aca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f953 	bl	8008d70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad4:	2b40      	cmp	r3, #64	; 0x40
 8008ad6:	d10e      	bne.n	8008af6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae2:	2b40      	cmp	r3, #64	; 0x40
 8008ae4:	d107      	bne.n	8008af6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 f838 	bl	8008b66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	f003 0320 	and.w	r3, r3, #32
 8008b00:	2b20      	cmp	r3, #32
 8008b02:	d10e      	bne.n	8008b22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	f003 0320 	and.w	r3, r3, #32
 8008b0e:	2b20      	cmp	r3, #32
 8008b10:	d107      	bne.n	8008b22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f06f 0220 	mvn.w	r2, #32
 8008b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f913 	bl	8008d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b22:	bf00      	nop
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b083      	sub	sp, #12
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b32:	bf00      	nop
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b083      	sub	sp, #12
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b46:	bf00      	nop
 8008b48:	370c      	adds	r7, #12
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr

08008b52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b083      	sub	sp, #12
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b5a:	bf00      	nop
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b083      	sub	sp, #12
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b6e:	bf00      	nop
 8008b70:	370c      	adds	r7, #12
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
	...

08008b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a32      	ldr	r2, [pc, #200]	; (8008c58 <TIM_Base_SetConfig+0xdc>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d007      	beq.n	8008ba4 <TIM_Base_SetConfig+0x28>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b9a:	d003      	beq.n	8008ba4 <TIM_Base_SetConfig+0x28>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a2f      	ldr	r2, [pc, #188]	; (8008c5c <TIM_Base_SetConfig+0xe0>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d108      	bne.n	8008bb6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a27      	ldr	r2, [pc, #156]	; (8008c58 <TIM_Base_SetConfig+0xdc>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d013      	beq.n	8008be6 <TIM_Base_SetConfig+0x6a>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bc4:	d00f      	beq.n	8008be6 <TIM_Base_SetConfig+0x6a>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a24      	ldr	r2, [pc, #144]	; (8008c5c <TIM_Base_SetConfig+0xe0>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d00b      	beq.n	8008be6 <TIM_Base_SetConfig+0x6a>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a23      	ldr	r2, [pc, #140]	; (8008c60 <TIM_Base_SetConfig+0xe4>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d007      	beq.n	8008be6 <TIM_Base_SetConfig+0x6a>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a22      	ldr	r2, [pc, #136]	; (8008c64 <TIM_Base_SetConfig+0xe8>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d003      	beq.n	8008be6 <TIM_Base_SetConfig+0x6a>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a21      	ldr	r2, [pc, #132]	; (8008c68 <TIM_Base_SetConfig+0xec>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d108      	bne.n	8008bf8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	689a      	ldr	r2, [r3, #8]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a0e      	ldr	r2, [pc, #56]	; (8008c58 <TIM_Base_SetConfig+0xdc>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d00b      	beq.n	8008c3c <TIM_Base_SetConfig+0xc0>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a0e      	ldr	r2, [pc, #56]	; (8008c60 <TIM_Base_SetConfig+0xe4>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d007      	beq.n	8008c3c <TIM_Base_SetConfig+0xc0>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a0d      	ldr	r2, [pc, #52]	; (8008c64 <TIM_Base_SetConfig+0xe8>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d003      	beq.n	8008c3c <TIM_Base_SetConfig+0xc0>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a0c      	ldr	r2, [pc, #48]	; (8008c68 <TIM_Base_SetConfig+0xec>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d103      	bne.n	8008c44 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	691a      	ldr	r2, [r3, #16]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	615a      	str	r2, [r3, #20]
}
 8008c4a:	bf00      	nop
 8008c4c:	3714      	adds	r7, #20
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	40012c00 	.word	0x40012c00
 8008c5c:	40000400 	.word	0x40000400
 8008c60:	40014000 	.word	0x40014000
 8008c64:	40014400 	.word	0x40014400
 8008c68:	40014800 	.word	0x40014800

08008c6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d101      	bne.n	8008c84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c80:	2302      	movs	r3, #2
 8008c82:	e054      	b.n	8008d2e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2202      	movs	r2, #2
 8008c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a24      	ldr	r2, [pc, #144]	; (8008d3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d108      	bne.n	8008cc0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008cb4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	68fa      	ldr	r2, [r7, #12]
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a17      	ldr	r2, [pc, #92]	; (8008d3c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d00e      	beq.n	8008d02 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cec:	d009      	beq.n	8008d02 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a13      	ldr	r2, [pc, #76]	; (8008d40 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d004      	beq.n	8008d02 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a11      	ldr	r2, [pc, #68]	; (8008d44 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d10c      	bne.n	8008d1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68ba      	ldr	r2, [r7, #8]
 8008d1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	40012c00 	.word	0x40012c00
 8008d40:	40000400 	.word	0x40000400
 8008d44:	40014000 	.word	0x40014000

08008d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e040      	b.n	8008e18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d106      	bne.n	8008dac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7fa fc20 	bl	80035ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2224      	movs	r2, #36	; 0x24
 8008db0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f022 0201 	bic.w	r2, r2, #1
 8008dc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fbca 	bl	800955c <UART_SetConfig>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d101      	bne.n	8008dd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e022      	b.n	8008e18 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d002      	beq.n	8008de0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fcf4 	bl	80097c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	685a      	ldr	r2, [r3, #4]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	689a      	ldr	r2, [r3, #8]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f042 0201 	orr.w	r2, r2, #1
 8008e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 fd7b 	bl	800990c <UART_CheckIdleState>
 8008e16:	4603      	mov	r3, r0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b08b      	sub	sp, #44	; 0x2c
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e32:	2b20      	cmp	r3, #32
 8008e34:	d147      	bne.n	8008ec6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d002      	beq.n	8008e42 <HAL_UART_Transmit_IT+0x22>
 8008e3c:	88fb      	ldrh	r3, [r7, #6]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e040      	b.n	8008ec8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	88fa      	ldrh	r2, [r7, #6]
 8008e50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	88fa      	ldrh	r2, [r7, #6]
 8008e58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2221      	movs	r2, #33	; 0x21
 8008e6e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e78:	d107      	bne.n	8008e8a <HAL_UART_Transmit_IT+0x6a>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d103      	bne.n	8008e8a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	4a13      	ldr	r2, [pc, #76]	; (8008ed4 <HAL_UART_Transmit_IT+0xb4>)
 8008e86:	66da      	str	r2, [r3, #108]	; 0x6c
 8008e88:	e002      	b.n	8008e90 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	4a12      	ldr	r2, [pc, #72]	; (8008ed8 <HAL_UART_Transmit_IT+0xb8>)
 8008e8e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	613b      	str	r3, [r7, #16]
   return(result);
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eae:	623b      	str	r3, [r7, #32]
 8008eb0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb2:	69f9      	ldr	r1, [r7, #28]
 8008eb4:	6a3a      	ldr	r2, [r7, #32]
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1e6      	bne.n	8008e90 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	e000      	b.n	8008ec8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8008ec6:	2302      	movs	r3, #2
  }
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	372c      	adds	r7, #44	; 0x2c
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	08009e65 	.word	0x08009e65
 8008ed8:	08009dad 	.word	0x08009dad

08008edc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b08a      	sub	sp, #40	; 0x28
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ef0:	2b20      	cmp	r3, #32
 8008ef2:	d132      	bne.n	8008f5a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d002      	beq.n	8008f00 <HAL_UART_Receive_IT+0x24>
 8008efa:	88fb      	ldrh	r3, [r7, #6]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d101      	bne.n	8008f04 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e02b      	b.n	8008f5c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d018      	beq.n	8008f4a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	e853 3f00 	ldrex	r3, [r3]
 8008f24:	613b      	str	r3, [r7, #16]
   return(result);
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	461a      	mov	r2, r3
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	623b      	str	r3, [r7, #32]
 8008f38:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3a:	69f9      	ldr	r1, [r7, #28]
 8008f3c:	6a3a      	ldr	r2, [r7, #32]
 8008f3e:	e841 2300 	strex	r3, r2, [r1]
 8008f42:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1e6      	bne.n	8008f18 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008f4a:	88fb      	ldrh	r3, [r7, #6]
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	68b9      	ldr	r1, [r7, #8]
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f000 fdeb 	bl	8009b2c <UART_Start_Receive_IT>
 8008f56:	4603      	mov	r3, r0
 8008f58:	e000      	b.n	8008f5c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008f5a:	2302      	movs	r3, #2
  }
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3728      	adds	r7, #40	; 0x28
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b0ba      	sub	sp, #232	; 0xe8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	69db      	ldr	r3, [r3, #28]
 8008f72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008f8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008f8e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008f92:	4013      	ands	r3, r2
 8008f94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008f98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d115      	bne.n	8008fcc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fa4:	f003 0320 	and.w	r3, r3, #32
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00f      	beq.n	8008fcc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fb0:	f003 0320 	and.w	r3, r3, #32
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d009      	beq.n	8008fcc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f000 82ab 	beq.w	8009518 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	4798      	blx	r3
      }
      return;
 8008fca:	e2a5      	b.n	8009518 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008fcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f000 8117 	beq.w	8009204 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d106      	bne.n	8008ff0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008fe2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008fe6:	4b85      	ldr	r3, [pc, #532]	; (80091fc <HAL_UART_IRQHandler+0x298>)
 8008fe8:	4013      	ands	r3, r2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f000 810a 	beq.w	8009204 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d011      	beq.n	8009020 <HAL_UART_IRQHandler+0xbc>
 8008ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00b      	beq.n	8009020 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2201      	movs	r2, #1
 800900e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009016:	f043 0201 	orr.w	r2, r3, #1
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009024:	f003 0302 	and.w	r3, r3, #2
 8009028:	2b00      	cmp	r3, #0
 800902a:	d011      	beq.n	8009050 <HAL_UART_IRQHandler+0xec>
 800902c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009030:	f003 0301 	and.w	r3, r3, #1
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00b      	beq.n	8009050 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2202      	movs	r2, #2
 800903e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009046:	f043 0204 	orr.w	r2, r3, #4
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009054:	f003 0304 	and.w	r3, r3, #4
 8009058:	2b00      	cmp	r3, #0
 800905a:	d011      	beq.n	8009080 <HAL_UART_IRQHandler+0x11c>
 800905c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009060:	f003 0301 	and.w	r3, r3, #1
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00b      	beq.n	8009080 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2204      	movs	r2, #4
 800906e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009076:	f043 0202 	orr.w	r2, r3, #2
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009084:	f003 0308 	and.w	r3, r3, #8
 8009088:	2b00      	cmp	r3, #0
 800908a:	d017      	beq.n	80090bc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800908c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009090:	f003 0320 	and.w	r3, r3, #32
 8009094:	2b00      	cmp	r3, #0
 8009096:	d105      	bne.n	80090a4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800909c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00b      	beq.n	80090bc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2208      	movs	r2, #8
 80090aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090b2:	f043 0208 	orr.w	r2, r3, #8
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80090bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d012      	beq.n	80090ee <HAL_UART_IRQHandler+0x18a>
 80090c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00c      	beq.n	80090ee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090e4:	f043 0220 	orr.w	r2, r3, #32
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 8211 	beq.w	800951c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80090fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090fe:	f003 0320 	and.w	r3, r3, #32
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00d      	beq.n	8009122 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800910a:	f003 0320 	and.w	r3, r3, #32
 800910e:	2b00      	cmp	r3, #0
 8009110:	d007      	beq.n	8009122 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009116:	2b00      	cmp	r3, #0
 8009118:	d003      	beq.n	8009122 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009128:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009136:	2b40      	cmp	r3, #64	; 0x40
 8009138:	d005      	beq.n	8009146 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800913a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800913e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009142:	2b00      	cmp	r3, #0
 8009144:	d04f      	beq.n	80091e6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fdb6 	bl	8009cb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009156:	2b40      	cmp	r3, #64	; 0x40
 8009158:	d141      	bne.n	80091de <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	3308      	adds	r3, #8
 8009160:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009164:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009168:	e853 3f00 	ldrex	r3, [r3]
 800916c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009178:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	3308      	adds	r3, #8
 8009182:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009186:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800918a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009192:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009196:	e841 2300 	strex	r3, r2, [r1]
 800919a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800919e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d1d9      	bne.n	800915a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d013      	beq.n	80091d6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091b2:	4a13      	ldr	r2, [pc, #76]	; (8009200 <HAL_UART_IRQHandler+0x29c>)
 80091b4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fb fd0e 	bl	8004bdc <HAL_DMA_Abort_IT>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d017      	beq.n	80091f6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80091d0:	4610      	mov	r0, r2
 80091d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091d4:	e00f      	b.n	80091f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f9aa 	bl	8009530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091dc:	e00b      	b.n	80091f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f9a6 	bl	8009530 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091e4:	e007      	b.n	80091f6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f9a2 	bl	8009530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80091f4:	e192      	b.n	800951c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091f6:	bf00      	nop
    return;
 80091f8:	e190      	b.n	800951c <HAL_UART_IRQHandler+0x5b8>
 80091fa:	bf00      	nop
 80091fc:	04000120 	.word	0x04000120
 8009200:	08009d81 	.word	0x08009d81

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009208:	2b01      	cmp	r3, #1
 800920a:	f040 814b 	bne.w	80094a4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800920e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009212:	f003 0310 	and.w	r3, r3, #16
 8009216:	2b00      	cmp	r3, #0
 8009218:	f000 8144 	beq.w	80094a4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800921c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009220:	f003 0310 	and.w	r3, r3, #16
 8009224:	2b00      	cmp	r3, #0
 8009226:	f000 813d 	beq.w	80094a4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2210      	movs	r2, #16
 8009230:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800923c:	2b40      	cmp	r3, #64	; 0x40
 800923e:	f040 80b5 	bne.w	80093ac <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800924e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009252:	2b00      	cmp	r3, #0
 8009254:	f000 8164 	beq.w	8009520 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800925e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009262:	429a      	cmp	r2, r3
 8009264:	f080 815c 	bcs.w	8009520 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800926e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	2b20      	cmp	r3, #32
 800927a:	f000 8086 	beq.w	800938a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009286:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800928a:	e853 3f00 	ldrex	r3, [r3]
 800928e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009292:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800929a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	461a      	mov	r2, r3
 80092a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80092ac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80092b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80092b8:	e841 2300 	strex	r3, r2, [r1]
 80092bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80092c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1da      	bne.n	800927e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	3308      	adds	r3, #8
 80092ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092d2:	e853 3f00 	ldrex	r3, [r3]
 80092d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80092d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092da:	f023 0301 	bic.w	r3, r3, #1
 80092de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	3308      	adds	r3, #8
 80092e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80092ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80092f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80092f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80092f8:	e841 2300 	strex	r3, r2, [r1]
 80092fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80092fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1e1      	bne.n	80092c8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	3308      	adds	r3, #8
 800930a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800930e:	e853 3f00 	ldrex	r3, [r3]
 8009312:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800931a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	3308      	adds	r3, #8
 8009324:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009328:	66fa      	str	r2, [r7, #108]	; 0x6c
 800932a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800932e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009330:	e841 2300 	strex	r3, r2, [r1]
 8009334:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009336:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1e3      	bne.n	8009304 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2220      	movs	r2, #32
 8009340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009352:	e853 3f00 	ldrex	r3, [r3]
 8009356:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800935a:	f023 0310 	bic.w	r3, r3, #16
 800935e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	461a      	mov	r2, r3
 8009368:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800936c:	65bb      	str	r3, [r7, #88]	; 0x58
 800936e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009370:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009372:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009374:	e841 2300 	strex	r3, r2, [r1]
 8009378:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800937a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1e4      	bne.n	800934a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009384:	4618      	mov	r0, r3
 8009386:	f7fb fbf0 	bl	8004b6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2202      	movs	r2, #2
 800938e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800939c:	b29b      	uxth	r3, r3
 800939e:	1ad3      	subs	r3, r2, r3
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	4619      	mov	r1, r3
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f8cd 	bl	8009544 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80093aa:	e0b9      	b.n	8009520 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f000 80ab 	beq.w	8009524 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80093ce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f000 80a6 	beq.w	8009524 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e0:	e853 3f00 	ldrex	r3, [r3]
 80093e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80093e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	461a      	mov	r2, r3
 80093f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093fa:	647b      	str	r3, [r7, #68]	; 0x44
 80093fc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009402:	e841 2300 	strex	r3, r2, [r1]
 8009406:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1e4      	bne.n	80093d8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	3308      	adds	r3, #8
 8009414:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009418:	e853 3f00 	ldrex	r3, [r3]
 800941c:	623b      	str	r3, [r7, #32]
   return(result);
 800941e:	6a3b      	ldr	r3, [r7, #32]
 8009420:	f023 0301 	bic.w	r3, r3, #1
 8009424:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	3308      	adds	r3, #8
 800942e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009432:	633a      	str	r2, [r7, #48]	; 0x30
 8009434:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800943a:	e841 2300 	strex	r3, r2, [r1]
 800943e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1e3      	bne.n	800940e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2220      	movs	r2, #32
 800944a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	e853 3f00 	ldrex	r3, [r3]
 8009466:	60fb      	str	r3, [r7, #12]
   return(result);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f023 0310 	bic.w	r3, r3, #16
 800946e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	461a      	mov	r2, r3
 8009478:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800947c:	61fb      	str	r3, [r7, #28]
 800947e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009480:	69b9      	ldr	r1, [r7, #24]
 8009482:	69fa      	ldr	r2, [r7, #28]
 8009484:	e841 2300 	strex	r3, r2, [r1]
 8009488:	617b      	str	r3, [r7, #20]
   return(result);
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d1e4      	bne.n	800945a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2202      	movs	r2, #2
 8009494:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009496:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800949a:	4619      	mov	r1, r3
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 f851 	bl	8009544 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80094a2:	e03f      	b.n	8009524 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80094a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d00e      	beq.n	80094ce <HAL_UART_IRQHandler+0x56a>
 80094b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d008      	beq.n	80094ce <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80094c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fefe 	bl	800a2c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094cc:	e02d      	b.n	800952a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80094ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00e      	beq.n	80094f8 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80094da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d008      	beq.n	80094f8 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d01c      	beq.n	8009528 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	4798      	blx	r3
    }
    return;
 80094f6:	e017      	b.n	8009528 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80094f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009500:	2b00      	cmp	r3, #0
 8009502:	d012      	beq.n	800952a <HAL_UART_IRQHandler+0x5c6>
 8009504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00c      	beq.n	800952a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fd07 	bl	8009f24 <UART_EndTransmit_IT>
    return;
 8009516:	e008      	b.n	800952a <HAL_UART_IRQHandler+0x5c6>
      return;
 8009518:	bf00      	nop
 800951a:	e006      	b.n	800952a <HAL_UART_IRQHandler+0x5c6>
    return;
 800951c:	bf00      	nop
 800951e:	e004      	b.n	800952a <HAL_UART_IRQHandler+0x5c6>
      return;
 8009520:	bf00      	nop
 8009522:	e002      	b.n	800952a <HAL_UART_IRQHandler+0x5c6>
      return;
 8009524:	bf00      	nop
 8009526:	e000      	b.n	800952a <HAL_UART_IRQHandler+0x5c6>
    return;
 8009528:	bf00      	nop
  }

}
 800952a:	37e8      	adds	r7, #232	; 0xe8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009550:	bf00      	nop
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b088      	sub	sp, #32
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	689a      	ldr	r2, [r3, #8]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	431a      	orrs	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	431a      	orrs	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	69db      	ldr	r3, [r3, #28]
 800957c:	4313      	orrs	r3, r2
 800957e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	4b8a      	ldr	r3, [pc, #552]	; (80097b0 <UART_SetConfig+0x254>)
 8009588:	4013      	ands	r3, r2
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	6812      	ldr	r2, [r2, #0]
 800958e:	6979      	ldr	r1, [r7, #20]
 8009590:	430b      	orrs	r3, r1
 8009592:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68da      	ldr	r2, [r3, #12]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	430a      	orrs	r2, r1
 80095a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a1b      	ldr	r3, [r3, #32]
 80095b4:	697a      	ldr	r2, [r7, #20]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	697a      	ldr	r2, [r7, #20]
 80095ca:	430a      	orrs	r2, r1
 80095cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a78      	ldr	r2, [pc, #480]	; (80097b4 <UART_SetConfig+0x258>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d120      	bne.n	800961a <UART_SetConfig+0xbe>
 80095d8:	4b77      	ldr	r3, [pc, #476]	; (80097b8 <UART_SetConfig+0x25c>)
 80095da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095dc:	f003 0303 	and.w	r3, r3, #3
 80095e0:	2b03      	cmp	r3, #3
 80095e2:	d817      	bhi.n	8009614 <UART_SetConfig+0xb8>
 80095e4:	a201      	add	r2, pc, #4	; (adr r2, 80095ec <UART_SetConfig+0x90>)
 80095e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ea:	bf00      	nop
 80095ec:	080095fd 	.word	0x080095fd
 80095f0:	08009609 	.word	0x08009609
 80095f4:	0800960f 	.word	0x0800960f
 80095f8:	08009603 	.word	0x08009603
 80095fc:	2300      	movs	r3, #0
 80095fe:	77fb      	strb	r3, [r7, #31]
 8009600:	e01d      	b.n	800963e <UART_SetConfig+0xe2>
 8009602:	2302      	movs	r3, #2
 8009604:	77fb      	strb	r3, [r7, #31]
 8009606:	e01a      	b.n	800963e <UART_SetConfig+0xe2>
 8009608:	2304      	movs	r3, #4
 800960a:	77fb      	strb	r3, [r7, #31]
 800960c:	e017      	b.n	800963e <UART_SetConfig+0xe2>
 800960e:	2308      	movs	r3, #8
 8009610:	77fb      	strb	r3, [r7, #31]
 8009612:	e014      	b.n	800963e <UART_SetConfig+0xe2>
 8009614:	2310      	movs	r3, #16
 8009616:	77fb      	strb	r3, [r7, #31]
 8009618:	e011      	b.n	800963e <UART_SetConfig+0xe2>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a67      	ldr	r2, [pc, #412]	; (80097bc <UART_SetConfig+0x260>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d102      	bne.n	800962a <UART_SetConfig+0xce>
 8009624:	2300      	movs	r3, #0
 8009626:	77fb      	strb	r3, [r7, #31]
 8009628:	e009      	b.n	800963e <UART_SetConfig+0xe2>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a64      	ldr	r2, [pc, #400]	; (80097c0 <UART_SetConfig+0x264>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d102      	bne.n	800963a <UART_SetConfig+0xde>
 8009634:	2300      	movs	r3, #0
 8009636:	77fb      	strb	r3, [r7, #31]
 8009638:	e001      	b.n	800963e <UART_SetConfig+0xe2>
 800963a:	2310      	movs	r3, #16
 800963c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009646:	d15a      	bne.n	80096fe <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8009648:	7ffb      	ldrb	r3, [r7, #31]
 800964a:	2b08      	cmp	r3, #8
 800964c:	d827      	bhi.n	800969e <UART_SetConfig+0x142>
 800964e:	a201      	add	r2, pc, #4	; (adr r2, 8009654 <UART_SetConfig+0xf8>)
 8009650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009654:	08009679 	.word	0x08009679
 8009658:	08009681 	.word	0x08009681
 800965c:	08009689 	.word	0x08009689
 8009660:	0800969f 	.word	0x0800969f
 8009664:	0800968f 	.word	0x0800968f
 8009668:	0800969f 	.word	0x0800969f
 800966c:	0800969f 	.word	0x0800969f
 8009670:	0800969f 	.word	0x0800969f
 8009674:	08009697 	.word	0x08009697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009678:	f7fe ff0a 	bl	8008490 <HAL_RCC_GetPCLK1Freq>
 800967c:	61b8      	str	r0, [r7, #24]
        break;
 800967e:	e013      	b.n	80096a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009680:	f7fe ff28 	bl	80084d4 <HAL_RCC_GetPCLK2Freq>
 8009684:	61b8      	str	r0, [r7, #24]
        break;
 8009686:	e00f      	b.n	80096a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009688:	4b4e      	ldr	r3, [pc, #312]	; (80097c4 <UART_SetConfig+0x268>)
 800968a:	61bb      	str	r3, [r7, #24]
        break;
 800968c:	e00c      	b.n	80096a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800968e:	f7fe fe89 	bl	80083a4 <HAL_RCC_GetSysClockFreq>
 8009692:	61b8      	str	r0, [r7, #24]
        break;
 8009694:	e008      	b.n	80096a8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800969a:	61bb      	str	r3, [r7, #24]
        break;
 800969c:	e004      	b.n	80096a8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800969e:	2300      	movs	r3, #0
 80096a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	77bb      	strb	r3, [r7, #30]
        break;
 80096a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d074      	beq.n	8009798 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	005a      	lsls	r2, r3, #1
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	085b      	lsrs	r3, r3, #1
 80096b8:	441a      	add	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	fbb2 f3f3 	udiv	r3, r2, r3
 80096c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	2b0f      	cmp	r3, #15
 80096c8:	d916      	bls.n	80096f8 <UART_SetConfig+0x19c>
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096d0:	d212      	bcs.n	80096f8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	f023 030f 	bic.w	r3, r3, #15
 80096da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	085b      	lsrs	r3, r3, #1
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	f003 0307 	and.w	r3, r3, #7
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	89fb      	ldrh	r3, [r7, #14]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	89fa      	ldrh	r2, [r7, #14]
 80096f4:	60da      	str	r2, [r3, #12]
 80096f6:	e04f      	b.n	8009798 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	77bb      	strb	r3, [r7, #30]
 80096fc:	e04c      	b.n	8009798 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80096fe:	7ffb      	ldrb	r3, [r7, #31]
 8009700:	2b08      	cmp	r3, #8
 8009702:	d828      	bhi.n	8009756 <UART_SetConfig+0x1fa>
 8009704:	a201      	add	r2, pc, #4	; (adr r2, 800970c <UART_SetConfig+0x1b0>)
 8009706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970a:	bf00      	nop
 800970c:	08009731 	.word	0x08009731
 8009710:	08009739 	.word	0x08009739
 8009714:	08009741 	.word	0x08009741
 8009718:	08009757 	.word	0x08009757
 800971c:	08009747 	.word	0x08009747
 8009720:	08009757 	.word	0x08009757
 8009724:	08009757 	.word	0x08009757
 8009728:	08009757 	.word	0x08009757
 800972c:	0800974f 	.word	0x0800974f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009730:	f7fe feae 	bl	8008490 <HAL_RCC_GetPCLK1Freq>
 8009734:	61b8      	str	r0, [r7, #24]
        break;
 8009736:	e013      	b.n	8009760 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009738:	f7fe fecc 	bl	80084d4 <HAL_RCC_GetPCLK2Freq>
 800973c:	61b8      	str	r0, [r7, #24]
        break;
 800973e:	e00f      	b.n	8009760 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009740:	4b20      	ldr	r3, [pc, #128]	; (80097c4 <UART_SetConfig+0x268>)
 8009742:	61bb      	str	r3, [r7, #24]
        break;
 8009744:	e00c      	b.n	8009760 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009746:	f7fe fe2d 	bl	80083a4 <HAL_RCC_GetSysClockFreq>
 800974a:	61b8      	str	r0, [r7, #24]
        break;
 800974c:	e008      	b.n	8009760 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800974e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009752:	61bb      	str	r3, [r7, #24]
        break;
 8009754:	e004      	b.n	8009760 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8009756:	2300      	movs	r3, #0
 8009758:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800975a:	2301      	movs	r3, #1
 800975c:	77bb      	strb	r3, [r7, #30]
        break;
 800975e:	bf00      	nop
    }

    if (pclk != 0U)
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d018      	beq.n	8009798 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	085a      	lsrs	r2, r3, #1
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	441a      	add	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	fbb2 f3f3 	udiv	r3, r2, r3
 8009778:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	2b0f      	cmp	r3, #15
 800977e:	d909      	bls.n	8009794 <UART_SetConfig+0x238>
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009786:	d205      	bcs.n	8009794 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	b29a      	uxth	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	60da      	str	r2, [r3, #12]
 8009792:	e001      	b.n	8009798 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80097a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3720      	adds	r7, #32
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	efff69f3 	.word	0xefff69f3
 80097b4:	40013800 	.word	0x40013800
 80097b8:	40021000 	.word	0x40021000
 80097bc:	40004400 	.word	0x40004400
 80097c0:	40004800 	.word	0x40004800
 80097c4:	007a1200 	.word	0x007a1200

080097c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00a      	beq.n	80097f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	430a      	orrs	r2, r1
 80097f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f6:	f003 0302 	and.w	r3, r3, #2
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00a      	beq.n	8009814 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	430a      	orrs	r2, r1
 8009812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009818:	f003 0304 	and.w	r3, r3, #4
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00a      	beq.n	8009836 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	430a      	orrs	r2, r1
 8009834:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983a:	f003 0308 	and.w	r3, r3, #8
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00a      	beq.n	8009858 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	430a      	orrs	r2, r1
 8009856:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985c:	f003 0310 	and.w	r3, r3, #16
 8009860:	2b00      	cmp	r3, #0
 8009862:	d00a      	beq.n	800987a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	430a      	orrs	r2, r1
 8009878:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987e:	f003 0320 	and.w	r3, r3, #32
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00a      	beq.n	800989c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	430a      	orrs	r2, r1
 800989a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d01a      	beq.n	80098de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098c6:	d10a      	bne.n	80098de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	430a      	orrs	r2, r1
 80098dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00a      	beq.n	8009900 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	430a      	orrs	r2, r1
 80098fe:	605a      	str	r2, [r3, #4]
  }
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b098      	sub	sp, #96	; 0x60
 8009910:	af02      	add	r7, sp, #8
 8009912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800991c:	f7fa f854 	bl	80039c8 <HAL_GetTick>
 8009920:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 0308 	and.w	r3, r3, #8
 800992c:	2b08      	cmp	r3, #8
 800992e:	d12e      	bne.n	800998e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009934:	9300      	str	r3, [sp, #0]
 8009936:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009938:	2200      	movs	r2, #0
 800993a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f88c 	bl	8009a5c <UART_WaitOnFlagUntilTimeout>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d021      	beq.n	800998e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009952:	e853 3f00 	ldrex	r3, [r3]
 8009956:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800995a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800995e:	653b      	str	r3, [r7, #80]	; 0x50
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	461a      	mov	r2, r3
 8009966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009968:	647b      	str	r3, [r7, #68]	; 0x44
 800996a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800996e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009970:	e841 2300 	strex	r3, r2, [r1]
 8009974:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009978:	2b00      	cmp	r3, #0
 800997a:	d1e6      	bne.n	800994a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2220      	movs	r2, #32
 8009980:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800998a:	2303      	movs	r3, #3
 800998c:	e062      	b.n	8009a54 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f003 0304 	and.w	r3, r3, #4
 8009998:	2b04      	cmp	r3, #4
 800999a:	d149      	bne.n	8009a30 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800999c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099a4:	2200      	movs	r2, #0
 80099a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f856 	bl	8009a5c <UART_WaitOnFlagUntilTimeout>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d03c      	beq.n	8009a30 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099be:	e853 3f00 	ldrex	r3, [r3]
 80099c2:	623b      	str	r3, [r7, #32]
   return(result);
 80099c4:	6a3b      	ldr	r3, [r7, #32]
 80099c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	461a      	mov	r2, r3
 80099d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099d4:	633b      	str	r3, [r7, #48]	; 0x30
 80099d6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099dc:	e841 2300 	strex	r3, r2, [r1]
 80099e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1e6      	bne.n	80099b6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	3308      	adds	r3, #8
 80099ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	e853 3f00 	ldrex	r3, [r3]
 80099f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f023 0301 	bic.w	r3, r3, #1
 80099fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3308      	adds	r3, #8
 8009a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a08:	61fa      	str	r2, [r7, #28]
 8009a0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a0c:	69b9      	ldr	r1, [r7, #24]
 8009a0e:	69fa      	ldr	r2, [r7, #28]
 8009a10:	e841 2300 	strex	r3, r2, [r1]
 8009a14:	617b      	str	r3, [r7, #20]
   return(result);
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d1e5      	bne.n	80099e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2220      	movs	r2, #32
 8009a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	e011      	b.n	8009a54 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2220      	movs	r2, #32
 8009a34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2220      	movs	r2, #32
 8009a3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3758      	adds	r7, #88	; 0x58
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	603b      	str	r3, [r7, #0]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a6c:	e049      	b.n	8009b02 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a74:	d045      	beq.n	8009b02 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a76:	f7f9 ffa7 	bl	80039c8 <HAL_GetTick>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	1ad3      	subs	r3, r2, r3
 8009a80:	69ba      	ldr	r2, [r7, #24]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d302      	bcc.n	8009a8c <UART_WaitOnFlagUntilTimeout+0x30>
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d101      	bne.n	8009a90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	e048      	b.n	8009b22 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 0304 	and.w	r3, r3, #4
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d031      	beq.n	8009b02 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	69db      	ldr	r3, [r3, #28]
 8009aa4:	f003 0308 	and.w	r3, r3, #8
 8009aa8:	2b08      	cmp	r3, #8
 8009aaa:	d110      	bne.n	8009ace <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2208      	movs	r2, #8
 8009ab2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f000 f8ff 	bl	8009cb8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2208      	movs	r2, #8
 8009abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e029      	b.n	8009b22 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	69db      	ldr	r3, [r3, #28]
 8009ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009adc:	d111      	bne.n	8009b02 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ae6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ae8:	68f8      	ldr	r0, [r7, #12]
 8009aea:	f000 f8e5 	bl	8009cb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2220      	movs	r2, #32
 8009af2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009afe:	2303      	movs	r3, #3
 8009b00:	e00f      	b.n	8009b22 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	69da      	ldr	r2, [r3, #28]
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	4013      	ands	r3, r2
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	bf0c      	ite	eq
 8009b12:	2301      	moveq	r3, #1
 8009b14:	2300      	movne	r3, #0
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	461a      	mov	r2, r3
 8009b1a:	79fb      	ldrb	r3, [r7, #7]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d0a6      	beq.n	8009a6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3710      	adds	r7, #16
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
	...

08009b2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b097      	sub	sp, #92	; 0x5c
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	4613      	mov	r3, r2
 8009b38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	88fa      	ldrh	r2, [r7, #6]
 8009b44:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	88fa      	ldrh	r2, [r7, #6]
 8009b4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b5e:	d10e      	bne.n	8009b7e <UART_Start_Receive_IT+0x52>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d105      	bne.n	8009b74 <UART_Start_Receive_IT+0x48>
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009b6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b72:	e02d      	b.n	8009bd0 <UART_Start_Receive_IT+0xa4>
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	22ff      	movs	r2, #255	; 0xff
 8009b78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b7c:	e028      	b.n	8009bd0 <UART_Start_Receive_IT+0xa4>
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10d      	bne.n	8009ba2 <UART_Start_Receive_IT+0x76>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d104      	bne.n	8009b98 <UART_Start_Receive_IT+0x6c>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	22ff      	movs	r2, #255	; 0xff
 8009b92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009b96:	e01b      	b.n	8009bd0 <UART_Start_Receive_IT+0xa4>
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	227f      	movs	r2, #127	; 0x7f
 8009b9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ba0:	e016      	b.n	8009bd0 <UART_Start_Receive_IT+0xa4>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009baa:	d10d      	bne.n	8009bc8 <UART_Start_Receive_IT+0x9c>
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	691b      	ldr	r3, [r3, #16]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d104      	bne.n	8009bbe <UART_Start_Receive_IT+0x92>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	227f      	movs	r2, #127	; 0x7f
 8009bb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009bbc:	e008      	b.n	8009bd0 <UART_Start_Receive_IT+0xa4>
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	223f      	movs	r2, #63	; 0x3f
 8009bc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009bc6:	e003      	b.n	8009bd0 <UART_Start_Receive_IT+0xa4>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2222      	movs	r2, #34	; 0x22
 8009bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	3308      	adds	r3, #8
 8009be6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bea:	e853 3f00 	ldrex	r3, [r3]
 8009bee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf2:	f043 0301 	orr.w	r3, r3, #1
 8009bf6:	657b      	str	r3, [r7, #84]	; 0x54
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3308      	adds	r3, #8
 8009bfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c00:	64ba      	str	r2, [r7, #72]	; 0x48
 8009c02:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c04:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c08:	e841 2300 	strex	r3, r2, [r1]
 8009c0c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1e5      	bne.n	8009be0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c1c:	d107      	bne.n	8009c2e <UART_Start_Receive_IT+0x102>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	691b      	ldr	r3, [r3, #16]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d103      	bne.n	8009c2e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	4a21      	ldr	r2, [pc, #132]	; (8009cb0 <UART_Start_Receive_IT+0x184>)
 8009c2a:	669a      	str	r2, [r3, #104]	; 0x68
 8009c2c:	e002      	b.n	8009c34 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	4a20      	ldr	r2, [pc, #128]	; (8009cb4 <UART_Start_Receive_IT+0x188>)
 8009c32:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d019      	beq.n	8009c70 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	e853 3f00 	ldrex	r3, [r3]
 8009c48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009c50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	461a      	mov	r2, r3
 8009c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8009c5c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009c60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c62:	e841 2300 	strex	r3, r2, [r1]
 8009c66:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1e6      	bne.n	8009c3c <UART_Start_Receive_IT+0x110>
 8009c6e:	e018      	b.n	8009ca2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	e853 3f00 	ldrex	r3, [r3]
 8009c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	f043 0320 	orr.w	r3, r3, #32
 8009c84:	653b      	str	r3, [r7, #80]	; 0x50
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c8e:	623b      	str	r3, [r7, #32]
 8009c90:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c92:	69f9      	ldr	r1, [r7, #28]
 8009c94:	6a3a      	ldr	r2, [r7, #32]
 8009c96:	e841 2300 	strex	r3, r2, [r1]
 8009c9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d1e6      	bne.n	8009c70 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8009ca2:	2300      	movs	r3, #0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	375c      	adds	r7, #92	; 0x5c
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	0800a121 	.word	0x0800a121
 8009cb4:	08009f79 	.word	0x08009f79

08009cb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b095      	sub	sp, #84	; 0x54
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc8:	e853 3f00 	ldrex	r3, [r3]
 8009ccc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	461a      	mov	r2, r3
 8009cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cde:	643b      	str	r3, [r7, #64]	; 0x40
 8009ce0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009ce4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ce6:	e841 2300 	strex	r3, r2, [r1]
 8009cea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1e6      	bne.n	8009cc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	3308      	adds	r3, #8
 8009cf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	e853 3f00 	ldrex	r3, [r3]
 8009d00:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	f023 0301 	bic.w	r3, r3, #1
 8009d08:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	3308      	adds	r3, #8
 8009d10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d1a:	e841 2300 	strex	r3, r2, [r1]
 8009d1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d1e5      	bne.n	8009cf2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d118      	bne.n	8009d60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	e853 3f00 	ldrex	r3, [r3]
 8009d3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	f023 0310 	bic.w	r3, r3, #16
 8009d42:	647b      	str	r3, [r7, #68]	; 0x44
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d4c:	61bb      	str	r3, [r7, #24]
 8009d4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d50:	6979      	ldr	r1, [r7, #20]
 8009d52:	69ba      	ldr	r2, [r7, #24]
 8009d54:	e841 2300 	strex	r3, r2, [r1]
 8009d58:	613b      	str	r3, [r7, #16]
   return(result);
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1e6      	bne.n	8009d2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2220      	movs	r2, #32
 8009d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009d74:	bf00      	nop
 8009d76:	3754      	adds	r7, #84	; 0x54
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2200      	movs	r2, #0
 8009d92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f7ff fbc6 	bl	8009530 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009da4:	bf00      	nop
 8009da6:	3710      	adds	r7, #16
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b08f      	sub	sp, #60	; 0x3c
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009db8:	2b21      	cmp	r3, #33	; 0x21
 8009dba:	d14d      	bne.n	8009e58 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d132      	bne.n	8009e2e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dce:	6a3b      	ldr	r3, [r7, #32]
 8009dd0:	e853 3f00 	ldrex	r3, [r3]
 8009dd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	461a      	mov	r2, r3
 8009de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009de8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dee:	e841 2300 	strex	r3, r2, [r1]
 8009df2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1e6      	bne.n	8009dc8 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	e853 3f00 	ldrex	r3, [r3]
 8009e06:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e0e:	633b      	str	r3, [r7, #48]	; 0x30
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	461a      	mov	r2, r3
 8009e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e18:	61bb      	str	r3, [r7, #24]
 8009e1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e1c:	6979      	ldr	r1, [r7, #20]
 8009e1e:	69ba      	ldr	r2, [r7, #24]
 8009e20:	e841 2300 	strex	r3, r2, [r1]
 8009e24:	613b      	str	r3, [r7, #16]
   return(result);
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d1e6      	bne.n	8009dfa <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8009e2c:	e014      	b.n	8009e58 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e32:	781a      	ldrb	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	b292      	uxth	r2, r2
 8009e3a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e40:	1c5a      	adds	r2, r3, #1
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	3b01      	subs	r3, #1
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009e58:	bf00      	nop
 8009e5a:	373c      	adds	r7, #60	; 0x3c
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b091      	sub	sp, #68	; 0x44
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e70:	2b21      	cmp	r3, #33	; 0x21
 8009e72:	d151      	bne.n	8009f18 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d132      	bne.n	8009ee6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e88:	e853 3f00 	ldrex	r3, [r3]
 8009e8c:	623b      	str	r3, [r7, #32]
   return(result);
 8009e8e:	6a3b      	ldr	r3, [r7, #32]
 8009e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e94:	63bb      	str	r3, [r7, #56]	; 0x38
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9e:	633b      	str	r3, [r7, #48]	; 0x30
 8009ea0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ea6:	e841 2300 	strex	r3, r2, [r1]
 8009eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d1e6      	bne.n	8009e80 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	e853 3f00 	ldrex	r3, [r3]
 8009ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed0:	61fb      	str	r3, [r7, #28]
 8009ed2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed4:	69b9      	ldr	r1, [r7, #24]
 8009ed6:	69fa      	ldr	r2, [r7, #28]
 8009ed8:	e841 2300 	strex	r3, r2, [r1]
 8009edc:	617b      	str	r3, [r7, #20]
   return(result);
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d1e6      	bne.n	8009eb2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8009ee4:	e018      	b.n	8009f18 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009eea:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eee:	881a      	ldrh	r2, [r3, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ef8:	b292      	uxth	r2, r2
 8009efa:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f00:	1c9a      	adds	r2, r3, #2
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8009f18:	bf00      	nop
 8009f1a:	3744      	adds	r7, #68	; 0x44
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b088      	sub	sp, #32
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	e853 3f00 	ldrex	r3, [r3]
 8009f38:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f40:	61fb      	str	r3, [r7, #28]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	461a      	mov	r2, r3
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	61bb      	str	r3, [r7, #24]
 8009f4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4e:	6979      	ldr	r1, [r7, #20]
 8009f50:	69ba      	ldr	r2, [r7, #24]
 8009f52:	e841 2300 	strex	r3, r2, [r1]
 8009f56:	613b      	str	r3, [r7, #16]
   return(result);
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1e6      	bne.n	8009f2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2220      	movs	r2, #32
 8009f62:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f7f9 f94c 	bl	8003208 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f70:	bf00      	nop
 8009f72:	3720      	adds	r7, #32
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b09c      	sub	sp, #112	; 0x70
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f86:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f90:	2b22      	cmp	r3, #34	; 0x22
 8009f92:	f040 80b9 	bne.w	800a108 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009f9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009fa0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009fa4:	b2d9      	uxtb	r1, r3
 8009fa6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009faa:	b2da      	uxtb	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fb0:	400a      	ands	r2, r1
 8009fb2:	b2d2      	uxtb	r2, r2
 8009fb4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fba:	1c5a      	adds	r2, r3, #1
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f040 809c 	bne.w	800a118 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fe8:	e853 3f00 	ldrex	r3, [r3]
 8009fec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ff0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ff4:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009ffe:	65bb      	str	r3, [r7, #88]	; 0x58
 800a000:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a002:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a004:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a006:	e841 2300 	strex	r3, r2, [r1]
 800a00a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a00c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1e6      	bne.n	8009fe0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3308      	adds	r3, #8
 800a018:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a01c:	e853 3f00 	ldrex	r3, [r3]
 800a020:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a024:	f023 0301 	bic.w	r3, r3, #1
 800a028:	667b      	str	r3, [r7, #100]	; 0x64
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	3308      	adds	r3, #8
 800a030:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a032:	647a      	str	r2, [r7, #68]	; 0x44
 800a034:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a036:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a038:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a03a:	e841 2300 	strex	r3, r2, [r1]
 800a03e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a042:	2b00      	cmp	r3, #0
 800a044:	d1e5      	bne.n	800a012 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2220      	movs	r2, #32
 800a04a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a064:	2b00      	cmp	r3, #0
 800a066:	d018      	beq.n	800a09a <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a070:	e853 3f00 	ldrex	r3, [r3]
 800a074:	623b      	str	r3, [r7, #32]
   return(result);
 800a076:	6a3b      	ldr	r3, [r7, #32]
 800a078:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a07c:	663b      	str	r3, [r7, #96]	; 0x60
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	461a      	mov	r2, r3
 800a084:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a086:	633b      	str	r3, [r7, #48]	; 0x30
 800a088:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a08c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a08e:	e841 2300 	strex	r3, r2, [r1]
 800a092:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1e6      	bne.n	800a068 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d12e      	bne.n	800a100 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	e853 3f00 	ldrex	r3, [r3]
 800a0b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f023 0310 	bic.w	r3, r3, #16
 800a0bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0c6:	61fb      	str	r3, [r7, #28]
 800a0c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ca:	69b9      	ldr	r1, [r7, #24]
 800a0cc:	69fa      	ldr	r2, [r7, #28]
 800a0ce:	e841 2300 	strex	r3, r2, [r1]
 800a0d2:	617b      	str	r3, [r7, #20]
   return(result);
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1e6      	bne.n	800a0a8 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	69db      	ldr	r3, [r3, #28]
 800a0e0:	f003 0310 	and.w	r3, r3, #16
 800a0e4:	2b10      	cmp	r3, #16
 800a0e6:	d103      	bne.n	800a0f0 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2210      	movs	r2, #16
 800a0ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f7ff fa23 	bl	8009544 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a0fe:	e00b      	b.n	800a118 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f7f9 f8a9 	bl	8003258 <HAL_UART_RxCpltCallback>
}
 800a106:	e007      	b.n	800a118 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	699a      	ldr	r2, [r3, #24]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f042 0208 	orr.w	r2, r2, #8
 800a116:	619a      	str	r2, [r3, #24]
}
 800a118:	bf00      	nop
 800a11a:	3770      	adds	r7, #112	; 0x70
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b09c      	sub	sp, #112	; 0x70
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a12e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a138:	2b22      	cmp	r3, #34	; 0x22
 800a13a:	f040 80b9 	bne.w	800a2b0 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a144:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a14c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a14e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800a152:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a156:	4013      	ands	r3, r2
 800a158:	b29a      	uxth	r2, r3
 800a15a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a15c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a162:	1c9a      	adds	r2, r3, #2
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a16e:	b29b      	uxth	r3, r3
 800a170:	3b01      	subs	r3, #1
 800a172:	b29a      	uxth	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a180:	b29b      	uxth	r3, r3
 800a182:	2b00      	cmp	r3, #0
 800a184:	f040 809c 	bne.w	800a2c0 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a190:	e853 3f00 	ldrex	r3, [r3]
 800a194:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a198:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a19c:	667b      	str	r3, [r7, #100]	; 0x64
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1a6:	657b      	str	r3, [r7, #84]	; 0x54
 800a1a8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a1ae:	e841 2300 	strex	r3, r2, [r1]
 800a1b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a1b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1e6      	bne.n	800a188 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	3308      	adds	r3, #8
 800a1c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c4:	e853 3f00 	ldrex	r3, [r3]
 800a1c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1cc:	f023 0301 	bic.w	r3, r3, #1
 800a1d0:	663b      	str	r3, [r7, #96]	; 0x60
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	3308      	adds	r3, #8
 800a1d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1da:	643a      	str	r2, [r7, #64]	; 0x40
 800a1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a1e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1e2:	e841 2300 	strex	r3, r2, [r1]
 800a1e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1e5      	bne.n	800a1ba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2220      	movs	r2, #32
 800a1f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d018      	beq.n	800a242 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a216:	6a3b      	ldr	r3, [r7, #32]
 800a218:	e853 3f00 	ldrex	r3, [r3]
 800a21c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a224:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	461a      	mov	r2, r3
 800a22c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a22e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a230:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a232:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a236:	e841 2300 	strex	r3, r2, [r1]
 800a23a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1e6      	bne.n	800a210 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a246:	2b01      	cmp	r3, #1
 800a248:	d12e      	bne.n	800a2a8 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	e853 3f00 	ldrex	r3, [r3]
 800a25c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	f023 0310 	bic.w	r3, r3, #16
 800a264:	65bb      	str	r3, [r7, #88]	; 0x58
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	461a      	mov	r2, r3
 800a26c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a26e:	61bb      	str	r3, [r7, #24]
 800a270:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a272:	6979      	ldr	r1, [r7, #20]
 800a274:	69ba      	ldr	r2, [r7, #24]
 800a276:	e841 2300 	strex	r3, r2, [r1]
 800a27a:	613b      	str	r3, [r7, #16]
   return(result);
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1e6      	bne.n	800a250 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	69db      	ldr	r3, [r3, #28]
 800a288:	f003 0310 	and.w	r3, r3, #16
 800a28c:	2b10      	cmp	r3, #16
 800a28e:	d103      	bne.n	800a298 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2210      	movs	r2, #16
 800a296:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a29e:	4619      	mov	r1, r3
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f7ff f94f 	bl	8009544 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a2a6:	e00b      	b.n	800a2c0 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f7f8 ffd5 	bl	8003258 <HAL_UART_RxCpltCallback>
}
 800a2ae:	e007      	b.n	800a2c0 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	699a      	ldr	r2, [r3, #24]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f042 0208 	orr.w	r2, r2, #8
 800a2be:	619a      	str	r2, [r3, #24]
}
 800a2c0:	bf00      	nop
 800a2c2:	3770      	adds	r7, #112	; 0x70
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b083      	sub	sp, #12
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <malloc>:
 800a2dc:	4b02      	ldr	r3, [pc, #8]	; (800a2e8 <malloc+0xc>)
 800a2de:	4601      	mov	r1, r0
 800a2e0:	6818      	ldr	r0, [r3, #0]
 800a2e2:	f000 b82b 	b.w	800a33c <_malloc_r>
 800a2e6:	bf00      	nop
 800a2e8:	20000268 	.word	0x20000268

0800a2ec <free>:
 800a2ec:	4b02      	ldr	r3, [pc, #8]	; (800a2f8 <free+0xc>)
 800a2ee:	4601      	mov	r1, r0
 800a2f0:	6818      	ldr	r0, [r3, #0]
 800a2f2:	f002 bbab 	b.w	800ca4c <_free_r>
 800a2f6:	bf00      	nop
 800a2f8:	20000268 	.word	0x20000268

0800a2fc <sbrk_aligned>:
 800a2fc:	b570      	push	{r4, r5, r6, lr}
 800a2fe:	4e0e      	ldr	r6, [pc, #56]	; (800a338 <sbrk_aligned+0x3c>)
 800a300:	460c      	mov	r4, r1
 800a302:	6831      	ldr	r1, [r6, #0]
 800a304:	4605      	mov	r5, r0
 800a306:	b911      	cbnz	r1, 800a30e <sbrk_aligned+0x12>
 800a308:	f001 fcc2 	bl	800bc90 <_sbrk_r>
 800a30c:	6030      	str	r0, [r6, #0]
 800a30e:	4621      	mov	r1, r4
 800a310:	4628      	mov	r0, r5
 800a312:	f001 fcbd 	bl	800bc90 <_sbrk_r>
 800a316:	1c43      	adds	r3, r0, #1
 800a318:	d00a      	beq.n	800a330 <sbrk_aligned+0x34>
 800a31a:	1cc4      	adds	r4, r0, #3
 800a31c:	f024 0403 	bic.w	r4, r4, #3
 800a320:	42a0      	cmp	r0, r4
 800a322:	d007      	beq.n	800a334 <sbrk_aligned+0x38>
 800a324:	1a21      	subs	r1, r4, r0
 800a326:	4628      	mov	r0, r5
 800a328:	f001 fcb2 	bl	800bc90 <_sbrk_r>
 800a32c:	3001      	adds	r0, #1
 800a32e:	d101      	bne.n	800a334 <sbrk_aligned+0x38>
 800a330:	f04f 34ff 	mov.w	r4, #4294967295
 800a334:	4620      	mov	r0, r4
 800a336:	bd70      	pop	{r4, r5, r6, pc}
 800a338:	20000a70 	.word	0x20000a70

0800a33c <_malloc_r>:
 800a33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a340:	1ccd      	adds	r5, r1, #3
 800a342:	f025 0503 	bic.w	r5, r5, #3
 800a346:	3508      	adds	r5, #8
 800a348:	2d0c      	cmp	r5, #12
 800a34a:	bf38      	it	cc
 800a34c:	250c      	movcc	r5, #12
 800a34e:	2d00      	cmp	r5, #0
 800a350:	4607      	mov	r7, r0
 800a352:	db01      	blt.n	800a358 <_malloc_r+0x1c>
 800a354:	42a9      	cmp	r1, r5
 800a356:	d905      	bls.n	800a364 <_malloc_r+0x28>
 800a358:	230c      	movs	r3, #12
 800a35a:	603b      	str	r3, [r7, #0]
 800a35c:	2600      	movs	r6, #0
 800a35e:	4630      	mov	r0, r6
 800a360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a364:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a438 <_malloc_r+0xfc>
 800a368:	f000 f868 	bl	800a43c <__malloc_lock>
 800a36c:	f8d8 3000 	ldr.w	r3, [r8]
 800a370:	461c      	mov	r4, r3
 800a372:	bb5c      	cbnz	r4, 800a3cc <_malloc_r+0x90>
 800a374:	4629      	mov	r1, r5
 800a376:	4638      	mov	r0, r7
 800a378:	f7ff ffc0 	bl	800a2fc <sbrk_aligned>
 800a37c:	1c43      	adds	r3, r0, #1
 800a37e:	4604      	mov	r4, r0
 800a380:	d155      	bne.n	800a42e <_malloc_r+0xf2>
 800a382:	f8d8 4000 	ldr.w	r4, [r8]
 800a386:	4626      	mov	r6, r4
 800a388:	2e00      	cmp	r6, #0
 800a38a:	d145      	bne.n	800a418 <_malloc_r+0xdc>
 800a38c:	2c00      	cmp	r4, #0
 800a38e:	d048      	beq.n	800a422 <_malloc_r+0xe6>
 800a390:	6823      	ldr	r3, [r4, #0]
 800a392:	4631      	mov	r1, r6
 800a394:	4638      	mov	r0, r7
 800a396:	eb04 0903 	add.w	r9, r4, r3
 800a39a:	f001 fc79 	bl	800bc90 <_sbrk_r>
 800a39e:	4581      	cmp	r9, r0
 800a3a0:	d13f      	bne.n	800a422 <_malloc_r+0xe6>
 800a3a2:	6821      	ldr	r1, [r4, #0]
 800a3a4:	1a6d      	subs	r5, r5, r1
 800a3a6:	4629      	mov	r1, r5
 800a3a8:	4638      	mov	r0, r7
 800a3aa:	f7ff ffa7 	bl	800a2fc <sbrk_aligned>
 800a3ae:	3001      	adds	r0, #1
 800a3b0:	d037      	beq.n	800a422 <_malloc_r+0xe6>
 800a3b2:	6823      	ldr	r3, [r4, #0]
 800a3b4:	442b      	add	r3, r5
 800a3b6:	6023      	str	r3, [r4, #0]
 800a3b8:	f8d8 3000 	ldr.w	r3, [r8]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d038      	beq.n	800a432 <_malloc_r+0xf6>
 800a3c0:	685a      	ldr	r2, [r3, #4]
 800a3c2:	42a2      	cmp	r2, r4
 800a3c4:	d12b      	bne.n	800a41e <_malloc_r+0xe2>
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	605a      	str	r2, [r3, #4]
 800a3ca:	e00f      	b.n	800a3ec <_malloc_r+0xb0>
 800a3cc:	6822      	ldr	r2, [r4, #0]
 800a3ce:	1b52      	subs	r2, r2, r5
 800a3d0:	d41f      	bmi.n	800a412 <_malloc_r+0xd6>
 800a3d2:	2a0b      	cmp	r2, #11
 800a3d4:	d917      	bls.n	800a406 <_malloc_r+0xca>
 800a3d6:	1961      	adds	r1, r4, r5
 800a3d8:	42a3      	cmp	r3, r4
 800a3da:	6025      	str	r5, [r4, #0]
 800a3dc:	bf18      	it	ne
 800a3de:	6059      	strne	r1, [r3, #4]
 800a3e0:	6863      	ldr	r3, [r4, #4]
 800a3e2:	bf08      	it	eq
 800a3e4:	f8c8 1000 	streq.w	r1, [r8]
 800a3e8:	5162      	str	r2, [r4, r5]
 800a3ea:	604b      	str	r3, [r1, #4]
 800a3ec:	4638      	mov	r0, r7
 800a3ee:	f104 060b 	add.w	r6, r4, #11
 800a3f2:	f000 f829 	bl	800a448 <__malloc_unlock>
 800a3f6:	f026 0607 	bic.w	r6, r6, #7
 800a3fa:	1d23      	adds	r3, r4, #4
 800a3fc:	1af2      	subs	r2, r6, r3
 800a3fe:	d0ae      	beq.n	800a35e <_malloc_r+0x22>
 800a400:	1b9b      	subs	r3, r3, r6
 800a402:	50a3      	str	r3, [r4, r2]
 800a404:	e7ab      	b.n	800a35e <_malloc_r+0x22>
 800a406:	42a3      	cmp	r3, r4
 800a408:	6862      	ldr	r2, [r4, #4]
 800a40a:	d1dd      	bne.n	800a3c8 <_malloc_r+0x8c>
 800a40c:	f8c8 2000 	str.w	r2, [r8]
 800a410:	e7ec      	b.n	800a3ec <_malloc_r+0xb0>
 800a412:	4623      	mov	r3, r4
 800a414:	6864      	ldr	r4, [r4, #4]
 800a416:	e7ac      	b.n	800a372 <_malloc_r+0x36>
 800a418:	4634      	mov	r4, r6
 800a41a:	6876      	ldr	r6, [r6, #4]
 800a41c:	e7b4      	b.n	800a388 <_malloc_r+0x4c>
 800a41e:	4613      	mov	r3, r2
 800a420:	e7cc      	b.n	800a3bc <_malloc_r+0x80>
 800a422:	230c      	movs	r3, #12
 800a424:	603b      	str	r3, [r7, #0]
 800a426:	4638      	mov	r0, r7
 800a428:	f000 f80e 	bl	800a448 <__malloc_unlock>
 800a42c:	e797      	b.n	800a35e <_malloc_r+0x22>
 800a42e:	6025      	str	r5, [r4, #0]
 800a430:	e7dc      	b.n	800a3ec <_malloc_r+0xb0>
 800a432:	605b      	str	r3, [r3, #4]
 800a434:	deff      	udf	#255	; 0xff
 800a436:	bf00      	nop
 800a438:	20000a6c 	.word	0x20000a6c

0800a43c <__malloc_lock>:
 800a43c:	4801      	ldr	r0, [pc, #4]	; (800a444 <__malloc_lock+0x8>)
 800a43e:	f001 bc73 	b.w	800bd28 <__retarget_lock_acquire_recursive>
 800a442:	bf00      	nop
 800a444:	20000bb4 	.word	0x20000bb4

0800a448 <__malloc_unlock>:
 800a448:	4801      	ldr	r0, [pc, #4]	; (800a450 <__malloc_unlock+0x8>)
 800a44a:	f001 bc6e 	b.w	800bd2a <__retarget_lock_release_recursive>
 800a44e:	bf00      	nop
 800a450:	20000bb4 	.word	0x20000bb4

0800a454 <realloc>:
 800a454:	4b02      	ldr	r3, [pc, #8]	; (800a460 <realloc+0xc>)
 800a456:	460a      	mov	r2, r1
 800a458:	4601      	mov	r1, r0
 800a45a:	6818      	ldr	r0, [r3, #0]
 800a45c:	f000 b802 	b.w	800a464 <_realloc_r>
 800a460:	20000268 	.word	0x20000268

0800a464 <_realloc_r>:
 800a464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a468:	4680      	mov	r8, r0
 800a46a:	4614      	mov	r4, r2
 800a46c:	460e      	mov	r6, r1
 800a46e:	b921      	cbnz	r1, 800a47a <_realloc_r+0x16>
 800a470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a474:	4611      	mov	r1, r2
 800a476:	f7ff bf61 	b.w	800a33c <_malloc_r>
 800a47a:	b92a      	cbnz	r2, 800a488 <_realloc_r+0x24>
 800a47c:	f002 fae6 	bl	800ca4c <_free_r>
 800a480:	4625      	mov	r5, r4
 800a482:	4628      	mov	r0, r5
 800a484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a488:	f003 fb43 	bl	800db12 <_malloc_usable_size_r>
 800a48c:	4284      	cmp	r4, r0
 800a48e:	4607      	mov	r7, r0
 800a490:	d802      	bhi.n	800a498 <_realloc_r+0x34>
 800a492:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a496:	d812      	bhi.n	800a4be <_realloc_r+0x5a>
 800a498:	4621      	mov	r1, r4
 800a49a:	4640      	mov	r0, r8
 800a49c:	f7ff ff4e 	bl	800a33c <_malloc_r>
 800a4a0:	4605      	mov	r5, r0
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d0ed      	beq.n	800a482 <_realloc_r+0x1e>
 800a4a6:	42bc      	cmp	r4, r7
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	4631      	mov	r1, r6
 800a4ac:	bf28      	it	cs
 800a4ae:	463a      	movcs	r2, r7
 800a4b0:	f001 fc3c 	bl	800bd2c <memcpy>
 800a4b4:	4631      	mov	r1, r6
 800a4b6:	4640      	mov	r0, r8
 800a4b8:	f002 fac8 	bl	800ca4c <_free_r>
 800a4bc:	e7e1      	b.n	800a482 <_realloc_r+0x1e>
 800a4be:	4635      	mov	r5, r6
 800a4c0:	e7df      	b.n	800a482 <_realloc_r+0x1e>

0800a4c2 <sulp>:
 800a4c2:	b570      	push	{r4, r5, r6, lr}
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	460d      	mov	r5, r1
 800a4c8:	ec45 4b10 	vmov	d0, r4, r5
 800a4cc:	4616      	mov	r6, r2
 800a4ce:	f003 f9df 	bl	800d890 <__ulp>
 800a4d2:	ec51 0b10 	vmov	r0, r1, d0
 800a4d6:	b17e      	cbz	r6, 800a4f8 <sulp+0x36>
 800a4d8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a4dc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	dd09      	ble.n	800a4f8 <sulp+0x36>
 800a4e4:	051b      	lsls	r3, r3, #20
 800a4e6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a4ea:	2400      	movs	r4, #0
 800a4ec:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a4f0:	4622      	mov	r2, r4
 800a4f2:	462b      	mov	r3, r5
 800a4f4:	f7f6 f890 	bl	8000618 <__aeabi_dmul>
 800a4f8:	bd70      	pop	{r4, r5, r6, pc}
 800a4fa:	0000      	movs	r0, r0
 800a4fc:	0000      	movs	r0, r0
	...

0800a500 <_strtod_l>:
 800a500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a504:	ed2d 8b02 	vpush	{d8}
 800a508:	b09b      	sub	sp, #108	; 0x6c
 800a50a:	4604      	mov	r4, r0
 800a50c:	9213      	str	r2, [sp, #76]	; 0x4c
 800a50e:	2200      	movs	r2, #0
 800a510:	9216      	str	r2, [sp, #88]	; 0x58
 800a512:	460d      	mov	r5, r1
 800a514:	f04f 0800 	mov.w	r8, #0
 800a518:	f04f 0900 	mov.w	r9, #0
 800a51c:	460a      	mov	r2, r1
 800a51e:	9215      	str	r2, [sp, #84]	; 0x54
 800a520:	7811      	ldrb	r1, [r2, #0]
 800a522:	292b      	cmp	r1, #43	; 0x2b
 800a524:	d04c      	beq.n	800a5c0 <_strtod_l+0xc0>
 800a526:	d83a      	bhi.n	800a59e <_strtod_l+0x9e>
 800a528:	290d      	cmp	r1, #13
 800a52a:	d834      	bhi.n	800a596 <_strtod_l+0x96>
 800a52c:	2908      	cmp	r1, #8
 800a52e:	d834      	bhi.n	800a59a <_strtod_l+0x9a>
 800a530:	2900      	cmp	r1, #0
 800a532:	d03d      	beq.n	800a5b0 <_strtod_l+0xb0>
 800a534:	2200      	movs	r2, #0
 800a536:	920a      	str	r2, [sp, #40]	; 0x28
 800a538:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a53a:	7832      	ldrb	r2, [r6, #0]
 800a53c:	2a30      	cmp	r2, #48	; 0x30
 800a53e:	f040 80b4 	bne.w	800a6aa <_strtod_l+0x1aa>
 800a542:	7872      	ldrb	r2, [r6, #1]
 800a544:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a548:	2a58      	cmp	r2, #88	; 0x58
 800a54a:	d170      	bne.n	800a62e <_strtod_l+0x12e>
 800a54c:	9302      	str	r3, [sp, #8]
 800a54e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a550:	9301      	str	r3, [sp, #4]
 800a552:	ab16      	add	r3, sp, #88	; 0x58
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	4a8e      	ldr	r2, [pc, #568]	; (800a790 <_strtod_l+0x290>)
 800a558:	ab17      	add	r3, sp, #92	; 0x5c
 800a55a:	a915      	add	r1, sp, #84	; 0x54
 800a55c:	4620      	mov	r0, r4
 800a55e:	f002 fb29 	bl	800cbb4 <__gethex>
 800a562:	f010 070f 	ands.w	r7, r0, #15
 800a566:	4605      	mov	r5, r0
 800a568:	d005      	beq.n	800a576 <_strtod_l+0x76>
 800a56a:	2f06      	cmp	r7, #6
 800a56c:	d12a      	bne.n	800a5c4 <_strtod_l+0xc4>
 800a56e:	3601      	adds	r6, #1
 800a570:	2300      	movs	r3, #0
 800a572:	9615      	str	r6, [sp, #84]	; 0x54
 800a574:	930a      	str	r3, [sp, #40]	; 0x28
 800a576:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f040 857f 	bne.w	800b07c <_strtod_l+0xb7c>
 800a57e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a580:	b1db      	cbz	r3, 800a5ba <_strtod_l+0xba>
 800a582:	4642      	mov	r2, r8
 800a584:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a588:	ec43 2b10 	vmov	d0, r2, r3
 800a58c:	b01b      	add	sp, #108	; 0x6c
 800a58e:	ecbd 8b02 	vpop	{d8}
 800a592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a596:	2920      	cmp	r1, #32
 800a598:	d1cc      	bne.n	800a534 <_strtod_l+0x34>
 800a59a:	3201      	adds	r2, #1
 800a59c:	e7bf      	b.n	800a51e <_strtod_l+0x1e>
 800a59e:	292d      	cmp	r1, #45	; 0x2d
 800a5a0:	d1c8      	bne.n	800a534 <_strtod_l+0x34>
 800a5a2:	2101      	movs	r1, #1
 800a5a4:	910a      	str	r1, [sp, #40]	; 0x28
 800a5a6:	1c51      	adds	r1, r2, #1
 800a5a8:	9115      	str	r1, [sp, #84]	; 0x54
 800a5aa:	7852      	ldrb	r2, [r2, #1]
 800a5ac:	2a00      	cmp	r2, #0
 800a5ae:	d1c3      	bne.n	800a538 <_strtod_l+0x38>
 800a5b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a5b2:	9515      	str	r5, [sp, #84]	; 0x54
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f040 855f 	bne.w	800b078 <_strtod_l+0xb78>
 800a5ba:	4642      	mov	r2, r8
 800a5bc:	464b      	mov	r3, r9
 800a5be:	e7e3      	b.n	800a588 <_strtod_l+0x88>
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	e7ef      	b.n	800a5a4 <_strtod_l+0xa4>
 800a5c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a5c6:	b13a      	cbz	r2, 800a5d8 <_strtod_l+0xd8>
 800a5c8:	2135      	movs	r1, #53	; 0x35
 800a5ca:	a818      	add	r0, sp, #96	; 0x60
 800a5cc:	f003 fa5d 	bl	800da8a <__copybits>
 800a5d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	f002 fe30 	bl	800d238 <_Bfree>
 800a5d8:	3f01      	subs	r7, #1
 800a5da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a5dc:	2f04      	cmp	r7, #4
 800a5de:	d806      	bhi.n	800a5ee <_strtod_l+0xee>
 800a5e0:	e8df f007 	tbb	[pc, r7]
 800a5e4:	201d0314 	.word	0x201d0314
 800a5e8:	14          	.byte	0x14
 800a5e9:	00          	.byte	0x00
 800a5ea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a5ee:	05e9      	lsls	r1, r5, #23
 800a5f0:	bf48      	it	mi
 800a5f2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a5f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a5fa:	0d1b      	lsrs	r3, r3, #20
 800a5fc:	051b      	lsls	r3, r3, #20
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1b9      	bne.n	800a576 <_strtod_l+0x76>
 800a602:	f001 fb67 	bl	800bcd4 <__errno>
 800a606:	2322      	movs	r3, #34	; 0x22
 800a608:	6003      	str	r3, [r0, #0]
 800a60a:	e7b4      	b.n	800a576 <_strtod_l+0x76>
 800a60c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a610:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a614:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a618:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a61c:	e7e7      	b.n	800a5ee <_strtod_l+0xee>
 800a61e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a798 <_strtod_l+0x298>
 800a622:	e7e4      	b.n	800a5ee <_strtod_l+0xee>
 800a624:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a628:	f04f 38ff 	mov.w	r8, #4294967295
 800a62c:	e7df      	b.n	800a5ee <_strtod_l+0xee>
 800a62e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a630:	1c5a      	adds	r2, r3, #1
 800a632:	9215      	str	r2, [sp, #84]	; 0x54
 800a634:	785b      	ldrb	r3, [r3, #1]
 800a636:	2b30      	cmp	r3, #48	; 0x30
 800a638:	d0f9      	beq.n	800a62e <_strtod_l+0x12e>
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d09b      	beq.n	800a576 <_strtod_l+0x76>
 800a63e:	2301      	movs	r3, #1
 800a640:	f04f 0a00 	mov.w	sl, #0
 800a644:	9304      	str	r3, [sp, #16]
 800a646:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a648:	930b      	str	r3, [sp, #44]	; 0x2c
 800a64a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a64e:	46d3      	mov	fp, sl
 800a650:	220a      	movs	r2, #10
 800a652:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a654:	7806      	ldrb	r6, [r0, #0]
 800a656:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a65a:	b2d9      	uxtb	r1, r3
 800a65c:	2909      	cmp	r1, #9
 800a65e:	d926      	bls.n	800a6ae <_strtod_l+0x1ae>
 800a660:	494c      	ldr	r1, [pc, #304]	; (800a794 <_strtod_l+0x294>)
 800a662:	2201      	movs	r2, #1
 800a664:	f001 fac9 	bl	800bbfa <strncmp>
 800a668:	2800      	cmp	r0, #0
 800a66a:	d030      	beq.n	800a6ce <_strtod_l+0x1ce>
 800a66c:	2000      	movs	r0, #0
 800a66e:	4632      	mov	r2, r6
 800a670:	9005      	str	r0, [sp, #20]
 800a672:	465e      	mov	r6, fp
 800a674:	4603      	mov	r3, r0
 800a676:	2a65      	cmp	r2, #101	; 0x65
 800a678:	d001      	beq.n	800a67e <_strtod_l+0x17e>
 800a67a:	2a45      	cmp	r2, #69	; 0x45
 800a67c:	d113      	bne.n	800a6a6 <_strtod_l+0x1a6>
 800a67e:	b91e      	cbnz	r6, 800a688 <_strtod_l+0x188>
 800a680:	9a04      	ldr	r2, [sp, #16]
 800a682:	4302      	orrs	r2, r0
 800a684:	d094      	beq.n	800a5b0 <_strtod_l+0xb0>
 800a686:	2600      	movs	r6, #0
 800a688:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a68a:	1c6a      	adds	r2, r5, #1
 800a68c:	9215      	str	r2, [sp, #84]	; 0x54
 800a68e:	786a      	ldrb	r2, [r5, #1]
 800a690:	2a2b      	cmp	r2, #43	; 0x2b
 800a692:	d074      	beq.n	800a77e <_strtod_l+0x27e>
 800a694:	2a2d      	cmp	r2, #45	; 0x2d
 800a696:	d078      	beq.n	800a78a <_strtod_l+0x28a>
 800a698:	f04f 0c00 	mov.w	ip, #0
 800a69c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a6a0:	2909      	cmp	r1, #9
 800a6a2:	d97f      	bls.n	800a7a4 <_strtod_l+0x2a4>
 800a6a4:	9515      	str	r5, [sp, #84]	; 0x54
 800a6a6:	2700      	movs	r7, #0
 800a6a8:	e09e      	b.n	800a7e8 <_strtod_l+0x2e8>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	e7c8      	b.n	800a640 <_strtod_l+0x140>
 800a6ae:	f1bb 0f08 	cmp.w	fp, #8
 800a6b2:	bfd8      	it	le
 800a6b4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a6b6:	f100 0001 	add.w	r0, r0, #1
 800a6ba:	bfda      	itte	le
 800a6bc:	fb02 3301 	mlale	r3, r2, r1, r3
 800a6c0:	9309      	strle	r3, [sp, #36]	; 0x24
 800a6c2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a6c6:	f10b 0b01 	add.w	fp, fp, #1
 800a6ca:	9015      	str	r0, [sp, #84]	; 0x54
 800a6cc:	e7c1      	b.n	800a652 <_strtod_l+0x152>
 800a6ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6d0:	1c5a      	adds	r2, r3, #1
 800a6d2:	9215      	str	r2, [sp, #84]	; 0x54
 800a6d4:	785a      	ldrb	r2, [r3, #1]
 800a6d6:	f1bb 0f00 	cmp.w	fp, #0
 800a6da:	d037      	beq.n	800a74c <_strtod_l+0x24c>
 800a6dc:	9005      	str	r0, [sp, #20]
 800a6de:	465e      	mov	r6, fp
 800a6e0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a6e4:	2b09      	cmp	r3, #9
 800a6e6:	d912      	bls.n	800a70e <_strtod_l+0x20e>
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e7c4      	b.n	800a676 <_strtod_l+0x176>
 800a6ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6ee:	1c5a      	adds	r2, r3, #1
 800a6f0:	9215      	str	r2, [sp, #84]	; 0x54
 800a6f2:	785a      	ldrb	r2, [r3, #1]
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	2a30      	cmp	r2, #48	; 0x30
 800a6f8:	d0f8      	beq.n	800a6ec <_strtod_l+0x1ec>
 800a6fa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a6fe:	2b08      	cmp	r3, #8
 800a700:	f200 84c1 	bhi.w	800b086 <_strtod_l+0xb86>
 800a704:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a706:	9005      	str	r0, [sp, #20]
 800a708:	2000      	movs	r0, #0
 800a70a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a70c:	4606      	mov	r6, r0
 800a70e:	3a30      	subs	r2, #48	; 0x30
 800a710:	f100 0301 	add.w	r3, r0, #1
 800a714:	d014      	beq.n	800a740 <_strtod_l+0x240>
 800a716:	9905      	ldr	r1, [sp, #20]
 800a718:	4419      	add	r1, r3
 800a71a:	9105      	str	r1, [sp, #20]
 800a71c:	4633      	mov	r3, r6
 800a71e:	eb00 0c06 	add.w	ip, r0, r6
 800a722:	210a      	movs	r1, #10
 800a724:	4563      	cmp	r3, ip
 800a726:	d113      	bne.n	800a750 <_strtod_l+0x250>
 800a728:	1833      	adds	r3, r6, r0
 800a72a:	2b08      	cmp	r3, #8
 800a72c:	f106 0601 	add.w	r6, r6, #1
 800a730:	4406      	add	r6, r0
 800a732:	dc1a      	bgt.n	800a76a <_strtod_l+0x26a>
 800a734:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a736:	230a      	movs	r3, #10
 800a738:	fb03 2301 	mla	r3, r3, r1, r2
 800a73c:	9309      	str	r3, [sp, #36]	; 0x24
 800a73e:	2300      	movs	r3, #0
 800a740:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a742:	1c51      	adds	r1, r2, #1
 800a744:	9115      	str	r1, [sp, #84]	; 0x54
 800a746:	7852      	ldrb	r2, [r2, #1]
 800a748:	4618      	mov	r0, r3
 800a74a:	e7c9      	b.n	800a6e0 <_strtod_l+0x1e0>
 800a74c:	4658      	mov	r0, fp
 800a74e:	e7d2      	b.n	800a6f6 <_strtod_l+0x1f6>
 800a750:	2b08      	cmp	r3, #8
 800a752:	f103 0301 	add.w	r3, r3, #1
 800a756:	dc03      	bgt.n	800a760 <_strtod_l+0x260>
 800a758:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a75a:	434f      	muls	r7, r1
 800a75c:	9709      	str	r7, [sp, #36]	; 0x24
 800a75e:	e7e1      	b.n	800a724 <_strtod_l+0x224>
 800a760:	2b10      	cmp	r3, #16
 800a762:	bfd8      	it	le
 800a764:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a768:	e7dc      	b.n	800a724 <_strtod_l+0x224>
 800a76a:	2e10      	cmp	r6, #16
 800a76c:	bfdc      	itt	le
 800a76e:	230a      	movle	r3, #10
 800a770:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a774:	e7e3      	b.n	800a73e <_strtod_l+0x23e>
 800a776:	2300      	movs	r3, #0
 800a778:	9305      	str	r3, [sp, #20]
 800a77a:	2301      	movs	r3, #1
 800a77c:	e780      	b.n	800a680 <_strtod_l+0x180>
 800a77e:	f04f 0c00 	mov.w	ip, #0
 800a782:	1caa      	adds	r2, r5, #2
 800a784:	9215      	str	r2, [sp, #84]	; 0x54
 800a786:	78aa      	ldrb	r2, [r5, #2]
 800a788:	e788      	b.n	800a69c <_strtod_l+0x19c>
 800a78a:	f04f 0c01 	mov.w	ip, #1
 800a78e:	e7f8      	b.n	800a782 <_strtod_l+0x282>
 800a790:	0800e6d4 	.word	0x0800e6d4
 800a794:	0800e6d0 	.word	0x0800e6d0
 800a798:	7ff00000 	.word	0x7ff00000
 800a79c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a79e:	1c51      	adds	r1, r2, #1
 800a7a0:	9115      	str	r1, [sp, #84]	; 0x54
 800a7a2:	7852      	ldrb	r2, [r2, #1]
 800a7a4:	2a30      	cmp	r2, #48	; 0x30
 800a7a6:	d0f9      	beq.n	800a79c <_strtod_l+0x29c>
 800a7a8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a7ac:	2908      	cmp	r1, #8
 800a7ae:	f63f af7a 	bhi.w	800a6a6 <_strtod_l+0x1a6>
 800a7b2:	3a30      	subs	r2, #48	; 0x30
 800a7b4:	9208      	str	r2, [sp, #32]
 800a7b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a7b8:	920c      	str	r2, [sp, #48]	; 0x30
 800a7ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a7bc:	1c57      	adds	r7, r2, #1
 800a7be:	9715      	str	r7, [sp, #84]	; 0x54
 800a7c0:	7852      	ldrb	r2, [r2, #1]
 800a7c2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a7c6:	f1be 0f09 	cmp.w	lr, #9
 800a7ca:	d938      	bls.n	800a83e <_strtod_l+0x33e>
 800a7cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a7ce:	1a7f      	subs	r7, r7, r1
 800a7d0:	2f08      	cmp	r7, #8
 800a7d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a7d6:	dc03      	bgt.n	800a7e0 <_strtod_l+0x2e0>
 800a7d8:	9908      	ldr	r1, [sp, #32]
 800a7da:	428f      	cmp	r7, r1
 800a7dc:	bfa8      	it	ge
 800a7de:	460f      	movge	r7, r1
 800a7e0:	f1bc 0f00 	cmp.w	ip, #0
 800a7e4:	d000      	beq.n	800a7e8 <_strtod_l+0x2e8>
 800a7e6:	427f      	negs	r7, r7
 800a7e8:	2e00      	cmp	r6, #0
 800a7ea:	d14f      	bne.n	800a88c <_strtod_l+0x38c>
 800a7ec:	9904      	ldr	r1, [sp, #16]
 800a7ee:	4301      	orrs	r1, r0
 800a7f0:	f47f aec1 	bne.w	800a576 <_strtod_l+0x76>
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f47f aedb 	bne.w	800a5b0 <_strtod_l+0xb0>
 800a7fa:	2a69      	cmp	r2, #105	; 0x69
 800a7fc:	d029      	beq.n	800a852 <_strtod_l+0x352>
 800a7fe:	dc26      	bgt.n	800a84e <_strtod_l+0x34e>
 800a800:	2a49      	cmp	r2, #73	; 0x49
 800a802:	d026      	beq.n	800a852 <_strtod_l+0x352>
 800a804:	2a4e      	cmp	r2, #78	; 0x4e
 800a806:	f47f aed3 	bne.w	800a5b0 <_strtod_l+0xb0>
 800a80a:	499b      	ldr	r1, [pc, #620]	; (800aa78 <_strtod_l+0x578>)
 800a80c:	a815      	add	r0, sp, #84	; 0x54
 800a80e:	f002 fc11 	bl	800d034 <__match>
 800a812:	2800      	cmp	r0, #0
 800a814:	f43f aecc 	beq.w	800a5b0 <_strtod_l+0xb0>
 800a818:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	2b28      	cmp	r3, #40	; 0x28
 800a81e:	d12f      	bne.n	800a880 <_strtod_l+0x380>
 800a820:	4996      	ldr	r1, [pc, #600]	; (800aa7c <_strtod_l+0x57c>)
 800a822:	aa18      	add	r2, sp, #96	; 0x60
 800a824:	a815      	add	r0, sp, #84	; 0x54
 800a826:	f002 fc19 	bl	800d05c <__hexnan>
 800a82a:	2805      	cmp	r0, #5
 800a82c:	d128      	bne.n	800a880 <_strtod_l+0x380>
 800a82e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a830:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a834:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a838:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a83c:	e69b      	b.n	800a576 <_strtod_l+0x76>
 800a83e:	9f08      	ldr	r7, [sp, #32]
 800a840:	210a      	movs	r1, #10
 800a842:	fb01 2107 	mla	r1, r1, r7, r2
 800a846:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a84a:	9208      	str	r2, [sp, #32]
 800a84c:	e7b5      	b.n	800a7ba <_strtod_l+0x2ba>
 800a84e:	2a6e      	cmp	r2, #110	; 0x6e
 800a850:	e7d9      	b.n	800a806 <_strtod_l+0x306>
 800a852:	498b      	ldr	r1, [pc, #556]	; (800aa80 <_strtod_l+0x580>)
 800a854:	a815      	add	r0, sp, #84	; 0x54
 800a856:	f002 fbed 	bl	800d034 <__match>
 800a85a:	2800      	cmp	r0, #0
 800a85c:	f43f aea8 	beq.w	800a5b0 <_strtod_l+0xb0>
 800a860:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a862:	4988      	ldr	r1, [pc, #544]	; (800aa84 <_strtod_l+0x584>)
 800a864:	3b01      	subs	r3, #1
 800a866:	a815      	add	r0, sp, #84	; 0x54
 800a868:	9315      	str	r3, [sp, #84]	; 0x54
 800a86a:	f002 fbe3 	bl	800d034 <__match>
 800a86e:	b910      	cbnz	r0, 800a876 <_strtod_l+0x376>
 800a870:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a872:	3301      	adds	r3, #1
 800a874:	9315      	str	r3, [sp, #84]	; 0x54
 800a876:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800aa94 <_strtod_l+0x594>
 800a87a:	f04f 0800 	mov.w	r8, #0
 800a87e:	e67a      	b.n	800a576 <_strtod_l+0x76>
 800a880:	4881      	ldr	r0, [pc, #516]	; (800aa88 <_strtod_l+0x588>)
 800a882:	f001 fa61 	bl	800bd48 <nan>
 800a886:	ec59 8b10 	vmov	r8, r9, d0
 800a88a:	e674      	b.n	800a576 <_strtod_l+0x76>
 800a88c:	9b05      	ldr	r3, [sp, #20]
 800a88e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a890:	1afb      	subs	r3, r7, r3
 800a892:	f1bb 0f00 	cmp.w	fp, #0
 800a896:	bf08      	it	eq
 800a898:	46b3      	moveq	fp, r6
 800a89a:	2e10      	cmp	r6, #16
 800a89c:	9308      	str	r3, [sp, #32]
 800a89e:	4635      	mov	r5, r6
 800a8a0:	bfa8      	it	ge
 800a8a2:	2510      	movge	r5, #16
 800a8a4:	f7f5 fe3e 	bl	8000524 <__aeabi_ui2d>
 800a8a8:	2e09      	cmp	r6, #9
 800a8aa:	4680      	mov	r8, r0
 800a8ac:	4689      	mov	r9, r1
 800a8ae:	dd13      	ble.n	800a8d8 <_strtod_l+0x3d8>
 800a8b0:	4b76      	ldr	r3, [pc, #472]	; (800aa8c <_strtod_l+0x58c>)
 800a8b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a8b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a8ba:	f7f5 fead 	bl	8000618 <__aeabi_dmul>
 800a8be:	4680      	mov	r8, r0
 800a8c0:	4650      	mov	r0, sl
 800a8c2:	4689      	mov	r9, r1
 800a8c4:	f7f5 fe2e 	bl	8000524 <__aeabi_ui2d>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4640      	mov	r0, r8
 800a8ce:	4649      	mov	r1, r9
 800a8d0:	f7f5 fcec 	bl	80002ac <__adddf3>
 800a8d4:	4680      	mov	r8, r0
 800a8d6:	4689      	mov	r9, r1
 800a8d8:	2e0f      	cmp	r6, #15
 800a8da:	dc38      	bgt.n	800a94e <_strtod_l+0x44e>
 800a8dc:	9b08      	ldr	r3, [sp, #32]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	f43f ae49 	beq.w	800a576 <_strtod_l+0x76>
 800a8e4:	dd24      	ble.n	800a930 <_strtod_l+0x430>
 800a8e6:	2b16      	cmp	r3, #22
 800a8e8:	dc0b      	bgt.n	800a902 <_strtod_l+0x402>
 800a8ea:	4968      	ldr	r1, [pc, #416]	; (800aa8c <_strtod_l+0x58c>)
 800a8ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a8f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8f4:	4642      	mov	r2, r8
 800a8f6:	464b      	mov	r3, r9
 800a8f8:	f7f5 fe8e 	bl	8000618 <__aeabi_dmul>
 800a8fc:	4680      	mov	r8, r0
 800a8fe:	4689      	mov	r9, r1
 800a900:	e639      	b.n	800a576 <_strtod_l+0x76>
 800a902:	9a08      	ldr	r2, [sp, #32]
 800a904:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a908:	4293      	cmp	r3, r2
 800a90a:	db20      	blt.n	800a94e <_strtod_l+0x44e>
 800a90c:	4c5f      	ldr	r4, [pc, #380]	; (800aa8c <_strtod_l+0x58c>)
 800a90e:	f1c6 060f 	rsb	r6, r6, #15
 800a912:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a916:	4642      	mov	r2, r8
 800a918:	464b      	mov	r3, r9
 800a91a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a91e:	f7f5 fe7b 	bl	8000618 <__aeabi_dmul>
 800a922:	9b08      	ldr	r3, [sp, #32]
 800a924:	1b9e      	subs	r6, r3, r6
 800a926:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a92a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a92e:	e7e3      	b.n	800a8f8 <_strtod_l+0x3f8>
 800a930:	9b08      	ldr	r3, [sp, #32]
 800a932:	3316      	adds	r3, #22
 800a934:	db0b      	blt.n	800a94e <_strtod_l+0x44e>
 800a936:	9b05      	ldr	r3, [sp, #20]
 800a938:	1bdf      	subs	r7, r3, r7
 800a93a:	4b54      	ldr	r3, [pc, #336]	; (800aa8c <_strtod_l+0x58c>)
 800a93c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a940:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a944:	4640      	mov	r0, r8
 800a946:	4649      	mov	r1, r9
 800a948:	f7f5 ff90 	bl	800086c <__aeabi_ddiv>
 800a94c:	e7d6      	b.n	800a8fc <_strtod_l+0x3fc>
 800a94e:	9b08      	ldr	r3, [sp, #32]
 800a950:	1b75      	subs	r5, r6, r5
 800a952:	441d      	add	r5, r3
 800a954:	2d00      	cmp	r5, #0
 800a956:	dd70      	ble.n	800aa3a <_strtod_l+0x53a>
 800a958:	f015 030f 	ands.w	r3, r5, #15
 800a95c:	d00a      	beq.n	800a974 <_strtod_l+0x474>
 800a95e:	494b      	ldr	r1, [pc, #300]	; (800aa8c <_strtod_l+0x58c>)
 800a960:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a964:	4642      	mov	r2, r8
 800a966:	464b      	mov	r3, r9
 800a968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a96c:	f7f5 fe54 	bl	8000618 <__aeabi_dmul>
 800a970:	4680      	mov	r8, r0
 800a972:	4689      	mov	r9, r1
 800a974:	f035 050f 	bics.w	r5, r5, #15
 800a978:	d04d      	beq.n	800aa16 <_strtod_l+0x516>
 800a97a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a97e:	dd22      	ble.n	800a9c6 <_strtod_l+0x4c6>
 800a980:	2500      	movs	r5, #0
 800a982:	46ab      	mov	fp, r5
 800a984:	9509      	str	r5, [sp, #36]	; 0x24
 800a986:	9505      	str	r5, [sp, #20]
 800a988:	2322      	movs	r3, #34	; 0x22
 800a98a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800aa94 <_strtod_l+0x594>
 800a98e:	6023      	str	r3, [r4, #0]
 800a990:	f04f 0800 	mov.w	r8, #0
 800a994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a996:	2b00      	cmp	r3, #0
 800a998:	f43f aded 	beq.w	800a576 <_strtod_l+0x76>
 800a99c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a99e:	4620      	mov	r0, r4
 800a9a0:	f002 fc4a 	bl	800d238 <_Bfree>
 800a9a4:	9905      	ldr	r1, [sp, #20]
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	f002 fc46 	bl	800d238 <_Bfree>
 800a9ac:	4659      	mov	r1, fp
 800a9ae:	4620      	mov	r0, r4
 800a9b0:	f002 fc42 	bl	800d238 <_Bfree>
 800a9b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f002 fc3e 	bl	800d238 <_Bfree>
 800a9bc:	4629      	mov	r1, r5
 800a9be:	4620      	mov	r0, r4
 800a9c0:	f002 fc3a 	bl	800d238 <_Bfree>
 800a9c4:	e5d7      	b.n	800a576 <_strtod_l+0x76>
 800a9c6:	4b32      	ldr	r3, [pc, #200]	; (800aa90 <_strtod_l+0x590>)
 800a9c8:	9304      	str	r3, [sp, #16]
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	112d      	asrs	r5, r5, #4
 800a9ce:	4640      	mov	r0, r8
 800a9d0:	4649      	mov	r1, r9
 800a9d2:	469a      	mov	sl, r3
 800a9d4:	2d01      	cmp	r5, #1
 800a9d6:	dc21      	bgt.n	800aa1c <_strtod_l+0x51c>
 800a9d8:	b10b      	cbz	r3, 800a9de <_strtod_l+0x4de>
 800a9da:	4680      	mov	r8, r0
 800a9dc:	4689      	mov	r9, r1
 800a9de:	492c      	ldr	r1, [pc, #176]	; (800aa90 <_strtod_l+0x590>)
 800a9e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a9e4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a9e8:	4642      	mov	r2, r8
 800a9ea:	464b      	mov	r3, r9
 800a9ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9f0:	f7f5 fe12 	bl	8000618 <__aeabi_dmul>
 800a9f4:	4b27      	ldr	r3, [pc, #156]	; (800aa94 <_strtod_l+0x594>)
 800a9f6:	460a      	mov	r2, r1
 800a9f8:	400b      	ands	r3, r1
 800a9fa:	4927      	ldr	r1, [pc, #156]	; (800aa98 <_strtod_l+0x598>)
 800a9fc:	428b      	cmp	r3, r1
 800a9fe:	4680      	mov	r8, r0
 800aa00:	d8be      	bhi.n	800a980 <_strtod_l+0x480>
 800aa02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aa06:	428b      	cmp	r3, r1
 800aa08:	bf86      	itte	hi
 800aa0a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800aa9c <_strtod_l+0x59c>
 800aa0e:	f04f 38ff 	movhi.w	r8, #4294967295
 800aa12:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800aa16:	2300      	movs	r3, #0
 800aa18:	9304      	str	r3, [sp, #16]
 800aa1a:	e07b      	b.n	800ab14 <_strtod_l+0x614>
 800aa1c:	07ea      	lsls	r2, r5, #31
 800aa1e:	d505      	bpl.n	800aa2c <_strtod_l+0x52c>
 800aa20:	9b04      	ldr	r3, [sp, #16]
 800aa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa26:	f7f5 fdf7 	bl	8000618 <__aeabi_dmul>
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	9a04      	ldr	r2, [sp, #16]
 800aa2e:	3208      	adds	r2, #8
 800aa30:	f10a 0a01 	add.w	sl, sl, #1
 800aa34:	106d      	asrs	r5, r5, #1
 800aa36:	9204      	str	r2, [sp, #16]
 800aa38:	e7cc      	b.n	800a9d4 <_strtod_l+0x4d4>
 800aa3a:	d0ec      	beq.n	800aa16 <_strtod_l+0x516>
 800aa3c:	426d      	negs	r5, r5
 800aa3e:	f015 020f 	ands.w	r2, r5, #15
 800aa42:	d00a      	beq.n	800aa5a <_strtod_l+0x55a>
 800aa44:	4b11      	ldr	r3, [pc, #68]	; (800aa8c <_strtod_l+0x58c>)
 800aa46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa4a:	4640      	mov	r0, r8
 800aa4c:	4649      	mov	r1, r9
 800aa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa52:	f7f5 ff0b 	bl	800086c <__aeabi_ddiv>
 800aa56:	4680      	mov	r8, r0
 800aa58:	4689      	mov	r9, r1
 800aa5a:	112d      	asrs	r5, r5, #4
 800aa5c:	d0db      	beq.n	800aa16 <_strtod_l+0x516>
 800aa5e:	2d1f      	cmp	r5, #31
 800aa60:	dd1e      	ble.n	800aaa0 <_strtod_l+0x5a0>
 800aa62:	2500      	movs	r5, #0
 800aa64:	46ab      	mov	fp, r5
 800aa66:	9509      	str	r5, [sp, #36]	; 0x24
 800aa68:	9505      	str	r5, [sp, #20]
 800aa6a:	2322      	movs	r3, #34	; 0x22
 800aa6c:	f04f 0800 	mov.w	r8, #0
 800aa70:	f04f 0900 	mov.w	r9, #0
 800aa74:	6023      	str	r3, [r4, #0]
 800aa76:	e78d      	b.n	800a994 <_strtod_l+0x494>
 800aa78:	0800e836 	.word	0x0800e836
 800aa7c:	0800e6e8 	.word	0x0800e6e8
 800aa80:	0800e82e 	.word	0x0800e82e
 800aa84:	0800e868 	.word	0x0800e868
 800aa88:	0800eaf8 	.word	0x0800eaf8
 800aa8c:	0800e9d8 	.word	0x0800e9d8
 800aa90:	0800e9b0 	.word	0x0800e9b0
 800aa94:	7ff00000 	.word	0x7ff00000
 800aa98:	7ca00000 	.word	0x7ca00000
 800aa9c:	7fefffff 	.word	0x7fefffff
 800aaa0:	f015 0310 	ands.w	r3, r5, #16
 800aaa4:	bf18      	it	ne
 800aaa6:	236a      	movne	r3, #106	; 0x6a
 800aaa8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800ae4c <_strtod_l+0x94c>
 800aaac:	9304      	str	r3, [sp, #16]
 800aaae:	4640      	mov	r0, r8
 800aab0:	4649      	mov	r1, r9
 800aab2:	2300      	movs	r3, #0
 800aab4:	07ea      	lsls	r2, r5, #31
 800aab6:	d504      	bpl.n	800aac2 <_strtod_l+0x5c2>
 800aab8:	e9da 2300 	ldrd	r2, r3, [sl]
 800aabc:	f7f5 fdac 	bl	8000618 <__aeabi_dmul>
 800aac0:	2301      	movs	r3, #1
 800aac2:	106d      	asrs	r5, r5, #1
 800aac4:	f10a 0a08 	add.w	sl, sl, #8
 800aac8:	d1f4      	bne.n	800aab4 <_strtod_l+0x5b4>
 800aaca:	b10b      	cbz	r3, 800aad0 <_strtod_l+0x5d0>
 800aacc:	4680      	mov	r8, r0
 800aace:	4689      	mov	r9, r1
 800aad0:	9b04      	ldr	r3, [sp, #16]
 800aad2:	b1bb      	cbz	r3, 800ab04 <_strtod_l+0x604>
 800aad4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800aad8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800aadc:	2b00      	cmp	r3, #0
 800aade:	4649      	mov	r1, r9
 800aae0:	dd10      	ble.n	800ab04 <_strtod_l+0x604>
 800aae2:	2b1f      	cmp	r3, #31
 800aae4:	f340 811e 	ble.w	800ad24 <_strtod_l+0x824>
 800aae8:	2b34      	cmp	r3, #52	; 0x34
 800aaea:	bfde      	ittt	le
 800aaec:	f04f 33ff 	movle.w	r3, #4294967295
 800aaf0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800aaf4:	4093      	lslle	r3, r2
 800aaf6:	f04f 0800 	mov.w	r8, #0
 800aafa:	bfcc      	ite	gt
 800aafc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ab00:	ea03 0901 	andle.w	r9, r3, r1
 800ab04:	2200      	movs	r2, #0
 800ab06:	2300      	movs	r3, #0
 800ab08:	4640      	mov	r0, r8
 800ab0a:	4649      	mov	r1, r9
 800ab0c:	f7f5 ffec 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d1a6      	bne.n	800aa62 <_strtod_l+0x562>
 800ab14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab16:	9300      	str	r3, [sp, #0]
 800ab18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab1a:	4633      	mov	r3, r6
 800ab1c:	465a      	mov	r2, fp
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f002 fbf2 	bl	800d308 <__s2b>
 800ab24:	9009      	str	r0, [sp, #36]	; 0x24
 800ab26:	2800      	cmp	r0, #0
 800ab28:	f43f af2a 	beq.w	800a980 <_strtod_l+0x480>
 800ab2c:	9a08      	ldr	r2, [sp, #32]
 800ab2e:	9b05      	ldr	r3, [sp, #20]
 800ab30:	2a00      	cmp	r2, #0
 800ab32:	eba3 0307 	sub.w	r3, r3, r7
 800ab36:	bfa8      	it	ge
 800ab38:	2300      	movge	r3, #0
 800ab3a:	930c      	str	r3, [sp, #48]	; 0x30
 800ab3c:	2500      	movs	r5, #0
 800ab3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ab42:	9312      	str	r3, [sp, #72]	; 0x48
 800ab44:	46ab      	mov	fp, r5
 800ab46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab48:	4620      	mov	r0, r4
 800ab4a:	6859      	ldr	r1, [r3, #4]
 800ab4c:	f002 fb34 	bl	800d1b8 <_Balloc>
 800ab50:	9005      	str	r0, [sp, #20]
 800ab52:	2800      	cmp	r0, #0
 800ab54:	f43f af18 	beq.w	800a988 <_strtod_l+0x488>
 800ab58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab5a:	691a      	ldr	r2, [r3, #16]
 800ab5c:	3202      	adds	r2, #2
 800ab5e:	f103 010c 	add.w	r1, r3, #12
 800ab62:	0092      	lsls	r2, r2, #2
 800ab64:	300c      	adds	r0, #12
 800ab66:	f001 f8e1 	bl	800bd2c <memcpy>
 800ab6a:	ec49 8b10 	vmov	d0, r8, r9
 800ab6e:	aa18      	add	r2, sp, #96	; 0x60
 800ab70:	a917      	add	r1, sp, #92	; 0x5c
 800ab72:	4620      	mov	r0, r4
 800ab74:	f002 fefc 	bl	800d970 <__d2b>
 800ab78:	ec49 8b18 	vmov	d8, r8, r9
 800ab7c:	9016      	str	r0, [sp, #88]	; 0x58
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	f43f af02 	beq.w	800a988 <_strtod_l+0x488>
 800ab84:	2101      	movs	r1, #1
 800ab86:	4620      	mov	r0, r4
 800ab88:	f002 fc56 	bl	800d438 <__i2b>
 800ab8c:	4683      	mov	fp, r0
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	f43f aefa 	beq.w	800a988 <_strtod_l+0x488>
 800ab94:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ab96:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ab98:	2e00      	cmp	r6, #0
 800ab9a:	bfab      	itete	ge
 800ab9c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800ab9e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800aba0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800aba2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800aba6:	bfac      	ite	ge
 800aba8:	eb06 0a03 	addge.w	sl, r6, r3
 800abac:	1b9f      	sublt	r7, r3, r6
 800abae:	9b04      	ldr	r3, [sp, #16]
 800abb0:	1af6      	subs	r6, r6, r3
 800abb2:	4416      	add	r6, r2
 800abb4:	4ba0      	ldr	r3, [pc, #640]	; (800ae38 <_strtod_l+0x938>)
 800abb6:	3e01      	subs	r6, #1
 800abb8:	429e      	cmp	r6, r3
 800abba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800abbe:	f280 80c4 	bge.w	800ad4a <_strtod_l+0x84a>
 800abc2:	1b9b      	subs	r3, r3, r6
 800abc4:	2b1f      	cmp	r3, #31
 800abc6:	eba2 0203 	sub.w	r2, r2, r3
 800abca:	f04f 0101 	mov.w	r1, #1
 800abce:	f300 80b0 	bgt.w	800ad32 <_strtod_l+0x832>
 800abd2:	fa01 f303 	lsl.w	r3, r1, r3
 800abd6:	930e      	str	r3, [sp, #56]	; 0x38
 800abd8:	2300      	movs	r3, #0
 800abda:	930d      	str	r3, [sp, #52]	; 0x34
 800abdc:	eb0a 0602 	add.w	r6, sl, r2
 800abe0:	9b04      	ldr	r3, [sp, #16]
 800abe2:	45b2      	cmp	sl, r6
 800abe4:	4417      	add	r7, r2
 800abe6:	441f      	add	r7, r3
 800abe8:	4653      	mov	r3, sl
 800abea:	bfa8      	it	ge
 800abec:	4633      	movge	r3, r6
 800abee:	42bb      	cmp	r3, r7
 800abf0:	bfa8      	it	ge
 800abf2:	463b      	movge	r3, r7
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	bfc2      	ittt	gt
 800abf8:	1af6      	subgt	r6, r6, r3
 800abfa:	1aff      	subgt	r7, r7, r3
 800abfc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800ac00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	dd17      	ble.n	800ac36 <_strtod_l+0x736>
 800ac06:	4659      	mov	r1, fp
 800ac08:	461a      	mov	r2, r3
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f002 fcd4 	bl	800d5b8 <__pow5mult>
 800ac10:	4683      	mov	fp, r0
 800ac12:	2800      	cmp	r0, #0
 800ac14:	f43f aeb8 	beq.w	800a988 <_strtod_l+0x488>
 800ac18:	4601      	mov	r1, r0
 800ac1a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f002 fc21 	bl	800d464 <__multiply>
 800ac22:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac24:	2800      	cmp	r0, #0
 800ac26:	f43f aeaf 	beq.w	800a988 <_strtod_l+0x488>
 800ac2a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ac2c:	4620      	mov	r0, r4
 800ac2e:	f002 fb03 	bl	800d238 <_Bfree>
 800ac32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac34:	9316      	str	r3, [sp, #88]	; 0x58
 800ac36:	2e00      	cmp	r6, #0
 800ac38:	f300 808c 	bgt.w	800ad54 <_strtod_l+0x854>
 800ac3c:	9b08      	ldr	r3, [sp, #32]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	dd08      	ble.n	800ac54 <_strtod_l+0x754>
 800ac42:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ac44:	9905      	ldr	r1, [sp, #20]
 800ac46:	4620      	mov	r0, r4
 800ac48:	f002 fcb6 	bl	800d5b8 <__pow5mult>
 800ac4c:	9005      	str	r0, [sp, #20]
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	f43f ae9a 	beq.w	800a988 <_strtod_l+0x488>
 800ac54:	2f00      	cmp	r7, #0
 800ac56:	dd08      	ble.n	800ac6a <_strtod_l+0x76a>
 800ac58:	9905      	ldr	r1, [sp, #20]
 800ac5a:	463a      	mov	r2, r7
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	f002 fd05 	bl	800d66c <__lshift>
 800ac62:	9005      	str	r0, [sp, #20]
 800ac64:	2800      	cmp	r0, #0
 800ac66:	f43f ae8f 	beq.w	800a988 <_strtod_l+0x488>
 800ac6a:	f1ba 0f00 	cmp.w	sl, #0
 800ac6e:	dd08      	ble.n	800ac82 <_strtod_l+0x782>
 800ac70:	4659      	mov	r1, fp
 800ac72:	4652      	mov	r2, sl
 800ac74:	4620      	mov	r0, r4
 800ac76:	f002 fcf9 	bl	800d66c <__lshift>
 800ac7a:	4683      	mov	fp, r0
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	f43f ae83 	beq.w	800a988 <_strtod_l+0x488>
 800ac82:	9a05      	ldr	r2, [sp, #20]
 800ac84:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ac86:	4620      	mov	r0, r4
 800ac88:	f002 fd78 	bl	800d77c <__mdiff>
 800ac8c:	4605      	mov	r5, r0
 800ac8e:	2800      	cmp	r0, #0
 800ac90:	f43f ae7a 	beq.w	800a988 <_strtod_l+0x488>
 800ac94:	68c3      	ldr	r3, [r0, #12]
 800ac96:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac98:	2300      	movs	r3, #0
 800ac9a:	60c3      	str	r3, [r0, #12]
 800ac9c:	4659      	mov	r1, fp
 800ac9e:	f002 fd51 	bl	800d744 <__mcmp>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	da60      	bge.n	800ad68 <_strtod_l+0x868>
 800aca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aca8:	ea53 0308 	orrs.w	r3, r3, r8
 800acac:	f040 8084 	bne.w	800adb8 <_strtod_l+0x8b8>
 800acb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d17f      	bne.n	800adb8 <_strtod_l+0x8b8>
 800acb8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800acbc:	0d1b      	lsrs	r3, r3, #20
 800acbe:	051b      	lsls	r3, r3, #20
 800acc0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800acc4:	d978      	bls.n	800adb8 <_strtod_l+0x8b8>
 800acc6:	696b      	ldr	r3, [r5, #20]
 800acc8:	b913      	cbnz	r3, 800acd0 <_strtod_l+0x7d0>
 800acca:	692b      	ldr	r3, [r5, #16]
 800accc:	2b01      	cmp	r3, #1
 800acce:	dd73      	ble.n	800adb8 <_strtod_l+0x8b8>
 800acd0:	4629      	mov	r1, r5
 800acd2:	2201      	movs	r2, #1
 800acd4:	4620      	mov	r0, r4
 800acd6:	f002 fcc9 	bl	800d66c <__lshift>
 800acda:	4659      	mov	r1, fp
 800acdc:	4605      	mov	r5, r0
 800acde:	f002 fd31 	bl	800d744 <__mcmp>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	dd68      	ble.n	800adb8 <_strtod_l+0x8b8>
 800ace6:	9904      	ldr	r1, [sp, #16]
 800ace8:	4a54      	ldr	r2, [pc, #336]	; (800ae3c <_strtod_l+0x93c>)
 800acea:	464b      	mov	r3, r9
 800acec:	2900      	cmp	r1, #0
 800acee:	f000 8084 	beq.w	800adfa <_strtod_l+0x8fa>
 800acf2:	ea02 0109 	and.w	r1, r2, r9
 800acf6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800acfa:	dc7e      	bgt.n	800adfa <_strtod_l+0x8fa>
 800acfc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ad00:	f77f aeb3 	ble.w	800aa6a <_strtod_l+0x56a>
 800ad04:	4b4e      	ldr	r3, [pc, #312]	; (800ae40 <_strtod_l+0x940>)
 800ad06:	4640      	mov	r0, r8
 800ad08:	4649      	mov	r1, r9
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f7f5 fc84 	bl	8000618 <__aeabi_dmul>
 800ad10:	4b4a      	ldr	r3, [pc, #296]	; (800ae3c <_strtod_l+0x93c>)
 800ad12:	400b      	ands	r3, r1
 800ad14:	4680      	mov	r8, r0
 800ad16:	4689      	mov	r9, r1
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	f47f ae3f 	bne.w	800a99c <_strtod_l+0x49c>
 800ad1e:	2322      	movs	r3, #34	; 0x22
 800ad20:	6023      	str	r3, [r4, #0]
 800ad22:	e63b      	b.n	800a99c <_strtod_l+0x49c>
 800ad24:	f04f 32ff 	mov.w	r2, #4294967295
 800ad28:	fa02 f303 	lsl.w	r3, r2, r3
 800ad2c:	ea03 0808 	and.w	r8, r3, r8
 800ad30:	e6e8      	b.n	800ab04 <_strtod_l+0x604>
 800ad32:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ad36:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ad3a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ad3e:	36e2      	adds	r6, #226	; 0xe2
 800ad40:	fa01 f306 	lsl.w	r3, r1, r6
 800ad44:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800ad48:	e748      	b.n	800abdc <_strtod_l+0x6dc>
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800ad52:	e743      	b.n	800abdc <_strtod_l+0x6dc>
 800ad54:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ad56:	4632      	mov	r2, r6
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f002 fc87 	bl	800d66c <__lshift>
 800ad5e:	9016      	str	r0, [sp, #88]	; 0x58
 800ad60:	2800      	cmp	r0, #0
 800ad62:	f47f af6b 	bne.w	800ac3c <_strtod_l+0x73c>
 800ad66:	e60f      	b.n	800a988 <_strtod_l+0x488>
 800ad68:	46ca      	mov	sl, r9
 800ad6a:	d171      	bne.n	800ae50 <_strtod_l+0x950>
 800ad6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad72:	b352      	cbz	r2, 800adca <_strtod_l+0x8ca>
 800ad74:	4a33      	ldr	r2, [pc, #204]	; (800ae44 <_strtod_l+0x944>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d12a      	bne.n	800add0 <_strtod_l+0x8d0>
 800ad7a:	9b04      	ldr	r3, [sp, #16]
 800ad7c:	4641      	mov	r1, r8
 800ad7e:	b1fb      	cbz	r3, 800adc0 <_strtod_l+0x8c0>
 800ad80:	4b2e      	ldr	r3, [pc, #184]	; (800ae3c <_strtod_l+0x93c>)
 800ad82:	ea09 0303 	and.w	r3, r9, r3
 800ad86:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ad8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad8e:	d81a      	bhi.n	800adc6 <_strtod_l+0x8c6>
 800ad90:	0d1b      	lsrs	r3, r3, #20
 800ad92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad96:	fa02 f303 	lsl.w	r3, r2, r3
 800ad9a:	4299      	cmp	r1, r3
 800ad9c:	d118      	bne.n	800add0 <_strtod_l+0x8d0>
 800ad9e:	4b2a      	ldr	r3, [pc, #168]	; (800ae48 <_strtod_l+0x948>)
 800ada0:	459a      	cmp	sl, r3
 800ada2:	d102      	bne.n	800adaa <_strtod_l+0x8aa>
 800ada4:	3101      	adds	r1, #1
 800ada6:	f43f adef 	beq.w	800a988 <_strtod_l+0x488>
 800adaa:	4b24      	ldr	r3, [pc, #144]	; (800ae3c <_strtod_l+0x93c>)
 800adac:	ea0a 0303 	and.w	r3, sl, r3
 800adb0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800adb4:	f04f 0800 	mov.w	r8, #0
 800adb8:	9b04      	ldr	r3, [sp, #16]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1a2      	bne.n	800ad04 <_strtod_l+0x804>
 800adbe:	e5ed      	b.n	800a99c <_strtod_l+0x49c>
 800adc0:	f04f 33ff 	mov.w	r3, #4294967295
 800adc4:	e7e9      	b.n	800ad9a <_strtod_l+0x89a>
 800adc6:	4613      	mov	r3, r2
 800adc8:	e7e7      	b.n	800ad9a <_strtod_l+0x89a>
 800adca:	ea53 0308 	orrs.w	r3, r3, r8
 800adce:	d08a      	beq.n	800ace6 <_strtod_l+0x7e6>
 800add0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800add2:	b1e3      	cbz	r3, 800ae0e <_strtod_l+0x90e>
 800add4:	ea13 0f0a 	tst.w	r3, sl
 800add8:	d0ee      	beq.n	800adb8 <_strtod_l+0x8b8>
 800adda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800addc:	9a04      	ldr	r2, [sp, #16]
 800adde:	4640      	mov	r0, r8
 800ade0:	4649      	mov	r1, r9
 800ade2:	b1c3      	cbz	r3, 800ae16 <_strtod_l+0x916>
 800ade4:	f7ff fb6d 	bl	800a4c2 <sulp>
 800ade8:	4602      	mov	r2, r0
 800adea:	460b      	mov	r3, r1
 800adec:	ec51 0b18 	vmov	r0, r1, d8
 800adf0:	f7f5 fa5c 	bl	80002ac <__adddf3>
 800adf4:	4680      	mov	r8, r0
 800adf6:	4689      	mov	r9, r1
 800adf8:	e7de      	b.n	800adb8 <_strtod_l+0x8b8>
 800adfa:	4013      	ands	r3, r2
 800adfc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ae00:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ae04:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ae08:	f04f 38ff 	mov.w	r8, #4294967295
 800ae0c:	e7d4      	b.n	800adb8 <_strtod_l+0x8b8>
 800ae0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ae10:	ea13 0f08 	tst.w	r3, r8
 800ae14:	e7e0      	b.n	800add8 <_strtod_l+0x8d8>
 800ae16:	f7ff fb54 	bl	800a4c2 <sulp>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	ec51 0b18 	vmov	r0, r1, d8
 800ae22:	f7f5 fa41 	bl	80002a8 <__aeabi_dsub>
 800ae26:	2200      	movs	r2, #0
 800ae28:	2300      	movs	r3, #0
 800ae2a:	4680      	mov	r8, r0
 800ae2c:	4689      	mov	r9, r1
 800ae2e:	f7f5 fe5b 	bl	8000ae8 <__aeabi_dcmpeq>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	d0c0      	beq.n	800adb8 <_strtod_l+0x8b8>
 800ae36:	e618      	b.n	800aa6a <_strtod_l+0x56a>
 800ae38:	fffffc02 	.word	0xfffffc02
 800ae3c:	7ff00000 	.word	0x7ff00000
 800ae40:	39500000 	.word	0x39500000
 800ae44:	000fffff 	.word	0x000fffff
 800ae48:	7fefffff 	.word	0x7fefffff
 800ae4c:	0800e700 	.word	0x0800e700
 800ae50:	4659      	mov	r1, fp
 800ae52:	4628      	mov	r0, r5
 800ae54:	f002 fde6 	bl	800da24 <__ratio>
 800ae58:	ec57 6b10 	vmov	r6, r7, d0
 800ae5c:	ee10 0a10 	vmov	r0, s0
 800ae60:	2200      	movs	r2, #0
 800ae62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae66:	4639      	mov	r1, r7
 800ae68:	f7f5 fe52 	bl	8000b10 <__aeabi_dcmple>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d071      	beq.n	800af54 <_strtod_l+0xa54>
 800ae70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d17c      	bne.n	800af70 <_strtod_l+0xa70>
 800ae76:	f1b8 0f00 	cmp.w	r8, #0
 800ae7a:	d15a      	bne.n	800af32 <_strtod_l+0xa32>
 800ae7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d15d      	bne.n	800af40 <_strtod_l+0xa40>
 800ae84:	4b90      	ldr	r3, [pc, #576]	; (800b0c8 <_strtod_l+0xbc8>)
 800ae86:	2200      	movs	r2, #0
 800ae88:	4630      	mov	r0, r6
 800ae8a:	4639      	mov	r1, r7
 800ae8c:	f7f5 fe36 	bl	8000afc <__aeabi_dcmplt>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	d15c      	bne.n	800af4e <_strtod_l+0xa4e>
 800ae94:	4630      	mov	r0, r6
 800ae96:	4639      	mov	r1, r7
 800ae98:	4b8c      	ldr	r3, [pc, #560]	; (800b0cc <_strtod_l+0xbcc>)
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f7f5 fbbc 	bl	8000618 <__aeabi_dmul>
 800aea0:	4606      	mov	r6, r0
 800aea2:	460f      	mov	r7, r1
 800aea4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800aea8:	9606      	str	r6, [sp, #24]
 800aeaa:	9307      	str	r3, [sp, #28]
 800aeac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aeb0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800aeb4:	4b86      	ldr	r3, [pc, #536]	; (800b0d0 <_strtod_l+0xbd0>)
 800aeb6:	ea0a 0303 	and.w	r3, sl, r3
 800aeba:	930d      	str	r3, [sp, #52]	; 0x34
 800aebc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aebe:	4b85      	ldr	r3, [pc, #532]	; (800b0d4 <_strtod_l+0xbd4>)
 800aec0:	429a      	cmp	r2, r3
 800aec2:	f040 8090 	bne.w	800afe6 <_strtod_l+0xae6>
 800aec6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800aeca:	ec49 8b10 	vmov	d0, r8, r9
 800aece:	f002 fcdf 	bl	800d890 <__ulp>
 800aed2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aed6:	ec51 0b10 	vmov	r0, r1, d0
 800aeda:	f7f5 fb9d 	bl	8000618 <__aeabi_dmul>
 800aede:	4642      	mov	r2, r8
 800aee0:	464b      	mov	r3, r9
 800aee2:	f7f5 f9e3 	bl	80002ac <__adddf3>
 800aee6:	460b      	mov	r3, r1
 800aee8:	4979      	ldr	r1, [pc, #484]	; (800b0d0 <_strtod_l+0xbd0>)
 800aeea:	4a7b      	ldr	r2, [pc, #492]	; (800b0d8 <_strtod_l+0xbd8>)
 800aeec:	4019      	ands	r1, r3
 800aeee:	4291      	cmp	r1, r2
 800aef0:	4680      	mov	r8, r0
 800aef2:	d944      	bls.n	800af7e <_strtod_l+0xa7e>
 800aef4:	ee18 2a90 	vmov	r2, s17
 800aef8:	4b78      	ldr	r3, [pc, #480]	; (800b0dc <_strtod_l+0xbdc>)
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d104      	bne.n	800af08 <_strtod_l+0xa08>
 800aefe:	ee18 3a10 	vmov	r3, s16
 800af02:	3301      	adds	r3, #1
 800af04:	f43f ad40 	beq.w	800a988 <_strtod_l+0x488>
 800af08:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b0dc <_strtod_l+0xbdc>
 800af0c:	f04f 38ff 	mov.w	r8, #4294967295
 800af10:	9916      	ldr	r1, [sp, #88]	; 0x58
 800af12:	4620      	mov	r0, r4
 800af14:	f002 f990 	bl	800d238 <_Bfree>
 800af18:	9905      	ldr	r1, [sp, #20]
 800af1a:	4620      	mov	r0, r4
 800af1c:	f002 f98c 	bl	800d238 <_Bfree>
 800af20:	4659      	mov	r1, fp
 800af22:	4620      	mov	r0, r4
 800af24:	f002 f988 	bl	800d238 <_Bfree>
 800af28:	4629      	mov	r1, r5
 800af2a:	4620      	mov	r0, r4
 800af2c:	f002 f984 	bl	800d238 <_Bfree>
 800af30:	e609      	b.n	800ab46 <_strtod_l+0x646>
 800af32:	f1b8 0f01 	cmp.w	r8, #1
 800af36:	d103      	bne.n	800af40 <_strtod_l+0xa40>
 800af38:	f1b9 0f00 	cmp.w	r9, #0
 800af3c:	f43f ad95 	beq.w	800aa6a <_strtod_l+0x56a>
 800af40:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b098 <_strtod_l+0xb98>
 800af44:	4f60      	ldr	r7, [pc, #384]	; (800b0c8 <_strtod_l+0xbc8>)
 800af46:	ed8d 7b06 	vstr	d7, [sp, #24]
 800af4a:	2600      	movs	r6, #0
 800af4c:	e7ae      	b.n	800aeac <_strtod_l+0x9ac>
 800af4e:	4f5f      	ldr	r7, [pc, #380]	; (800b0cc <_strtod_l+0xbcc>)
 800af50:	2600      	movs	r6, #0
 800af52:	e7a7      	b.n	800aea4 <_strtod_l+0x9a4>
 800af54:	4b5d      	ldr	r3, [pc, #372]	; (800b0cc <_strtod_l+0xbcc>)
 800af56:	4630      	mov	r0, r6
 800af58:	4639      	mov	r1, r7
 800af5a:	2200      	movs	r2, #0
 800af5c:	f7f5 fb5c 	bl	8000618 <__aeabi_dmul>
 800af60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af62:	4606      	mov	r6, r0
 800af64:	460f      	mov	r7, r1
 800af66:	2b00      	cmp	r3, #0
 800af68:	d09c      	beq.n	800aea4 <_strtod_l+0x9a4>
 800af6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800af6e:	e79d      	b.n	800aeac <_strtod_l+0x9ac>
 800af70:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b0a0 <_strtod_l+0xba0>
 800af74:	ed8d 7b06 	vstr	d7, [sp, #24]
 800af78:	ec57 6b17 	vmov	r6, r7, d7
 800af7c:	e796      	b.n	800aeac <_strtod_l+0x9ac>
 800af7e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800af82:	9b04      	ldr	r3, [sp, #16]
 800af84:	46ca      	mov	sl, r9
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1c2      	bne.n	800af10 <_strtod_l+0xa10>
 800af8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af90:	0d1b      	lsrs	r3, r3, #20
 800af92:	051b      	lsls	r3, r3, #20
 800af94:	429a      	cmp	r2, r3
 800af96:	d1bb      	bne.n	800af10 <_strtod_l+0xa10>
 800af98:	4630      	mov	r0, r6
 800af9a:	4639      	mov	r1, r7
 800af9c:	f7f5 fe34 	bl	8000c08 <__aeabi_d2lz>
 800afa0:	f7f5 fb0c 	bl	80005bc <__aeabi_l2d>
 800afa4:	4602      	mov	r2, r0
 800afa6:	460b      	mov	r3, r1
 800afa8:	4630      	mov	r0, r6
 800afaa:	4639      	mov	r1, r7
 800afac:	f7f5 f97c 	bl	80002a8 <__aeabi_dsub>
 800afb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800afb2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afb6:	ea43 0308 	orr.w	r3, r3, r8
 800afba:	4313      	orrs	r3, r2
 800afbc:	4606      	mov	r6, r0
 800afbe:	460f      	mov	r7, r1
 800afc0:	d054      	beq.n	800b06c <_strtod_l+0xb6c>
 800afc2:	a339      	add	r3, pc, #228	; (adr r3, 800b0a8 <_strtod_l+0xba8>)
 800afc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc8:	f7f5 fd98 	bl	8000afc <__aeabi_dcmplt>
 800afcc:	2800      	cmp	r0, #0
 800afce:	f47f ace5 	bne.w	800a99c <_strtod_l+0x49c>
 800afd2:	a337      	add	r3, pc, #220	; (adr r3, 800b0b0 <_strtod_l+0xbb0>)
 800afd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd8:	4630      	mov	r0, r6
 800afda:	4639      	mov	r1, r7
 800afdc:	f7f5 fdac 	bl	8000b38 <__aeabi_dcmpgt>
 800afe0:	2800      	cmp	r0, #0
 800afe2:	d095      	beq.n	800af10 <_strtod_l+0xa10>
 800afe4:	e4da      	b.n	800a99c <_strtod_l+0x49c>
 800afe6:	9b04      	ldr	r3, [sp, #16]
 800afe8:	b333      	cbz	r3, 800b038 <_strtod_l+0xb38>
 800afea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800afec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aff0:	d822      	bhi.n	800b038 <_strtod_l+0xb38>
 800aff2:	a331      	add	r3, pc, #196	; (adr r3, 800b0b8 <_strtod_l+0xbb8>)
 800aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff8:	4630      	mov	r0, r6
 800affa:	4639      	mov	r1, r7
 800affc:	f7f5 fd88 	bl	8000b10 <__aeabi_dcmple>
 800b000:	b1a0      	cbz	r0, 800b02c <_strtod_l+0xb2c>
 800b002:	4639      	mov	r1, r7
 800b004:	4630      	mov	r0, r6
 800b006:	f7f5 fddf 	bl	8000bc8 <__aeabi_d2uiz>
 800b00a:	2801      	cmp	r0, #1
 800b00c:	bf38      	it	cc
 800b00e:	2001      	movcc	r0, #1
 800b010:	f7f5 fa88 	bl	8000524 <__aeabi_ui2d>
 800b014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b016:	4606      	mov	r6, r0
 800b018:	460f      	mov	r7, r1
 800b01a:	bb23      	cbnz	r3, 800b066 <_strtod_l+0xb66>
 800b01c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b020:	9010      	str	r0, [sp, #64]	; 0x40
 800b022:	9311      	str	r3, [sp, #68]	; 0x44
 800b024:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b028:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b02c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b02e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b030:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b034:	1a9b      	subs	r3, r3, r2
 800b036:	930f      	str	r3, [sp, #60]	; 0x3c
 800b038:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b03c:	eeb0 0a48 	vmov.f32	s0, s16
 800b040:	eef0 0a68 	vmov.f32	s1, s17
 800b044:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b048:	f002 fc22 	bl	800d890 <__ulp>
 800b04c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b050:	ec53 2b10 	vmov	r2, r3, d0
 800b054:	f7f5 fae0 	bl	8000618 <__aeabi_dmul>
 800b058:	ec53 2b18 	vmov	r2, r3, d8
 800b05c:	f7f5 f926 	bl	80002ac <__adddf3>
 800b060:	4680      	mov	r8, r0
 800b062:	4689      	mov	r9, r1
 800b064:	e78d      	b.n	800af82 <_strtod_l+0xa82>
 800b066:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b06a:	e7db      	b.n	800b024 <_strtod_l+0xb24>
 800b06c:	a314      	add	r3, pc, #80	; (adr r3, 800b0c0 <_strtod_l+0xbc0>)
 800b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b072:	f7f5 fd43 	bl	8000afc <__aeabi_dcmplt>
 800b076:	e7b3      	b.n	800afe0 <_strtod_l+0xae0>
 800b078:	2300      	movs	r3, #0
 800b07a:	930a      	str	r3, [sp, #40]	; 0x28
 800b07c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b07e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b080:	6013      	str	r3, [r2, #0]
 800b082:	f7ff ba7c 	b.w	800a57e <_strtod_l+0x7e>
 800b086:	2a65      	cmp	r2, #101	; 0x65
 800b088:	f43f ab75 	beq.w	800a776 <_strtod_l+0x276>
 800b08c:	2a45      	cmp	r2, #69	; 0x45
 800b08e:	f43f ab72 	beq.w	800a776 <_strtod_l+0x276>
 800b092:	2301      	movs	r3, #1
 800b094:	f7ff bbaa 	b.w	800a7ec <_strtod_l+0x2ec>
 800b098:	00000000 	.word	0x00000000
 800b09c:	bff00000 	.word	0xbff00000
 800b0a0:	00000000 	.word	0x00000000
 800b0a4:	3ff00000 	.word	0x3ff00000
 800b0a8:	94a03595 	.word	0x94a03595
 800b0ac:	3fdfffff 	.word	0x3fdfffff
 800b0b0:	35afe535 	.word	0x35afe535
 800b0b4:	3fe00000 	.word	0x3fe00000
 800b0b8:	ffc00000 	.word	0xffc00000
 800b0bc:	41dfffff 	.word	0x41dfffff
 800b0c0:	94a03595 	.word	0x94a03595
 800b0c4:	3fcfffff 	.word	0x3fcfffff
 800b0c8:	3ff00000 	.word	0x3ff00000
 800b0cc:	3fe00000 	.word	0x3fe00000
 800b0d0:	7ff00000 	.word	0x7ff00000
 800b0d4:	7fe00000 	.word	0x7fe00000
 800b0d8:	7c9fffff 	.word	0x7c9fffff
 800b0dc:	7fefffff 	.word	0x7fefffff

0800b0e0 <strtod>:
 800b0e0:	460a      	mov	r2, r1
 800b0e2:	4601      	mov	r1, r0
 800b0e4:	4802      	ldr	r0, [pc, #8]	; (800b0f0 <strtod+0x10>)
 800b0e6:	4b03      	ldr	r3, [pc, #12]	; (800b0f4 <strtod+0x14>)
 800b0e8:	6800      	ldr	r0, [r0, #0]
 800b0ea:	f7ff ba09 	b.w	800a500 <_strtod_l>
 800b0ee:	bf00      	nop
 800b0f0:	20000268 	.word	0x20000268
 800b0f4:	200000b0 	.word	0x200000b0

0800b0f8 <__cvt>:
 800b0f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b0fc:	ec55 4b10 	vmov	r4, r5, d0
 800b100:	2d00      	cmp	r5, #0
 800b102:	460e      	mov	r6, r1
 800b104:	4619      	mov	r1, r3
 800b106:	462b      	mov	r3, r5
 800b108:	bfbb      	ittet	lt
 800b10a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b10e:	461d      	movlt	r5, r3
 800b110:	2300      	movge	r3, #0
 800b112:	232d      	movlt	r3, #45	; 0x2d
 800b114:	700b      	strb	r3, [r1, #0]
 800b116:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b118:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b11c:	4691      	mov	r9, r2
 800b11e:	f023 0820 	bic.w	r8, r3, #32
 800b122:	bfbc      	itt	lt
 800b124:	4622      	movlt	r2, r4
 800b126:	4614      	movlt	r4, r2
 800b128:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b12c:	d005      	beq.n	800b13a <__cvt+0x42>
 800b12e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b132:	d100      	bne.n	800b136 <__cvt+0x3e>
 800b134:	3601      	adds	r6, #1
 800b136:	2102      	movs	r1, #2
 800b138:	e000      	b.n	800b13c <__cvt+0x44>
 800b13a:	2103      	movs	r1, #3
 800b13c:	ab03      	add	r3, sp, #12
 800b13e:	9301      	str	r3, [sp, #4]
 800b140:	ab02      	add	r3, sp, #8
 800b142:	9300      	str	r3, [sp, #0]
 800b144:	ec45 4b10 	vmov	d0, r4, r5
 800b148:	4653      	mov	r3, sl
 800b14a:	4632      	mov	r2, r6
 800b14c:	f000 fe8c 	bl	800be68 <_dtoa_r>
 800b150:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b154:	4607      	mov	r7, r0
 800b156:	d102      	bne.n	800b15e <__cvt+0x66>
 800b158:	f019 0f01 	tst.w	r9, #1
 800b15c:	d022      	beq.n	800b1a4 <__cvt+0xac>
 800b15e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b162:	eb07 0906 	add.w	r9, r7, r6
 800b166:	d110      	bne.n	800b18a <__cvt+0x92>
 800b168:	783b      	ldrb	r3, [r7, #0]
 800b16a:	2b30      	cmp	r3, #48	; 0x30
 800b16c:	d10a      	bne.n	800b184 <__cvt+0x8c>
 800b16e:	2200      	movs	r2, #0
 800b170:	2300      	movs	r3, #0
 800b172:	4620      	mov	r0, r4
 800b174:	4629      	mov	r1, r5
 800b176:	f7f5 fcb7 	bl	8000ae8 <__aeabi_dcmpeq>
 800b17a:	b918      	cbnz	r0, 800b184 <__cvt+0x8c>
 800b17c:	f1c6 0601 	rsb	r6, r6, #1
 800b180:	f8ca 6000 	str.w	r6, [sl]
 800b184:	f8da 3000 	ldr.w	r3, [sl]
 800b188:	4499      	add	r9, r3
 800b18a:	2200      	movs	r2, #0
 800b18c:	2300      	movs	r3, #0
 800b18e:	4620      	mov	r0, r4
 800b190:	4629      	mov	r1, r5
 800b192:	f7f5 fca9 	bl	8000ae8 <__aeabi_dcmpeq>
 800b196:	b108      	cbz	r0, 800b19c <__cvt+0xa4>
 800b198:	f8cd 900c 	str.w	r9, [sp, #12]
 800b19c:	2230      	movs	r2, #48	; 0x30
 800b19e:	9b03      	ldr	r3, [sp, #12]
 800b1a0:	454b      	cmp	r3, r9
 800b1a2:	d307      	bcc.n	800b1b4 <__cvt+0xbc>
 800b1a4:	9b03      	ldr	r3, [sp, #12]
 800b1a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1a8:	1bdb      	subs	r3, r3, r7
 800b1aa:	4638      	mov	r0, r7
 800b1ac:	6013      	str	r3, [r2, #0]
 800b1ae:	b004      	add	sp, #16
 800b1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1b4:	1c59      	adds	r1, r3, #1
 800b1b6:	9103      	str	r1, [sp, #12]
 800b1b8:	701a      	strb	r2, [r3, #0]
 800b1ba:	e7f0      	b.n	800b19e <__cvt+0xa6>

0800b1bc <__exponent>:
 800b1bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2900      	cmp	r1, #0
 800b1c2:	bfb8      	it	lt
 800b1c4:	4249      	neglt	r1, r1
 800b1c6:	f803 2b02 	strb.w	r2, [r3], #2
 800b1ca:	bfb4      	ite	lt
 800b1cc:	222d      	movlt	r2, #45	; 0x2d
 800b1ce:	222b      	movge	r2, #43	; 0x2b
 800b1d0:	2909      	cmp	r1, #9
 800b1d2:	7042      	strb	r2, [r0, #1]
 800b1d4:	dd2a      	ble.n	800b22c <__exponent+0x70>
 800b1d6:	f10d 0207 	add.w	r2, sp, #7
 800b1da:	4617      	mov	r7, r2
 800b1dc:	260a      	movs	r6, #10
 800b1de:	4694      	mov	ip, r2
 800b1e0:	fb91 f5f6 	sdiv	r5, r1, r6
 800b1e4:	fb06 1415 	mls	r4, r6, r5, r1
 800b1e8:	3430      	adds	r4, #48	; 0x30
 800b1ea:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b1ee:	460c      	mov	r4, r1
 800b1f0:	2c63      	cmp	r4, #99	; 0x63
 800b1f2:	f102 32ff 	add.w	r2, r2, #4294967295
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	dcf1      	bgt.n	800b1de <__exponent+0x22>
 800b1fa:	3130      	adds	r1, #48	; 0x30
 800b1fc:	f1ac 0402 	sub.w	r4, ip, #2
 800b200:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b204:	1c41      	adds	r1, r0, #1
 800b206:	4622      	mov	r2, r4
 800b208:	42ba      	cmp	r2, r7
 800b20a:	d30a      	bcc.n	800b222 <__exponent+0x66>
 800b20c:	f10d 0209 	add.w	r2, sp, #9
 800b210:	eba2 020c 	sub.w	r2, r2, ip
 800b214:	42bc      	cmp	r4, r7
 800b216:	bf88      	it	hi
 800b218:	2200      	movhi	r2, #0
 800b21a:	4413      	add	r3, r2
 800b21c:	1a18      	subs	r0, r3, r0
 800b21e:	b003      	add	sp, #12
 800b220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b222:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b226:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b22a:	e7ed      	b.n	800b208 <__exponent+0x4c>
 800b22c:	2330      	movs	r3, #48	; 0x30
 800b22e:	3130      	adds	r1, #48	; 0x30
 800b230:	7083      	strb	r3, [r0, #2]
 800b232:	70c1      	strb	r1, [r0, #3]
 800b234:	1d03      	adds	r3, r0, #4
 800b236:	e7f1      	b.n	800b21c <__exponent+0x60>

0800b238 <_printf_float>:
 800b238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b23c:	ed2d 8b02 	vpush	{d8}
 800b240:	b08d      	sub	sp, #52	; 0x34
 800b242:	460c      	mov	r4, r1
 800b244:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b248:	4616      	mov	r6, r2
 800b24a:	461f      	mov	r7, r3
 800b24c:	4605      	mov	r5, r0
 800b24e:	f000 fce7 	bl	800bc20 <_localeconv_r>
 800b252:	f8d0 a000 	ldr.w	sl, [r0]
 800b256:	4650      	mov	r0, sl
 800b258:	f7f5 f81a 	bl	8000290 <strlen>
 800b25c:	2300      	movs	r3, #0
 800b25e:	930a      	str	r3, [sp, #40]	; 0x28
 800b260:	6823      	ldr	r3, [r4, #0]
 800b262:	9305      	str	r3, [sp, #20]
 800b264:	f8d8 3000 	ldr.w	r3, [r8]
 800b268:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b26c:	3307      	adds	r3, #7
 800b26e:	f023 0307 	bic.w	r3, r3, #7
 800b272:	f103 0208 	add.w	r2, r3, #8
 800b276:	f8c8 2000 	str.w	r2, [r8]
 800b27a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b27e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b282:	9307      	str	r3, [sp, #28]
 800b284:	f8cd 8018 	str.w	r8, [sp, #24]
 800b288:	ee08 0a10 	vmov	s16, r0
 800b28c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b290:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b294:	4b9e      	ldr	r3, [pc, #632]	; (800b510 <_printf_float+0x2d8>)
 800b296:	f04f 32ff 	mov.w	r2, #4294967295
 800b29a:	f7f5 fc57 	bl	8000b4c <__aeabi_dcmpun>
 800b29e:	bb88      	cbnz	r0, 800b304 <_printf_float+0xcc>
 800b2a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2a4:	4b9a      	ldr	r3, [pc, #616]	; (800b510 <_printf_float+0x2d8>)
 800b2a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b2aa:	f7f5 fc31 	bl	8000b10 <__aeabi_dcmple>
 800b2ae:	bb48      	cbnz	r0, 800b304 <_printf_float+0xcc>
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	4640      	mov	r0, r8
 800b2b6:	4649      	mov	r1, r9
 800b2b8:	f7f5 fc20 	bl	8000afc <__aeabi_dcmplt>
 800b2bc:	b110      	cbz	r0, 800b2c4 <_printf_float+0x8c>
 800b2be:	232d      	movs	r3, #45	; 0x2d
 800b2c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2c4:	4a93      	ldr	r2, [pc, #588]	; (800b514 <_printf_float+0x2dc>)
 800b2c6:	4b94      	ldr	r3, [pc, #592]	; (800b518 <_printf_float+0x2e0>)
 800b2c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b2cc:	bf94      	ite	ls
 800b2ce:	4690      	movls	r8, r2
 800b2d0:	4698      	movhi	r8, r3
 800b2d2:	2303      	movs	r3, #3
 800b2d4:	6123      	str	r3, [r4, #16]
 800b2d6:	9b05      	ldr	r3, [sp, #20]
 800b2d8:	f023 0304 	bic.w	r3, r3, #4
 800b2dc:	6023      	str	r3, [r4, #0]
 800b2de:	f04f 0900 	mov.w	r9, #0
 800b2e2:	9700      	str	r7, [sp, #0]
 800b2e4:	4633      	mov	r3, r6
 800b2e6:	aa0b      	add	r2, sp, #44	; 0x2c
 800b2e8:	4621      	mov	r1, r4
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	f000 f9da 	bl	800b6a4 <_printf_common>
 800b2f0:	3001      	adds	r0, #1
 800b2f2:	f040 8090 	bne.w	800b416 <_printf_float+0x1de>
 800b2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2fa:	b00d      	add	sp, #52	; 0x34
 800b2fc:	ecbd 8b02 	vpop	{d8}
 800b300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b304:	4642      	mov	r2, r8
 800b306:	464b      	mov	r3, r9
 800b308:	4640      	mov	r0, r8
 800b30a:	4649      	mov	r1, r9
 800b30c:	f7f5 fc1e 	bl	8000b4c <__aeabi_dcmpun>
 800b310:	b140      	cbz	r0, 800b324 <_printf_float+0xec>
 800b312:	464b      	mov	r3, r9
 800b314:	2b00      	cmp	r3, #0
 800b316:	bfbc      	itt	lt
 800b318:	232d      	movlt	r3, #45	; 0x2d
 800b31a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b31e:	4a7f      	ldr	r2, [pc, #508]	; (800b51c <_printf_float+0x2e4>)
 800b320:	4b7f      	ldr	r3, [pc, #508]	; (800b520 <_printf_float+0x2e8>)
 800b322:	e7d1      	b.n	800b2c8 <_printf_float+0x90>
 800b324:	6863      	ldr	r3, [r4, #4]
 800b326:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b32a:	9206      	str	r2, [sp, #24]
 800b32c:	1c5a      	adds	r2, r3, #1
 800b32e:	d13f      	bne.n	800b3b0 <_printf_float+0x178>
 800b330:	2306      	movs	r3, #6
 800b332:	6063      	str	r3, [r4, #4]
 800b334:	9b05      	ldr	r3, [sp, #20]
 800b336:	6861      	ldr	r1, [r4, #4]
 800b338:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b33c:	2300      	movs	r3, #0
 800b33e:	9303      	str	r3, [sp, #12]
 800b340:	ab0a      	add	r3, sp, #40	; 0x28
 800b342:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b346:	ab09      	add	r3, sp, #36	; 0x24
 800b348:	ec49 8b10 	vmov	d0, r8, r9
 800b34c:	9300      	str	r3, [sp, #0]
 800b34e:	6022      	str	r2, [r4, #0]
 800b350:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b354:	4628      	mov	r0, r5
 800b356:	f7ff fecf 	bl	800b0f8 <__cvt>
 800b35a:	9b06      	ldr	r3, [sp, #24]
 800b35c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b35e:	2b47      	cmp	r3, #71	; 0x47
 800b360:	4680      	mov	r8, r0
 800b362:	d108      	bne.n	800b376 <_printf_float+0x13e>
 800b364:	1cc8      	adds	r0, r1, #3
 800b366:	db02      	blt.n	800b36e <_printf_float+0x136>
 800b368:	6863      	ldr	r3, [r4, #4]
 800b36a:	4299      	cmp	r1, r3
 800b36c:	dd41      	ble.n	800b3f2 <_printf_float+0x1ba>
 800b36e:	f1ab 0302 	sub.w	r3, fp, #2
 800b372:	fa5f fb83 	uxtb.w	fp, r3
 800b376:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b37a:	d820      	bhi.n	800b3be <_printf_float+0x186>
 800b37c:	3901      	subs	r1, #1
 800b37e:	465a      	mov	r2, fp
 800b380:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b384:	9109      	str	r1, [sp, #36]	; 0x24
 800b386:	f7ff ff19 	bl	800b1bc <__exponent>
 800b38a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b38c:	1813      	adds	r3, r2, r0
 800b38e:	2a01      	cmp	r2, #1
 800b390:	4681      	mov	r9, r0
 800b392:	6123      	str	r3, [r4, #16]
 800b394:	dc02      	bgt.n	800b39c <_printf_float+0x164>
 800b396:	6822      	ldr	r2, [r4, #0]
 800b398:	07d2      	lsls	r2, r2, #31
 800b39a:	d501      	bpl.n	800b3a0 <_printf_float+0x168>
 800b39c:	3301      	adds	r3, #1
 800b39e:	6123      	str	r3, [r4, #16]
 800b3a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d09c      	beq.n	800b2e2 <_printf_float+0xaa>
 800b3a8:	232d      	movs	r3, #45	; 0x2d
 800b3aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3ae:	e798      	b.n	800b2e2 <_printf_float+0xaa>
 800b3b0:	9a06      	ldr	r2, [sp, #24]
 800b3b2:	2a47      	cmp	r2, #71	; 0x47
 800b3b4:	d1be      	bne.n	800b334 <_printf_float+0xfc>
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d1bc      	bne.n	800b334 <_printf_float+0xfc>
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e7b9      	b.n	800b332 <_printf_float+0xfa>
 800b3be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b3c2:	d118      	bne.n	800b3f6 <_printf_float+0x1be>
 800b3c4:	2900      	cmp	r1, #0
 800b3c6:	6863      	ldr	r3, [r4, #4]
 800b3c8:	dd0b      	ble.n	800b3e2 <_printf_float+0x1aa>
 800b3ca:	6121      	str	r1, [r4, #16]
 800b3cc:	b913      	cbnz	r3, 800b3d4 <_printf_float+0x19c>
 800b3ce:	6822      	ldr	r2, [r4, #0]
 800b3d0:	07d0      	lsls	r0, r2, #31
 800b3d2:	d502      	bpl.n	800b3da <_printf_float+0x1a2>
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	440b      	add	r3, r1
 800b3d8:	6123      	str	r3, [r4, #16]
 800b3da:	65a1      	str	r1, [r4, #88]	; 0x58
 800b3dc:	f04f 0900 	mov.w	r9, #0
 800b3e0:	e7de      	b.n	800b3a0 <_printf_float+0x168>
 800b3e2:	b913      	cbnz	r3, 800b3ea <_printf_float+0x1b2>
 800b3e4:	6822      	ldr	r2, [r4, #0]
 800b3e6:	07d2      	lsls	r2, r2, #31
 800b3e8:	d501      	bpl.n	800b3ee <_printf_float+0x1b6>
 800b3ea:	3302      	adds	r3, #2
 800b3ec:	e7f4      	b.n	800b3d8 <_printf_float+0x1a0>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e7f2      	b.n	800b3d8 <_printf_float+0x1a0>
 800b3f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b3f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3f8:	4299      	cmp	r1, r3
 800b3fa:	db05      	blt.n	800b408 <_printf_float+0x1d0>
 800b3fc:	6823      	ldr	r3, [r4, #0]
 800b3fe:	6121      	str	r1, [r4, #16]
 800b400:	07d8      	lsls	r0, r3, #31
 800b402:	d5ea      	bpl.n	800b3da <_printf_float+0x1a2>
 800b404:	1c4b      	adds	r3, r1, #1
 800b406:	e7e7      	b.n	800b3d8 <_printf_float+0x1a0>
 800b408:	2900      	cmp	r1, #0
 800b40a:	bfd4      	ite	le
 800b40c:	f1c1 0202 	rsble	r2, r1, #2
 800b410:	2201      	movgt	r2, #1
 800b412:	4413      	add	r3, r2
 800b414:	e7e0      	b.n	800b3d8 <_printf_float+0x1a0>
 800b416:	6823      	ldr	r3, [r4, #0]
 800b418:	055a      	lsls	r2, r3, #21
 800b41a:	d407      	bmi.n	800b42c <_printf_float+0x1f4>
 800b41c:	6923      	ldr	r3, [r4, #16]
 800b41e:	4642      	mov	r2, r8
 800b420:	4631      	mov	r1, r6
 800b422:	4628      	mov	r0, r5
 800b424:	47b8      	blx	r7
 800b426:	3001      	adds	r0, #1
 800b428:	d12c      	bne.n	800b484 <_printf_float+0x24c>
 800b42a:	e764      	b.n	800b2f6 <_printf_float+0xbe>
 800b42c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b430:	f240 80e0 	bls.w	800b5f4 <_printf_float+0x3bc>
 800b434:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b438:	2200      	movs	r2, #0
 800b43a:	2300      	movs	r3, #0
 800b43c:	f7f5 fb54 	bl	8000ae8 <__aeabi_dcmpeq>
 800b440:	2800      	cmp	r0, #0
 800b442:	d034      	beq.n	800b4ae <_printf_float+0x276>
 800b444:	4a37      	ldr	r2, [pc, #220]	; (800b524 <_printf_float+0x2ec>)
 800b446:	2301      	movs	r3, #1
 800b448:	4631      	mov	r1, r6
 800b44a:	4628      	mov	r0, r5
 800b44c:	47b8      	blx	r7
 800b44e:	3001      	adds	r0, #1
 800b450:	f43f af51 	beq.w	800b2f6 <_printf_float+0xbe>
 800b454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b458:	429a      	cmp	r2, r3
 800b45a:	db02      	blt.n	800b462 <_printf_float+0x22a>
 800b45c:	6823      	ldr	r3, [r4, #0]
 800b45e:	07d8      	lsls	r0, r3, #31
 800b460:	d510      	bpl.n	800b484 <_printf_float+0x24c>
 800b462:	ee18 3a10 	vmov	r3, s16
 800b466:	4652      	mov	r2, sl
 800b468:	4631      	mov	r1, r6
 800b46a:	4628      	mov	r0, r5
 800b46c:	47b8      	blx	r7
 800b46e:	3001      	adds	r0, #1
 800b470:	f43f af41 	beq.w	800b2f6 <_printf_float+0xbe>
 800b474:	f04f 0800 	mov.w	r8, #0
 800b478:	f104 091a 	add.w	r9, r4, #26
 800b47c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b47e:	3b01      	subs	r3, #1
 800b480:	4543      	cmp	r3, r8
 800b482:	dc09      	bgt.n	800b498 <_printf_float+0x260>
 800b484:	6823      	ldr	r3, [r4, #0]
 800b486:	079b      	lsls	r3, r3, #30
 800b488:	f100 8107 	bmi.w	800b69a <_printf_float+0x462>
 800b48c:	68e0      	ldr	r0, [r4, #12]
 800b48e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b490:	4298      	cmp	r0, r3
 800b492:	bfb8      	it	lt
 800b494:	4618      	movlt	r0, r3
 800b496:	e730      	b.n	800b2fa <_printf_float+0xc2>
 800b498:	2301      	movs	r3, #1
 800b49a:	464a      	mov	r2, r9
 800b49c:	4631      	mov	r1, r6
 800b49e:	4628      	mov	r0, r5
 800b4a0:	47b8      	blx	r7
 800b4a2:	3001      	adds	r0, #1
 800b4a4:	f43f af27 	beq.w	800b2f6 <_printf_float+0xbe>
 800b4a8:	f108 0801 	add.w	r8, r8, #1
 800b4ac:	e7e6      	b.n	800b47c <_printf_float+0x244>
 800b4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	dc39      	bgt.n	800b528 <_printf_float+0x2f0>
 800b4b4:	4a1b      	ldr	r2, [pc, #108]	; (800b524 <_printf_float+0x2ec>)
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	4631      	mov	r1, r6
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	47b8      	blx	r7
 800b4be:	3001      	adds	r0, #1
 800b4c0:	f43f af19 	beq.w	800b2f6 <_printf_float+0xbe>
 800b4c4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	d102      	bne.n	800b4d2 <_printf_float+0x29a>
 800b4cc:	6823      	ldr	r3, [r4, #0]
 800b4ce:	07d9      	lsls	r1, r3, #31
 800b4d0:	d5d8      	bpl.n	800b484 <_printf_float+0x24c>
 800b4d2:	ee18 3a10 	vmov	r3, s16
 800b4d6:	4652      	mov	r2, sl
 800b4d8:	4631      	mov	r1, r6
 800b4da:	4628      	mov	r0, r5
 800b4dc:	47b8      	blx	r7
 800b4de:	3001      	adds	r0, #1
 800b4e0:	f43f af09 	beq.w	800b2f6 <_printf_float+0xbe>
 800b4e4:	f04f 0900 	mov.w	r9, #0
 800b4e8:	f104 0a1a 	add.w	sl, r4, #26
 800b4ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ee:	425b      	negs	r3, r3
 800b4f0:	454b      	cmp	r3, r9
 800b4f2:	dc01      	bgt.n	800b4f8 <_printf_float+0x2c0>
 800b4f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4f6:	e792      	b.n	800b41e <_printf_float+0x1e6>
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	4652      	mov	r2, sl
 800b4fc:	4631      	mov	r1, r6
 800b4fe:	4628      	mov	r0, r5
 800b500:	47b8      	blx	r7
 800b502:	3001      	adds	r0, #1
 800b504:	f43f aef7 	beq.w	800b2f6 <_printf_float+0xbe>
 800b508:	f109 0901 	add.w	r9, r9, #1
 800b50c:	e7ee      	b.n	800b4ec <_printf_float+0x2b4>
 800b50e:	bf00      	nop
 800b510:	7fefffff 	.word	0x7fefffff
 800b514:	0800e829 	.word	0x0800e829
 800b518:	0800e82d 	.word	0x0800e82d
 800b51c:	0800e831 	.word	0x0800e831
 800b520:	0800e835 	.word	0x0800e835
 800b524:	0800e839 	.word	0x0800e839
 800b528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b52a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b52c:	429a      	cmp	r2, r3
 800b52e:	bfa8      	it	ge
 800b530:	461a      	movge	r2, r3
 800b532:	2a00      	cmp	r2, #0
 800b534:	4691      	mov	r9, r2
 800b536:	dc37      	bgt.n	800b5a8 <_printf_float+0x370>
 800b538:	f04f 0b00 	mov.w	fp, #0
 800b53c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b540:	f104 021a 	add.w	r2, r4, #26
 800b544:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b546:	9305      	str	r3, [sp, #20]
 800b548:	eba3 0309 	sub.w	r3, r3, r9
 800b54c:	455b      	cmp	r3, fp
 800b54e:	dc33      	bgt.n	800b5b8 <_printf_float+0x380>
 800b550:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b554:	429a      	cmp	r2, r3
 800b556:	db3b      	blt.n	800b5d0 <_printf_float+0x398>
 800b558:	6823      	ldr	r3, [r4, #0]
 800b55a:	07da      	lsls	r2, r3, #31
 800b55c:	d438      	bmi.n	800b5d0 <_printf_float+0x398>
 800b55e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b562:	eba2 0903 	sub.w	r9, r2, r3
 800b566:	9b05      	ldr	r3, [sp, #20]
 800b568:	1ad2      	subs	r2, r2, r3
 800b56a:	4591      	cmp	r9, r2
 800b56c:	bfa8      	it	ge
 800b56e:	4691      	movge	r9, r2
 800b570:	f1b9 0f00 	cmp.w	r9, #0
 800b574:	dc35      	bgt.n	800b5e2 <_printf_float+0x3aa>
 800b576:	f04f 0800 	mov.w	r8, #0
 800b57a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b57e:	f104 0a1a 	add.w	sl, r4, #26
 800b582:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b586:	1a9b      	subs	r3, r3, r2
 800b588:	eba3 0309 	sub.w	r3, r3, r9
 800b58c:	4543      	cmp	r3, r8
 800b58e:	f77f af79 	ble.w	800b484 <_printf_float+0x24c>
 800b592:	2301      	movs	r3, #1
 800b594:	4652      	mov	r2, sl
 800b596:	4631      	mov	r1, r6
 800b598:	4628      	mov	r0, r5
 800b59a:	47b8      	blx	r7
 800b59c:	3001      	adds	r0, #1
 800b59e:	f43f aeaa 	beq.w	800b2f6 <_printf_float+0xbe>
 800b5a2:	f108 0801 	add.w	r8, r8, #1
 800b5a6:	e7ec      	b.n	800b582 <_printf_float+0x34a>
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	4631      	mov	r1, r6
 800b5ac:	4642      	mov	r2, r8
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	47b8      	blx	r7
 800b5b2:	3001      	adds	r0, #1
 800b5b4:	d1c0      	bne.n	800b538 <_printf_float+0x300>
 800b5b6:	e69e      	b.n	800b2f6 <_printf_float+0xbe>
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	4631      	mov	r1, r6
 800b5bc:	4628      	mov	r0, r5
 800b5be:	9205      	str	r2, [sp, #20]
 800b5c0:	47b8      	blx	r7
 800b5c2:	3001      	adds	r0, #1
 800b5c4:	f43f ae97 	beq.w	800b2f6 <_printf_float+0xbe>
 800b5c8:	9a05      	ldr	r2, [sp, #20]
 800b5ca:	f10b 0b01 	add.w	fp, fp, #1
 800b5ce:	e7b9      	b.n	800b544 <_printf_float+0x30c>
 800b5d0:	ee18 3a10 	vmov	r3, s16
 800b5d4:	4652      	mov	r2, sl
 800b5d6:	4631      	mov	r1, r6
 800b5d8:	4628      	mov	r0, r5
 800b5da:	47b8      	blx	r7
 800b5dc:	3001      	adds	r0, #1
 800b5de:	d1be      	bne.n	800b55e <_printf_float+0x326>
 800b5e0:	e689      	b.n	800b2f6 <_printf_float+0xbe>
 800b5e2:	9a05      	ldr	r2, [sp, #20]
 800b5e4:	464b      	mov	r3, r9
 800b5e6:	4442      	add	r2, r8
 800b5e8:	4631      	mov	r1, r6
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	47b8      	blx	r7
 800b5ee:	3001      	adds	r0, #1
 800b5f0:	d1c1      	bne.n	800b576 <_printf_float+0x33e>
 800b5f2:	e680      	b.n	800b2f6 <_printf_float+0xbe>
 800b5f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5f6:	2a01      	cmp	r2, #1
 800b5f8:	dc01      	bgt.n	800b5fe <_printf_float+0x3c6>
 800b5fa:	07db      	lsls	r3, r3, #31
 800b5fc:	d53a      	bpl.n	800b674 <_printf_float+0x43c>
 800b5fe:	2301      	movs	r3, #1
 800b600:	4642      	mov	r2, r8
 800b602:	4631      	mov	r1, r6
 800b604:	4628      	mov	r0, r5
 800b606:	47b8      	blx	r7
 800b608:	3001      	adds	r0, #1
 800b60a:	f43f ae74 	beq.w	800b2f6 <_printf_float+0xbe>
 800b60e:	ee18 3a10 	vmov	r3, s16
 800b612:	4652      	mov	r2, sl
 800b614:	4631      	mov	r1, r6
 800b616:	4628      	mov	r0, r5
 800b618:	47b8      	blx	r7
 800b61a:	3001      	adds	r0, #1
 800b61c:	f43f ae6b 	beq.w	800b2f6 <_printf_float+0xbe>
 800b620:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b624:	2200      	movs	r2, #0
 800b626:	2300      	movs	r3, #0
 800b628:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b62c:	f7f5 fa5c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b630:	b9d8      	cbnz	r0, 800b66a <_printf_float+0x432>
 800b632:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b636:	f108 0201 	add.w	r2, r8, #1
 800b63a:	4631      	mov	r1, r6
 800b63c:	4628      	mov	r0, r5
 800b63e:	47b8      	blx	r7
 800b640:	3001      	adds	r0, #1
 800b642:	d10e      	bne.n	800b662 <_printf_float+0x42a>
 800b644:	e657      	b.n	800b2f6 <_printf_float+0xbe>
 800b646:	2301      	movs	r3, #1
 800b648:	4652      	mov	r2, sl
 800b64a:	4631      	mov	r1, r6
 800b64c:	4628      	mov	r0, r5
 800b64e:	47b8      	blx	r7
 800b650:	3001      	adds	r0, #1
 800b652:	f43f ae50 	beq.w	800b2f6 <_printf_float+0xbe>
 800b656:	f108 0801 	add.w	r8, r8, #1
 800b65a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b65c:	3b01      	subs	r3, #1
 800b65e:	4543      	cmp	r3, r8
 800b660:	dcf1      	bgt.n	800b646 <_printf_float+0x40e>
 800b662:	464b      	mov	r3, r9
 800b664:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b668:	e6da      	b.n	800b420 <_printf_float+0x1e8>
 800b66a:	f04f 0800 	mov.w	r8, #0
 800b66e:	f104 0a1a 	add.w	sl, r4, #26
 800b672:	e7f2      	b.n	800b65a <_printf_float+0x422>
 800b674:	2301      	movs	r3, #1
 800b676:	4642      	mov	r2, r8
 800b678:	e7df      	b.n	800b63a <_printf_float+0x402>
 800b67a:	2301      	movs	r3, #1
 800b67c:	464a      	mov	r2, r9
 800b67e:	4631      	mov	r1, r6
 800b680:	4628      	mov	r0, r5
 800b682:	47b8      	blx	r7
 800b684:	3001      	adds	r0, #1
 800b686:	f43f ae36 	beq.w	800b2f6 <_printf_float+0xbe>
 800b68a:	f108 0801 	add.w	r8, r8, #1
 800b68e:	68e3      	ldr	r3, [r4, #12]
 800b690:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b692:	1a5b      	subs	r3, r3, r1
 800b694:	4543      	cmp	r3, r8
 800b696:	dcf0      	bgt.n	800b67a <_printf_float+0x442>
 800b698:	e6f8      	b.n	800b48c <_printf_float+0x254>
 800b69a:	f04f 0800 	mov.w	r8, #0
 800b69e:	f104 0919 	add.w	r9, r4, #25
 800b6a2:	e7f4      	b.n	800b68e <_printf_float+0x456>

0800b6a4 <_printf_common>:
 800b6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a8:	4616      	mov	r6, r2
 800b6aa:	4699      	mov	r9, r3
 800b6ac:	688a      	ldr	r2, [r1, #8]
 800b6ae:	690b      	ldr	r3, [r1, #16]
 800b6b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	bfb8      	it	lt
 800b6b8:	4613      	movlt	r3, r2
 800b6ba:	6033      	str	r3, [r6, #0]
 800b6bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6c0:	4607      	mov	r7, r0
 800b6c2:	460c      	mov	r4, r1
 800b6c4:	b10a      	cbz	r2, 800b6ca <_printf_common+0x26>
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	6033      	str	r3, [r6, #0]
 800b6ca:	6823      	ldr	r3, [r4, #0]
 800b6cc:	0699      	lsls	r1, r3, #26
 800b6ce:	bf42      	ittt	mi
 800b6d0:	6833      	ldrmi	r3, [r6, #0]
 800b6d2:	3302      	addmi	r3, #2
 800b6d4:	6033      	strmi	r3, [r6, #0]
 800b6d6:	6825      	ldr	r5, [r4, #0]
 800b6d8:	f015 0506 	ands.w	r5, r5, #6
 800b6dc:	d106      	bne.n	800b6ec <_printf_common+0x48>
 800b6de:	f104 0a19 	add.w	sl, r4, #25
 800b6e2:	68e3      	ldr	r3, [r4, #12]
 800b6e4:	6832      	ldr	r2, [r6, #0]
 800b6e6:	1a9b      	subs	r3, r3, r2
 800b6e8:	42ab      	cmp	r3, r5
 800b6ea:	dc26      	bgt.n	800b73a <_printf_common+0x96>
 800b6ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b6f0:	1e13      	subs	r3, r2, #0
 800b6f2:	6822      	ldr	r2, [r4, #0]
 800b6f4:	bf18      	it	ne
 800b6f6:	2301      	movne	r3, #1
 800b6f8:	0692      	lsls	r2, r2, #26
 800b6fa:	d42b      	bmi.n	800b754 <_printf_common+0xb0>
 800b6fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b700:	4649      	mov	r1, r9
 800b702:	4638      	mov	r0, r7
 800b704:	47c0      	blx	r8
 800b706:	3001      	adds	r0, #1
 800b708:	d01e      	beq.n	800b748 <_printf_common+0xa4>
 800b70a:	6823      	ldr	r3, [r4, #0]
 800b70c:	6922      	ldr	r2, [r4, #16]
 800b70e:	f003 0306 	and.w	r3, r3, #6
 800b712:	2b04      	cmp	r3, #4
 800b714:	bf02      	ittt	eq
 800b716:	68e5      	ldreq	r5, [r4, #12]
 800b718:	6833      	ldreq	r3, [r6, #0]
 800b71a:	1aed      	subeq	r5, r5, r3
 800b71c:	68a3      	ldr	r3, [r4, #8]
 800b71e:	bf0c      	ite	eq
 800b720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b724:	2500      	movne	r5, #0
 800b726:	4293      	cmp	r3, r2
 800b728:	bfc4      	itt	gt
 800b72a:	1a9b      	subgt	r3, r3, r2
 800b72c:	18ed      	addgt	r5, r5, r3
 800b72e:	2600      	movs	r6, #0
 800b730:	341a      	adds	r4, #26
 800b732:	42b5      	cmp	r5, r6
 800b734:	d11a      	bne.n	800b76c <_printf_common+0xc8>
 800b736:	2000      	movs	r0, #0
 800b738:	e008      	b.n	800b74c <_printf_common+0xa8>
 800b73a:	2301      	movs	r3, #1
 800b73c:	4652      	mov	r2, sl
 800b73e:	4649      	mov	r1, r9
 800b740:	4638      	mov	r0, r7
 800b742:	47c0      	blx	r8
 800b744:	3001      	adds	r0, #1
 800b746:	d103      	bne.n	800b750 <_printf_common+0xac>
 800b748:	f04f 30ff 	mov.w	r0, #4294967295
 800b74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b750:	3501      	adds	r5, #1
 800b752:	e7c6      	b.n	800b6e2 <_printf_common+0x3e>
 800b754:	18e1      	adds	r1, r4, r3
 800b756:	1c5a      	adds	r2, r3, #1
 800b758:	2030      	movs	r0, #48	; 0x30
 800b75a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b75e:	4422      	add	r2, r4
 800b760:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b764:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b768:	3302      	adds	r3, #2
 800b76a:	e7c7      	b.n	800b6fc <_printf_common+0x58>
 800b76c:	2301      	movs	r3, #1
 800b76e:	4622      	mov	r2, r4
 800b770:	4649      	mov	r1, r9
 800b772:	4638      	mov	r0, r7
 800b774:	47c0      	blx	r8
 800b776:	3001      	adds	r0, #1
 800b778:	d0e6      	beq.n	800b748 <_printf_common+0xa4>
 800b77a:	3601      	adds	r6, #1
 800b77c:	e7d9      	b.n	800b732 <_printf_common+0x8e>
	...

0800b780 <_printf_i>:
 800b780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b784:	7e0f      	ldrb	r7, [r1, #24]
 800b786:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b788:	2f78      	cmp	r7, #120	; 0x78
 800b78a:	4691      	mov	r9, r2
 800b78c:	4680      	mov	r8, r0
 800b78e:	460c      	mov	r4, r1
 800b790:	469a      	mov	sl, r3
 800b792:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b796:	d807      	bhi.n	800b7a8 <_printf_i+0x28>
 800b798:	2f62      	cmp	r7, #98	; 0x62
 800b79a:	d80a      	bhi.n	800b7b2 <_printf_i+0x32>
 800b79c:	2f00      	cmp	r7, #0
 800b79e:	f000 80d4 	beq.w	800b94a <_printf_i+0x1ca>
 800b7a2:	2f58      	cmp	r7, #88	; 0x58
 800b7a4:	f000 80c0 	beq.w	800b928 <_printf_i+0x1a8>
 800b7a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b7b0:	e03a      	b.n	800b828 <_printf_i+0xa8>
 800b7b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b7b6:	2b15      	cmp	r3, #21
 800b7b8:	d8f6      	bhi.n	800b7a8 <_printf_i+0x28>
 800b7ba:	a101      	add	r1, pc, #4	; (adr r1, 800b7c0 <_printf_i+0x40>)
 800b7bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7c0:	0800b819 	.word	0x0800b819
 800b7c4:	0800b82d 	.word	0x0800b82d
 800b7c8:	0800b7a9 	.word	0x0800b7a9
 800b7cc:	0800b7a9 	.word	0x0800b7a9
 800b7d0:	0800b7a9 	.word	0x0800b7a9
 800b7d4:	0800b7a9 	.word	0x0800b7a9
 800b7d8:	0800b82d 	.word	0x0800b82d
 800b7dc:	0800b7a9 	.word	0x0800b7a9
 800b7e0:	0800b7a9 	.word	0x0800b7a9
 800b7e4:	0800b7a9 	.word	0x0800b7a9
 800b7e8:	0800b7a9 	.word	0x0800b7a9
 800b7ec:	0800b931 	.word	0x0800b931
 800b7f0:	0800b859 	.word	0x0800b859
 800b7f4:	0800b8eb 	.word	0x0800b8eb
 800b7f8:	0800b7a9 	.word	0x0800b7a9
 800b7fc:	0800b7a9 	.word	0x0800b7a9
 800b800:	0800b953 	.word	0x0800b953
 800b804:	0800b7a9 	.word	0x0800b7a9
 800b808:	0800b859 	.word	0x0800b859
 800b80c:	0800b7a9 	.word	0x0800b7a9
 800b810:	0800b7a9 	.word	0x0800b7a9
 800b814:	0800b8f3 	.word	0x0800b8f3
 800b818:	682b      	ldr	r3, [r5, #0]
 800b81a:	1d1a      	adds	r2, r3, #4
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	602a      	str	r2, [r5, #0]
 800b820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b828:	2301      	movs	r3, #1
 800b82a:	e09f      	b.n	800b96c <_printf_i+0x1ec>
 800b82c:	6820      	ldr	r0, [r4, #0]
 800b82e:	682b      	ldr	r3, [r5, #0]
 800b830:	0607      	lsls	r7, r0, #24
 800b832:	f103 0104 	add.w	r1, r3, #4
 800b836:	6029      	str	r1, [r5, #0]
 800b838:	d501      	bpl.n	800b83e <_printf_i+0xbe>
 800b83a:	681e      	ldr	r6, [r3, #0]
 800b83c:	e003      	b.n	800b846 <_printf_i+0xc6>
 800b83e:	0646      	lsls	r6, r0, #25
 800b840:	d5fb      	bpl.n	800b83a <_printf_i+0xba>
 800b842:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b846:	2e00      	cmp	r6, #0
 800b848:	da03      	bge.n	800b852 <_printf_i+0xd2>
 800b84a:	232d      	movs	r3, #45	; 0x2d
 800b84c:	4276      	negs	r6, r6
 800b84e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b852:	485a      	ldr	r0, [pc, #360]	; (800b9bc <_printf_i+0x23c>)
 800b854:	230a      	movs	r3, #10
 800b856:	e012      	b.n	800b87e <_printf_i+0xfe>
 800b858:	682b      	ldr	r3, [r5, #0]
 800b85a:	6820      	ldr	r0, [r4, #0]
 800b85c:	1d19      	adds	r1, r3, #4
 800b85e:	6029      	str	r1, [r5, #0]
 800b860:	0605      	lsls	r5, r0, #24
 800b862:	d501      	bpl.n	800b868 <_printf_i+0xe8>
 800b864:	681e      	ldr	r6, [r3, #0]
 800b866:	e002      	b.n	800b86e <_printf_i+0xee>
 800b868:	0641      	lsls	r1, r0, #25
 800b86a:	d5fb      	bpl.n	800b864 <_printf_i+0xe4>
 800b86c:	881e      	ldrh	r6, [r3, #0]
 800b86e:	4853      	ldr	r0, [pc, #332]	; (800b9bc <_printf_i+0x23c>)
 800b870:	2f6f      	cmp	r7, #111	; 0x6f
 800b872:	bf0c      	ite	eq
 800b874:	2308      	moveq	r3, #8
 800b876:	230a      	movne	r3, #10
 800b878:	2100      	movs	r1, #0
 800b87a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b87e:	6865      	ldr	r5, [r4, #4]
 800b880:	60a5      	str	r5, [r4, #8]
 800b882:	2d00      	cmp	r5, #0
 800b884:	bfa2      	ittt	ge
 800b886:	6821      	ldrge	r1, [r4, #0]
 800b888:	f021 0104 	bicge.w	r1, r1, #4
 800b88c:	6021      	strge	r1, [r4, #0]
 800b88e:	b90e      	cbnz	r6, 800b894 <_printf_i+0x114>
 800b890:	2d00      	cmp	r5, #0
 800b892:	d04b      	beq.n	800b92c <_printf_i+0x1ac>
 800b894:	4615      	mov	r5, r2
 800b896:	fbb6 f1f3 	udiv	r1, r6, r3
 800b89a:	fb03 6711 	mls	r7, r3, r1, r6
 800b89e:	5dc7      	ldrb	r7, [r0, r7]
 800b8a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b8a4:	4637      	mov	r7, r6
 800b8a6:	42bb      	cmp	r3, r7
 800b8a8:	460e      	mov	r6, r1
 800b8aa:	d9f4      	bls.n	800b896 <_printf_i+0x116>
 800b8ac:	2b08      	cmp	r3, #8
 800b8ae:	d10b      	bne.n	800b8c8 <_printf_i+0x148>
 800b8b0:	6823      	ldr	r3, [r4, #0]
 800b8b2:	07de      	lsls	r6, r3, #31
 800b8b4:	d508      	bpl.n	800b8c8 <_printf_i+0x148>
 800b8b6:	6923      	ldr	r3, [r4, #16]
 800b8b8:	6861      	ldr	r1, [r4, #4]
 800b8ba:	4299      	cmp	r1, r3
 800b8bc:	bfde      	ittt	le
 800b8be:	2330      	movle	r3, #48	; 0x30
 800b8c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b8c8:	1b52      	subs	r2, r2, r5
 800b8ca:	6122      	str	r2, [r4, #16]
 800b8cc:	f8cd a000 	str.w	sl, [sp]
 800b8d0:	464b      	mov	r3, r9
 800b8d2:	aa03      	add	r2, sp, #12
 800b8d4:	4621      	mov	r1, r4
 800b8d6:	4640      	mov	r0, r8
 800b8d8:	f7ff fee4 	bl	800b6a4 <_printf_common>
 800b8dc:	3001      	adds	r0, #1
 800b8de:	d14a      	bne.n	800b976 <_printf_i+0x1f6>
 800b8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e4:	b004      	add	sp, #16
 800b8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ea:	6823      	ldr	r3, [r4, #0]
 800b8ec:	f043 0320 	orr.w	r3, r3, #32
 800b8f0:	6023      	str	r3, [r4, #0]
 800b8f2:	4833      	ldr	r0, [pc, #204]	; (800b9c0 <_printf_i+0x240>)
 800b8f4:	2778      	movs	r7, #120	; 0x78
 800b8f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b8fa:	6823      	ldr	r3, [r4, #0]
 800b8fc:	6829      	ldr	r1, [r5, #0]
 800b8fe:	061f      	lsls	r7, r3, #24
 800b900:	f851 6b04 	ldr.w	r6, [r1], #4
 800b904:	d402      	bmi.n	800b90c <_printf_i+0x18c>
 800b906:	065f      	lsls	r7, r3, #25
 800b908:	bf48      	it	mi
 800b90a:	b2b6      	uxthmi	r6, r6
 800b90c:	07df      	lsls	r7, r3, #31
 800b90e:	bf48      	it	mi
 800b910:	f043 0320 	orrmi.w	r3, r3, #32
 800b914:	6029      	str	r1, [r5, #0]
 800b916:	bf48      	it	mi
 800b918:	6023      	strmi	r3, [r4, #0]
 800b91a:	b91e      	cbnz	r6, 800b924 <_printf_i+0x1a4>
 800b91c:	6823      	ldr	r3, [r4, #0]
 800b91e:	f023 0320 	bic.w	r3, r3, #32
 800b922:	6023      	str	r3, [r4, #0]
 800b924:	2310      	movs	r3, #16
 800b926:	e7a7      	b.n	800b878 <_printf_i+0xf8>
 800b928:	4824      	ldr	r0, [pc, #144]	; (800b9bc <_printf_i+0x23c>)
 800b92a:	e7e4      	b.n	800b8f6 <_printf_i+0x176>
 800b92c:	4615      	mov	r5, r2
 800b92e:	e7bd      	b.n	800b8ac <_printf_i+0x12c>
 800b930:	682b      	ldr	r3, [r5, #0]
 800b932:	6826      	ldr	r6, [r4, #0]
 800b934:	6961      	ldr	r1, [r4, #20]
 800b936:	1d18      	adds	r0, r3, #4
 800b938:	6028      	str	r0, [r5, #0]
 800b93a:	0635      	lsls	r5, r6, #24
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	d501      	bpl.n	800b944 <_printf_i+0x1c4>
 800b940:	6019      	str	r1, [r3, #0]
 800b942:	e002      	b.n	800b94a <_printf_i+0x1ca>
 800b944:	0670      	lsls	r0, r6, #25
 800b946:	d5fb      	bpl.n	800b940 <_printf_i+0x1c0>
 800b948:	8019      	strh	r1, [r3, #0]
 800b94a:	2300      	movs	r3, #0
 800b94c:	6123      	str	r3, [r4, #16]
 800b94e:	4615      	mov	r5, r2
 800b950:	e7bc      	b.n	800b8cc <_printf_i+0x14c>
 800b952:	682b      	ldr	r3, [r5, #0]
 800b954:	1d1a      	adds	r2, r3, #4
 800b956:	602a      	str	r2, [r5, #0]
 800b958:	681d      	ldr	r5, [r3, #0]
 800b95a:	6862      	ldr	r2, [r4, #4]
 800b95c:	2100      	movs	r1, #0
 800b95e:	4628      	mov	r0, r5
 800b960:	f7f4 fc46 	bl	80001f0 <memchr>
 800b964:	b108      	cbz	r0, 800b96a <_printf_i+0x1ea>
 800b966:	1b40      	subs	r0, r0, r5
 800b968:	6060      	str	r0, [r4, #4]
 800b96a:	6863      	ldr	r3, [r4, #4]
 800b96c:	6123      	str	r3, [r4, #16]
 800b96e:	2300      	movs	r3, #0
 800b970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b974:	e7aa      	b.n	800b8cc <_printf_i+0x14c>
 800b976:	6923      	ldr	r3, [r4, #16]
 800b978:	462a      	mov	r2, r5
 800b97a:	4649      	mov	r1, r9
 800b97c:	4640      	mov	r0, r8
 800b97e:	47d0      	blx	sl
 800b980:	3001      	adds	r0, #1
 800b982:	d0ad      	beq.n	800b8e0 <_printf_i+0x160>
 800b984:	6823      	ldr	r3, [r4, #0]
 800b986:	079b      	lsls	r3, r3, #30
 800b988:	d413      	bmi.n	800b9b2 <_printf_i+0x232>
 800b98a:	68e0      	ldr	r0, [r4, #12]
 800b98c:	9b03      	ldr	r3, [sp, #12]
 800b98e:	4298      	cmp	r0, r3
 800b990:	bfb8      	it	lt
 800b992:	4618      	movlt	r0, r3
 800b994:	e7a6      	b.n	800b8e4 <_printf_i+0x164>
 800b996:	2301      	movs	r3, #1
 800b998:	4632      	mov	r2, r6
 800b99a:	4649      	mov	r1, r9
 800b99c:	4640      	mov	r0, r8
 800b99e:	47d0      	blx	sl
 800b9a0:	3001      	adds	r0, #1
 800b9a2:	d09d      	beq.n	800b8e0 <_printf_i+0x160>
 800b9a4:	3501      	adds	r5, #1
 800b9a6:	68e3      	ldr	r3, [r4, #12]
 800b9a8:	9903      	ldr	r1, [sp, #12]
 800b9aa:	1a5b      	subs	r3, r3, r1
 800b9ac:	42ab      	cmp	r3, r5
 800b9ae:	dcf2      	bgt.n	800b996 <_printf_i+0x216>
 800b9b0:	e7eb      	b.n	800b98a <_printf_i+0x20a>
 800b9b2:	2500      	movs	r5, #0
 800b9b4:	f104 0619 	add.w	r6, r4, #25
 800b9b8:	e7f5      	b.n	800b9a6 <_printf_i+0x226>
 800b9ba:	bf00      	nop
 800b9bc:	0800e83b 	.word	0x0800e83b
 800b9c0:	0800e84c 	.word	0x0800e84c

0800b9c4 <std>:
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	b510      	push	{r4, lr}
 800b9c8:	4604      	mov	r4, r0
 800b9ca:	e9c0 3300 	strd	r3, r3, [r0]
 800b9ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b9d2:	6083      	str	r3, [r0, #8]
 800b9d4:	8181      	strh	r1, [r0, #12]
 800b9d6:	6643      	str	r3, [r0, #100]	; 0x64
 800b9d8:	81c2      	strh	r2, [r0, #14]
 800b9da:	6183      	str	r3, [r0, #24]
 800b9dc:	4619      	mov	r1, r3
 800b9de:	2208      	movs	r2, #8
 800b9e0:	305c      	adds	r0, #92	; 0x5c
 800b9e2:	f000 f902 	bl	800bbea <memset>
 800b9e6:	4b05      	ldr	r3, [pc, #20]	; (800b9fc <std+0x38>)
 800b9e8:	6263      	str	r3, [r4, #36]	; 0x24
 800b9ea:	4b05      	ldr	r3, [pc, #20]	; (800ba00 <std+0x3c>)
 800b9ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800b9ee:	4b05      	ldr	r3, [pc, #20]	; (800ba04 <std+0x40>)
 800b9f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b9f2:	4b05      	ldr	r3, [pc, #20]	; (800ba08 <std+0x44>)
 800b9f4:	6224      	str	r4, [r4, #32]
 800b9f6:	6323      	str	r3, [r4, #48]	; 0x30
 800b9f8:	bd10      	pop	{r4, pc}
 800b9fa:	bf00      	nop
 800b9fc:	0800bb65 	.word	0x0800bb65
 800ba00:	0800bb87 	.word	0x0800bb87
 800ba04:	0800bbbf 	.word	0x0800bbbf
 800ba08:	0800bbe3 	.word	0x0800bbe3

0800ba0c <stdio_exit_handler>:
 800ba0c:	4a02      	ldr	r2, [pc, #8]	; (800ba18 <stdio_exit_handler+0xc>)
 800ba0e:	4903      	ldr	r1, [pc, #12]	; (800ba1c <stdio_exit_handler+0x10>)
 800ba10:	4803      	ldr	r0, [pc, #12]	; (800ba20 <stdio_exit_handler+0x14>)
 800ba12:	f000 b869 	b.w	800bae8 <_fwalk_sglue>
 800ba16:	bf00      	nop
 800ba18:	200000a4 	.word	0x200000a4
 800ba1c:	0800def9 	.word	0x0800def9
 800ba20:	2000021c 	.word	0x2000021c

0800ba24 <cleanup_stdio>:
 800ba24:	6841      	ldr	r1, [r0, #4]
 800ba26:	4b0c      	ldr	r3, [pc, #48]	; (800ba58 <cleanup_stdio+0x34>)
 800ba28:	4299      	cmp	r1, r3
 800ba2a:	b510      	push	{r4, lr}
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	d001      	beq.n	800ba34 <cleanup_stdio+0x10>
 800ba30:	f002 fa62 	bl	800def8 <_fflush_r>
 800ba34:	68a1      	ldr	r1, [r4, #8]
 800ba36:	4b09      	ldr	r3, [pc, #36]	; (800ba5c <cleanup_stdio+0x38>)
 800ba38:	4299      	cmp	r1, r3
 800ba3a:	d002      	beq.n	800ba42 <cleanup_stdio+0x1e>
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f002 fa5b 	bl	800def8 <_fflush_r>
 800ba42:	68e1      	ldr	r1, [r4, #12]
 800ba44:	4b06      	ldr	r3, [pc, #24]	; (800ba60 <cleanup_stdio+0x3c>)
 800ba46:	4299      	cmp	r1, r3
 800ba48:	d004      	beq.n	800ba54 <cleanup_stdio+0x30>
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba50:	f002 ba52 	b.w	800def8 <_fflush_r>
 800ba54:	bd10      	pop	{r4, pc}
 800ba56:	bf00      	nop
 800ba58:	20000a74 	.word	0x20000a74
 800ba5c:	20000adc 	.word	0x20000adc
 800ba60:	20000b44 	.word	0x20000b44

0800ba64 <global_stdio_init.part.0>:
 800ba64:	b510      	push	{r4, lr}
 800ba66:	4b0b      	ldr	r3, [pc, #44]	; (800ba94 <global_stdio_init.part.0+0x30>)
 800ba68:	4c0b      	ldr	r4, [pc, #44]	; (800ba98 <global_stdio_init.part.0+0x34>)
 800ba6a:	4a0c      	ldr	r2, [pc, #48]	; (800ba9c <global_stdio_init.part.0+0x38>)
 800ba6c:	601a      	str	r2, [r3, #0]
 800ba6e:	4620      	mov	r0, r4
 800ba70:	2200      	movs	r2, #0
 800ba72:	2104      	movs	r1, #4
 800ba74:	f7ff ffa6 	bl	800b9c4 <std>
 800ba78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	2109      	movs	r1, #9
 800ba80:	f7ff ffa0 	bl	800b9c4 <std>
 800ba84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ba88:	2202      	movs	r2, #2
 800ba8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba8e:	2112      	movs	r1, #18
 800ba90:	f7ff bf98 	b.w	800b9c4 <std>
 800ba94:	20000bac 	.word	0x20000bac
 800ba98:	20000a74 	.word	0x20000a74
 800ba9c:	0800ba0d 	.word	0x0800ba0d

0800baa0 <__sfp_lock_acquire>:
 800baa0:	4801      	ldr	r0, [pc, #4]	; (800baa8 <__sfp_lock_acquire+0x8>)
 800baa2:	f000 b941 	b.w	800bd28 <__retarget_lock_acquire_recursive>
 800baa6:	bf00      	nop
 800baa8:	20000bb5 	.word	0x20000bb5

0800baac <__sfp_lock_release>:
 800baac:	4801      	ldr	r0, [pc, #4]	; (800bab4 <__sfp_lock_release+0x8>)
 800baae:	f000 b93c 	b.w	800bd2a <__retarget_lock_release_recursive>
 800bab2:	bf00      	nop
 800bab4:	20000bb5 	.word	0x20000bb5

0800bab8 <__sinit>:
 800bab8:	b510      	push	{r4, lr}
 800baba:	4604      	mov	r4, r0
 800babc:	f7ff fff0 	bl	800baa0 <__sfp_lock_acquire>
 800bac0:	6a23      	ldr	r3, [r4, #32]
 800bac2:	b11b      	cbz	r3, 800bacc <__sinit+0x14>
 800bac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bac8:	f7ff bff0 	b.w	800baac <__sfp_lock_release>
 800bacc:	4b04      	ldr	r3, [pc, #16]	; (800bae0 <__sinit+0x28>)
 800bace:	6223      	str	r3, [r4, #32]
 800bad0:	4b04      	ldr	r3, [pc, #16]	; (800bae4 <__sinit+0x2c>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1f5      	bne.n	800bac4 <__sinit+0xc>
 800bad8:	f7ff ffc4 	bl	800ba64 <global_stdio_init.part.0>
 800badc:	e7f2      	b.n	800bac4 <__sinit+0xc>
 800bade:	bf00      	nop
 800bae0:	0800ba25 	.word	0x0800ba25
 800bae4:	20000bac 	.word	0x20000bac

0800bae8 <_fwalk_sglue>:
 800bae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800baec:	4607      	mov	r7, r0
 800baee:	4688      	mov	r8, r1
 800baf0:	4614      	mov	r4, r2
 800baf2:	2600      	movs	r6, #0
 800baf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800baf8:	f1b9 0901 	subs.w	r9, r9, #1
 800bafc:	d505      	bpl.n	800bb0a <_fwalk_sglue+0x22>
 800bafe:	6824      	ldr	r4, [r4, #0]
 800bb00:	2c00      	cmp	r4, #0
 800bb02:	d1f7      	bne.n	800baf4 <_fwalk_sglue+0xc>
 800bb04:	4630      	mov	r0, r6
 800bb06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb0a:	89ab      	ldrh	r3, [r5, #12]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d907      	bls.n	800bb20 <_fwalk_sglue+0x38>
 800bb10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb14:	3301      	adds	r3, #1
 800bb16:	d003      	beq.n	800bb20 <_fwalk_sglue+0x38>
 800bb18:	4629      	mov	r1, r5
 800bb1a:	4638      	mov	r0, r7
 800bb1c:	47c0      	blx	r8
 800bb1e:	4306      	orrs	r6, r0
 800bb20:	3568      	adds	r5, #104	; 0x68
 800bb22:	e7e9      	b.n	800baf8 <_fwalk_sglue+0x10>

0800bb24 <siprintf>:
 800bb24:	b40e      	push	{r1, r2, r3}
 800bb26:	b500      	push	{lr}
 800bb28:	b09c      	sub	sp, #112	; 0x70
 800bb2a:	ab1d      	add	r3, sp, #116	; 0x74
 800bb2c:	9002      	str	r0, [sp, #8]
 800bb2e:	9006      	str	r0, [sp, #24]
 800bb30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb34:	4809      	ldr	r0, [pc, #36]	; (800bb5c <siprintf+0x38>)
 800bb36:	9107      	str	r1, [sp, #28]
 800bb38:	9104      	str	r1, [sp, #16]
 800bb3a:	4909      	ldr	r1, [pc, #36]	; (800bb60 <siprintf+0x3c>)
 800bb3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb40:	9105      	str	r1, [sp, #20]
 800bb42:	6800      	ldr	r0, [r0, #0]
 800bb44:	9301      	str	r3, [sp, #4]
 800bb46:	a902      	add	r1, sp, #8
 800bb48:	f002 f852 	bl	800dbf0 <_svfiprintf_r>
 800bb4c:	9b02      	ldr	r3, [sp, #8]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	701a      	strb	r2, [r3, #0]
 800bb52:	b01c      	add	sp, #112	; 0x70
 800bb54:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb58:	b003      	add	sp, #12
 800bb5a:	4770      	bx	lr
 800bb5c:	20000268 	.word	0x20000268
 800bb60:	ffff0208 	.word	0xffff0208

0800bb64 <__sread>:
 800bb64:	b510      	push	{r4, lr}
 800bb66:	460c      	mov	r4, r1
 800bb68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb6c:	f000 f87e 	bl	800bc6c <_read_r>
 800bb70:	2800      	cmp	r0, #0
 800bb72:	bfab      	itete	ge
 800bb74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb76:	89a3      	ldrhlt	r3, [r4, #12]
 800bb78:	181b      	addge	r3, r3, r0
 800bb7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb7e:	bfac      	ite	ge
 800bb80:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb82:	81a3      	strhlt	r3, [r4, #12]
 800bb84:	bd10      	pop	{r4, pc}

0800bb86 <__swrite>:
 800bb86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb8a:	461f      	mov	r7, r3
 800bb8c:	898b      	ldrh	r3, [r1, #12]
 800bb8e:	05db      	lsls	r3, r3, #23
 800bb90:	4605      	mov	r5, r0
 800bb92:	460c      	mov	r4, r1
 800bb94:	4616      	mov	r6, r2
 800bb96:	d505      	bpl.n	800bba4 <__swrite+0x1e>
 800bb98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb9c:	2302      	movs	r3, #2
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f000 f852 	bl	800bc48 <_lseek_r>
 800bba4:	89a3      	ldrh	r3, [r4, #12]
 800bba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bbaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bbae:	81a3      	strh	r3, [r4, #12]
 800bbb0:	4632      	mov	r2, r6
 800bbb2:	463b      	mov	r3, r7
 800bbb4:	4628      	mov	r0, r5
 800bbb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbba:	f000 b879 	b.w	800bcb0 <_write_r>

0800bbbe <__sseek>:
 800bbbe:	b510      	push	{r4, lr}
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbc6:	f000 f83f 	bl	800bc48 <_lseek_r>
 800bbca:	1c43      	adds	r3, r0, #1
 800bbcc:	89a3      	ldrh	r3, [r4, #12]
 800bbce:	bf15      	itete	ne
 800bbd0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bbd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bbd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bbda:	81a3      	strheq	r3, [r4, #12]
 800bbdc:	bf18      	it	ne
 800bbde:	81a3      	strhne	r3, [r4, #12]
 800bbe0:	bd10      	pop	{r4, pc}

0800bbe2 <__sclose>:
 800bbe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bbe6:	f000 b81f 	b.w	800bc28 <_close_r>

0800bbea <memset>:
 800bbea:	4402      	add	r2, r0
 800bbec:	4603      	mov	r3, r0
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d100      	bne.n	800bbf4 <memset+0xa>
 800bbf2:	4770      	bx	lr
 800bbf4:	f803 1b01 	strb.w	r1, [r3], #1
 800bbf8:	e7f9      	b.n	800bbee <memset+0x4>

0800bbfa <strncmp>:
 800bbfa:	b510      	push	{r4, lr}
 800bbfc:	b16a      	cbz	r2, 800bc1a <strncmp+0x20>
 800bbfe:	3901      	subs	r1, #1
 800bc00:	1884      	adds	r4, r0, r2
 800bc02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc06:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d103      	bne.n	800bc16 <strncmp+0x1c>
 800bc0e:	42a0      	cmp	r0, r4
 800bc10:	d001      	beq.n	800bc16 <strncmp+0x1c>
 800bc12:	2a00      	cmp	r2, #0
 800bc14:	d1f5      	bne.n	800bc02 <strncmp+0x8>
 800bc16:	1ad0      	subs	r0, r2, r3
 800bc18:	bd10      	pop	{r4, pc}
 800bc1a:	4610      	mov	r0, r2
 800bc1c:	e7fc      	b.n	800bc18 <strncmp+0x1e>
	...

0800bc20 <_localeconv_r>:
 800bc20:	4800      	ldr	r0, [pc, #0]	; (800bc24 <_localeconv_r+0x4>)
 800bc22:	4770      	bx	lr
 800bc24:	200001a0 	.word	0x200001a0

0800bc28 <_close_r>:
 800bc28:	b538      	push	{r3, r4, r5, lr}
 800bc2a:	4d06      	ldr	r5, [pc, #24]	; (800bc44 <_close_r+0x1c>)
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	4604      	mov	r4, r0
 800bc30:	4608      	mov	r0, r1
 800bc32:	602b      	str	r3, [r5, #0]
 800bc34:	f7f7 fdc7 	bl	80037c6 <_close>
 800bc38:	1c43      	adds	r3, r0, #1
 800bc3a:	d102      	bne.n	800bc42 <_close_r+0x1a>
 800bc3c:	682b      	ldr	r3, [r5, #0]
 800bc3e:	b103      	cbz	r3, 800bc42 <_close_r+0x1a>
 800bc40:	6023      	str	r3, [r4, #0]
 800bc42:	bd38      	pop	{r3, r4, r5, pc}
 800bc44:	20000bb0 	.word	0x20000bb0

0800bc48 <_lseek_r>:
 800bc48:	b538      	push	{r3, r4, r5, lr}
 800bc4a:	4d07      	ldr	r5, [pc, #28]	; (800bc68 <_lseek_r+0x20>)
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	4608      	mov	r0, r1
 800bc50:	4611      	mov	r1, r2
 800bc52:	2200      	movs	r2, #0
 800bc54:	602a      	str	r2, [r5, #0]
 800bc56:	461a      	mov	r2, r3
 800bc58:	f7f7 fddc 	bl	8003814 <_lseek>
 800bc5c:	1c43      	adds	r3, r0, #1
 800bc5e:	d102      	bne.n	800bc66 <_lseek_r+0x1e>
 800bc60:	682b      	ldr	r3, [r5, #0]
 800bc62:	b103      	cbz	r3, 800bc66 <_lseek_r+0x1e>
 800bc64:	6023      	str	r3, [r4, #0]
 800bc66:	bd38      	pop	{r3, r4, r5, pc}
 800bc68:	20000bb0 	.word	0x20000bb0

0800bc6c <_read_r>:
 800bc6c:	b538      	push	{r3, r4, r5, lr}
 800bc6e:	4d07      	ldr	r5, [pc, #28]	; (800bc8c <_read_r+0x20>)
 800bc70:	4604      	mov	r4, r0
 800bc72:	4608      	mov	r0, r1
 800bc74:	4611      	mov	r1, r2
 800bc76:	2200      	movs	r2, #0
 800bc78:	602a      	str	r2, [r5, #0]
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	f7f7 fd6a 	bl	8003754 <_read>
 800bc80:	1c43      	adds	r3, r0, #1
 800bc82:	d102      	bne.n	800bc8a <_read_r+0x1e>
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	b103      	cbz	r3, 800bc8a <_read_r+0x1e>
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	bd38      	pop	{r3, r4, r5, pc}
 800bc8c:	20000bb0 	.word	0x20000bb0

0800bc90 <_sbrk_r>:
 800bc90:	b538      	push	{r3, r4, r5, lr}
 800bc92:	4d06      	ldr	r5, [pc, #24]	; (800bcac <_sbrk_r+0x1c>)
 800bc94:	2300      	movs	r3, #0
 800bc96:	4604      	mov	r4, r0
 800bc98:	4608      	mov	r0, r1
 800bc9a:	602b      	str	r3, [r5, #0]
 800bc9c:	f7f7 fdc8 	bl	8003830 <_sbrk>
 800bca0:	1c43      	adds	r3, r0, #1
 800bca2:	d102      	bne.n	800bcaa <_sbrk_r+0x1a>
 800bca4:	682b      	ldr	r3, [r5, #0]
 800bca6:	b103      	cbz	r3, 800bcaa <_sbrk_r+0x1a>
 800bca8:	6023      	str	r3, [r4, #0]
 800bcaa:	bd38      	pop	{r3, r4, r5, pc}
 800bcac:	20000bb0 	.word	0x20000bb0

0800bcb0 <_write_r>:
 800bcb0:	b538      	push	{r3, r4, r5, lr}
 800bcb2:	4d07      	ldr	r5, [pc, #28]	; (800bcd0 <_write_r+0x20>)
 800bcb4:	4604      	mov	r4, r0
 800bcb6:	4608      	mov	r0, r1
 800bcb8:	4611      	mov	r1, r2
 800bcba:	2200      	movs	r2, #0
 800bcbc:	602a      	str	r2, [r5, #0]
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	f7f7 fd65 	bl	800378e <_write>
 800bcc4:	1c43      	adds	r3, r0, #1
 800bcc6:	d102      	bne.n	800bcce <_write_r+0x1e>
 800bcc8:	682b      	ldr	r3, [r5, #0]
 800bcca:	b103      	cbz	r3, 800bcce <_write_r+0x1e>
 800bccc:	6023      	str	r3, [r4, #0]
 800bcce:	bd38      	pop	{r3, r4, r5, pc}
 800bcd0:	20000bb0 	.word	0x20000bb0

0800bcd4 <__errno>:
 800bcd4:	4b01      	ldr	r3, [pc, #4]	; (800bcdc <__errno+0x8>)
 800bcd6:	6818      	ldr	r0, [r3, #0]
 800bcd8:	4770      	bx	lr
 800bcda:	bf00      	nop
 800bcdc:	20000268 	.word	0x20000268

0800bce0 <__libc_init_array>:
 800bce0:	b570      	push	{r4, r5, r6, lr}
 800bce2:	4d0d      	ldr	r5, [pc, #52]	; (800bd18 <__libc_init_array+0x38>)
 800bce4:	4c0d      	ldr	r4, [pc, #52]	; (800bd1c <__libc_init_array+0x3c>)
 800bce6:	1b64      	subs	r4, r4, r5
 800bce8:	10a4      	asrs	r4, r4, #2
 800bcea:	2600      	movs	r6, #0
 800bcec:	42a6      	cmp	r6, r4
 800bcee:	d109      	bne.n	800bd04 <__libc_init_array+0x24>
 800bcf0:	4d0b      	ldr	r5, [pc, #44]	; (800bd20 <__libc_init_array+0x40>)
 800bcf2:	4c0c      	ldr	r4, [pc, #48]	; (800bd24 <__libc_init_array+0x44>)
 800bcf4:	f002 fc30 	bl	800e558 <_init>
 800bcf8:	1b64      	subs	r4, r4, r5
 800bcfa:	10a4      	asrs	r4, r4, #2
 800bcfc:	2600      	movs	r6, #0
 800bcfe:	42a6      	cmp	r6, r4
 800bd00:	d105      	bne.n	800bd0e <__libc_init_array+0x2e>
 800bd02:	bd70      	pop	{r4, r5, r6, pc}
 800bd04:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd08:	4798      	blx	r3
 800bd0a:	3601      	adds	r6, #1
 800bd0c:	e7ee      	b.n	800bcec <__libc_init_array+0xc>
 800bd0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd12:	4798      	blx	r3
 800bd14:	3601      	adds	r6, #1
 800bd16:	e7f2      	b.n	800bcfe <__libc_init_array+0x1e>
 800bd18:	0800eafc 	.word	0x0800eafc
 800bd1c:	0800eafc 	.word	0x0800eafc
 800bd20:	0800eafc 	.word	0x0800eafc
 800bd24:	0800eb00 	.word	0x0800eb00

0800bd28 <__retarget_lock_acquire_recursive>:
 800bd28:	4770      	bx	lr

0800bd2a <__retarget_lock_release_recursive>:
 800bd2a:	4770      	bx	lr

0800bd2c <memcpy>:
 800bd2c:	440a      	add	r2, r1
 800bd2e:	4291      	cmp	r1, r2
 800bd30:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd34:	d100      	bne.n	800bd38 <memcpy+0xc>
 800bd36:	4770      	bx	lr
 800bd38:	b510      	push	{r4, lr}
 800bd3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd42:	4291      	cmp	r1, r2
 800bd44:	d1f9      	bne.n	800bd3a <memcpy+0xe>
 800bd46:	bd10      	pop	{r4, pc}

0800bd48 <nan>:
 800bd48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bd50 <nan+0x8>
 800bd4c:	4770      	bx	lr
 800bd4e:	bf00      	nop
 800bd50:	00000000 	.word	0x00000000
 800bd54:	7ff80000 	.word	0x7ff80000

0800bd58 <quorem>:
 800bd58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd5c:	6903      	ldr	r3, [r0, #16]
 800bd5e:	690c      	ldr	r4, [r1, #16]
 800bd60:	42a3      	cmp	r3, r4
 800bd62:	4607      	mov	r7, r0
 800bd64:	db7e      	blt.n	800be64 <quorem+0x10c>
 800bd66:	3c01      	subs	r4, #1
 800bd68:	f101 0814 	add.w	r8, r1, #20
 800bd6c:	f100 0514 	add.w	r5, r0, #20
 800bd70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd74:	9301      	str	r3, [sp, #4]
 800bd76:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd7e:	3301      	adds	r3, #1
 800bd80:	429a      	cmp	r2, r3
 800bd82:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bd86:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd8a:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd8e:	d331      	bcc.n	800bdf4 <quorem+0x9c>
 800bd90:	f04f 0e00 	mov.w	lr, #0
 800bd94:	4640      	mov	r0, r8
 800bd96:	46ac      	mov	ip, r5
 800bd98:	46f2      	mov	sl, lr
 800bd9a:	f850 2b04 	ldr.w	r2, [r0], #4
 800bd9e:	b293      	uxth	r3, r2
 800bda0:	fb06 e303 	mla	r3, r6, r3, lr
 800bda4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bda8:	0c1a      	lsrs	r2, r3, #16
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	ebaa 0303 	sub.w	r3, sl, r3
 800bdb0:	f8dc a000 	ldr.w	sl, [ip]
 800bdb4:	fa13 f38a 	uxtah	r3, r3, sl
 800bdb8:	fb06 220e 	mla	r2, r6, lr, r2
 800bdbc:	9300      	str	r3, [sp, #0]
 800bdbe:	9b00      	ldr	r3, [sp, #0]
 800bdc0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bdc4:	b292      	uxth	r2, r2
 800bdc6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bdca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bdce:	f8bd 3000 	ldrh.w	r3, [sp]
 800bdd2:	4581      	cmp	r9, r0
 800bdd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdd8:	f84c 3b04 	str.w	r3, [ip], #4
 800bddc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bde0:	d2db      	bcs.n	800bd9a <quorem+0x42>
 800bde2:	f855 300b 	ldr.w	r3, [r5, fp]
 800bde6:	b92b      	cbnz	r3, 800bdf4 <quorem+0x9c>
 800bde8:	9b01      	ldr	r3, [sp, #4]
 800bdea:	3b04      	subs	r3, #4
 800bdec:	429d      	cmp	r5, r3
 800bdee:	461a      	mov	r2, r3
 800bdf0:	d32c      	bcc.n	800be4c <quorem+0xf4>
 800bdf2:	613c      	str	r4, [r7, #16]
 800bdf4:	4638      	mov	r0, r7
 800bdf6:	f001 fca5 	bl	800d744 <__mcmp>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	db22      	blt.n	800be44 <quorem+0xec>
 800bdfe:	3601      	adds	r6, #1
 800be00:	4629      	mov	r1, r5
 800be02:	2000      	movs	r0, #0
 800be04:	f858 2b04 	ldr.w	r2, [r8], #4
 800be08:	f8d1 c000 	ldr.w	ip, [r1]
 800be0c:	b293      	uxth	r3, r2
 800be0e:	1ac3      	subs	r3, r0, r3
 800be10:	0c12      	lsrs	r2, r2, #16
 800be12:	fa13 f38c 	uxtah	r3, r3, ip
 800be16:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800be1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800be1e:	b29b      	uxth	r3, r3
 800be20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800be24:	45c1      	cmp	r9, r8
 800be26:	f841 3b04 	str.w	r3, [r1], #4
 800be2a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800be2e:	d2e9      	bcs.n	800be04 <quorem+0xac>
 800be30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be38:	b922      	cbnz	r2, 800be44 <quorem+0xec>
 800be3a:	3b04      	subs	r3, #4
 800be3c:	429d      	cmp	r5, r3
 800be3e:	461a      	mov	r2, r3
 800be40:	d30a      	bcc.n	800be58 <quorem+0x100>
 800be42:	613c      	str	r4, [r7, #16]
 800be44:	4630      	mov	r0, r6
 800be46:	b003      	add	sp, #12
 800be48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be4c:	6812      	ldr	r2, [r2, #0]
 800be4e:	3b04      	subs	r3, #4
 800be50:	2a00      	cmp	r2, #0
 800be52:	d1ce      	bne.n	800bdf2 <quorem+0x9a>
 800be54:	3c01      	subs	r4, #1
 800be56:	e7c9      	b.n	800bdec <quorem+0x94>
 800be58:	6812      	ldr	r2, [r2, #0]
 800be5a:	3b04      	subs	r3, #4
 800be5c:	2a00      	cmp	r2, #0
 800be5e:	d1f0      	bne.n	800be42 <quorem+0xea>
 800be60:	3c01      	subs	r4, #1
 800be62:	e7eb      	b.n	800be3c <quorem+0xe4>
 800be64:	2000      	movs	r0, #0
 800be66:	e7ee      	b.n	800be46 <quorem+0xee>

0800be68 <_dtoa_r>:
 800be68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be6c:	ed2d 8b04 	vpush	{d8-d9}
 800be70:	69c5      	ldr	r5, [r0, #28]
 800be72:	b093      	sub	sp, #76	; 0x4c
 800be74:	ed8d 0b02 	vstr	d0, [sp, #8]
 800be78:	ec57 6b10 	vmov	r6, r7, d0
 800be7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800be80:	9107      	str	r1, [sp, #28]
 800be82:	4604      	mov	r4, r0
 800be84:	920a      	str	r2, [sp, #40]	; 0x28
 800be86:	930d      	str	r3, [sp, #52]	; 0x34
 800be88:	b975      	cbnz	r5, 800bea8 <_dtoa_r+0x40>
 800be8a:	2010      	movs	r0, #16
 800be8c:	f7fe fa26 	bl	800a2dc <malloc>
 800be90:	4602      	mov	r2, r0
 800be92:	61e0      	str	r0, [r4, #28]
 800be94:	b920      	cbnz	r0, 800bea0 <_dtoa_r+0x38>
 800be96:	4bae      	ldr	r3, [pc, #696]	; (800c150 <_dtoa_r+0x2e8>)
 800be98:	21ef      	movs	r1, #239	; 0xef
 800be9a:	48ae      	ldr	r0, [pc, #696]	; (800c154 <_dtoa_r+0x2ec>)
 800be9c:	f002 f86e 	bl	800df7c <__assert_func>
 800bea0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bea4:	6005      	str	r5, [r0, #0]
 800bea6:	60c5      	str	r5, [r0, #12]
 800bea8:	69e3      	ldr	r3, [r4, #28]
 800beaa:	6819      	ldr	r1, [r3, #0]
 800beac:	b151      	cbz	r1, 800bec4 <_dtoa_r+0x5c>
 800beae:	685a      	ldr	r2, [r3, #4]
 800beb0:	604a      	str	r2, [r1, #4]
 800beb2:	2301      	movs	r3, #1
 800beb4:	4093      	lsls	r3, r2
 800beb6:	608b      	str	r3, [r1, #8]
 800beb8:	4620      	mov	r0, r4
 800beba:	f001 f9bd 	bl	800d238 <_Bfree>
 800bebe:	69e3      	ldr	r3, [r4, #28]
 800bec0:	2200      	movs	r2, #0
 800bec2:	601a      	str	r2, [r3, #0]
 800bec4:	1e3b      	subs	r3, r7, #0
 800bec6:	bfbb      	ittet	lt
 800bec8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800becc:	9303      	strlt	r3, [sp, #12]
 800bece:	2300      	movge	r3, #0
 800bed0:	2201      	movlt	r2, #1
 800bed2:	bfac      	ite	ge
 800bed4:	f8c8 3000 	strge.w	r3, [r8]
 800bed8:	f8c8 2000 	strlt.w	r2, [r8]
 800bedc:	4b9e      	ldr	r3, [pc, #632]	; (800c158 <_dtoa_r+0x2f0>)
 800bede:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bee2:	ea33 0308 	bics.w	r3, r3, r8
 800bee6:	d11b      	bne.n	800bf20 <_dtoa_r+0xb8>
 800bee8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800beea:	f242 730f 	movw	r3, #9999	; 0x270f
 800beee:	6013      	str	r3, [r2, #0]
 800bef0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bef4:	4333      	orrs	r3, r6
 800bef6:	f000 8593 	beq.w	800ca20 <_dtoa_r+0xbb8>
 800befa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800befc:	b963      	cbnz	r3, 800bf18 <_dtoa_r+0xb0>
 800befe:	4b97      	ldr	r3, [pc, #604]	; (800c15c <_dtoa_r+0x2f4>)
 800bf00:	e027      	b.n	800bf52 <_dtoa_r+0xea>
 800bf02:	4b97      	ldr	r3, [pc, #604]	; (800c160 <_dtoa_r+0x2f8>)
 800bf04:	9300      	str	r3, [sp, #0]
 800bf06:	3308      	adds	r3, #8
 800bf08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bf0a:	6013      	str	r3, [r2, #0]
 800bf0c:	9800      	ldr	r0, [sp, #0]
 800bf0e:	b013      	add	sp, #76	; 0x4c
 800bf10:	ecbd 8b04 	vpop	{d8-d9}
 800bf14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf18:	4b90      	ldr	r3, [pc, #576]	; (800c15c <_dtoa_r+0x2f4>)
 800bf1a:	9300      	str	r3, [sp, #0]
 800bf1c:	3303      	adds	r3, #3
 800bf1e:	e7f3      	b.n	800bf08 <_dtoa_r+0xa0>
 800bf20:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf24:	2200      	movs	r2, #0
 800bf26:	ec51 0b17 	vmov	r0, r1, d7
 800bf2a:	eeb0 8a47 	vmov.f32	s16, s14
 800bf2e:	eef0 8a67 	vmov.f32	s17, s15
 800bf32:	2300      	movs	r3, #0
 800bf34:	f7f4 fdd8 	bl	8000ae8 <__aeabi_dcmpeq>
 800bf38:	4681      	mov	r9, r0
 800bf3a:	b160      	cbz	r0, 800bf56 <_dtoa_r+0xee>
 800bf3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf3e:	2301      	movs	r3, #1
 800bf40:	6013      	str	r3, [r2, #0]
 800bf42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f000 8568 	beq.w	800ca1a <_dtoa_r+0xbb2>
 800bf4a:	4b86      	ldr	r3, [pc, #536]	; (800c164 <_dtoa_r+0x2fc>)
 800bf4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bf4e:	6013      	str	r3, [r2, #0]
 800bf50:	3b01      	subs	r3, #1
 800bf52:	9300      	str	r3, [sp, #0]
 800bf54:	e7da      	b.n	800bf0c <_dtoa_r+0xa4>
 800bf56:	aa10      	add	r2, sp, #64	; 0x40
 800bf58:	a911      	add	r1, sp, #68	; 0x44
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	eeb0 0a48 	vmov.f32	s0, s16
 800bf60:	eef0 0a68 	vmov.f32	s1, s17
 800bf64:	f001 fd04 	bl	800d970 <__d2b>
 800bf68:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bf6c:	4682      	mov	sl, r0
 800bf6e:	2d00      	cmp	r5, #0
 800bf70:	d07f      	beq.n	800c072 <_dtoa_r+0x20a>
 800bf72:	ee18 3a90 	vmov	r3, s17
 800bf76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf7a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bf7e:	ec51 0b18 	vmov	r0, r1, d8
 800bf82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bf86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bf8a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bf8e:	4619      	mov	r1, r3
 800bf90:	2200      	movs	r2, #0
 800bf92:	4b75      	ldr	r3, [pc, #468]	; (800c168 <_dtoa_r+0x300>)
 800bf94:	f7f4 f988 	bl	80002a8 <__aeabi_dsub>
 800bf98:	a367      	add	r3, pc, #412	; (adr r3, 800c138 <_dtoa_r+0x2d0>)
 800bf9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9e:	f7f4 fb3b 	bl	8000618 <__aeabi_dmul>
 800bfa2:	a367      	add	r3, pc, #412	; (adr r3, 800c140 <_dtoa_r+0x2d8>)
 800bfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa8:	f7f4 f980 	bl	80002ac <__adddf3>
 800bfac:	4606      	mov	r6, r0
 800bfae:	4628      	mov	r0, r5
 800bfb0:	460f      	mov	r7, r1
 800bfb2:	f7f4 fac7 	bl	8000544 <__aeabi_i2d>
 800bfb6:	a364      	add	r3, pc, #400	; (adr r3, 800c148 <_dtoa_r+0x2e0>)
 800bfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbc:	f7f4 fb2c 	bl	8000618 <__aeabi_dmul>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	4639      	mov	r1, r7
 800bfc8:	f7f4 f970 	bl	80002ac <__adddf3>
 800bfcc:	4606      	mov	r6, r0
 800bfce:	460f      	mov	r7, r1
 800bfd0:	f7f4 fdd2 	bl	8000b78 <__aeabi_d2iz>
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	4683      	mov	fp, r0
 800bfd8:	2300      	movs	r3, #0
 800bfda:	4630      	mov	r0, r6
 800bfdc:	4639      	mov	r1, r7
 800bfde:	f7f4 fd8d 	bl	8000afc <__aeabi_dcmplt>
 800bfe2:	b148      	cbz	r0, 800bff8 <_dtoa_r+0x190>
 800bfe4:	4658      	mov	r0, fp
 800bfe6:	f7f4 faad 	bl	8000544 <__aeabi_i2d>
 800bfea:	4632      	mov	r2, r6
 800bfec:	463b      	mov	r3, r7
 800bfee:	f7f4 fd7b 	bl	8000ae8 <__aeabi_dcmpeq>
 800bff2:	b908      	cbnz	r0, 800bff8 <_dtoa_r+0x190>
 800bff4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bff8:	f1bb 0f16 	cmp.w	fp, #22
 800bffc:	d857      	bhi.n	800c0ae <_dtoa_r+0x246>
 800bffe:	4b5b      	ldr	r3, [pc, #364]	; (800c16c <_dtoa_r+0x304>)
 800c000:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c008:	ec51 0b18 	vmov	r0, r1, d8
 800c00c:	f7f4 fd76 	bl	8000afc <__aeabi_dcmplt>
 800c010:	2800      	cmp	r0, #0
 800c012:	d04e      	beq.n	800c0b2 <_dtoa_r+0x24a>
 800c014:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c018:	2300      	movs	r3, #0
 800c01a:	930c      	str	r3, [sp, #48]	; 0x30
 800c01c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c01e:	1b5b      	subs	r3, r3, r5
 800c020:	1e5a      	subs	r2, r3, #1
 800c022:	bf45      	ittet	mi
 800c024:	f1c3 0301 	rsbmi	r3, r3, #1
 800c028:	9305      	strmi	r3, [sp, #20]
 800c02a:	2300      	movpl	r3, #0
 800c02c:	2300      	movmi	r3, #0
 800c02e:	9206      	str	r2, [sp, #24]
 800c030:	bf54      	ite	pl
 800c032:	9305      	strpl	r3, [sp, #20]
 800c034:	9306      	strmi	r3, [sp, #24]
 800c036:	f1bb 0f00 	cmp.w	fp, #0
 800c03a:	db3c      	blt.n	800c0b6 <_dtoa_r+0x24e>
 800c03c:	9b06      	ldr	r3, [sp, #24]
 800c03e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c042:	445b      	add	r3, fp
 800c044:	9306      	str	r3, [sp, #24]
 800c046:	2300      	movs	r3, #0
 800c048:	9308      	str	r3, [sp, #32]
 800c04a:	9b07      	ldr	r3, [sp, #28]
 800c04c:	2b09      	cmp	r3, #9
 800c04e:	d868      	bhi.n	800c122 <_dtoa_r+0x2ba>
 800c050:	2b05      	cmp	r3, #5
 800c052:	bfc4      	itt	gt
 800c054:	3b04      	subgt	r3, #4
 800c056:	9307      	strgt	r3, [sp, #28]
 800c058:	9b07      	ldr	r3, [sp, #28]
 800c05a:	f1a3 0302 	sub.w	r3, r3, #2
 800c05e:	bfcc      	ite	gt
 800c060:	2500      	movgt	r5, #0
 800c062:	2501      	movle	r5, #1
 800c064:	2b03      	cmp	r3, #3
 800c066:	f200 8085 	bhi.w	800c174 <_dtoa_r+0x30c>
 800c06a:	e8df f003 	tbb	[pc, r3]
 800c06e:	3b2e      	.short	0x3b2e
 800c070:	5839      	.short	0x5839
 800c072:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c076:	441d      	add	r5, r3
 800c078:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c07c:	2b20      	cmp	r3, #32
 800c07e:	bfc1      	itttt	gt
 800c080:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c084:	fa08 f803 	lslgt.w	r8, r8, r3
 800c088:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c08c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c090:	bfd6      	itet	le
 800c092:	f1c3 0320 	rsble	r3, r3, #32
 800c096:	ea48 0003 	orrgt.w	r0, r8, r3
 800c09a:	fa06 f003 	lslle.w	r0, r6, r3
 800c09e:	f7f4 fa41 	bl	8000524 <__aeabi_ui2d>
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c0a8:	3d01      	subs	r5, #1
 800c0aa:	920e      	str	r2, [sp, #56]	; 0x38
 800c0ac:	e76f      	b.n	800bf8e <_dtoa_r+0x126>
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	e7b3      	b.n	800c01a <_dtoa_r+0x1b2>
 800c0b2:	900c      	str	r0, [sp, #48]	; 0x30
 800c0b4:	e7b2      	b.n	800c01c <_dtoa_r+0x1b4>
 800c0b6:	9b05      	ldr	r3, [sp, #20]
 800c0b8:	eba3 030b 	sub.w	r3, r3, fp
 800c0bc:	9305      	str	r3, [sp, #20]
 800c0be:	f1cb 0300 	rsb	r3, fp, #0
 800c0c2:	9308      	str	r3, [sp, #32]
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c0c8:	e7bf      	b.n	800c04a <_dtoa_r+0x1e2>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c0ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	dc52      	bgt.n	800c17a <_dtoa_r+0x312>
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	9301      	str	r3, [sp, #4]
 800c0d8:	9304      	str	r3, [sp, #16]
 800c0da:	461a      	mov	r2, r3
 800c0dc:	920a      	str	r2, [sp, #40]	; 0x28
 800c0de:	e00b      	b.n	800c0f8 <_dtoa_r+0x290>
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e7f3      	b.n	800c0cc <_dtoa_r+0x264>
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	9309      	str	r3, [sp, #36]	; 0x24
 800c0e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0ea:	445b      	add	r3, fp
 800c0ec:	9301      	str	r3, [sp, #4]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	2b01      	cmp	r3, #1
 800c0f2:	9304      	str	r3, [sp, #16]
 800c0f4:	bfb8      	it	lt
 800c0f6:	2301      	movlt	r3, #1
 800c0f8:	69e0      	ldr	r0, [r4, #28]
 800c0fa:	2100      	movs	r1, #0
 800c0fc:	2204      	movs	r2, #4
 800c0fe:	f102 0614 	add.w	r6, r2, #20
 800c102:	429e      	cmp	r6, r3
 800c104:	d93d      	bls.n	800c182 <_dtoa_r+0x31a>
 800c106:	6041      	str	r1, [r0, #4]
 800c108:	4620      	mov	r0, r4
 800c10a:	f001 f855 	bl	800d1b8 <_Balloc>
 800c10e:	9000      	str	r0, [sp, #0]
 800c110:	2800      	cmp	r0, #0
 800c112:	d139      	bne.n	800c188 <_dtoa_r+0x320>
 800c114:	4b16      	ldr	r3, [pc, #88]	; (800c170 <_dtoa_r+0x308>)
 800c116:	4602      	mov	r2, r0
 800c118:	f240 11af 	movw	r1, #431	; 0x1af
 800c11c:	e6bd      	b.n	800be9a <_dtoa_r+0x32>
 800c11e:	2301      	movs	r3, #1
 800c120:	e7e1      	b.n	800c0e6 <_dtoa_r+0x27e>
 800c122:	2501      	movs	r5, #1
 800c124:	2300      	movs	r3, #0
 800c126:	9307      	str	r3, [sp, #28]
 800c128:	9509      	str	r5, [sp, #36]	; 0x24
 800c12a:	f04f 33ff 	mov.w	r3, #4294967295
 800c12e:	9301      	str	r3, [sp, #4]
 800c130:	9304      	str	r3, [sp, #16]
 800c132:	2200      	movs	r2, #0
 800c134:	2312      	movs	r3, #18
 800c136:	e7d1      	b.n	800c0dc <_dtoa_r+0x274>
 800c138:	636f4361 	.word	0x636f4361
 800c13c:	3fd287a7 	.word	0x3fd287a7
 800c140:	8b60c8b3 	.word	0x8b60c8b3
 800c144:	3fc68a28 	.word	0x3fc68a28
 800c148:	509f79fb 	.word	0x509f79fb
 800c14c:	3fd34413 	.word	0x3fd34413
 800c150:	0800e872 	.word	0x0800e872
 800c154:	0800e889 	.word	0x0800e889
 800c158:	7ff00000 	.word	0x7ff00000
 800c15c:	0800e86e 	.word	0x0800e86e
 800c160:	0800e865 	.word	0x0800e865
 800c164:	0800e83a 	.word	0x0800e83a
 800c168:	3ff80000 	.word	0x3ff80000
 800c16c:	0800e9d8 	.word	0x0800e9d8
 800c170:	0800e8e1 	.word	0x0800e8e1
 800c174:	2301      	movs	r3, #1
 800c176:	9309      	str	r3, [sp, #36]	; 0x24
 800c178:	e7d7      	b.n	800c12a <_dtoa_r+0x2c2>
 800c17a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c17c:	9301      	str	r3, [sp, #4]
 800c17e:	9304      	str	r3, [sp, #16]
 800c180:	e7ba      	b.n	800c0f8 <_dtoa_r+0x290>
 800c182:	3101      	adds	r1, #1
 800c184:	0052      	lsls	r2, r2, #1
 800c186:	e7ba      	b.n	800c0fe <_dtoa_r+0x296>
 800c188:	69e3      	ldr	r3, [r4, #28]
 800c18a:	9a00      	ldr	r2, [sp, #0]
 800c18c:	601a      	str	r2, [r3, #0]
 800c18e:	9b04      	ldr	r3, [sp, #16]
 800c190:	2b0e      	cmp	r3, #14
 800c192:	f200 80a8 	bhi.w	800c2e6 <_dtoa_r+0x47e>
 800c196:	2d00      	cmp	r5, #0
 800c198:	f000 80a5 	beq.w	800c2e6 <_dtoa_r+0x47e>
 800c19c:	f1bb 0f00 	cmp.w	fp, #0
 800c1a0:	dd38      	ble.n	800c214 <_dtoa_r+0x3ac>
 800c1a2:	4bc0      	ldr	r3, [pc, #768]	; (800c4a4 <_dtoa_r+0x63c>)
 800c1a4:	f00b 020f 	and.w	r2, fp, #15
 800c1a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c1b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c1b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c1b8:	d019      	beq.n	800c1ee <_dtoa_r+0x386>
 800c1ba:	4bbb      	ldr	r3, [pc, #748]	; (800c4a8 <_dtoa_r+0x640>)
 800c1bc:	ec51 0b18 	vmov	r0, r1, d8
 800c1c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c1c4:	f7f4 fb52 	bl	800086c <__aeabi_ddiv>
 800c1c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1cc:	f008 080f 	and.w	r8, r8, #15
 800c1d0:	2503      	movs	r5, #3
 800c1d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c4a8 <_dtoa_r+0x640>
 800c1d6:	f1b8 0f00 	cmp.w	r8, #0
 800c1da:	d10a      	bne.n	800c1f2 <_dtoa_r+0x38a>
 800c1dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1e0:	4632      	mov	r2, r6
 800c1e2:	463b      	mov	r3, r7
 800c1e4:	f7f4 fb42 	bl	800086c <__aeabi_ddiv>
 800c1e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1ec:	e02b      	b.n	800c246 <_dtoa_r+0x3de>
 800c1ee:	2502      	movs	r5, #2
 800c1f0:	e7ef      	b.n	800c1d2 <_dtoa_r+0x36a>
 800c1f2:	f018 0f01 	tst.w	r8, #1
 800c1f6:	d008      	beq.n	800c20a <_dtoa_r+0x3a2>
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	4639      	mov	r1, r7
 800c1fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c200:	f7f4 fa0a 	bl	8000618 <__aeabi_dmul>
 800c204:	3501      	adds	r5, #1
 800c206:	4606      	mov	r6, r0
 800c208:	460f      	mov	r7, r1
 800c20a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c20e:	f109 0908 	add.w	r9, r9, #8
 800c212:	e7e0      	b.n	800c1d6 <_dtoa_r+0x36e>
 800c214:	f000 809f 	beq.w	800c356 <_dtoa_r+0x4ee>
 800c218:	f1cb 0600 	rsb	r6, fp, #0
 800c21c:	4ba1      	ldr	r3, [pc, #644]	; (800c4a4 <_dtoa_r+0x63c>)
 800c21e:	4fa2      	ldr	r7, [pc, #648]	; (800c4a8 <_dtoa_r+0x640>)
 800c220:	f006 020f 	and.w	r2, r6, #15
 800c224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22c:	ec51 0b18 	vmov	r0, r1, d8
 800c230:	f7f4 f9f2 	bl	8000618 <__aeabi_dmul>
 800c234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c238:	1136      	asrs	r6, r6, #4
 800c23a:	2300      	movs	r3, #0
 800c23c:	2502      	movs	r5, #2
 800c23e:	2e00      	cmp	r6, #0
 800c240:	d17e      	bne.n	800c340 <_dtoa_r+0x4d8>
 800c242:	2b00      	cmp	r3, #0
 800c244:	d1d0      	bne.n	800c1e8 <_dtoa_r+0x380>
 800c246:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c248:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f000 8084 	beq.w	800c35a <_dtoa_r+0x4f2>
 800c252:	4b96      	ldr	r3, [pc, #600]	; (800c4ac <_dtoa_r+0x644>)
 800c254:	2200      	movs	r2, #0
 800c256:	4640      	mov	r0, r8
 800c258:	4649      	mov	r1, r9
 800c25a:	f7f4 fc4f 	bl	8000afc <__aeabi_dcmplt>
 800c25e:	2800      	cmp	r0, #0
 800c260:	d07b      	beq.n	800c35a <_dtoa_r+0x4f2>
 800c262:	9b04      	ldr	r3, [sp, #16]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d078      	beq.n	800c35a <_dtoa_r+0x4f2>
 800c268:	9b01      	ldr	r3, [sp, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	dd39      	ble.n	800c2e2 <_dtoa_r+0x47a>
 800c26e:	4b90      	ldr	r3, [pc, #576]	; (800c4b0 <_dtoa_r+0x648>)
 800c270:	2200      	movs	r2, #0
 800c272:	4640      	mov	r0, r8
 800c274:	4649      	mov	r1, r9
 800c276:	f7f4 f9cf 	bl	8000618 <__aeabi_dmul>
 800c27a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c27e:	9e01      	ldr	r6, [sp, #4]
 800c280:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c284:	3501      	adds	r5, #1
 800c286:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c28a:	4628      	mov	r0, r5
 800c28c:	f7f4 f95a 	bl	8000544 <__aeabi_i2d>
 800c290:	4642      	mov	r2, r8
 800c292:	464b      	mov	r3, r9
 800c294:	f7f4 f9c0 	bl	8000618 <__aeabi_dmul>
 800c298:	4b86      	ldr	r3, [pc, #536]	; (800c4b4 <_dtoa_r+0x64c>)
 800c29a:	2200      	movs	r2, #0
 800c29c:	f7f4 f806 	bl	80002ac <__adddf3>
 800c2a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c2a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2a8:	9303      	str	r3, [sp, #12]
 800c2aa:	2e00      	cmp	r6, #0
 800c2ac:	d158      	bne.n	800c360 <_dtoa_r+0x4f8>
 800c2ae:	4b82      	ldr	r3, [pc, #520]	; (800c4b8 <_dtoa_r+0x650>)
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	4640      	mov	r0, r8
 800c2b4:	4649      	mov	r1, r9
 800c2b6:	f7f3 fff7 	bl	80002a8 <__aeabi_dsub>
 800c2ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2be:	4680      	mov	r8, r0
 800c2c0:	4689      	mov	r9, r1
 800c2c2:	f7f4 fc39 	bl	8000b38 <__aeabi_dcmpgt>
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	f040 8296 	bne.w	800c7f8 <_dtoa_r+0x990>
 800c2cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c2d0:	4640      	mov	r0, r8
 800c2d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2d6:	4649      	mov	r1, r9
 800c2d8:	f7f4 fc10 	bl	8000afc <__aeabi_dcmplt>
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	f040 8289 	bne.w	800c7f4 <_dtoa_r+0x98c>
 800c2e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c2e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	f2c0 814e 	blt.w	800c58a <_dtoa_r+0x722>
 800c2ee:	f1bb 0f0e 	cmp.w	fp, #14
 800c2f2:	f300 814a 	bgt.w	800c58a <_dtoa_r+0x722>
 800c2f6:	4b6b      	ldr	r3, [pc, #428]	; (800c4a4 <_dtoa_r+0x63c>)
 800c2f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c2fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c302:	2b00      	cmp	r3, #0
 800c304:	f280 80dc 	bge.w	800c4c0 <_dtoa_r+0x658>
 800c308:	9b04      	ldr	r3, [sp, #16]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f300 80d8 	bgt.w	800c4c0 <_dtoa_r+0x658>
 800c310:	f040 826f 	bne.w	800c7f2 <_dtoa_r+0x98a>
 800c314:	4b68      	ldr	r3, [pc, #416]	; (800c4b8 <_dtoa_r+0x650>)
 800c316:	2200      	movs	r2, #0
 800c318:	4640      	mov	r0, r8
 800c31a:	4649      	mov	r1, r9
 800c31c:	f7f4 f97c 	bl	8000618 <__aeabi_dmul>
 800c320:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c324:	f7f4 fbfe 	bl	8000b24 <__aeabi_dcmpge>
 800c328:	9e04      	ldr	r6, [sp, #16]
 800c32a:	4637      	mov	r7, r6
 800c32c:	2800      	cmp	r0, #0
 800c32e:	f040 8245 	bne.w	800c7bc <_dtoa_r+0x954>
 800c332:	9d00      	ldr	r5, [sp, #0]
 800c334:	2331      	movs	r3, #49	; 0x31
 800c336:	f805 3b01 	strb.w	r3, [r5], #1
 800c33a:	f10b 0b01 	add.w	fp, fp, #1
 800c33e:	e241      	b.n	800c7c4 <_dtoa_r+0x95c>
 800c340:	07f2      	lsls	r2, r6, #31
 800c342:	d505      	bpl.n	800c350 <_dtoa_r+0x4e8>
 800c344:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c348:	f7f4 f966 	bl	8000618 <__aeabi_dmul>
 800c34c:	3501      	adds	r5, #1
 800c34e:	2301      	movs	r3, #1
 800c350:	1076      	asrs	r6, r6, #1
 800c352:	3708      	adds	r7, #8
 800c354:	e773      	b.n	800c23e <_dtoa_r+0x3d6>
 800c356:	2502      	movs	r5, #2
 800c358:	e775      	b.n	800c246 <_dtoa_r+0x3de>
 800c35a:	9e04      	ldr	r6, [sp, #16]
 800c35c:	465f      	mov	r7, fp
 800c35e:	e792      	b.n	800c286 <_dtoa_r+0x41e>
 800c360:	9900      	ldr	r1, [sp, #0]
 800c362:	4b50      	ldr	r3, [pc, #320]	; (800c4a4 <_dtoa_r+0x63c>)
 800c364:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c368:	4431      	add	r1, r6
 800c36a:	9102      	str	r1, [sp, #8]
 800c36c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c36e:	eeb0 9a47 	vmov.f32	s18, s14
 800c372:	eef0 9a67 	vmov.f32	s19, s15
 800c376:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c37a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c37e:	2900      	cmp	r1, #0
 800c380:	d044      	beq.n	800c40c <_dtoa_r+0x5a4>
 800c382:	494e      	ldr	r1, [pc, #312]	; (800c4bc <_dtoa_r+0x654>)
 800c384:	2000      	movs	r0, #0
 800c386:	f7f4 fa71 	bl	800086c <__aeabi_ddiv>
 800c38a:	ec53 2b19 	vmov	r2, r3, d9
 800c38e:	f7f3 ff8b 	bl	80002a8 <__aeabi_dsub>
 800c392:	9d00      	ldr	r5, [sp, #0]
 800c394:	ec41 0b19 	vmov	d9, r0, r1
 800c398:	4649      	mov	r1, r9
 800c39a:	4640      	mov	r0, r8
 800c39c:	f7f4 fbec 	bl	8000b78 <__aeabi_d2iz>
 800c3a0:	4606      	mov	r6, r0
 800c3a2:	f7f4 f8cf 	bl	8000544 <__aeabi_i2d>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	f7f3 ff7b 	bl	80002a8 <__aeabi_dsub>
 800c3b2:	3630      	adds	r6, #48	; 0x30
 800c3b4:	f805 6b01 	strb.w	r6, [r5], #1
 800c3b8:	ec53 2b19 	vmov	r2, r3, d9
 800c3bc:	4680      	mov	r8, r0
 800c3be:	4689      	mov	r9, r1
 800c3c0:	f7f4 fb9c 	bl	8000afc <__aeabi_dcmplt>
 800c3c4:	2800      	cmp	r0, #0
 800c3c6:	d164      	bne.n	800c492 <_dtoa_r+0x62a>
 800c3c8:	4642      	mov	r2, r8
 800c3ca:	464b      	mov	r3, r9
 800c3cc:	4937      	ldr	r1, [pc, #220]	; (800c4ac <_dtoa_r+0x644>)
 800c3ce:	2000      	movs	r0, #0
 800c3d0:	f7f3 ff6a 	bl	80002a8 <__aeabi_dsub>
 800c3d4:	ec53 2b19 	vmov	r2, r3, d9
 800c3d8:	f7f4 fb90 	bl	8000afc <__aeabi_dcmplt>
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	f040 80b6 	bne.w	800c54e <_dtoa_r+0x6e6>
 800c3e2:	9b02      	ldr	r3, [sp, #8]
 800c3e4:	429d      	cmp	r5, r3
 800c3e6:	f43f af7c 	beq.w	800c2e2 <_dtoa_r+0x47a>
 800c3ea:	4b31      	ldr	r3, [pc, #196]	; (800c4b0 <_dtoa_r+0x648>)
 800c3ec:	ec51 0b19 	vmov	r0, r1, d9
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f7f4 f911 	bl	8000618 <__aeabi_dmul>
 800c3f6:	4b2e      	ldr	r3, [pc, #184]	; (800c4b0 <_dtoa_r+0x648>)
 800c3f8:	ec41 0b19 	vmov	d9, r0, r1
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	4640      	mov	r0, r8
 800c400:	4649      	mov	r1, r9
 800c402:	f7f4 f909 	bl	8000618 <__aeabi_dmul>
 800c406:	4680      	mov	r8, r0
 800c408:	4689      	mov	r9, r1
 800c40a:	e7c5      	b.n	800c398 <_dtoa_r+0x530>
 800c40c:	ec51 0b17 	vmov	r0, r1, d7
 800c410:	f7f4 f902 	bl	8000618 <__aeabi_dmul>
 800c414:	9b02      	ldr	r3, [sp, #8]
 800c416:	9d00      	ldr	r5, [sp, #0]
 800c418:	930f      	str	r3, [sp, #60]	; 0x3c
 800c41a:	ec41 0b19 	vmov	d9, r0, r1
 800c41e:	4649      	mov	r1, r9
 800c420:	4640      	mov	r0, r8
 800c422:	f7f4 fba9 	bl	8000b78 <__aeabi_d2iz>
 800c426:	4606      	mov	r6, r0
 800c428:	f7f4 f88c 	bl	8000544 <__aeabi_i2d>
 800c42c:	3630      	adds	r6, #48	; 0x30
 800c42e:	4602      	mov	r2, r0
 800c430:	460b      	mov	r3, r1
 800c432:	4640      	mov	r0, r8
 800c434:	4649      	mov	r1, r9
 800c436:	f7f3 ff37 	bl	80002a8 <__aeabi_dsub>
 800c43a:	f805 6b01 	strb.w	r6, [r5], #1
 800c43e:	9b02      	ldr	r3, [sp, #8]
 800c440:	429d      	cmp	r5, r3
 800c442:	4680      	mov	r8, r0
 800c444:	4689      	mov	r9, r1
 800c446:	f04f 0200 	mov.w	r2, #0
 800c44a:	d124      	bne.n	800c496 <_dtoa_r+0x62e>
 800c44c:	4b1b      	ldr	r3, [pc, #108]	; (800c4bc <_dtoa_r+0x654>)
 800c44e:	ec51 0b19 	vmov	r0, r1, d9
 800c452:	f7f3 ff2b 	bl	80002ac <__adddf3>
 800c456:	4602      	mov	r2, r0
 800c458:	460b      	mov	r3, r1
 800c45a:	4640      	mov	r0, r8
 800c45c:	4649      	mov	r1, r9
 800c45e:	f7f4 fb6b 	bl	8000b38 <__aeabi_dcmpgt>
 800c462:	2800      	cmp	r0, #0
 800c464:	d173      	bne.n	800c54e <_dtoa_r+0x6e6>
 800c466:	ec53 2b19 	vmov	r2, r3, d9
 800c46a:	4914      	ldr	r1, [pc, #80]	; (800c4bc <_dtoa_r+0x654>)
 800c46c:	2000      	movs	r0, #0
 800c46e:	f7f3 ff1b 	bl	80002a8 <__aeabi_dsub>
 800c472:	4602      	mov	r2, r0
 800c474:	460b      	mov	r3, r1
 800c476:	4640      	mov	r0, r8
 800c478:	4649      	mov	r1, r9
 800c47a:	f7f4 fb3f 	bl	8000afc <__aeabi_dcmplt>
 800c47e:	2800      	cmp	r0, #0
 800c480:	f43f af2f 	beq.w	800c2e2 <_dtoa_r+0x47a>
 800c484:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c486:	1e6b      	subs	r3, r5, #1
 800c488:	930f      	str	r3, [sp, #60]	; 0x3c
 800c48a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c48e:	2b30      	cmp	r3, #48	; 0x30
 800c490:	d0f8      	beq.n	800c484 <_dtoa_r+0x61c>
 800c492:	46bb      	mov	fp, r7
 800c494:	e04a      	b.n	800c52c <_dtoa_r+0x6c4>
 800c496:	4b06      	ldr	r3, [pc, #24]	; (800c4b0 <_dtoa_r+0x648>)
 800c498:	f7f4 f8be 	bl	8000618 <__aeabi_dmul>
 800c49c:	4680      	mov	r8, r0
 800c49e:	4689      	mov	r9, r1
 800c4a0:	e7bd      	b.n	800c41e <_dtoa_r+0x5b6>
 800c4a2:	bf00      	nop
 800c4a4:	0800e9d8 	.word	0x0800e9d8
 800c4a8:	0800e9b0 	.word	0x0800e9b0
 800c4ac:	3ff00000 	.word	0x3ff00000
 800c4b0:	40240000 	.word	0x40240000
 800c4b4:	401c0000 	.word	0x401c0000
 800c4b8:	40140000 	.word	0x40140000
 800c4bc:	3fe00000 	.word	0x3fe00000
 800c4c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c4c4:	9d00      	ldr	r5, [sp, #0]
 800c4c6:	4642      	mov	r2, r8
 800c4c8:	464b      	mov	r3, r9
 800c4ca:	4630      	mov	r0, r6
 800c4cc:	4639      	mov	r1, r7
 800c4ce:	f7f4 f9cd 	bl	800086c <__aeabi_ddiv>
 800c4d2:	f7f4 fb51 	bl	8000b78 <__aeabi_d2iz>
 800c4d6:	9001      	str	r0, [sp, #4]
 800c4d8:	f7f4 f834 	bl	8000544 <__aeabi_i2d>
 800c4dc:	4642      	mov	r2, r8
 800c4de:	464b      	mov	r3, r9
 800c4e0:	f7f4 f89a 	bl	8000618 <__aeabi_dmul>
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	460b      	mov	r3, r1
 800c4e8:	4630      	mov	r0, r6
 800c4ea:	4639      	mov	r1, r7
 800c4ec:	f7f3 fedc 	bl	80002a8 <__aeabi_dsub>
 800c4f0:	9e01      	ldr	r6, [sp, #4]
 800c4f2:	9f04      	ldr	r7, [sp, #16]
 800c4f4:	3630      	adds	r6, #48	; 0x30
 800c4f6:	f805 6b01 	strb.w	r6, [r5], #1
 800c4fa:	9e00      	ldr	r6, [sp, #0]
 800c4fc:	1bae      	subs	r6, r5, r6
 800c4fe:	42b7      	cmp	r7, r6
 800c500:	4602      	mov	r2, r0
 800c502:	460b      	mov	r3, r1
 800c504:	d134      	bne.n	800c570 <_dtoa_r+0x708>
 800c506:	f7f3 fed1 	bl	80002ac <__adddf3>
 800c50a:	4642      	mov	r2, r8
 800c50c:	464b      	mov	r3, r9
 800c50e:	4606      	mov	r6, r0
 800c510:	460f      	mov	r7, r1
 800c512:	f7f4 fb11 	bl	8000b38 <__aeabi_dcmpgt>
 800c516:	b9c8      	cbnz	r0, 800c54c <_dtoa_r+0x6e4>
 800c518:	4642      	mov	r2, r8
 800c51a:	464b      	mov	r3, r9
 800c51c:	4630      	mov	r0, r6
 800c51e:	4639      	mov	r1, r7
 800c520:	f7f4 fae2 	bl	8000ae8 <__aeabi_dcmpeq>
 800c524:	b110      	cbz	r0, 800c52c <_dtoa_r+0x6c4>
 800c526:	9b01      	ldr	r3, [sp, #4]
 800c528:	07db      	lsls	r3, r3, #31
 800c52a:	d40f      	bmi.n	800c54c <_dtoa_r+0x6e4>
 800c52c:	4651      	mov	r1, sl
 800c52e:	4620      	mov	r0, r4
 800c530:	f000 fe82 	bl	800d238 <_Bfree>
 800c534:	2300      	movs	r3, #0
 800c536:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c538:	702b      	strb	r3, [r5, #0]
 800c53a:	f10b 0301 	add.w	r3, fp, #1
 800c53e:	6013      	str	r3, [r2, #0]
 800c540:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c542:	2b00      	cmp	r3, #0
 800c544:	f43f ace2 	beq.w	800bf0c <_dtoa_r+0xa4>
 800c548:	601d      	str	r5, [r3, #0]
 800c54a:	e4df      	b.n	800bf0c <_dtoa_r+0xa4>
 800c54c:	465f      	mov	r7, fp
 800c54e:	462b      	mov	r3, r5
 800c550:	461d      	mov	r5, r3
 800c552:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c556:	2a39      	cmp	r2, #57	; 0x39
 800c558:	d106      	bne.n	800c568 <_dtoa_r+0x700>
 800c55a:	9a00      	ldr	r2, [sp, #0]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d1f7      	bne.n	800c550 <_dtoa_r+0x6e8>
 800c560:	9900      	ldr	r1, [sp, #0]
 800c562:	2230      	movs	r2, #48	; 0x30
 800c564:	3701      	adds	r7, #1
 800c566:	700a      	strb	r2, [r1, #0]
 800c568:	781a      	ldrb	r2, [r3, #0]
 800c56a:	3201      	adds	r2, #1
 800c56c:	701a      	strb	r2, [r3, #0]
 800c56e:	e790      	b.n	800c492 <_dtoa_r+0x62a>
 800c570:	4ba3      	ldr	r3, [pc, #652]	; (800c800 <_dtoa_r+0x998>)
 800c572:	2200      	movs	r2, #0
 800c574:	f7f4 f850 	bl	8000618 <__aeabi_dmul>
 800c578:	2200      	movs	r2, #0
 800c57a:	2300      	movs	r3, #0
 800c57c:	4606      	mov	r6, r0
 800c57e:	460f      	mov	r7, r1
 800c580:	f7f4 fab2 	bl	8000ae8 <__aeabi_dcmpeq>
 800c584:	2800      	cmp	r0, #0
 800c586:	d09e      	beq.n	800c4c6 <_dtoa_r+0x65e>
 800c588:	e7d0      	b.n	800c52c <_dtoa_r+0x6c4>
 800c58a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c58c:	2a00      	cmp	r2, #0
 800c58e:	f000 80ca 	beq.w	800c726 <_dtoa_r+0x8be>
 800c592:	9a07      	ldr	r2, [sp, #28]
 800c594:	2a01      	cmp	r2, #1
 800c596:	f300 80ad 	bgt.w	800c6f4 <_dtoa_r+0x88c>
 800c59a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c59c:	2a00      	cmp	r2, #0
 800c59e:	f000 80a5 	beq.w	800c6ec <_dtoa_r+0x884>
 800c5a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c5a6:	9e08      	ldr	r6, [sp, #32]
 800c5a8:	9d05      	ldr	r5, [sp, #20]
 800c5aa:	9a05      	ldr	r2, [sp, #20]
 800c5ac:	441a      	add	r2, r3
 800c5ae:	9205      	str	r2, [sp, #20]
 800c5b0:	9a06      	ldr	r2, [sp, #24]
 800c5b2:	2101      	movs	r1, #1
 800c5b4:	441a      	add	r2, r3
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	9206      	str	r2, [sp, #24]
 800c5ba:	f000 ff3d 	bl	800d438 <__i2b>
 800c5be:	4607      	mov	r7, r0
 800c5c0:	b165      	cbz	r5, 800c5dc <_dtoa_r+0x774>
 800c5c2:	9b06      	ldr	r3, [sp, #24]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	dd09      	ble.n	800c5dc <_dtoa_r+0x774>
 800c5c8:	42ab      	cmp	r3, r5
 800c5ca:	9a05      	ldr	r2, [sp, #20]
 800c5cc:	bfa8      	it	ge
 800c5ce:	462b      	movge	r3, r5
 800c5d0:	1ad2      	subs	r2, r2, r3
 800c5d2:	9205      	str	r2, [sp, #20]
 800c5d4:	9a06      	ldr	r2, [sp, #24]
 800c5d6:	1aed      	subs	r5, r5, r3
 800c5d8:	1ad3      	subs	r3, r2, r3
 800c5da:	9306      	str	r3, [sp, #24]
 800c5dc:	9b08      	ldr	r3, [sp, #32]
 800c5de:	b1f3      	cbz	r3, 800c61e <_dtoa_r+0x7b6>
 800c5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	f000 80a3 	beq.w	800c72e <_dtoa_r+0x8c6>
 800c5e8:	2e00      	cmp	r6, #0
 800c5ea:	dd10      	ble.n	800c60e <_dtoa_r+0x7a6>
 800c5ec:	4639      	mov	r1, r7
 800c5ee:	4632      	mov	r2, r6
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	f000 ffe1 	bl	800d5b8 <__pow5mult>
 800c5f6:	4652      	mov	r2, sl
 800c5f8:	4601      	mov	r1, r0
 800c5fa:	4607      	mov	r7, r0
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	f000 ff31 	bl	800d464 <__multiply>
 800c602:	4651      	mov	r1, sl
 800c604:	4680      	mov	r8, r0
 800c606:	4620      	mov	r0, r4
 800c608:	f000 fe16 	bl	800d238 <_Bfree>
 800c60c:	46c2      	mov	sl, r8
 800c60e:	9b08      	ldr	r3, [sp, #32]
 800c610:	1b9a      	subs	r2, r3, r6
 800c612:	d004      	beq.n	800c61e <_dtoa_r+0x7b6>
 800c614:	4651      	mov	r1, sl
 800c616:	4620      	mov	r0, r4
 800c618:	f000 ffce 	bl	800d5b8 <__pow5mult>
 800c61c:	4682      	mov	sl, r0
 800c61e:	2101      	movs	r1, #1
 800c620:	4620      	mov	r0, r4
 800c622:	f000 ff09 	bl	800d438 <__i2b>
 800c626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c628:	2b00      	cmp	r3, #0
 800c62a:	4606      	mov	r6, r0
 800c62c:	f340 8081 	ble.w	800c732 <_dtoa_r+0x8ca>
 800c630:	461a      	mov	r2, r3
 800c632:	4601      	mov	r1, r0
 800c634:	4620      	mov	r0, r4
 800c636:	f000 ffbf 	bl	800d5b8 <__pow5mult>
 800c63a:	9b07      	ldr	r3, [sp, #28]
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	4606      	mov	r6, r0
 800c640:	dd7a      	ble.n	800c738 <_dtoa_r+0x8d0>
 800c642:	f04f 0800 	mov.w	r8, #0
 800c646:	6933      	ldr	r3, [r6, #16]
 800c648:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c64c:	6918      	ldr	r0, [r3, #16]
 800c64e:	f000 fea5 	bl	800d39c <__hi0bits>
 800c652:	f1c0 0020 	rsb	r0, r0, #32
 800c656:	9b06      	ldr	r3, [sp, #24]
 800c658:	4418      	add	r0, r3
 800c65a:	f010 001f 	ands.w	r0, r0, #31
 800c65e:	f000 8094 	beq.w	800c78a <_dtoa_r+0x922>
 800c662:	f1c0 0320 	rsb	r3, r0, #32
 800c666:	2b04      	cmp	r3, #4
 800c668:	f340 8085 	ble.w	800c776 <_dtoa_r+0x90e>
 800c66c:	9b05      	ldr	r3, [sp, #20]
 800c66e:	f1c0 001c 	rsb	r0, r0, #28
 800c672:	4403      	add	r3, r0
 800c674:	9305      	str	r3, [sp, #20]
 800c676:	9b06      	ldr	r3, [sp, #24]
 800c678:	4403      	add	r3, r0
 800c67a:	4405      	add	r5, r0
 800c67c:	9306      	str	r3, [sp, #24]
 800c67e:	9b05      	ldr	r3, [sp, #20]
 800c680:	2b00      	cmp	r3, #0
 800c682:	dd05      	ble.n	800c690 <_dtoa_r+0x828>
 800c684:	4651      	mov	r1, sl
 800c686:	461a      	mov	r2, r3
 800c688:	4620      	mov	r0, r4
 800c68a:	f000 ffef 	bl	800d66c <__lshift>
 800c68e:	4682      	mov	sl, r0
 800c690:	9b06      	ldr	r3, [sp, #24]
 800c692:	2b00      	cmp	r3, #0
 800c694:	dd05      	ble.n	800c6a2 <_dtoa_r+0x83a>
 800c696:	4631      	mov	r1, r6
 800c698:	461a      	mov	r2, r3
 800c69a:	4620      	mov	r0, r4
 800c69c:	f000 ffe6 	bl	800d66c <__lshift>
 800c6a0:	4606      	mov	r6, r0
 800c6a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d072      	beq.n	800c78e <_dtoa_r+0x926>
 800c6a8:	4631      	mov	r1, r6
 800c6aa:	4650      	mov	r0, sl
 800c6ac:	f001 f84a 	bl	800d744 <__mcmp>
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	da6c      	bge.n	800c78e <_dtoa_r+0x926>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	4651      	mov	r1, sl
 800c6b8:	220a      	movs	r2, #10
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	f000 fdde 	bl	800d27c <__multadd>
 800c6c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c6c6:	4682      	mov	sl, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	f000 81b0 	beq.w	800ca2e <_dtoa_r+0xbc6>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	4639      	mov	r1, r7
 800c6d2:	220a      	movs	r2, #10
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f000 fdd1 	bl	800d27c <__multadd>
 800c6da:	9b01      	ldr	r3, [sp, #4]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	4607      	mov	r7, r0
 800c6e0:	f300 8096 	bgt.w	800c810 <_dtoa_r+0x9a8>
 800c6e4:	9b07      	ldr	r3, [sp, #28]
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	dc59      	bgt.n	800c79e <_dtoa_r+0x936>
 800c6ea:	e091      	b.n	800c810 <_dtoa_r+0x9a8>
 800c6ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c6ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c6f2:	e758      	b.n	800c5a6 <_dtoa_r+0x73e>
 800c6f4:	9b04      	ldr	r3, [sp, #16]
 800c6f6:	1e5e      	subs	r6, r3, #1
 800c6f8:	9b08      	ldr	r3, [sp, #32]
 800c6fa:	42b3      	cmp	r3, r6
 800c6fc:	bfbf      	itttt	lt
 800c6fe:	9b08      	ldrlt	r3, [sp, #32]
 800c700:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c702:	9608      	strlt	r6, [sp, #32]
 800c704:	1af3      	sublt	r3, r6, r3
 800c706:	bfb4      	ite	lt
 800c708:	18d2      	addlt	r2, r2, r3
 800c70a:	1b9e      	subge	r6, r3, r6
 800c70c:	9b04      	ldr	r3, [sp, #16]
 800c70e:	bfbc      	itt	lt
 800c710:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c712:	2600      	movlt	r6, #0
 800c714:	2b00      	cmp	r3, #0
 800c716:	bfb7      	itett	lt
 800c718:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c71c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c720:	1a9d      	sublt	r5, r3, r2
 800c722:	2300      	movlt	r3, #0
 800c724:	e741      	b.n	800c5aa <_dtoa_r+0x742>
 800c726:	9e08      	ldr	r6, [sp, #32]
 800c728:	9d05      	ldr	r5, [sp, #20]
 800c72a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c72c:	e748      	b.n	800c5c0 <_dtoa_r+0x758>
 800c72e:	9a08      	ldr	r2, [sp, #32]
 800c730:	e770      	b.n	800c614 <_dtoa_r+0x7ac>
 800c732:	9b07      	ldr	r3, [sp, #28]
 800c734:	2b01      	cmp	r3, #1
 800c736:	dc19      	bgt.n	800c76c <_dtoa_r+0x904>
 800c738:	9b02      	ldr	r3, [sp, #8]
 800c73a:	b9bb      	cbnz	r3, 800c76c <_dtoa_r+0x904>
 800c73c:	9b03      	ldr	r3, [sp, #12]
 800c73e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c742:	b99b      	cbnz	r3, 800c76c <_dtoa_r+0x904>
 800c744:	9b03      	ldr	r3, [sp, #12]
 800c746:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c74a:	0d1b      	lsrs	r3, r3, #20
 800c74c:	051b      	lsls	r3, r3, #20
 800c74e:	b183      	cbz	r3, 800c772 <_dtoa_r+0x90a>
 800c750:	9b05      	ldr	r3, [sp, #20]
 800c752:	3301      	adds	r3, #1
 800c754:	9305      	str	r3, [sp, #20]
 800c756:	9b06      	ldr	r3, [sp, #24]
 800c758:	3301      	adds	r3, #1
 800c75a:	9306      	str	r3, [sp, #24]
 800c75c:	f04f 0801 	mov.w	r8, #1
 800c760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c762:	2b00      	cmp	r3, #0
 800c764:	f47f af6f 	bne.w	800c646 <_dtoa_r+0x7de>
 800c768:	2001      	movs	r0, #1
 800c76a:	e774      	b.n	800c656 <_dtoa_r+0x7ee>
 800c76c:	f04f 0800 	mov.w	r8, #0
 800c770:	e7f6      	b.n	800c760 <_dtoa_r+0x8f8>
 800c772:	4698      	mov	r8, r3
 800c774:	e7f4      	b.n	800c760 <_dtoa_r+0x8f8>
 800c776:	d082      	beq.n	800c67e <_dtoa_r+0x816>
 800c778:	9a05      	ldr	r2, [sp, #20]
 800c77a:	331c      	adds	r3, #28
 800c77c:	441a      	add	r2, r3
 800c77e:	9205      	str	r2, [sp, #20]
 800c780:	9a06      	ldr	r2, [sp, #24]
 800c782:	441a      	add	r2, r3
 800c784:	441d      	add	r5, r3
 800c786:	9206      	str	r2, [sp, #24]
 800c788:	e779      	b.n	800c67e <_dtoa_r+0x816>
 800c78a:	4603      	mov	r3, r0
 800c78c:	e7f4      	b.n	800c778 <_dtoa_r+0x910>
 800c78e:	9b04      	ldr	r3, [sp, #16]
 800c790:	2b00      	cmp	r3, #0
 800c792:	dc37      	bgt.n	800c804 <_dtoa_r+0x99c>
 800c794:	9b07      	ldr	r3, [sp, #28]
 800c796:	2b02      	cmp	r3, #2
 800c798:	dd34      	ble.n	800c804 <_dtoa_r+0x99c>
 800c79a:	9b04      	ldr	r3, [sp, #16]
 800c79c:	9301      	str	r3, [sp, #4]
 800c79e:	9b01      	ldr	r3, [sp, #4]
 800c7a0:	b963      	cbnz	r3, 800c7bc <_dtoa_r+0x954>
 800c7a2:	4631      	mov	r1, r6
 800c7a4:	2205      	movs	r2, #5
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f000 fd68 	bl	800d27c <__multadd>
 800c7ac:	4601      	mov	r1, r0
 800c7ae:	4606      	mov	r6, r0
 800c7b0:	4650      	mov	r0, sl
 800c7b2:	f000 ffc7 	bl	800d744 <__mcmp>
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	f73f adbb 	bgt.w	800c332 <_dtoa_r+0x4ca>
 800c7bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7be:	9d00      	ldr	r5, [sp, #0]
 800c7c0:	ea6f 0b03 	mvn.w	fp, r3
 800c7c4:	f04f 0800 	mov.w	r8, #0
 800c7c8:	4631      	mov	r1, r6
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	f000 fd34 	bl	800d238 <_Bfree>
 800c7d0:	2f00      	cmp	r7, #0
 800c7d2:	f43f aeab 	beq.w	800c52c <_dtoa_r+0x6c4>
 800c7d6:	f1b8 0f00 	cmp.w	r8, #0
 800c7da:	d005      	beq.n	800c7e8 <_dtoa_r+0x980>
 800c7dc:	45b8      	cmp	r8, r7
 800c7de:	d003      	beq.n	800c7e8 <_dtoa_r+0x980>
 800c7e0:	4641      	mov	r1, r8
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f000 fd28 	bl	800d238 <_Bfree>
 800c7e8:	4639      	mov	r1, r7
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f000 fd24 	bl	800d238 <_Bfree>
 800c7f0:	e69c      	b.n	800c52c <_dtoa_r+0x6c4>
 800c7f2:	2600      	movs	r6, #0
 800c7f4:	4637      	mov	r7, r6
 800c7f6:	e7e1      	b.n	800c7bc <_dtoa_r+0x954>
 800c7f8:	46bb      	mov	fp, r7
 800c7fa:	4637      	mov	r7, r6
 800c7fc:	e599      	b.n	800c332 <_dtoa_r+0x4ca>
 800c7fe:	bf00      	nop
 800c800:	40240000 	.word	0x40240000
 800c804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c806:	2b00      	cmp	r3, #0
 800c808:	f000 80c8 	beq.w	800c99c <_dtoa_r+0xb34>
 800c80c:	9b04      	ldr	r3, [sp, #16]
 800c80e:	9301      	str	r3, [sp, #4]
 800c810:	2d00      	cmp	r5, #0
 800c812:	dd05      	ble.n	800c820 <_dtoa_r+0x9b8>
 800c814:	4639      	mov	r1, r7
 800c816:	462a      	mov	r2, r5
 800c818:	4620      	mov	r0, r4
 800c81a:	f000 ff27 	bl	800d66c <__lshift>
 800c81e:	4607      	mov	r7, r0
 800c820:	f1b8 0f00 	cmp.w	r8, #0
 800c824:	d05b      	beq.n	800c8de <_dtoa_r+0xa76>
 800c826:	6879      	ldr	r1, [r7, #4]
 800c828:	4620      	mov	r0, r4
 800c82a:	f000 fcc5 	bl	800d1b8 <_Balloc>
 800c82e:	4605      	mov	r5, r0
 800c830:	b928      	cbnz	r0, 800c83e <_dtoa_r+0x9d6>
 800c832:	4b83      	ldr	r3, [pc, #524]	; (800ca40 <_dtoa_r+0xbd8>)
 800c834:	4602      	mov	r2, r0
 800c836:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c83a:	f7ff bb2e 	b.w	800be9a <_dtoa_r+0x32>
 800c83e:	693a      	ldr	r2, [r7, #16]
 800c840:	3202      	adds	r2, #2
 800c842:	0092      	lsls	r2, r2, #2
 800c844:	f107 010c 	add.w	r1, r7, #12
 800c848:	300c      	adds	r0, #12
 800c84a:	f7ff fa6f 	bl	800bd2c <memcpy>
 800c84e:	2201      	movs	r2, #1
 800c850:	4629      	mov	r1, r5
 800c852:	4620      	mov	r0, r4
 800c854:	f000 ff0a 	bl	800d66c <__lshift>
 800c858:	9b00      	ldr	r3, [sp, #0]
 800c85a:	3301      	adds	r3, #1
 800c85c:	9304      	str	r3, [sp, #16]
 800c85e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c862:	4413      	add	r3, r2
 800c864:	9308      	str	r3, [sp, #32]
 800c866:	9b02      	ldr	r3, [sp, #8]
 800c868:	f003 0301 	and.w	r3, r3, #1
 800c86c:	46b8      	mov	r8, r7
 800c86e:	9306      	str	r3, [sp, #24]
 800c870:	4607      	mov	r7, r0
 800c872:	9b04      	ldr	r3, [sp, #16]
 800c874:	4631      	mov	r1, r6
 800c876:	3b01      	subs	r3, #1
 800c878:	4650      	mov	r0, sl
 800c87a:	9301      	str	r3, [sp, #4]
 800c87c:	f7ff fa6c 	bl	800bd58 <quorem>
 800c880:	4641      	mov	r1, r8
 800c882:	9002      	str	r0, [sp, #8]
 800c884:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c888:	4650      	mov	r0, sl
 800c88a:	f000 ff5b 	bl	800d744 <__mcmp>
 800c88e:	463a      	mov	r2, r7
 800c890:	9005      	str	r0, [sp, #20]
 800c892:	4631      	mov	r1, r6
 800c894:	4620      	mov	r0, r4
 800c896:	f000 ff71 	bl	800d77c <__mdiff>
 800c89a:	68c2      	ldr	r2, [r0, #12]
 800c89c:	4605      	mov	r5, r0
 800c89e:	bb02      	cbnz	r2, 800c8e2 <_dtoa_r+0xa7a>
 800c8a0:	4601      	mov	r1, r0
 800c8a2:	4650      	mov	r0, sl
 800c8a4:	f000 ff4e 	bl	800d744 <__mcmp>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	4629      	mov	r1, r5
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	9209      	str	r2, [sp, #36]	; 0x24
 800c8b0:	f000 fcc2 	bl	800d238 <_Bfree>
 800c8b4:	9b07      	ldr	r3, [sp, #28]
 800c8b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8b8:	9d04      	ldr	r5, [sp, #16]
 800c8ba:	ea43 0102 	orr.w	r1, r3, r2
 800c8be:	9b06      	ldr	r3, [sp, #24]
 800c8c0:	4319      	orrs	r1, r3
 800c8c2:	d110      	bne.n	800c8e6 <_dtoa_r+0xa7e>
 800c8c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c8c8:	d029      	beq.n	800c91e <_dtoa_r+0xab6>
 800c8ca:	9b05      	ldr	r3, [sp, #20]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	dd02      	ble.n	800c8d6 <_dtoa_r+0xa6e>
 800c8d0:	9b02      	ldr	r3, [sp, #8]
 800c8d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c8d6:	9b01      	ldr	r3, [sp, #4]
 800c8d8:	f883 9000 	strb.w	r9, [r3]
 800c8dc:	e774      	b.n	800c7c8 <_dtoa_r+0x960>
 800c8de:	4638      	mov	r0, r7
 800c8e0:	e7ba      	b.n	800c858 <_dtoa_r+0x9f0>
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	e7e1      	b.n	800c8aa <_dtoa_r+0xa42>
 800c8e6:	9b05      	ldr	r3, [sp, #20]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	db04      	blt.n	800c8f6 <_dtoa_r+0xa8e>
 800c8ec:	9907      	ldr	r1, [sp, #28]
 800c8ee:	430b      	orrs	r3, r1
 800c8f0:	9906      	ldr	r1, [sp, #24]
 800c8f2:	430b      	orrs	r3, r1
 800c8f4:	d120      	bne.n	800c938 <_dtoa_r+0xad0>
 800c8f6:	2a00      	cmp	r2, #0
 800c8f8:	dded      	ble.n	800c8d6 <_dtoa_r+0xa6e>
 800c8fa:	4651      	mov	r1, sl
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	4620      	mov	r0, r4
 800c900:	f000 feb4 	bl	800d66c <__lshift>
 800c904:	4631      	mov	r1, r6
 800c906:	4682      	mov	sl, r0
 800c908:	f000 ff1c 	bl	800d744 <__mcmp>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	dc03      	bgt.n	800c918 <_dtoa_r+0xab0>
 800c910:	d1e1      	bne.n	800c8d6 <_dtoa_r+0xa6e>
 800c912:	f019 0f01 	tst.w	r9, #1
 800c916:	d0de      	beq.n	800c8d6 <_dtoa_r+0xa6e>
 800c918:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c91c:	d1d8      	bne.n	800c8d0 <_dtoa_r+0xa68>
 800c91e:	9a01      	ldr	r2, [sp, #4]
 800c920:	2339      	movs	r3, #57	; 0x39
 800c922:	7013      	strb	r3, [r2, #0]
 800c924:	462b      	mov	r3, r5
 800c926:	461d      	mov	r5, r3
 800c928:	3b01      	subs	r3, #1
 800c92a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c92e:	2a39      	cmp	r2, #57	; 0x39
 800c930:	d06c      	beq.n	800ca0c <_dtoa_r+0xba4>
 800c932:	3201      	adds	r2, #1
 800c934:	701a      	strb	r2, [r3, #0]
 800c936:	e747      	b.n	800c7c8 <_dtoa_r+0x960>
 800c938:	2a00      	cmp	r2, #0
 800c93a:	dd07      	ble.n	800c94c <_dtoa_r+0xae4>
 800c93c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c940:	d0ed      	beq.n	800c91e <_dtoa_r+0xab6>
 800c942:	9a01      	ldr	r2, [sp, #4]
 800c944:	f109 0301 	add.w	r3, r9, #1
 800c948:	7013      	strb	r3, [r2, #0]
 800c94a:	e73d      	b.n	800c7c8 <_dtoa_r+0x960>
 800c94c:	9b04      	ldr	r3, [sp, #16]
 800c94e:	9a08      	ldr	r2, [sp, #32]
 800c950:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c954:	4293      	cmp	r3, r2
 800c956:	d043      	beq.n	800c9e0 <_dtoa_r+0xb78>
 800c958:	4651      	mov	r1, sl
 800c95a:	2300      	movs	r3, #0
 800c95c:	220a      	movs	r2, #10
 800c95e:	4620      	mov	r0, r4
 800c960:	f000 fc8c 	bl	800d27c <__multadd>
 800c964:	45b8      	cmp	r8, r7
 800c966:	4682      	mov	sl, r0
 800c968:	f04f 0300 	mov.w	r3, #0
 800c96c:	f04f 020a 	mov.w	r2, #10
 800c970:	4641      	mov	r1, r8
 800c972:	4620      	mov	r0, r4
 800c974:	d107      	bne.n	800c986 <_dtoa_r+0xb1e>
 800c976:	f000 fc81 	bl	800d27c <__multadd>
 800c97a:	4680      	mov	r8, r0
 800c97c:	4607      	mov	r7, r0
 800c97e:	9b04      	ldr	r3, [sp, #16]
 800c980:	3301      	adds	r3, #1
 800c982:	9304      	str	r3, [sp, #16]
 800c984:	e775      	b.n	800c872 <_dtoa_r+0xa0a>
 800c986:	f000 fc79 	bl	800d27c <__multadd>
 800c98a:	4639      	mov	r1, r7
 800c98c:	4680      	mov	r8, r0
 800c98e:	2300      	movs	r3, #0
 800c990:	220a      	movs	r2, #10
 800c992:	4620      	mov	r0, r4
 800c994:	f000 fc72 	bl	800d27c <__multadd>
 800c998:	4607      	mov	r7, r0
 800c99a:	e7f0      	b.n	800c97e <_dtoa_r+0xb16>
 800c99c:	9b04      	ldr	r3, [sp, #16]
 800c99e:	9301      	str	r3, [sp, #4]
 800c9a0:	9d00      	ldr	r5, [sp, #0]
 800c9a2:	4631      	mov	r1, r6
 800c9a4:	4650      	mov	r0, sl
 800c9a6:	f7ff f9d7 	bl	800bd58 <quorem>
 800c9aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c9ae:	9b00      	ldr	r3, [sp, #0]
 800c9b0:	f805 9b01 	strb.w	r9, [r5], #1
 800c9b4:	1aea      	subs	r2, r5, r3
 800c9b6:	9b01      	ldr	r3, [sp, #4]
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	dd07      	ble.n	800c9cc <_dtoa_r+0xb64>
 800c9bc:	4651      	mov	r1, sl
 800c9be:	2300      	movs	r3, #0
 800c9c0:	220a      	movs	r2, #10
 800c9c2:	4620      	mov	r0, r4
 800c9c4:	f000 fc5a 	bl	800d27c <__multadd>
 800c9c8:	4682      	mov	sl, r0
 800c9ca:	e7ea      	b.n	800c9a2 <_dtoa_r+0xb3a>
 800c9cc:	9b01      	ldr	r3, [sp, #4]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	bfc8      	it	gt
 800c9d2:	461d      	movgt	r5, r3
 800c9d4:	9b00      	ldr	r3, [sp, #0]
 800c9d6:	bfd8      	it	le
 800c9d8:	2501      	movle	r5, #1
 800c9da:	441d      	add	r5, r3
 800c9dc:	f04f 0800 	mov.w	r8, #0
 800c9e0:	4651      	mov	r1, sl
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	f000 fe41 	bl	800d66c <__lshift>
 800c9ea:	4631      	mov	r1, r6
 800c9ec:	4682      	mov	sl, r0
 800c9ee:	f000 fea9 	bl	800d744 <__mcmp>
 800c9f2:	2800      	cmp	r0, #0
 800c9f4:	dc96      	bgt.n	800c924 <_dtoa_r+0xabc>
 800c9f6:	d102      	bne.n	800c9fe <_dtoa_r+0xb96>
 800c9f8:	f019 0f01 	tst.w	r9, #1
 800c9fc:	d192      	bne.n	800c924 <_dtoa_r+0xabc>
 800c9fe:	462b      	mov	r3, r5
 800ca00:	461d      	mov	r5, r3
 800ca02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca06:	2a30      	cmp	r2, #48	; 0x30
 800ca08:	d0fa      	beq.n	800ca00 <_dtoa_r+0xb98>
 800ca0a:	e6dd      	b.n	800c7c8 <_dtoa_r+0x960>
 800ca0c:	9a00      	ldr	r2, [sp, #0]
 800ca0e:	429a      	cmp	r2, r3
 800ca10:	d189      	bne.n	800c926 <_dtoa_r+0xabe>
 800ca12:	f10b 0b01 	add.w	fp, fp, #1
 800ca16:	2331      	movs	r3, #49	; 0x31
 800ca18:	e796      	b.n	800c948 <_dtoa_r+0xae0>
 800ca1a:	4b0a      	ldr	r3, [pc, #40]	; (800ca44 <_dtoa_r+0xbdc>)
 800ca1c:	f7ff ba99 	b.w	800bf52 <_dtoa_r+0xea>
 800ca20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f47f aa6d 	bne.w	800bf02 <_dtoa_r+0x9a>
 800ca28:	4b07      	ldr	r3, [pc, #28]	; (800ca48 <_dtoa_r+0xbe0>)
 800ca2a:	f7ff ba92 	b.w	800bf52 <_dtoa_r+0xea>
 800ca2e:	9b01      	ldr	r3, [sp, #4]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	dcb5      	bgt.n	800c9a0 <_dtoa_r+0xb38>
 800ca34:	9b07      	ldr	r3, [sp, #28]
 800ca36:	2b02      	cmp	r3, #2
 800ca38:	f73f aeb1 	bgt.w	800c79e <_dtoa_r+0x936>
 800ca3c:	e7b0      	b.n	800c9a0 <_dtoa_r+0xb38>
 800ca3e:	bf00      	nop
 800ca40:	0800e8e1 	.word	0x0800e8e1
 800ca44:	0800e839 	.word	0x0800e839
 800ca48:	0800e865 	.word	0x0800e865

0800ca4c <_free_r>:
 800ca4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca4e:	2900      	cmp	r1, #0
 800ca50:	d044      	beq.n	800cadc <_free_r+0x90>
 800ca52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca56:	9001      	str	r0, [sp, #4]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f1a1 0404 	sub.w	r4, r1, #4
 800ca5e:	bfb8      	it	lt
 800ca60:	18e4      	addlt	r4, r4, r3
 800ca62:	f7fd fceb 	bl	800a43c <__malloc_lock>
 800ca66:	4a1e      	ldr	r2, [pc, #120]	; (800cae0 <_free_r+0x94>)
 800ca68:	9801      	ldr	r0, [sp, #4]
 800ca6a:	6813      	ldr	r3, [r2, #0]
 800ca6c:	b933      	cbnz	r3, 800ca7c <_free_r+0x30>
 800ca6e:	6063      	str	r3, [r4, #4]
 800ca70:	6014      	str	r4, [r2, #0]
 800ca72:	b003      	add	sp, #12
 800ca74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca78:	f7fd bce6 	b.w	800a448 <__malloc_unlock>
 800ca7c:	42a3      	cmp	r3, r4
 800ca7e:	d908      	bls.n	800ca92 <_free_r+0x46>
 800ca80:	6825      	ldr	r5, [r4, #0]
 800ca82:	1961      	adds	r1, r4, r5
 800ca84:	428b      	cmp	r3, r1
 800ca86:	bf01      	itttt	eq
 800ca88:	6819      	ldreq	r1, [r3, #0]
 800ca8a:	685b      	ldreq	r3, [r3, #4]
 800ca8c:	1949      	addeq	r1, r1, r5
 800ca8e:	6021      	streq	r1, [r4, #0]
 800ca90:	e7ed      	b.n	800ca6e <_free_r+0x22>
 800ca92:	461a      	mov	r2, r3
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	b10b      	cbz	r3, 800ca9c <_free_r+0x50>
 800ca98:	42a3      	cmp	r3, r4
 800ca9a:	d9fa      	bls.n	800ca92 <_free_r+0x46>
 800ca9c:	6811      	ldr	r1, [r2, #0]
 800ca9e:	1855      	adds	r5, r2, r1
 800caa0:	42a5      	cmp	r5, r4
 800caa2:	d10b      	bne.n	800cabc <_free_r+0x70>
 800caa4:	6824      	ldr	r4, [r4, #0]
 800caa6:	4421      	add	r1, r4
 800caa8:	1854      	adds	r4, r2, r1
 800caaa:	42a3      	cmp	r3, r4
 800caac:	6011      	str	r1, [r2, #0]
 800caae:	d1e0      	bne.n	800ca72 <_free_r+0x26>
 800cab0:	681c      	ldr	r4, [r3, #0]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	6053      	str	r3, [r2, #4]
 800cab6:	440c      	add	r4, r1
 800cab8:	6014      	str	r4, [r2, #0]
 800caba:	e7da      	b.n	800ca72 <_free_r+0x26>
 800cabc:	d902      	bls.n	800cac4 <_free_r+0x78>
 800cabe:	230c      	movs	r3, #12
 800cac0:	6003      	str	r3, [r0, #0]
 800cac2:	e7d6      	b.n	800ca72 <_free_r+0x26>
 800cac4:	6825      	ldr	r5, [r4, #0]
 800cac6:	1961      	adds	r1, r4, r5
 800cac8:	428b      	cmp	r3, r1
 800caca:	bf04      	itt	eq
 800cacc:	6819      	ldreq	r1, [r3, #0]
 800cace:	685b      	ldreq	r3, [r3, #4]
 800cad0:	6063      	str	r3, [r4, #4]
 800cad2:	bf04      	itt	eq
 800cad4:	1949      	addeq	r1, r1, r5
 800cad6:	6021      	streq	r1, [r4, #0]
 800cad8:	6054      	str	r4, [r2, #4]
 800cada:	e7ca      	b.n	800ca72 <_free_r+0x26>
 800cadc:	b003      	add	sp, #12
 800cade:	bd30      	pop	{r4, r5, pc}
 800cae0:	20000a6c 	.word	0x20000a6c

0800cae4 <rshift>:
 800cae4:	6903      	ldr	r3, [r0, #16]
 800cae6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800caea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800caee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800caf2:	f100 0414 	add.w	r4, r0, #20
 800caf6:	dd45      	ble.n	800cb84 <rshift+0xa0>
 800caf8:	f011 011f 	ands.w	r1, r1, #31
 800cafc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cb00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cb04:	d10c      	bne.n	800cb20 <rshift+0x3c>
 800cb06:	f100 0710 	add.w	r7, r0, #16
 800cb0a:	4629      	mov	r1, r5
 800cb0c:	42b1      	cmp	r1, r6
 800cb0e:	d334      	bcc.n	800cb7a <rshift+0x96>
 800cb10:	1a9b      	subs	r3, r3, r2
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	1eea      	subs	r2, r5, #3
 800cb16:	4296      	cmp	r6, r2
 800cb18:	bf38      	it	cc
 800cb1a:	2300      	movcc	r3, #0
 800cb1c:	4423      	add	r3, r4
 800cb1e:	e015      	b.n	800cb4c <rshift+0x68>
 800cb20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cb24:	f1c1 0820 	rsb	r8, r1, #32
 800cb28:	40cf      	lsrs	r7, r1
 800cb2a:	f105 0e04 	add.w	lr, r5, #4
 800cb2e:	46a1      	mov	r9, r4
 800cb30:	4576      	cmp	r6, lr
 800cb32:	46f4      	mov	ip, lr
 800cb34:	d815      	bhi.n	800cb62 <rshift+0x7e>
 800cb36:	1a9a      	subs	r2, r3, r2
 800cb38:	0092      	lsls	r2, r2, #2
 800cb3a:	3a04      	subs	r2, #4
 800cb3c:	3501      	adds	r5, #1
 800cb3e:	42ae      	cmp	r6, r5
 800cb40:	bf38      	it	cc
 800cb42:	2200      	movcc	r2, #0
 800cb44:	18a3      	adds	r3, r4, r2
 800cb46:	50a7      	str	r7, [r4, r2]
 800cb48:	b107      	cbz	r7, 800cb4c <rshift+0x68>
 800cb4a:	3304      	adds	r3, #4
 800cb4c:	1b1a      	subs	r2, r3, r4
 800cb4e:	42a3      	cmp	r3, r4
 800cb50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cb54:	bf08      	it	eq
 800cb56:	2300      	moveq	r3, #0
 800cb58:	6102      	str	r2, [r0, #16]
 800cb5a:	bf08      	it	eq
 800cb5c:	6143      	streq	r3, [r0, #20]
 800cb5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb62:	f8dc c000 	ldr.w	ip, [ip]
 800cb66:	fa0c fc08 	lsl.w	ip, ip, r8
 800cb6a:	ea4c 0707 	orr.w	r7, ip, r7
 800cb6e:	f849 7b04 	str.w	r7, [r9], #4
 800cb72:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cb76:	40cf      	lsrs	r7, r1
 800cb78:	e7da      	b.n	800cb30 <rshift+0x4c>
 800cb7a:	f851 cb04 	ldr.w	ip, [r1], #4
 800cb7e:	f847 cf04 	str.w	ip, [r7, #4]!
 800cb82:	e7c3      	b.n	800cb0c <rshift+0x28>
 800cb84:	4623      	mov	r3, r4
 800cb86:	e7e1      	b.n	800cb4c <rshift+0x68>

0800cb88 <__hexdig_fun>:
 800cb88:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cb8c:	2b09      	cmp	r3, #9
 800cb8e:	d802      	bhi.n	800cb96 <__hexdig_fun+0xe>
 800cb90:	3820      	subs	r0, #32
 800cb92:	b2c0      	uxtb	r0, r0
 800cb94:	4770      	bx	lr
 800cb96:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cb9a:	2b05      	cmp	r3, #5
 800cb9c:	d801      	bhi.n	800cba2 <__hexdig_fun+0x1a>
 800cb9e:	3847      	subs	r0, #71	; 0x47
 800cba0:	e7f7      	b.n	800cb92 <__hexdig_fun+0xa>
 800cba2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cba6:	2b05      	cmp	r3, #5
 800cba8:	d801      	bhi.n	800cbae <__hexdig_fun+0x26>
 800cbaa:	3827      	subs	r0, #39	; 0x27
 800cbac:	e7f1      	b.n	800cb92 <__hexdig_fun+0xa>
 800cbae:	2000      	movs	r0, #0
 800cbb0:	4770      	bx	lr
	...

0800cbb4 <__gethex>:
 800cbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb8:	4617      	mov	r7, r2
 800cbba:	680a      	ldr	r2, [r1, #0]
 800cbbc:	b085      	sub	sp, #20
 800cbbe:	f102 0b02 	add.w	fp, r2, #2
 800cbc2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cbc6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cbca:	4681      	mov	r9, r0
 800cbcc:	468a      	mov	sl, r1
 800cbce:	9302      	str	r3, [sp, #8]
 800cbd0:	32fe      	adds	r2, #254	; 0xfe
 800cbd2:	eb02 030b 	add.w	r3, r2, fp
 800cbd6:	46d8      	mov	r8, fp
 800cbd8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800cbdc:	9301      	str	r3, [sp, #4]
 800cbde:	2830      	cmp	r0, #48	; 0x30
 800cbe0:	d0f7      	beq.n	800cbd2 <__gethex+0x1e>
 800cbe2:	f7ff ffd1 	bl	800cb88 <__hexdig_fun>
 800cbe6:	4604      	mov	r4, r0
 800cbe8:	2800      	cmp	r0, #0
 800cbea:	d138      	bne.n	800cc5e <__gethex+0xaa>
 800cbec:	49a7      	ldr	r1, [pc, #668]	; (800ce8c <__gethex+0x2d8>)
 800cbee:	2201      	movs	r2, #1
 800cbf0:	4640      	mov	r0, r8
 800cbf2:	f7ff f802 	bl	800bbfa <strncmp>
 800cbf6:	4606      	mov	r6, r0
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	d169      	bne.n	800ccd0 <__gethex+0x11c>
 800cbfc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800cc00:	465d      	mov	r5, fp
 800cc02:	f7ff ffc1 	bl	800cb88 <__hexdig_fun>
 800cc06:	2800      	cmp	r0, #0
 800cc08:	d064      	beq.n	800ccd4 <__gethex+0x120>
 800cc0a:	465a      	mov	r2, fp
 800cc0c:	7810      	ldrb	r0, [r2, #0]
 800cc0e:	2830      	cmp	r0, #48	; 0x30
 800cc10:	4690      	mov	r8, r2
 800cc12:	f102 0201 	add.w	r2, r2, #1
 800cc16:	d0f9      	beq.n	800cc0c <__gethex+0x58>
 800cc18:	f7ff ffb6 	bl	800cb88 <__hexdig_fun>
 800cc1c:	2301      	movs	r3, #1
 800cc1e:	fab0 f480 	clz	r4, r0
 800cc22:	0964      	lsrs	r4, r4, #5
 800cc24:	465e      	mov	r6, fp
 800cc26:	9301      	str	r3, [sp, #4]
 800cc28:	4642      	mov	r2, r8
 800cc2a:	4615      	mov	r5, r2
 800cc2c:	3201      	adds	r2, #1
 800cc2e:	7828      	ldrb	r0, [r5, #0]
 800cc30:	f7ff ffaa 	bl	800cb88 <__hexdig_fun>
 800cc34:	2800      	cmp	r0, #0
 800cc36:	d1f8      	bne.n	800cc2a <__gethex+0x76>
 800cc38:	4994      	ldr	r1, [pc, #592]	; (800ce8c <__gethex+0x2d8>)
 800cc3a:	2201      	movs	r2, #1
 800cc3c:	4628      	mov	r0, r5
 800cc3e:	f7fe ffdc 	bl	800bbfa <strncmp>
 800cc42:	b978      	cbnz	r0, 800cc64 <__gethex+0xb0>
 800cc44:	b946      	cbnz	r6, 800cc58 <__gethex+0xa4>
 800cc46:	1c6e      	adds	r6, r5, #1
 800cc48:	4632      	mov	r2, r6
 800cc4a:	4615      	mov	r5, r2
 800cc4c:	3201      	adds	r2, #1
 800cc4e:	7828      	ldrb	r0, [r5, #0]
 800cc50:	f7ff ff9a 	bl	800cb88 <__hexdig_fun>
 800cc54:	2800      	cmp	r0, #0
 800cc56:	d1f8      	bne.n	800cc4a <__gethex+0x96>
 800cc58:	1b73      	subs	r3, r6, r5
 800cc5a:	009e      	lsls	r6, r3, #2
 800cc5c:	e004      	b.n	800cc68 <__gethex+0xb4>
 800cc5e:	2400      	movs	r4, #0
 800cc60:	4626      	mov	r6, r4
 800cc62:	e7e1      	b.n	800cc28 <__gethex+0x74>
 800cc64:	2e00      	cmp	r6, #0
 800cc66:	d1f7      	bne.n	800cc58 <__gethex+0xa4>
 800cc68:	782b      	ldrb	r3, [r5, #0]
 800cc6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cc6e:	2b50      	cmp	r3, #80	; 0x50
 800cc70:	d13d      	bne.n	800ccee <__gethex+0x13a>
 800cc72:	786b      	ldrb	r3, [r5, #1]
 800cc74:	2b2b      	cmp	r3, #43	; 0x2b
 800cc76:	d02f      	beq.n	800ccd8 <__gethex+0x124>
 800cc78:	2b2d      	cmp	r3, #45	; 0x2d
 800cc7a:	d031      	beq.n	800cce0 <__gethex+0x12c>
 800cc7c:	1c69      	adds	r1, r5, #1
 800cc7e:	f04f 0b00 	mov.w	fp, #0
 800cc82:	7808      	ldrb	r0, [r1, #0]
 800cc84:	f7ff ff80 	bl	800cb88 <__hexdig_fun>
 800cc88:	1e42      	subs	r2, r0, #1
 800cc8a:	b2d2      	uxtb	r2, r2
 800cc8c:	2a18      	cmp	r2, #24
 800cc8e:	d82e      	bhi.n	800ccee <__gethex+0x13a>
 800cc90:	f1a0 0210 	sub.w	r2, r0, #16
 800cc94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cc98:	f7ff ff76 	bl	800cb88 <__hexdig_fun>
 800cc9c:	f100 3cff 	add.w	ip, r0, #4294967295
 800cca0:	fa5f fc8c 	uxtb.w	ip, ip
 800cca4:	f1bc 0f18 	cmp.w	ip, #24
 800cca8:	d91d      	bls.n	800cce6 <__gethex+0x132>
 800ccaa:	f1bb 0f00 	cmp.w	fp, #0
 800ccae:	d000      	beq.n	800ccb2 <__gethex+0xfe>
 800ccb0:	4252      	negs	r2, r2
 800ccb2:	4416      	add	r6, r2
 800ccb4:	f8ca 1000 	str.w	r1, [sl]
 800ccb8:	b1dc      	cbz	r4, 800ccf2 <__gethex+0x13e>
 800ccba:	9b01      	ldr	r3, [sp, #4]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	bf14      	ite	ne
 800ccc0:	f04f 0800 	movne.w	r8, #0
 800ccc4:	f04f 0806 	moveq.w	r8, #6
 800ccc8:	4640      	mov	r0, r8
 800ccca:	b005      	add	sp, #20
 800cccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccd0:	4645      	mov	r5, r8
 800ccd2:	4626      	mov	r6, r4
 800ccd4:	2401      	movs	r4, #1
 800ccd6:	e7c7      	b.n	800cc68 <__gethex+0xb4>
 800ccd8:	f04f 0b00 	mov.w	fp, #0
 800ccdc:	1ca9      	adds	r1, r5, #2
 800ccde:	e7d0      	b.n	800cc82 <__gethex+0xce>
 800cce0:	f04f 0b01 	mov.w	fp, #1
 800cce4:	e7fa      	b.n	800ccdc <__gethex+0x128>
 800cce6:	230a      	movs	r3, #10
 800cce8:	fb03 0002 	mla	r0, r3, r2, r0
 800ccec:	e7d0      	b.n	800cc90 <__gethex+0xdc>
 800ccee:	4629      	mov	r1, r5
 800ccf0:	e7e0      	b.n	800ccb4 <__gethex+0x100>
 800ccf2:	eba5 0308 	sub.w	r3, r5, r8
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	4621      	mov	r1, r4
 800ccfa:	2b07      	cmp	r3, #7
 800ccfc:	dc0a      	bgt.n	800cd14 <__gethex+0x160>
 800ccfe:	4648      	mov	r0, r9
 800cd00:	f000 fa5a 	bl	800d1b8 <_Balloc>
 800cd04:	4604      	mov	r4, r0
 800cd06:	b940      	cbnz	r0, 800cd1a <__gethex+0x166>
 800cd08:	4b61      	ldr	r3, [pc, #388]	; (800ce90 <__gethex+0x2dc>)
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	21e4      	movs	r1, #228	; 0xe4
 800cd0e:	4861      	ldr	r0, [pc, #388]	; (800ce94 <__gethex+0x2e0>)
 800cd10:	f001 f934 	bl	800df7c <__assert_func>
 800cd14:	3101      	adds	r1, #1
 800cd16:	105b      	asrs	r3, r3, #1
 800cd18:	e7ef      	b.n	800ccfa <__gethex+0x146>
 800cd1a:	f100 0a14 	add.w	sl, r0, #20
 800cd1e:	2300      	movs	r3, #0
 800cd20:	495a      	ldr	r1, [pc, #360]	; (800ce8c <__gethex+0x2d8>)
 800cd22:	f8cd a004 	str.w	sl, [sp, #4]
 800cd26:	469b      	mov	fp, r3
 800cd28:	45a8      	cmp	r8, r5
 800cd2a:	d342      	bcc.n	800cdb2 <__gethex+0x1fe>
 800cd2c:	9801      	ldr	r0, [sp, #4]
 800cd2e:	f840 bb04 	str.w	fp, [r0], #4
 800cd32:	eba0 000a 	sub.w	r0, r0, sl
 800cd36:	1080      	asrs	r0, r0, #2
 800cd38:	6120      	str	r0, [r4, #16]
 800cd3a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800cd3e:	4658      	mov	r0, fp
 800cd40:	f000 fb2c 	bl	800d39c <__hi0bits>
 800cd44:	683d      	ldr	r5, [r7, #0]
 800cd46:	eba8 0000 	sub.w	r0, r8, r0
 800cd4a:	42a8      	cmp	r0, r5
 800cd4c:	dd59      	ble.n	800ce02 <__gethex+0x24e>
 800cd4e:	eba0 0805 	sub.w	r8, r0, r5
 800cd52:	4641      	mov	r1, r8
 800cd54:	4620      	mov	r0, r4
 800cd56:	f000 febb 	bl	800dad0 <__any_on>
 800cd5a:	4683      	mov	fp, r0
 800cd5c:	b1b8      	cbz	r0, 800cd8e <__gethex+0x1da>
 800cd5e:	f108 33ff 	add.w	r3, r8, #4294967295
 800cd62:	1159      	asrs	r1, r3, #5
 800cd64:	f003 021f 	and.w	r2, r3, #31
 800cd68:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cd6c:	f04f 0b01 	mov.w	fp, #1
 800cd70:	fa0b f202 	lsl.w	r2, fp, r2
 800cd74:	420a      	tst	r2, r1
 800cd76:	d00a      	beq.n	800cd8e <__gethex+0x1da>
 800cd78:	455b      	cmp	r3, fp
 800cd7a:	dd06      	ble.n	800cd8a <__gethex+0x1d6>
 800cd7c:	f1a8 0102 	sub.w	r1, r8, #2
 800cd80:	4620      	mov	r0, r4
 800cd82:	f000 fea5 	bl	800dad0 <__any_on>
 800cd86:	2800      	cmp	r0, #0
 800cd88:	d138      	bne.n	800cdfc <__gethex+0x248>
 800cd8a:	f04f 0b02 	mov.w	fp, #2
 800cd8e:	4641      	mov	r1, r8
 800cd90:	4620      	mov	r0, r4
 800cd92:	f7ff fea7 	bl	800cae4 <rshift>
 800cd96:	4446      	add	r6, r8
 800cd98:	68bb      	ldr	r3, [r7, #8]
 800cd9a:	42b3      	cmp	r3, r6
 800cd9c:	da41      	bge.n	800ce22 <__gethex+0x26e>
 800cd9e:	4621      	mov	r1, r4
 800cda0:	4648      	mov	r0, r9
 800cda2:	f000 fa49 	bl	800d238 <_Bfree>
 800cda6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cda8:	2300      	movs	r3, #0
 800cdaa:	6013      	str	r3, [r2, #0]
 800cdac:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800cdb0:	e78a      	b.n	800ccc8 <__gethex+0x114>
 800cdb2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800cdb6:	2a2e      	cmp	r2, #46	; 0x2e
 800cdb8:	d014      	beq.n	800cde4 <__gethex+0x230>
 800cdba:	2b20      	cmp	r3, #32
 800cdbc:	d106      	bne.n	800cdcc <__gethex+0x218>
 800cdbe:	9b01      	ldr	r3, [sp, #4]
 800cdc0:	f843 bb04 	str.w	fp, [r3], #4
 800cdc4:	f04f 0b00 	mov.w	fp, #0
 800cdc8:	9301      	str	r3, [sp, #4]
 800cdca:	465b      	mov	r3, fp
 800cdcc:	7828      	ldrb	r0, [r5, #0]
 800cdce:	9303      	str	r3, [sp, #12]
 800cdd0:	f7ff feda 	bl	800cb88 <__hexdig_fun>
 800cdd4:	9b03      	ldr	r3, [sp, #12]
 800cdd6:	f000 000f 	and.w	r0, r0, #15
 800cdda:	4098      	lsls	r0, r3
 800cddc:	ea4b 0b00 	orr.w	fp, fp, r0
 800cde0:	3304      	adds	r3, #4
 800cde2:	e7a1      	b.n	800cd28 <__gethex+0x174>
 800cde4:	45a8      	cmp	r8, r5
 800cde6:	d8e8      	bhi.n	800cdba <__gethex+0x206>
 800cde8:	2201      	movs	r2, #1
 800cdea:	4628      	mov	r0, r5
 800cdec:	9303      	str	r3, [sp, #12]
 800cdee:	f7fe ff04 	bl	800bbfa <strncmp>
 800cdf2:	4926      	ldr	r1, [pc, #152]	; (800ce8c <__gethex+0x2d8>)
 800cdf4:	9b03      	ldr	r3, [sp, #12]
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	d1df      	bne.n	800cdba <__gethex+0x206>
 800cdfa:	e795      	b.n	800cd28 <__gethex+0x174>
 800cdfc:	f04f 0b03 	mov.w	fp, #3
 800ce00:	e7c5      	b.n	800cd8e <__gethex+0x1da>
 800ce02:	da0b      	bge.n	800ce1c <__gethex+0x268>
 800ce04:	eba5 0800 	sub.w	r8, r5, r0
 800ce08:	4621      	mov	r1, r4
 800ce0a:	4642      	mov	r2, r8
 800ce0c:	4648      	mov	r0, r9
 800ce0e:	f000 fc2d 	bl	800d66c <__lshift>
 800ce12:	eba6 0608 	sub.w	r6, r6, r8
 800ce16:	4604      	mov	r4, r0
 800ce18:	f100 0a14 	add.w	sl, r0, #20
 800ce1c:	f04f 0b00 	mov.w	fp, #0
 800ce20:	e7ba      	b.n	800cd98 <__gethex+0x1e4>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	42b3      	cmp	r3, r6
 800ce26:	dd73      	ble.n	800cf10 <__gethex+0x35c>
 800ce28:	1b9e      	subs	r6, r3, r6
 800ce2a:	42b5      	cmp	r5, r6
 800ce2c:	dc34      	bgt.n	800ce98 <__gethex+0x2e4>
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2b02      	cmp	r3, #2
 800ce32:	d023      	beq.n	800ce7c <__gethex+0x2c8>
 800ce34:	2b03      	cmp	r3, #3
 800ce36:	d025      	beq.n	800ce84 <__gethex+0x2d0>
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	d115      	bne.n	800ce68 <__gethex+0x2b4>
 800ce3c:	42b5      	cmp	r5, r6
 800ce3e:	d113      	bne.n	800ce68 <__gethex+0x2b4>
 800ce40:	2d01      	cmp	r5, #1
 800ce42:	d10b      	bne.n	800ce5c <__gethex+0x2a8>
 800ce44:	9a02      	ldr	r2, [sp, #8]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6013      	str	r3, [r2, #0]
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	6123      	str	r3, [r4, #16]
 800ce4e:	f8ca 3000 	str.w	r3, [sl]
 800ce52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce54:	f04f 0862 	mov.w	r8, #98	; 0x62
 800ce58:	601c      	str	r4, [r3, #0]
 800ce5a:	e735      	b.n	800ccc8 <__gethex+0x114>
 800ce5c:	1e69      	subs	r1, r5, #1
 800ce5e:	4620      	mov	r0, r4
 800ce60:	f000 fe36 	bl	800dad0 <__any_on>
 800ce64:	2800      	cmp	r0, #0
 800ce66:	d1ed      	bne.n	800ce44 <__gethex+0x290>
 800ce68:	4621      	mov	r1, r4
 800ce6a:	4648      	mov	r0, r9
 800ce6c:	f000 f9e4 	bl	800d238 <_Bfree>
 800ce70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce72:	2300      	movs	r3, #0
 800ce74:	6013      	str	r3, [r2, #0]
 800ce76:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ce7a:	e725      	b.n	800ccc8 <__gethex+0x114>
 800ce7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d1f2      	bne.n	800ce68 <__gethex+0x2b4>
 800ce82:	e7df      	b.n	800ce44 <__gethex+0x290>
 800ce84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d1dc      	bne.n	800ce44 <__gethex+0x290>
 800ce8a:	e7ed      	b.n	800ce68 <__gethex+0x2b4>
 800ce8c:	0800e6d0 	.word	0x0800e6d0
 800ce90:	0800e8e1 	.word	0x0800e8e1
 800ce94:	0800e8f2 	.word	0x0800e8f2
 800ce98:	f106 38ff 	add.w	r8, r6, #4294967295
 800ce9c:	f1bb 0f00 	cmp.w	fp, #0
 800cea0:	d133      	bne.n	800cf0a <__gethex+0x356>
 800cea2:	f1b8 0f00 	cmp.w	r8, #0
 800cea6:	d004      	beq.n	800ceb2 <__gethex+0x2fe>
 800cea8:	4641      	mov	r1, r8
 800ceaa:	4620      	mov	r0, r4
 800ceac:	f000 fe10 	bl	800dad0 <__any_on>
 800ceb0:	4683      	mov	fp, r0
 800ceb2:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cebc:	f008 081f 	and.w	r8, r8, #31
 800cec0:	fa03 f308 	lsl.w	r3, r3, r8
 800cec4:	4213      	tst	r3, r2
 800cec6:	4631      	mov	r1, r6
 800cec8:	4620      	mov	r0, r4
 800ceca:	bf18      	it	ne
 800cecc:	f04b 0b02 	orrne.w	fp, fp, #2
 800ced0:	1bad      	subs	r5, r5, r6
 800ced2:	f7ff fe07 	bl	800cae4 <rshift>
 800ced6:	687e      	ldr	r6, [r7, #4]
 800ced8:	f04f 0802 	mov.w	r8, #2
 800cedc:	f1bb 0f00 	cmp.w	fp, #0
 800cee0:	d04a      	beq.n	800cf78 <__gethex+0x3c4>
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2b02      	cmp	r3, #2
 800cee6:	d016      	beq.n	800cf16 <__gethex+0x362>
 800cee8:	2b03      	cmp	r3, #3
 800ceea:	d018      	beq.n	800cf1e <__gethex+0x36a>
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d109      	bne.n	800cf04 <__gethex+0x350>
 800cef0:	f01b 0f02 	tst.w	fp, #2
 800cef4:	d006      	beq.n	800cf04 <__gethex+0x350>
 800cef6:	f8da 3000 	ldr.w	r3, [sl]
 800cefa:	ea4b 0b03 	orr.w	fp, fp, r3
 800cefe:	f01b 0f01 	tst.w	fp, #1
 800cf02:	d10f      	bne.n	800cf24 <__gethex+0x370>
 800cf04:	f048 0810 	orr.w	r8, r8, #16
 800cf08:	e036      	b.n	800cf78 <__gethex+0x3c4>
 800cf0a:	f04f 0b01 	mov.w	fp, #1
 800cf0e:	e7d0      	b.n	800ceb2 <__gethex+0x2fe>
 800cf10:	f04f 0801 	mov.w	r8, #1
 800cf14:	e7e2      	b.n	800cedc <__gethex+0x328>
 800cf16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf18:	f1c3 0301 	rsb	r3, r3, #1
 800cf1c:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d0ef      	beq.n	800cf04 <__gethex+0x350>
 800cf24:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cf28:	f104 0214 	add.w	r2, r4, #20
 800cf2c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800cf30:	9301      	str	r3, [sp, #4]
 800cf32:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800cf36:	2300      	movs	r3, #0
 800cf38:	4694      	mov	ip, r2
 800cf3a:	f852 1b04 	ldr.w	r1, [r2], #4
 800cf3e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800cf42:	d01e      	beq.n	800cf82 <__gethex+0x3ce>
 800cf44:	3101      	adds	r1, #1
 800cf46:	f8cc 1000 	str.w	r1, [ip]
 800cf4a:	f1b8 0f02 	cmp.w	r8, #2
 800cf4e:	f104 0214 	add.w	r2, r4, #20
 800cf52:	d13d      	bne.n	800cfd0 <__gethex+0x41c>
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	3b01      	subs	r3, #1
 800cf58:	42ab      	cmp	r3, r5
 800cf5a:	d10b      	bne.n	800cf74 <__gethex+0x3c0>
 800cf5c:	1169      	asrs	r1, r5, #5
 800cf5e:	2301      	movs	r3, #1
 800cf60:	f005 051f 	and.w	r5, r5, #31
 800cf64:	fa03 f505 	lsl.w	r5, r3, r5
 800cf68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf6c:	421d      	tst	r5, r3
 800cf6e:	bf18      	it	ne
 800cf70:	f04f 0801 	movne.w	r8, #1
 800cf74:	f048 0820 	orr.w	r8, r8, #32
 800cf78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf7a:	601c      	str	r4, [r3, #0]
 800cf7c:	9b02      	ldr	r3, [sp, #8]
 800cf7e:	601e      	str	r6, [r3, #0]
 800cf80:	e6a2      	b.n	800ccc8 <__gethex+0x114>
 800cf82:	4290      	cmp	r0, r2
 800cf84:	f842 3c04 	str.w	r3, [r2, #-4]
 800cf88:	d8d6      	bhi.n	800cf38 <__gethex+0x384>
 800cf8a:	68a2      	ldr	r2, [r4, #8]
 800cf8c:	4593      	cmp	fp, r2
 800cf8e:	db17      	blt.n	800cfc0 <__gethex+0x40c>
 800cf90:	6861      	ldr	r1, [r4, #4]
 800cf92:	4648      	mov	r0, r9
 800cf94:	3101      	adds	r1, #1
 800cf96:	f000 f90f 	bl	800d1b8 <_Balloc>
 800cf9a:	4682      	mov	sl, r0
 800cf9c:	b918      	cbnz	r0, 800cfa6 <__gethex+0x3f2>
 800cf9e:	4b1b      	ldr	r3, [pc, #108]	; (800d00c <__gethex+0x458>)
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	2184      	movs	r1, #132	; 0x84
 800cfa4:	e6b3      	b.n	800cd0e <__gethex+0x15a>
 800cfa6:	6922      	ldr	r2, [r4, #16]
 800cfa8:	3202      	adds	r2, #2
 800cfaa:	f104 010c 	add.w	r1, r4, #12
 800cfae:	0092      	lsls	r2, r2, #2
 800cfb0:	300c      	adds	r0, #12
 800cfb2:	f7fe febb 	bl	800bd2c <memcpy>
 800cfb6:	4621      	mov	r1, r4
 800cfb8:	4648      	mov	r0, r9
 800cfba:	f000 f93d 	bl	800d238 <_Bfree>
 800cfbe:	4654      	mov	r4, sl
 800cfc0:	6922      	ldr	r2, [r4, #16]
 800cfc2:	1c51      	adds	r1, r2, #1
 800cfc4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cfc8:	6121      	str	r1, [r4, #16]
 800cfca:	2101      	movs	r1, #1
 800cfcc:	6151      	str	r1, [r2, #20]
 800cfce:	e7bc      	b.n	800cf4a <__gethex+0x396>
 800cfd0:	6921      	ldr	r1, [r4, #16]
 800cfd2:	4559      	cmp	r1, fp
 800cfd4:	dd0b      	ble.n	800cfee <__gethex+0x43a>
 800cfd6:	2101      	movs	r1, #1
 800cfd8:	4620      	mov	r0, r4
 800cfda:	f7ff fd83 	bl	800cae4 <rshift>
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	3601      	adds	r6, #1
 800cfe2:	42b3      	cmp	r3, r6
 800cfe4:	f6ff aedb 	blt.w	800cd9e <__gethex+0x1ea>
 800cfe8:	f04f 0801 	mov.w	r8, #1
 800cfec:	e7c2      	b.n	800cf74 <__gethex+0x3c0>
 800cfee:	f015 051f 	ands.w	r5, r5, #31
 800cff2:	d0f9      	beq.n	800cfe8 <__gethex+0x434>
 800cff4:	9b01      	ldr	r3, [sp, #4]
 800cff6:	441a      	add	r2, r3
 800cff8:	f1c5 0520 	rsb	r5, r5, #32
 800cffc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d000:	f000 f9cc 	bl	800d39c <__hi0bits>
 800d004:	42a8      	cmp	r0, r5
 800d006:	dbe6      	blt.n	800cfd6 <__gethex+0x422>
 800d008:	e7ee      	b.n	800cfe8 <__gethex+0x434>
 800d00a:	bf00      	nop
 800d00c:	0800e8e1 	.word	0x0800e8e1

0800d010 <L_shift>:
 800d010:	f1c2 0208 	rsb	r2, r2, #8
 800d014:	0092      	lsls	r2, r2, #2
 800d016:	b570      	push	{r4, r5, r6, lr}
 800d018:	f1c2 0620 	rsb	r6, r2, #32
 800d01c:	6843      	ldr	r3, [r0, #4]
 800d01e:	6804      	ldr	r4, [r0, #0]
 800d020:	fa03 f506 	lsl.w	r5, r3, r6
 800d024:	432c      	orrs	r4, r5
 800d026:	40d3      	lsrs	r3, r2
 800d028:	6004      	str	r4, [r0, #0]
 800d02a:	f840 3f04 	str.w	r3, [r0, #4]!
 800d02e:	4288      	cmp	r0, r1
 800d030:	d3f4      	bcc.n	800d01c <L_shift+0xc>
 800d032:	bd70      	pop	{r4, r5, r6, pc}

0800d034 <__match>:
 800d034:	b530      	push	{r4, r5, lr}
 800d036:	6803      	ldr	r3, [r0, #0]
 800d038:	3301      	adds	r3, #1
 800d03a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d03e:	b914      	cbnz	r4, 800d046 <__match+0x12>
 800d040:	6003      	str	r3, [r0, #0]
 800d042:	2001      	movs	r0, #1
 800d044:	bd30      	pop	{r4, r5, pc}
 800d046:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d04a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d04e:	2d19      	cmp	r5, #25
 800d050:	bf98      	it	ls
 800d052:	3220      	addls	r2, #32
 800d054:	42a2      	cmp	r2, r4
 800d056:	d0f0      	beq.n	800d03a <__match+0x6>
 800d058:	2000      	movs	r0, #0
 800d05a:	e7f3      	b.n	800d044 <__match+0x10>

0800d05c <__hexnan>:
 800d05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d060:	680b      	ldr	r3, [r1, #0]
 800d062:	6801      	ldr	r1, [r0, #0]
 800d064:	115e      	asrs	r6, r3, #5
 800d066:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d06a:	f013 031f 	ands.w	r3, r3, #31
 800d06e:	b087      	sub	sp, #28
 800d070:	bf18      	it	ne
 800d072:	3604      	addne	r6, #4
 800d074:	2500      	movs	r5, #0
 800d076:	1f37      	subs	r7, r6, #4
 800d078:	4682      	mov	sl, r0
 800d07a:	4690      	mov	r8, r2
 800d07c:	9301      	str	r3, [sp, #4]
 800d07e:	f846 5c04 	str.w	r5, [r6, #-4]
 800d082:	46b9      	mov	r9, r7
 800d084:	463c      	mov	r4, r7
 800d086:	9502      	str	r5, [sp, #8]
 800d088:	46ab      	mov	fp, r5
 800d08a:	784a      	ldrb	r2, [r1, #1]
 800d08c:	1c4b      	adds	r3, r1, #1
 800d08e:	9303      	str	r3, [sp, #12]
 800d090:	b342      	cbz	r2, 800d0e4 <__hexnan+0x88>
 800d092:	4610      	mov	r0, r2
 800d094:	9105      	str	r1, [sp, #20]
 800d096:	9204      	str	r2, [sp, #16]
 800d098:	f7ff fd76 	bl	800cb88 <__hexdig_fun>
 800d09c:	2800      	cmp	r0, #0
 800d09e:	d14f      	bne.n	800d140 <__hexnan+0xe4>
 800d0a0:	9a04      	ldr	r2, [sp, #16]
 800d0a2:	9905      	ldr	r1, [sp, #20]
 800d0a4:	2a20      	cmp	r2, #32
 800d0a6:	d818      	bhi.n	800d0da <__hexnan+0x7e>
 800d0a8:	9b02      	ldr	r3, [sp, #8]
 800d0aa:	459b      	cmp	fp, r3
 800d0ac:	dd13      	ble.n	800d0d6 <__hexnan+0x7a>
 800d0ae:	454c      	cmp	r4, r9
 800d0b0:	d206      	bcs.n	800d0c0 <__hexnan+0x64>
 800d0b2:	2d07      	cmp	r5, #7
 800d0b4:	dc04      	bgt.n	800d0c0 <__hexnan+0x64>
 800d0b6:	462a      	mov	r2, r5
 800d0b8:	4649      	mov	r1, r9
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	f7ff ffa8 	bl	800d010 <L_shift>
 800d0c0:	4544      	cmp	r4, r8
 800d0c2:	d950      	bls.n	800d166 <__hexnan+0x10a>
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	f1a4 0904 	sub.w	r9, r4, #4
 800d0ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800d0ce:	f8cd b008 	str.w	fp, [sp, #8]
 800d0d2:	464c      	mov	r4, r9
 800d0d4:	461d      	mov	r5, r3
 800d0d6:	9903      	ldr	r1, [sp, #12]
 800d0d8:	e7d7      	b.n	800d08a <__hexnan+0x2e>
 800d0da:	2a29      	cmp	r2, #41	; 0x29
 800d0dc:	d155      	bne.n	800d18a <__hexnan+0x12e>
 800d0de:	3102      	adds	r1, #2
 800d0e0:	f8ca 1000 	str.w	r1, [sl]
 800d0e4:	f1bb 0f00 	cmp.w	fp, #0
 800d0e8:	d04f      	beq.n	800d18a <__hexnan+0x12e>
 800d0ea:	454c      	cmp	r4, r9
 800d0ec:	d206      	bcs.n	800d0fc <__hexnan+0xa0>
 800d0ee:	2d07      	cmp	r5, #7
 800d0f0:	dc04      	bgt.n	800d0fc <__hexnan+0xa0>
 800d0f2:	462a      	mov	r2, r5
 800d0f4:	4649      	mov	r1, r9
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f7ff ff8a 	bl	800d010 <L_shift>
 800d0fc:	4544      	cmp	r4, r8
 800d0fe:	d934      	bls.n	800d16a <__hexnan+0x10e>
 800d100:	f1a8 0204 	sub.w	r2, r8, #4
 800d104:	4623      	mov	r3, r4
 800d106:	f853 1b04 	ldr.w	r1, [r3], #4
 800d10a:	f842 1f04 	str.w	r1, [r2, #4]!
 800d10e:	429f      	cmp	r7, r3
 800d110:	d2f9      	bcs.n	800d106 <__hexnan+0xaa>
 800d112:	1b3b      	subs	r3, r7, r4
 800d114:	f023 0303 	bic.w	r3, r3, #3
 800d118:	3304      	adds	r3, #4
 800d11a:	3e03      	subs	r6, #3
 800d11c:	3401      	adds	r4, #1
 800d11e:	42a6      	cmp	r6, r4
 800d120:	bf38      	it	cc
 800d122:	2304      	movcc	r3, #4
 800d124:	4443      	add	r3, r8
 800d126:	2200      	movs	r2, #0
 800d128:	f843 2b04 	str.w	r2, [r3], #4
 800d12c:	429f      	cmp	r7, r3
 800d12e:	d2fb      	bcs.n	800d128 <__hexnan+0xcc>
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	b91b      	cbnz	r3, 800d13c <__hexnan+0xe0>
 800d134:	4547      	cmp	r7, r8
 800d136:	d126      	bne.n	800d186 <__hexnan+0x12a>
 800d138:	2301      	movs	r3, #1
 800d13a:	603b      	str	r3, [r7, #0]
 800d13c:	2005      	movs	r0, #5
 800d13e:	e025      	b.n	800d18c <__hexnan+0x130>
 800d140:	3501      	adds	r5, #1
 800d142:	2d08      	cmp	r5, #8
 800d144:	f10b 0b01 	add.w	fp, fp, #1
 800d148:	dd06      	ble.n	800d158 <__hexnan+0xfc>
 800d14a:	4544      	cmp	r4, r8
 800d14c:	d9c3      	bls.n	800d0d6 <__hexnan+0x7a>
 800d14e:	2300      	movs	r3, #0
 800d150:	f844 3c04 	str.w	r3, [r4, #-4]
 800d154:	2501      	movs	r5, #1
 800d156:	3c04      	subs	r4, #4
 800d158:	6822      	ldr	r2, [r4, #0]
 800d15a:	f000 000f 	and.w	r0, r0, #15
 800d15e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d162:	6020      	str	r0, [r4, #0]
 800d164:	e7b7      	b.n	800d0d6 <__hexnan+0x7a>
 800d166:	2508      	movs	r5, #8
 800d168:	e7b5      	b.n	800d0d6 <__hexnan+0x7a>
 800d16a:	9b01      	ldr	r3, [sp, #4]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d0df      	beq.n	800d130 <__hexnan+0xd4>
 800d170:	f1c3 0320 	rsb	r3, r3, #32
 800d174:	f04f 32ff 	mov.w	r2, #4294967295
 800d178:	40da      	lsrs	r2, r3
 800d17a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d17e:	4013      	ands	r3, r2
 800d180:	f846 3c04 	str.w	r3, [r6, #-4]
 800d184:	e7d4      	b.n	800d130 <__hexnan+0xd4>
 800d186:	3f04      	subs	r7, #4
 800d188:	e7d2      	b.n	800d130 <__hexnan+0xd4>
 800d18a:	2004      	movs	r0, #4
 800d18c:	b007      	add	sp, #28
 800d18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d192 <__ascii_mbtowc>:
 800d192:	b082      	sub	sp, #8
 800d194:	b901      	cbnz	r1, 800d198 <__ascii_mbtowc+0x6>
 800d196:	a901      	add	r1, sp, #4
 800d198:	b142      	cbz	r2, 800d1ac <__ascii_mbtowc+0x1a>
 800d19a:	b14b      	cbz	r3, 800d1b0 <__ascii_mbtowc+0x1e>
 800d19c:	7813      	ldrb	r3, [r2, #0]
 800d19e:	600b      	str	r3, [r1, #0]
 800d1a0:	7812      	ldrb	r2, [r2, #0]
 800d1a2:	1e10      	subs	r0, r2, #0
 800d1a4:	bf18      	it	ne
 800d1a6:	2001      	movne	r0, #1
 800d1a8:	b002      	add	sp, #8
 800d1aa:	4770      	bx	lr
 800d1ac:	4610      	mov	r0, r2
 800d1ae:	e7fb      	b.n	800d1a8 <__ascii_mbtowc+0x16>
 800d1b0:	f06f 0001 	mvn.w	r0, #1
 800d1b4:	e7f8      	b.n	800d1a8 <__ascii_mbtowc+0x16>
	...

0800d1b8 <_Balloc>:
 800d1b8:	b570      	push	{r4, r5, r6, lr}
 800d1ba:	69c6      	ldr	r6, [r0, #28]
 800d1bc:	4604      	mov	r4, r0
 800d1be:	460d      	mov	r5, r1
 800d1c0:	b976      	cbnz	r6, 800d1e0 <_Balloc+0x28>
 800d1c2:	2010      	movs	r0, #16
 800d1c4:	f7fd f88a 	bl	800a2dc <malloc>
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	61e0      	str	r0, [r4, #28]
 800d1cc:	b920      	cbnz	r0, 800d1d8 <_Balloc+0x20>
 800d1ce:	4b18      	ldr	r3, [pc, #96]	; (800d230 <_Balloc+0x78>)
 800d1d0:	4818      	ldr	r0, [pc, #96]	; (800d234 <_Balloc+0x7c>)
 800d1d2:	216b      	movs	r1, #107	; 0x6b
 800d1d4:	f000 fed2 	bl	800df7c <__assert_func>
 800d1d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1dc:	6006      	str	r6, [r0, #0]
 800d1de:	60c6      	str	r6, [r0, #12]
 800d1e0:	69e6      	ldr	r6, [r4, #28]
 800d1e2:	68f3      	ldr	r3, [r6, #12]
 800d1e4:	b183      	cbz	r3, 800d208 <_Balloc+0x50>
 800d1e6:	69e3      	ldr	r3, [r4, #28]
 800d1e8:	68db      	ldr	r3, [r3, #12]
 800d1ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d1ee:	b9b8      	cbnz	r0, 800d220 <_Balloc+0x68>
 800d1f0:	2101      	movs	r1, #1
 800d1f2:	fa01 f605 	lsl.w	r6, r1, r5
 800d1f6:	1d72      	adds	r2, r6, #5
 800d1f8:	0092      	lsls	r2, r2, #2
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	f000 fedc 	bl	800dfb8 <_calloc_r>
 800d200:	b160      	cbz	r0, 800d21c <_Balloc+0x64>
 800d202:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d206:	e00e      	b.n	800d226 <_Balloc+0x6e>
 800d208:	2221      	movs	r2, #33	; 0x21
 800d20a:	2104      	movs	r1, #4
 800d20c:	4620      	mov	r0, r4
 800d20e:	f000 fed3 	bl	800dfb8 <_calloc_r>
 800d212:	69e3      	ldr	r3, [r4, #28]
 800d214:	60f0      	str	r0, [r6, #12]
 800d216:	68db      	ldr	r3, [r3, #12]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d1e4      	bne.n	800d1e6 <_Balloc+0x2e>
 800d21c:	2000      	movs	r0, #0
 800d21e:	bd70      	pop	{r4, r5, r6, pc}
 800d220:	6802      	ldr	r2, [r0, #0]
 800d222:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d226:	2300      	movs	r3, #0
 800d228:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d22c:	e7f7      	b.n	800d21e <_Balloc+0x66>
 800d22e:	bf00      	nop
 800d230:	0800e872 	.word	0x0800e872
 800d234:	0800e952 	.word	0x0800e952

0800d238 <_Bfree>:
 800d238:	b570      	push	{r4, r5, r6, lr}
 800d23a:	69c6      	ldr	r6, [r0, #28]
 800d23c:	4605      	mov	r5, r0
 800d23e:	460c      	mov	r4, r1
 800d240:	b976      	cbnz	r6, 800d260 <_Bfree+0x28>
 800d242:	2010      	movs	r0, #16
 800d244:	f7fd f84a 	bl	800a2dc <malloc>
 800d248:	4602      	mov	r2, r0
 800d24a:	61e8      	str	r0, [r5, #28]
 800d24c:	b920      	cbnz	r0, 800d258 <_Bfree+0x20>
 800d24e:	4b09      	ldr	r3, [pc, #36]	; (800d274 <_Bfree+0x3c>)
 800d250:	4809      	ldr	r0, [pc, #36]	; (800d278 <_Bfree+0x40>)
 800d252:	218f      	movs	r1, #143	; 0x8f
 800d254:	f000 fe92 	bl	800df7c <__assert_func>
 800d258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d25c:	6006      	str	r6, [r0, #0]
 800d25e:	60c6      	str	r6, [r0, #12]
 800d260:	b13c      	cbz	r4, 800d272 <_Bfree+0x3a>
 800d262:	69eb      	ldr	r3, [r5, #28]
 800d264:	6862      	ldr	r2, [r4, #4]
 800d266:	68db      	ldr	r3, [r3, #12]
 800d268:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d26c:	6021      	str	r1, [r4, #0]
 800d26e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d272:	bd70      	pop	{r4, r5, r6, pc}
 800d274:	0800e872 	.word	0x0800e872
 800d278:	0800e952 	.word	0x0800e952

0800d27c <__multadd>:
 800d27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d280:	690d      	ldr	r5, [r1, #16]
 800d282:	4607      	mov	r7, r0
 800d284:	460c      	mov	r4, r1
 800d286:	461e      	mov	r6, r3
 800d288:	f101 0c14 	add.w	ip, r1, #20
 800d28c:	2000      	movs	r0, #0
 800d28e:	f8dc 3000 	ldr.w	r3, [ip]
 800d292:	b299      	uxth	r1, r3
 800d294:	fb02 6101 	mla	r1, r2, r1, r6
 800d298:	0c1e      	lsrs	r6, r3, #16
 800d29a:	0c0b      	lsrs	r3, r1, #16
 800d29c:	fb02 3306 	mla	r3, r2, r6, r3
 800d2a0:	b289      	uxth	r1, r1
 800d2a2:	3001      	adds	r0, #1
 800d2a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d2a8:	4285      	cmp	r5, r0
 800d2aa:	f84c 1b04 	str.w	r1, [ip], #4
 800d2ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d2b2:	dcec      	bgt.n	800d28e <__multadd+0x12>
 800d2b4:	b30e      	cbz	r6, 800d2fa <__multadd+0x7e>
 800d2b6:	68a3      	ldr	r3, [r4, #8]
 800d2b8:	42ab      	cmp	r3, r5
 800d2ba:	dc19      	bgt.n	800d2f0 <__multadd+0x74>
 800d2bc:	6861      	ldr	r1, [r4, #4]
 800d2be:	4638      	mov	r0, r7
 800d2c0:	3101      	adds	r1, #1
 800d2c2:	f7ff ff79 	bl	800d1b8 <_Balloc>
 800d2c6:	4680      	mov	r8, r0
 800d2c8:	b928      	cbnz	r0, 800d2d6 <__multadd+0x5a>
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	4b0c      	ldr	r3, [pc, #48]	; (800d300 <__multadd+0x84>)
 800d2ce:	480d      	ldr	r0, [pc, #52]	; (800d304 <__multadd+0x88>)
 800d2d0:	21ba      	movs	r1, #186	; 0xba
 800d2d2:	f000 fe53 	bl	800df7c <__assert_func>
 800d2d6:	6922      	ldr	r2, [r4, #16]
 800d2d8:	3202      	adds	r2, #2
 800d2da:	f104 010c 	add.w	r1, r4, #12
 800d2de:	0092      	lsls	r2, r2, #2
 800d2e0:	300c      	adds	r0, #12
 800d2e2:	f7fe fd23 	bl	800bd2c <memcpy>
 800d2e6:	4621      	mov	r1, r4
 800d2e8:	4638      	mov	r0, r7
 800d2ea:	f7ff ffa5 	bl	800d238 <_Bfree>
 800d2ee:	4644      	mov	r4, r8
 800d2f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d2f4:	3501      	adds	r5, #1
 800d2f6:	615e      	str	r6, [r3, #20]
 800d2f8:	6125      	str	r5, [r4, #16]
 800d2fa:	4620      	mov	r0, r4
 800d2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d300:	0800e8e1 	.word	0x0800e8e1
 800d304:	0800e952 	.word	0x0800e952

0800d308 <__s2b>:
 800d308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d30c:	460c      	mov	r4, r1
 800d30e:	4615      	mov	r5, r2
 800d310:	461f      	mov	r7, r3
 800d312:	2209      	movs	r2, #9
 800d314:	3308      	adds	r3, #8
 800d316:	4606      	mov	r6, r0
 800d318:	fb93 f3f2 	sdiv	r3, r3, r2
 800d31c:	2100      	movs	r1, #0
 800d31e:	2201      	movs	r2, #1
 800d320:	429a      	cmp	r2, r3
 800d322:	db09      	blt.n	800d338 <__s2b+0x30>
 800d324:	4630      	mov	r0, r6
 800d326:	f7ff ff47 	bl	800d1b8 <_Balloc>
 800d32a:	b940      	cbnz	r0, 800d33e <__s2b+0x36>
 800d32c:	4602      	mov	r2, r0
 800d32e:	4b19      	ldr	r3, [pc, #100]	; (800d394 <__s2b+0x8c>)
 800d330:	4819      	ldr	r0, [pc, #100]	; (800d398 <__s2b+0x90>)
 800d332:	21d3      	movs	r1, #211	; 0xd3
 800d334:	f000 fe22 	bl	800df7c <__assert_func>
 800d338:	0052      	lsls	r2, r2, #1
 800d33a:	3101      	adds	r1, #1
 800d33c:	e7f0      	b.n	800d320 <__s2b+0x18>
 800d33e:	9b08      	ldr	r3, [sp, #32]
 800d340:	6143      	str	r3, [r0, #20]
 800d342:	2d09      	cmp	r5, #9
 800d344:	f04f 0301 	mov.w	r3, #1
 800d348:	6103      	str	r3, [r0, #16]
 800d34a:	dd16      	ble.n	800d37a <__s2b+0x72>
 800d34c:	f104 0909 	add.w	r9, r4, #9
 800d350:	46c8      	mov	r8, r9
 800d352:	442c      	add	r4, r5
 800d354:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d358:	4601      	mov	r1, r0
 800d35a:	3b30      	subs	r3, #48	; 0x30
 800d35c:	220a      	movs	r2, #10
 800d35e:	4630      	mov	r0, r6
 800d360:	f7ff ff8c 	bl	800d27c <__multadd>
 800d364:	45a0      	cmp	r8, r4
 800d366:	d1f5      	bne.n	800d354 <__s2b+0x4c>
 800d368:	f1a5 0408 	sub.w	r4, r5, #8
 800d36c:	444c      	add	r4, r9
 800d36e:	1b2d      	subs	r5, r5, r4
 800d370:	1963      	adds	r3, r4, r5
 800d372:	42bb      	cmp	r3, r7
 800d374:	db04      	blt.n	800d380 <__s2b+0x78>
 800d376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d37a:	340a      	adds	r4, #10
 800d37c:	2509      	movs	r5, #9
 800d37e:	e7f6      	b.n	800d36e <__s2b+0x66>
 800d380:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d384:	4601      	mov	r1, r0
 800d386:	3b30      	subs	r3, #48	; 0x30
 800d388:	220a      	movs	r2, #10
 800d38a:	4630      	mov	r0, r6
 800d38c:	f7ff ff76 	bl	800d27c <__multadd>
 800d390:	e7ee      	b.n	800d370 <__s2b+0x68>
 800d392:	bf00      	nop
 800d394:	0800e8e1 	.word	0x0800e8e1
 800d398:	0800e952 	.word	0x0800e952

0800d39c <__hi0bits>:
 800d39c:	0c03      	lsrs	r3, r0, #16
 800d39e:	041b      	lsls	r3, r3, #16
 800d3a0:	b9d3      	cbnz	r3, 800d3d8 <__hi0bits+0x3c>
 800d3a2:	0400      	lsls	r0, r0, #16
 800d3a4:	2310      	movs	r3, #16
 800d3a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d3aa:	bf04      	itt	eq
 800d3ac:	0200      	lsleq	r0, r0, #8
 800d3ae:	3308      	addeq	r3, #8
 800d3b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d3b4:	bf04      	itt	eq
 800d3b6:	0100      	lsleq	r0, r0, #4
 800d3b8:	3304      	addeq	r3, #4
 800d3ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d3be:	bf04      	itt	eq
 800d3c0:	0080      	lsleq	r0, r0, #2
 800d3c2:	3302      	addeq	r3, #2
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	db05      	blt.n	800d3d4 <__hi0bits+0x38>
 800d3c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d3cc:	f103 0301 	add.w	r3, r3, #1
 800d3d0:	bf08      	it	eq
 800d3d2:	2320      	moveq	r3, #32
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	4770      	bx	lr
 800d3d8:	2300      	movs	r3, #0
 800d3da:	e7e4      	b.n	800d3a6 <__hi0bits+0xa>

0800d3dc <__lo0bits>:
 800d3dc:	6803      	ldr	r3, [r0, #0]
 800d3de:	f013 0207 	ands.w	r2, r3, #7
 800d3e2:	d00c      	beq.n	800d3fe <__lo0bits+0x22>
 800d3e4:	07d9      	lsls	r1, r3, #31
 800d3e6:	d422      	bmi.n	800d42e <__lo0bits+0x52>
 800d3e8:	079a      	lsls	r2, r3, #30
 800d3ea:	bf49      	itett	mi
 800d3ec:	085b      	lsrmi	r3, r3, #1
 800d3ee:	089b      	lsrpl	r3, r3, #2
 800d3f0:	6003      	strmi	r3, [r0, #0]
 800d3f2:	2201      	movmi	r2, #1
 800d3f4:	bf5c      	itt	pl
 800d3f6:	6003      	strpl	r3, [r0, #0]
 800d3f8:	2202      	movpl	r2, #2
 800d3fa:	4610      	mov	r0, r2
 800d3fc:	4770      	bx	lr
 800d3fe:	b299      	uxth	r1, r3
 800d400:	b909      	cbnz	r1, 800d406 <__lo0bits+0x2a>
 800d402:	0c1b      	lsrs	r3, r3, #16
 800d404:	2210      	movs	r2, #16
 800d406:	b2d9      	uxtb	r1, r3
 800d408:	b909      	cbnz	r1, 800d40e <__lo0bits+0x32>
 800d40a:	3208      	adds	r2, #8
 800d40c:	0a1b      	lsrs	r3, r3, #8
 800d40e:	0719      	lsls	r1, r3, #28
 800d410:	bf04      	itt	eq
 800d412:	091b      	lsreq	r3, r3, #4
 800d414:	3204      	addeq	r2, #4
 800d416:	0799      	lsls	r1, r3, #30
 800d418:	bf04      	itt	eq
 800d41a:	089b      	lsreq	r3, r3, #2
 800d41c:	3202      	addeq	r2, #2
 800d41e:	07d9      	lsls	r1, r3, #31
 800d420:	d403      	bmi.n	800d42a <__lo0bits+0x4e>
 800d422:	085b      	lsrs	r3, r3, #1
 800d424:	f102 0201 	add.w	r2, r2, #1
 800d428:	d003      	beq.n	800d432 <__lo0bits+0x56>
 800d42a:	6003      	str	r3, [r0, #0]
 800d42c:	e7e5      	b.n	800d3fa <__lo0bits+0x1e>
 800d42e:	2200      	movs	r2, #0
 800d430:	e7e3      	b.n	800d3fa <__lo0bits+0x1e>
 800d432:	2220      	movs	r2, #32
 800d434:	e7e1      	b.n	800d3fa <__lo0bits+0x1e>
	...

0800d438 <__i2b>:
 800d438:	b510      	push	{r4, lr}
 800d43a:	460c      	mov	r4, r1
 800d43c:	2101      	movs	r1, #1
 800d43e:	f7ff febb 	bl	800d1b8 <_Balloc>
 800d442:	4602      	mov	r2, r0
 800d444:	b928      	cbnz	r0, 800d452 <__i2b+0x1a>
 800d446:	4b05      	ldr	r3, [pc, #20]	; (800d45c <__i2b+0x24>)
 800d448:	4805      	ldr	r0, [pc, #20]	; (800d460 <__i2b+0x28>)
 800d44a:	f240 1145 	movw	r1, #325	; 0x145
 800d44e:	f000 fd95 	bl	800df7c <__assert_func>
 800d452:	2301      	movs	r3, #1
 800d454:	6144      	str	r4, [r0, #20]
 800d456:	6103      	str	r3, [r0, #16]
 800d458:	bd10      	pop	{r4, pc}
 800d45a:	bf00      	nop
 800d45c:	0800e8e1 	.word	0x0800e8e1
 800d460:	0800e952 	.word	0x0800e952

0800d464 <__multiply>:
 800d464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d468:	4691      	mov	r9, r2
 800d46a:	690a      	ldr	r2, [r1, #16]
 800d46c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d470:	429a      	cmp	r2, r3
 800d472:	bfb8      	it	lt
 800d474:	460b      	movlt	r3, r1
 800d476:	460c      	mov	r4, r1
 800d478:	bfbc      	itt	lt
 800d47a:	464c      	movlt	r4, r9
 800d47c:	4699      	movlt	r9, r3
 800d47e:	6927      	ldr	r7, [r4, #16]
 800d480:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d484:	68a3      	ldr	r3, [r4, #8]
 800d486:	6861      	ldr	r1, [r4, #4]
 800d488:	eb07 060a 	add.w	r6, r7, sl
 800d48c:	42b3      	cmp	r3, r6
 800d48e:	b085      	sub	sp, #20
 800d490:	bfb8      	it	lt
 800d492:	3101      	addlt	r1, #1
 800d494:	f7ff fe90 	bl	800d1b8 <_Balloc>
 800d498:	b930      	cbnz	r0, 800d4a8 <__multiply+0x44>
 800d49a:	4602      	mov	r2, r0
 800d49c:	4b44      	ldr	r3, [pc, #272]	; (800d5b0 <__multiply+0x14c>)
 800d49e:	4845      	ldr	r0, [pc, #276]	; (800d5b4 <__multiply+0x150>)
 800d4a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d4a4:	f000 fd6a 	bl	800df7c <__assert_func>
 800d4a8:	f100 0514 	add.w	r5, r0, #20
 800d4ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d4b0:	462b      	mov	r3, r5
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	4543      	cmp	r3, r8
 800d4b6:	d321      	bcc.n	800d4fc <__multiply+0x98>
 800d4b8:	f104 0314 	add.w	r3, r4, #20
 800d4bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d4c0:	f109 0314 	add.w	r3, r9, #20
 800d4c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d4c8:	9202      	str	r2, [sp, #8]
 800d4ca:	1b3a      	subs	r2, r7, r4
 800d4cc:	3a15      	subs	r2, #21
 800d4ce:	f022 0203 	bic.w	r2, r2, #3
 800d4d2:	3204      	adds	r2, #4
 800d4d4:	f104 0115 	add.w	r1, r4, #21
 800d4d8:	428f      	cmp	r7, r1
 800d4da:	bf38      	it	cc
 800d4dc:	2204      	movcc	r2, #4
 800d4de:	9201      	str	r2, [sp, #4]
 800d4e0:	9a02      	ldr	r2, [sp, #8]
 800d4e2:	9303      	str	r3, [sp, #12]
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	d80c      	bhi.n	800d502 <__multiply+0x9e>
 800d4e8:	2e00      	cmp	r6, #0
 800d4ea:	dd03      	ble.n	800d4f4 <__multiply+0x90>
 800d4ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d05b      	beq.n	800d5ac <__multiply+0x148>
 800d4f4:	6106      	str	r6, [r0, #16]
 800d4f6:	b005      	add	sp, #20
 800d4f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4fc:	f843 2b04 	str.w	r2, [r3], #4
 800d500:	e7d8      	b.n	800d4b4 <__multiply+0x50>
 800d502:	f8b3 a000 	ldrh.w	sl, [r3]
 800d506:	f1ba 0f00 	cmp.w	sl, #0
 800d50a:	d024      	beq.n	800d556 <__multiply+0xf2>
 800d50c:	f104 0e14 	add.w	lr, r4, #20
 800d510:	46a9      	mov	r9, r5
 800d512:	f04f 0c00 	mov.w	ip, #0
 800d516:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d51a:	f8d9 1000 	ldr.w	r1, [r9]
 800d51e:	fa1f fb82 	uxth.w	fp, r2
 800d522:	b289      	uxth	r1, r1
 800d524:	fb0a 110b 	mla	r1, sl, fp, r1
 800d528:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d52c:	f8d9 2000 	ldr.w	r2, [r9]
 800d530:	4461      	add	r1, ip
 800d532:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d536:	fb0a c20b 	mla	r2, sl, fp, ip
 800d53a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d53e:	b289      	uxth	r1, r1
 800d540:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d544:	4577      	cmp	r7, lr
 800d546:	f849 1b04 	str.w	r1, [r9], #4
 800d54a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d54e:	d8e2      	bhi.n	800d516 <__multiply+0xb2>
 800d550:	9a01      	ldr	r2, [sp, #4]
 800d552:	f845 c002 	str.w	ip, [r5, r2]
 800d556:	9a03      	ldr	r2, [sp, #12]
 800d558:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d55c:	3304      	adds	r3, #4
 800d55e:	f1b9 0f00 	cmp.w	r9, #0
 800d562:	d021      	beq.n	800d5a8 <__multiply+0x144>
 800d564:	6829      	ldr	r1, [r5, #0]
 800d566:	f104 0c14 	add.w	ip, r4, #20
 800d56a:	46ae      	mov	lr, r5
 800d56c:	f04f 0a00 	mov.w	sl, #0
 800d570:	f8bc b000 	ldrh.w	fp, [ip]
 800d574:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d578:	fb09 220b 	mla	r2, r9, fp, r2
 800d57c:	4452      	add	r2, sl
 800d57e:	b289      	uxth	r1, r1
 800d580:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d584:	f84e 1b04 	str.w	r1, [lr], #4
 800d588:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d58c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d590:	f8be 1000 	ldrh.w	r1, [lr]
 800d594:	fb09 110a 	mla	r1, r9, sl, r1
 800d598:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d59c:	4567      	cmp	r7, ip
 800d59e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d5a2:	d8e5      	bhi.n	800d570 <__multiply+0x10c>
 800d5a4:	9a01      	ldr	r2, [sp, #4]
 800d5a6:	50a9      	str	r1, [r5, r2]
 800d5a8:	3504      	adds	r5, #4
 800d5aa:	e799      	b.n	800d4e0 <__multiply+0x7c>
 800d5ac:	3e01      	subs	r6, #1
 800d5ae:	e79b      	b.n	800d4e8 <__multiply+0x84>
 800d5b0:	0800e8e1 	.word	0x0800e8e1
 800d5b4:	0800e952 	.word	0x0800e952

0800d5b8 <__pow5mult>:
 800d5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5bc:	4615      	mov	r5, r2
 800d5be:	f012 0203 	ands.w	r2, r2, #3
 800d5c2:	4606      	mov	r6, r0
 800d5c4:	460f      	mov	r7, r1
 800d5c6:	d007      	beq.n	800d5d8 <__pow5mult+0x20>
 800d5c8:	4c25      	ldr	r4, [pc, #148]	; (800d660 <__pow5mult+0xa8>)
 800d5ca:	3a01      	subs	r2, #1
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d5d2:	f7ff fe53 	bl	800d27c <__multadd>
 800d5d6:	4607      	mov	r7, r0
 800d5d8:	10ad      	asrs	r5, r5, #2
 800d5da:	d03d      	beq.n	800d658 <__pow5mult+0xa0>
 800d5dc:	69f4      	ldr	r4, [r6, #28]
 800d5de:	b97c      	cbnz	r4, 800d600 <__pow5mult+0x48>
 800d5e0:	2010      	movs	r0, #16
 800d5e2:	f7fc fe7b 	bl	800a2dc <malloc>
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	61f0      	str	r0, [r6, #28]
 800d5ea:	b928      	cbnz	r0, 800d5f8 <__pow5mult+0x40>
 800d5ec:	4b1d      	ldr	r3, [pc, #116]	; (800d664 <__pow5mult+0xac>)
 800d5ee:	481e      	ldr	r0, [pc, #120]	; (800d668 <__pow5mult+0xb0>)
 800d5f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d5f4:	f000 fcc2 	bl	800df7c <__assert_func>
 800d5f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d5fc:	6004      	str	r4, [r0, #0]
 800d5fe:	60c4      	str	r4, [r0, #12]
 800d600:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d604:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d608:	b94c      	cbnz	r4, 800d61e <__pow5mult+0x66>
 800d60a:	f240 2171 	movw	r1, #625	; 0x271
 800d60e:	4630      	mov	r0, r6
 800d610:	f7ff ff12 	bl	800d438 <__i2b>
 800d614:	2300      	movs	r3, #0
 800d616:	f8c8 0008 	str.w	r0, [r8, #8]
 800d61a:	4604      	mov	r4, r0
 800d61c:	6003      	str	r3, [r0, #0]
 800d61e:	f04f 0900 	mov.w	r9, #0
 800d622:	07eb      	lsls	r3, r5, #31
 800d624:	d50a      	bpl.n	800d63c <__pow5mult+0x84>
 800d626:	4639      	mov	r1, r7
 800d628:	4622      	mov	r2, r4
 800d62a:	4630      	mov	r0, r6
 800d62c:	f7ff ff1a 	bl	800d464 <__multiply>
 800d630:	4639      	mov	r1, r7
 800d632:	4680      	mov	r8, r0
 800d634:	4630      	mov	r0, r6
 800d636:	f7ff fdff 	bl	800d238 <_Bfree>
 800d63a:	4647      	mov	r7, r8
 800d63c:	106d      	asrs	r5, r5, #1
 800d63e:	d00b      	beq.n	800d658 <__pow5mult+0xa0>
 800d640:	6820      	ldr	r0, [r4, #0]
 800d642:	b938      	cbnz	r0, 800d654 <__pow5mult+0x9c>
 800d644:	4622      	mov	r2, r4
 800d646:	4621      	mov	r1, r4
 800d648:	4630      	mov	r0, r6
 800d64a:	f7ff ff0b 	bl	800d464 <__multiply>
 800d64e:	6020      	str	r0, [r4, #0]
 800d650:	f8c0 9000 	str.w	r9, [r0]
 800d654:	4604      	mov	r4, r0
 800d656:	e7e4      	b.n	800d622 <__pow5mult+0x6a>
 800d658:	4638      	mov	r0, r7
 800d65a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d65e:	bf00      	nop
 800d660:	0800eaa0 	.word	0x0800eaa0
 800d664:	0800e872 	.word	0x0800e872
 800d668:	0800e952 	.word	0x0800e952

0800d66c <__lshift>:
 800d66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d670:	460c      	mov	r4, r1
 800d672:	6849      	ldr	r1, [r1, #4]
 800d674:	6923      	ldr	r3, [r4, #16]
 800d676:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d67a:	68a3      	ldr	r3, [r4, #8]
 800d67c:	4607      	mov	r7, r0
 800d67e:	4691      	mov	r9, r2
 800d680:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d684:	f108 0601 	add.w	r6, r8, #1
 800d688:	42b3      	cmp	r3, r6
 800d68a:	db0b      	blt.n	800d6a4 <__lshift+0x38>
 800d68c:	4638      	mov	r0, r7
 800d68e:	f7ff fd93 	bl	800d1b8 <_Balloc>
 800d692:	4605      	mov	r5, r0
 800d694:	b948      	cbnz	r0, 800d6aa <__lshift+0x3e>
 800d696:	4602      	mov	r2, r0
 800d698:	4b28      	ldr	r3, [pc, #160]	; (800d73c <__lshift+0xd0>)
 800d69a:	4829      	ldr	r0, [pc, #164]	; (800d740 <__lshift+0xd4>)
 800d69c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d6a0:	f000 fc6c 	bl	800df7c <__assert_func>
 800d6a4:	3101      	adds	r1, #1
 800d6a6:	005b      	lsls	r3, r3, #1
 800d6a8:	e7ee      	b.n	800d688 <__lshift+0x1c>
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	f100 0114 	add.w	r1, r0, #20
 800d6b0:	f100 0210 	add.w	r2, r0, #16
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	4553      	cmp	r3, sl
 800d6b8:	db33      	blt.n	800d722 <__lshift+0xb6>
 800d6ba:	6920      	ldr	r0, [r4, #16]
 800d6bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d6c0:	f104 0314 	add.w	r3, r4, #20
 800d6c4:	f019 091f 	ands.w	r9, r9, #31
 800d6c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d6cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d6d0:	d02b      	beq.n	800d72a <__lshift+0xbe>
 800d6d2:	f1c9 0e20 	rsb	lr, r9, #32
 800d6d6:	468a      	mov	sl, r1
 800d6d8:	2200      	movs	r2, #0
 800d6da:	6818      	ldr	r0, [r3, #0]
 800d6dc:	fa00 f009 	lsl.w	r0, r0, r9
 800d6e0:	4310      	orrs	r0, r2
 800d6e2:	f84a 0b04 	str.w	r0, [sl], #4
 800d6e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6ea:	459c      	cmp	ip, r3
 800d6ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800d6f0:	d8f3      	bhi.n	800d6da <__lshift+0x6e>
 800d6f2:	ebac 0304 	sub.w	r3, ip, r4
 800d6f6:	3b15      	subs	r3, #21
 800d6f8:	f023 0303 	bic.w	r3, r3, #3
 800d6fc:	3304      	adds	r3, #4
 800d6fe:	f104 0015 	add.w	r0, r4, #21
 800d702:	4584      	cmp	ip, r0
 800d704:	bf38      	it	cc
 800d706:	2304      	movcc	r3, #4
 800d708:	50ca      	str	r2, [r1, r3]
 800d70a:	b10a      	cbz	r2, 800d710 <__lshift+0xa4>
 800d70c:	f108 0602 	add.w	r6, r8, #2
 800d710:	3e01      	subs	r6, #1
 800d712:	4638      	mov	r0, r7
 800d714:	612e      	str	r6, [r5, #16]
 800d716:	4621      	mov	r1, r4
 800d718:	f7ff fd8e 	bl	800d238 <_Bfree>
 800d71c:	4628      	mov	r0, r5
 800d71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d722:	f842 0f04 	str.w	r0, [r2, #4]!
 800d726:	3301      	adds	r3, #1
 800d728:	e7c5      	b.n	800d6b6 <__lshift+0x4a>
 800d72a:	3904      	subs	r1, #4
 800d72c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d730:	f841 2f04 	str.w	r2, [r1, #4]!
 800d734:	459c      	cmp	ip, r3
 800d736:	d8f9      	bhi.n	800d72c <__lshift+0xc0>
 800d738:	e7ea      	b.n	800d710 <__lshift+0xa4>
 800d73a:	bf00      	nop
 800d73c:	0800e8e1 	.word	0x0800e8e1
 800d740:	0800e952 	.word	0x0800e952

0800d744 <__mcmp>:
 800d744:	b530      	push	{r4, r5, lr}
 800d746:	6902      	ldr	r2, [r0, #16]
 800d748:	690c      	ldr	r4, [r1, #16]
 800d74a:	1b12      	subs	r2, r2, r4
 800d74c:	d10e      	bne.n	800d76c <__mcmp+0x28>
 800d74e:	f100 0314 	add.w	r3, r0, #20
 800d752:	3114      	adds	r1, #20
 800d754:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d758:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d75c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d760:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d764:	42a5      	cmp	r5, r4
 800d766:	d003      	beq.n	800d770 <__mcmp+0x2c>
 800d768:	d305      	bcc.n	800d776 <__mcmp+0x32>
 800d76a:	2201      	movs	r2, #1
 800d76c:	4610      	mov	r0, r2
 800d76e:	bd30      	pop	{r4, r5, pc}
 800d770:	4283      	cmp	r3, r0
 800d772:	d3f3      	bcc.n	800d75c <__mcmp+0x18>
 800d774:	e7fa      	b.n	800d76c <__mcmp+0x28>
 800d776:	f04f 32ff 	mov.w	r2, #4294967295
 800d77a:	e7f7      	b.n	800d76c <__mcmp+0x28>

0800d77c <__mdiff>:
 800d77c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d780:	460c      	mov	r4, r1
 800d782:	4606      	mov	r6, r0
 800d784:	4611      	mov	r1, r2
 800d786:	4620      	mov	r0, r4
 800d788:	4690      	mov	r8, r2
 800d78a:	f7ff ffdb 	bl	800d744 <__mcmp>
 800d78e:	1e05      	subs	r5, r0, #0
 800d790:	d110      	bne.n	800d7b4 <__mdiff+0x38>
 800d792:	4629      	mov	r1, r5
 800d794:	4630      	mov	r0, r6
 800d796:	f7ff fd0f 	bl	800d1b8 <_Balloc>
 800d79a:	b930      	cbnz	r0, 800d7aa <__mdiff+0x2e>
 800d79c:	4b3a      	ldr	r3, [pc, #232]	; (800d888 <__mdiff+0x10c>)
 800d79e:	4602      	mov	r2, r0
 800d7a0:	f240 2137 	movw	r1, #567	; 0x237
 800d7a4:	4839      	ldr	r0, [pc, #228]	; (800d88c <__mdiff+0x110>)
 800d7a6:	f000 fbe9 	bl	800df7c <__assert_func>
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d7b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7b4:	bfa4      	itt	ge
 800d7b6:	4643      	movge	r3, r8
 800d7b8:	46a0      	movge	r8, r4
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d7c0:	bfa6      	itte	ge
 800d7c2:	461c      	movge	r4, r3
 800d7c4:	2500      	movge	r5, #0
 800d7c6:	2501      	movlt	r5, #1
 800d7c8:	f7ff fcf6 	bl	800d1b8 <_Balloc>
 800d7cc:	b920      	cbnz	r0, 800d7d8 <__mdiff+0x5c>
 800d7ce:	4b2e      	ldr	r3, [pc, #184]	; (800d888 <__mdiff+0x10c>)
 800d7d0:	4602      	mov	r2, r0
 800d7d2:	f240 2145 	movw	r1, #581	; 0x245
 800d7d6:	e7e5      	b.n	800d7a4 <__mdiff+0x28>
 800d7d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d7dc:	6926      	ldr	r6, [r4, #16]
 800d7de:	60c5      	str	r5, [r0, #12]
 800d7e0:	f104 0914 	add.w	r9, r4, #20
 800d7e4:	f108 0514 	add.w	r5, r8, #20
 800d7e8:	f100 0e14 	add.w	lr, r0, #20
 800d7ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d7f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d7f4:	f108 0210 	add.w	r2, r8, #16
 800d7f8:	46f2      	mov	sl, lr
 800d7fa:	2100      	movs	r1, #0
 800d7fc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d800:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d804:	fa11 f88b 	uxtah	r8, r1, fp
 800d808:	b299      	uxth	r1, r3
 800d80a:	0c1b      	lsrs	r3, r3, #16
 800d80c:	eba8 0801 	sub.w	r8, r8, r1
 800d810:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d814:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d818:	fa1f f888 	uxth.w	r8, r8
 800d81c:	1419      	asrs	r1, r3, #16
 800d81e:	454e      	cmp	r6, r9
 800d820:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d824:	f84a 3b04 	str.w	r3, [sl], #4
 800d828:	d8e8      	bhi.n	800d7fc <__mdiff+0x80>
 800d82a:	1b33      	subs	r3, r6, r4
 800d82c:	3b15      	subs	r3, #21
 800d82e:	f023 0303 	bic.w	r3, r3, #3
 800d832:	3304      	adds	r3, #4
 800d834:	3415      	adds	r4, #21
 800d836:	42a6      	cmp	r6, r4
 800d838:	bf38      	it	cc
 800d83a:	2304      	movcc	r3, #4
 800d83c:	441d      	add	r5, r3
 800d83e:	4473      	add	r3, lr
 800d840:	469e      	mov	lr, r3
 800d842:	462e      	mov	r6, r5
 800d844:	4566      	cmp	r6, ip
 800d846:	d30e      	bcc.n	800d866 <__mdiff+0xea>
 800d848:	f10c 0203 	add.w	r2, ip, #3
 800d84c:	1b52      	subs	r2, r2, r5
 800d84e:	f022 0203 	bic.w	r2, r2, #3
 800d852:	3d03      	subs	r5, #3
 800d854:	45ac      	cmp	ip, r5
 800d856:	bf38      	it	cc
 800d858:	2200      	movcc	r2, #0
 800d85a:	4413      	add	r3, r2
 800d85c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d860:	b17a      	cbz	r2, 800d882 <__mdiff+0x106>
 800d862:	6107      	str	r7, [r0, #16]
 800d864:	e7a4      	b.n	800d7b0 <__mdiff+0x34>
 800d866:	f856 8b04 	ldr.w	r8, [r6], #4
 800d86a:	fa11 f288 	uxtah	r2, r1, r8
 800d86e:	1414      	asrs	r4, r2, #16
 800d870:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d874:	b292      	uxth	r2, r2
 800d876:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d87a:	f84e 2b04 	str.w	r2, [lr], #4
 800d87e:	1421      	asrs	r1, r4, #16
 800d880:	e7e0      	b.n	800d844 <__mdiff+0xc8>
 800d882:	3f01      	subs	r7, #1
 800d884:	e7ea      	b.n	800d85c <__mdiff+0xe0>
 800d886:	bf00      	nop
 800d888:	0800e8e1 	.word	0x0800e8e1
 800d88c:	0800e952 	.word	0x0800e952

0800d890 <__ulp>:
 800d890:	b082      	sub	sp, #8
 800d892:	ed8d 0b00 	vstr	d0, [sp]
 800d896:	9a01      	ldr	r2, [sp, #4]
 800d898:	4b0f      	ldr	r3, [pc, #60]	; (800d8d8 <__ulp+0x48>)
 800d89a:	4013      	ands	r3, r2
 800d89c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	dc08      	bgt.n	800d8b6 <__ulp+0x26>
 800d8a4:	425b      	negs	r3, r3
 800d8a6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d8aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d8ae:	da04      	bge.n	800d8ba <__ulp+0x2a>
 800d8b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d8b4:	4113      	asrs	r3, r2
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	e008      	b.n	800d8cc <__ulp+0x3c>
 800d8ba:	f1a2 0314 	sub.w	r3, r2, #20
 800d8be:	2b1e      	cmp	r3, #30
 800d8c0:	bfda      	itte	le
 800d8c2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d8c6:	40da      	lsrle	r2, r3
 800d8c8:	2201      	movgt	r2, #1
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	4610      	mov	r0, r2
 800d8d0:	ec41 0b10 	vmov	d0, r0, r1
 800d8d4:	b002      	add	sp, #8
 800d8d6:	4770      	bx	lr
 800d8d8:	7ff00000 	.word	0x7ff00000

0800d8dc <__b2d>:
 800d8dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e0:	6906      	ldr	r6, [r0, #16]
 800d8e2:	f100 0814 	add.w	r8, r0, #20
 800d8e6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d8ea:	1f37      	subs	r7, r6, #4
 800d8ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d8f0:	4610      	mov	r0, r2
 800d8f2:	f7ff fd53 	bl	800d39c <__hi0bits>
 800d8f6:	f1c0 0320 	rsb	r3, r0, #32
 800d8fa:	280a      	cmp	r0, #10
 800d8fc:	600b      	str	r3, [r1, #0]
 800d8fe:	491b      	ldr	r1, [pc, #108]	; (800d96c <__b2d+0x90>)
 800d900:	dc15      	bgt.n	800d92e <__b2d+0x52>
 800d902:	f1c0 0c0b 	rsb	ip, r0, #11
 800d906:	fa22 f30c 	lsr.w	r3, r2, ip
 800d90a:	45b8      	cmp	r8, r7
 800d90c:	ea43 0501 	orr.w	r5, r3, r1
 800d910:	bf34      	ite	cc
 800d912:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d916:	2300      	movcs	r3, #0
 800d918:	3015      	adds	r0, #21
 800d91a:	fa02 f000 	lsl.w	r0, r2, r0
 800d91e:	fa23 f30c 	lsr.w	r3, r3, ip
 800d922:	4303      	orrs	r3, r0
 800d924:	461c      	mov	r4, r3
 800d926:	ec45 4b10 	vmov	d0, r4, r5
 800d92a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d92e:	45b8      	cmp	r8, r7
 800d930:	bf3a      	itte	cc
 800d932:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d936:	f1a6 0708 	subcc.w	r7, r6, #8
 800d93a:	2300      	movcs	r3, #0
 800d93c:	380b      	subs	r0, #11
 800d93e:	d012      	beq.n	800d966 <__b2d+0x8a>
 800d940:	f1c0 0120 	rsb	r1, r0, #32
 800d944:	fa23 f401 	lsr.w	r4, r3, r1
 800d948:	4082      	lsls	r2, r0
 800d94a:	4322      	orrs	r2, r4
 800d94c:	4547      	cmp	r7, r8
 800d94e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800d952:	bf8c      	ite	hi
 800d954:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d958:	2200      	movls	r2, #0
 800d95a:	4083      	lsls	r3, r0
 800d95c:	40ca      	lsrs	r2, r1
 800d95e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d962:	4313      	orrs	r3, r2
 800d964:	e7de      	b.n	800d924 <__b2d+0x48>
 800d966:	ea42 0501 	orr.w	r5, r2, r1
 800d96a:	e7db      	b.n	800d924 <__b2d+0x48>
 800d96c:	3ff00000 	.word	0x3ff00000

0800d970 <__d2b>:
 800d970:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d974:	460f      	mov	r7, r1
 800d976:	2101      	movs	r1, #1
 800d978:	ec59 8b10 	vmov	r8, r9, d0
 800d97c:	4616      	mov	r6, r2
 800d97e:	f7ff fc1b 	bl	800d1b8 <_Balloc>
 800d982:	4604      	mov	r4, r0
 800d984:	b930      	cbnz	r0, 800d994 <__d2b+0x24>
 800d986:	4602      	mov	r2, r0
 800d988:	4b24      	ldr	r3, [pc, #144]	; (800da1c <__d2b+0xac>)
 800d98a:	4825      	ldr	r0, [pc, #148]	; (800da20 <__d2b+0xb0>)
 800d98c:	f240 310f 	movw	r1, #783	; 0x30f
 800d990:	f000 faf4 	bl	800df7c <__assert_func>
 800d994:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d998:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d99c:	bb2d      	cbnz	r5, 800d9ea <__d2b+0x7a>
 800d99e:	9301      	str	r3, [sp, #4]
 800d9a0:	f1b8 0300 	subs.w	r3, r8, #0
 800d9a4:	d026      	beq.n	800d9f4 <__d2b+0x84>
 800d9a6:	4668      	mov	r0, sp
 800d9a8:	9300      	str	r3, [sp, #0]
 800d9aa:	f7ff fd17 	bl	800d3dc <__lo0bits>
 800d9ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d9b2:	b1e8      	cbz	r0, 800d9f0 <__d2b+0x80>
 800d9b4:	f1c0 0320 	rsb	r3, r0, #32
 800d9b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d9bc:	430b      	orrs	r3, r1
 800d9be:	40c2      	lsrs	r2, r0
 800d9c0:	6163      	str	r3, [r4, #20]
 800d9c2:	9201      	str	r2, [sp, #4]
 800d9c4:	9b01      	ldr	r3, [sp, #4]
 800d9c6:	61a3      	str	r3, [r4, #24]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	bf14      	ite	ne
 800d9cc:	2202      	movne	r2, #2
 800d9ce:	2201      	moveq	r2, #1
 800d9d0:	6122      	str	r2, [r4, #16]
 800d9d2:	b1bd      	cbz	r5, 800da04 <__d2b+0x94>
 800d9d4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d9d8:	4405      	add	r5, r0
 800d9da:	603d      	str	r5, [r7, #0]
 800d9dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d9e0:	6030      	str	r0, [r6, #0]
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	b003      	add	sp, #12
 800d9e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9ee:	e7d6      	b.n	800d99e <__d2b+0x2e>
 800d9f0:	6161      	str	r1, [r4, #20]
 800d9f2:	e7e7      	b.n	800d9c4 <__d2b+0x54>
 800d9f4:	a801      	add	r0, sp, #4
 800d9f6:	f7ff fcf1 	bl	800d3dc <__lo0bits>
 800d9fa:	9b01      	ldr	r3, [sp, #4]
 800d9fc:	6163      	str	r3, [r4, #20]
 800d9fe:	3020      	adds	r0, #32
 800da00:	2201      	movs	r2, #1
 800da02:	e7e5      	b.n	800d9d0 <__d2b+0x60>
 800da04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800da08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800da0c:	6038      	str	r0, [r7, #0]
 800da0e:	6918      	ldr	r0, [r3, #16]
 800da10:	f7ff fcc4 	bl	800d39c <__hi0bits>
 800da14:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800da18:	e7e2      	b.n	800d9e0 <__d2b+0x70>
 800da1a:	bf00      	nop
 800da1c:	0800e8e1 	.word	0x0800e8e1
 800da20:	0800e952 	.word	0x0800e952

0800da24 <__ratio>:
 800da24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da28:	4688      	mov	r8, r1
 800da2a:	4669      	mov	r1, sp
 800da2c:	4681      	mov	r9, r0
 800da2e:	f7ff ff55 	bl	800d8dc <__b2d>
 800da32:	a901      	add	r1, sp, #4
 800da34:	4640      	mov	r0, r8
 800da36:	ec55 4b10 	vmov	r4, r5, d0
 800da3a:	f7ff ff4f 	bl	800d8dc <__b2d>
 800da3e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800da42:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800da46:	eba3 0c02 	sub.w	ip, r3, r2
 800da4a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800da4e:	1a9b      	subs	r3, r3, r2
 800da50:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800da54:	ec51 0b10 	vmov	r0, r1, d0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	bfd6      	itet	le
 800da5c:	460a      	movle	r2, r1
 800da5e:	462a      	movgt	r2, r5
 800da60:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800da64:	468b      	mov	fp, r1
 800da66:	462f      	mov	r7, r5
 800da68:	bfd4      	ite	le
 800da6a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800da6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800da72:	4620      	mov	r0, r4
 800da74:	ee10 2a10 	vmov	r2, s0
 800da78:	465b      	mov	r3, fp
 800da7a:	4639      	mov	r1, r7
 800da7c:	f7f2 fef6 	bl	800086c <__aeabi_ddiv>
 800da80:	ec41 0b10 	vmov	d0, r0, r1
 800da84:	b003      	add	sp, #12
 800da86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800da8a <__copybits>:
 800da8a:	3901      	subs	r1, #1
 800da8c:	b570      	push	{r4, r5, r6, lr}
 800da8e:	1149      	asrs	r1, r1, #5
 800da90:	6914      	ldr	r4, [r2, #16]
 800da92:	3101      	adds	r1, #1
 800da94:	f102 0314 	add.w	r3, r2, #20
 800da98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800da9c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800daa0:	1f05      	subs	r5, r0, #4
 800daa2:	42a3      	cmp	r3, r4
 800daa4:	d30c      	bcc.n	800dac0 <__copybits+0x36>
 800daa6:	1aa3      	subs	r3, r4, r2
 800daa8:	3b11      	subs	r3, #17
 800daaa:	f023 0303 	bic.w	r3, r3, #3
 800daae:	3211      	adds	r2, #17
 800dab0:	42a2      	cmp	r2, r4
 800dab2:	bf88      	it	hi
 800dab4:	2300      	movhi	r3, #0
 800dab6:	4418      	add	r0, r3
 800dab8:	2300      	movs	r3, #0
 800daba:	4288      	cmp	r0, r1
 800dabc:	d305      	bcc.n	800daca <__copybits+0x40>
 800dabe:	bd70      	pop	{r4, r5, r6, pc}
 800dac0:	f853 6b04 	ldr.w	r6, [r3], #4
 800dac4:	f845 6f04 	str.w	r6, [r5, #4]!
 800dac8:	e7eb      	b.n	800daa2 <__copybits+0x18>
 800daca:	f840 3b04 	str.w	r3, [r0], #4
 800dace:	e7f4      	b.n	800daba <__copybits+0x30>

0800dad0 <__any_on>:
 800dad0:	f100 0214 	add.w	r2, r0, #20
 800dad4:	6900      	ldr	r0, [r0, #16]
 800dad6:	114b      	asrs	r3, r1, #5
 800dad8:	4298      	cmp	r0, r3
 800dada:	b510      	push	{r4, lr}
 800dadc:	db11      	blt.n	800db02 <__any_on+0x32>
 800dade:	dd0a      	ble.n	800daf6 <__any_on+0x26>
 800dae0:	f011 011f 	ands.w	r1, r1, #31
 800dae4:	d007      	beq.n	800daf6 <__any_on+0x26>
 800dae6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800daea:	fa24 f001 	lsr.w	r0, r4, r1
 800daee:	fa00 f101 	lsl.w	r1, r0, r1
 800daf2:	428c      	cmp	r4, r1
 800daf4:	d10b      	bne.n	800db0e <__any_on+0x3e>
 800daf6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d803      	bhi.n	800db06 <__any_on+0x36>
 800dafe:	2000      	movs	r0, #0
 800db00:	bd10      	pop	{r4, pc}
 800db02:	4603      	mov	r3, r0
 800db04:	e7f7      	b.n	800daf6 <__any_on+0x26>
 800db06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800db0a:	2900      	cmp	r1, #0
 800db0c:	d0f5      	beq.n	800dafa <__any_on+0x2a>
 800db0e:	2001      	movs	r0, #1
 800db10:	e7f6      	b.n	800db00 <__any_on+0x30>

0800db12 <_malloc_usable_size_r>:
 800db12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db16:	1f18      	subs	r0, r3, #4
 800db18:	2b00      	cmp	r3, #0
 800db1a:	bfbc      	itt	lt
 800db1c:	580b      	ldrlt	r3, [r1, r0]
 800db1e:	18c0      	addlt	r0, r0, r3
 800db20:	4770      	bx	lr

0800db22 <__ascii_wctomb>:
 800db22:	b149      	cbz	r1, 800db38 <__ascii_wctomb+0x16>
 800db24:	2aff      	cmp	r2, #255	; 0xff
 800db26:	bf85      	ittet	hi
 800db28:	238a      	movhi	r3, #138	; 0x8a
 800db2a:	6003      	strhi	r3, [r0, #0]
 800db2c:	700a      	strbls	r2, [r1, #0]
 800db2e:	f04f 30ff 	movhi.w	r0, #4294967295
 800db32:	bf98      	it	ls
 800db34:	2001      	movls	r0, #1
 800db36:	4770      	bx	lr
 800db38:	4608      	mov	r0, r1
 800db3a:	4770      	bx	lr

0800db3c <__ssputs_r>:
 800db3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db40:	688e      	ldr	r6, [r1, #8]
 800db42:	461f      	mov	r7, r3
 800db44:	42be      	cmp	r6, r7
 800db46:	680b      	ldr	r3, [r1, #0]
 800db48:	4682      	mov	sl, r0
 800db4a:	460c      	mov	r4, r1
 800db4c:	4690      	mov	r8, r2
 800db4e:	d82c      	bhi.n	800dbaa <__ssputs_r+0x6e>
 800db50:	898a      	ldrh	r2, [r1, #12]
 800db52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800db56:	d026      	beq.n	800dba6 <__ssputs_r+0x6a>
 800db58:	6965      	ldr	r5, [r4, #20]
 800db5a:	6909      	ldr	r1, [r1, #16]
 800db5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db60:	eba3 0901 	sub.w	r9, r3, r1
 800db64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db68:	1c7b      	adds	r3, r7, #1
 800db6a:	444b      	add	r3, r9
 800db6c:	106d      	asrs	r5, r5, #1
 800db6e:	429d      	cmp	r5, r3
 800db70:	bf38      	it	cc
 800db72:	461d      	movcc	r5, r3
 800db74:	0553      	lsls	r3, r2, #21
 800db76:	d527      	bpl.n	800dbc8 <__ssputs_r+0x8c>
 800db78:	4629      	mov	r1, r5
 800db7a:	f7fc fbdf 	bl	800a33c <_malloc_r>
 800db7e:	4606      	mov	r6, r0
 800db80:	b360      	cbz	r0, 800dbdc <__ssputs_r+0xa0>
 800db82:	6921      	ldr	r1, [r4, #16]
 800db84:	464a      	mov	r2, r9
 800db86:	f7fe f8d1 	bl	800bd2c <memcpy>
 800db8a:	89a3      	ldrh	r3, [r4, #12]
 800db8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db94:	81a3      	strh	r3, [r4, #12]
 800db96:	6126      	str	r6, [r4, #16]
 800db98:	6165      	str	r5, [r4, #20]
 800db9a:	444e      	add	r6, r9
 800db9c:	eba5 0509 	sub.w	r5, r5, r9
 800dba0:	6026      	str	r6, [r4, #0]
 800dba2:	60a5      	str	r5, [r4, #8]
 800dba4:	463e      	mov	r6, r7
 800dba6:	42be      	cmp	r6, r7
 800dba8:	d900      	bls.n	800dbac <__ssputs_r+0x70>
 800dbaa:	463e      	mov	r6, r7
 800dbac:	6820      	ldr	r0, [r4, #0]
 800dbae:	4632      	mov	r2, r6
 800dbb0:	4641      	mov	r1, r8
 800dbb2:	f000 f9c9 	bl	800df48 <memmove>
 800dbb6:	68a3      	ldr	r3, [r4, #8]
 800dbb8:	1b9b      	subs	r3, r3, r6
 800dbba:	60a3      	str	r3, [r4, #8]
 800dbbc:	6823      	ldr	r3, [r4, #0]
 800dbbe:	4433      	add	r3, r6
 800dbc0:	6023      	str	r3, [r4, #0]
 800dbc2:	2000      	movs	r0, #0
 800dbc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbc8:	462a      	mov	r2, r5
 800dbca:	f7fc fc4b 	bl	800a464 <_realloc_r>
 800dbce:	4606      	mov	r6, r0
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	d1e0      	bne.n	800db96 <__ssputs_r+0x5a>
 800dbd4:	6921      	ldr	r1, [r4, #16]
 800dbd6:	4650      	mov	r0, sl
 800dbd8:	f7fe ff38 	bl	800ca4c <_free_r>
 800dbdc:	230c      	movs	r3, #12
 800dbde:	f8ca 3000 	str.w	r3, [sl]
 800dbe2:	89a3      	ldrh	r3, [r4, #12]
 800dbe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbe8:	81a3      	strh	r3, [r4, #12]
 800dbea:	f04f 30ff 	mov.w	r0, #4294967295
 800dbee:	e7e9      	b.n	800dbc4 <__ssputs_r+0x88>

0800dbf0 <_svfiprintf_r>:
 800dbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf4:	4698      	mov	r8, r3
 800dbf6:	898b      	ldrh	r3, [r1, #12]
 800dbf8:	061b      	lsls	r3, r3, #24
 800dbfa:	b09d      	sub	sp, #116	; 0x74
 800dbfc:	4607      	mov	r7, r0
 800dbfe:	460d      	mov	r5, r1
 800dc00:	4614      	mov	r4, r2
 800dc02:	d50e      	bpl.n	800dc22 <_svfiprintf_r+0x32>
 800dc04:	690b      	ldr	r3, [r1, #16]
 800dc06:	b963      	cbnz	r3, 800dc22 <_svfiprintf_r+0x32>
 800dc08:	2140      	movs	r1, #64	; 0x40
 800dc0a:	f7fc fb97 	bl	800a33c <_malloc_r>
 800dc0e:	6028      	str	r0, [r5, #0]
 800dc10:	6128      	str	r0, [r5, #16]
 800dc12:	b920      	cbnz	r0, 800dc1e <_svfiprintf_r+0x2e>
 800dc14:	230c      	movs	r3, #12
 800dc16:	603b      	str	r3, [r7, #0]
 800dc18:	f04f 30ff 	mov.w	r0, #4294967295
 800dc1c:	e0d0      	b.n	800ddc0 <_svfiprintf_r+0x1d0>
 800dc1e:	2340      	movs	r3, #64	; 0x40
 800dc20:	616b      	str	r3, [r5, #20]
 800dc22:	2300      	movs	r3, #0
 800dc24:	9309      	str	r3, [sp, #36]	; 0x24
 800dc26:	2320      	movs	r3, #32
 800dc28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc30:	2330      	movs	r3, #48	; 0x30
 800dc32:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ddd8 <_svfiprintf_r+0x1e8>
 800dc36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc3a:	f04f 0901 	mov.w	r9, #1
 800dc3e:	4623      	mov	r3, r4
 800dc40:	469a      	mov	sl, r3
 800dc42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc46:	b10a      	cbz	r2, 800dc4c <_svfiprintf_r+0x5c>
 800dc48:	2a25      	cmp	r2, #37	; 0x25
 800dc4a:	d1f9      	bne.n	800dc40 <_svfiprintf_r+0x50>
 800dc4c:	ebba 0b04 	subs.w	fp, sl, r4
 800dc50:	d00b      	beq.n	800dc6a <_svfiprintf_r+0x7a>
 800dc52:	465b      	mov	r3, fp
 800dc54:	4622      	mov	r2, r4
 800dc56:	4629      	mov	r1, r5
 800dc58:	4638      	mov	r0, r7
 800dc5a:	f7ff ff6f 	bl	800db3c <__ssputs_r>
 800dc5e:	3001      	adds	r0, #1
 800dc60:	f000 80a9 	beq.w	800ddb6 <_svfiprintf_r+0x1c6>
 800dc64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc66:	445a      	add	r2, fp
 800dc68:	9209      	str	r2, [sp, #36]	; 0x24
 800dc6a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	f000 80a1 	beq.w	800ddb6 <_svfiprintf_r+0x1c6>
 800dc74:	2300      	movs	r3, #0
 800dc76:	f04f 32ff 	mov.w	r2, #4294967295
 800dc7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc7e:	f10a 0a01 	add.w	sl, sl, #1
 800dc82:	9304      	str	r3, [sp, #16]
 800dc84:	9307      	str	r3, [sp, #28]
 800dc86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc8a:	931a      	str	r3, [sp, #104]	; 0x68
 800dc8c:	4654      	mov	r4, sl
 800dc8e:	2205      	movs	r2, #5
 800dc90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc94:	4850      	ldr	r0, [pc, #320]	; (800ddd8 <_svfiprintf_r+0x1e8>)
 800dc96:	f7f2 faab 	bl	80001f0 <memchr>
 800dc9a:	9a04      	ldr	r2, [sp, #16]
 800dc9c:	b9d8      	cbnz	r0, 800dcd6 <_svfiprintf_r+0xe6>
 800dc9e:	06d0      	lsls	r0, r2, #27
 800dca0:	bf44      	itt	mi
 800dca2:	2320      	movmi	r3, #32
 800dca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dca8:	0711      	lsls	r1, r2, #28
 800dcaa:	bf44      	itt	mi
 800dcac:	232b      	movmi	r3, #43	; 0x2b
 800dcae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcb2:	f89a 3000 	ldrb.w	r3, [sl]
 800dcb6:	2b2a      	cmp	r3, #42	; 0x2a
 800dcb8:	d015      	beq.n	800dce6 <_svfiprintf_r+0xf6>
 800dcba:	9a07      	ldr	r2, [sp, #28]
 800dcbc:	4654      	mov	r4, sl
 800dcbe:	2000      	movs	r0, #0
 800dcc0:	f04f 0c0a 	mov.w	ip, #10
 800dcc4:	4621      	mov	r1, r4
 800dcc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dcca:	3b30      	subs	r3, #48	; 0x30
 800dccc:	2b09      	cmp	r3, #9
 800dcce:	d94d      	bls.n	800dd6c <_svfiprintf_r+0x17c>
 800dcd0:	b1b0      	cbz	r0, 800dd00 <_svfiprintf_r+0x110>
 800dcd2:	9207      	str	r2, [sp, #28]
 800dcd4:	e014      	b.n	800dd00 <_svfiprintf_r+0x110>
 800dcd6:	eba0 0308 	sub.w	r3, r0, r8
 800dcda:	fa09 f303 	lsl.w	r3, r9, r3
 800dcde:	4313      	orrs	r3, r2
 800dce0:	9304      	str	r3, [sp, #16]
 800dce2:	46a2      	mov	sl, r4
 800dce4:	e7d2      	b.n	800dc8c <_svfiprintf_r+0x9c>
 800dce6:	9b03      	ldr	r3, [sp, #12]
 800dce8:	1d19      	adds	r1, r3, #4
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	9103      	str	r1, [sp, #12]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	bfbb      	ittet	lt
 800dcf2:	425b      	neglt	r3, r3
 800dcf4:	f042 0202 	orrlt.w	r2, r2, #2
 800dcf8:	9307      	strge	r3, [sp, #28]
 800dcfa:	9307      	strlt	r3, [sp, #28]
 800dcfc:	bfb8      	it	lt
 800dcfe:	9204      	strlt	r2, [sp, #16]
 800dd00:	7823      	ldrb	r3, [r4, #0]
 800dd02:	2b2e      	cmp	r3, #46	; 0x2e
 800dd04:	d10c      	bne.n	800dd20 <_svfiprintf_r+0x130>
 800dd06:	7863      	ldrb	r3, [r4, #1]
 800dd08:	2b2a      	cmp	r3, #42	; 0x2a
 800dd0a:	d134      	bne.n	800dd76 <_svfiprintf_r+0x186>
 800dd0c:	9b03      	ldr	r3, [sp, #12]
 800dd0e:	1d1a      	adds	r2, r3, #4
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	9203      	str	r2, [sp, #12]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	bfb8      	it	lt
 800dd18:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd1c:	3402      	adds	r4, #2
 800dd1e:	9305      	str	r3, [sp, #20]
 800dd20:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dde8 <_svfiprintf_r+0x1f8>
 800dd24:	7821      	ldrb	r1, [r4, #0]
 800dd26:	2203      	movs	r2, #3
 800dd28:	4650      	mov	r0, sl
 800dd2a:	f7f2 fa61 	bl	80001f0 <memchr>
 800dd2e:	b138      	cbz	r0, 800dd40 <_svfiprintf_r+0x150>
 800dd30:	9b04      	ldr	r3, [sp, #16]
 800dd32:	eba0 000a 	sub.w	r0, r0, sl
 800dd36:	2240      	movs	r2, #64	; 0x40
 800dd38:	4082      	lsls	r2, r0
 800dd3a:	4313      	orrs	r3, r2
 800dd3c:	3401      	adds	r4, #1
 800dd3e:	9304      	str	r3, [sp, #16]
 800dd40:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd44:	4825      	ldr	r0, [pc, #148]	; (800dddc <_svfiprintf_r+0x1ec>)
 800dd46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd4a:	2206      	movs	r2, #6
 800dd4c:	f7f2 fa50 	bl	80001f0 <memchr>
 800dd50:	2800      	cmp	r0, #0
 800dd52:	d038      	beq.n	800ddc6 <_svfiprintf_r+0x1d6>
 800dd54:	4b22      	ldr	r3, [pc, #136]	; (800dde0 <_svfiprintf_r+0x1f0>)
 800dd56:	bb1b      	cbnz	r3, 800dda0 <_svfiprintf_r+0x1b0>
 800dd58:	9b03      	ldr	r3, [sp, #12]
 800dd5a:	3307      	adds	r3, #7
 800dd5c:	f023 0307 	bic.w	r3, r3, #7
 800dd60:	3308      	adds	r3, #8
 800dd62:	9303      	str	r3, [sp, #12]
 800dd64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd66:	4433      	add	r3, r6
 800dd68:	9309      	str	r3, [sp, #36]	; 0x24
 800dd6a:	e768      	b.n	800dc3e <_svfiprintf_r+0x4e>
 800dd6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd70:	460c      	mov	r4, r1
 800dd72:	2001      	movs	r0, #1
 800dd74:	e7a6      	b.n	800dcc4 <_svfiprintf_r+0xd4>
 800dd76:	2300      	movs	r3, #0
 800dd78:	3401      	adds	r4, #1
 800dd7a:	9305      	str	r3, [sp, #20]
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	f04f 0c0a 	mov.w	ip, #10
 800dd82:	4620      	mov	r0, r4
 800dd84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd88:	3a30      	subs	r2, #48	; 0x30
 800dd8a:	2a09      	cmp	r2, #9
 800dd8c:	d903      	bls.n	800dd96 <_svfiprintf_r+0x1a6>
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d0c6      	beq.n	800dd20 <_svfiprintf_r+0x130>
 800dd92:	9105      	str	r1, [sp, #20]
 800dd94:	e7c4      	b.n	800dd20 <_svfiprintf_r+0x130>
 800dd96:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd9a:	4604      	mov	r4, r0
 800dd9c:	2301      	movs	r3, #1
 800dd9e:	e7f0      	b.n	800dd82 <_svfiprintf_r+0x192>
 800dda0:	ab03      	add	r3, sp, #12
 800dda2:	9300      	str	r3, [sp, #0]
 800dda4:	462a      	mov	r2, r5
 800dda6:	4b0f      	ldr	r3, [pc, #60]	; (800dde4 <_svfiprintf_r+0x1f4>)
 800dda8:	a904      	add	r1, sp, #16
 800ddaa:	4638      	mov	r0, r7
 800ddac:	f7fd fa44 	bl	800b238 <_printf_float>
 800ddb0:	1c42      	adds	r2, r0, #1
 800ddb2:	4606      	mov	r6, r0
 800ddb4:	d1d6      	bne.n	800dd64 <_svfiprintf_r+0x174>
 800ddb6:	89ab      	ldrh	r3, [r5, #12]
 800ddb8:	065b      	lsls	r3, r3, #25
 800ddba:	f53f af2d 	bmi.w	800dc18 <_svfiprintf_r+0x28>
 800ddbe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddc0:	b01d      	add	sp, #116	; 0x74
 800ddc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc6:	ab03      	add	r3, sp, #12
 800ddc8:	9300      	str	r3, [sp, #0]
 800ddca:	462a      	mov	r2, r5
 800ddcc:	4b05      	ldr	r3, [pc, #20]	; (800dde4 <_svfiprintf_r+0x1f4>)
 800ddce:	a904      	add	r1, sp, #16
 800ddd0:	4638      	mov	r0, r7
 800ddd2:	f7fd fcd5 	bl	800b780 <_printf_i>
 800ddd6:	e7eb      	b.n	800ddb0 <_svfiprintf_r+0x1c0>
 800ddd8:	0800eaac 	.word	0x0800eaac
 800dddc:	0800eab6 	.word	0x0800eab6
 800dde0:	0800b239 	.word	0x0800b239
 800dde4:	0800db3d 	.word	0x0800db3d
 800dde8:	0800eab2 	.word	0x0800eab2

0800ddec <__sflush_r>:
 800ddec:	898a      	ldrh	r2, [r1, #12]
 800ddee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddf2:	4605      	mov	r5, r0
 800ddf4:	0710      	lsls	r0, r2, #28
 800ddf6:	460c      	mov	r4, r1
 800ddf8:	d458      	bmi.n	800deac <__sflush_r+0xc0>
 800ddfa:	684b      	ldr	r3, [r1, #4]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	dc05      	bgt.n	800de0c <__sflush_r+0x20>
 800de00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de02:	2b00      	cmp	r3, #0
 800de04:	dc02      	bgt.n	800de0c <__sflush_r+0x20>
 800de06:	2000      	movs	r0, #0
 800de08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de0e:	2e00      	cmp	r6, #0
 800de10:	d0f9      	beq.n	800de06 <__sflush_r+0x1a>
 800de12:	2300      	movs	r3, #0
 800de14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800de18:	682f      	ldr	r7, [r5, #0]
 800de1a:	6a21      	ldr	r1, [r4, #32]
 800de1c:	602b      	str	r3, [r5, #0]
 800de1e:	d032      	beq.n	800de86 <__sflush_r+0x9a>
 800de20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800de22:	89a3      	ldrh	r3, [r4, #12]
 800de24:	075a      	lsls	r2, r3, #29
 800de26:	d505      	bpl.n	800de34 <__sflush_r+0x48>
 800de28:	6863      	ldr	r3, [r4, #4]
 800de2a:	1ac0      	subs	r0, r0, r3
 800de2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de2e:	b10b      	cbz	r3, 800de34 <__sflush_r+0x48>
 800de30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de32:	1ac0      	subs	r0, r0, r3
 800de34:	2300      	movs	r3, #0
 800de36:	4602      	mov	r2, r0
 800de38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de3a:	6a21      	ldr	r1, [r4, #32]
 800de3c:	4628      	mov	r0, r5
 800de3e:	47b0      	blx	r6
 800de40:	1c43      	adds	r3, r0, #1
 800de42:	89a3      	ldrh	r3, [r4, #12]
 800de44:	d106      	bne.n	800de54 <__sflush_r+0x68>
 800de46:	6829      	ldr	r1, [r5, #0]
 800de48:	291d      	cmp	r1, #29
 800de4a:	d82b      	bhi.n	800dea4 <__sflush_r+0xb8>
 800de4c:	4a29      	ldr	r2, [pc, #164]	; (800def4 <__sflush_r+0x108>)
 800de4e:	410a      	asrs	r2, r1
 800de50:	07d6      	lsls	r6, r2, #31
 800de52:	d427      	bmi.n	800dea4 <__sflush_r+0xb8>
 800de54:	2200      	movs	r2, #0
 800de56:	6062      	str	r2, [r4, #4]
 800de58:	04d9      	lsls	r1, r3, #19
 800de5a:	6922      	ldr	r2, [r4, #16]
 800de5c:	6022      	str	r2, [r4, #0]
 800de5e:	d504      	bpl.n	800de6a <__sflush_r+0x7e>
 800de60:	1c42      	adds	r2, r0, #1
 800de62:	d101      	bne.n	800de68 <__sflush_r+0x7c>
 800de64:	682b      	ldr	r3, [r5, #0]
 800de66:	b903      	cbnz	r3, 800de6a <__sflush_r+0x7e>
 800de68:	6560      	str	r0, [r4, #84]	; 0x54
 800de6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de6c:	602f      	str	r7, [r5, #0]
 800de6e:	2900      	cmp	r1, #0
 800de70:	d0c9      	beq.n	800de06 <__sflush_r+0x1a>
 800de72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de76:	4299      	cmp	r1, r3
 800de78:	d002      	beq.n	800de80 <__sflush_r+0x94>
 800de7a:	4628      	mov	r0, r5
 800de7c:	f7fe fde6 	bl	800ca4c <_free_r>
 800de80:	2000      	movs	r0, #0
 800de82:	6360      	str	r0, [r4, #52]	; 0x34
 800de84:	e7c0      	b.n	800de08 <__sflush_r+0x1c>
 800de86:	2301      	movs	r3, #1
 800de88:	4628      	mov	r0, r5
 800de8a:	47b0      	blx	r6
 800de8c:	1c41      	adds	r1, r0, #1
 800de8e:	d1c8      	bne.n	800de22 <__sflush_r+0x36>
 800de90:	682b      	ldr	r3, [r5, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d0c5      	beq.n	800de22 <__sflush_r+0x36>
 800de96:	2b1d      	cmp	r3, #29
 800de98:	d001      	beq.n	800de9e <__sflush_r+0xb2>
 800de9a:	2b16      	cmp	r3, #22
 800de9c:	d101      	bne.n	800dea2 <__sflush_r+0xb6>
 800de9e:	602f      	str	r7, [r5, #0]
 800dea0:	e7b1      	b.n	800de06 <__sflush_r+0x1a>
 800dea2:	89a3      	ldrh	r3, [r4, #12]
 800dea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dea8:	81a3      	strh	r3, [r4, #12]
 800deaa:	e7ad      	b.n	800de08 <__sflush_r+0x1c>
 800deac:	690f      	ldr	r7, [r1, #16]
 800deae:	2f00      	cmp	r7, #0
 800deb0:	d0a9      	beq.n	800de06 <__sflush_r+0x1a>
 800deb2:	0793      	lsls	r3, r2, #30
 800deb4:	680e      	ldr	r6, [r1, #0]
 800deb6:	bf08      	it	eq
 800deb8:	694b      	ldreq	r3, [r1, #20]
 800deba:	600f      	str	r7, [r1, #0]
 800debc:	bf18      	it	ne
 800debe:	2300      	movne	r3, #0
 800dec0:	eba6 0807 	sub.w	r8, r6, r7
 800dec4:	608b      	str	r3, [r1, #8]
 800dec6:	f1b8 0f00 	cmp.w	r8, #0
 800deca:	dd9c      	ble.n	800de06 <__sflush_r+0x1a>
 800decc:	6a21      	ldr	r1, [r4, #32]
 800dece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ded0:	4643      	mov	r3, r8
 800ded2:	463a      	mov	r2, r7
 800ded4:	4628      	mov	r0, r5
 800ded6:	47b0      	blx	r6
 800ded8:	2800      	cmp	r0, #0
 800deda:	dc06      	bgt.n	800deea <__sflush_r+0xfe>
 800dedc:	89a3      	ldrh	r3, [r4, #12]
 800dede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dee2:	81a3      	strh	r3, [r4, #12]
 800dee4:	f04f 30ff 	mov.w	r0, #4294967295
 800dee8:	e78e      	b.n	800de08 <__sflush_r+0x1c>
 800deea:	4407      	add	r7, r0
 800deec:	eba8 0800 	sub.w	r8, r8, r0
 800def0:	e7e9      	b.n	800dec6 <__sflush_r+0xda>
 800def2:	bf00      	nop
 800def4:	dfbffffe 	.word	0xdfbffffe

0800def8 <_fflush_r>:
 800def8:	b538      	push	{r3, r4, r5, lr}
 800defa:	690b      	ldr	r3, [r1, #16]
 800defc:	4605      	mov	r5, r0
 800defe:	460c      	mov	r4, r1
 800df00:	b913      	cbnz	r3, 800df08 <_fflush_r+0x10>
 800df02:	2500      	movs	r5, #0
 800df04:	4628      	mov	r0, r5
 800df06:	bd38      	pop	{r3, r4, r5, pc}
 800df08:	b118      	cbz	r0, 800df12 <_fflush_r+0x1a>
 800df0a:	6a03      	ldr	r3, [r0, #32]
 800df0c:	b90b      	cbnz	r3, 800df12 <_fflush_r+0x1a>
 800df0e:	f7fd fdd3 	bl	800bab8 <__sinit>
 800df12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d0f3      	beq.n	800df02 <_fflush_r+0xa>
 800df1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800df1c:	07d0      	lsls	r0, r2, #31
 800df1e:	d404      	bmi.n	800df2a <_fflush_r+0x32>
 800df20:	0599      	lsls	r1, r3, #22
 800df22:	d402      	bmi.n	800df2a <_fflush_r+0x32>
 800df24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df26:	f7fd feff 	bl	800bd28 <__retarget_lock_acquire_recursive>
 800df2a:	4628      	mov	r0, r5
 800df2c:	4621      	mov	r1, r4
 800df2e:	f7ff ff5d 	bl	800ddec <__sflush_r>
 800df32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df34:	07da      	lsls	r2, r3, #31
 800df36:	4605      	mov	r5, r0
 800df38:	d4e4      	bmi.n	800df04 <_fflush_r+0xc>
 800df3a:	89a3      	ldrh	r3, [r4, #12]
 800df3c:	059b      	lsls	r3, r3, #22
 800df3e:	d4e1      	bmi.n	800df04 <_fflush_r+0xc>
 800df40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df42:	f7fd fef2 	bl	800bd2a <__retarget_lock_release_recursive>
 800df46:	e7dd      	b.n	800df04 <_fflush_r+0xc>

0800df48 <memmove>:
 800df48:	4288      	cmp	r0, r1
 800df4a:	b510      	push	{r4, lr}
 800df4c:	eb01 0402 	add.w	r4, r1, r2
 800df50:	d902      	bls.n	800df58 <memmove+0x10>
 800df52:	4284      	cmp	r4, r0
 800df54:	4623      	mov	r3, r4
 800df56:	d807      	bhi.n	800df68 <memmove+0x20>
 800df58:	1e43      	subs	r3, r0, #1
 800df5a:	42a1      	cmp	r1, r4
 800df5c:	d008      	beq.n	800df70 <memmove+0x28>
 800df5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df62:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df66:	e7f8      	b.n	800df5a <memmove+0x12>
 800df68:	4402      	add	r2, r0
 800df6a:	4601      	mov	r1, r0
 800df6c:	428a      	cmp	r2, r1
 800df6e:	d100      	bne.n	800df72 <memmove+0x2a>
 800df70:	bd10      	pop	{r4, pc}
 800df72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df7a:	e7f7      	b.n	800df6c <memmove+0x24>

0800df7c <__assert_func>:
 800df7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df7e:	4614      	mov	r4, r2
 800df80:	461a      	mov	r2, r3
 800df82:	4b09      	ldr	r3, [pc, #36]	; (800dfa8 <__assert_func+0x2c>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	4605      	mov	r5, r0
 800df88:	68d8      	ldr	r0, [r3, #12]
 800df8a:	b14c      	cbz	r4, 800dfa0 <__assert_func+0x24>
 800df8c:	4b07      	ldr	r3, [pc, #28]	; (800dfac <__assert_func+0x30>)
 800df8e:	9100      	str	r1, [sp, #0]
 800df90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df94:	4906      	ldr	r1, [pc, #24]	; (800dfb0 <__assert_func+0x34>)
 800df96:	462b      	mov	r3, r5
 800df98:	f000 f824 	bl	800dfe4 <fiprintf>
 800df9c:	f000 f834 	bl	800e008 <abort>
 800dfa0:	4b04      	ldr	r3, [pc, #16]	; (800dfb4 <__assert_func+0x38>)
 800dfa2:	461c      	mov	r4, r3
 800dfa4:	e7f3      	b.n	800df8e <__assert_func+0x12>
 800dfa6:	bf00      	nop
 800dfa8:	20000268 	.word	0x20000268
 800dfac:	0800eabd 	.word	0x0800eabd
 800dfb0:	0800eaca 	.word	0x0800eaca
 800dfb4:	0800eaf8 	.word	0x0800eaf8

0800dfb8 <_calloc_r>:
 800dfb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfba:	fba1 2402 	umull	r2, r4, r1, r2
 800dfbe:	b94c      	cbnz	r4, 800dfd4 <_calloc_r+0x1c>
 800dfc0:	4611      	mov	r1, r2
 800dfc2:	9201      	str	r2, [sp, #4]
 800dfc4:	f7fc f9ba 	bl	800a33c <_malloc_r>
 800dfc8:	9a01      	ldr	r2, [sp, #4]
 800dfca:	4605      	mov	r5, r0
 800dfcc:	b930      	cbnz	r0, 800dfdc <_calloc_r+0x24>
 800dfce:	4628      	mov	r0, r5
 800dfd0:	b003      	add	sp, #12
 800dfd2:	bd30      	pop	{r4, r5, pc}
 800dfd4:	220c      	movs	r2, #12
 800dfd6:	6002      	str	r2, [r0, #0]
 800dfd8:	2500      	movs	r5, #0
 800dfda:	e7f8      	b.n	800dfce <_calloc_r+0x16>
 800dfdc:	4621      	mov	r1, r4
 800dfde:	f7fd fe04 	bl	800bbea <memset>
 800dfe2:	e7f4      	b.n	800dfce <_calloc_r+0x16>

0800dfe4 <fiprintf>:
 800dfe4:	b40e      	push	{r1, r2, r3}
 800dfe6:	b503      	push	{r0, r1, lr}
 800dfe8:	4601      	mov	r1, r0
 800dfea:	ab03      	add	r3, sp, #12
 800dfec:	4805      	ldr	r0, [pc, #20]	; (800e004 <fiprintf+0x20>)
 800dfee:	f853 2b04 	ldr.w	r2, [r3], #4
 800dff2:	6800      	ldr	r0, [r0, #0]
 800dff4:	9301      	str	r3, [sp, #4]
 800dff6:	f000 f837 	bl	800e068 <_vfiprintf_r>
 800dffa:	b002      	add	sp, #8
 800dffc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e000:	b003      	add	sp, #12
 800e002:	4770      	bx	lr
 800e004:	20000268 	.word	0x20000268

0800e008 <abort>:
 800e008:	b508      	push	{r3, lr}
 800e00a:	2006      	movs	r0, #6
 800e00c:	f000 fa04 	bl	800e418 <raise>
 800e010:	2001      	movs	r0, #1
 800e012:	f7f5 fb95 	bl	8003740 <_exit>

0800e016 <__sfputc_r>:
 800e016:	6893      	ldr	r3, [r2, #8]
 800e018:	3b01      	subs	r3, #1
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	b410      	push	{r4}
 800e01e:	6093      	str	r3, [r2, #8]
 800e020:	da08      	bge.n	800e034 <__sfputc_r+0x1e>
 800e022:	6994      	ldr	r4, [r2, #24]
 800e024:	42a3      	cmp	r3, r4
 800e026:	db01      	blt.n	800e02c <__sfputc_r+0x16>
 800e028:	290a      	cmp	r1, #10
 800e02a:	d103      	bne.n	800e034 <__sfputc_r+0x1e>
 800e02c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e030:	f000 b934 	b.w	800e29c <__swbuf_r>
 800e034:	6813      	ldr	r3, [r2, #0]
 800e036:	1c58      	adds	r0, r3, #1
 800e038:	6010      	str	r0, [r2, #0]
 800e03a:	7019      	strb	r1, [r3, #0]
 800e03c:	4608      	mov	r0, r1
 800e03e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <__sfputs_r>:
 800e044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e046:	4606      	mov	r6, r0
 800e048:	460f      	mov	r7, r1
 800e04a:	4614      	mov	r4, r2
 800e04c:	18d5      	adds	r5, r2, r3
 800e04e:	42ac      	cmp	r4, r5
 800e050:	d101      	bne.n	800e056 <__sfputs_r+0x12>
 800e052:	2000      	movs	r0, #0
 800e054:	e007      	b.n	800e066 <__sfputs_r+0x22>
 800e056:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e05a:	463a      	mov	r2, r7
 800e05c:	4630      	mov	r0, r6
 800e05e:	f7ff ffda 	bl	800e016 <__sfputc_r>
 800e062:	1c43      	adds	r3, r0, #1
 800e064:	d1f3      	bne.n	800e04e <__sfputs_r+0xa>
 800e066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e068 <_vfiprintf_r>:
 800e068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e06c:	460d      	mov	r5, r1
 800e06e:	b09d      	sub	sp, #116	; 0x74
 800e070:	4614      	mov	r4, r2
 800e072:	4698      	mov	r8, r3
 800e074:	4606      	mov	r6, r0
 800e076:	b118      	cbz	r0, 800e080 <_vfiprintf_r+0x18>
 800e078:	6a03      	ldr	r3, [r0, #32]
 800e07a:	b90b      	cbnz	r3, 800e080 <_vfiprintf_r+0x18>
 800e07c:	f7fd fd1c 	bl	800bab8 <__sinit>
 800e080:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e082:	07d9      	lsls	r1, r3, #31
 800e084:	d405      	bmi.n	800e092 <_vfiprintf_r+0x2a>
 800e086:	89ab      	ldrh	r3, [r5, #12]
 800e088:	059a      	lsls	r2, r3, #22
 800e08a:	d402      	bmi.n	800e092 <_vfiprintf_r+0x2a>
 800e08c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e08e:	f7fd fe4b 	bl	800bd28 <__retarget_lock_acquire_recursive>
 800e092:	89ab      	ldrh	r3, [r5, #12]
 800e094:	071b      	lsls	r3, r3, #28
 800e096:	d501      	bpl.n	800e09c <_vfiprintf_r+0x34>
 800e098:	692b      	ldr	r3, [r5, #16]
 800e09a:	b99b      	cbnz	r3, 800e0c4 <_vfiprintf_r+0x5c>
 800e09c:	4629      	mov	r1, r5
 800e09e:	4630      	mov	r0, r6
 800e0a0:	f000 f93a 	bl	800e318 <__swsetup_r>
 800e0a4:	b170      	cbz	r0, 800e0c4 <_vfiprintf_r+0x5c>
 800e0a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0a8:	07dc      	lsls	r4, r3, #31
 800e0aa:	d504      	bpl.n	800e0b6 <_vfiprintf_r+0x4e>
 800e0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e0b0:	b01d      	add	sp, #116	; 0x74
 800e0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0b6:	89ab      	ldrh	r3, [r5, #12]
 800e0b8:	0598      	lsls	r0, r3, #22
 800e0ba:	d4f7      	bmi.n	800e0ac <_vfiprintf_r+0x44>
 800e0bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0be:	f7fd fe34 	bl	800bd2a <__retarget_lock_release_recursive>
 800e0c2:	e7f3      	b.n	800e0ac <_vfiprintf_r+0x44>
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	9309      	str	r3, [sp, #36]	; 0x24
 800e0c8:	2320      	movs	r3, #32
 800e0ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0d2:	2330      	movs	r3, #48	; 0x30
 800e0d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e288 <_vfiprintf_r+0x220>
 800e0d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0dc:	f04f 0901 	mov.w	r9, #1
 800e0e0:	4623      	mov	r3, r4
 800e0e2:	469a      	mov	sl, r3
 800e0e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0e8:	b10a      	cbz	r2, 800e0ee <_vfiprintf_r+0x86>
 800e0ea:	2a25      	cmp	r2, #37	; 0x25
 800e0ec:	d1f9      	bne.n	800e0e2 <_vfiprintf_r+0x7a>
 800e0ee:	ebba 0b04 	subs.w	fp, sl, r4
 800e0f2:	d00b      	beq.n	800e10c <_vfiprintf_r+0xa4>
 800e0f4:	465b      	mov	r3, fp
 800e0f6:	4622      	mov	r2, r4
 800e0f8:	4629      	mov	r1, r5
 800e0fa:	4630      	mov	r0, r6
 800e0fc:	f7ff ffa2 	bl	800e044 <__sfputs_r>
 800e100:	3001      	adds	r0, #1
 800e102:	f000 80a9 	beq.w	800e258 <_vfiprintf_r+0x1f0>
 800e106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e108:	445a      	add	r2, fp
 800e10a:	9209      	str	r2, [sp, #36]	; 0x24
 800e10c:	f89a 3000 	ldrb.w	r3, [sl]
 800e110:	2b00      	cmp	r3, #0
 800e112:	f000 80a1 	beq.w	800e258 <_vfiprintf_r+0x1f0>
 800e116:	2300      	movs	r3, #0
 800e118:	f04f 32ff 	mov.w	r2, #4294967295
 800e11c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e120:	f10a 0a01 	add.w	sl, sl, #1
 800e124:	9304      	str	r3, [sp, #16]
 800e126:	9307      	str	r3, [sp, #28]
 800e128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e12c:	931a      	str	r3, [sp, #104]	; 0x68
 800e12e:	4654      	mov	r4, sl
 800e130:	2205      	movs	r2, #5
 800e132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e136:	4854      	ldr	r0, [pc, #336]	; (800e288 <_vfiprintf_r+0x220>)
 800e138:	f7f2 f85a 	bl	80001f0 <memchr>
 800e13c:	9a04      	ldr	r2, [sp, #16]
 800e13e:	b9d8      	cbnz	r0, 800e178 <_vfiprintf_r+0x110>
 800e140:	06d1      	lsls	r1, r2, #27
 800e142:	bf44      	itt	mi
 800e144:	2320      	movmi	r3, #32
 800e146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e14a:	0713      	lsls	r3, r2, #28
 800e14c:	bf44      	itt	mi
 800e14e:	232b      	movmi	r3, #43	; 0x2b
 800e150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e154:	f89a 3000 	ldrb.w	r3, [sl]
 800e158:	2b2a      	cmp	r3, #42	; 0x2a
 800e15a:	d015      	beq.n	800e188 <_vfiprintf_r+0x120>
 800e15c:	9a07      	ldr	r2, [sp, #28]
 800e15e:	4654      	mov	r4, sl
 800e160:	2000      	movs	r0, #0
 800e162:	f04f 0c0a 	mov.w	ip, #10
 800e166:	4621      	mov	r1, r4
 800e168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e16c:	3b30      	subs	r3, #48	; 0x30
 800e16e:	2b09      	cmp	r3, #9
 800e170:	d94d      	bls.n	800e20e <_vfiprintf_r+0x1a6>
 800e172:	b1b0      	cbz	r0, 800e1a2 <_vfiprintf_r+0x13a>
 800e174:	9207      	str	r2, [sp, #28]
 800e176:	e014      	b.n	800e1a2 <_vfiprintf_r+0x13a>
 800e178:	eba0 0308 	sub.w	r3, r0, r8
 800e17c:	fa09 f303 	lsl.w	r3, r9, r3
 800e180:	4313      	orrs	r3, r2
 800e182:	9304      	str	r3, [sp, #16]
 800e184:	46a2      	mov	sl, r4
 800e186:	e7d2      	b.n	800e12e <_vfiprintf_r+0xc6>
 800e188:	9b03      	ldr	r3, [sp, #12]
 800e18a:	1d19      	adds	r1, r3, #4
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	9103      	str	r1, [sp, #12]
 800e190:	2b00      	cmp	r3, #0
 800e192:	bfbb      	ittet	lt
 800e194:	425b      	neglt	r3, r3
 800e196:	f042 0202 	orrlt.w	r2, r2, #2
 800e19a:	9307      	strge	r3, [sp, #28]
 800e19c:	9307      	strlt	r3, [sp, #28]
 800e19e:	bfb8      	it	lt
 800e1a0:	9204      	strlt	r2, [sp, #16]
 800e1a2:	7823      	ldrb	r3, [r4, #0]
 800e1a4:	2b2e      	cmp	r3, #46	; 0x2e
 800e1a6:	d10c      	bne.n	800e1c2 <_vfiprintf_r+0x15a>
 800e1a8:	7863      	ldrb	r3, [r4, #1]
 800e1aa:	2b2a      	cmp	r3, #42	; 0x2a
 800e1ac:	d134      	bne.n	800e218 <_vfiprintf_r+0x1b0>
 800e1ae:	9b03      	ldr	r3, [sp, #12]
 800e1b0:	1d1a      	adds	r2, r3, #4
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	9203      	str	r2, [sp, #12]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	bfb8      	it	lt
 800e1ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800e1be:	3402      	adds	r4, #2
 800e1c0:	9305      	str	r3, [sp, #20]
 800e1c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e298 <_vfiprintf_r+0x230>
 800e1c6:	7821      	ldrb	r1, [r4, #0]
 800e1c8:	2203      	movs	r2, #3
 800e1ca:	4650      	mov	r0, sl
 800e1cc:	f7f2 f810 	bl	80001f0 <memchr>
 800e1d0:	b138      	cbz	r0, 800e1e2 <_vfiprintf_r+0x17a>
 800e1d2:	9b04      	ldr	r3, [sp, #16]
 800e1d4:	eba0 000a 	sub.w	r0, r0, sl
 800e1d8:	2240      	movs	r2, #64	; 0x40
 800e1da:	4082      	lsls	r2, r0
 800e1dc:	4313      	orrs	r3, r2
 800e1de:	3401      	adds	r4, #1
 800e1e0:	9304      	str	r3, [sp, #16]
 800e1e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1e6:	4829      	ldr	r0, [pc, #164]	; (800e28c <_vfiprintf_r+0x224>)
 800e1e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1ec:	2206      	movs	r2, #6
 800e1ee:	f7f1 ffff 	bl	80001f0 <memchr>
 800e1f2:	2800      	cmp	r0, #0
 800e1f4:	d03f      	beq.n	800e276 <_vfiprintf_r+0x20e>
 800e1f6:	4b26      	ldr	r3, [pc, #152]	; (800e290 <_vfiprintf_r+0x228>)
 800e1f8:	bb1b      	cbnz	r3, 800e242 <_vfiprintf_r+0x1da>
 800e1fa:	9b03      	ldr	r3, [sp, #12]
 800e1fc:	3307      	adds	r3, #7
 800e1fe:	f023 0307 	bic.w	r3, r3, #7
 800e202:	3308      	adds	r3, #8
 800e204:	9303      	str	r3, [sp, #12]
 800e206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e208:	443b      	add	r3, r7
 800e20a:	9309      	str	r3, [sp, #36]	; 0x24
 800e20c:	e768      	b.n	800e0e0 <_vfiprintf_r+0x78>
 800e20e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e212:	460c      	mov	r4, r1
 800e214:	2001      	movs	r0, #1
 800e216:	e7a6      	b.n	800e166 <_vfiprintf_r+0xfe>
 800e218:	2300      	movs	r3, #0
 800e21a:	3401      	adds	r4, #1
 800e21c:	9305      	str	r3, [sp, #20]
 800e21e:	4619      	mov	r1, r3
 800e220:	f04f 0c0a 	mov.w	ip, #10
 800e224:	4620      	mov	r0, r4
 800e226:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e22a:	3a30      	subs	r2, #48	; 0x30
 800e22c:	2a09      	cmp	r2, #9
 800e22e:	d903      	bls.n	800e238 <_vfiprintf_r+0x1d0>
 800e230:	2b00      	cmp	r3, #0
 800e232:	d0c6      	beq.n	800e1c2 <_vfiprintf_r+0x15a>
 800e234:	9105      	str	r1, [sp, #20]
 800e236:	e7c4      	b.n	800e1c2 <_vfiprintf_r+0x15a>
 800e238:	fb0c 2101 	mla	r1, ip, r1, r2
 800e23c:	4604      	mov	r4, r0
 800e23e:	2301      	movs	r3, #1
 800e240:	e7f0      	b.n	800e224 <_vfiprintf_r+0x1bc>
 800e242:	ab03      	add	r3, sp, #12
 800e244:	9300      	str	r3, [sp, #0]
 800e246:	462a      	mov	r2, r5
 800e248:	4b12      	ldr	r3, [pc, #72]	; (800e294 <_vfiprintf_r+0x22c>)
 800e24a:	a904      	add	r1, sp, #16
 800e24c:	4630      	mov	r0, r6
 800e24e:	f7fc fff3 	bl	800b238 <_printf_float>
 800e252:	4607      	mov	r7, r0
 800e254:	1c78      	adds	r0, r7, #1
 800e256:	d1d6      	bne.n	800e206 <_vfiprintf_r+0x19e>
 800e258:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e25a:	07d9      	lsls	r1, r3, #31
 800e25c:	d405      	bmi.n	800e26a <_vfiprintf_r+0x202>
 800e25e:	89ab      	ldrh	r3, [r5, #12]
 800e260:	059a      	lsls	r2, r3, #22
 800e262:	d402      	bmi.n	800e26a <_vfiprintf_r+0x202>
 800e264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e266:	f7fd fd60 	bl	800bd2a <__retarget_lock_release_recursive>
 800e26a:	89ab      	ldrh	r3, [r5, #12]
 800e26c:	065b      	lsls	r3, r3, #25
 800e26e:	f53f af1d 	bmi.w	800e0ac <_vfiprintf_r+0x44>
 800e272:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e274:	e71c      	b.n	800e0b0 <_vfiprintf_r+0x48>
 800e276:	ab03      	add	r3, sp, #12
 800e278:	9300      	str	r3, [sp, #0]
 800e27a:	462a      	mov	r2, r5
 800e27c:	4b05      	ldr	r3, [pc, #20]	; (800e294 <_vfiprintf_r+0x22c>)
 800e27e:	a904      	add	r1, sp, #16
 800e280:	4630      	mov	r0, r6
 800e282:	f7fd fa7d 	bl	800b780 <_printf_i>
 800e286:	e7e4      	b.n	800e252 <_vfiprintf_r+0x1ea>
 800e288:	0800eaac 	.word	0x0800eaac
 800e28c:	0800eab6 	.word	0x0800eab6
 800e290:	0800b239 	.word	0x0800b239
 800e294:	0800e045 	.word	0x0800e045
 800e298:	0800eab2 	.word	0x0800eab2

0800e29c <__swbuf_r>:
 800e29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e29e:	460e      	mov	r6, r1
 800e2a0:	4614      	mov	r4, r2
 800e2a2:	4605      	mov	r5, r0
 800e2a4:	b118      	cbz	r0, 800e2ae <__swbuf_r+0x12>
 800e2a6:	6a03      	ldr	r3, [r0, #32]
 800e2a8:	b90b      	cbnz	r3, 800e2ae <__swbuf_r+0x12>
 800e2aa:	f7fd fc05 	bl	800bab8 <__sinit>
 800e2ae:	69a3      	ldr	r3, [r4, #24]
 800e2b0:	60a3      	str	r3, [r4, #8]
 800e2b2:	89a3      	ldrh	r3, [r4, #12]
 800e2b4:	071a      	lsls	r2, r3, #28
 800e2b6:	d525      	bpl.n	800e304 <__swbuf_r+0x68>
 800e2b8:	6923      	ldr	r3, [r4, #16]
 800e2ba:	b31b      	cbz	r3, 800e304 <__swbuf_r+0x68>
 800e2bc:	6823      	ldr	r3, [r4, #0]
 800e2be:	6922      	ldr	r2, [r4, #16]
 800e2c0:	1a98      	subs	r0, r3, r2
 800e2c2:	6963      	ldr	r3, [r4, #20]
 800e2c4:	b2f6      	uxtb	r6, r6
 800e2c6:	4283      	cmp	r3, r0
 800e2c8:	4637      	mov	r7, r6
 800e2ca:	dc04      	bgt.n	800e2d6 <__swbuf_r+0x3a>
 800e2cc:	4621      	mov	r1, r4
 800e2ce:	4628      	mov	r0, r5
 800e2d0:	f7ff fe12 	bl	800def8 <_fflush_r>
 800e2d4:	b9e0      	cbnz	r0, 800e310 <__swbuf_r+0x74>
 800e2d6:	68a3      	ldr	r3, [r4, #8]
 800e2d8:	3b01      	subs	r3, #1
 800e2da:	60a3      	str	r3, [r4, #8]
 800e2dc:	6823      	ldr	r3, [r4, #0]
 800e2de:	1c5a      	adds	r2, r3, #1
 800e2e0:	6022      	str	r2, [r4, #0]
 800e2e2:	701e      	strb	r6, [r3, #0]
 800e2e4:	6962      	ldr	r2, [r4, #20]
 800e2e6:	1c43      	adds	r3, r0, #1
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d004      	beq.n	800e2f6 <__swbuf_r+0x5a>
 800e2ec:	89a3      	ldrh	r3, [r4, #12]
 800e2ee:	07db      	lsls	r3, r3, #31
 800e2f0:	d506      	bpl.n	800e300 <__swbuf_r+0x64>
 800e2f2:	2e0a      	cmp	r6, #10
 800e2f4:	d104      	bne.n	800e300 <__swbuf_r+0x64>
 800e2f6:	4621      	mov	r1, r4
 800e2f8:	4628      	mov	r0, r5
 800e2fa:	f7ff fdfd 	bl	800def8 <_fflush_r>
 800e2fe:	b938      	cbnz	r0, 800e310 <__swbuf_r+0x74>
 800e300:	4638      	mov	r0, r7
 800e302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e304:	4621      	mov	r1, r4
 800e306:	4628      	mov	r0, r5
 800e308:	f000 f806 	bl	800e318 <__swsetup_r>
 800e30c:	2800      	cmp	r0, #0
 800e30e:	d0d5      	beq.n	800e2bc <__swbuf_r+0x20>
 800e310:	f04f 37ff 	mov.w	r7, #4294967295
 800e314:	e7f4      	b.n	800e300 <__swbuf_r+0x64>
	...

0800e318 <__swsetup_r>:
 800e318:	b538      	push	{r3, r4, r5, lr}
 800e31a:	4b2a      	ldr	r3, [pc, #168]	; (800e3c4 <__swsetup_r+0xac>)
 800e31c:	4605      	mov	r5, r0
 800e31e:	6818      	ldr	r0, [r3, #0]
 800e320:	460c      	mov	r4, r1
 800e322:	b118      	cbz	r0, 800e32c <__swsetup_r+0x14>
 800e324:	6a03      	ldr	r3, [r0, #32]
 800e326:	b90b      	cbnz	r3, 800e32c <__swsetup_r+0x14>
 800e328:	f7fd fbc6 	bl	800bab8 <__sinit>
 800e32c:	89a3      	ldrh	r3, [r4, #12]
 800e32e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e332:	0718      	lsls	r0, r3, #28
 800e334:	d422      	bmi.n	800e37c <__swsetup_r+0x64>
 800e336:	06d9      	lsls	r1, r3, #27
 800e338:	d407      	bmi.n	800e34a <__swsetup_r+0x32>
 800e33a:	2309      	movs	r3, #9
 800e33c:	602b      	str	r3, [r5, #0]
 800e33e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e342:	81a3      	strh	r3, [r4, #12]
 800e344:	f04f 30ff 	mov.w	r0, #4294967295
 800e348:	e034      	b.n	800e3b4 <__swsetup_r+0x9c>
 800e34a:	0758      	lsls	r0, r3, #29
 800e34c:	d512      	bpl.n	800e374 <__swsetup_r+0x5c>
 800e34e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e350:	b141      	cbz	r1, 800e364 <__swsetup_r+0x4c>
 800e352:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e356:	4299      	cmp	r1, r3
 800e358:	d002      	beq.n	800e360 <__swsetup_r+0x48>
 800e35a:	4628      	mov	r0, r5
 800e35c:	f7fe fb76 	bl	800ca4c <_free_r>
 800e360:	2300      	movs	r3, #0
 800e362:	6363      	str	r3, [r4, #52]	; 0x34
 800e364:	89a3      	ldrh	r3, [r4, #12]
 800e366:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e36a:	81a3      	strh	r3, [r4, #12]
 800e36c:	2300      	movs	r3, #0
 800e36e:	6063      	str	r3, [r4, #4]
 800e370:	6923      	ldr	r3, [r4, #16]
 800e372:	6023      	str	r3, [r4, #0]
 800e374:	89a3      	ldrh	r3, [r4, #12]
 800e376:	f043 0308 	orr.w	r3, r3, #8
 800e37a:	81a3      	strh	r3, [r4, #12]
 800e37c:	6923      	ldr	r3, [r4, #16]
 800e37e:	b94b      	cbnz	r3, 800e394 <__swsetup_r+0x7c>
 800e380:	89a3      	ldrh	r3, [r4, #12]
 800e382:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e38a:	d003      	beq.n	800e394 <__swsetup_r+0x7c>
 800e38c:	4621      	mov	r1, r4
 800e38e:	4628      	mov	r0, r5
 800e390:	f000 f884 	bl	800e49c <__smakebuf_r>
 800e394:	89a0      	ldrh	r0, [r4, #12]
 800e396:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e39a:	f010 0301 	ands.w	r3, r0, #1
 800e39e:	d00a      	beq.n	800e3b6 <__swsetup_r+0x9e>
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	60a3      	str	r3, [r4, #8]
 800e3a4:	6963      	ldr	r3, [r4, #20]
 800e3a6:	425b      	negs	r3, r3
 800e3a8:	61a3      	str	r3, [r4, #24]
 800e3aa:	6923      	ldr	r3, [r4, #16]
 800e3ac:	b943      	cbnz	r3, 800e3c0 <__swsetup_r+0xa8>
 800e3ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e3b2:	d1c4      	bne.n	800e33e <__swsetup_r+0x26>
 800e3b4:	bd38      	pop	{r3, r4, r5, pc}
 800e3b6:	0781      	lsls	r1, r0, #30
 800e3b8:	bf58      	it	pl
 800e3ba:	6963      	ldrpl	r3, [r4, #20]
 800e3bc:	60a3      	str	r3, [r4, #8]
 800e3be:	e7f4      	b.n	800e3aa <__swsetup_r+0x92>
 800e3c0:	2000      	movs	r0, #0
 800e3c2:	e7f7      	b.n	800e3b4 <__swsetup_r+0x9c>
 800e3c4:	20000268 	.word	0x20000268

0800e3c8 <_raise_r>:
 800e3c8:	291f      	cmp	r1, #31
 800e3ca:	b538      	push	{r3, r4, r5, lr}
 800e3cc:	4604      	mov	r4, r0
 800e3ce:	460d      	mov	r5, r1
 800e3d0:	d904      	bls.n	800e3dc <_raise_r+0x14>
 800e3d2:	2316      	movs	r3, #22
 800e3d4:	6003      	str	r3, [r0, #0]
 800e3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3da:	bd38      	pop	{r3, r4, r5, pc}
 800e3dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e3de:	b112      	cbz	r2, 800e3e6 <_raise_r+0x1e>
 800e3e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e3e4:	b94b      	cbnz	r3, 800e3fa <_raise_r+0x32>
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	f000 f830 	bl	800e44c <_getpid_r>
 800e3ec:	462a      	mov	r2, r5
 800e3ee:	4601      	mov	r1, r0
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e3f6:	f000 b817 	b.w	800e428 <_kill_r>
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d00a      	beq.n	800e414 <_raise_r+0x4c>
 800e3fe:	1c59      	adds	r1, r3, #1
 800e400:	d103      	bne.n	800e40a <_raise_r+0x42>
 800e402:	2316      	movs	r3, #22
 800e404:	6003      	str	r3, [r0, #0]
 800e406:	2001      	movs	r0, #1
 800e408:	e7e7      	b.n	800e3da <_raise_r+0x12>
 800e40a:	2400      	movs	r4, #0
 800e40c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e410:	4628      	mov	r0, r5
 800e412:	4798      	blx	r3
 800e414:	2000      	movs	r0, #0
 800e416:	e7e0      	b.n	800e3da <_raise_r+0x12>

0800e418 <raise>:
 800e418:	4b02      	ldr	r3, [pc, #8]	; (800e424 <raise+0xc>)
 800e41a:	4601      	mov	r1, r0
 800e41c:	6818      	ldr	r0, [r3, #0]
 800e41e:	f7ff bfd3 	b.w	800e3c8 <_raise_r>
 800e422:	bf00      	nop
 800e424:	20000268 	.word	0x20000268

0800e428 <_kill_r>:
 800e428:	b538      	push	{r3, r4, r5, lr}
 800e42a:	4d07      	ldr	r5, [pc, #28]	; (800e448 <_kill_r+0x20>)
 800e42c:	2300      	movs	r3, #0
 800e42e:	4604      	mov	r4, r0
 800e430:	4608      	mov	r0, r1
 800e432:	4611      	mov	r1, r2
 800e434:	602b      	str	r3, [r5, #0]
 800e436:	f7f5 f973 	bl	8003720 <_kill>
 800e43a:	1c43      	adds	r3, r0, #1
 800e43c:	d102      	bne.n	800e444 <_kill_r+0x1c>
 800e43e:	682b      	ldr	r3, [r5, #0]
 800e440:	b103      	cbz	r3, 800e444 <_kill_r+0x1c>
 800e442:	6023      	str	r3, [r4, #0]
 800e444:	bd38      	pop	{r3, r4, r5, pc}
 800e446:	bf00      	nop
 800e448:	20000bb0 	.word	0x20000bb0

0800e44c <_getpid_r>:
 800e44c:	f7f5 b960 	b.w	8003710 <_getpid>

0800e450 <__swhatbuf_r>:
 800e450:	b570      	push	{r4, r5, r6, lr}
 800e452:	460c      	mov	r4, r1
 800e454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e458:	2900      	cmp	r1, #0
 800e45a:	b096      	sub	sp, #88	; 0x58
 800e45c:	4615      	mov	r5, r2
 800e45e:	461e      	mov	r6, r3
 800e460:	da0d      	bge.n	800e47e <__swhatbuf_r+0x2e>
 800e462:	89a3      	ldrh	r3, [r4, #12]
 800e464:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e468:	f04f 0100 	mov.w	r1, #0
 800e46c:	bf0c      	ite	eq
 800e46e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e472:	2340      	movne	r3, #64	; 0x40
 800e474:	2000      	movs	r0, #0
 800e476:	6031      	str	r1, [r6, #0]
 800e478:	602b      	str	r3, [r5, #0]
 800e47a:	b016      	add	sp, #88	; 0x58
 800e47c:	bd70      	pop	{r4, r5, r6, pc}
 800e47e:	466a      	mov	r2, sp
 800e480:	f000 f848 	bl	800e514 <_fstat_r>
 800e484:	2800      	cmp	r0, #0
 800e486:	dbec      	blt.n	800e462 <__swhatbuf_r+0x12>
 800e488:	9901      	ldr	r1, [sp, #4]
 800e48a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e48e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e492:	4259      	negs	r1, r3
 800e494:	4159      	adcs	r1, r3
 800e496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e49a:	e7eb      	b.n	800e474 <__swhatbuf_r+0x24>

0800e49c <__smakebuf_r>:
 800e49c:	898b      	ldrh	r3, [r1, #12]
 800e49e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e4a0:	079d      	lsls	r5, r3, #30
 800e4a2:	4606      	mov	r6, r0
 800e4a4:	460c      	mov	r4, r1
 800e4a6:	d507      	bpl.n	800e4b8 <__smakebuf_r+0x1c>
 800e4a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e4ac:	6023      	str	r3, [r4, #0]
 800e4ae:	6123      	str	r3, [r4, #16]
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	6163      	str	r3, [r4, #20]
 800e4b4:	b002      	add	sp, #8
 800e4b6:	bd70      	pop	{r4, r5, r6, pc}
 800e4b8:	ab01      	add	r3, sp, #4
 800e4ba:	466a      	mov	r2, sp
 800e4bc:	f7ff ffc8 	bl	800e450 <__swhatbuf_r>
 800e4c0:	9900      	ldr	r1, [sp, #0]
 800e4c2:	4605      	mov	r5, r0
 800e4c4:	4630      	mov	r0, r6
 800e4c6:	f7fb ff39 	bl	800a33c <_malloc_r>
 800e4ca:	b948      	cbnz	r0, 800e4e0 <__smakebuf_r+0x44>
 800e4cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4d0:	059a      	lsls	r2, r3, #22
 800e4d2:	d4ef      	bmi.n	800e4b4 <__smakebuf_r+0x18>
 800e4d4:	f023 0303 	bic.w	r3, r3, #3
 800e4d8:	f043 0302 	orr.w	r3, r3, #2
 800e4dc:	81a3      	strh	r3, [r4, #12]
 800e4de:	e7e3      	b.n	800e4a8 <__smakebuf_r+0xc>
 800e4e0:	89a3      	ldrh	r3, [r4, #12]
 800e4e2:	6020      	str	r0, [r4, #0]
 800e4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e4e8:	81a3      	strh	r3, [r4, #12]
 800e4ea:	9b00      	ldr	r3, [sp, #0]
 800e4ec:	6163      	str	r3, [r4, #20]
 800e4ee:	9b01      	ldr	r3, [sp, #4]
 800e4f0:	6120      	str	r0, [r4, #16]
 800e4f2:	b15b      	cbz	r3, 800e50c <__smakebuf_r+0x70>
 800e4f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4f8:	4630      	mov	r0, r6
 800e4fa:	f000 f81d 	bl	800e538 <_isatty_r>
 800e4fe:	b128      	cbz	r0, 800e50c <__smakebuf_r+0x70>
 800e500:	89a3      	ldrh	r3, [r4, #12]
 800e502:	f023 0303 	bic.w	r3, r3, #3
 800e506:	f043 0301 	orr.w	r3, r3, #1
 800e50a:	81a3      	strh	r3, [r4, #12]
 800e50c:	89a3      	ldrh	r3, [r4, #12]
 800e50e:	431d      	orrs	r5, r3
 800e510:	81a5      	strh	r5, [r4, #12]
 800e512:	e7cf      	b.n	800e4b4 <__smakebuf_r+0x18>

0800e514 <_fstat_r>:
 800e514:	b538      	push	{r3, r4, r5, lr}
 800e516:	4d07      	ldr	r5, [pc, #28]	; (800e534 <_fstat_r+0x20>)
 800e518:	2300      	movs	r3, #0
 800e51a:	4604      	mov	r4, r0
 800e51c:	4608      	mov	r0, r1
 800e51e:	4611      	mov	r1, r2
 800e520:	602b      	str	r3, [r5, #0]
 800e522:	f7f5 f95c 	bl	80037de <_fstat>
 800e526:	1c43      	adds	r3, r0, #1
 800e528:	d102      	bne.n	800e530 <_fstat_r+0x1c>
 800e52a:	682b      	ldr	r3, [r5, #0]
 800e52c:	b103      	cbz	r3, 800e530 <_fstat_r+0x1c>
 800e52e:	6023      	str	r3, [r4, #0]
 800e530:	bd38      	pop	{r3, r4, r5, pc}
 800e532:	bf00      	nop
 800e534:	20000bb0 	.word	0x20000bb0

0800e538 <_isatty_r>:
 800e538:	b538      	push	{r3, r4, r5, lr}
 800e53a:	4d06      	ldr	r5, [pc, #24]	; (800e554 <_isatty_r+0x1c>)
 800e53c:	2300      	movs	r3, #0
 800e53e:	4604      	mov	r4, r0
 800e540:	4608      	mov	r0, r1
 800e542:	602b      	str	r3, [r5, #0]
 800e544:	f7f5 f95b 	bl	80037fe <_isatty>
 800e548:	1c43      	adds	r3, r0, #1
 800e54a:	d102      	bne.n	800e552 <_isatty_r+0x1a>
 800e54c:	682b      	ldr	r3, [r5, #0]
 800e54e:	b103      	cbz	r3, 800e552 <_isatty_r+0x1a>
 800e550:	6023      	str	r3, [r4, #0]
 800e552:	bd38      	pop	{r3, r4, r5, pc}
 800e554:	20000bb0 	.word	0x20000bb0

0800e558 <_init>:
 800e558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e55a:	bf00      	nop
 800e55c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e55e:	bc08      	pop	{r3}
 800e560:	469e      	mov	lr, r3
 800e562:	4770      	bx	lr

0800e564 <_fini>:
 800e564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e566:	bf00      	nop
 800e568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e56a:	bc08      	pop	{r3}
 800e56c:	469e      	mov	lr, r3
 800e56e:	4770      	bx	lr
